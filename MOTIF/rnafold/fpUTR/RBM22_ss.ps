%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAGCCCUAGACGCGUAAAUAAGACGCCGACCGGCGCGGCGCUAGCCUCGGGGCUUGACGGGAUUGUGGCGGUCCUCUCUCCCAAUUCGGAAGCUACAGCUACCUCCGGACGCUCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[87.97337341 324.24932861]
[74.00282288 330.18130493]
[58.83267975 330.66204834]
[44.51457214 325.62655640]
[32.98490524 315.75582886]
[25.80297279 302.38482666]
[23.94007492 287.32180786]
[27.64814949 272.60397339]
[36.42571259 260.22177124]
[49.08567047 251.84980774]
[63.91586685 248.62030029]
[66.20560455 233.79609680]
[68.49534607 218.97189331]
[66.38237000 211.79788208]
[71.03752136 203.80029297]
[73.70510101 189.03939819]
[76.37268829 174.27850342]
[79.04026794 159.51760864]
[74.49357605 153.55291748]
[65.07580566 165.22790527]
[56.91216660 177.81182861]
[41.92293930 178.38027954]
[32.82966232 166.45080566]
[37.34989929 152.14810181]
[51.64700317 147.61097717]
[65.40019989 141.62351990]
[60.85350418 135.65882874]
[45.91340256 134.31968689]
[30.97329712 132.98054504]
[16.03319359 131.64140320]
[1.39152944 139.02745056]
[-12.17565823 129.81532288]
[-10.71160984 113.48165131]
[4.27758741 106.82913208]
[17.37233162 116.70130157]
[32.31243515 118.04044342]
[47.25254059 119.37957764]
[62.19264603 120.71871948]
[61.75381470 100.48765564]
[70.32213593 84.70700073]
[58.87261963 75.01635742]
[47.42309952 65.32571411]
[31.19792366 62.94335938]
[25.40083504 47.60302353]
[35.99538803 35.08553696]
[52.08280945 38.26781082]
[57.11374283 53.87619781]
[68.56326294 63.56683731]
[80.01277924 73.25747681]
[87.48557281 69.04776764]
[95.78429413 66.88083649]
[104.36123657 66.89968109]
[109.61135864 52.84848404]
[114.86148071 38.79728317]
[120.11160278 24.74608040]
[119.19564819 19.36828232]
[120.39022827 14.68286610]
[123.05017090 11.39755726]
[126.33918762 9.84608173]
[132.64950562 -3.76199746]
[131.43576050 -19.53657722]
[143.80929565 -27.82783508]
[150.11961365 -41.43591309]
[156.42994690 -55.04399109]
[162.74026489 -68.65206909]
[169.05059814 -82.26014709]
[175.36091614 -95.86822510]
[181.67123413 -109.47631073]
[182.84930420 -126.38927460]
[199.42742920 -129.93922424]
[207.42793274 -114.99170685]
[195.27932739 -103.16598511]
[188.96899414 -89.55790710]
[182.65867615 -75.94982910]
[176.34834290 -62.34174728]
[170.03802490 -48.73366928]
[163.72770691 -35.12558746]
[157.41737366 -21.51750946]
[159.08247375 -6.71627092]
[146.25758362 2.54832649]
[139.94726562 16.15640450]
[134.16279602 29.99620056]
[128.91267395 44.04740143]
[123.66255951 58.09860229]
[118.41243744 72.14980316]
[132.66944885 85.31580353]
[137.86538696 105.40563965]
[130.95596313 126.39414978]
[112.76331329 141.17959595]
[126.60311127 146.96406555]
[140.44290161 152.74853516]
[154.28269958 158.53300476]
[168.12249756 164.31745911]
[182.17369080 169.56758118]
[196.41567993 174.27565002]
[210.65766907 178.98371887]
[226.59712219 175.12811279]
[237.70841980 187.18925476]
[232.56118774 202.75968933]
[216.45048523 205.82186890]
[205.94960022 193.22570801]
[191.70761108 188.51763916]
[177.46562195 183.80957031]
[174.08384705 185.14683533]
[169.86795044 184.83905029]
[165.63348389 182.50463867]
[162.33802795 178.15725708]
[148.49822998 172.37278748]
[134.65843201 166.58833313]
[120.81864166 160.80386353]
[106.97884369 155.01939392]
[93.80116272 162.18519592]
[91.13358307 176.94609070]
[88.46599579 191.70698547]
[85.79841614 206.46788025]
[83.31954956 221.26162720]
[81.02981567 236.08583069]
[78.74007416 250.91004944]
[91.90472412 258.46362305]
[101.44868469 270.26519775]
[106.08121490 284.71871948]
[105.17581177 299.86944580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 118]
[12 117]
[13 116]
[15 115]
[16 114]
[17 113]
[18 112]
[27 38]
[28 37]
[29 36]
[30 35]
[40 49]
[41 48]
[42 47]
[52 85]
[53 84]
[54 83]
[55 82]
[59 81]
[60 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
[89 111]
[90 110]
[91 109]
[92 108]
[93 107]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
