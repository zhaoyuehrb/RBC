%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGAAAAACCUCACCUACUCUCGCGGGUCCUCAGCGUUCUCCUGCGGAACCUUUGAACGGGGUACUCGAGCCCACAGGGGAAGAGCAGCGGAAGGGGCCUUUCGGAACGAUUUGGAACGAAAGGAAGUGGAAGAAACGCGGAACC\
) } def
/len { sequence length } bind def

/coor [
[56.51042557 384.87393188]
[52.36061859 399.37326050]
[44.73464584 412.38461304]
[34.11187744 423.09008789]
[21.16007614 430.81677246]
[6.69339657 435.07894897]
[-8.37877083 435.60864258]
[-23.10897636 432.37261963]
[-36.57126617 425.57427979]
[-47.91939545 415.64096069]
[-56.44000244 403.19708252]
[-61.59748077 389.02490234]
[-63.06762695 374.01525879]
[-60.75802231 359.11166382]
[-54.81385040 345.25100708]
[-45.60877228 333.30456543]
[-33.72142410 324.02331543]
[-19.89905357 317.99066162]
[-5.01054811 315.58584595]
[10.00819016 316.95999146]
[15.03794956 302.82843018]
[14.31252766 295.41970825]
[20.32913780 288.45056152]
[25.65973663 274.42968750]
[30.99033737 260.40881348]
[36.32093811 246.38795471]
[30.00389290 232.94807434]
[35.21014786 218.65298462]
[49.34996796 212.11820984]
[54.68056870 198.09735107]
[51.97125626 183.45123291]
[64.10771179 173.30149841]
[69.43831635 159.28062439]
[66.72900391 144.63450623]
[78.86546326 134.48478699]
[84.19606018 120.46391296]
[74.14983368 99.44746399]
[85.08491516 78.87947845]
[80.35829163 64.64364624]
[75.63166809 50.40780640]
[70.90504456 36.17197037]
[59.21336365 25.51292419]
[62.54602814 10.99594688]
[57.81940460 -3.23988914]
[53.09278107 -17.47572517]
[48.36615753 -31.71156120]
[33.40602112 -34.89615250]
[22.12302017 -45.07410431]
[17.48026466 -59.43764114]
[20.62934875 -74.09844971]
[30.62663269 -85.14018250]
[25.90000916 -99.37601471]
[21.17338753 -113.61185455]
[16.44676399 -127.84768677]
[11.72014046 -142.08352661]
[6.99351692 -156.31936646]
[-2.04122901 -159.42961121]
[-8.50508690 -166.27761841]
[-11.01424026 -175.21043396]
[-9.11876869 -184.15199280]
[-3.37735128 -191.08534241]
[-7.18216991 -205.59477234]
[-10.98698902 -220.10418701]
[-14.79180813 -234.61361694]
[-28.56106758 -242.37138367]
[-32.73130035 -257.61557007]
[-24.82838440 -271.30203247]
[-9.54097652 -275.31085205]
[4.06117392 -267.26367188]
[7.90815258 -251.93475342]
[-0.28238472 -238.41844177]
[3.52243400 -223.90901184]
[7.32725286 -209.39959717]
[11.13207150 -194.89016724]
[26.92052078 -181.65742493]
[21.22935295 -161.04598999]
[25.95597649 -146.81015015]
[30.68260002 -132.57431030]
[35.40922165 -118.33847809]
[40.13584518 -104.10263824]
[44.86246872 -89.86680603]
[59.47860718 -86.99729156]
[70.77111053 -77.13141632]
[75.64132690 -62.84340286]
[72.68650818 -47.93817520]
[62.60199356 -36.43818665]
[67.32861328 -22.20234871]
[72.05523682 -7.96651220]
[76.78186035 6.26932383]
[88.13545990 15.91012764]
[85.14087677 31.44534683]
[89.86750031 45.68118286]
[94.59412384 59.91701889]
[99.32074738 74.15285492]
[106.37787628 74.94288635]
[112.95392609 77.62295532]
[118.55287170 81.99091339]
[122.75238800 87.71727753]
[125.23570251 94.37012482]
[140.19375610 95.49107361]
[155.15182495 96.61203003]
[170.10987854 97.73297882]
[185.06793213 98.85392761]
[200.02598572 99.97488403]
[214.98403931 101.09583282]
[222.16336060 87.66537476]
[234.18864441 78.32125092]
[248.97642517 74.68239594]
[263.96466064 77.37926483]
[276.55651855 85.94460297]
[284.57037354 98.89441681]
[286.61782837 113.98506927]
[282.34411621 128.60202026]
[272.48965454 140.21278381]
[258.76184082 146.80574036]
[243.53909302 147.23860168]
[229.45881653 141.43640137]
[218.96052551 130.40435791]
[213.86309814 116.05388641]
[198.90504456 114.93293762]
[183.94697571 113.81198883]
[168.98892212 112.69103241]
[154.03086853 111.57008362]
[139.07281494 110.44913483]
[124.11475372 109.32817841]
[118.14958954 118.41544342]
[108.97654724 124.24784088]
[98.21692657 125.79450989]
[92.88632965 139.81538391]
[95.21435547 155.46437073]
[83.45918274 164.61123657]
[78.12857819 178.63209534]
[80.45661163 194.28108215]
[68.70143127 203.42794800]
[63.37083435 217.44882202]
[69.59782410 231.72685242]
[63.99210739 245.87007141]
[50.34180450 251.71856689]
[45.01120377 265.73944092]
[39.68060303 279.76028442]
[34.35000610 293.78115845]
[29.16952896 307.85818481]
[24.13976860 321.98977661]
[36.64936829 330.41357422]
[46.67042542 341.68429565]
[53.57300186 355.09344482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 143]
[21 142]
[23 141]
[24 140]
[25 139]
[26 138]
[29 135]
[30 134]
[32 132]
[33 131]
[35 129]
[36 128]
[38 94]
[39 93]
[40 92]
[41 91]
[43 89]
[44 88]
[45 87]
[46 86]
[51 81]
[52 80]
[53 79]
[54 78]
[55 77]
[56 76]
[61 74]
[62 73]
[63 72]
[64 71]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
