%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCUGGCUUGGGGGUAUCGGAGCCGGGAUUGGGGGGAGCGGGCCCCACGUGCCUGUGACGCGGGGGCGCCCGGUAGGUGGCGGCGGCGACGCGGGGCCGGCGGCCGUGCGGUGCCGGGAGGGCGGCUGGGCAGGCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[135.31773376 171.10023499]
[121.57947540 165.07858276]
[110.32018280 155.16755676]
[102.60324097 142.30143738]
[92.71305847 153.57904053]
[82.82286835 164.85662842]
[72.93268585 176.13423157]
[63.04249573 187.41183472]
[53.15230942 198.68942261]
[43.26211929 209.96702576]
[33.37193298 221.24461365]
[30.09005737 236.72169495]
[15.88117409 241.18901062]
[5.99098682 252.46659851]
[3.32410192 268.64746094]
[-12.11565590 274.17428589]
[-24.44518852 263.36157227]
[-20.98092842 247.33250427]
[-5.28661060 242.57641602]
[4.60357666 231.29882812]
[7.17804003 216.62838745]
[22.09433556 211.35443115]
[31.98452377 200.07682800]
[41.87471008 188.79924011]
[51.76489639 177.52163696]
[61.65508652 166.24404907]
[71.54527283 154.96644592]
[81.43546295 143.68884277]
[91.32564545 132.41125488]
[88.91484833 125.30928040]
[84.09326172 111.10532379]
[81.68246460 104.00334930]
[66.97068024 101.07699585]
[52.25890350 98.15064240]
[37.54712677 95.22428131]
[22.83534622 92.29792786]
[11.53264809 102.92942047]
[-3.86467195 104.85352325]
[-17.43603134 97.33036804]
[-23.96296501 83.25276947]
[-20.93573380 68.03385162]
[-9.51836967 57.52559662]
[5.89891720 55.76864243]
[19.38786697 63.43857574]
[25.76170158 77.58615112]
[40.47348022 80.51250458]
[55.18526077 83.43885803]
[69.89704132 86.36521149]
[84.60881805 89.29157257]
[88.97740173 83.19522095]
[102.08314514 64.90616608]
[94.58314514 51.91578674]
[80.98236084 43.83313751]
[81.31942749 28.94234848]
[73.81942749 15.95196629]
[66.31942749 2.96158552]
[58.81942749 -10.02879524]
[51.31942749 -23.01917648]
[38.16357803 -33.71309662]
[44.79767227 -49.31518555]
[61.62652588 -47.25943756]
[64.30980682 -30.51917648]
[71.80980682 -17.52879524]
[79.30980682 -4.53841448]
[86.80980682 8.45196629]
[94.30980682 21.44234848]
[107.37414551 28.59583855]
[107.57353210 44.41578674]
[115.07353210 57.40616989]
[128.99351501 62.99491119]
[143.39425659 58.79747772]
[157.79501343 54.60004425]
[172.19575500 50.40260696]
[186.59651184 46.20517349]
[200.99725342 42.00773621]
[215.39799500 37.81030273]
[222.30973816 26.86186028]
[234.44792175 23.69003487]
[245.12510681 29.47561455]
[259.61398315 25.59332848]
[262.52438354 10.65040112]
[271.59707642 -1.49756718]
[284.98965454 -8.47315121]
[300.02105713 -8.94028950]
[313.70819092 -2.85986304]
[323.35806274 8.51315880]
[337.84695435 4.63087273]
[352.33584595 0.74858719]
[366.82470703 -3.13369846]
[374.75878906 -16.53849411]
[389.50787354 -20.26928329]
[402.23840332 -12.62276554]
[416.72729492 -16.50505066]
[431.21618652 -20.38733673]
[445.70507812 -24.26962280]
[457.03244019 -35.31502914]
[471.32861328 -31.13542938]
[485.81750488 -35.01771545]
[500.30639648 -38.90000153]
[514.79528809 -42.78228760]
[528.52978516 -52.72207260]
[541.88323975 -42.27590942]
[535.54187012 -26.55255318]
[518.67755127 -28.29339981]
[504.18865967 -24.41111374]
[489.69976807 -20.52882767]
[475.21090698 -16.64654350]
[464.91986084 -5.87882423]
[449.58734131 -9.78073502]
[435.09844971 -5.89844942]
[420.60958862 -2.01616383]
[406.12069702 1.86612189]
[398.91897583 14.85346508]
[384.28048706 18.99705505]
[370.70700073 11.35518932]
[356.21810913 15.23747444]
[341.72921753 19.11976051]
[327.24035645 23.00204659]
[324.56982422 37.67630386]
[315.75662231 49.78567886]
[302.50549316 56.89682007]
[287.41937256 57.55208206]
[273.48822021 51.56798172]
[263.49627686 40.08221436]
[249.00740051 43.96450043]
[237.33319092 57.02386093]
[219.59542847 52.21104813]
[205.19468689 56.40848541]
[190.79394531 60.60591888]
[176.39318848 64.80335236]
[161.99244690 69.00079346]
[147.59169006 73.19822693]
[133.19094849 77.39566040]
[148.02302551 75.15745544]
[162.83396912 77.53140259]
[176.22352600 84.29306793]
[186.92575073 94.80317688]
[193.92881775 108.06805420]
[196.57064819 122.83358002]
[194.60145569 137.70376587]
[188.20741272 151.27270508]
[177.99305725 162.25755310]
[164.92407227 169.61973572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[13 20]
[14 19]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[51 69]
[52 68]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[70 133]
[71 132]
[72 131]
[73 130]
[74 129]
[75 128]
[76 127]
[79 125]
[80 124]
[86 118]
[87 117]
[88 116]
[89 115]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
