%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGGGGACUGUGCGGGAAGCUGGGGGUGGAUGCAUGGUGGGGCCCGGGGUUCUGGGCCGGGAUGCAGCCCUACUGAGCCCCUUUCUGGUUCUCCACAGGUG\
) } def
/len { sequence length } bind def

/coor [
[73.97943878 435.71508789]
[59.38391876 440.17980957]
[44.29795074 437.86111450]
[31.71685982 429.21942139]
[24.13863182 415.97052002]
[23.06793022 400.74499512]
[28.71734238 386.56591797]
[39.96517563 376.24850464]
[54.57815933 371.84130859]
[56.85687256 357.01538086]
[59.13558197 342.18948364]
[61.41429138 327.36358643]
[63.69300461 312.53765869]
[61.56185150 305.32601929]
[66.27392578 297.29718018]
[69.00371552 282.54763794]
[71.73349762 267.79812622]
[74.46327972 253.04861450]
[77.19306946 238.29910278]
[63.59819794 225.73246765]
[60.09933090 207.40341187]
[68.23615265 190.44798279]
[84.98343658 181.57304382]
[86.35406494 166.63578796]
[87.72468567 151.69854736]
[89.09531403 136.76129150]
[90.46594238 121.82404327]
[91.83657074 106.88679504]
[91.60781860 91.88854218]
[89.78230286 77.00003815]
[80.42301941 64.24408722]
[86.55387878 50.66978073]
[84.72836304 35.78127670]
[82.90284729 20.89277649]
[81.07733154 6.00427437]
[79.25180817 -8.88422775]
[67.44279480 -13.54295921]
[58.83563232 -22.77495003]
[55.05839920 -34.74207687]
[56.78593063 -47.09815216]
[63.62022400 -57.44887161]
[74.17987823 -63.81576157]
[73.26541901 -78.78785706]
[72.35095978 -93.75995636]
[71.43650055 -108.73206329]
[70.52204132 -123.70416260]
[69.60758209 -138.67625427]
[68.69312286 -153.64836121]
[59.19668579 -167.01808167]
[66.27205658 -181.81237793]
[82.64070129 -182.81213379]
[91.46395874 -168.98889160]
[83.66522217 -154.56282043]
[84.57968140 -139.59071350]
[85.49414062 -124.61862183]
[86.40859985 -109.64652252]
[87.32305908 -94.67442322]
[88.23751831 -79.70232391]
[89.15197754 -64.73021698]
[104.39279938 -56.08249283]
[111.57238770 -39.92773819]
[107.71077728 -22.51752090]
[94.14031219 -10.70974445]
[95.96582794 4.17875719]
[97.79135132 19.06725883]
[99.61686707 33.95576096]
[101.44238281 48.84426117]
[110.67109680 60.53528976]
[104.67080688 75.17452240]
[106.49632263 90.06302643]
[116.63802338 79.01106262]
[131.47575378 76.81067657]
[144.38839722 84.44374847]
[149.61386108 98.50413513]
[144.82035828 112.71759796]
[132.14692688 120.74156952]
[117.24890137 118.99548340]
[106.77381897 108.25742340]
[105.40319061 123.19467163]
[104.03256226 138.13192749]
[102.66193390 153.06916809]
[101.29131317 168.00642395]
[99.92068481 182.94366455]
[109.96126556 189.05187988]
[116.89860535 198.47415161]
[119.72470093 209.77491760]
[118.05423737 221.25082397]
[112.17658997 231.18757629]
[103.00665283 238.11590576]
[91.94258118 241.02888489]
[89.21279907 255.77839661]
[86.48301697 270.52792358]
[83.75323486 285.27743530]
[81.02344513 300.02694702]
[78.51890564 314.81637573]
[76.24019623 329.64230347]
[73.96148682 344.46820068]
[71.68277740 359.29409790]
[69.40406799 374.11999512]
[82.01908875 382.71209717]
[89.64943695 395.93103027]
[90.78008270 411.15222168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 70]
[30 69]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
