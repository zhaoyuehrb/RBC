%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCCCAGCUCUGUGACAUCACAGACAGCCUUCUGUCUACUCUGCCAGCUGCAGGAAACAGCCCAGCCCAGUGAACUGGGCUCAAACUCAAGACUGGCUGAUUCAACAAGGCACCCCUGCAGACAAAGCUGGCAGAGUAGAAGUUUCAACUCCUUUCC\
) } def
/len { sequence length } bind def

/coor [
[17.95664215 427.00128174]
[10.11847878 429.12600708]
[2.08130503 430.27661133]
[-6.03432035 430.43630981]
[-14.10671997 429.60321045]
[-22.01492119 427.79022217]
[-29.64047050 425.02502441]
[-36.86920547 421.34945679]
[-43.59296799 416.81912231]
[-53.98927689 427.63192749]
[-64.17128754 438.64675903]
[-74.13507843 449.85937500]
[-84.09886169 461.07199097]
[-94.06265259 472.28463745]
[-104.02643585 483.49725342]
[-113.99021912 494.70986938]
[-116.76295471 510.87292480]
[-132.23855591 516.29858398]
[-144.49705505 505.40542603]
[-140.92796326 489.39935303]
[-125.20285034 484.74609375]
[-115.23905945 473.53347778]
[-105.27527618 462.32083130]
[-95.31148529 451.10821533]
[-85.34770203 439.89559937]
[-75.38391113 428.68295288]
[-74.77273560 423.89871216]
[-71.11606598 419.46322632]
[-64.80208588 417.23559570]
[-54.40577316 406.42279053]
[-66.07513428 385.74719238]
[-69.70761108 362.26339722]
[-64.82143402 338.98593140]
[-52.02935410 318.90832520]
[-32.96183395 304.61813354]
[-10.05925560 297.96340942]
[13.74042130 299.81372070]
[19.20747757 285.84548950]
[24.67453575 271.87728882]
[30.14159393 257.90905762]
[35.60865021 243.94082642]
[41.07570648 229.97261047]
[46.54276657 216.00437927]
[52.00982285 202.03616333]
[57.47687912 188.06793213]
[62.94393921 174.09971619]
[68.41099548 160.13148499]
[73.87805176 146.16325378]
[79.34510803 132.19503784]
[84.81217194 118.22681427]
[90.27922821 104.25859070]
[94.91448212 89.99274445]
[98.70185089 75.47875214]
[102.48922729 60.96476746]
[106.27660370 46.45078278]
[110.06397247 31.93679619]
[112.11916351 17.07825470]
[112.41366577 2.08114696]
[104.94880676 -11.86827660]
[112.93449402 -24.44118309]
[113.22900391 -39.43829346]
[113.52350616 -54.43540192]
[113.81801605 -69.43251038]
[114.11251831 -84.42961884]
[109.04132843 -94.13844299]
[112.25275421 -103.31213379]
[109.03811646 -117.96362305]
[105.82347870 -132.61511230]
[102.60884094 -147.26660156]
[99.39420319 -161.91809082]
[96.17956543 -176.56958008]
[92.96492767 -191.22105408]
[81.51852417 -202.96464539]
[86.22539520 -218.67379761]
[102.24352264 -222.18827820]
[113.09482574 -209.89270020]
[107.61641693 -194.43569946]
[110.83105469 -179.78421021]
[114.04569244 -165.13272095]
[117.26033020 -150.48123169]
[120.47496796 -135.82974243]
[123.68960571 -121.17826080]
[126.90424347 -106.52677155]
[132.89431763 -120.27882385]
[143.81851196 -130.55801392]
[157.90924072 -135.70112610]
[172.88652039 -134.87594604]
[186.32696533 -128.21601868]
[196.05580139 -116.79894257]
[200.49887085 -102.47207642]
[198.93724060 -87.55358887]
[191.62361145 -74.45737457]
[179.74134827 -65.30249023]
[165.21310425 -61.57023621]
[150.38958740 -63.86452103]
[137.66937256 -71.81411743]
[129.10963440 -84.13511658]
[128.81512451 -69.13800049]
[128.52061462 -54.14089584]
[128.22610474 -39.14378738]
[127.93160248 -24.14667892]
[135.41752625 -11.26994801]
[127.41077423 2.37565231]
[127.11627197 17.37276077]
[135.97421265 5.26751995]
[149.15324402 -1.89579368]
[164.12918091 -2.74518299]
[178.03364563 2.88203669]
[188.20352173 13.90807819]
[192.69096375 28.22111130]
[190.63647461 43.07974625]
[182.43354797 55.63809586]
[169.65332031 63.49084473]
[154.74357605 65.13394165]
[140.56002808 60.25269318]
[129.81922913 49.78200531]
[124.57796478 35.72417068]
[120.79058838 50.23815536]
[117.00321198 64.75214386]
[113.21584320 79.26612854]
[109.42846680 93.78011322]
[123.03212738 87.46026611]
[137.18145752 92.43987274]
[143.82861328 105.88662720]
[139.19282532 120.15230560]
[125.91082764 127.12287140]
[111.53716278 122.83361053]
[104.24745178 109.72564697]
[98.78039551 123.69387054]
[93.31333160 137.66209412]
[87.84627533 151.63032532]
[82.37921906 165.59854126]
[76.91216278 179.56677246]
[71.44510651 193.53498840]
[65.97805023 207.50321960]
[60.51099014 221.47143555]
[55.04393387 235.43966675]
[49.57687378 249.40788269]
[44.10981750 263.37609863]
[38.64276123 277.34432983]
[33.17570114 291.31256104]
[27.70864487 305.28079224]
[34.66722488 309.53793335]
[41.05186462 314.61239624]
[46.76714325 320.42773438]
[51.72771072 326.89642334]
[55.85956955 333.92120361]
[59.10118103 341.39654541]
[61.40438080 349.21014404]
[62.73508835 357.24478149]
[63.07381058 365.37988281]
[62.41594696 373.49349976]
[60.77182388 381.46401978]
[58.16655350 389.17202759]
[54.63962936 396.50216675]
[50.24435806 403.34466553]
[45.04702759 409.59729004]
[39.12591171 415.16653442]
[32.57010269 419.96923828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 30]
[10 29]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[37 142]
[38 141]
[39 140]
[40 139]
[41 138]
[42 137]
[43 136]
[44 135]
[45 134]
[46 133]
[47 132]
[48 131]
[49 130]
[50 129]
[51 128]
[52 121]
[53 120]
[54 119]
[55 118]
[56 117]
[57 104]
[58 103]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[66 83]
[67 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
