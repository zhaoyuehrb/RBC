%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCUCUCUCUGGUCGGAGGCGGCGGUAAUGGCGGAUGGUGGGUUGUGGCGCCGGCGGCGGCUGCUGUGAGGGACG\
) } def
/len { sequence length } bind def

/coor [
[121.95527649 217.10614014]
[121.35128784 202.11830139]
[120.74729919 187.13047791]
[120.14331055 172.14263916]
[119.53932190 157.15480042]
[118.93533325 142.16696167]
[118.33134460 127.17913055]
[111.99241638 123.17063904]
[92.97563934 111.14515686]
[79.17594910 117.02465820]
[65.37625885 122.90415192]
[51.57656479 128.78366089]
[42.16283417 142.21174622]
[25.85285568 140.50392151]
[19.42493820 125.41704559]
[29.49157143 112.47119904]
[45.69706345 114.98396301]
[59.49675751 109.10446167]
[73.29644775 103.22496033]
[87.09613800 97.34546661]
[98.12122345 87.17455292]
[105.09207153 73.89270782]
[112.06291962 60.61087036]
[119.03376770 47.32902908]
[126.00461578 34.04718781]
[132.97546387 20.76534843]
[139.94630432 7.48350763]
[146.91716003 -5.79833269]
[147.03880310 -12.86442089]
[150.37687683 -17.89621735]
[155.02114868 -19.83485413]
[163.03813171 -32.51270676]
[163.87435913 -48.31179810]
[177.21614075 -54.93343735]
[185.23313904 -67.61128998]
[183.17445374 -80.52705383]
[190.33842468 -90.98236084]
[202.33544922 -93.55454254]
[210.85641479 -105.89929962]
[219.37739563 -118.24405670]
[227.89836121 -130.58880615]
[236.41932678 -142.93357849]
[231.14225769 -157.52575684]
[235.48242188 -172.42350769]
[247.77095032 -181.89830017]
[263.28262329 -182.30691528]
[276.05294800 -173.49220276]
[281.17141724 -158.84362793]
[276.66989136 -143.99385071]
[264.27929688 -134.65290833]
[248.76408386 -134.41259766]
[240.24311829 -122.06784058]
[231.72215271 -109.72308350]
[223.20117188 -97.37832642]
[214.68020630 -85.03356934]
[214.34556580 -67.60769653]
[197.91098022 -59.59430313]
[189.89399719 -46.91645050]
[189.63119507 -32.02416229]
[175.71598816 -24.49571800]
[167.69900513 -11.81786633]
[160.19900513 1.17251468]
[153.22814941 14.45435524]
[146.25730896 27.73619461]
[139.28645325 41.01803589]
[132.31561279 54.29987717]
[125.34475708 67.58171844]
[118.37390900 80.86355591]
[111.40306854 94.14540100]
[133.31918335 126.57514191]
[133.92317200 141.56297302]
[134.52716064 156.55081177]
[135.13114929 171.53865051]
[135.73513794 186.52648926]
[136.33912659 201.51431274]
[136.94311523 216.50215149]
[139.90760803 235.65579224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 20]
[10 19]
[11 18]
[12 17]
[21 69]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[31 61]
[32 60]
[34 58]
[35 57]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
