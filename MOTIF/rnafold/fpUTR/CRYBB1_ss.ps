%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCACCUGCCCGCCUGCCUGUCCUCCAGCAGGAAGUAGCAAGUCCCCAGACUUUUGCAGGCGGGAACC\
) } def
/len { sequence length } bind def

/coor [
[96.94006348 286.48458862]
[82.39302063 290.81448364]
[67.26448822 289.59310913]
[53.60045624 282.98562622]
[43.24888229 271.88565063]
[37.60973358 257.79437256]
[37.44565582 242.61750793]
[42.77883530 228.40759277]
[52.88801193 217.08641052]
[66.40599823 210.18507385]
[81.50459290 208.63690186]
[85.44027710 194.16242981]
[89.37596130 179.68795776]
[93.31164551 165.21348572]
[97.24732971 150.73901367]
[101.18301392 136.26454163]
[105.11869812 121.79006958]
[85.06355286 113.40899658]
[83.24581909 94.10364532]
[72.52254486 83.61501312]
[61.79926300 73.12638855]
[51.07598114 62.63776398]
[40.35270309 52.14913940]
[24.55414009 52.57455826]
[13.13967896 41.64360809]
[12.88131618 25.84143257]
[23.93233490 14.54317856]
[39.73635864 14.45190048]
[50.91714478 25.62175369]
[50.84132767 41.42586136]
[61.56460571 51.91448593]
[72.28788757 62.40311050]
[83.01116943 72.89173889]
[93.73445129 83.38036346]
[105.58950806 81.52497864]
[116.93063354 87.84397888]
[122.37202454 100.70744324]
[135.78202820 93.98644257]
[149.19203186 87.26544189]
[162.60203552 80.54444122]
[169.12351990 73.68551636]
[176.75718689 73.83757019]
[190.45135498 67.71631622]
[204.14552307 61.59506607]
[217.83969116 55.47381210]
[231.53385925 49.35255814]
[240.71000671 35.76100159]
[257.04748535 37.18175507]
[263.73971558 52.15326691]
[253.90228271 65.27413177]
[237.65510559 63.04672623]
[223.96093750 69.16797638]
[210.26676941 75.28923035]
[196.57260132 81.41048431]
[182.87843323 87.53174591]
[169.32302856 93.95444489]
[155.91302490 100.67544556]
[142.50303650 107.39644623]
[129.09303284 114.11744690]
[119.59317017 125.72575378]
[115.65748596 140.20022583]
[111.72180176 154.67469788]
[107.78611755 169.14916992]
[103.85043335 183.62364197]
[99.91474915 198.09811401]
[95.97906494 212.57258606]
[108.21485901 221.55311584]
[116.37696075 234.34938049]
[119.36151123 249.23081970]
[116.76487732 264.18481445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[17 60]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[37 59]
[38 58]
[39 57]
[40 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
