%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAUUUCAACGUGUUUAAAUACAUCAGCCAUCUAGGAAAGGACAUCUCUUGAGACUUCACUUCAGCUUCACUGACUUCUGGAUUCUCCUCUUGAGUAAAAGGACUCAGCCAACU\
) } def
/len { sequence length } bind def

/coor [
[202.93681335 243.25762939]
[193.67395020 231.45935059]
[184.41107178 219.66108704]
[175.14820862 207.86280823]
[165.88533020 196.06452942]
[156.62246704 184.26626587]
[142.67727661 179.03358459]
[140.24111938 163.40106201]
[130.97824097 151.60278320]
[121.71537781 139.80450439]
[112.45250702 128.00624084]
[89.38646698 132.01284790]
[67.91902924 118.03514862]
[61.13800430 91.04922485]
[47.82772446 97.96561432]
[34.51744080 104.88199615]
[21.20716095 111.79838562]
[16.68314934 126.94132996]
[2.73700976 134.37643433]
[-12.35726070 129.69258118]
[-19.64450073 115.66860962]
[-14.80131817 100.62470245]
[-0.70108795 93.48613739]
[14.29077339 98.48810577]
[27.60105324 91.57171631]
[40.91133499 84.65532684]
[54.22161484 77.73894501]
[39.22485352 77.42735291]
[24.73056030 81.28940582]
[10.66103935 76.08858490]
[2.16362500 63.72759628]
[2.34709549 48.72871780]
[11.14432812 36.57928467]
[25.33685493 31.72416878]
[39.73234177 35.93960953]
[49.06444550 47.68403244]
[61.28834152 56.37749481]
[54.72873306 42.88781357]
[40.06253052 37.63992691]
[33.60232162 23.86602783]
[38.69575882 9.91638756]
[32.13615036 -3.57329416]
[25.57654190 -17.06297684]
[13.65030861 -18.72168159]
[4.13928175 -25.90741348]
[-0.61759341 -36.70573044]
[0.47737548 -48.33323669]
[7.02971554 -57.85480118]
[1.19735301 -71.67448425]
[-12.19853115 -81.13398743]
[-10.43504715 -97.43804169]
[4.67368364 -103.81443024]
[17.58509445 -93.70366669]
[15.01703262 -77.50684357]
[20.84939575 -63.68716431]
[38.13088989 -57.93978882]
[45.97509766 -41.15422440]
[39.06622314 -23.62258530]
[45.62583160 -10.13290405]
[52.18544388 3.35677791]
[66.30287933 7.96477032]
[73.14742279 21.55178261]
[68.21841431 36.32820511]
[74.77802277 49.81788635]
[89.71295166 51.21360779]
[98.65846252 39.17293167]
[107.60396576 27.13225746]
[116.54947662 15.09158325]
[115.64057922 -0.92570341]
[127.69230652 -11.51510906]
[143.45959473 -8.55334949]
[150.84713745 5.68756819]
[144.18785095 20.28322983]
[128.59014893 24.03709412]
[119.64464569 36.07776642]
[110.69913483 48.11844254]
[101.75362396 60.15911865]
[117.59507751 66.28111267]
[128.74502563 78.01665497]
[133.54423523 92.64220428]
[131.70520020 107.12433624]
[124.25078583 118.74337006]
[133.51365662 130.54164124]
[142.77651978 142.33992004]
[152.03939819 154.13818359]
[166.64712524 160.21476746]
[168.42074585 175.00338745]
[177.68360901 186.80166626]
[186.94647217 198.59994507]
[196.20935059 210.39820862]
[205.47221375 222.19648743]
[214.73509216 233.99475098]
[237.74061584 240.30378723]
[241.50508118 263.15478516]
[252.52668762 273.32946777]
[263.54830933 283.50415039]
[274.56991577 293.67883301]
[285.59152222 303.85351562]
[296.61312866 314.02819824]
[312.39285278 313.14685059]
[324.11810303 323.74371338]
[324.83258057 339.53182983]
[314.11233521 351.14440918]
[298.31753540 351.69192505]
[286.81893921 340.84951782]
[286.43847656 325.04980469]
[275.41683960 314.87512207]
[264.39523315 304.70043945]
[253.37362671 294.52575684]
[242.35202026 284.35107422]
[231.33039856 274.17642212]
[224.82287598 276.35861206]
[217.90705872 276.34927368]
[211.30665588 274.11602783]
[205.72296143 269.86111450]
[201.76040649 264.00317383]
[199.86112976 257.13659668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[8 85]
[9 84]
[10 83]
[11 82]
[14 27]
[15 26]
[16 25]
[17 24]
[37 64]
[38 63]
[41 60]
[42 59]
[43 58]
[48 55]
[49 54]
[65 77]
[66 76]
[67 75]
[68 74]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
