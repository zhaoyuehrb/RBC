%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCCUACUUCUUACGCCCCCCACAUCACCCGCCUCGAGACCUCAAGGGUAGAGGUGGGCACCCCCGCCUCCGCACUUUUGCUCGGGGCUCCAGAUUGUAGGGCAGGGCGGCGCUUCUCGGAAAGCGAAAGCCGGCGGGGCGGGGCGGGUGCCGCAGGAGAAAGAGGAAGCGCUGGCAGACA\
) } def
/len { sequence length } bind def

/coor [
[83.63638306 275.41113281]
[97.39746094 269.44183350]
[112.22035217 271.74008179]
[123.52857208 281.59756470]
[120.99356079 266.81332397]
[118.45854950 252.02906799]
[115.92353821 237.24482727]
[113.38851929 222.46060181]
[101.11759186 214.09640503]
[98.33612061 199.13919067]
[107.19245911 186.32501221]
[104.65744019 171.54078674]
[102.12242889 156.75654602]
[99.58741760 141.97230530]
[97.05240631 127.18806458]
[76.83549500 114.53563690]
[74.23659515 90.82797241]
[62.02691650 82.11454773]
[49.81723785 73.40112305]
[37.60755920 64.68769836]
[25.39788055 55.97427750]
[13.04200363 47.46943665]
[0.54348791 39.17563629]
[-11.95502758 30.88183784]
[-24.52351189 22.69445801]
[-37.16106033 14.61408901]
[-49.79861069 6.53371954]
[-62.50431061 -1.43905735]
[-75.27724457 -9.30366611]
[-88.78301239 -2.12441659]
[-103.96865845 -2.66567993]
[-116.75946045 -10.68202019]
[-123.77346039 -23.93568993]
[-123.21544647 -38.82038879]
[-135.98838806 -46.68499756]
[-148.76132202 -54.54960632]
[-161.53425598 -62.41421509]
[-174.30718994 -70.27882385]
[-187.08013916 -78.14343262]
[-199.85307312 -86.00804138]
[-212.62600708 -93.87265015]
[-217.01989746 -93.83635712]
[-220.80812073 -95.08678436]
[-223.65795898 -97.27163696]
[-225.38693237 -99.96629333]
[-225.97334290 -102.72971344]
[-238.18301392 -111.44313812]
[-250.39270020 -120.15656281]
[-262.60238647 -128.86997986]
[-274.81204224 -137.58340454]
[-287.02172852 -146.29682922]
[-299.23141479 -155.01025391]
[-319.34979248 -156.01579285]
[-326.63992310 -173.91073608]
[-339.13845825 -182.20454407]
[-351.63696289 -190.49833679]
[-364.13546753 -198.79214478]
[-376.63400269 -207.08593750]
[-389.13250732 -215.37974548]
[-401.63101196 -223.67353821]
[-414.12954712 -231.96734619]
[-430.52166748 -232.44718933]
[-438.06292725 -247.00952148]
[-428.99548340 -260.67385864]
[-412.64718628 -259.38348389]
[-405.83572388 -244.46585083]
[-393.33721924 -236.17205811]
[-380.83871460 -227.87825012]
[-368.34017944 -219.58445740]
[-355.84167480 -211.29064941]
[-343.34317017 -202.99685669]
[-330.84463501 -194.70306396]
[-318.34613037 -186.40925598]
[-308.52551270 -189.33155823]
[-298.51104736 -186.29040527]
[-291.69305420 -178.06221008]
[-290.51797485 -167.21994019]
[-278.30831909 -158.50651550]
[-266.09863281 -149.79309082]
[-253.88894653 -141.07966614]
[-241.67927551 -132.36624146]
[-229.46958923 -123.65281677]
[-217.25991821 -114.93939209]
[-204.76139832 -106.64559174]
[-191.98846436 -98.78098297]
[-179.21553040 -90.91637421]
[-166.44258118 -83.05176544]
[-153.66964722 -75.18714905]
[-140.89671326 -67.32254028]
[-128.12377930 -59.45793533]
[-115.35083771 -51.59332657]
[-102.31112671 -58.79273224]
[-87.31885529 -58.49660492]
[-74.40238953 -50.68434906]
[-67.08244324 -37.36837387]
[-67.41263580 -22.07660294]
[-54.63970184 -14.21199417]
[-47.27863693 -13.38035965]
[-41.71823883 -6.10382891]
[-29.08069038 1.97654068]
[-16.44314194 10.05691051]
[-9.09726143 11.01342201]
[-3.66122770 18.38332367]
[8.83728790 26.67712212]
[21.33580208 34.97092438]
[26.13212585 34.91315460]
[31.01096916 37.88332748]
[34.11130524 43.76459885]
[46.32098389 52.47802353]
[58.53066254 61.19144821]
[70.74034119 69.90486908]
[82.95001984 78.61829376]
[92.81160736 69.33249664]
[107.52492523 65.15317535]
[124.26416779 68.45005035]
[137.54145813 61.47052765]
[150.81874084 54.49100876]
[164.09602356 47.51148605]
[170.25347900 40.73272324]
[177.65855408 40.52834702]
[191.05244446 33.77529144]
[204.44633484 27.02223587]
[210.81402588 12.29701710]
[226.33396912 8.23368168]
[239.10060120 17.94927216]
[239.32044983 33.99081802]
[226.82485962 44.05261993]
[211.19938660 40.41612244]
[197.80549622 47.16917801]
[184.41160583 53.92223740]
[171.07554626 60.78877258]
[157.79826355 67.76829529]
[144.52098083 74.74781036]
[131.24369812 81.72733307]
[132.00654602 89.18843842]
[133.53224182 104.11064148]
[134.29508972 111.57174683]
[148.71011353 115.71990967]
[163.12512207 119.86807251]
[177.54014587 124.01623535]
[192.94183350 120.39703369]
[203.03305054 131.35223389]
[217.44807434 135.50039673]
[230.31855774 126.61869812]
[245.88201904 128.13937378]
[256.78988647 139.34440613]
[257.89178467 154.94311523]
[248.66741943 167.57028198]
[233.47227478 171.26373291]
[219.48101807 164.27954102]
[213.29991150 149.91542053]
[198.88488770 145.76725769]
[184.51426697 149.68316650]
[173.39198303 138.43124390]
[158.97695923 134.28309631]
[144.56195068 130.13493347]
[130.14692688 125.98676300]
[123.56398010 126.75189972]
[117.39028168 126.26303101]
[111.83664703 124.65305328]
[114.37165833 139.43728638]
[116.90666962 154.22152710]
[119.44168091 169.00576782]
[121.97669220 183.79000854]
[134.59605408 192.92179871]
[136.95629883 207.95123291]
[128.17276001 219.92558289]
[130.70777893 234.70982361]
[133.24278259 249.49406433]
[135.77780151 264.27828979]
[138.31280518 279.06253052]
[141.96910095 293.61010742]
[146.72531128 307.83609009]
[159.35691833 318.29431152]
[156.34925842 334.41528320]
[140.79632568 339.61514282]
[128.69766235 328.54470825]
[132.49932861 312.59228516]
[127.74311829 298.36630249]
[122.44020844 312.39767456]
[110.46588135 321.43179321]
[95.51781464 322.67895508]
[82.21199036 315.75396729]
[74.65726471 302.79534912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 171]
[5 170]
[6 169]
[7 168]
[8 167]
[11 164]
[12 163]
[13 162]
[14 161]
[15 160]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 105]
[23 104]
[24 103]
[25 101]
[26 100]
[27 99]
[28 97]
[29 96]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[41 84]
[46 83]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[54 73]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[115 134]
[116 133]
[117 132]
[118 131]
[120 130]
[121 129]
[122 128]
[137 157]
[138 156]
[139 155]
[140 154]
[142 152]
[143 151]
[172 179]
[173 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
