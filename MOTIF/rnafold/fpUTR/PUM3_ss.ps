%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGGGGGCGGAGCAAGGCAAGGAAGCGGAAGCGGAGAGGCGGUCGGGAUCCGCUGCGCGAGCUGUCUCGGUCCCACGUGUGCGAGUUGCUACG\
) } def
/len { sequence length } bind def

/coor [
[129.73693848 205.37367249]
[123.62056732 201.65664673]
[119.00613403 196.11709595]
[116.41825104 189.33171082]
[116.16825104 182.02142334]
[118.31710052 174.97477722]
[122.66517639 168.96292114]
[116.53455353 155.27294922]
[110.40393066 141.58297729]
[104.27330780 127.89299774]
[98.14268494 114.20301819]
[86.92703247 105.85431671]
[88.16734314 91.92760468]
[82.03672028 78.23762512]
[75.90609741 64.54765320]
[62.74737930 61.17873764]
[54.10501099 50.95469666]
[53.00678635 37.80888367]
[59.63340759 26.62944984]
[53.94931030 12.74813080]
[48.26520920 -1.13318765]
[38.18721008 -2.18286037]
[29.28849220 -6.90443850]
[22.84481239 -14.57118130]
[19.76120186 -24.03784561]
[20.44503593 -33.91165161]
[24.75277138 -42.75717926]
[32.01725006 -49.30503082]
[28.17408371 -63.80434418]
[24.33091736 -78.30365753]
[13.50135517 -85.53655243]
[10.67326641 -97.83499146]
[16.84868813 -108.37517548]
[13.47705269 -122.99133301]
[10.10541725 -137.60748291]
[6.73378086 -152.22364807]
[3.36214519 -166.83979797]
[-0.00949086 -181.45596313]
[-14.96608829 -184.32302856]
[-27.45976639 -193.03096008]
[-35.32592010 -206.07102966]
[-37.20169067 -221.18397522]
[-32.76208878 -235.75140381]
[-22.77630234 -247.24940491]
[-8.97443199 -253.68588257]
[6.25226831 -253.94567871]
[20.26567841 -247.98377991]
[30.63789177 -236.83312988]
[35.57186127 -222.42562866]
[34.21274185 -207.25749207]
[26.79601288 -193.95666504]
[14.60666656 -184.82760620]
[17.97830391 -170.21144104]
[21.34993935 -155.59527588]
[24.72157478 -140.97912598]
[28.09321022 -126.36296844]
[31.46484756 -111.74681091]
[44.10803604 -99.69532013]
[38.83023071 -82.14682007]
[42.67339706 -67.64751434]
[46.51656342 -53.14819717]
[64.96072388 -44.74941254]
[71.69238281 -25.33390045]
[62.14652634 -6.81728792]
[67.83062744 7.06403017]
[73.51472473 20.94534874]
[89.22776031 26.69208145]
[96.14317322 42.29432297]
[89.59606934 58.41702652]
[95.72669220 72.10700226]
[101.85731506 85.79698181]
[113.07296753 94.14568329]
[111.83265686 108.07239532]
[117.96327972 121.76237488]
[124.09390259 135.45234680]
[130.22453308 149.14233398]
[136.35514832 162.83230591]
[157.26246643 174.30429077]
[155.93164062 197.43254089]
[164.59046936 209.68099976]
[173.24929810 221.92944336]
[181.90812683 234.17790222]
[189.56697083 239.50744629]
[190.64144897 246.96614075]
[198.89910889 259.48855591]
[214.26228333 264.10943604]
[220.09432983 279.05490112]
[211.92140198 292.86004639]
[196.01307678 294.93478394]
[184.57284546 283.68753052]
[186.37669373 267.74621582]
[178.11903381 255.22380066]
[169.65968323 242.83673096]
[161.00085449 230.58827209]
[152.34201050 218.33982849]
[143.68318176 206.09136963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[13 71]
[14 70]
[15 69]
[19 66]
[20 65]
[21 64]
[28 61]
[29 60]
[30 59]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[79 96]
[80 95]
[81 94]
[82 93]
[84 92]
[85 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
