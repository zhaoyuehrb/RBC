%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUUUUUACCCAGGCCUCGGCGCCUAGGCGCUUCGCCGAGGCUGAUCUUCGUUCAAGUGUGAGCUGCGGCUGAGCCCAGCGCUCGAGGCGCGAGGCAGCCAGGAGGGCCCGUGCGGCGCGGGGAGCCAGCGAGCGCGCCUUCGGCAUUGGCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[124.98049164 133.88934326]
[126.40688324 148.82136536]
[122.77986908 163.37625122]
[114.51338959 175.89285278]
[102.55089569 184.94265747]
[88.25767517 189.49279785]
[73.26500702 189.02397156]
[59.28399277 183.58969116]
[47.91029739 173.81016541]
[40.44199371 160.80154419]
[37.73143768 146.04847717]
[40.08798599 131.23474121]
[47.24268341 118.05103302]
[58.37897110 108.00199890]
[72.22586060 102.23452759]
[87.20552063 101.40716553]
[74.16662598 93.99181366]
[61.12774277 86.57646942]
[48.08885193 79.16111755]
[35.04996490 71.74577332]
[22.01107597 64.33042145]
[8.90046120 57.04264069]
[-4.28063154 49.88311386]
[-17.46172333 42.72359085]
[-30.64281654 35.56406403]
[-40.93809891 39.26588440]
[-51.35050964 36.71481705]
[-58.46976089 28.99668884]
[-60.10305405 18.84732056]
[-72.99477386 11.17897224]
[-82.01992035 9.46654224]
[-86.06114960 3.23313618]
[-98.80078888 -4.68529224]
[-111.54042816 -12.60372066]
[-124.28007507 -20.52215004]
[-140.08517456 -21.23583221]
[-146.81008911 -34.52585983]
[-159.54972839 -42.44429016]
[-172.28936768 -50.36271667]
[-185.02900696 -58.28114700]
[-200.83410645 -58.99482727]
[-207.55902100 -72.28485870]
[-220.29866028 -80.20328522]
[-233.03831482 -88.12171173]
[-245.77795410 -96.04014587]
[-261.58303833 -96.75382233]
[-268.30795288 -110.04385376]
[-281.04760742 -117.96228027]
[-293.86389160 -125.75604248]
[-306.75561523 -133.42439270]
[-319.64733887 -141.09274292]
[-335.48791504 -138.55192566]
[-347.25335693 -149.45851135]
[-345.91824341 -165.44592285]
[-332.50671387 -174.24995422]
[-317.30700684 -169.11692810]
[-311.97897339 -153.98445129]
[-299.08728027 -146.31611633]
[-286.19555664 -138.64776611]
[-278.80175781 -137.92738342]
[-273.12918091 -130.70191956]
[-260.38952637 -122.78349304]
[-245.49565125 -122.63619232]
[-237.85952759 -108.77978516]
[-225.11987305 -100.86135864]
[-212.38023376 -92.94292450]
[-199.64059448 -85.02449799]
[-184.74671936 -84.87719727]
[-177.11058044 -71.02079010]
[-164.37094116 -63.10235977]
[-151.63130188 -55.18393326]
[-138.89166260 -47.26550293]
[-123.99777985 -47.11819839]
[-116.36164856 -33.26179123]
[-103.62200165 -25.34336281]
[-90.88236237 -17.42493439]
[-78.14271545 -9.50650597]
[-65.32642365 -1.71274710]
[-52.43470764 5.95560122]
[-33.16624451 4.74023962]
[-23.48329163 22.38297272]
[-10.30219936 29.54249763]
[2.87889361 36.70202255]
[16.05998611 43.86154556]
[23.47623825 44.29289246]
[29.42642403 51.29153442]
[42.46531296 58.70688248]
[55.50419998 66.12223053]
[68.54309082 73.53758240]
[81.58197784 80.95292664]
[94.62086487 88.36827850]
[104.49223328 88.12393188]
[111.51461029 94.93525696]
[126.13853455 98.27307129]
[141.31442261 93.80059052]
[152.00088501 104.17598724]
[166.62480164 107.51380157]
[181.24871826 110.85161591]
[196.42460632 106.37912750]
[207.11106873 116.75452423]
[221.73498535 120.09233856]
[236.35890198 123.43015289]
[250.98281860 126.76796722]
[265.60675049 130.10577393]
[280.34976196 132.87048340]
[295.18939209 135.05787659]
[310.02905273 137.24525452]
[324.86871338 139.43263245]
[339.70837402 141.62002563]
[354.54803467 143.80740356]
[360.90252686 141.70504761]
[366.50762939 142.97322083]
[369.91949463 146.38056946]
[384.66250610 149.14526367]
[399.40551758 151.90997314]
[414.14852905 154.67468262]
[425.24667358 148.03790283]
[437.49505615 150.67794800]
[444.41473389 160.63841248]
[459.10098267 163.69026184]
[473.78726196 166.74209595]
[488.50259399 169.65051270]
[503.24560547 172.41520691]
[518.52770996 166.46629333]
[531.14959717 176.93618774]
[528.12701416 193.05438232]
[512.56933594 198.23983765]
[500.48089600 187.15823364]
[485.73788452 184.39352417]
[478.54766846 186.26100159]
[470.73541260 181.42835999]
[456.04913330 178.37652588]
[441.36288452 175.32467651]
[425.04693604 181.72787476]
[411.38381958 169.41769409]
[396.64080811 166.65298462]
[381.89779663 163.88829041]
[367.15478516 161.12358093]
[352.36062622 158.64706421]
[337.52099609 156.45967102]
[322.68133545 154.27229309]
[307.84167480 152.08491516]
[293.00201416 149.89752197]
[278.16235352 147.71014404]
[275.81094360 149.32284546]
[272.66320801 150.07696533]
[269.05206299 149.65838623]
[265.41979980 147.88265991]
[262.26892090 144.72970581]
[247.64500427 141.39189148]
[233.02108765 138.05407715]
[218.39717102 134.71626282]
[203.77325439 131.37844849]
[189.64335632 136.08967590]
[177.91090393 125.47553253]
[163.28698730 122.13771820]
[148.66307068 118.79990387]
[134.53318787 123.51113129]
[122.80072021 112.89698792]
[108.17680359 109.55918121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 84]
[23 83]
[24 82]
[25 81]
[29 79]
[30 78]
[32 77]
[33 76]
[34 75]
[35 74]
[37 72]
[38 71]
[39 70]
[40 69]
[42 67]
[43 66]
[44 65]
[45 64]
[47 62]
[48 61]
[49 59]
[50 58]
[51 57]
[93 160]
[94 159]
[96 157]
[97 156]
[98 155]
[100 153]
[101 152]
[102 151]
[103 150]
[104 149]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[113 138]
[114 137]
[115 136]
[116 135]
[119 133]
[120 132]
[121 131]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
