%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGAGUGAAGGCCCAGCGCGAGGCCGCGAGCCCAGCGCCCAGAGCGCGCGCUCACGAAAGGAGCGGGGCAUCCCAACGGCGCCACCUUUAAGCGUCACGGGUGGGGCUGCAGCUUCUGGACCUAGGACUUUGAAC\
) } def
/len { sequence length } bind def

/coor [
[77.23472595 380.85021973]
[86.94950104 368.08294678]
[86.27169037 353.09826660]
[85.59387970 338.11358643]
[84.91606903 323.12893677]
[84.23825836 308.14425659]
[71.68846130 302.64443970]
[62.70319366 292.21212769]
[59.08958054 278.85772705]
[61.61225128 265.18753052]
[69.83239746 253.89521790]
[82.18284607 247.23107910]
[81.84385681 232.23490906]
[81.50486755 217.23873901]
[73.48191071 204.68957520]
[80.90535736 190.71806335]
[80.56636810 175.72189331]
[80.22737885 160.72572327]
[79.88838196 145.72955322]
[67.21983337 137.69789124]
[53.51205826 143.78860474]
[39.80428314 149.87933350]
[26.09650993 155.97006226]
[16.89010239 169.54113770]
[0.55582064 168.08398438]
[-6.10302496 153.09759521]
[3.76361442 139.99868774]
[20.00578690 142.26228333]
[33.71356201 136.17155457]
[47.42133331 130.08084106]
[61.12910843 123.99011230]
[56.64722061 98.57378387]
[66.53988647 76.17691040]
[56.11458969 65.39204407]
[45.68929672 54.60718155]
[35.26400375 43.82231903]
[22.80206490 59.47115707]
[-3.22940230 62.29373550]
[-16.93717766 56.20301056]
[-30.64495087 50.11228561]
[-44.35272598 44.02156067]
[-59.78190994 48.41699600]
[-72.75408173 38.97759628]
[-73.31810760 22.94445992]
[-61.04130554 12.61683941]
[-45.34139633 15.91719913]
[-38.26200104 30.31378746]
[-24.55422783 36.40451050]
[-10.84645271 42.49523544]
[2.86132193 48.58596039]
[8.13457298 43.25277710]
[23.95432472 27.25323296]
[17.70908546 13.61516190]
[11.46384621 -0.02290917]
[5.21860743 -13.66098022]
[-1.02663219 -27.29905128]
[-16.15009308 -31.27585602]
[-25.13683701 -44.07321548]
[-23.74360275 -59.64860916]
[-12.62822819 -70.64781189]
[2.96094370 -71.87734222]
[15.66318321 -62.75664139]
[19.48088264 -47.59223557]
[12.61143875 -33.54429245]
[18.85667801 -19.90621948]
[25.10191727 -6.26814842]
[31.34715652 7.36992264]
[37.59239578 21.00799370]
[46.04886627 33.39702606]
[56.47415924 44.18188858]
[66.89945221 54.96675110]
[77.32474518 65.75160980]
[84.57642365 61.93121338]
[92.44227600 59.62674332]
[100.60908508 58.92996216]
[108.75164032 59.86861801]
[116.54570007 62.40533447]
[123.68089294 66.43909454]
[129.87310791 71.80927277]
[134.87573242 78.30203247]
[148.84474182 72.83694458]
[162.81373596 67.37186432]
[176.78273010 61.90677643]
[186.81536865 49.67334747]
[201.48684692 52.24179459]
[215.45584106 46.77671051]
[229.42483521 41.31162643]
[243.39382935 35.84654236]
[257.36282349 30.38145828]
[271.33181763 24.91637421]
[272.95471191 9.69714737]
[281.47406006 -3.01816893]
[294.93218994 -10.30768871]
[310.23654175 -10.49633408]
[323.87026978 -3.54075432]
[332.70043945 8.96070766]
[334.69796753 24.13530922]
[329.40380859 38.49603653]
[318.03451538 48.74290085]
[303.20269775 52.52124405]
[288.31658936 48.96283722]
[276.79690552 38.88537216]
[262.82791138 44.35045624]
[248.85891724 49.81554031]
[234.88992310 55.28062439]
[220.92092896 60.74570847]
[206.95193481 66.21079254]
[197.91845703 78.05332184]
[182.24781799 75.87577057]
[168.27882385 81.34085846]
[154.30981445 86.80593872]
[140.34082031 92.27102661]
[141.60472107 103.25914001]
[139.88265991 114.36203003]
[135.20651245 124.77059174]
[127.82654572 133.70184326]
[118.19959259 140.45764160]
[106.96131897 144.47883606]
[94.88455200 145.39056396]
[95.22354889 160.38673401]
[95.56253815 175.38290405]
[95.90152740 190.37907410]
[103.94873047 204.00086975]
[96.50103760 216.89974976]
[96.84002686 231.89591980]
[97.17901611 246.89208984]
[111.73369598 254.65299988]
[120.36023712 268.60198975]
[120.79730988 284.90347290]
[113.02040100 299.13040161]
[99.22293854 307.46643066]
[99.90074921 322.45111084]
[100.57855988 337.43579102]
[101.25637054 352.42047119]
[101.93418121 367.40515137]
[112.76194000 379.24319458]
[110.11536407 395.06643677]
[96.02468109 402.73666382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 135]
[3 134]
[4 133]
[5 132]
[6 131]
[12 126]
[13 125]
[14 124]
[16 122]
[17 121]
[18 120]
[19 119]
[20 31]
[21 30]
[22 29]
[23 28]
[33 72]
[34 71]
[35 70]
[36 69]
[38 50]
[39 49]
[40 48]
[41 47]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
[80 112]
[81 111]
[82 110]
[83 109]
[85 107]
[86 106]
[87 105]
[88 104]
[89 103]
[90 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
