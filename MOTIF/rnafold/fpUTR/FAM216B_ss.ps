%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGCUUAUCAACAGACUUCCACCACCACCACCAGCAUAUAAACAGAGUCCGCGUAAGAAAACUACACUGAAUAGGAAUGGCAGCUUUUAAAAGUGGGGGAACUACAGUAUAGGGUAUAGGAUAAACG\
) } def
/len { sequence length } bind def

/coor [
[123.54473877 373.80661011]
[121.73668671 358.91598511]
[119.92863464 344.02536011]
[107.66233826 338.61465454]
[99.62764740 327.74703979]
[98.02507782 314.21783447]
[103.38314819 301.57388306]
[114.39126587 293.18380737]
[112.94355774 278.25384521]
[111.49584961 263.32388306]
[110.04814148 248.39389038]
[97.22414398 243.54212952]
[87.71172333 233.57554626]
[83.42174530 220.41316223]
[85.25183105 206.62385559]
[92.89920044 194.92503357]
[104.90902710 187.64709473]
[103.82250214 172.68650818]
[102.73598480 157.72590637]
[100.74814606 142.85820007]
[97.86624146 128.13764954]
[94.98434448 113.41709900]
[85.94290924 102.75201416]
[90.29510498 89.46479797]
[87.41320801 74.74424744]
[84.53130341 60.02369690]
[81.64940643 45.30314636]
[66.70098114 42.90103912]
[53.50112152 35.54335022]
[43.63355255 24.13496017]
[38.27463531 10.06541634]
[38.05311966 -4.96030855]
[42.97644043 -19.12842178]
[52.43215179 -30.73525620]
[65.26404572 -38.39213181]
[62.38214493 -53.11268234]
[59.50024796 -67.83323669]
[48.94521713 -70.28120422]
[39.86773682 -76.12645721]
[33.31859589 -84.66143799]
[30.04543877 -94.86907196]
[30.40747452 -105.54398346]
[34.33624268 -115.43477631]
[41.34669876 -123.39077759]
[50.59693146 -128.49584961]
[49.14922333 -143.42582703]
[40.26936340 -149.92565918]
[36.56324005 -160.05247498]
[39.04629898 -170.31930542]
[46.64616013 -177.33346558]
[45.92145920 -192.31594849]
[45.19675827 -207.29843140]
[31.20956421 -213.30841064]
[21.25937462 -224.74871826]
[17.27933693 -239.31509399]
[20.00719643 -254.10427856]
[28.84922791 -266.19262695]
[42.00842667 -273.21408081]
[41.28372574 -288.19656372]
[27.86654091 -295.81118774]
[20.71630859 -309.48150635]
[22.11464500 -324.84536743]
[31.61534309 -337.00021362]
[46.18676758 -342.06747437]
[61.17922592 -338.43023682]
[71.80868530 -327.24908447]
[74.68331909 -312.09188843]
[68.88584137 -297.79528809]
[56.26620865 -288.92126465]
[56.99090958 -273.93878174]
[70.76634979 -268.22015381]
[80.73379517 -257.04162598]
[84.87628174 -242.58474731]
[82.32067871 -227.70223999]
[73.52109528 -215.35501099]
[60.17924118 -208.02313232]
[60.90394211 -193.04064941]
[61.62864304 -178.05816650]
[73.30580139 -162.72093201]
[64.07920074 -144.87353516]
[65.52690887 -129.94355774]
[82.96430969 -121.33929443]
[91.87547302 -103.89757538]
[88.58190918 -84.44659424]
[74.22079468 -70.71513367]
[77.10269928 -55.99458313]
[79.98459625 -41.27403259]
[94.75654602 -39.02127075]
[107.89105988 -31.83701324]
[117.79364014 -20.57142639]
[123.25460052 -6.57144737]
[123.59685516 8.48022747]
[118.75981140 22.76739693]
[109.30898285 34.55950165]
[96.36995697 42.42124557]
[99.25185394 57.14179611]
[102.13375854 71.86235046]
[105.01565552 86.58290100]
[114.05709076 97.24798584]
[109.70489502 110.53520203]
[112.58679199 125.25575256]
[115.46869659 139.97630310]
[126.29093170 129.58981323]
[141.18968201 131.32960510]
[149.32760620 143.93017578]
[144.78515625 158.22584534]
[130.86651611 163.81793213]
[117.69657898 156.63938904]
[118.78310394 171.59997559]
[119.86962128 186.56057739]
[134.78706360 193.57997131]
[144.10034180 207.07028198]
[145.36193848 223.32070923]
[138.32356262 237.91825867]
[124.97811127 246.94618225]
[126.42581940 261.87615967]
[127.87352753 276.80615234]
[129.32124329 291.73611450]
[143.98432922 300.06985474]
[150.75820923 315.33468628]
[147.17114258 331.47567749]
[134.81927490 342.21731567]
[136.62731934 357.10794067]
[138.43536377 371.99856567]
[151.02925110 381.54684448]
[153.10000610 397.21490479]
[143.41911316 409.70712280]
[127.73005676 411.61212158]
[115.34088135 401.79968262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 124]
[2 123]
[3 122]
[8 118]
[9 117]
[10 116]
[11 115]
[17 110]
[18 109]
[19 108]
[20 102]
[21 101]
[22 100]
[24 98]
[25 97]
[26 96]
[27 95]
[35 87]
[36 86]
[37 85]
[45 81]
[46 80]
[50 78]
[51 77]
[52 76]
[58 70]
[59 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
