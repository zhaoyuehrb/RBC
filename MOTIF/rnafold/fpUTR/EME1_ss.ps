%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGAUCUACUUCCGGGCCCUGCGUGGCAGUUGAAAGAGUGGCGGGAGAAGUUGCAGGGAAUUAUUUGAUAGCACAUACUG\
) } def
/len { sequence length } bind def

/coor [
[104.34491730 298.26702881]
[97.34001160 295.04931641]
[88.34052277 307.04971313]
[79.34102631 319.05007935]
[70.34153748 331.05047607]
[72.82509613 346.65838623]
[63.47726822 359.40176392]
[47.84395218 361.72018433]
[35.20011902 352.23812866]
[33.04713058 336.58117676]
[42.66231537 324.03829956]
[58.34115601 322.05096436]
[67.34064484 310.05059814]
[76.34014130 298.05023193]
[85.33963013 286.04983521]
[71.67031097 262.80874634]
[71.24100494 235.78163147]
[84.23007965 211.99948120]
[107.31650543 197.68194580]
[105.05414581 182.85353088]
[102.79177856 168.02513123]
[100.52941132 153.19671631]
[98.26705170 138.36831665]
[96.00468445 123.53990173]
[93.74231720 108.71149445]
[89.26934814 94.39392853]
[82.68811798 80.91478729]
[69.68048859 71.90855408]
[71.04922485 57.07696915]
[64.46798706 43.59782791]
[51.46036148 34.59159470]
[52.82909393 19.76000977]
[46.24785614 6.28086615]
[32.35351562 -2.43000507]
[33.22049713 -18.80621910]
[47.95692825 -26.00132942]
[61.40323257 -16.61362457]
[59.72700119 -0.30037025]
[66.30823517 13.17877388]
[78.84513092 21.22088814]
[77.94712830 37.01659012]
[84.52836609 50.49573517]
[97.06526184 58.53784943]
[96.16725922 74.33354950]
[102.74849701 87.81269073]
[108.62631226 74.01228333]
[121.34219360 66.05575562]
[136.32350159 66.80426025]
[148.18298340 75.98864746]
[152.65594482 90.30620575]
[148.13394165 104.60835266]
[136.24305725 113.75203705]
[121.25926208 114.44919586]
[108.57073212 106.44912720]
[110.83309174 121.27753448]
[113.09545898 136.10594177]
[115.35782623 150.93435669]
[117.62018585 165.76275635]
[119.88255310 180.59117126]
[122.14491272 195.41958618]
[129.91110229 195.92889404]
[137.51736450 197.56283569]
[144.80178833 200.28570557]
[151.60943604 204.03863525]
[157.79568481 208.74085999]
[163.22924805 214.29144287]
[167.79495239 220.57145691]
[171.39625549 227.44656372]
[173.95718384 234.76980591]
[175.42401123 242.38482666]
[175.76638794 250.12919617]
[174.97790527 257.83779907]
[173.07624817 265.34646606]
[170.10284424 272.49539185]
[166.12187195 279.13259888]
[161.21894836 285.11706543]
[155.49925232 290.32183838]
[149.08528137 294.63668823]
[142.11424255 297.97039795]
[134.73507690 300.25271606]
[127.10530090 301.43591309]
[119.38765717 301.49560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[19 60]
[20 59]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 45]
[27 44]
[29 42]
[30 41]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
