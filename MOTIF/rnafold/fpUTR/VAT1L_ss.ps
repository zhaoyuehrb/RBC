%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCACAGCCGAGCAUCCCACAUUCAACAGGAGGAACCCGCGGGAGAGGAGCCCCACUCCCCCAGCGCCGCAGCCACCGCAGCCACCGCAGCCCGUGCGCCCCGCGCCCUCGAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[85.37390137 269.51730347]
[70.87824249 274.29629517]
[55.74570465 272.30404663]
[42.98086166 263.93615723]
[35.11818314 250.85408020]
[33.71881485 235.65524292]
[39.06059647 221.35740662]
[50.08291245 210.79940796]
[64.59728241 206.07756042]
[66.55517578 191.20588684]
[68.31823730 176.30986023]
[69.88616180 161.39202881]
[71.45408630 146.47419739]
[73.02201843 131.55636597]
[64.49404144 143.89630127]
[55.96606827 156.23622131]
[52.72507477 170.88189697]
[44.17007828 183.20309448]
[31.58021164 191.35755920]
[16.83790588 194.12603760]
[2.14742351 191.09458923]
[-10.29472637 182.71646118]
[-18.62820053 170.24436951]
[-21.60698509 155.54312134]
[-18.78569221 140.81082153]
[-10.58615875 128.25025940]
[1.76562357 119.73947906]
[16.42282486 116.55099487]
[31.19345474 119.16137695]
[45.85757065 116.00484467]
[60.52168655 112.84830475]
[46.13938904 108.58807373]
[32.37164688 116.34854126]
[17.17157364 112.02034760]
[9.55710220 98.17132568]
[14.04576206 83.01786041]
[27.97451401 75.55023193]
[43.07967377 80.19885254]
[50.39962006 94.20578003]
[64.78191376 98.46601105]
[68.83088684 89.22857666]
[75.04508209 82.11148834]
[82.57640839 77.53417206]
[76.83615875 63.67597961]
[71.09590912 49.81778717]
[65.35565186 35.95959473]
[59.61540222 22.10140228]
[47.18597031 12.31264114]
[49.46379089 -2.40676141]
[43.72353745 -16.26495361]
[30.39091110 -25.81341553]
[32.26287460 -42.10536957]
[47.41371155 -48.38105392]
[60.25753784 -38.18457794]
[57.58172989 -22.00520515]
[63.32198334 -8.14701271]
[75.34082794 0.65051645]
[73.47359467 16.36115074]
[79.21384430 30.21934319]
[84.95410156 44.07753754]
[90.69435120 57.93572998]
[96.43460083 71.79392242]
[105.43593597 72.09398651]
[113.89176178 75.19448090]
[120.95352173 80.78425598]
[125.91255188 88.30236816]
[140.72787476 85.95584869]
[155.54319763 83.60932922]
[163.64659119 79.12606812]
[170.77659607 81.40059662]
[185.64826965 79.44270325]
[195.26412964 67.18818665]
[210.37400818 65.41445923]
[221.99755859 74.65722656]
[236.86923218 72.69933319]
[251.71398926 70.54694366]
[266.52932739 68.20043182]
[281.34463501 65.85391235]
[295.30453491 53.93353271]
[311.43612671 60.70756531]
[326.18493652 57.97403336]
[338.34402466 47.85141373]
[352.26818848 53.13978958]
[367.01699829 50.40625763]
[379.12881470 39.35021591]
[394.67556763 44.56856155]
[397.66406250 60.69310379]
[385.02001953 71.13629913]
[369.75054932 65.15508270]
[355.00170898 67.88861084]
[343.89758301 77.81571198]
[328.91848755 72.72285461]
[314.16964722 75.45639038]
[306.99899292 85.29412842]
[294.64248657 87.63449860]
[283.69116211 80.66923523]
[268.87582397 83.01575470]
[254.06051636 85.36227417]
[247.87013245 89.56816101]
[238.82711792 87.57100677]
[223.95544434 89.52890015]
[215.12016296 101.46512604]
[200.06607056 103.66255951]
[187.60615540 94.31437683]
[172.73448181 96.27227020]
[157.88972473 98.42465973]
[143.07438660 100.77117157]
[128.25906372 103.11769104]
[116.80201721 127.04702759]
[87.93984222 133.12429810]
[86.37191772 148.04212952]
[84.80399323 162.95996094]
[83.23606110 177.87779236]
[85.46925354 186.86541748]
[81.42684937 193.16377258]
[79.46895599 208.03544617]
[92.26664734 216.35301208]
[100.18078613 229.40403748]
[101.63999176 244.59722900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 116]
[10 115]
[11 113]
[12 112]
[13 111]
[14 110]
[31 40]
[32 39]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 56]
[50 55]
[66 108]
[67 107]
[68 106]
[70 105]
[71 104]
[74 101]
[75 100]
[76 98]
[77 97]
[78 96]
[80 93]
[81 92]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
