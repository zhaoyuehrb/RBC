%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCCACACCCUAUCCCAGUGUUCCACCCUAGGUCUGAAGGCCCCCGCCCCGAAUCCGGCCGCAUUCGGCCCCGGUCUAGCCAGCGCUCUCACCUCUCCCGCGACGGCCCGCCCGGGACUGGACCCGCCCCGGUCCGGCGCAGGCAGCGCGGCGGGCAGCCCUAGCUGCCCCAGAAGCCCCACGACG\
) } def
/len { sequence length } bind def

/coor [
[171.24586487 285.30401611]
[158.19932556 292.70590210]
[143.77540588 296.82296753]
[128.78741455 297.42312622]
[114.08049011 294.47247314]
[100.48390961 288.13739014]
[88.76435852 278.77511597]
[79.58264923 266.91357422]
[73.45653534 253.22158813]
[70.73143005 238.47120667]
[71.56100464 223.49415588]
[75.89965820 209.13229370]
[65.38110352 219.82621765]
[54.86255264 230.52015686]
[44.34400177 241.21408081]
[47.09632874 251.55421448]
[45.31222534 262.02258301]
[39.38124847 270.73364258]
[30.43367004 276.14682007]
[20.12560844 277.33871460]
[10.33263588 274.16021729]
[-0.70322233 284.31942749]
[-11.73908138 294.47863770]
[-19.29723549 309.65463257]
[-35.97244644 306.59298706]
[-37.64660645 289.72192383]
[-21.89830399 283.44277954]
[-10.86244583 273.28356934]
[0.17341274 263.12435913]
[-0.47173545 243.66905212]
[13.59597397 229.77752686]
[33.65007401 230.69552612]
[44.16862869 220.00160217]
[54.68717957 209.30767822]
[65.20572662 198.61373901]
[73.40995026 186.05624390]
[78.97791290 172.12794495]
[84.54586792 158.19963074]
[90.11383057 144.27131653]
[74.95642090 139.73533630]
[61.79731369 130.00315857]
[52.41323090 115.93291473]
[37.42143250 116.42886353]
[22.42963409 116.92481232]
[8.79989433 126.04415131]
[-5.79102373 118.55834961]
[-6.33323479 102.16817474]
[7.73104095 93.73442078]
[21.93368340 101.93301392]
[36.92547989 101.43706512]
[51.91728210 100.94111633]
[54.11665726 93.77085114]
[39.77611923 89.37210083]
[25.43558311 84.97334290]
[11.09511852 80.57435608]
[15.49434471 66.23397064]
[29.83433342 70.63281250]
[44.17486954 75.03156281]
[58.51540756 79.43031311]
[60.71478271 72.26004028]
[48.57952499 63.44326401]
[36.44427109 54.62648392]
[24.30901718 45.80970764]
[12.17376232 36.99292755]
[-4.18322802 35.81780243]
[-11.09964085 20.94853210]
[-1.46046376 7.68134260]
[14.81834412 9.66438389]
[20.99054146 24.85767174]
[33.12579727 33.67444992]
[45.26105118 42.49123001]
[57.39630508 51.30801010]
[69.53156281 60.12478638]
[73.59069061 61.04529953]
[77.44200134 62.28936768]
[81.06235504 63.83609772]
[76.66360474 49.49555969]
[72.26485443 35.15502167]
[56.66939545 27.24930191]
[51.70580292 10.83615494]
[59.97492599 -3.79901028]
[55.33966827 -18.06485748]
[50.70441437 -32.33070755]
[38.16205215 -42.89579773]
[41.30649567 -58.99065781]
[56.90301132 -64.05827332]
[68.90724182 -52.88551712]
[64.97026062 -36.96596146]
[69.60551453 -22.70011330]
[74.24076843 -8.43426514]
[86.43620300 -4.24261045]
[94.10050201 6.36948204]
[94.24987030 19.65372467]
[86.60539246 30.75627327]
[91.00414276 45.09680939]
[95.40289307 59.43734741]
[103.57614136 59.33461380]
[111.60601044 60.86225891]
[119.17057037 63.95903015]
[125.96652985 68.50077057]
[131.72143555 74.30538940]
[144.91354370 67.16618347]
[158.10565186 60.02696991]
[171.29776001 52.88776016]
[184.48985291 45.74854660]
[186.82540894 32.47263336]
[196.24729919 23.10666084]
[209.15298462 20.91548920]
[220.78678894 26.47902489]
[234.09513855 19.55890656]
[247.40347290 12.63878918]
[256.07775879 -0.59250766]
[270.93923950 0.40058732]
[284.24758911 -6.51953030]
[297.49826050 -13.54943466]
[310.69036865 -20.68864632]
[323.88247681 -27.82785606]
[337.07458496 -34.96706772]
[343.14608765 -41.81623077]
[350.54434204 -42.11320877]
[363.85269165 -49.03332520]
[377.16104126 -55.95344162]
[390.46936035 -62.87356186]
[403.77770996 -69.79367828]
[406.99246216 -85.09725189]
[419.32391357 -94.71335602]
[434.94952393 -94.10155487]
[446.49136353 -83.55072021]
[448.49972534 -68.04264832]
[440.02633667 -54.89975739]
[425.07205200 -50.32773209]
[410.69781494 -56.48533630]
[397.38949585 -49.56521606]
[384.08114624 -42.64509964]
[370.77279663 -35.72498322]
[357.46444702 -28.80486488]
[344.21377563 -21.77496147]
[331.02166748 -14.63574982]
[317.82955933 -7.49653912]
[304.63745117 -0.35732827]
[300.24325562 5.60196924]
[291.16769409 6.78881216]
[277.85934448 13.70893002]
[270.13696289 26.44525337]
[254.32359314 25.94713211]
[241.01525879 32.86724854]
[227.70690918 39.78736496]
[223.33949280 56.01980209]
[208.29130554 64.24054718]
[191.62907410 58.94065475]
[178.43696594 66.07986450]
[165.24485779 73.21907806]
[152.05274963 80.35828400]
[138.86064148 87.49749756]
[141.31201172 112.25725555]
[128.61740112 135.19558716]
[139.81973267 145.17095947]
[151.02204895 155.14633179]
[162.22438049 165.12170410]
[173.42669678 175.09707642]
[184.62901306 185.07243347]
[195.83134460 195.04780579]
[211.99151611 197.83723450]
[217.40118408 213.31843567]
[206.49534607 225.56567383]
[190.49299622 221.98004150]
[185.85597229 206.25012207]
[174.65365601 196.27476501]
[163.45132446 186.29939270]
[152.24900818 176.32402039]
[141.04667664 166.34864807]
[129.84436035 156.37329102]
[118.64203644 146.39791870]
[104.04213715 149.83927917]
[98.47418213 163.76759338]
[92.90621948 177.69589233]
[87.33826447 191.62420654]
[98.74523163 181.88351440]
[112.12725067 175.10697937]
[126.72976685 171.67671204]
[141.72937012 171.78614807]
[156.28027344 175.42910767]
[169.56199646 182.40017700]
[180.82562256 192.30625916]
[189.43603516 204.58880615]
[194.90769958 218.55523682]
[196.93208313 233.41799927]
[195.39506531 248.33903503]
[190.38328552 262.47702026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 35]
[13 34]
[14 33]
[15 32]
[21 29]
[22 28]
[23 27]
[36 177]
[37 176]
[38 175]
[39 174]
[42 51]
[43 50]
[44 49]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[76 96]
[77 95]
[78 94]
[81 90]
[82 89]
[83 88]
[101 154]
[102 153]
[103 152]
[104 151]
[105 150]
[109 147]
[110 146]
[111 145]
[113 143]
[114 142]
[115 140]
[116 139]
[117 138]
[118 137]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[156 173]
[157 172]
[158 171]
[159 170]
[160 169]
[161 168]
[162 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
