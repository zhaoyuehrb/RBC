%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGUGACAAGCAGGGAACAAGGCAACGGACGGCGCAACCCAGCCCCGGCUGACGGACGCUGGCGACUCAGAC\
) } def
/len { sequence length } bind def

/coor [
[48.48651886 117.46195984]
[33.75221252 120.27268219]
[19.01790237 123.08340454]
[4.28359413 125.89411926]
[-10.45071411 128.70484924]
[-25.18502235 131.51556396]
[-26.63579178 146.55125427]
[-32.26511383 160.56864929]
[-41.61665344 172.43142700]
[-53.93231583 181.17791748]
[-68.21372986 186.09907532]
[-83.30316162 186.79598999]
[-97.97738647 183.21214294]
[-111.04681396 175.63807678]
[-121.45198822 164.68777466]
[-128.34938049 151.24893188]
[-131.17987061 136.41096497]
[-129.71400452 121.37674713]
[-124.07060242 107.36501312]
[-114.70715332 95.51163483]
[-102.38270569 86.77751923]
[-88.09635925 81.87070465]
[-73.00623322 81.18894958]
[-58.33561707 84.78753662]
[-45.27379990 92.37473297]
[-34.87963867 103.33548737]
[-27.99574280 116.78125000]
[-13.26143456 113.97053528]
[1.47287464 111.15981293]
[16.20718384 108.34909058]
[30.94149208 105.53837585]
[45.67580032 102.72765350]
[47.35522079 86.32206726]
[53.87398148 71.17381287]
[64.63285065 58.67538834]
[78.64282990 49.97570801]
[94.61605072 45.87448120]
[111.08418274 46.74871445]
[126.53341675 52.51803970]
[139.54357910 62.65211868]
[148.91871643 76.21937561]
[163.18457031 71.58412170]
[177.45040894 66.94886780]
[191.71626282 62.31361389]
[205.98210144 57.67835999]
[217.79730225 43.73546219]
[234.76234436 47.69654083]
[248.82157898 42.46796036]
[262.88079834 37.23937988]
[270.83972168 23.30971909]
[286.71414185 20.98971558]
[298.32656860 32.05907822]
[296.76895142 48.02634048]
[283.23617554 56.64278030]
[268.10940552 51.29860687]
[254.05015564 56.52718735]
[239.99093628 61.75577164]
[234.54376221 72.76219940]
[222.63520813 77.13317108]
[210.61735535 71.94420624]
[196.35151672 76.57946014]
[182.08566284 81.21471405]
[167.81982422 85.84997559]
[153.55397034 90.48522949]
[154.24624634 103.98799896]
[151.58673096 117.24436188]
[145.73976135 129.43522644]
[137.06661987 139.80734253]
[126.10319519 147.71983337]
[113.52690125 152.68379211]
[100.11479950 154.39251709]
[86.69560242 152.74041748]
[74.09846497 147.82958984]
[63.10174179 139.96345520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
