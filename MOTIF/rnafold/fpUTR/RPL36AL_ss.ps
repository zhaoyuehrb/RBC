%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUUUGCAGUACUGUCGCUCAGGUGCAGUUCCCACUUCCGCCUGUUUCUUCCCUUUCCUGUUAGGCGAGAGCUGCGAAAGGCGAGAGCUGCGAAGGGCCAGGUGUCGGGCGCUGUUUCUCGUUUUCAUCAUAUAGACAAAACAGCCCUGCUGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[144.16921997 145.68124390]
[158.08413696 140.08428955]
[144.90304565 132.92477417]
[131.72195435 125.76524353]
[118.54085541 118.60572052]
[105.35976410 111.44619751]
[91.97479248 104.67548370]
[78.39740753 98.29939270]
[64.82001495 91.92329407]
[51.24263000 85.54720306]
[37.66524506 79.17111206]
[24.08785820 72.79501343]
[17.39700508 72.97447205]
[12.39620209 70.14297485]
[10.11258316 65.89611053]
[-3.20569563 58.99513245]
[-19.01832581 59.51599121]
[-26.75902176 46.79078293]
[-40.07730103 39.88980865]
[-53.39557648 32.98883438]
[-66.71385956 26.08785629]
[-80.03213501 19.18688202]
[-91.88955688 26.27069473]
[-105.59046936 26.55507088]
[-117.54100800 20.07272720]
[-124.65954590 8.61730576]
[-125.17108154 -4.75153685]
[-138.35217285 -11.91106129]
[-151.53326416 -19.07058716]
[-164.71435547 -26.23011208]
[-177.89544678 -33.38963699]
[-191.07653809 -40.54916000]
[-204.25762939 -47.70868683]
[-217.43872070 -54.86820984]
[-223.41885376 -51.23659515]
[-230.18475342 -49.67090988]
[-237.04917908 -50.29692841]
[-243.32521057 -53.01947403]
[-248.39503479 -57.53521729]
[-251.77069092 -63.36613083]
[-253.14096069 -69.90997314]
[-252.39984131 -76.50243378]
[-264.65438843 -85.15264130]
[-276.90893555 -93.80284119]
[-289.16348267 -102.45304871]
[-301.41802979 -111.10324860]
[-313.67257690 -119.75345612]
[-325.93579102 -110.87132263]
[-340.41931152 -106.45469666]
[-355.55203247 -106.98265076]
[-369.69253540 -112.39792633]
[-381.30691528 -122.11311340]
[-389.13534546 -135.07437134]
[-392.32867432 -149.87577820]
[-390.54049683 -164.91177368]
[-383.96475220 -178.55136108]
[-373.31478882 -189.31503296]
[-359.74578857 -196.03521729]
[-344.72961426 -197.98297119]
[-329.89514160 -194.94700623]
[-316.85147095 -187.25665283]
[-307.01351929 -175.74607849]
[-301.44839478 -161.66387939]
[-300.75979614 -146.53759766]
[-305.02236938 -132.00801086]
[-292.76782227 -123.35780334]
[-280.51327515 -114.70759583]
[-268.25872803 -106.05738831]
[-256.00418091 -97.40718842]
[-243.74963379 -88.75698090]
[-220.62275696 -89.54454041]
[-210.27920532 -68.04930115]
[-197.09811401 -60.88977814]
[-183.91702271 -53.73025513]
[-170.73593140 -46.57072830]
[-157.55482483 -39.41120529]
[-144.37373352 -32.25167847]
[-131.19264221 -25.09215355]
[-118.01155090 -17.93262863]
[-103.45321655 -25.46740532]
[-87.10585785 -22.83160400]
[-75.42169189 -10.86561108]
[-73.13115692 5.86860323]
[-59.81288147 12.76957893]
[-46.49460220 19.67055511]
[-33.17632294 26.57152939]
[-19.85804558 33.47250366]
[-4.99802780 32.45804214]
[3.69528008 45.67685699]
[17.01355743 52.57783127]
[30.46395111 59.21762848]
[44.04133606 65.59372711]
[57.61872482 71.96981812]
[71.19611359 78.34590912]
[84.77349854 84.72200775]
[98.35088348 91.09809875]
[102.17997742 90.29199982]
[106.34568787 91.20391846]
[110.06097412 93.94493103]
[112.51928711 98.26509857]
[125.70037842 105.42462921]
[138.88146973 112.58415222]
[152.06256104 119.74367523]
[165.24365234 126.90319824]
[178.82104492 133.27929688]
[192.74821472 138.85011292]
[206.67538452 144.42092896]
[222.36207581 142.36224365]
[231.30552673 154.27290344]
[245.23268127 159.84373474]
[259.15985107 165.41455078]
[273.08700562 170.98536682]
[282.26864624 171.27383423]
[287.22985840 176.80314636]
[301.04568481 182.64465332]
[314.86148071 188.48614502]
[328.67730713 194.32765198]
[342.49313354 200.16915894]
[356.30895996 206.01066589]
[370.12475586 211.85215759]
[380.01049805 207.16508484]
[390.62188721 208.68974304]
[398.45910645 215.67767334]
[401.07327271 225.61967468]
[414.65066528 231.99577332]
[428.22805786 238.37185669]
[441.80545044 244.74795532]
[454.81683350 236.45898438]
[470.24398804 236.54321289]
[483.16409302 244.97375488]
[489.45446777 259.06045532]
[487.10778809 274.30828857]
[476.87295532 285.85174561]
[462.01580811 290.00735474]
[447.27725220 285.44906616]
[437.36026001 273.63137817]
[435.42935181 258.32534790]
[421.85195923 251.94924927]
[408.27456665 245.57315063]
[394.69720459 239.19706726]
[375.63876343 242.28358459]
[364.28326416 225.66798401]
[350.46743774 219.82647705]
[336.65164185 213.98497009]
[322.83581543 208.14347839]
[309.01998901 202.30197144]
[295.20416260 196.46046448]
[281.38836670 190.61897278]
[267.51620483 184.91253662]
[253.58903503 179.34172058]
[239.66186523 173.77088928]
[225.73469543 168.20007324]
[211.04417419 170.65722656]
[201.10455322 158.34809875]
[187.17739868 152.77728271]
[173.25022888 147.20646667]
[177.82957458 161.49035645]
[171.12828064 174.91021729]
[156.95861816 179.83166504]
[143.38151550 173.45497131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 96]
[8 95]
[9 94]
[10 93]
[11 92]
[12 91]
[15 90]
[16 89]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[105 156]
[106 155]
[107 154]
[109 152]
[110 151]
[111 150]
[112 149]
[114 148]
[115 147]
[116 146]
[117 145]
[118 144]
[119 143]
[120 142]
[124 140]
[125 139]
[126 138]
[127 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
