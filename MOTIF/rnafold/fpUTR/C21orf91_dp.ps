%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:40 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (C21orf91)
} def

/sequence { (\
GCGGCCGCCUCUGCUGCGGCCGGAAACAAUAGUGGAGGAACCCGAGCCGCACGGAACGGCGGUGGUGGCCCGCGGAGCCGGACGGGGCACU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 63 0.097877695 ubox
1 66 0.791417112 ubox
1 69 0.006671714 ubox
1 73 0.359433315 ubox
1 88 0.004560653 ubox
2 61 0.005021866 ubox
2 62 0.101403731 ubox
2 64 0.093134919 ubox
2 65 0.825118852 ubox
2 67 0.014842502 ubox
2 68 0.006764480 ubox
2 72 0.359645845 ubox
2 87 0.004515498 ubox
3 60 0.003624908 ubox
3 63 0.068082833 ubox
3 66 0.012824615 ubox
3 70 0.209175290 ubox
3 71 0.293698927 ubox
4 60 0.102260670 ubox
4 63 0.917693661 ubox
4 66 0.007482551 ubox
4 69 0.294714293 ubox
4 70 0.207807023 ubox
5 59 0.102365756 ubox
5 62 0.927042653 ubox
5 65 0.007871125 ubox
5 68 0.360436055 ubox
6 58 0.102361625 ubox
6 61 0.927085794 ubox
6 64 0.007869633 ubox
6 67 0.360435786 ubox
7 57 0.101719954 ubox
7 60 0.927093220 ubox
7 63 0.007841222 ubox
7 66 0.360296850 ubox
8 59 0.927099617 ubox
8 62 0.007849890 ubox
8 65 0.360435972 ubox
9 58 0.923841190 ubox
9 61 0.007849545 ubox
9 64 0.359993154 ubox
10 54 0.008628957 ubox
10 55 0.889012735 ubox
10 62 0.005546006 ubox
11 53 0.008927552 ubox
11 54 0.933065608 ubox
11 61 0.005644309 ubox
11 62 0.358134138 ubox
12 53 0.932374805 ubox
12 61 0.358300240 ubox
13 52 0.931454814 ubox
13 60 0.358652072 ubox
14 54 0.009601296 ubox
14 59 0.358535595 ubox
15 51 0.961506559 ubox
15 53 0.008444457 ubox
15 58 0.252300762 ubox
16 50 0.997325031 ubox
16 52 0.003599686 ubox
16 57 0.072259571 ubox
17 49 0.999920246 ubox
17 53 0.007720898 ubox
18 48 0.999933658 ubox
18 52 0.007544921 ubox
19 47 0.999950914 ubox
19 50 0.003877081 ubox
20 46 0.999842005 ubox
20 54 0.004626602 ubox
21 44 0.998868153 ubox
21 49 0.006970827 ubox
21 53 0.004634311 ubox
22 42 0.046129984 ubox
22 43 0.998584401 ubox
22 48 0.007473335 ubox
22 52 0.004586237 ubox
23 41 0.059205625 ubox
23 42 0.995475966 ubox
23 47 0.007467675 ubox
26 33 0.245850185 ubox
27 32 0.247065917 ubox
27 34 0.281606607 ubox
28 33 0.245188630 ubox
32 41 0.429784001 ubox
32 50 0.003546139 ubox
33 40 0.427688666 ubox
33 44 0.013561863 ubox
33 49 0.003580677 ubox
34 42 0.038258108 ubox
34 43 0.021063984 ubox
34 48 0.003601415 ubox
35 41 0.058918239 ubox
35 42 0.021675094 ubox
35 47 0.003591896 ubox
37 43 0.007079056 ubox
38 42 0.007113041 ubox
52 58 0.073515554 ubox
53 57 0.070577295 ubox
56 63 0.024287411 ubox
57 62 0.025033807 ubox
64 91 0.374295288 ubox
65 90 0.432016735 ubox
66 89 0.440588320 ubox
67 73 0.003219460 ubox
67 88 0.469634366 ubox
67 91 0.017206840 ubox
68 88 0.803878266 ubox
68 90 0.011487076 ubox
69 75 0.006688856 ubox
69 86 0.459967903 ubox
69 87 0.810523564 ubox
70 74 0.006669593 ubox
70 85 0.460412988 ubox
70 86 0.809999138 ubox
70 87 0.031110073 ubox
71 80 0.003262305 ubox
71 84 0.460652635 ubox
71 85 0.809059562 ubox
71 86 0.038938455 ubox
72 78 0.020254968 ubox
72 79 0.004469327 ubox
72 83 0.451118747 ubox
73 77 0.021504081 ubox
73 80 0.409946479 ubox
73 84 0.805156238 ubox
74 79 0.413129673 ubox
74 83 0.808152415 ubox
74 91 0.193502778 ubox
75 90 0.214429108 ubox
76 91 0.006394749 ubox
77 88 0.360251312 ubox
77 90 0.003654485 ubox
78 85 0.007525799 ubox
78 86 0.019251271 ubox
78 87 0.360431218 ubox
79 84 0.008060258 ubox
79 85 0.023212950 ubox
79 86 0.360126849 ubox
1 66 0.9500000 lbox
2 65 0.9500000 lbox
4 63 0.9500000 lbox
5 62 0.9500000 lbox
6 61 0.9500000 lbox
7 60 0.9500000 lbox
8 59 0.9500000 lbox
9 58 0.9500000 lbox
10 55 0.9500000 lbox
11 54 0.9500000 lbox
12 53 0.9500000 lbox
13 52 0.9500000 lbox
15 51 0.9500000 lbox
16 50 0.9500000 lbox
17 49 0.9500000 lbox
18 48 0.9500000 lbox
19 47 0.9500000 lbox
20 46 0.9500000 lbox
21 44 0.9500000 lbox
22 43 0.9500000 lbox
23 42 0.9500000 lbox
68 88 0.9500000 lbox
69 87 0.9500000 lbox
70 86 0.9500000 lbox
71 85 0.9500000 lbox
73 84 0.9500000 lbox
74 83 0.9500000 lbox
showpage
end
%%EOF
