%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCAUGCGCUCGAAGGGAGGUGGAGGCGCAGGUCCGGGCGAAGGGCGAUACGGUGGCCGAGAGGGCACGGAGAGGAGGACGGUGGCUGACGAGAUCCGGC\
) } def
/len { sequence length } bind def

/coor [
[71.96496582 114.07003784]
[68.81108093 103.34367371]
[53.94683456 101.33016968]
[39.08258820 99.31667328]
[24.18988419 97.52575684]
[9.27205467 95.95783234]
[-5.64577341 94.38990784]
[-16.71451187 107.07531738]
[-32.98888779 110.68752289]
[-48.08298874 104.00975037]
[-56.19258881 89.82403564]
[-71.15064240 88.70308685]
[-86.10870361 87.58213806]
[-101.06675720 86.46118164]
[-116.02481842 85.34023285]
[-130.98287964 84.21928406]
[-137.34254456 86.84214783]
[-143.15519714 85.87967682]
[-146.79324341 82.55754089]
[-161.65750122 80.54404449]
[-172.39776611 91.58726501]
[-187.40580750 94.15870667]
[-200.89071655 87.47882080]
[-207.77410889 74.29712677]
[-222.63835144 72.28362274]
[-237.50259399 70.27012634]
[-252.46334839 76.98638153]
[-265.59997559 67.17003632]
[-263.39868164 50.91930771]
[-248.12393188 44.95154953]
[-235.48910522 55.40587997]
[-220.62484741 57.41938019]
[-205.76060486 59.43288040]
[-195.61846924 48.55744934]
[-180.84240723 45.70576859]
[-167.05932617 52.17723465]
[-159.64399719 65.67979431]
[-144.77975464 67.69329834]
[-129.86192322 69.26122284]
[-114.90386200 70.38217163]
[-99.94580841 71.50312805]
[-84.98774719 72.62407684]
[-70.02969360 73.74503326]
[-55.07163620 74.86598206]
[-47.35399628 63.86127472]
[-35.09045029 58.09869385]
[-21.47607613 59.19898987]
[-10.11758423 66.97910309]
[-4.07784653 79.47207642]
[10.83998203 81.04000092]
[25.75781059 82.60793304]
[32.85490799 80.13645935]
[41.09608459 84.45242310]
[55.96033096 86.46592712]
[70.82457733 88.47942352]
[88.97820282 70.63252258]
[114.39134216 72.12854004]
[124.26042175 60.83246994]
[134.12950134 49.53639984]
[137.38243103 34.05321503]
[151.58293152 29.55933762]
[161.45202637 18.26326561]
[164.08863831 2.07746220]
[179.51803589 -3.47823572]
[191.86776733 7.31139851]
[188.43348694 23.34691429]
[172.74809265 28.13234711]
[162.87901306 39.42842102]
[160.33198547 54.10363388]
[145.42558289 59.40547943]
[135.55650330 70.70155334]
[125.68741608 81.99762726]
[128.34742737 86.57047272]
[130.20112610 91.52530670]
[131.19580078 96.72119141]
[131.30314636 102.01033783]
[130.52012634 107.24230194]
[128.86898804 112.26826477]
[140.87098694 121.26559448]
[152.87300110 130.26292419]
[167.63156128 125.84807587]
[181.99197388 130.91090393]
[190.51676941 143.31217957]
[190.10943604 158.17730713]
[202.11145020 167.17463684]
[216.89888000 162.47238159]
[231.61544800 167.39196777]
[240.60232544 180.04170227]
[240.40385437 195.55751038]
[231.09637451 207.97325134]
[216.25878906 212.51480103]
[201.59646606 207.43586731]
[192.74734497 194.68937683]
[193.11412048 179.17663574]
[181.11210632 170.17930603]
[166.95767212 174.73889160]
[152.66340637 170.03379822]
[143.77667236 157.66935730]
[143.87567139 142.26492310]
[131.87365723 133.26759338]
[119.87165833 124.27027130]
[110.09716797 129.69808960]
[99.03989410 131.35293579]
[88.10459137 129.02461243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 51]
[6 50]
[7 49]
[11 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[19 38]
[20 37]
[24 33]
[25 32]
[26 31]
[57 72]
[58 71]
[59 70]
[61 68]
[62 67]
[78 101]
[79 100]
[80 99]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
