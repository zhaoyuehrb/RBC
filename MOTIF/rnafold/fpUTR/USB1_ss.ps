%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGCCAGCCCAGGCCCCGCCCCUGGGAGGGCGCUUCCGGCACAGCGGAACUCCGGGUGCCGGUUGAGGUUGCUGGUGGACCUGCUCUGGUGGUCUUGGAUGAGGCCCC\
) } def
/len { sequence length } bind def

/coor [
[127.81692505 157.88931274]
[118.46457672 146.16184998]
[103.84066010 142.82403564]
[90.32612610 149.33229065]
[76.81159210 155.84054565]
[63.29706192 162.34880066]
[49.78252792 168.85705566]
[36.26799774 175.36531067]
[30.96436691 190.01144409]
[17.16599655 196.41921997]
[3.23582959 191.27276611]
[-10.27870369 197.78102112]
[-23.79323578 204.28927612]
[-37.30776978 210.79753113]
[-50.82230377 217.30578613]
[-64.33683777 223.81404114]
[-68.01992798 239.01170349]
[-80.64080048 248.24465942]
[-96.24026489 247.15341187]
[-107.45272064 236.25318909]
[-108.98400116 220.69076538]
[-100.11107635 207.81422424]
[-85.02346802 203.70349121]
[-70.84509277 210.29951477]
[-57.33055878 203.79125977]
[-43.81602478 197.28300476]
[-30.30149269 190.77473450]
[-16.78695869 184.26647949]
[-3.27242637 177.75822449]
[1.38922668 163.65841675]
[15.00217247 156.86560059]
[29.75974083 161.85076904]
[43.27427292 155.34251404]
[56.78880692 148.83425903]
[70.30333710 142.32600403]
[83.81787109 135.81774902]
[97.33240509 129.30949402]
[74.60916138 106.06732941]
[87.90145111 80.69747925]
[84.56363678 66.07356262]
[81.22582245 51.44964218]
[77.88800812 36.82572556]
[74.55019379 22.20180511]
[71.21237946 7.57788706]
[67.87456512 -7.04603195]
[57.32371140 -14.62702179]
[54.90412140 -26.98154068]
[61.38809204 -37.29988861]
[58.46173859 -52.01166534]
[55.53538132 -66.72344971]
[44.32175064 -78.68950653]
[49.33614731 -94.30320740]
[65.42018890 -97.50252533]
[76.02799225 -84.99626923]
[70.24716187 -69.64980316]
[73.17351532 -54.93802261]
[76.09986877 -40.22624207]
[88.36998749 -27.76624489]
[82.49848175 -10.38384628]
[85.83629608 4.24007273]
[89.17411041 18.86399078]
[92.51192474 33.48791122]
[95.84973907 48.11182785]
[99.18755341 62.73574829]
[102.52536774 77.35966492]
[112.74716187 79.14381409]
[121.76950836 85.59182739]
[127.46813202 95.92903137]
[128.19845581 108.42675018]
[142.05664062 102.68650055]
[155.91484070 96.94625092]
[169.77302551 91.20599365]
[183.63122559 85.46574402]
[188.16065979 70.49850464]
[201.27937317 61.98772812]
[216.79310608 63.95193863]
[227.37675476 75.46369171]
[228.03302002 91.08750153]
[218.45207214 103.44627380]
[203.15769958 106.70457458]
[189.37147522 99.32393646]
[175.51327515 105.06418610]
[161.65509033 110.80444336]
[147.79689026 116.54469299]
[133.93870544 122.28494263]
[130.19204712 136.80949402]
[139.54440308 148.53697205]
[150.58511353 149.15303040]
[159.23764038 155.67707825]
[162.72148132 165.70419312]
[160.08984375 175.75921631]
[168.76991272 187.99263000]
[176.40077209 193.27696228]
[177.51618958 200.69309998]
[185.84974670 213.16514587]
[194.18330383 225.63717651]
[202.51684570 238.10922241]
[210.85040283 250.58126831]
[219.18395996 263.05331421]
[234.12321472 269.81723022]
[235.46562195 286.16134644]
[221.83023071 295.27221680]
[207.24395752 287.77737427]
[206.71191406 271.38687134]
[198.37835693 258.91482544]
[190.04479980 246.44277954]
[181.71125793 233.97073364]
[173.37770081 221.49868774]
[165.04414368 209.02664185]
[156.53649902 196.67269897]
[147.85643005 184.43928528]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[16 24]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[48 57]
[49 56]
[50 55]
[69 85]
[70 84]
[71 83]
[72 82]
[73 81]
[91 111]
[92 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
