%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUUGAGAAUUGCUCCUGCCCUGGGAAGAGGCUCAGCACAGAAAGAGGAAGGACAGCACAGCUGACAGCCGUGCUCAGAGAGUUUCUGGAUCCUAGGCUUAUCUCCACAGAGGAGAACACACAAGCAGCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[85.11083984 177.23257446]
[79.17541504 191.00830078]
[73.23998260 204.78402710]
[67.30455017 218.55975342]
[76.00833893 231.29739380]
[76.42109680 246.71923828]
[68.41111755 259.90423584]
[54.53435516 266.64508057]
[39.21883392 264.79080200]
[27.35167885 254.93310547]
[22.71965981 240.21752930]
[26.80083466 225.33978271]
[38.29291534 215.04727173]
[53.52882385 212.62432861]
[59.46425247 198.84860229]
[65.39968109 185.07287598]
[71.33511353 171.29714966]
[76.32357025 157.15092468]
[80.34213257 142.69924927]
[84.36068726 128.24755859]
[88.37924194 113.79587555]
[87.36296082 98.83034515]
[81.42752838 85.05461884]
[75.49209595 71.27889252]
[69.55666351 57.50316238]
[63.62123489 43.72743607]
[57.68580246 29.95170784]
[51.75037384 16.17598152]
[45.35141373 2.60935545]
[38.49628830 -10.73257923]
[31.64115715 -24.07451248]
[24.78602982 -37.41644669]
[17.93090057 -50.75838089]
[11.07577229 -64.10031891]
[4.22064304 -77.44225311]
[-2.63448548 -90.78418732]
[-10.08549881 -103.80272675]
[-18.11717606 -116.47127533]
[-26.14885139 -129.13983154]
[-34.18052673 -141.80838013]
[-42.21220398 -154.47692871]
[-46.01826859 -139.96783447]
[-58.14941025 -131.14540100]
[-73.12532043 -131.99519348]
[-84.18054962 -142.13333130]
[-86.32083893 -156.97985840]
[-78.57929993 -169.82775879]
[-64.45322418 -174.87294006]
[-50.32484055 -169.83679199]
[-56.26027298 -183.61251831]
[-70.26396942 -184.52947998]
[-82.43930817 -191.37405396]
[-90.42451477 -202.75274658]
[-92.69910431 -216.39916992]
[-88.87313080 -229.62527466]
[-79.75263977 -239.85083008]
[-85.37522888 -253.75717163]
[-90.99781799 -267.66351318]
[-96.62041473 -281.56985474]
[-108.16304016 -293.98776245]
[-99.42576599 -308.51690674]
[-83.04570007 -304.14315796]
[-82.71406555 -287.19244385]
[-77.09147644 -273.28610229]
[-71.46887970 -259.37976074]
[-65.84629059 -245.47341919]
[-49.83087540 -243.63882446]
[-36.83670425 -233.94154358]
[-30.44697571 -218.93817139]
[-32.48262024 -202.66404724]
[-42.48454666 -189.54794312]
[-36.54911423 -175.77221680]
[-29.54365349 -162.50860596]
[-21.51197624 -149.84005737]
[-13.48030090 -137.17150879]
[-5.44862461 -124.50295258]
[2.58305168 -111.83440399]
[5.37619114 -111.11743164]
[8.04003716 -109.20364380]
[10.09916687 -106.14161682]
[11.10671616 -102.15756226]
[10.70744896 -97.63931274]
[17.56257820 -84.29737854]
[24.41770554 -70.95544434]
[31.27283478 -57.61351013]
[38.12796402 -44.27157593]
[44.98309326 -30.92964172]
[51.83822250 -17.58770752]
[58.69334793 -4.24577332]
[62.00841522 -2.82719612]
[64.77352142 0.31430143]
[66.16487122 4.88895798]
[65.52610016 10.24055004]
[71.46153259 24.01627731]
[77.39696503 37.79200363]
[83.33238983 51.56772995]
[89.26782227 65.34346008]
[95.20325470 79.11918640]
[101.13868713 92.89491272]
[104.75197601 88.07685089]
[110.42549133 84.74800873]
[117.63003540 83.54782104]
[125.66397095 84.94549561]
[133.70423889 89.19746399]
[148.01139832 93.70355988]
[162.31857300 98.20965576]
[176.62574768 102.71575165]
[190.93290710 107.22185516]
[205.76802063 101.11455536]
[219.72189331 109.03092194]
[222.09033203 124.89818573]
[211.05644226 136.54434204]
[195.08450317 135.03546143]
[186.42681885 121.52902222]
[172.11964417 117.02292633]
[157.81246948 112.51683044]
[143.50531006 108.01073456]
[129.19813538 103.50463867]
[122.60633850 107.08208466]
[133.00172424 117.89578247]
[147.10813904 122.99566650]
[155.17063904 135.64462280]
[153.83815002 150.58532715]
[143.66452026 161.60791016]
[128.87825012 164.13101196]
[115.62500763 157.10594177]
[109.41328430 143.45257568]
[112.82462311 128.84613037]
[109.42272949 114.23698425]
[102.83092499 117.81443024]
[98.81237030 132.26611328]
[94.79381561 146.71780396]
[90.77526093 161.16949463]
[104.56403351 155.26443481]
[118.56596375 160.64457703]
[124.85276031 174.26354980]
[119.86466217 188.40988159]
[106.42607880 195.07354736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[18 133]
[19 132]
[20 131]
[21 130]
[22 99]
[23 98]
[24 97]
[25 96]
[26 95]
[27 94]
[28 93]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[36 82]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[49 72]
[50 71]
[56 66]
[57 65]
[58 64]
[59 63]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
