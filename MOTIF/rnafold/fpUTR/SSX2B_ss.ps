%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUGGCUACUUUAAGUUCAGAGUACGCAUGCUCUGACUUUCUCUCUCUUUCGAUUCUUCCAUACUCAGAGUACGCACGGUCUGAUUUUCUCUUUGGAUUCUUCCAAAAUCAGAGUCAGACUGCUCCCGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[94.68509674 217.16352844]
[94.68509674 202.16352844]
[94.51185608 187.16453552]
[94.16538239 172.16853333]
[93.81891632 157.17253113]
[93.47245026 142.17654419]
[93.12597656 127.18054199]
[89.27097321 125.90216064]
[85.64112091 124.08020782]
[74.79235840 134.43899536]
[63.94359970 144.79777527]
[53.09483719 155.15655518]
[42.24607468 165.51533508]
[31.39731216 175.87411499]
[31.28287888 191.67799377]
[19.96844482 202.71244812]
[4.16666269 202.43092346]
[-6.74754906 191.00047302]
[-6.29898357 175.20254517]
[5.24623394 164.40979004]
[21.03853035 165.02536011]
[31.88729286 154.66658020]
[42.73605347 144.30780029]
[53.58481598 133.94900513]
[64.43357849 123.59023285]
[75.28234100 113.23144531]
[71.99362183 98.70518494]
[76.60862732 84.54433441]
[66.76193237 73.22874451]
[51.86605072 67.89739227]
[49.34808731 53.21716690]
[39.50139236 41.90157700]
[29.65469551 30.58598518]
[19.80800056 19.27039528]
[9.96130466 7.95480394]
[0.11460964 -3.36078668]
[-9.73208618 -14.67637730]
[-19.57878113 -25.99196815]
[-32.74092865 -18.68091202]
[-47.13562393 -14.26656246]
[-62.13358688 -12.94189548]
[-77.07917786 -14.76481915]
[-91.31903076 -19.65564537]
[-104.23065186 -27.40056419]
[-115.24959564 -37.66100693]
[-123.89415741 -49.98842239]
[-129.78643799 -63.84391785]
[-132.66883850 -78.62178802]
[-132.41537476 -93.67600250]
[-129.03712463 -108.34846497]
[-122.68175507 -121.99774933]
[-113.62711334 -134.02717590]
[-102.26901245 -143.91085815]
[-89.10398865 -151.21673584]
[-74.70755768 -155.62542725]
[-59.70907211 -156.94418335]
[-44.76420212 -155.11538696]
[-30.52626991 -150.21896362]
[-17.61770058 -142.46896362]
[-6.60279703 -132.20417786]
[2.03691387 -119.87336731]
[7.92374182 -106.01555634]
[10.80033875 -91.23654938]
[10.54095459 -76.18243408]
[7.15692616 -61.51130676]
[0.79618979 -47.86452484]
[-8.26319027 -35.83866501]
[1.58350480 -24.52307320]
[11.43020058 -13.20748234]
[21.27689552 -1.89189148]
[31.12359047 9.42369938]
[40.97028732 20.73929024]
[50.81698227 32.05488205]
[60.66367722 43.37047195]
[74.85525513 47.89245605]
[78.07752228 63.38204956]
[87.92421722 74.69763947]
[111.32444763 74.35256958]
[126.83406830 91.87802124]
[141.83006287 91.53155518]
[156.82606506 91.18508911]
[171.82206726 90.83861542]
[186.81806946 90.49214935]
[201.81405640 90.14568329]
[216.81005859 89.79920959]
[231.80606079 89.45274353]
[246.80206299 89.10627747]
[261.79806519 88.75980377]
[276.79406738 88.41333771]
[291.79003906 88.06687164]
[300.66223145 75.47360229]
[315.08001709 70.57653046]
[329.44683838 75.05519104]
[338.31542969 86.99194336]
[353.31143188 86.64547729]
[368.30740356 86.29901123]
[383.30340576 85.95253754]
[398.29940796 85.60607147]
[413.29541016 85.25960541]
[427.01538086 76.27660370]
[441.53094482 83.90748596]
[441.90972900 100.30226135]
[427.76208496 108.59538269]
[413.64187622 100.25559998]
[398.64587402 100.60207367]
[383.64987183 100.94853973]
[368.65390015 101.29500580]
[353.65789795 101.64147186]
[338.66189575 101.98794556]
[330.35403442 114.32154846]
[316.20938110 119.45893860]
[301.58084106 115.23294830]
[292.13650513 103.06286621]
[277.14053345 103.40933990]
[262.14453125 103.75580597]
[247.14852905 104.10227203]
[232.15252686 104.44874573]
[217.15652466 104.79521179]
[202.16053772 105.14167786]
[187.16453552 105.48814392]
[172.16853333 105.83461761]
[157.17253113 106.18108368]
[142.17654419 106.52754974]
[127.18054199 106.87402344]
[124.53660583 113.56424713]
[120.27727509 119.36145782]
[114.68296051 123.88397980]
[108.12197876 126.83406830]
[108.46844482 141.83006287]
[108.81491089 156.82606506]
[109.16138458 171.82206726]
[109.50785065 186.81806946]
[112.85926819 195.41421509]
[109.68509674 202.16352844]
[109.68509674 217.16352844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[28 77]
[29 76]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[38 67]
[79 124]
[80 123]
[81 122]
[82 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
