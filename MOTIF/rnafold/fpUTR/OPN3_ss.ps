%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCCGGCGCGCGGUAGCGCGGGCCCCUCAGUGCACAAUGGCUAGAGCAGGCGGCGGAGCCCCAACCCCACCCAGUGCGGAGCGCGCCGCGAGCCCCGCCGCAAGCUGAGCGCCUCCGCCCGCCAGGCGCGCCGGCGCCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[79.71773529 391.67126465]
[82.32241821 372.46539307]
[82.64516449 357.46887207]
[82.96790314 342.47235107]
[83.29064178 327.47583008]
[83.61338806 312.47927856]
[83.93612671 297.48275757]
[84.25886536 282.48623657]
[84.58161163 267.48971558]
[84.90435028 252.49317932]
[85.22709656 237.49665833]
[82.20455170 230.69241333]
[85.72157288 222.18186951]
[86.36690521 207.19575500]
[87.01223755 192.20964050]
[87.65757751 177.22354126]
[84.78213501 170.35585022]
[88.48145294 161.92294312]
[89.44908142 146.95417786]
[90.41670990 131.98542786]
[91.38433838 117.01667023]
[82.43425751 110.89393616]
[77.73496246 100.18117523]
[79.51934052 87.75521851]
[64.57486725 86.46574402]
[49.63039398 85.17627716]
[33.18021011 93.37616730]
[19.17108536 82.85820770]
[4.20232821 81.89058685]
[-10.76642895 80.92295837]
[-25.74473000 80.11643219]
[-40.73084259 79.47109985]
[-55.71695328 78.82575989]
[-65.26349640 91.05863190]
[-80.18637848 95.31155396]
[-94.74743652 89.94918060]
[-103.34766388 77.03346252]
[-102.68008423 61.53075409]
[-93.00140381 49.40216446]
[-78.03326416 45.31138229]
[-63.53122711 50.83139801]
[-55.07162094 63.83964920]
[-40.08551025 64.48498535]
[-25.09939766 65.13031769]
[-18.23170471 62.25487518]
[-9.79880238 65.95420074]
[5.16995478 66.92182922]
[20.13871193 67.88945007]
[29.47312737 60.12451553]
[41.99556732 60.85404968]
[50.91986465 70.23180389]
[65.86434174 71.52127075]
[80.80880737 72.81074524]
[94.69768524 67.14512634]
[104.47616577 55.77053833]
[114.25465393 44.39595413]
[124.03313446 33.02136612]
[133.81161499 21.64677811]
[119.49284363 26.11584854]
[104.49346161 26.25203133]
[90.09590149 22.04368210]
[77.53112793 13.85060883]
[67.87340546 2.37330532]
[61.94846725 -11.40693665]
[60.26287460 -26.31192780]
[62.96075058 -41.06731796]
[69.81142426 -54.41153717]
[80.22917938 -65.20368195]
[93.32330322 -72.52104187]
[107.97428894 -75.73799133]
[122.92948151 -74.57949066]
[136.91024780 -69.14458466]
[148.72125244 -59.89794540]
[157.35266113 -47.63015366]
[162.06651306 -33.39008331]
[162.45979309 -18.39524078]
[158.49884033 -3.92765832]
[150.52035522 8.77805424]
[164.01481628 2.22828579]
[177.50927734 -4.32148266]
[191.00373840 -10.87125111]
[204.49819946 -17.42102051]
[217.99266052 -23.97078896]
[224.40362549 -30.58125877]
[231.84867859 -30.51279640]
[245.48094177 -36.77070236]
[259.11322021 -43.02860641]
[272.74548340 -49.28651047]
[283.56536865 -66.23847198]
[302.70281982 -63.78678894]
[316.05322266 -70.62538910]
[320.99511719 -85.39750671]
[334.63174438 -92.14263916]
[348.68423462 -87.34027100]
[362.03466797 -94.17887115]
[366.64694214 -109.29515839]
[380.63623047 -116.64875793]
[395.70294189 -111.87689972]
[402.90820312 -97.81064606]
[397.97732544 -82.79525757]
[383.83566284 -75.73909760]
[368.87326050 -80.82845306]
[355.52285767 -73.98985291]
[351.20932007 -59.77968597]
[337.76751709 -52.65419006]
[322.89181519 -57.27497482]
[309.54141235 -50.43637466]
[307.26062012 -40.38522339]
[299.63751221 -33.12511444]
[289.05288696 -31.26023674]
[279.00338745 -35.65424347]
[265.37112427 -29.39633942]
[251.73884583 -23.13843536]
[238.10658264 -16.88053131]
[224.54243469 -10.47632504]
[211.04797363 -3.92655659]
[197.55351257 2.62321186]
[184.05903625 9.17298031]
[170.56457520 15.72274876]
[157.07011414 22.27251816]
[145.18620300 31.42526245]
[135.40773010 42.79985046]
[125.62924194 54.17443848]
[115.85075378 65.54902649]
[106.07226562 76.92361450]
[119.89910126 90.01046753]
[119.17218018 107.72403717]
[106.35309601 117.98429871]
[105.38546753 132.95304871]
[104.41783905 147.92181396]
[103.45021057 162.89056396]
[102.64368439 177.86886597]
[101.99835205 192.85498047]
[101.35301971 207.84109497]
[100.70768738 222.82720947]
[100.22361755 237.81939697]
[99.90087891 252.81591797]
[99.57814026 267.81243896]
[99.25539398 282.80895996]
[98.93265533 297.80551147]
[98.60991669 312.80203247]
[98.28717041 327.79855347]
[97.96443176 342.79507446]
[97.64168549 357.79162598]
[97.31894684 372.78814697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[13 135]
[14 134]
[15 133]
[16 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 53]
[25 52]
[26 51]
[28 48]
[29 47]
[30 46]
[31 44]
[32 43]
[33 42]
[54 125]
[55 124]
[56 123]
[57 122]
[58 121]
[78 120]
[79 119]
[80 118]
[81 117]
[82 116]
[83 115]
[85 114]
[86 113]
[87 112]
[88 111]
[90 107]
[91 106]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
