%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGACCCGUGUGACUGAAGAGGAGCUCACAGUUCCCAGCGUCUGCUCCCACGGUGUCCAGCGCCCAGA\
) } def
/len { sequence length } bind def

/coor [
[117.75124359 250.03179932]
[119.33258057 234.93664551]
[126.26361084 221.43385315]
[137.60697937 211.34957886]
[132.33634949 197.30606079]
[127.06572723 183.26254272]
[121.48132324 169.34080505]
[115.58594513 155.54789734]
[109.69057465 141.75497437]
[103.79519653 127.96205902]
[97.89982605 114.16914368]
[86.82873535 105.62966919]
[88.30725861 91.72623444]
[82.41188812 77.93331146]
[70.35355377 75.62727356]
[61.10169220 67.74411011]
[56.99406052 56.43402481]
[58.99002075 44.69152832]
[66.44958496 35.56278229]
[61.81433105 21.29693222]
[57.17907715 7.03108501]
[50.97570038 -6.62607813]
[43.28221130 -19.50280952]
[35.58872223 -32.37954330]
[27.89523315 -45.25627518]
[20.20174408 -58.13300705]
[12.50825405 -71.00973511]
[-0.80609840 -81.50566101]
[5.59385824 -97.20523834]
[22.45158005 -95.40147400]
[25.38498688 -78.70322418]
[33.07847595 -65.82649231]
[40.77196503 -52.94976425]
[48.46545410 -40.07303238]
[56.15894318 -27.19629860]
[63.85243225 -14.31956673]
[66.48022461 -13.92762756]
[69.10943604 -12.42681217]
[71.30751801 -9.81501007]
[72.65053558 -6.24863434]
[72.77829742 -2.03464675]
[71.44492340 2.39583039]
[76.08017731 16.66167831]
[80.71543884 30.92752647]
[97.35681152 37.94215393]
[104.00766754 55.06560516]
[96.20480347 72.03794098]
[102.10017395 85.83085632]
[113.17126465 94.37033081]
[111.69274139 108.27376556]
[117.58811188 122.06668854]
[123.48348999 135.85960388]
[129.37886047 149.65251160]
[135.27424622 163.44543457]
[141.72937012 170.37661743]
[141.10925293 177.99191284]
[146.37986755 192.03543091]
[151.65049744 206.07896423]
[166.82769775 206.20989990]
[180.93125916 211.81826782]
[192.05380249 222.14558411]
[198.69110107 235.79515076]
[199.94551086 250.92098999]
[195.64736938 265.47744751]
[186.37797546 277.49588013]
[173.39094543 285.35089111]
[158.44265747 287.98019409]
[143.55474854 285.02813721]
[130.74069214 276.89398193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 58]
[5 57]
[6 56]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[13 48]
[14 47]
[19 44]
[20 43]
[21 42]
[22 36]
[23 35]
[24 34]
[25 33]
[26 32]
[27 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
