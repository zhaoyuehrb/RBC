%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUCUCUCCUCGCCCGCUGGGUGCUGAAGUUGGGCGGAUGGCAGCAAACCGGCUCCGCUAGAGGACCGAGCCGCCCAGCCCCGCUCCCCCGGACCCAUCGGCGCGCUGCCCACACCUCCAGGCGACCGGCCAACUGGGUCCUGAAGUAGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[95.18233490 135.33041382]
[82.07766724 130.82594299]
[71.67974854 121.66591644]
[65.55894470 109.23375702]
[50.57770920 109.98382568]
[35.59647751 110.73389435]
[25.02205467 122.17152405]
[9.81826782 122.71878815]
[-1.02059805 112.56720734]
[-16.00183296 113.31727600]
[-30.98306847 114.06734467]
[-45.96430206 114.81740570]
[-60.94553757 115.56747437]
[-75.90876770 116.61714935]
[-90.84799194 117.96601105]
[-101.77839661 131.58985901]
[-118.84201050 133.09187317]
[-131.47697449 122.03078461]
[-146.38621521 123.67829132]
[-161.29547119 125.32579803]
[-176.20472717 126.97330475]
[-191.11396790 128.62081909]
[-205.66122437 139.86830139]
[-221.44969177 132.26208496]
[-236.32298279 134.20758057]
[-251.19628906 136.15307617]
[-266.06958008 138.09855652]
[-280.94290161 140.04405212]
[-290.56896973 152.29054260]
[-305.68029785 154.05168152]
[-317.29614258 144.79922485]
[-332.16946411 146.74472046]
[-347.04275513 148.69020081]
[-357.92041016 160.48240662]
[-373.91104126 159.18655396]
[-382.74801636 145.79672241]
[-377.65231323 130.58444214]
[-362.53298950 125.21926117]
[-348.98825073 133.81690979]
[-334.11492920 131.87141418]
[-319.24163818 129.92591858]
[-310.39642334 117.99707031]
[-295.34048462 115.81218719]
[-282.88836670 125.17075348]
[-268.01507568 123.22526550]
[-253.14178467 121.27976990]
[-238.26847839 119.33427429]
[-223.39518738 117.38878632]
[-215.74742126 107.97139740]
[-203.33207703 106.25705719]
[-192.76147461 113.71156311]
[-177.85223389 112.06405640]
[-162.94297791 110.41654968]
[-148.03372192 108.76904297]
[-133.12448120 107.12153625]
[-126.53220367 96.01258850]
[-114.55954742 90.66503906]
[-101.50444031 93.24484253]
[-92.19685364 103.02677917]
[-77.25762177 101.67791748]
[-73.53398132 98.60657501]
[-67.82653046 97.87890625]
[-61.69560623 100.58624268]
[-46.71437073 99.83617401]
[-31.73313522 99.08610535]
[-16.75189972 98.33603668]
[-1.77066553 97.58596802]
[8.00001717 86.40252686]
[23.18243408 85.42844391]
[34.84640884 95.75266266]
[49.82764435 95.00259399]
[64.80887604 94.25252533]
[70.80451965 79.52873993]
[82.60362244 68.87421417]
[97.86075592 64.40685272]
[113.54312897 67.01467133]
[126.53341675 76.17928314]
[134.24940491 90.07896423]
[149.21263123 89.02928925]
[164.17585754 87.97961426]
[179.13908386 86.92993927]
[185.83435059 78.26856995]
[195.99301147 74.82286072]
[206.15011597 77.51119232]
[212.98129272 85.20201874]
[227.97453308 84.75185394]
[242.96777344 84.30169678]
[248.62030029 73.08042908]
[258.46435547 65.38961792]
[270.57861328 62.65190887]
[282.63186646 65.33078766]
[292.33160400 72.85343933]
[297.85998535 83.73186493]
[312.85922241 83.88193512]
[327.85845947 84.03201294]
[342.85772705 84.18208313]
[357.85696411 84.33215332]
[372.85623169 84.48223114]
[387.85546875 84.63230133]
[402.84344482 84.03215790]
[417.78268433 82.68329620]
[432.72192383 81.33444214]
[447.66113281 79.98558044]
[462.58612061 78.48731995]
[477.49539185 76.83981323]
[492.40463257 75.19230652]
[500.64462280 71.11914825]
[507.62826538 73.66407013]
[522.56750488 72.31520844]
[537.50671387 70.96634674]
[543.88604736 56.99496460]
[556.40570068 48.09812927]
[571.69799805 46.66905594]
[585.64929199 53.09215546]
[594.50683594 65.63964081]
[595.88800049 80.93630981]
[589.42120361 94.86743164]
[576.84600830 103.68560028]
[561.54510498 105.01878357]
[547.63427734 98.50834656]
[538.85559082 85.90557861]
[523.91638184 87.25444031]
[508.97711182 88.60330200]
[494.05212402 90.10155487]
[479.14288330 91.74906158]
[464.23364258 93.39656830]
[457.89520264 97.27883911]
[449.01000977 94.92481232]
[434.07077026 96.27366638]
[419.13156128 97.62252808]
[404.19232178 98.97138977]
[413.61273193 110.64426422]
[410.56060791 125.33047485]
[397.26937866 132.28338623]
[383.46484375 126.41522980]
[379.24850464 112.02000427]
[387.70538330 99.63155365]
[372.70614624 99.48148346]
[357.70690918 99.33140564]
[342.70764160 99.18133545]
[327.70840454 99.03125763]
[312.70913696 98.88118744]
[297.70989990 98.73110962]
[287.90530396 113.36605072]
[271.14517212 119.27777863]
[254.02958679 113.93968201]
[243.41793823 99.29493713]
[228.42469788 99.74509430]
[213.43144226 100.19525909]
[197.83265686 111.56650543]
[180.18876648 101.89317322]
[165.22552490 102.94284821]
[150.26229858 103.99251556]
[135.29907227 105.04219055]
[130.71136475 118.11795807]
[121.48542023 128.45742798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 72]
[5 71]
[6 70]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 60]
[15 59]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[31 41]
[32 40]
[33 39]
[78 154]
[79 153]
[80 152]
[81 151]
[85 149]
[86 148]
[87 147]
[93 143]
[94 142]
[95 141]
[96 140]
[97 139]
[98 138]
[99 137]
[100 131]
[101 130]
[102 129]
[103 128]
[104 126]
[105 125]
[106 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
