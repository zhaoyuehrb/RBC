%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGUUUGGGGGUUGGGACCUCCGGCUGCAGGUCCGCCUGGGCCAGACGCGCGAGCGCAAGCAGCGGGUUAGUGGUCGCGCGCCCGACCUCCGCAGUCCCAGCCGAGCCGCGACCCUUCCGGCCGUCCCCACCCCACCUCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[150.47265625 496.45251465]
[149.20909119 481.50582886]
[140.42716980 469.47555542]
[146.97447205 455.07266235]
[145.71089172 440.12597656]
[144.44732666 425.17929077]
[143.18374634 410.23260498]
[140.67401123 407.66558838]
[139.31753540 403.72927856]
[139.75598145 398.99554443]
[142.34347534 394.30612183]
[142.02722168 379.30944824]
[141.71098328 364.31277466]
[141.39472961 349.31613159]
[141.07849121 334.31945801]
[133.07458496 321.75814819]
[140.51921082 307.79791260]
[140.20297241 292.80123901]
[139.88673401 277.80456543]
[139.57048035 262.80789185]
[139.25424194 247.81123352]
[127.27382660 240.67018127]
[120.77738190 228.16078186]
[121.84893036 213.95693970]
[130.32342529 202.32369995]
[125.06125641 188.27700806]
[119.79909515 174.23031616]
[114.53693390 160.18360901]
[109.27477264 146.13691711]
[104.01261139 132.09022522]
[87.57671356 129.85874939]
[74.40874481 119.77298737]
[67.97251892 104.48595428]
[53.03998566 103.06488800]
[38.10744858 101.64381409]
[23.17491722 100.22274780]
[8.24238300 98.80167389]
[-6.43957615 106.10729980]
[-19.95602798 96.82087708]
[-18.40240479 80.49549103]
[-3.37694168 73.92529297]
[9.66345310 83.86914062]
[24.59598732 85.29021454]
[39.52851868 86.71128082]
[54.46105576 88.13235474]
[69.39358521 89.55342102]
[71.64702606 84.44389343]
[74.74587250 79.79821014]
[78.59771729 75.75487518]
[83.08772278 72.43447113]
[78.42240143 58.17842865]
[73.75708008 43.92238617]
[69.09175873 29.66634178]
[64.42642975 15.41029930]
[59.76110840 1.15425634]
[55.09578323 -13.10178661]
[43.45008087 -23.81104279]
[46.84517670 -38.31354523]
[42.17985535 -52.56958771]
[37.51453018 -66.82563019]
[25.86882782 -77.53488922]
[29.26392365 -92.03739166]
[24.59860039 -106.29343414]
[19.93327713 -120.54947662]
[6.33115339 -129.05604553]
[4.64429569 -145.01017761]
[16.16671753 -156.17320251]
[32.05940247 -153.98182678]
[40.13084030 -140.11708069]
[34.18931961 -125.21479797]
[38.85464478 -110.95875549]
[43.51996613 -96.70271301]
[54.83197403 -87.01314545]
[51.77057266 -71.49095154]
[56.43589783 -57.23491287]
[61.10121918 -42.97887039]
[72.41323090 -33.28929901]
[69.35182953 -17.76711082]
[74.01715088 -3.51106715]
[78.68247223 10.74497604]
[83.34780121 25.00101852]
[88.01312256 39.25706100]
[92.67844391 53.51310349]
[97.34376526 67.76914978]
[102.75828552 67.77771759]
[108.09548950 68.68951416]
[113.20576477 70.47896576]
[117.94586945 73.09592438]
[128.93652344 62.88781357]
[139.92718506 52.67970657]
[138.95921326 37.07210922]
[148.29162598 24.52458763]
[163.51791382 20.96169662]
[177.44869995 28.06572533]
[183.50628662 42.48236847]
[178.83047485 57.40452576]
[165.62904358 65.78641510]
[150.13528442 63.67036057]
[139.14463806 73.87847137]
[128.15397644 84.08657837]
[131.47419739 107.43357086]
[118.05930328 126.82806396]
[123.32147217 140.87475586]
[128.58363342 154.92144775]
[133.84579468 168.96815491]
[139.10795593 183.01484680]
[144.37011719 197.06153870]
[163.13407898 203.80525208]
[171.51901245 221.43878174]
[186.15292358 224.73252869]
[200.78681946 228.02629089]
[215.42073059 231.32003784]
[224.54977417 230.14962769]
[230.32688904 234.84057617]
[244.88810730 238.44210815]
[260.48477173 233.37500000]
[272.48864746 244.54812622]
[268.55117798 260.46755981]
[252.72286987 264.75674438]
[241.28656006 253.00332642]
[226.72535706 249.40177917]
[212.12698364 245.95394897]
[197.49307251 242.66018677]
[182.85916138 239.36643982]
[168.22526550 236.07269287]
[162.28878784 243.06930542]
[154.25090027 247.49499512]
[154.56715393 262.49166870]
[154.88339233 277.48834229]
[155.19963074 292.48498535]
[155.51588440 307.48165894]
[163.54240417 321.11563110]
[156.07516479 334.00320435]
[156.39140320 348.99987793]
[156.70764160 363.99655151]
[157.02389526 378.99319458]
[157.34013367 393.98986816]
[158.13043213 408.96902466]
[159.39401245 423.91571045]
[160.65757751 438.86239624]
[161.92115784 453.80908203]
[170.79345703 466.90844727]
[164.15577698 480.24224854]
[165.41934204 495.18893433]
[176.70198059 506.59426880]
[174.67652893 522.50897217]
[160.89672852 530.72460938]
[145.93327332 524.93884277]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 144]
[2 143]
[4 141]
[5 140]
[6 139]
[7 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[25 107]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[50 84]
[51 83]
[52 82]
[53 81]
[54 80]
[55 79]
[56 78]
[58 76]
[59 75]
[60 74]
[62 72]
[63 71]
[64 70]
[88 100]
[89 99]
[90 98]
[109 125]
[110 124]
[111 123]
[112 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
