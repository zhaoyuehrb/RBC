%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGCGGGGAGGGGCGCAGGGCUGCGCGCUCGCCGGCGCUCUCUUUCGGUUUGGUCGGCGGCUGGAGGAGAGUGGACCCCCCCACUUUAAGGCUCUGUCCUCGGCGCGUUCCCGCCGCCCCCCGGUCCCGACGCGGGGCUCGGGG\
) } def
/len { sequence length } bind def

/coor [
[275.91159058 394.09240723]
[275.47619629 387.38281250]
[267.88446045 374.44583130]
[254.76985168 367.38494873]
[254.45852661 351.56680298]
[246.86680603 338.62982178]
[239.27507019 325.69284058]
[231.68334961 312.75585938]
[224.09161377 299.81884766]
[216.49989319 286.88186646]
[208.90817261 273.94488525]
[201.31643677 261.00790405]
[192.91682434 248.58024597]
[183.74334717 236.71232605]
[174.56988525 224.84440613]
[165.39642334 212.97648621]
[158.77140808 209.58433533]
[156.15739441 200.75790405]
[147.23789978 188.69795227]
[138.31840515 176.63798523]
[129.39889526 164.57803345]
[120.47940063 152.51808167]
[111.55990601 140.45811462]
[102.64040375 128.39816284]
[93.72090912 116.33821106]
[79.86271667 110.59795380]
[65.02799988 112.81859589]
[50.19328690 115.03923798]
[35.35857391 117.25988007]
[28.31656456 131.08702087]
[14.47681618 138.10420227]
[-0.83900899 135.61318970]
[-11.74166298 124.57183075]
[-14.03885174 109.22573853]
[-6.84726048 95.47580719]
[7.06779718 88.60916138]
[22.35569763 91.26617432]
[33.13793182 102.42516327]
[47.97264862 100.20452118]
[62.80736160 97.98387909]
[77.64207458 95.76324463]
[82.93824005 81.72933197]
[73.26935577 70.26143646]
[63.60046387 58.79354477]
[53.93157578 47.32564926]
[44.26268768 35.85775757]
[34.59379959 24.38986206]
[24.92490959 12.92196751]
[15.25602150 1.45407379]
[5.58713245 -10.01382065]
[-4.08175611 -21.48171425]
[-13.75064468 -32.94960785]
[-23.41953278 -44.41750336]
[-38.88592148 -43.16430664]
[-52.11754608 -51.27009201]
[-58.02657700 -65.61801910]
[-54.34086990 -80.69101715]
[-42.47765732 -90.69320679]
[-26.99858665 -91.77854919]
[-13.85567474 -83.52970123]
[-8.10263824 -69.11851501]
[-11.95163918 -54.08639145]
[-2.28275084 -42.61849594]
[7.38613796 -31.15060234]
[17.05502701 -19.68270874]
[26.72391510 -8.21481514]
[36.39280319 3.25307918]
[46.06169128 14.72097301]
[55.73057938 26.18886757]
[65.39946747 37.65676117]
[75.06835938 49.12465668]
[84.73724365 60.59254837]
[94.40613556 72.06044006]
[109.06946564 68.90025330]
[113.15639496 54.46775436]
[117.24331665 40.03525543]
[121.33024597 25.60275650]
[113.40473938 11.92935753]
[117.54978943 -3.32167816]
[131.30621338 -11.10218048]
[146.51257324 -6.79611540]
[154.14720154 7.04180479]
[149.68060303 22.20178795]
[135.76274109 29.68968391]
[131.67581177 44.12218475]
[127.58889008 58.55468369]
[123.50196075 72.98718262]
[126.59426117 83.29529572]
[126.04913330 92.87731171]
[122.59703827 100.61096954]
[117.27548218 105.74353027]
[111.27639771 107.96399689]
[105.78086853 107.41870880]
[114.70036316 119.47866821]
[123.61986542 131.53862000]
[132.53935242 143.59858704]
[141.45886230 155.65853882]
[150.37835693 167.71849060]
[159.29785156 179.77845764]
[168.21734619 191.83840942]
[177.26434326 203.80302429]
[186.43780518 215.67094421]
[195.61126709 227.53886414]
[204.78474426 239.40678406]
[208.20864868 224.80278015]
[220.85182190 216.73121643]
[235.54037476 219.77197266]
[243.93988037 232.19970703]
[241.28433228 246.96276855]
[229.08055115 255.68444824]
[214.25343323 253.41616821]
[221.84515381 266.35314941]
[229.43687439 279.29013062]
[237.02861023 292.22714233]
[244.62033081 305.16412354]
[252.21206665 318.10110474]
[259.80380249 331.03808594]
[267.39550781 343.97509766]
[281.05316162 351.96130371]
[280.82147217 366.85409546]
[288.41317749 379.79110718]
[296.27780151 392.56402588]
[304.41174316 405.16717529]
[312.54568481 417.77029419]
[320.67962646 430.37341309]
[328.81359863 442.97656250]
[337.08084106 455.49264526]
[345.48046875 467.92028809]
[353.88006592 480.34793091]
[362.27969360 492.77557373]
[370.67932129 505.20321655]
[379.07894897 517.63085938]
[392.95791626 527.36791992]
[387.44345093 543.40002441]
[370.51135254 542.53918457]
[366.65130615 526.03051758]
[358.25167847 513.60284424]
[349.85205078 501.17520142]
[341.45242310 488.74755859]
[333.05282593 476.31991577]
[324.65319824 463.89227295]
[318.25747681 460.08538818]
[316.21044922 451.11050415]
[308.07650757 438.50735474]
[299.94256592 425.90423584]
[291.80862427 413.30111694]
[283.67465210 400.69796753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 121]
[3 120]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 104]
[14 103]
[15 102]
[16 101]
[18 100]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[26 41]
[27 40]
[28 39]
[29 38]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[74 87]
[75 86]
[76 85]
[77 84]
[122 147]
[123 146]
[124 145]
[125 144]
[126 143]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
[132 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
