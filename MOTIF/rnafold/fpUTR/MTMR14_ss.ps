%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUCCGGCGGGACGGGGCGGGGCCGGAAGUGGAAGUGGAAGUAGAAGGCGGUGGCUGAGGCGGUUCCGGAGGUUCUAGUGUCGGAGUUGGGUGCAGGCAGGUGCCAUGGGCCCGCUUGAGGCACACUGAGGGGACGCGGGGCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[-78.66641235 252.71472168]
[-101.24445343 261.61761475]
[-124.66913605 255.69718933]
[-134.82835388 266.73306274]
[-138.48245239 282.12649536]
[-152.79490662 286.24990845]
[-162.95413208 297.28579712]
[-173.11335754 308.32165527]
[-183.27258301 319.35751343]
[-193.43180847 330.39337158]
[-203.59103394 341.42922974]
[-200.78675842 353.05963135]
[-203.94171143 364.47509766]
[-212.15205383 372.84307861]
[-223.27490234 376.14599609]
[-234.48674011 373.66705322]
[-245.09333801 384.27365112]
[-252.01788330 399.74902344]
[-268.80538940 397.37908936]
[-271.17529297 380.59161377]
[-255.69993591 373.66705322]
[-245.09333801 363.06045532]
[-246.23512268 344.83590698]
[-233.52247620 331.28863525]
[-214.62689209 331.26998901]
[-204.46766663 320.23413086]
[-194.30844116 309.19827271]
[-184.14921570 298.16241455]
[-173.98999023 287.12655640]
[-163.83076477 276.09069824]
[-160.90333557 261.48660278]
[-145.86421204 256.57382202]
[-135.70500183 245.53796387]
[-139.37477112 239.57424927]
[-141.93179321 233.04748535]
[-143.29260254 226.16348267]
[-143.41151428 219.13986206]
[-142.28210449 212.19909668]
[-139.93757629 205.56152344]
[-136.44972229 199.43832397]
[-131.92677307 194.02479553]
[-126.50999451 189.49414062]
[-120.36933899 185.99194336]
[-113.69805145 183.63143921]
[-106.70662689 182.48988342]
[-99.61614990 182.60607910]
[-92.65131378 183.97894287]
[-86.03329468 186.56758118]
[-79.97274780 190.29240417]
[-74.66304779 195.03765869]
[-61.93867874 187.09471130]
[-49.21430588 179.15177917]
[-46.16250610 167.40565491]
[-35.57226944 160.69433594]
[-22.85799217 163.09761047]
[-9.97218227 155.41934204]
[2.91362667 147.74105835]
[15.79943562 140.06278992]
[28.68524551 132.38450623]
[30.08223534 119.53839111]
[38.76733780 109.70882416]
[51.72311020 106.65065765]
[64.24869537 111.70468140]
[77.29044342 104.29435730]
[90.33218384 96.88403320]
[95.26538849 90.43994141]
[103.72092438 89.45851135]
[116.91303253 82.31929779]
[130.10513306 75.18008423]
[143.29724121 68.04087830]
[145.45924377 52.78860092]
[156.06376648 41.86167908]
[170.89363098 39.30454636]
[184.22599792 45.89133835]
[197.41810608 38.75212860]
[210.61021423 31.61291695]
[212.81182861 27.70353699]
[215.85635376 25.00575256]
[219.24595642 23.63651848]
[222.49726868 23.53436661]
[225.19985962 24.48047447]
[238.93646240 18.45504189]
[252.67306519 12.42961121]
[266.40966797 6.40418005]
[280.14627075 0.37874851]
[290.66561890 -14.69934273]
[308.00335693 -12.16458321]
[321.61248779 -18.47262001]
[335.22161865 -24.78065681]
[348.83078003 -31.08869553]
[355.35119629 -37.57774734]
[362.78698730 -37.38322067]
[376.52355957 -43.40864944]
[390.26016235 -49.43408203]
[403.99676514 -55.45951462]
[413.52655029 -68.08859253]
[428.28988647 -66.11546326]
[442.02648926 -72.14089966]
[455.70010376 -78.30796051]
[469.30923462 -84.61599731]
[482.91836548 -90.92403412]
[491.90771484 -104.63986206]
[508.26309204 -103.44276428]
[515.15954590 -88.56421661]
[505.50253296 -75.30998993]
[489.22640991 -77.31489563]
[475.61727905 -71.00685883]
[462.00814819 -64.69882202]
[457.23196411 -58.99645615]
[448.05194092 -58.40429688]
[434.31533813 -52.37886810]
[425.76806641 -40.18076706]
[410.02221680 -41.72291183]
[396.28561401 -35.69748306]
[382.54901123 -29.67205048]
[368.81240845 -23.64661980]
[355.13879395 -17.47955513]
[341.52966309 -11.17151833]
[327.92053223 -4.86348104]
[314.31140137 1.44455624]
[309.83010864 12.72297955]
[298.49105835 18.07283211]
[286.17169189 14.11534882]
[272.43508911 20.14077950]
[258.69848633 26.16621208]
[244.96189880 32.19164276]
[231.22529602 38.21707535]
[217.74943542 44.80502319]
[204.55732727 51.94423294]
[191.36521912 59.08344269]
[189.58734131 73.84749603]
[179.33541870 84.86394501]
[164.38764954 87.76522827]
[150.43644714 81.23298645]
[137.24435425 88.37219238]
[124.05223846 95.51140594]
[110.86013794 102.65061951]
[97.74250793 109.92577362]
[84.70076752 117.33609772]
[71.65901947 124.74642181]
[67.34935760 141.66946411]
[52.44270325 150.10153198]
[36.36352158 145.27032471]
[23.47771263 152.94859314]
[10.59190273 160.62687683]
[-2.29390693 168.30514526]
[-15.17971611 175.98341370]
[-23.75322914 192.24688721]
[-41.27136230 191.87614441]
[-53.99573135 199.81909180]
[-66.72010040 207.76203918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[16 22]
[17 21]
[50 151]
[51 150]
[52 149]
[55 147]
[56 146]
[57 145]
[58 144]
[59 143]
[63 140]
[64 139]
[65 138]
[67 137]
[68 136]
[69 135]
[70 134]
[74 130]
[75 129]
[76 128]
[81 127]
[82 126]
[83 125]
[84 124]
[85 123]
[87 120]
[88 119]
[89 118]
[90 117]
[92 116]
[93 115]
[94 114]
[95 113]
[97 111]
[98 110]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
