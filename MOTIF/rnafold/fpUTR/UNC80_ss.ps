%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCGGGAGGAGGCGGCGGCGGCGGCUAGCGAGGAGACAGAGCUGGGUCCUGCAGUAGGACUCCCGGGAGCCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[138.71125793 314.10543823]
[149.49006653 303.06820679]
[146.03083801 288.47253418]
[131.41911316 280.38879395]
[126.96574402 263.94827271]
[135.84111023 249.02012634]
[131.81852722 234.56956482]
[127.79593658 220.11900330]
[123.77334595 205.66844177]
[119.75075531 191.21788025]
[115.72816467 176.76731873]
[100.26738739 171.62026978]
[90.74903107 158.19203186]
[91.01776886 141.57012939]
[101.16407776 128.19441223]
[96.58418274 113.91069794]
[86.36005402 104.37347412]
[89.13209534 90.66918945]
[84.55220795 76.38546753]
[79.97231293 62.10175323]
[75.39242554 47.81803513]
[69.64998627 40.37250519]
[70.92353058 32.89089203]
[66.90093994 18.44032669]
[62.87835312 3.98976398]
[58.14400482 -1.22045588]
[57.12023163 -7.14982510]
[59.15084839 -11.73781490]
[56.26016617 -26.45664406]
[53.36948013 -41.17547226]
[50.47879791 -55.89430237]
[47.58811188 -70.61313629]
[32.90098953 -74.91975403]
[21.90564156 -85.56686401]
[17.12871742 -100.10782623]
[19.66791916 -115.20124054]
[28.93975830 -127.37873840]
[42.81363297 -133.84204102]
[58.10142899 -133.10591125]
[71.29012299 -125.33950806]
[79.34904480 -112.32749939]
[80.42632294 -97.05995178]
[74.27439880 -83.04522705]
[62.30694199 -73.50381470]
[65.19762421 -58.78498840]
[68.08831024 -44.06615829]
[70.97899628 -29.34732819]
[73.86968231 -14.62849808]
[77.32891846 -0.03282534]
[81.35150909 14.41773796]
[85.37409210 28.86830139]
[89.67613983 43.23814392]
[94.25603485 57.52186203]
[98.83592224 71.80558014]
[103.41581726 86.08930206]
[113.63994598 95.62652588]
[110.86790466 109.33081055]
[115.44779205 123.61453247]
[128.96087646 126.99987793]
[138.91027832 136.59390259]
[142.72393799 149.76538086]
[139.49150085 162.97911072]
[130.17872620 172.74472046]
[134.20132446 187.19528198]
[138.22390747 201.64585876]
[142.24650574 216.09642029]
[146.26908875 230.54698181]
[150.29167175 244.99754333]
[162.83663940 250.31311035]
[169.85470581 261.76171875]
[168.92707825 274.96142578]
[160.62651062 285.01327515]
[164.08573914 299.60894775]
[178.67155457 304.63467407]
[188.20684814 316.76242065]
[189.64895630 332.12222290]
[182.53770447 345.81286621]
[169.14225769 353.46569824]
[153.73707581 352.63873291]
[141.23788452 343.59585571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 73]
[3 72]
[6 68]
[7 67]
[8 66]
[9 65]
[10 64]
[11 63]
[15 58]
[16 57]
[18 55]
[19 54]
[20 53]
[21 52]
[23 51]
[24 50]
[25 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
