%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCUGCGACGGCGCGGACCUGGAGCUUCCGCGCGGUGGCUUCACUCUCCUGUAAAACGCUAGAGCGGCGAGUUGUUACCUGCGUCCUCUGACCUGAGAGCGAAGGGGAAAGCGGCGAG\
) } def
/len { sequence length } bind def

/coor [
[115.69423676 188.29644775]
[111.84330750 173.79919434]
[107.99237823 159.30194092]
[104.14144897 144.80468750]
[100.29051971 130.30743408]
[96.43959045 115.81018829]
[83.22802734 108.70705414]
[69.01108551 113.49021149]
[58.39858627 125.22415924]
[43.86848068 121.94921112]
[29.65153885 126.73236847]
[19.03903961 138.46630859]
[4.50893259 135.19137573]
[-9.70800781 139.97453308]
[-23.92494774 144.75769043]
[-38.14188766 149.54084778]
[-52.35882950 154.32400513]
[-66.57576752 159.10716248]
[-80.79270935 163.89031982]
[-84.45966339 178.87554932]
[-95.66184998 189.48283386]
[-110.82469177 192.32743835]
[-125.10977936 186.50166321]
[-133.95880127 173.86447144]
[-134.54804993 158.44836426]
[-126.68951416 145.17256165]
[-112.89082336 138.27333069]
[-97.55507660 139.95216370]
[-85.57586670 149.67338562]
[-71.35892487 144.89022827]
[-57.14198685 140.10707092]
[-42.92504501 135.32391357]
[-28.70810699 130.54075623]
[-14.49116611 125.75759125]
[-0.27422643 120.97443390]
[9.32138157 109.58261108]
[24.86837959 112.51543427]
[39.08531952 107.73226929]
[48.68092728 96.34045410]
[64.22792816 99.27327728]
[78.44486237 94.49011230]
[90.74053192 85.40956879]
[102.32001495 87.90758514]
[111.69409180 76.19747925]
[114.27804565 60.58870697]
[128.27212524 55.48819733]
[137.64619446 43.77808762]
[147.02027893 32.06798172]
[156.39436340 20.35787392]
[165.76843262 8.64776516]
[164.22087097 -6.85200119]
[173.89433289 -18.59417915]
[188.68052673 -19.97403336]
[198.05461121 -31.68414116]
[183.07801819 -30.84630585]
[170.93753052 -39.65587616]
[167.08912659 -54.15379715]
[173.26226807 -67.82464600]
[186.68275452 -74.52470398]
[201.31935120 -71.24292755]
[210.59431458 -59.45416641]
[210.33987427 -44.45742035]
[221.67611694 -54.28033066]
[233.01235962 -64.10324097]
[244.34860229 -73.92615509]
[255.68484497 -83.74906158]
[260.19259644 -91.83609009]
[267.44525146 -93.67517853]
[279.03268433 -103.20047760]
[290.62011719 -112.72578430]
[302.20755005 -122.25109100]
[313.67034912 -131.92601013]
[325.00659180 -141.74891663]
[324.57760620 -157.38061523]
[334.33728027 -169.59875488]
[349.67739868 -172.63429260]
[363.35485840 -165.05393982]
[368.91152954 -150.43692017]
[363.72375488 -135.68493652]
[350.24105835 -127.76342773]
[334.82949829 -130.41267395]
[323.49325562 -120.58976746]
[320.46212769 -113.74903107]
[311.73284912 -110.66365814]
[300.14541626 -101.13835144]
[288.55798340 -91.61304474]
[276.97055054 -82.08774567]
[265.50775146 -72.41281891]
[254.17150879 -62.58990860]
[242.83526611 -52.76699829]
[231.49902344 -42.94408798]
[220.16278076 -33.12117767]
[209.76470947 -22.31006050]
[200.39064026 -10.59995270]
[202.28099060 4.12968159]
[192.94116211 16.13893318]
[177.47854614 18.02184486]
[168.10446167 29.73195267]
[158.73039246 41.44206238]
[149.35630798 53.15216827]
[139.98222351 64.86227417]
[138.06877136 79.63346100]
[123.40419769 85.57155609]
[114.03012085 97.28166962]
[110.93684387 111.95925903]
[114.78777313 126.45651245]
[118.63870239 140.95376587]
[122.48963165 155.45101929]
[126.34056091 169.94827271]
[130.19148254 184.44552612]
[145.12969971 187.77845764]
[156.80044556 197.68058777]
[162.52185059 211.87651062]
[160.97921753 227.10408020]
[152.52699280 239.86412048]
[139.10746765 247.22445679]
[123.80432129 247.49375916]
[110.13413239 240.61013794]
[101.23818970 228.15538025]
[99.16072083 212.99151611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 110]
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 41]
[8 40]
[10 38]
[11 37]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[43 104]
[44 103]
[46 101]
[47 100]
[48 99]
[49 98]
[50 97]
[53 94]
[54 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[68 87]
[69 86]
[70 85]
[71 84]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
