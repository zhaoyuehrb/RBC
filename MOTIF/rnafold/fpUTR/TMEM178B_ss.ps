%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCUUUGUUCCGGGUGCGGCGAGGGAAGGCGAGGCUGCGGCGGAUCAUGCCCAUGGUGUAGCCGCCAAGCGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[84.09083557 293.03009033]
[85.71822357 277.47741699]
[96.99780273 266.64669800]
[95.82092285 251.69291687]
[94.64403534 236.73916626]
[93.46714783 221.78540039]
[92.29026031 206.83164978]
[88.52614594 200.23696899]
[91.37252045 191.26966858]
[90.78362274 176.28123474]
[82.45798492 169.81301880]
[79.13755035 159.57197571]
[82.20817566 149.02087402]
[90.84887695 141.87651062]
[91.43777466 126.88807678]
[92.02667236 111.89964294]
[85.68709564 99.43764496]
[92.98488617 87.51145935]
[93.57378387 72.52302551]
[94.16268158 57.53458786]
[94.75157928 42.54615402]
[87.56203461 28.45285606]
[95.79304504 16.03916168]
[96.38194275 1.05072570]
[89.19239807 -13.04257202]
[97.42340088 -25.45626640]
[98.01229858 -40.44470215]
[98.60119629 -55.43313980]
[84.43643951 -60.70732117]
[72.61141205 -70.08875275]
[64.27635193 -82.64881134]
[60.23706818 -97.15051270]
[60.87700272 -112.17026520]
[66.12091827 -126.23768616]
[75.44347382 -137.97949219]
[87.92182159 -146.25361633]
[102.32696533 -150.26020813]
[102.91586304 -165.24864197]
[94.80548096 -179.50184631]
[103.32627869 -193.51356506]
[119.71278381 -192.86973572]
[127.10796356 -178.23268127]
[117.90429688 -164.65974426]
[117.31539917 -149.67131042]
[131.36178589 -144.54685974]
[143.15248108 -135.31919861]
[151.52503967 -122.88214874]
[155.64907837 -108.44666290]
[155.10861206 -93.42299652]
[149.94398499 -79.28292847]
[140.64916992 -67.41554260]
[128.12454224 -58.99081039]
[113.58963013 -54.84424210]
[113.00074005 -39.85580444]
[112.41184235 -24.86736870]
[119.64350128 -11.84614468]
[111.37037659 1.63962293]
[110.78147888 16.62805939]
[118.01314545 29.64928246]
[109.74001312 43.13505173]
[109.15112305 58.12348557]
[108.56222534 73.11192322]
[107.97332764 88.10035706]
[114.31290436 100.56235504]
[107.01511383 112.48854065]
[106.42621613 127.47697449]
[105.83731842 142.46540833]
[116.15476227 159.57197571]
[105.77206421 175.69233704]
[106.36095428 190.68077087]
[107.24401855 205.65475464]
[108.42090607 220.60852051]
[109.59779358 235.56227112]
[110.77468109 250.51603699]
[111.95156860 265.46978760]
[124.78658295 274.40267944]
[128.82690430 289.50930786]
[122.16482544 303.65676880]
[107.94596863 310.16506958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[6 72]
[7 71]
[9 70]
[10 69]
[14 67]
[15 66]
[16 65]
[18 63]
[19 62]
[20 61]
[21 60]
[23 58]
[24 57]
[26 55]
[27 54]
[28 53]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
