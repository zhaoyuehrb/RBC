%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGUGCGCGAGUCCUGGCGCGUGCCCGCCCUCAAGCAACUGUCCGACCCAGCGGGUGGGAGGGGUGGGUCUGGGAACGUUGCGGCGGCUGUCGCCGCGGCCCCAGCACCCAGAGCUGUUCUCUGGCCAAGCCUGCGCCUGUAGUCCUUCUUUGCCUCCUGGGGCGGCCGCCACCCACCCCCAG\
) } def
/len { sequence length } bind def

/coor [
[-10.23244476 209.35643005]
[-17.73244476 222.34681702]
[-25.23244476 235.33718872]
[-25.43183136 251.15713501]
[-38.49616623 258.31063843]
[-45.99616623 271.30102539]
[-53.49616623 284.29138184]
[-60.99616623 297.28176880]
[-68.49617004 310.27215576]
[-75.99617004 323.26254272]
[-83.49617004 336.25292969]
[-77.06201935 350.37316895]
[-80.18933868 365.57183838]
[-91.67561340 376.00473022]
[-107.10412598 377.66018677]
[-120.54230499 369.90164185]
[-126.82289886 355.71243286]
[-123.53088379 340.54858398]
[-111.93211365 330.24090576]
[-96.48654938 328.75292969]
[-88.98654938 315.76254272]
[-81.48654938 302.77215576]
[-73.98654938 289.78176880]
[-66.48654938 276.79138184]
[-58.98654938 263.80102539]
[-51.48654938 250.81063843]
[-51.82361221 235.91984558]
[-38.22282410 227.83718872]
[-30.72282600 214.84681702]
[-23.22282600 201.85643005]
[-26.23859406 194.98947144]
[-39.04838181 202.79391479]
[-51.85817337 210.59834290]
[-64.66796112 218.40278625]
[-74.87326813 229.39604187]
[-89.86618805 229.85705566]
[-100.72761536 219.51155090]
[-100.99624634 204.51396179]
[-90.51226044 193.78613281]
[-75.51232147 193.70999146]
[-61.09825516 189.55850220]
[-46.68419266 185.40702820]
[-32.27013016 181.25555420]
[-35.28590012 174.38859558]
[-49.92575455 171.12138367]
[-64.56561279 167.85418701]
[-79.71973419 172.39984131]
[-90.45613861 162.07614136]
[-105.09600067 158.80894470]
[-119.73585510 155.54173279]
[-134.37570190 152.27453613]
[-151.15151978 154.72572327]
[-158.15092468 139.28407288]
[-145.25036621 128.28353882]
[-131.10850525 137.63467407]
[-116.46865082 140.90188599]
[-101.82879639 144.16908264]
[-87.18893433 147.43629456]
[-73.08195496 142.65693665]
[-61.29840851 153.21432495]
[-46.65855026 156.48153687]
[-32.01869583 159.74873352]
[-17.25396919 157.10243225]
[-4.66013050 148.95411682]
[7.93370867 140.80578613]
[20.52754784 132.65745544]
[33.12138748 124.50913239]
[45.71522522 116.36080933]
[58.30906677 108.21247864]
[70.90290833 100.06415558]
[83.49674225 91.91583252]
[89.87425995 78.33911133]
[88.10491180 63.44383240]
[86.33556366 48.54854965]
[84.56620789 33.65327072]
[82.79685974 18.75798798]
[79.64251709 14.54429913]
[78.54487610 9.99653530]
[79.28403473 5.95941401]
[81.33491516 3.06596017]
[80.32227325 -11.89981937]
[79.30962372 -26.86559868]
[78.29697418 -41.83137894]
[77.28433228 -56.79715729]
[76.27168274 -71.76293945]
[75.25904083 -86.72871399]
[74.24639130 -101.69449615]
[73.23374939 -116.66027069]
[62.14403534 -128.25328064]
[64.43619537 -144.13174438]
[78.35188293 -152.11506653]
[93.21616364 -146.07911682]
[97.62644196 -130.65417480]
[88.19952393 -117.67292023]
[89.21217346 -102.70713806]
[90.22481537 -87.74136353]
[91.23746490 -72.77558136]
[92.25010681 -57.80980301]
[93.26275635 -42.84402466]
[94.27540588 -27.87824440]
[95.28804779 -12.91246510]
[96.30069733 2.05331397]
[97.69213867 16.98863792]
[99.46149445 31.88391876]
[101.23084259 46.77919769]
[103.00019073 61.67448044]
[104.76954651 76.56976318]
[111.73444366 79.35188293]
[123.51809692 70.07042694]
[125.66423798 84.91613007]
[132.62913513 87.69824982]
[144.17390442 78.12128448]
[155.71867371 68.54431152]
[167.26344299 58.96734619]
[178.80821228 49.39037704]
[190.35298157 39.81340790]
[193.26686096 24.03719711]
[207.48529053 16.60645676]
[222.10108948 23.22141457]
[225.90228271 38.80764389]
[215.97291565 51.40871811]
[199.92994690 51.35817719]
[188.38517761 60.93514633]
[176.84040833 70.51211548]
[165.29563904 80.08908081]
[153.75086975 89.66605377]
[142.20610046 99.24301910]
[143.40437317 106.64667511]
[158.21173096 104.25035095]
[160.60781860 119.05773926]
[145.80093384 121.45398712]
[146.99920654 128.85765076]
[160.97549438 134.30404663]
[174.95178223 139.75045776]
[184.10633850 139.95336914]
[189.11685181 145.40869141]
[202.99916077 151.09036255]
[218.70176697 149.15681458]
[227.54997253 161.13841248]
[241.43228149 166.82008362]
[250.69836426 154.90194702]
[262.83700562 145.92665100]
[276.94744873 140.56024170]
[291.98257446 139.20091248]
[306.82666016 141.94955444]
[320.37823486 148.60220337]
[331.63165283 158.66517639]
[339.75180054 171.39173889]
[344.13616943 185.83749390]
[344.45938110 200.93048096]
[340.69744873 215.55068970]
[333.12951660 228.61320496]
[322.31723022 239.14869690]
[309.06286621 246.37536621]
[294.35003662 249.75695801]
[279.27050781 249.04251099]
[264.94329834 244.28506470]
[252.43154907 235.83764648]
[242.66374207 224.32710266]
[236.36471558 210.60760498]
[234.00187683 195.69721985]
[235.75059509 180.70239258]
[221.86828613 175.02070618]
[207.15863037 177.36065674]
[197.31747437 164.97267151]
[183.43516541 159.29100037]
[169.50537109 153.72674561]
[155.52908325 148.28034973]
[141.55279541 142.83393860]
[119.37692261 145.70268250]
[101.25885773 139.58409119]
[90.21152496 127.90023804]
[87.31900787 114.85425568]
[91.64507294 104.50966644]
[79.05123138 112.65799713]
[66.45738983 120.80632019]
[53.86355209 128.95465088]
[41.26971436 137.10296631]
[28.67587471 145.25129700]
[16.08203506 153.39962769]
[3.48819542 161.54794312]
[-9.10564423 169.69627380]
[-4.76347446 175.13420105]
[-2.13031507 182.49592590]
[-1.88554966 191.20484924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[44 62]
[45 61]
[46 60]
[48 58]
[49 57]
[50 56]
[51 55]
[63 182]
[64 181]
[65 180]
[66 179]
[67 178]
[68 177]
[69 176]
[70 175]
[71 174]
[72 107]
[73 106]
[74 105]
[75 104]
[76 103]
[80 102]
[81 101]
[82 100]
[83 99]
[84 98]
[85 97]
[86 96]
[87 95]
[88 94]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
[116 122]
[132 169]
[133 168]
[134 167]
[136 166]
[137 165]
[139 163]
[140 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
