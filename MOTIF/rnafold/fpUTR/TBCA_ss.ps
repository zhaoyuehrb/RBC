%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUGCGCGCCGGCGACCACGCCUAAAUAGCCGCAGCCUCUGCGCGUCGCCCUCCACGGUUACCCCGGCUCUCCGCCCCUCCUUCUCGCGGCGCUCGAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[233.36018372 141.44966125]
[216.62535095 143.53892517]
[200.58265686 138.16325378]
[188.40690613 126.33660126]
[182.52922058 110.35443878]
[167.57116699 109.23348999]
[152.61311340 108.11253357]
[137.63996887 107.21546936]
[122.65506744 106.54250336]
[107.67017365 105.86952972]
[108.20874023 124.00606537]
[89.49185944 139.71656799]
[76.50148010 147.21656799]
[63.51110077 154.71656799]
[50.52072144 162.21656799]
[42.79420471 176.68145752]
[26.39728928 176.95204163]
[18.19771576 162.74995422]
[26.63050079 148.68510437]
[43.02072144 149.22619629]
[56.01110077 141.72619629]
[69.00148010 134.22619629]
[81.99185944 126.72618866]
[82.66415405 119.25637817]
[67.66833496 119.61032867]
[54.55234909 126.88844299]
[40.51525879 121.60071564]
[35.46094131 107.47789764]
[42.95547104 94.48435974]
[57.71108246 91.78769684]
[69.31711578 101.29090118]
[84.00875092 104.31676483]
[84.68104553 96.84696198]
[73.23860168 87.14796448]
[61.79615402 77.44897461]
[50.35371017 67.74997711]
[34.36159134 62.12072754]
[35.34378815 45.19525528]
[51.87970734 41.45363235]
[60.05270386 56.30753326]
[71.49514771 66.00653076]
[82.93759155 75.70552063]
[94.38003540 85.40451813]
[108.34313965 90.88462830]
[123.32804108 91.55760193]
[138.31292725 92.23057556]
[147.19232178 89.45549011]
[153.73406982 93.15447998]
[168.69212341 94.27542877]
[183.65017700 95.39637756]
[189.51376343 83.35926819]
[199.13179016 74.09072876]
[211.31866455 68.70254517]
[224.58267212 67.83006287]
[237.30851746 71.55734253]
[247.95404053 79.40966034]
[255.23716736 90.41381073]
[258.29019165 103.21868896]
[273.15441895 105.23218536]
[288.01867676 107.24568939]
[294.52383423 105.00785065]
[300.26849365 106.31622314]
[303.70135498 109.84997559]
[318.41860962 112.74881744]
[333.13583374 115.64765167]
[347.89477539 118.32601166]
[362.69213867 120.78327942]
[377.52459717 123.01891327]
[392.38882446 125.03240967]
[400.81570435 117.83287811]
[411.60504150 116.57967377]
[421.06356812 121.45322418]
[426.09118652 130.57847595]
[440.80841064 133.47732544]
[455.52563477 136.37615967]
[470.24285889 139.27499390]
[479.79089355 127.31282806]
[493.80902100 121.16867065]
[509.07598877 122.25440979]
[522.08349609 130.32054138]
[529.84259033 143.51353455]
[530.57025146 158.80174255]
[524.09930420 172.67202759]
[511.91665649 181.93711853]
[496.82183838 184.46795654]
[482.28353882 179.68298340]
[471.64251709 168.68173218]
[467.34402466 153.99221802]
[452.62680054 151.09338379]
[437.90957642 148.19454956]
[423.19235229 145.29571533]
[405.55892944 152.98866272]
[390.37533569 139.89665222]
[375.51107788 137.88316345]
[368.34323120 140.14120483]
[360.23486328 135.58064270]
[345.43750000 133.12336731]
[338.20529175 135.16598511]
[330.23696899 130.36488342]
[315.51974487 127.46604156]
[300.80252075 124.56719971]
[286.00515747 122.10993195]
[271.14093018 120.09643555]
[256.27667236 118.08293915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 50]
[6 49]
[7 48]
[8 46]
[9 45]
[10 44]
[12 23]
[13 22]
[14 21]
[15 20]
[33 43]
[34 42]
[35 41]
[36 40]
[58 104]
[59 103]
[60 102]
[63 101]
[64 100]
[65 99]
[66 97]
[67 96]
[68 94]
[69 93]
[73 91]
[74 90]
[75 89]
[76 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
