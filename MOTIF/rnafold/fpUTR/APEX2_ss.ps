%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAACGCGCGCGGGAGGCGGGCCUGGCCAACUUCUGAACAGGAAGCAGUUCGCUCGCGCCUAGGUUGGCGCGGGCUGGGAGGUGUUCCAGCCCUUUAAG\
) } def
/len { sequence length } bind def

/coor [
[88.83669281 128.18098450]
[83.80393982 142.31149292]
[90.80752563 156.47924805]
[85.66262817 171.42266846]
[71.42161560 178.27606201]
[56.53343582 172.97346497]
[49.83097839 158.66079712]
[55.29069138 143.82949829]
[69.67342377 137.27874756]
[74.70617676 123.14823151]
[69.01985168 109.26782227]
[55.51980972 102.72955322]
[42.01976776 96.19129181]
[28.51972961 89.65302277]
[15.01969051 83.11475372]
[0.25108230 88.06713104]
[-13.34673786 81.24408722]
[-17.97705269 67.13395691]
[-31.47709274 60.59568787]
[-43.71096039 66.47850037]
[-56.89756775 64.21707153]
[-66.19616699 54.87153625]
[-68.32683563 42.05973434]
[-81.61701202 35.10478210]
[-94.90718079 28.14982986]
[-108.19734955 21.19487762]
[-123.11283112 25.68555069]
[-136.49188232 18.44291496]
[-140.68113708 4.19560909]
[-153.97129822 -2.75934410]
[-169.65000916 0.64029926]
[-181.99191284 -9.60942745]
[-181.52937317 -25.64581108]
[-168.61718750 -35.16711044]
[-153.16049194 -30.86940002]
[-147.01634216 -16.04951477]
[-133.72618103 -9.09456158]
[-119.63226318 -13.77400303]
[-106.05506897 -6.91001511]
[-101.24240112 7.90470648]
[-87.95222473 14.85965919]
[-74.66205597 21.81461334]
[-61.37188721 28.76956558]
[-45.64440918 23.04367638]
[-30.30276299 30.53451157]
[-24.93882561 47.09564590]
[-11.43878651 53.63391495]
[2.50278020 48.51841736]
[16.28688049 54.95683670]
[21.55795670 69.61471558]
[35.05799484 76.15298462]
[48.55803680 82.69125366]
[62.05807495 89.22951508]
[75.55811310 95.76778412]
[82.64108276 81.88865662]
[96.73567963 74.84268188]
[112.43452454 77.56607819]
[123.90851593 67.90441895]
[135.38250732 58.24276733]
[146.85649109 48.58110809]
[158.33047485 38.91945267]
[159.43081665 23.15351486]
[171.41172791 12.84656239]
[187.16514587 14.11352825]
[197.34486389 26.20274162]
[195.91140747 41.94189072]
[183.71524048 51.99321365]
[167.99212646 50.39344025]
[156.51814270 60.05509567]
[145.04415894 69.71675110]
[133.57017517 79.37841034]
[122.09618378 89.04006958]
[123.72596741 103.95126343]
[137.01612854 110.90621948]
[150.30630493 117.86116791]
[163.59648132 124.81612396]
[176.88664246 131.77107239]
[190.17681885 138.72602844]
[203.46697998 145.68098450]
[216.75715637 152.63594055]
[230.04733276 159.59088135]
[246.40101624 158.37071228]
[255.40969849 172.07383728]
[247.80601501 186.60366821]
[231.41197205 187.01315308]
[223.09237671 172.88105774]
[209.80220032 165.92610168]
[196.51203918 158.97114563]
[183.22186279 152.01620483]
[169.93168640 145.06124878]
[156.64152527 138.10629272]
[143.35134888 131.15133667]
[130.06118774 124.19638824]
[116.77101135 117.24143219]
[109.78742981 119.97631836]
[122.77233887 127.48578644]
[124.99733734 142.31985474]
[114.78698730 153.30842590]
[99.82971191 152.17709351]
[91.38836670 139.77775574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[18 47]
[19 46]
[23 43]
[24 42]
[25 41]
[26 40]
[29 37]
[30 36]
[57 72]
[58 71]
[59 70]
[60 69]
[61 68]
[73 94]
[74 93]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
