%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUACGCUCGCACCGGCGAACCUGCCUGGGCAGGCAGCUCGCGCAGGACGGGGCGGGACCAGACAGUUGCGCGCACAGAAGGCUGGCGUAGCAGGUAAAG\
) } def
/len { sequence length } bind def

/coor [
[100.89937592 257.17248535]
[111.71096802 245.87454224]
[109.90292358 230.98390198]
[108.09487152 216.09326172]
[106.06213379 201.23164368]
[103.80516052 186.40240479]
[101.54819489 171.57318115]
[99.29122925 156.74394226]
[97.03426361 141.91471863]
[94.77729034 127.08548737]
[81.09879303 120.92929077]
[68.50231171 129.07353210]
[55.90582275 137.21775818]
[43.30933762 145.36199951]
[36.32055664 160.19738770]
[19.95803452 161.29280090]
[11.05413342 147.52136230]
[18.76842308 133.04994202]
[35.16510391 132.76551819]
[47.76158905 124.62127686]
[60.35807419 116.47704315]
[72.95455933 108.33280945]
[71.22550964 88.49094391]
[83.52941132 70.62026978]
[73.24800110 59.69815826]
[62.96659088 48.77604294]
[52.68518066 37.85393143]
[42.23998260 27.08834457]
[31.63337898 16.48174286]
[21.02677727 5.87514019]
[10.42017651 -4.73146152]
[-4.80911636 -9.01855946]
[-8.33755875 -23.48919678]
[-18.94416046 -34.09579849]
[-29.70974731 -44.54099655]
[-40.63186264 -54.82240677]
[-56.70869064 -58.05776596]
[-61.68807602 -73.68267822]
[-50.44765091 -85.62356567]
[-34.55060196 -81.59667206]
[-30.35045052 -65.74452209]
[-19.42833519 -55.46311188]
[-12.28154755 -53.13150024]
[-8.33755875 -44.70240021]
[2.26904249 -34.09579849]
[16.73968124 -30.56735611]
[21.02677727 -15.33806324]
[31.63337898 -4.73146152]
[42.23998260 5.87514019]
[52.84658432 16.48174286]
[59.91968918 19.02814484]
[63.60729218 27.57251930]
[73.88870239 38.49463272]
[84.17012024 49.41674805]
[94.45153046 60.33885956]
[109.44468689 60.79190826]
[120.36679840 50.51049423]
[131.28890991 40.22908401]
[136.03402710 25.13622284]
[150.60462952 22.04644585]
[161.52674866 11.76503468]
[172.44886780 1.48362374]
[172.67561340 -14.31903839]
[184.06819153 -25.27279282]
[199.86758423 -24.87897110]
[210.70027161 -13.37122154]
[210.13943481 2.42311335]
[198.51779175 13.13353348]
[182.73027039 12.40573788]
[171.80815125 22.68714905]
[160.88604736 32.96855927]
[156.92214966 47.32602692]
[141.57032776 51.15119934]
[130.64820862 61.43260956]
[119.72609711 71.71401978]
[121.30020142 79.04697418]
[135.57536316 83.65345764]
[124.44841766 93.71287537]
[126.02252960 101.04582977]
[140.20202637 105.93887329]
[154.38153076 110.83190918]
[170.36981201 107.18409729]
[181.32318115 119.38884735]
[175.97372437 134.89096069]
[159.82452393 137.74319458]
[149.48847961 125.01140594]
[135.30899048 120.11837006]
[121.12948608 115.22532654]
[109.60652161 124.82852173]
[111.86349487 139.65774536]
[114.12046051 154.48698425]
[116.37742615 169.31620789]
[118.63439178 184.14544678]
[120.89136505 198.97467041]
[125.34313965 207.14697266]
[122.98550415 214.28521729]
[124.79355621 229.17585754]
[126.60160065 244.06648254]
[139.80281067 252.44874573]
[144.47819519 267.37103271]
[138.42019653 281.78750610]
[124.48921967 288.89114380]
[109.26303101 285.32781982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 98]
[3 97]
[4 96]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 22]
[12 21]
[13 20]
[14 19]
[24 55]
[25 54]
[26 53]
[27 52]
[28 50]
[29 49]
[30 48]
[31 47]
[33 45]
[34 44]
[35 42]
[36 41]
[56 75]
[57 74]
[58 73]
[60 71]
[61 70]
[62 69]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
