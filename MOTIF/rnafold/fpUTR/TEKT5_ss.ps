%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUCACCUUUCCUGGUGAUGCCUUUGGCUCCUUGAGCUGAGUUUUGCCCGAGUGGGGCUCAUGAGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[71.97834778 312.81329346]
[64.80809021 326.47311401]
[51.37976456 334.06808472]
[35.97829056 333.17465210]
[23.51823235 324.07794189]
[17.97554398 309.68063354]
[21.11887932 294.57690430]
[31.94521141 283.58627319]
[46.99989700 280.21578979]
[52.06274033 266.09603882]
[57.12558365 251.97628784]
[62.18842697 237.85652161]
[67.25127411 223.73675537]
[72.31411743 209.61700439]
[77.37696075 195.49723816]
[74.38945007 180.90531921]
[86.33058167 170.52650452]
[91.39342499 156.40673828]
[96.45626831 142.28697205]
[101.51911163 128.16722107]
[87.49034119 124.20798492]
[77.76731873 114.03152466]
[74.68183136 100.81416321]
[78.59609985 88.34317780]
[87.93715668 79.93331909]
[84.73434448 65.27924347]
[81.53153229 50.62516403]
[78.32871246 35.97108841]
[75.12590027 21.31701088]
[71.92308807 6.66293287]
[68.72027588 -7.99114466]
[65.51746368 -22.64522171]
[56.22857285 -36.82806015]
[67.28572083 -49.68013382]
[82.69645691 -42.61291504]
[80.17153931 -25.84803581]
[83.37435150 -11.19395828]
[86.57716370 3.46011925]
[89.77997589 18.11419678]
[92.98279572 32.76827240]
[96.18560791 47.42235184]
[99.38842010 62.07642746]
[102.59123230 76.73050690]
[111.02922821 78.26604462]
[118.66369629 82.87285614]
[124.37764740 90.15590668]
[127.24060822 99.31636810]
[126.65293121 109.23694611]
[141.62168884 108.26931763]
[156.59045410 107.30168915]
[171.55920410 106.33406067]
[183.18551636 95.27927399]
[199.05700684 97.61918640]
[206.99844360 111.55881500]
[200.91781616 126.40487671]
[185.47966003 130.76873779]
[172.52682495 121.30281830]
[157.55807495 122.27044678]
[142.58930969 123.23807526]
[127.62055969 124.20570374]
[115.63887024 133.23005676]
[110.57602692 147.34982300]
[105.51318359 161.46958923]
[100.45034027 175.58934021]
[103.07572174 191.19119263]
[91.49671936 200.56008911]
[86.43387604 214.67984009]
[81.37103271 228.79960632]
[76.30818939 242.91935730]
[71.24534607 257.03912354]
[66.18250275 271.15887451]
[61.11965561 285.27865601]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[17 64]
[18 63]
[19 62]
[20 61]
[25 43]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
