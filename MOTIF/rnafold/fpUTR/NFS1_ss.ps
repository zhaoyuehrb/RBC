%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGGGCAGCACUUCCGGGAGCCUGGGGCCCAGGACUGCAGCGGCUUCGGAAGGUGGGCUCUGCCAGCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[101.29563141 300.00689697]
[104.37593079 284.79861450]
[115.82987976 274.33026123]
[114.02182770 259.43960571]
[112.21378326 244.54898071]
[102.78629303 236.69613647]
[101.30173492 224.10916138]
[109.12686157 213.62953186]
[107.91986084 198.67817688]
[106.71286774 183.72682190]
[105.50586700 168.77546692]
[104.29886627 153.82409668]
[101.89270020 139.01834106]
[98.30296326 124.45421600]
[94.71322632 109.89009094]
[90.83094788 95.40120697]
[86.65768433 80.99343109]
[82.48442078 66.58566284]
[78.31115723 52.17789078]
[74.13789368 37.77011871]
[69.96463776 23.36234665]
[64.42702484 15.74243641]
[65.92599487 8.28993130]
[62.33625793 -6.27419567]
[58.74652481 -20.83832359]
[55.15678787 -35.40245056]
[50.98352814 -49.81022263]
[46.23350525 -64.03826904]
[34.52432251 -74.67807770]
[37.83311462 -89.20051575]
[33.08309555 -103.42856598]
[18.47201157 -109.00083923]
[10.90626431 -122.68636322]
[13.95816803 -138.02323914]
[26.18670654 -147.76988220]
[41.81793976 -147.32420349]
[53.47127151 -136.89665222]
[55.64436340 -121.41079712]
[47.31114197 -108.17858124]
[52.06116104 -93.95053864]
[63.43059158 -84.32840729]
[60.46155167 -68.78829193]
[65.21157074 -54.56024170]
[69.25695038 -51.56649017]
[71.29383087 -45.88205719]
[69.72091675 -38.99218369]
[73.31065369 -24.42805862]
[76.90038300 -9.86393070]
[80.49011993 4.70019627]
[84.37240601 19.18908310]
[88.54566956 33.59685516]
[92.71893311 48.00462723]
[96.89218903 62.41239929]
[101.06545258 76.82016754]
[105.23871613 91.22794342]
[110.46240234 97.68309784]
[109.27735901 106.30035400]
[112.86709595 120.86448669]
[116.45682526 135.42860413]
[120.09271240 138.86840820]
[122.04833221 142.92825317]
[122.35062408 146.93235779]
[121.26797485 150.29866028]
[119.25022888 152.61709595]
[120.45722961 167.56846619]
[121.66422272 182.51982117]
[122.87122345 197.47117615]
[124.07822418 212.42254639]
[134.90631104 227.15557861]
[127.10441589 242.74093628]
[128.91246033 257.63156128]
[130.72052002 272.52221680]
[144.34687805 279.94528198]
[150.97724915 293.97445679]
[148.06210327 309.21524048]
[136.72239685 319.80722046]
[121.31845093 321.67761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 72]
[4 71]
[5 70]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 59]
[14 58]
[15 57]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 43]
[28 42]
[30 40]
[31 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
