%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGGGUCGGGUGCAGACUGCGGAGCGGGCCCUACCGUGUGCGCAGAAAGAGGAGGCGCUUGCCUUCAGCUUGUGGGAAAUCCCGAAG\
) } def
/len { sequence length } bind def

/coor [
[84.36608124 145.37854004]
[77.32400513 158.62275696]
[70.28192902 171.86695862]
[63.23985672 185.11117554]
[56.19778442 198.35539246]
[54.10036469 215.17910767]
[37.35350800 217.82090759]
[30.17894745 202.45985413]
[42.95357132 191.31332397]
[49.99564362 178.06910706]
[57.03771973 164.82489014]
[64.07978821 151.58067322]
[71.12186432 138.33647156]
[62.52836609 129.99179077]
[56.26879120 119.77909088]
[52.73301315 108.33444214]
[52.14125824 96.37068939]
[54.53038406 84.63298035]
[59.75158691 73.85240936]
[48.60441589 63.81545258]
[37.45724106 53.77849197]
[26.31007004 43.74153519]
[15.16289711 33.70457458]
[-2.17722797 34.99316025]
[-14.90777206 23.64670372]
[-15.58720779 6.94221640]
[-27.07787514 -2.69959807]
[-38.56854248 -12.34141254]
[-50.05920792 -21.98322678]
[-65.77953339 -20.35628510]
[-77.99304962 -30.38651848]
[-79.45368958 -46.12316513]
[-69.29489136 -58.22995377]
[-53.54368210 -59.52413940]
[-41.54497528 -49.23790741]
[-40.41739273 -33.47389221]
[-28.92672729 -23.83207893]
[-17.43605995 -14.19026470]
[-5.94539356 -4.54845047]
[6.73747540 -7.45519018]
[18.93423080 -2.38758397]
[26.03058815 8.98330593]
[25.19985580 22.55740166]
[36.34702682 32.59436035]
[47.49420166 42.63132095]
[58.64137268 52.66828156]
[69.78854370 62.70523834]
[80.72852325 56.04273224]
[93.04106903 52.51100540]
[105.84925842 52.36159897]
[118.24084473 55.60514832]
[129.33326721 62.01064682]
[138.33647156 71.12186432]
[151.58067322 64.07978821]
[164.82489014 57.03771973]
[178.06910706 49.99564362]
[191.31332397 42.95357132]
[204.55754089 35.91149902]
[212.78416443 21.72507286]
[229.18052673 22.02690315]
[236.87947083 36.50648880]
[227.96095276 50.26847839]
[211.59960938 49.15571213]
[198.35539246 56.19778442]
[185.11117554 63.23985672]
[171.86695862 70.28192902]
[158.62275696 77.32400513]
[145.37854004 84.36608124]
[147.98889160 100.83486176]
[144.80728149 117.20288849]
[136.21768188 131.49461365]
[145.85949707 142.98529053]
[155.50131226 154.47595215]
[163.59759521 159.17082214]
[165.27059937 166.54003906]
[174.50552368 178.36019897]
[183.74044800 190.18035889]
[192.97537231 202.00051880]
[208.37481689 207.63871765]
[210.92477417 223.83839417]
[198.00205994 233.93472290]
[182.90046692 227.54145813]
[181.15521240 211.23544312]
[171.92028809 199.41528320]
[162.68536377 187.59512329]
[153.45043945 175.77494812]
[144.01063538 164.11776733]
[134.36882019 152.62710571]
[124.72701263 141.13642883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[26 39]
[27 38]
[28 37]
[29 36]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[71 89]
[72 88]
[73 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
