%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCGCGGAGGCCGAGCGAGCCCCCAGCCCAGCCUGGCGACUGGGGACCCCGGCACAUGAGGUGGACGCCCCCGGGGAAGACUUGGGUGCACAGCCAGGCGAGAAGGUCUUGAGUCAGACAGAGCACCAGCCUUGGGGACCCUGGACCACUAUC\
) } def
/len { sequence length } bind def

/coor [
[168.70776367 353.92575073]
[155.28773499 347.22482300]
[145.94711304 335.48800659]
[142.42955017 320.90625000]
[145.39169312 306.20166016]
[154.28224182 294.11764526]
[157.85325623 279.54891968]
[147.73478699 290.62213135]
[137.72760010 301.79605103]
[127.83271027 313.06951904]
[124.54438019 328.54522705]
[110.33364105 333.00662231]
[100.43875122 344.28009033]
[90.54386139 355.55355835]
[93.09494019 370.98165894]
[85.08774567 384.41366577]
[70.30302429 389.50741577]
[55.72168350 383.85775757]
[48.22857285 370.13235474]
[51.36171722 354.81185913]
[63.64173889 345.13015747]
[79.27039337 345.65869141]
[89.16527557 334.38519287]
[99.06016541 323.11172485]
[101.64074707 308.44238281]
[116.55923462 303.17465210]
[126.45412445 291.90115356]
[128.51441956 284.75952148]
[136.66154480 280.50366211]
[146.78002930 269.43041992]
[133.52993774 257.33309937]
[128.22146606 240.90383911]
[131.61529541 224.66522217]
[142.16624451 212.75231934]
[136.04692078 199.05728149]
[129.92759705 185.36224365]
[123.80826569 171.66722107]
[117.68894196 157.97218323]
[111.56961823 144.27716064]
[105.45029449 130.58212280]
[83.95699310 134.26269531]
[61.26314926 122.10730743]
[48.86499786 95.09237671]
[34.99248886 89.38680267]
[21.11998177 83.68122864]
[7.24747515 77.97566223]
[-6.62503242 72.27008820]
[-23.57345200 71.83719635]
[-27.84926605 55.43129349]
[-13.26817322 46.78097153]
[-0.91946197 58.39758301]
[12.95304585 64.10315704]
[26.82555389 69.80872345]
[40.69805908 75.51429749]
[54.57056808 81.21986389]
[63.41161346 69.10227966]
[53.74427414 57.63307571]
[44.07693481 46.16387558]
[28.27832794 43.37397766]
[20.73615456 29.21434593]
[27.23612404 14.54703808]
[42.79201889 10.62355709]
[55.47068405 20.45366096]
[55.54613876 36.49653625]
[65.21347809 47.96574020]
[74.88081360 59.43494034]
[82.04550171 57.21744919]
[85.36934662 42.59034729]
[96.37487030 52.78246307]
[103.53955841 50.56497192]
[105.03781891 35.63998795]
[98.71762848 21.13599586]
[107.68748474 9.24520302]
[109.18573761 -5.67978382]
[110.68399811 -20.60477066]
[112.18225861 -35.52975845]
[113.68051147 -50.45474243]
[115.17877197 -65.37973022]
[106.17851257 -78.66035461]
[111.08752441 -93.93389130]
[126.14003754 -99.48380280]
[139.78904724 -91.05266571]
[141.56420898 -75.10812378]
[130.10375977 -63.88146973]
[128.60549927 -48.95648575]
[127.10723877 -34.03149796]
[125.60898590 -19.10651207]
[124.11072540 -4.18152523]
[122.61246490 10.74346161]
[129.03982544 24.17991638]
[119.96280670 37.13824463]
[118.46454620 52.06323242]
[136.12252808 71.04747772]
[140.76521301 93.91419983]
[133.57215881 113.38078308]
[119.14532471 124.46280670]
[125.26464844 138.15783691]
[131.38397217 151.85285950]
[137.50329590 165.54789734]
[143.62261963 179.24291992]
[149.74194336 192.93795776]
[155.86126709 206.63298035]
[168.77542114 206.26734924]
[181.04606628 211.36790466]
[190.40267944 221.31718445]
[194.98326111 234.57522583]
[193.69921875 248.91419983]
[186.47550964 261.79223633]
[199.98072815 268.31979370]
[213.48594666 274.84738159]
[226.99116516 281.37493896]
[240.49636841 287.90249634]
[254.13377380 280.73818970]
[269.19873047 282.95187378]
[279.94442749 293.48727417]
[282.39657593 308.15438843]
[295.90179443 314.68197632]
[309.40701294 321.20953369]
[321.56494141 315.33569336]
[334.69155884 317.52264404]
[344.01126099 326.74676514]
[346.26522827 339.46627808]
[359.63714600 346.26275635]
[373.00903320 353.05923462]
[388.81710815 352.41458130]
[396.65719604 365.07879639]
[410.02911377 371.87527466]
[426.36712646 370.46078491]
[435.53805542 384.05587769]
[428.10763550 398.67504883]
[411.71963501 399.27938843]
[403.23263550 385.24719238]
[389.86071777 378.45071411]
[375.00909424 379.58148193]
[366.21255493 366.43115234]
[352.84063721 359.63467407]
[339.46875000 352.83819580]
[323.74612427 358.73638916]
[308.30679321 351.31677246]
[302.87942505 334.71475220]
[289.37423706 328.18719482]
[275.86901855 321.65960693]
[262.85226440 328.85006714]
[247.92085266 326.97479248]
[236.82704163 316.54498291]
[233.96881104 301.40771484]
[220.46359253 294.88015747]
[206.95837402 288.35260010]
[193.45315552 281.82501221]
[179.94793701 275.29745483]
[188.67041016 287.50067139]
[201.40888977 295.42095947]
[209.61718750 307.97579956]
[211.76303101 322.82153320]
[207.44584656 337.18682861]
[197.47154236 348.39007568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 30]
[8 29]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[56 66]
[57 65]
[58 64]
[70 92]
[71 91]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
[108 150]
[109 149]
[110 148]
[111 147]
[112 146]
[116 142]
[117 141]
[118 140]
[122 137]
[123 136]
[124 135]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
