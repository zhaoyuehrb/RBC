%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGGCGCCUGCGCGCCUGCGCGCCGCUGGCCGACGGAGGGGAGCCUGCCGAUGCCGAGCGGGUGCUACGUCCCGCGGUCGGAGCCGCGUCUUCUCCCGGCUCCGCCACCAGCCGGGGCUCGGGUGGGGGCCCGGGGCCCCGGGGC\
) } def
/len { sequence length } bind def

/coor [
[77.72920227 100.73531342]
[81.01681519 86.30903625]
[66.11756134 84.57345581]
[51.21830750 82.83788300]
[36.31905365 81.10230255]
[21.41979980 79.36672974]
[6.52054548 77.63114929]
[-8.37870884 75.89557648]
[-23.27796364 74.15999603]
[-35.42342377 91.64305878]
[-56.81052780 98.26498413]
[-78.77186584 89.92929077]
[-89.32241058 100.59165192]
[-99.87295532 111.25401306]
[-110.42350006 121.91637421]
[-120.97405243 132.57873535]
[-124.60926056 148.56990051]
[-140.35346985 153.15814209]
[-152.01037598 141.62348938]
[-147.58836365 125.83178711]
[-131.63641357 122.02819061]
[-121.08586884 111.36582947]
[-110.53532410 100.70346832]
[-99.98477173 90.04110718]
[-89.43422699 79.37874603]
[-92.88206482 64.78037262]
[-107.08813477 59.96501923]
[-121.29420471 55.14966965]
[-135.50027466 50.33431625]
[-149.70634460 45.51896286]
[-163.96238708 40.85364151]
[-178.26681519 36.33886337]
[-192.57124329 31.82408714]
[-203.76321411 39.39025879]
[-217.07478333 39.11109924]
[-227.62596130 31.31404877]
[-231.67854309 19.04135704]
[-245.88461304 14.22600460]
[-260.09066772 9.41065216]
[-274.34674072 4.74532843]
[-288.65115356 0.23055243]
[-302.95559692 -4.28422356]
[-318.84136963 -0.21312377]
[-330.11499023 -12.12269878]
[-325.17907715 -27.76139832]
[-309.11129761 -31.04146957]
[-298.44082642 -18.58865738]
[-284.13638306 -14.07388020]
[-269.83193970 -9.55910397]
[-262.45669556 -10.55192471]
[-255.27532959 -4.79541636]
[-241.06925964 0.01993574]
[-226.86318970 4.83528805]
[-212.15141296 -3.25019598]
[-195.81251526 1.87580979]
[-188.05647278 17.51965523]
[-173.75204468 22.03443146]
[-159.44760132 26.54920769]
[-152.07235718 25.55638695]
[-144.89099121 31.31289482]
[-130.68492126 36.12824631]
[-116.47885132 40.94359970]
[-102.27278137 45.75895309]
[-88.06671906 50.57430267]
[-80.33048248 38.97386932]
[-69.04721069 31.26296997]
[-55.96985626 28.38932991]
[-43.03977203 30.56803703]
[-32.09875107 37.27926254]
[-24.62670708 47.37290955]
[-21.54238701 59.26074219]
[-6.64313221 60.99631882]
[8.25612164 62.73189545]
[23.15537643 64.46747589]
[38.05463028 66.20304871]
[52.95388412 67.93862915]
[67.85314178 69.67420197]
[82.75239563 71.40977478]
[97.00843811 66.74445343]
[107.99909210 56.53634644]
[112.19519806 48.34475708]
[119.33073425 46.23189163]
[130.53416443 36.25776672]
[141.73759460 26.28364182]
[152.94102478 16.30951691]
[164.14445496 6.33539104]
[175.34788513 -3.63873434]
[186.55131531 -13.61285973]
[197.75473022 -23.58698463]
[194.56742859 -38.61151886]
[199.33465576 -53.21183014]
[210.77407837 -63.46050262]
[225.80853271 -66.60070038]
[240.39382935 -61.78772736]
[250.60659790 -50.31624222]
[253.69964600 -35.27202225]
[248.84097290 -20.70188522]
[237.33753967 -10.52512550]
[222.28369141 -7.47923946]
[207.72886658 -12.38355637]
[196.52543640 -2.40943050]
[185.32200623 7.56469488]
[174.11857605 17.53882027]
[162.91514587 27.51294518]
[151.71171570 37.48707199]
[140.50828552 47.46119690]
[129.30485535 57.43532181]
[118.20719910 67.52700043]
[107.21654510 77.73510742]
[118.87751770 90.43898773]
[117.95745850 105.94549561]
[129.16088867 115.91962433]
[135.65348816 117.65753937]
[139.64941406 121.81788635]
[140.61497498 126.55816650]
[151.38796997 136.99572754]
[162.16096497 147.43327332]
[172.93395996 157.87083435]
[183.70695496 168.30839539]
[194.47994995 178.74595642]
[205.25294495 189.18350220]
[216.02593994 199.62106323]
[226.79893494 210.05862427]
[237.68136597 220.38201904]
[248.67201233 230.59013367]
[259.66268921 240.79824829]
[270.65332031 251.00634766]
[286.75143433 254.13407898]
[291.83526611 269.72534180]
[280.67495728 281.74114990]
[264.75134277 277.82070923]
[260.44522095 261.99700928]
[249.45455933 251.78889465]
[238.46391296 241.58079529]
[227.47325134 231.37268066]
[220.38385010 229.10984802]
[216.36137390 220.83161926]
[205.58837891 210.39405823]
[194.81538391 199.95649719]
[184.04238892 189.51895142]
[173.26939392 179.08139038]
[162.49639893 168.64382935]
[151.72340393 158.20626831]
[140.95040894 147.76872253]
[130.17741394 137.33116150]
[119.18676758 127.12305450]
[107.98333740 117.14892578]
[95.58528900 119.54602814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[26 64]
[27 63]
[28 62]
[29 61]
[30 60]
[31 58]
[32 57]
[33 56]
[37 53]
[38 52]
[39 51]
[40 49]
[41 48]
[42 47]
[79 109]
[80 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[89 100]
[111 147]
[112 146]
[115 145]
[116 144]
[117 143]
[118 142]
[119 141]
[120 140]
[121 139]
[122 138]
[123 137]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
