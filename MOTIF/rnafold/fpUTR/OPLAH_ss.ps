%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGCAGGCAGAGCCGACCGCGAGCGACCGAGCCGGAGCCGAGCGCCAGUUUUUCCAGGGCUACCAGCUGAAGAGCUCCUGUGGGACUCCAGCCCCACCACC\
) } def
/len { sequence length } bind def

/coor [
[85.73184967 158.81062317]
[82.49089050 144.16493225]
[89.13322449 130.71549988]
[93.67820740 116.42063904]
[82.83628845 126.78657532]
[71.99436188 137.15251160]
[71.96833801 154.56690979]
[59.65475082 166.40171814]
[42.92365646 165.76275635]
[32.39668655 176.44839478]
[21.86971855 187.13403320]
[15.06111717 202.66076660]
[-1.74362910 200.41647339]
[-4.23906040 183.64717102]
[11.18407726 176.60707092]
[21.71104622 165.92141724]
[32.23801422 155.23577881]
[30.34840584 142.39376831]
[36.33528900 130.65658569]
[48.18734360 124.46583557]
[61.62842560 126.31059265]
[72.47034454 115.94465637]
[83.31227112 105.57871246]
[89.00064850 91.69915009]
[88.55191803 76.70586395]
[88.10318756 61.71257782]
[87.65445709 46.71929169]
[73.78028107 40.45281601]
[64.04241180 28.83124924]
[60.33123016 14.19405842]
[63.33091736 -0.54238904]
[72.39401245 -12.46588612]
[85.68025208 -19.24388123]
[85.23152161 -34.23716736]
[84.78279114 -49.23045349]
[76.63611603 -62.79298401]
[83.98921204 -75.74602509]
[83.54047394 -90.73931122]
[82.86750031 -105.72420502]
[81.97044373 -120.69735718]
[81.07337952 -135.67051697]
[80.17631531 -150.64366150]
[77.94068146 -165.47612000]
[74.38447571 -180.04847717]
[70.82826996 -194.62083435]
[67.27206421 -209.19317627]
[55.55430603 -220.66601562]
[59.89272690 -236.48089600]
[75.82433319 -240.36880493]
[86.96006012 -228.33021545]
[81.84441376 -212.74938965]
[85.40061951 -198.17703247]
[88.95682526 -183.60467529]
[92.51303101 -169.03233337]
[102.07157135 -180.59236145]
[116.97612000 -182.28189087]
[128.87969971 -173.15475464]
[131.11596680 -158.32238770]
[122.43254852 -146.09133911]
[107.69240570 -143.31137085]
[95.14946747 -151.54072571]
[96.04653168 -136.56758118]
[96.94359589 -121.59442139]
[97.84065247 -106.62126923]
[101.44136810 -100.02492523]
[98.53376007 -91.18804169]
[98.98249817 -76.19475555]
[107.09707642 -63.70464706]
[99.77607727 -49.67918777]
[100.22480774 -34.68590164]
[100.67353821 -19.69261360]
[114.34135437 -13.72132206]
[124.10130310 -2.36117744]
[127.97692108 12.16950035]
[125.14774323 27.00243568]
[116.12232208 39.18556595]
[102.64774323 46.27056122]
[103.09647369 61.26384735]
[103.54520416 76.25713348]
[103.99393463 91.25041962]
[111.89209747 90.13162994]
[120.66450500 94.88264465]
[126.54415131 105.57871246]
[137.38607788 115.94465637]
[148.22799683 126.31059265]
[159.06991577 136.67652893]
[169.91183472 147.04248047]
[185.15493774 144.13940430]
[199.17886353 150.78086853]
[206.59114075 164.41310120]
[204.54159546 179.79421997]
[193.81832886 191.00988770]
[178.54464722 193.74743652]
[164.59358215 186.95422363]
[157.32962036 173.24238586]
[159.54589844 157.88439941]
[148.70397949 147.51846313]
[137.86206055 137.15251160]
[127.02013397 126.78657532]
[116.17820740 116.42063904]
[120.72319794 130.71549988]
[127.36549377 144.16465759]
[124.12471771 158.81039429]
[112.42833710 168.20159912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[9 17]
[10 16]
[11 15]
[24 80]
[25 79]
[26 78]
[27 77]
[33 71]
[34 70]
[35 69]
[37 67]
[38 66]
[39 64]
[40 63]
[41 62]
[42 61]
[43 54]
[44 53]
[45 52]
[46 51]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
