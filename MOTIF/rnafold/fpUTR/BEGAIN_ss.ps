%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCCGGGCUUCCCACGGACGGGGCCCCGCGGGGUUGCCCGGCCGUGCCCGCUGUGCCCGGCUCUGCCCGGCGCGGCCGCGGAGCGCACGCCUCCUGCCUGCUGACCCUCUCGUUUGGUUUCUCGCAGGCCUCUGCCGCAGAC\
) } def
/len { sequence length } bind def

/coor [
[86.63784790 193.37867737]
[85.35713196 178.43345642]
[84.07640839 163.48822021]
[82.79568481 148.54299927]
[81.51496887 133.59777832]
[68.44518280 126.23701477]
[55.00096893 132.88931274]
[41.55675125 139.54159546]
[28.11253166 146.19389343]
[14.66831493 152.84619141]
[1.22409701 159.49847412]
[-12.22012043 166.15077209]
[-22.02848434 181.69651794]
[-39.46223450 179.97271729]
[-52.76122284 186.91079712]
[-66.06021118 193.84887695]
[-79.35920715 200.78694153]
[-88.01563263 214.02993774]
[-102.87841797 213.05690002]
[-116.17740631 219.99497986]
[-129.47639465 226.93305969]
[-131.62301636 242.30093384]
[-142.41688538 253.44866943]
[-157.70755005 256.08972168]
[-171.61543274 249.20857239]
[-178.79267883 235.45114136]
[-176.47947693 220.10745239]
[-165.56530762 209.07746887]
[-150.24688721 206.60243225]
[-136.41447449 213.63406372]
[-123.11547852 206.69598389]
[-109.81649017 199.75791931]
[-102.11129761 187.01118469]
[-86.29727936 187.48796082]
[-72.99829102 180.54988098]
[-59.69929886 173.61180115]
[-46.40031052 166.67373657]
[-42.44897079 155.19383240]
[-31.36624146 149.32090759]
[-18.87241364 152.70655823]
[-5.42819691 146.05426025]
[8.01602077 139.40196228]
[21.46023750 132.74967957]
[34.90445709 126.09738159]
[48.34867477 119.44509125]
[61.79289246 112.79279327]
[74.11131287 88.51561737]
[93.44242859 85.02117920]
[90.57505035 70.29779053]
[87.70767212 55.57440567]
[84.84029388 40.85101700]
[81.81575012 26.15910912]
[78.63439178 11.50035954]
[74.98483276 -3.04889154]
[70.87081909 -17.47369385]
[66.75680542 -31.89849472]
[62.64279175 -46.32329559]
[58.52877808 -60.74809647]
[54.41476822 -75.17289734]
[50.30075455 -89.59770203]
[46.18674088 -104.02249908]
[34.96120071 -115.17139435]
[38.91112518 -129.53271484]
[34.79711151 -143.95751953]
[30.68309975 -158.38230896]
[20.52445793 -171.95574951]
[30.75525093 -185.47489929]
[46.57822418 -179.38639832]
[45.10790253 -162.49632263]
[49.22191620 -148.07151794]
[53.33592606 -133.64672852]
[64.26720428 -123.52958679]
[60.61154175 -108.13651276]
[64.72555542 -93.71171570]
[68.83956909 -79.28691101]
[72.95358276 -64.86211395]
[77.06759644 -50.43730927]
[81.18161011 -36.01250839]
[85.29561615 -21.58770561]
[89.40962982 -7.16290426]
[92.36937714 -5.12582922]
[94.45921326 -1.52011108]
[94.93730164 3.21501660]
[93.29314423 8.31899929]
[96.47450256 22.97774887]
[100.99889374 28.88920021]
[99.56368256 37.98363876]
[102.43106079 52.70702362]
[105.29843903 67.43041229]
[108.16581726 82.15380096]
[107.27097321 67.18051147]
[114.27062988 53.91383743]
[127.13534546 46.20026398]
[142.13514709 46.27624130]
[154.92106628 54.11974335]
[161.78596497 67.45664978]
[160.73948669 82.42009735]
[152.08502197 94.67164612]
[138.33183289 100.65910339]
[123.46970367 98.64746857]
[137.93763733 102.60710907]
[152.40557861 106.56674957]
[166.87351990 110.52639008]
[181.34146118 114.48603058]
[195.80940247 118.44567871]
[213.46821594 113.34268951]
[225.35333252 126.21324158]
[239.90258789 129.86280823]
[257.44830322 124.38362122]
[269.60574341 136.99725342]
[284.22967529 140.33506775]
[295.82611084 130.02474976]
[311.27133179 128.53324890]
[324.62634277 136.43406677]
[330.75588989 150.68917847]
[327.30300903 165.81721497]
[315.59542847 176.00111389]
[300.13491821 177.32498169]
[286.86639404 169.27975464]
[280.89187622 154.95898438]
[266.26794434 151.62117004]
[255.81761169 157.80111694]
[243.57171631 155.08889771]
[236.25302124 144.41204834]
[221.70376587 140.76249695]
[211.12376404 146.71771240]
[198.93862915 143.74441528]
[191.84976196 132.91362000]
[177.38182068 128.95396423]
[162.91387939 124.99433136]
[148.44593811 121.03469086]
[133.97799683 117.07504272]
[119.51006317 113.11540222]
[113.74759674 117.91581726]
[123.34824371 129.44090271]
[111.82300568 139.04136658]
[102.22265625 127.51663971]
[96.46018982 132.31704712]
[97.74091339 147.26228333]
[99.02163696 162.20750427]
[100.30235291 177.15272522]
[101.58307648 192.09796143]
[112.87879181 203.49034119]
[110.87159729 219.40733337]
[97.10123444 227.63877869]
[82.13115692 221.87022400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[5 138]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[20 31]
[21 30]
[48 90]
[49 89]
[50 88]
[51 87]
[52 85]
[53 84]
[54 80]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[63 71]
[64 70]
[65 69]
[100 133]
[101 132]
[102 131]
[103 130]
[104 129]
[105 128]
[107 125]
[108 124]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
