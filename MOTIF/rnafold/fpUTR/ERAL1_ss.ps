%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCGCUGGUUCGUCAGCCGCUCUGUUCAAUCGUAGGAGCGCUCCUGGUCGGUUCCCGCAGUGCCUUGCGGCUGUA\
) } def
/len { sequence length } bind def

/coor [
[97.44960022 172.94541931]
[110.63385773 165.79171753]
[125.39559174 168.46141052]
[118.50612640 155.13716125]
[111.61666870 141.81292725]
[105.58438110 137.19413757]
[104.73011780 127.81917572]
[98.37583160 114.23156738]
[87.02479553 106.06789398]
[88.03656006 92.12271881]
[81.68227386 78.53511810]
[66.38846588 68.50983429]
[68.26044464 51.17910385]
[61.37099075 37.85486603]
[54.48152924 24.53062630]
[47.32851791 11.34599876]
[39.91477966 -1.69380581]
[32.50104141 -14.73361015]
[25.08730316 -27.77341461]
[7.29402924 -36.84696579]
[7.58658457 -56.01591110]
[-0.83973205 -68.42546844]
[-9.26604843 -80.83502960]
[-17.69236565 -93.24459076]
[-26.11868095 -105.65415192]
[-34.54499817 -118.06371307]
[-49.74523926 -116.27172852]
[-64.03301239 -121.75973511]
[-74.12508392 -133.26663208]
[-77.70236969 -148.14822388]
[-73.94284058 -162.98481750]
[-63.71041107 -174.36708069]
[-49.35641098 -179.67944336]
[-34.17928696 -177.70117188]
[-21.66663361 -168.88687134]
[-14.69376564 -155.26197815]
[-14.86299515 -139.95739746]
[-22.13543701 -126.49002838]
[-13.70912075 -114.08046722]
[-5.28280449 -101.67090607]
[3.14351201 -89.26134491]
[11.56982803 -76.85178375]
[19.99614525 -64.44223022]
[30.48941612 -63.35382843]
[38.72594070 -56.41064453]
[41.69456863 -45.82339859]
[38.12710953 -35.18715286]
[45.54084396 -22.14734840]
[52.95458221 -9.10754395]
[60.36832047 3.93226051]
[66.57946777 8.30757046]
[67.80577087 17.64116669]
[74.69522858 30.96540642]
[81.58468628 44.28964615]
[93.15657043 48.35795212]
[98.94055939 59.63145447]
[95.26988220 72.18082428]
[101.62416840 85.76843262]
[112.97520447 93.93210602]
[111.96343994 107.87728119]
[118.31772614 121.46488190]
[124.94091034 134.92346191]
[131.83036804 148.24771118]
[138.71983337 161.57194519]
[147.39120483 173.81152344]
[157.67678833 184.72970581]
[167.96238708 195.64788818]
[183.81613159 199.84197998]
[187.84910583 215.73748779]
[175.91252136 226.98246765]
[160.28570557 222.00906372]
[157.04420471 205.93347168]
[146.75860596 195.01528931]
[136.47302246 184.09710693]
[134.09696960 198.90773010]
[122.97649384 208.97424316]
[108.00318909 209.86868286]
[95.76341248 201.19758606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 64]
[4 63]
[5 62]
[7 61]
[8 60]
[10 58]
[11 57]
[13 54]
[14 53]
[15 52]
[16 50]
[17 49]
[18 48]
[19 47]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
