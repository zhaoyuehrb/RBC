%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGCCCCCGUUUCCUGGAGCCCGCGCCGUGCCGCGCUACGCCCGCCGGGAGCCGGGCAGAGCGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[79.86946106 416.53201294]
[64.79857635 414.54791260]
[51.63668060 406.94311523]
[42.39086914 394.87731934]
[38.47106552 380.19046021]
[40.47500992 365.12219238]
[48.09711456 351.97030640]
[60.17506409 342.74038696]
[74.86705780 338.83990479]
[76.82495117 323.96823120]
[78.78284454 309.09655762]
[80.74073792 294.22488403]
[82.69863129 279.35321045]
[84.65652466 264.48153687]
[85.96385956 249.53862000]
[86.61814880 234.55288696]
[87.27243805 219.56716919]
[87.92672729 204.58143616]
[88.58102417 189.59571838]
[78.36036682 178.82196045]
[78.81043243 163.61499023]
[90.18023682 152.96768188]
[90.83452606 137.98194885]
[91.48881531 122.99623108]
[92.14311218 108.01050568]
[92.47032928 93.01407623]
[92.47032928 78.01407623]
[82.85887909 62.48054886]
[91.84581757 47.56595993]
[91.19152832 32.58023834]
[90.53723145 17.59451485]
[89.55619049 2.62663102]
[88.24884796 -12.31628990]
[80.84504700 -27.56817627]
[93.45130920 -38.90477753]
[107.83463287 -29.92945862]
[103.19177246 -13.62362576]
[104.49910736 1.31929481]
[108.33997345 7.91206217]
[105.52295685 16.94022369]
[106.17724609 31.92594719]
[106.83154297 46.91167068]
[115.63706970 55.48876953]
[116.12522125 68.17687988]
[107.47032928 78.01407623]
[107.47032928 93.01407623]
[110.70136261 100.69895172]
[107.12882996 108.66479492]
[106.47454071 123.65052032]
[105.82025146 138.63624573]
[105.16596222 153.62196350]
[115.56452179 165.21971130]
[114.68750000 180.40803528]
[103.56674194 190.25001526]
[102.91245270 205.23573303]
[102.25816345 220.22145081]
[101.60387421 235.20718384]
[100.94958496 250.19290161]
[103.87277222 256.69454956]
[102.96139526 262.71228027]
[99.52819824 266.43942261]
[97.57030487 281.31109619]
[95.61241150 296.18276978]
[93.65451813 311.05444336]
[91.69662476 325.92611694]
[89.73873138 340.79779053]
[102.92058563 348.36791992]
[112.19811249 360.40936279]
[116.15653992 375.08584595]
[114.19224548 390.15933228]
[106.60476685 403.33123779]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 58]
[16 57]
[17 56]
[18 55]
[19 54]
[22 51]
[23 50]
[24 49]
[25 48]
[26 46]
[27 45]
[29 42]
[30 41]
[31 40]
[32 38]
[33 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
