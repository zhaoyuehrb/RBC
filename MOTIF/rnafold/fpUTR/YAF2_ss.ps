%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGAGUUUCCCCGACAGCUGGAGGCUGCGUGGGAUCCGGCGGCGGCUCCCGAGCGCGGCGGUGCGGCCUUCCCCGCCCCCUCCCUCCCUCCUCCCCCGCCCGCUUCCGCCCGGCUUAUUAUCCUCCUUAUUGACAAACAGAGCGGUCGCGGCGGCGACUCUCGGCGUGCGGUGAUAGCCAAGCC\
) } def
/len { sequence length } bind def

/coor [
[97.95842743 122.87825775]
[87.08792114 120.75439453]
[77.86074829 113.47401428]
[67.29830933 124.12460327]
[63.07453918 139.37158203]
[48.61868668 142.96012878]
[38.05625153 153.61071777]
[27.49381828 164.26129150]
[26.15776253 169.34640503]
[23.28378868 173.03181458]
[19.66768456 174.96510315]
[16.12940788 175.16299438]
[5.04921627 185.27384949]
[-6.03097582 195.38470459]
[-17.11116791 205.49555969]
[-28.10694695 215.69815063]
[-39.01755142 225.99177551]
[-43.12255096 234.17353821]
[-50.19610214 236.36395264]
[-61.27629089 246.47480774]
[-72.35648346 256.58566284]
[-83.43667603 266.69650269]
[-94.51686859 276.80737305]
[-102.14133453 291.95013428]
[-118.80299377 288.81558228]
[-120.40334320 271.93734741]
[-104.62772369 265.72717285]
[-93.54753113 255.61631775]
[-82.46733856 245.50546265]
[-71.38714600 235.39462280]
[-60.30695343 225.28376770]
[-49.31117630 215.08117676]
[-38.40056992 204.78755188]
[-35.68767166 197.89746094]
[-27.22202110 194.41537476]
[-16.14182854 184.30451965]
[-5.06163692 174.19366455]
[6.01855516 164.08280945]
[16.84323311 153.69886780]
[27.40566635 143.04827881]
[37.96810150 132.39768982]
[41.43637848 117.91251373]
[56.64772797 113.56217194]
[67.21015930 102.91158295]
[69.32244110 88.06105042]
[62.14863586 74.88772583]
[54.97482681 61.71440506]
[47.80101395 48.54108047]
[40.62720490 35.36775589]
[33.84842300 48.74864197]
[19.19593430 51.95872498]
[7.44358397 42.63765717]
[7.23276663 27.63913918]
[18.71849442 17.99144173]
[33.45679092 20.78943253]
[27.40132904 7.06604338]
[21.34586906 -6.65734529]
[15.29040813 -20.38073349]
[9.23494720 -34.10412216]
[2.89550018 -40.70743179]
[3.19499660 -48.10630417]
[-2.63152552 -61.92844772]
[-8.45804691 -75.75058746]
[-14.28456974 -89.57273102]
[-20.11109161 -103.39487457]
[-28.25376129 -109.71380615]
[-29.51190758 -118.77862549]
[-39.15372086 -130.26930237]
[-48.79553604 -141.75996399]
[-58.43734741 -153.25062561]
[-74.20136261 -154.37820435]
[-84.48759460 -166.37692261]
[-83.19341278 -182.12812805]
[-71.08662415 -192.28692627]
[-55.34997559 -190.82627869]
[-45.31974030 -178.61276245]
[-46.94668198 -162.89244080]
[-37.30486679 -151.40177917]
[-27.66305351 -139.91110229]
[-18.02124023 -128.42044067]
[-20.74144745 -143.17172241]
[-19.09791756 -158.08142090]
[-13.22993183 -171.88601685]
[-3.63476205 -183.41564941]
[8.87446404 -191.69328308]
[23.23767090 -196.01744080]
[38.23767090 -196.02166748]
[52.60330963 -191.70561218]
[65.11719513 -183.43501282]
[74.71885681 -171.91078186]
[80.59461975 -158.10949707]
[82.24654388 -143.20072937]
[79.53465271 -128.44792175]
[72.68874359 -115.10124969]
[62.28897476 -104.29177094]
[49.21665573 -96.93551636]
[34.57957840 -93.65588379]
[19.61814308 -94.73079681]
[5.60023117 -100.06916046]
[-6.28894806 -109.22139740]
[-0.46242613 -95.39925385]
[5.36409569 -81.57711029]
[11.19061756 -67.75496674]
[17.01713943 -53.93282318]
[22.95833588 -40.15958405]
[29.01379776 -26.43619537]
[35.06925583 -12.71280575]
[41.12471771 1.01058269]
[47.18017960 14.73397160]
[53.80052948 28.19394684]
[60.97433853 41.36727142]
[68.14814758 54.54059601]
[75.32196045 67.71392059]
[82.49576569 80.88724518]
[108.79721069 78.78227997]
[120.00255585 99.13509369]
[134.14009094 104.14807129]
[148.27763367 109.16104889]
[162.41517639 114.17403412]
[176.55271912 119.18701172]
[194.56712341 115.41336060]
[205.44116211 129.17707825]
[219.66006470 133.95437622]
[233.87898254 138.73167419]
[248.09788513 143.50897217]
[262.31680298 148.28627014]
[256.74447632 134.35969543]
[262.51004028 120.51201630]
[276.31930542 114.65504456]
[290.28240967 120.13516998]
[296.42156982 133.82131958]
[291.22915649 147.89395142]
[277.67190552 154.31271362]
[291.34448242 160.48200989]
[305.01708984 166.65132141]
[318.68966675 172.82063293]
[327.81814575 173.50109863]
[332.53692627 179.20779419]
[346.10507202 185.60350037]
[358.72888184 176.96714783]
[373.88055420 175.81666565]
[387.48333740 182.36117554]
[395.92742920 194.75283813]
[397.02783203 209.60728455]
[410.59597778 216.00300598]
[424.16412354 222.39871216]
[433.28005981 223.23081970]
[437.90332031 229.01515198]
[451.36328125 235.63549805]
[464.82327271 242.25585938]
[478.28323364 248.87620544]
[491.74322510 255.49655151]
[505.20318604 262.11691284]
[521.52124023 260.48806763]
[530.86987305 273.96154785]
[523.63195801 288.67703247]
[507.25332642 289.49645996]
[498.58282471 275.57687378]
[485.12286377 268.95654297]
[471.66287231 262.33618164]
[458.20291138 255.71583557]
[444.74291992 249.09547424]
[431.28295898 242.47512817]
[417.76843262 235.96687317]
[404.20025635 229.57116699]
[390.63211060 223.17544556]
[378.47369385 231.78001404]
[363.54144287 233.15261841]
[349.83648682 226.82489014]
[341.08142090 214.40533447]
[339.70935059 199.17166138]
[326.14120483 192.77593994]
[312.52035522 186.49320984]
[298.84777832 180.32391357]
[285.17520142 174.15460205]
[271.50259399 167.98529053]
[257.53948975 162.50518799]
[243.32058716 157.72787476]
[229.10166931 152.95057678]
[214.88276672 148.17327881]
[200.66384888 143.39598083]
[189.68344116 148.49932861]
[177.79031372 144.62112427]
[171.53973389 133.32455444]
[157.40220642 128.31156921]
[143.26466370 123.29859161]
[129.12712097 118.28561401]
[114.98957825 113.27263641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 44]
[4 43]
[6 41]
[7 40]
[8 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 33]
[17 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[45 114]
[46 113]
[47 112]
[48 111]
[49 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 100]
[67 80]
[68 79]
[69 78]
[70 77]
[116 188]
[117 187]
[118 186]
[119 185]
[120 184]
[122 181]
[123 180]
[124 179]
[125 178]
[126 177]
[133 176]
[134 175]
[135 174]
[136 173]
[138 172]
[139 171]
[144 166]
[145 165]
[146 164]
[148 163]
[149 162]
[150 161]
[151 160]
[152 159]
[153 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
