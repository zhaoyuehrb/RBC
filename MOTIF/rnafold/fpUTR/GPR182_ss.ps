%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCUCCUCACAGCUCCCCAUAGCCUGGACCUGCCGGCCCUCCCUCCAGGACCGAGGGGCUCCCAAGGGAAACUCAGGCGUGUGCUGGUCCCA\
) } def
/len { sequence length } bind def

/coor [
[210.76431274 171.76721191]
[209.90817261 153.82334900]
[197.08627319 146.03880310]
[184.26438904 138.25425720]
[171.44248962 130.46971130]
[163.94320679 129.67390442]
[158.33139038 122.20983887]
[145.77389526 114.00562286]
[133.21638489 105.80139923]
[120.65889740 97.59717560]
[117.31609344 109.81443024]
[107.81627655 117.32862854]
[96.26455688 117.72643280]
[87.18624878 111.50614166]
[72.77494812 115.66719055]
[58.36363983 119.82823181]
[50.94736862 133.78439331]
[35.81053925 138.32884216]
[21.93356705 130.76542664]
[17.54941177 115.58139801]
[25.25911522 101.78517151]
[40.48864746 97.56179047]
[54.20259857 105.41693115]
[68.61389923 101.25588226]
[83.02520752 97.09484100]
[86.21486664 87.79190063]
[94.38053894 81.21660614]
[105.43923187 79.92568207]
[99.18750763 66.29058075]
[86.40258789 56.97090530]
[88.13134766 42.17696381]
[81.87961578 28.54186630]
[75.62789154 14.90676785]
[69.37615967 1.27166975]
[54.83285904 -4.30776119]
[48.68695450 -18.22474861]
[54.09571457 -32.05518341]
[47.84398651 -45.69028091]
[33.36502838 -52.59964371]
[29.88001251 -68.25959778]
[40.06234360 -80.65716553]
[56.10100937 -80.28199768]
[65.69252014 -67.42188263]
[61.47908401 -51.94200897]
[67.73081207 -38.30691147]
[81.74002075 -33.37966537]
[88.27439880 -19.64079285]
[83.01126099 -4.98005819]
[89.26299286 8.65503979]
[95.51471710 22.29013824]
[101.76644135 35.92523575]
[114.10419464 44.26964188]
[112.82260132 60.03885651]
[119.07433319 73.67395782]
[128.86311340 85.03968048]
[141.42060852 93.24389648]
[153.97810364 101.44812012]
[166.53561401 109.65234375]
[179.22703552 117.64781952]
[192.04893494 125.43236542]
[204.87081909 133.21690369]
[217.69270325 141.00144958]
[228.69178772 134.59954834]
[241.30331421 133.56871033]
[253.05967712 138.04754639]
[261.68780518 147.10281372]
[265.54852295 158.92304993]
[263.94772339 171.18078613]
[276.22708130 179.79571533]
[288.50646973 188.41064453]
[300.78582764 197.02557373]
[306.39193726 197.49633789]
[310.72592163 199.93879700]
[313.22839355 203.47998047]
[313.79678345 207.15242004]
[325.16250610 216.94120789]
[336.52822876 226.72999573]
[347.89395142 236.51876831]
[363.29745483 233.82319641]
[376.80392456 241.70414734]
[382.03604126 256.44046021]
[376.52331543 271.07412720]
[362.86871338 278.69555664]
[347.51953125 275.70614624]
[337.72317505 263.51742554]
[338.10516357 247.88450623]
[326.73944092 238.09571838]
[315.37371826 228.30693054]
[304.00799561 218.51814270]
[292.17089844 209.30494690]
[279.89154053 200.69001770]
[267.61215210 192.07508850]
[255.33277893 183.46015930]
[239.09826660 189.99478149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[7 58]
[8 57]
[9 56]
[10 55]
[14 25]
[15 24]
[16 23]
[28 54]
[29 53]
[31 51]
[32 50]
[33 49]
[34 48]
[37 45]
[38 44]
[68 93]
[69 92]
[70 91]
[71 90]
[75 89]
[76 88]
[77 87]
[78 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
