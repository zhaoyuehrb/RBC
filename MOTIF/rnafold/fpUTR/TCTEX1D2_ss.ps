%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUGUGCGGGGCGCUCGCGGGCUUCAGCGAGGCGGGAGGGCGGCCCUGUUGCCCUGGAGACGCUUUCCCUGCUGCCGGCCGCGACCGCAACCCGCUAGGCCUUCAUCGCGAGCUACGCCCGGACCGAGAAGCCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[160.80729675 487.77926636]
[159.81939697 472.81182861]
[156.21240234 466.29428101]
[158.97789001 457.50543213]
[158.31901550 442.51989746]
[157.66015625 427.53436279]
[157.00129700 412.54885864]
[155.52078247 397.62210083]
[153.22311401 382.79910278]
[143.62756348 371.40722656]
[149.15966797 356.58474731]
[146.86198425 341.76174927]
[144.56430054 326.93878174]
[142.26661682 312.11581421]
[126.88749695 302.29037476]
[123.43792725 284.04653931]
[134.54090881 268.77096558]
[131.59436035 254.06321716]
[128.64779663 239.35546875]
[125.70124817 224.64772034]
[122.75469971 209.93997192]
[119.80814362 195.23222351]
[116.86159515 180.52447510]
[113.11209869 166.00065613]
[108.57096100 151.70457458]
[104.02983093 137.40849304]
[99.48870087 123.11239624]
[94.94757080 108.81631470]
[89.66098022 102.64244843]
[90.46743774 94.15605927]
[86.24144745 79.76366425]
[82.01545715 65.37126923]
[77.78947449 50.97887802]
[60.85935593 42.61283493]
[55.43545914 24.85562325]
[64.48689270 9.00861073]
[59.63281250 -5.18427038]
[54.77872849 -19.37715149]
[49.92464447 -33.57003021]
[38.34898376 -36.65859985]
[29.81417847 -44.89404678]
[26.38480568 -56.12187958]
[28.81133270 -67.48520660]
[36.36946869 -76.15153503]
[32.14347839 -90.54393005]
[27.91749001 -104.93631744]
[23.69150162 -119.32871246]
[19.46551323 -133.72111511]
[15.23952579 -148.11351013]
[4.27659702 -155.00428772]
[1.08131802 -167.13742065]
[6.84757519 -177.82623291]
[2.93877053 -192.30799866]
[-8.12735462 -203.61512756]
[-3.97393656 -217.91891479]
[-7.88274145 -232.40068054]
[-20.29366302 -237.75155640]
[-27.23405838 -249.12077332]
[-26.34746552 -262.21594238]
[-18.18415260 -272.24328613]
[-21.77388763 -286.80740356]
[-25.36362267 -301.37155151]
[-28.95335770 -315.93566895]
[-32.54309082 -330.49978638]
[-42.20428848 -344.43170166]
[-31.49134636 -357.57205200]
[-15.89887428 -350.91540527]
[-17.97896576 -334.08953857]
[-14.38923073 -319.52542114]
[-10.79949570 -304.96127319]
[-7.20976067 -290.39715576]
[-3.62002563 -275.83303833]
[11.11134624 -267.79241943]
[15.59374237 -251.27006531]
[6.59901428 -236.30947876]
[10.50781918 -221.82772827]
[21.29435921 -211.55641174]
[17.42052650 -196.21679688]
[21.32933044 -181.73504639]
[34.41002655 -170.08581543]
[29.63191986 -152.33949280]
[33.85791016 -137.94709778]
[38.08389664 -123.55470276]
[42.30988693 -109.16230774]
[46.53587341 -94.76991272]
[50.76186371 -80.37751770]
[67.29896545 -72.65866852]
[73.11645508 -55.02648544]
[64.11752319 -38.42411804]
[68.97161102 -24.23123550]
[73.82569122 -10.03835487]
[78.67977905 4.15452576]
[89.85354614 6.87068796]
[98.39271545 14.75077629]
[102.07121277 25.89947510]
[99.85331726 37.55050278]
[92.18186951 46.75288773]
[96.40785217 61.14528275]
[100.63384247 75.53768158]
[104.85983276 89.93006897]
[109.24365234 104.27517700]
[113.78479004 118.57126617]
[118.32592010 132.86735535]
[122.86705017 147.16343689]
[127.40818787 161.45953369]
[136.86894226 149.81933594]
[151.86869812 149.73332214]
[161.46231079 161.26425171]
[158.64945984 175.99815369]
[145.48263550 183.18388367]
[131.56933594 177.57792664]
[134.51589966 192.28567505]
[137.46244812 206.99342346]
[140.40899658 221.70117188]
[143.35554504 236.40892029]
[146.30210876 251.11666870]
[149.24865723 265.82440186]
[160.31794739 270.40762329]
[167.69630432 279.69338989]
[169.62020874 291.27453613]
[165.72120667 302.22036743]
[157.08959961 309.81811523]
[159.38728333 324.64108276]
[161.68496704 339.46408081]
[163.98263550 354.28704834]
[173.74252319 366.73916626]
[168.04608154 380.50143433]
[170.34376526 395.32440186]
[181.47590637 385.27078247]
[196.31181335 387.48342896]
[204.02592468 400.34780884]
[198.98933411 414.47695923]
[184.87719727 419.56100464]
[171.98681641 411.88998413]
[172.64567566 426.87551880]
[173.30455017 441.86102295]
[173.96340942 456.84655762]
[174.78683472 471.82394409]
[175.77473450 486.79138184]
[185.33665466 500.11434937]
[178.33393860 514.94317627]
[161.97039795 516.02325439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 139]
[2 138]
[4 137]
[5 136]
[6 135]
[7 134]
[8 128]
[9 127]
[11 125]
[12 124]
[13 123]
[14 122]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[23 111]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[30 100]
[31 99]
[32 98]
[33 97]
[36 92]
[37 91]
[38 90]
[39 89]
[44 86]
[45 85]
[46 84]
[47 83]
[48 82]
[49 81]
[52 79]
[53 78]
[55 76]
[56 75]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
