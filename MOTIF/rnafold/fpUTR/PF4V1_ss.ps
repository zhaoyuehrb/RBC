%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCUGCAGAACCCCAGCCCGACUUUCCCUGCGCACUGGGAUCCUGCUGGAACCUCAGCUGCAAC\
) } def
/len { sequence length } bind def

/coor [
[81.06016541 270.18856812]
[77.70128632 254.50106812]
[87.98305511 242.18583679]
[87.98305511 227.18583679]
[87.98305511 212.18583679]
[79.55178070 203.21669006]
[79.63465118 190.50169373]
[88.74440765 181.05891418]
[89.43716431 166.07492065]
[82.29590607 153.00389099]
[90.66229248 139.57577515]
[91.35504150 124.59178925]
[78.55721283 114.82221985]
[73.93990326 99.39790344]
[79.26463318 84.20329285]
[92.50000000 75.03519440]
[92.50000000 60.03519821]
[92.50000000 45.03519821]
[92.50000000 30.03519821]
[92.50000000 15.03519821]
[81.60544586 3.90207314]
[81.81912994 -11.31005955]
[92.50000000 -21.62774086]
[92.50000000 -36.62774277]
[89.49538422 -41.74243164]
[89.06676483 -46.94988251]
[90.74965668 -51.15723801]
[93.68251038 -53.66408157]
[95.75485229 -68.52024078]
[97.82720184 -83.37639618]
[99.89954376 -98.23255157]
[88.63340759 -108.90277863]
[85.82382202 -124.16337585]
[92.55112457 -138.14633179]
[106.22853088 -145.47491455]
[121.59680176 -143.33113098]
[132.74652100 -132.53930664]
[135.39039612 -117.24913788]
[128.51181030 -103.33998108]
[114.75569916 -96.16020966]
[112.68335724 -81.30404663]
[110.61100769 -66.44789124]
[108.53866577 -51.59173584]
[107.50000000 -36.62774277]
[107.50000000 -21.62774086]
[118.18087006 -11.31005955]
[118.39455414 3.90207314]
[107.50000000 15.03519821]
[107.50000000 30.03519821]
[107.50000000 45.03519821]
[107.50000000 60.03519821]
[107.50000000 75.03519440]
[118.92787170 82.07719421]
[125.33649445 93.87191772]
[125.02644348 107.29167175]
[118.07994080 118.77783966]
[106.33903503 125.28453827]
[105.64628601 140.26853943]
[112.73799133 154.41131592]
[104.42115784 166.76766968]
[103.72840118 181.75166321]
[112.61602783 197.69502258]
[102.98305511 212.18583679]
[102.98305511 227.18583679]
[102.98305511 242.18583679]
[113.26482391 254.50106812]
[109.90593719 270.18856812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[8 61]
[9 60]
[11 58]
[12 57]
[16 52]
[17 51]
[18 50]
[19 49]
[20 48]
[23 45]
[24 44]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
