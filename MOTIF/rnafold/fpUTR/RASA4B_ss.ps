%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:28:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCAGCGCCCGCCGCCCGCCACCCCGGACCCCGGUGUCUGGCUUCCCCCGAGCCGGCACCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[104.77345276 146.84054565]
[94.45243073 147.09983826]
[84.24836731 145.09588623]
[74.65512085 140.89260864]
[66.14409637 134.66117859]
[59.14113235 126.67316437]
[54.00522614 117.28886414]
[40.57777786 123.97493744]
[27.15032768 130.66101074]
[20.70916939 145.35424805]
[5.16911793 149.34001160]
[-7.54882812 139.56077576]
[-7.68854952 123.51834106]
[4.85713625 113.51907349]
[20.46425247 117.23356628]
[33.89170074 110.54749298]
[47.31915283 103.86141205]
[48.35781860 88.89742279]
[35.98285675 80.42037201]
[23.60789299 71.94332886]
[8.12070942 75.09336090]
[-5.01148987 66.30012512]
[-7.99760485 50.78050613]
[0.93397433 37.74200821]
[16.48430061 34.92014313]
[29.42763901 43.98907471]
[32.08493805 59.56836700]
[44.45989990 68.04541016]
[56.83486176 76.52246094]
[68.87187958 62.94416428]
[84.79687500 54.83662415]
[102.30989075 53.14490128]
[118.96244049 57.90329742]
[132.49977112 68.25820923]
[141.16607666 82.61317444]
[155.76763916 79.17891693]
[170.36921692 75.74465942]
[184.97077942 72.31040192]
[192.92260742 67.13728333]
[200.32580566 69.07129669]
[215.07040405 66.31505585]
[229.81498718 63.55881500]
[244.55958557 60.80257034]
[259.30419922 58.04632950]
[274.04879761 55.29008484]
[288.79336548 52.53384399]
[299.00964355 40.16422272]
[315.04721069 40.58334732]
[324.60345459 53.46969223]
[320.34762573 68.93796539]
[305.54443359 75.12222290]
[291.54962158 67.27844238]
[276.80502319 70.03468323]
[262.06042480 72.79092407]
[247.31582642 75.54716492]
[232.57124329 78.30341339]
[217.82664490 81.05965424]
[203.08204651 83.81589508]
[188.40504456 86.91197205]
[173.80346680 90.34622955]
[159.20190430 93.78048706]
[144.60032654 97.21474457]
[144.47964478 107.01539612]
[142.21488953 116.62829590]
[137.88273621 125.58656311]
[131.66104126 133.44790649]
[123.82173920 139.81649780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 17]
[8 16]
[9 15]
[18 29]
[19 28]
[20 27]
[35 62]
[36 61]
[37 60]
[38 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
