%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUAUGAUCUCGUGAAACCUUGAGAGAAACUGAAUGACGAAUGAAACUAUUGUUCCUGUUUCACACAGAAGAAAACUGAGGUUGGCACUCAUCAUGAGCCCCUGUUCUCAUUCUGCAA\
) } def
/len { sequence length } bind def

/coor [
[-6.10619450 241.96165466]
[-5.36979580 226.98130798]
[-17.02698517 236.42112732]
[-28.68417549 245.86093140]
[-26.94413567 259.60455322]
[-32.21043396 272.30035400]
[-42.99578094 280.64407349]
[-56.39213562 282.52236938]
[-68.85440063 277.54696655]
[-80.75469971 286.67840576]
[-92.65499878 295.80981445]
[-104.55530548 304.94122314]
[-116.45560455 314.07266235]
[-115.91481018 329.58032227]
[-124.62035370 342.42526245]
[-139.22477722 347.66839600]
[-154.11238098 343.29360962]
[-163.55857849 330.98309326]
[-163.93112183 315.47048950]
[-155.08673096 302.72070312]
[-140.42630005 297.63632202]
[-125.58702087 302.17236328]
[-113.68672180 293.04092407]
[-101.78642273 283.90951538]
[-89.88612366 274.77810669]
[-77.98582458 265.64666748]
[-78.96405029 249.31689453]
[-69.96342468 235.45878601]
[-54.33720779 229.59593201]
[-38.12398148 234.20373535]
[-26.46679115 224.76393127]
[-14.80960178 215.32412720]
[-4.06507254 204.85726929]
[5.67664814 193.45117188]
[15.41836929 182.04508972]
[25.16008949 170.63899231]
[34.90180969 159.23291016]
[44.64353180 147.82682800]
[46.61922836 140.60830688]
[54.79263687 136.25398254]
[64.82959747 125.10681152]
[74.86655426 113.95964050]
[84.90351105 102.81246948]
[87.82986450 88.10068512]
[82.82276154 73.96106720]
[77.81565857 59.82144547]
[72.80855560 45.68181992]
[67.80145264 31.54220009]
[52.68533325 28.82219505]
[40.96475601 18.89628983]
[35.79249573 4.43450308]
[38.55986786 -10.67301941]
[48.52246094 -22.36242867]
[63.00038910 -27.48933220]
[78.09916687 -24.67461777]
[89.75728607 -14.67543221]
[94.83878326 -0.18150404]
[91.97676086 14.90837288]
[81.94107819 26.53509712]
[86.94818115 40.67471695]
[91.95528412 54.81434250]
[96.96238708 68.95396423]
[101.96949005 83.09358215]
[109.36116028 84.36370850]
[118.95272064 72.83106232]
[124.14450073 86.90394592]
[131.53617859 88.17407227]
[140.97598267 76.51688385]
[150.41578674 64.85969543]
[147.25457764 49.54496765]
[154.72254944 35.80583954]
[169.29351807 30.12950516]
[184.08753967 35.19615936]
[192.11932373 48.61347961]
[189.59651184 64.04621887]
[177.71028137 74.20750427]
[162.07296753 74.29949951]
[152.63316345 85.95668793]
[143.19335938 97.61387634]
[148.93360901 111.47206879]
[163.85144043 113.03999329]
[178.76927185 114.60792542]
[185.14183044 112.20050812]
[190.87695312 113.29924774]
[194.41952515 116.66831970]
[209.23486328 119.01483917]
[224.05018616 121.36135101]
[230.54000854 119.29074860]
[236.20976257 120.68813324]
[239.57116699 124.23799896]
[254.24337769 127.35667419]
[268.91558838 130.47534180]
[285.66571045 127.85427856]
[292.82122803 143.22421265]
[280.03283691 154.35491943]
[265.79690552 145.14756775]
[251.12471008 142.02888489]
[236.45248413 138.91021729]
[221.70365906 136.17668152]
[206.88833618 133.83015442]
[192.07301331 131.48364258]
[177.20133972 129.52575684]
[162.28350830 127.95782471]
[147.36569214 126.38990021]
[96.05068207 112.84942627]
[86.01372528 123.99659729]
[75.97676849 135.14376831]
[65.93981171 146.29093933]
[56.04962158 157.56854248]
[46.30789948 168.97462463]
[36.56617737 180.38072205]
[26.82445908 191.78680420]
[17.08273697 203.19290161]
[7.34101725 214.59898376]
[22.33708382 214.25550842]
[34.18153000 223.45925903]
[37.55316925 238.07540894]
[30.93727112 251.53758240]
[17.30607033 257.79779053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 32]
[3 31]
[4 30]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[40 108]
[41 107]
[42 106]
[43 105]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[67 79]
[68 78]
[69 77]
[80 104]
[81 103]
[82 102]
[85 101]
[86 100]
[87 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
