%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUGCCCGUUGCUCAGCAAGUUACUUGGGGUUCCAGUUUGAUAAGAAAAGACUUCCUGUGGAGGAAUCUGAAGGGAAGGAGGAGGAGCUGGCCCAUUCCUGCCUGGGAGGUUGUGGAAGAAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[128.89526367 224.64556885]
[121.23471832 211.74920654]
[121.58953094 196.75340271]
[129.85144043 184.23377991]
[143.49949646 178.01040649]
[158.36888123 179.98200989]
[148.63410950 168.56999207]
[138.89933777 157.15797424]
[124.75298309 152.49644470]
[121.68342590 136.97586060]
[111.94865417 125.56384277]
[102.21387482 114.15182495]
[89.10232544 109.29602814]
[86.37409973 95.58294678]
[76.63932800 84.17092896]
[66.90455627 72.75891113]
[53.65485001 78.52273560]
[39.33190536 80.30275726]
[25.10593033 77.96263885]
[12.13663292 71.70231628]
[1.47869074 62.04089737]
[-6.00402069 49.77367783]
[-9.70844269 35.90665436]
[-9.34093189 21.57404137]
[-4.94051075 7.94548225]
[3.12504816 -3.86938167]
[-6.32894516 -15.51506805]
[-15.78293896 -27.16075325]
[-30.48779869 -32.99835968]
[-32.50229263 -47.75610733]
[-41.95628357 -59.40179443]
[-51.41027832 -71.04747772]
[-60.86427307 -82.69316864]
[-70.31826782 -94.33885193]
[-79.77225494 -105.98453522]
[-89.22624969 -117.63022614]
[-94.30136871 -119.55725098]
[-97.72509766 -122.94077301]
[-99.21666718 -126.87778473]
[-98.90764618 -130.48872375]
[-107.48633575 -142.79344177]
[-121.72585297 -149.68885803]
[-122.65772247 -164.55427551]
[-131.23641968 -176.85899353]
[-139.81510925 -189.16371155]
[-154.05462646 -196.05912781]
[-154.98649597 -210.92456055]
[-163.56518555 -223.22927856]
[-172.14387512 -235.53399658]
[-187.62139893 -239.75607300]
[-193.83793640 -254.54573059]
[-186.02470398 -268.55761719]
[-170.17533875 -271.04299927]
[-158.44812012 -260.09530640]
[-159.83915710 -244.11268616]
[-151.26046753 -231.80796814]
[-142.68177795 -219.50325012]
[-129.05586243 -213.48794556]
[-127.51039124 -197.74240112]
[-118.93170166 -185.43768311]
[-110.35300446 -173.13298035]
[-96.72709656 -167.11767578]
[-95.18161774 -151.37213135]
[-86.60292816 -139.06741333]
[-77.58056641 -127.08422089]
[-68.12657166 -115.43852997]
[-58.67258072 -103.79284668]
[-49.21858597 -92.14715576]
[-39.76459122 -80.50147247]
[-30.31059837 -68.85578918]
[-20.85660553 -57.21010208]
[-6.82795715 -52.20547104]
[-4.13725281 -36.61474609]
[5.31674099 -24.96906090]
[14.77073479 -13.32337570]
[29.27901649 -19.09851837]
[44.88009262 -20.12515259]
[60.05760956 -16.29153824]
[73.33267975 -7.95891476]
[83.40802002 4.07250738]
[89.29469299 18.64037704]
[90.40917969 34.33249283]
[86.63120270 49.62370682]
[78.31657410 63.02413940]
[88.05134583 74.43615723]
[97.78612518 85.84817505]
[110.89767456 90.70397186]
[113.62590027 104.41705322]
[123.36067200 115.82907104]
[133.09544373 127.24108887]
[147.93809509 132.71888733]
[150.31135559 147.42320251]
[160.04612732 158.83522034]
[169.78091431 170.24723816]
[180.70542908 180.52609253]
[192.68862915 189.54844666]
[212.72724915 190.98300171]
[219.72669983 208.94259644]
[232.13496399 217.37081909]
[244.54322815 225.79905701]
[256.95147705 234.22727966]
[277.03619385 234.68449402]
[284.90176392 252.28199768]
[297.70565796 260.09609985]
[310.50955200 267.91021729]
[323.31344604 275.72430420]
[339.98339844 278.81445312]
[341.62875366 295.68835449]
[325.86972046 301.94055176]
[315.49932861 288.52819824]
[302.69543457 280.71411133]
[289.89154053 272.89999390]
[277.08764648 265.08590698]
[267.28735352 268.39682007]
[257.08383179 265.65551758]
[249.97077942 257.54705811]
[248.52325439 246.63554382]
[236.11500549 238.20730591]
[223.70674133 229.77908325]
[211.29847717 221.35084534]
[201.34860229 224.18069458]
[191.29064941 220.94586182]
[184.58081055 212.50070190]
[183.66625977 201.53164673]
[171.68305969 192.50929260]
[174.55570984 207.23164368]
[169.17405701 221.23298645]
[157.18017578 230.24113464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 94]
[7 93]
[8 92]
[10 90]
[11 89]
[12 88]
[14 86]
[15 85]
[16 84]
[26 75]
[27 74]
[28 73]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
[95 125]
[96 124]
[98 120]
[99 119]
[100 118]
[101 117]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
