%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGUUACUUCCGGGGCGGCACCGAGAAGCUGAAACGGAAGUGGCGUACGGCAUGCGCCGGUGGCGUG\
) } def
/len { sequence length } bind def

/coor [
[97.91000366 120.87551880]
[90.39130402 118.65015411]
[84.21479034 113.81964111]
[80.24324036 107.05873871]
[79.03141022 99.31182861]
[80.74858093 91.66104889]
[70.02529907 81.17241669]
[59.30201721 70.68379211]
[48.57873917 60.19516754]
[37.85545731 49.70654297]
[27.13217926 39.21791840]
[16.40889931 28.72929192]
[5.68561888 18.24066734]
[-5.03766108 7.75204134]
[-15.76094151 -2.73658419]
[-30.96988678 -0.28829294]
[-44.54551697 -7.18435669]
[-51.37658310 -20.59332848]
[-49.03012466 -35.27774429]
[-59.75340271 -45.76637268]
[-70.47668457 -56.25499725]
[-81.19996643 -66.74362183]
[-96.47509766 -64.01416779]
[-110.42255402 -70.81476593]
[-117.67924500 -84.53044891]
[-115.45483398 -99.88726044]
[-104.60465240 -110.98018646]
[-89.30080414 -113.54377747]
[-75.42794800 -106.59227753]
[-68.32046509 -92.79867554]
[-70.71133423 -77.46690369]
[-59.98805618 -66.97827911]
[-49.26477814 -56.48965073]
[-38.54149628 -46.00102615]
[-23.91258240 -48.67176056]
[-10.35577488 -42.13899994]
[-3.16107726 -28.71924973]
[-5.27231550 -13.45986366]
[5.45096445 -2.97123861]
[16.17424393 7.51738691]
[26.89752388 18.00601196]
[37.62080383 28.49463844]
[48.34408569 38.98326492]
[59.06736374 49.47188950]
[69.79064178 59.96051407]
[80.51392365 70.44914246]
[91.23720551 80.93776703]
[112.92462921 83.47398376]
[120.61208344 103.91120148]
[133.37561035 111.79107666]
[146.13912964 119.67095947]
[158.90264893 127.55083466]
[174.70983887 128.21673584]
[181.47489929 141.48637390]
[194.23841858 149.36625671]
[207.00193787 157.24612427]
[222.32208252 153.36427307]
[235.85699463 161.52401733]
[239.57667542 176.88433838]
[231.27427673 190.33222961]
[215.87548828 193.88929749]
[202.51611328 185.44519043]
[199.12205505 170.00965881]
[186.35853577 162.12977600]
[173.59501648 154.24989319]
[158.70075989 154.14761353]
[151.02276611 140.31436157]
[138.25924683 132.43447876]
[125.49572754 124.55460358]
[112.73220062 116.67472076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 47]
[7 46]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[19 34]
[20 33]
[21 32]
[22 31]
[49 70]
[50 69]
[51 68]
[52 67]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
