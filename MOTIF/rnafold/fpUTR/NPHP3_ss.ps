%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCCCGCCCCGUCCCGUUCCGUUCCUCUGCCCCACCCCGUCCCGUUCCGUUCCGCUGCCCAGUCCUGCUGGUACUCACUAGGUAGUAGCGGCAACGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[-57.56078720 247.96273804]
[-61.28037262 262.52108765]
[-67.03404236 276.40185547]
[-74.70466614 289.32247925]
[-84.13607788 301.01986694]
[-95.13625336 311.25592041]
[-107.48126221 319.82223511]
[-120.91976166 326.54440308]
[-135.17817688 331.28555298]
[-149.96620178 333.94918823]
[-164.98278809 334.48107910]
[-179.92221069 332.87039185]
[-194.48033142 329.14990234]
[-208.36074829 323.39535522]
[-221.28088379 315.72393799]
[-232.97770691 306.29180908]
[-243.21308899 295.29098511]
[-251.77862549 282.94546509]
[-258.49996948 269.50653076]
[-263.24023438 255.24783325]
[-265.90295410 240.45964050]
[-266.43389893 225.44302368]
[-264.82229614 210.50370789]
[-261.10089111 195.94581604]
[-255.34550476 182.06575012]
[-247.67327881 169.14608765]
[-238.24043274 157.44984436]
[-227.23898315 147.21514893]
[-214.89291382 138.65037537]
[-201.45358276 131.92988586]
[-187.19459534 127.19048309]
[-172.40623474 124.52867889]
[-157.38958740 123.99864960]
[-142.45034790 125.61119843]
[-127.89270020 129.33348083]
[-114.01299286 135.08973694]
[-101.09379578 142.76275635]
[-89.39813995 152.19633484]
[-79.16413116 163.19842529]
[-70.60012054 175.54501343]
[-57.18445587 168.83531189]
[-43.76879501 162.12562561]
[-30.35313416 155.41592407]
[-16.93747330 148.70622253]
[-12.28711796 142.80273438]
[-3.01860142 142.00325012]
[10.59177876 135.69789124]
[24.20215988 129.39253235]
[37.71669388 122.88427734]
[51.13235474 116.17458344]
[64.54801178 109.46488190]
[77.96367645 102.75518799]
[91.37933350 96.04548645]
[94.20071411 91.41268158]
[99.46918488 88.77269745]
[105.80403900 89.36287689]
[119.59695435 83.46749878]
[133.38987732 77.57212067]
[147.18278503 71.67675018]
[160.97570801 65.78137207]
[174.76861572 59.88599777]
[184.41731262 47.34752274]
[199.16134644 49.46004868]
[212.95425415 43.56467056]
[226.74717712 37.66929626]
[240.06095886 30.75965881]
[252.82116699 22.87440300]
[260.11151123 8.18484688]
[276.49298096 7.42386675]
[285.11373901 21.37429428]
[277.10549927 35.68512726]
[260.70642090 35.63460541]
[247.94621277 43.51985931]
[247.47920227 45.96823883]
[246.06732178 48.39537811]
[243.71168518 50.46515656]
[240.52583313 51.84680939]
[236.73138428 52.25079346]
[232.64254761 51.46221161]
[218.84963989 57.35758972]
[205.05671692 63.25296402]
[196.39459229 75.36976624]
[180.66400146 73.67891693]
[166.87107849 79.57428741]
[153.07817078 85.46966553]
[139.28524780 91.36504364]
[125.49233246 97.26041412]
[111.69941711 103.15579224]
[98.08903503 109.46115112]
[84.67337036 116.17084503]
[71.25771332 122.88054657]
[57.84205246 129.59024048]
[44.42638779 136.29994202]
[38.02249908 143.04788208]
[30.50751686 143.00291443]
[16.89713669 149.30827332]
[3.28675699 155.61363220]
[-10.22777653 162.12188721]
[-23.64343643 168.83158875]
[-37.05909729 175.54127502]
[-50.47475815 182.25097656]
[-63.89041901 188.96067810]
[-59.14837646 203.21879578]
[-56.48382568 218.00665283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[40 102]
[41 101]
[42 100]
[43 99]
[44 98]
[46 97]
[47 96]
[48 95]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[61 83]
[63 81]
[64 80]
[65 79]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
