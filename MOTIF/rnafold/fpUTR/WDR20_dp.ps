%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:04 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (WDR20)
} def

/sequence { (\
AGCACCAGGAACAGCGCCUGCGCGGUGGGCGUGAUCCGGGCACUUAGGGCAGGAUGAACGCUGCUUUCCAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 44 0.082467291 ubox
1 45 0.016319891 ubox
2 41 0.978951698 ubox
2 43 0.094292679 ubox
2 44 0.008257619 ubox
3 40 0.979062230 ubox
5 39 0.979241899 ubox
5 40 0.166318628 ubox
6 38 0.976400011 ubox
6 39 0.167586779 ubox
8 36 0.031896592 ubox
8 37 0.998633793 ubox
8 69 0.015546281 ubox
9 35 0.028999184 ubox
9 36 0.999222781 ubox
9 68 0.015560312 ubox
10 35 0.982954029 ubox
10 66 0.003813620 ubox
10 67 0.015279433 ubox
11 32 0.004180657 ubox
11 65 0.004363447 ubox
11 66 0.012732467 ubox
12 31 0.003611539 ubox
12 33 0.691542402 ubox
12 63 0.014787295 ubox
13 32 0.560383550 ubox
13 44 0.004396794 ubox
13 62 0.014872808 ubox
14 30 0.009007410 ubox
14 32 0.823620149 ubox
14 43 0.004708124 ubox
14 61 0.014878224 ubox
15 29 0.008947443 ubox
15 31 0.997814144 ubox
15 60 0.014873750 ubox
16 26 0.003775010 ubox
16 30 0.999808055 ubox
16 41 0.005160272 ubox
16 59 0.014684451 ubox
17 25 0.003902337 ubox
17 28 0.011092632 ubox
17 29 0.999798635 ubox
17 40 0.005163248 ubox
17 53 0.014600399 ubox
18 24 0.003909447 ubox
18 27 0.013180307 ubox
18 28 0.999757588 ubox
18 39 0.005163085 ubox
18 52 0.014606389 ubox
19 27 0.995434083 ubox
19 38 0.005131997 ubox
19 51 0.014601692 ubox
20 26 0.988889304 ubox
20 37 0.004731751 ubox
20 50 0.014602407 ubox
21 25 0.984806905 ubox
21 27 0.010440312 ubox
21 31 0.003357778 ubox
21 33 0.004441637 ubox
21 49 0.014592158 ubox
22 26 0.008352004 ubox
22 30 0.003536578 ubox
22 32 0.004532101 ubox
23 29 0.003536555 ubox
23 31 0.004539090 ubox
24 30 0.004530734 ubox
24 44 0.009326901 ubox
25 43 0.009632727 ubox
26 42 0.009575221 ubox
26 46 0.004866682 ubox
27 41 0.009149215 ubox
27 44 0.008185333 ubox
27 45 0.004805842 ubox
28 43 0.008348219 ubox
28 44 0.004691514 ubox
29 41 0.010178412 ubox
29 43 0.004652301 ubox
30 38 0.008376929 ubox
30 40 0.010287553 ubox
31 37 0.008323191 ubox
31 41 0.004644191 ubox
31 59 0.003345661 ubox
32 38 0.009842032 ubox
32 40 0.004623228 ubox
32 58 0.003303294 ubox
33 37 0.009418643 ubox
34 55 0.003963615 ubox
35 54 0.004147409 ubox
36 53 0.004167875 ubox
37 52 0.004166061 ubox
38 69 0.016494626 ubox
39 68 0.016499440 ubox
39 69 0.012972777 ubox
40 50 0.004200813 ubox
40 67 0.013332877 ubox
40 68 0.013431610 ubox
41 49 0.004203142 ubox
43 72 0.631917933 ubox
44 71 0.640573662 ubox
44 72 0.032381843 ubox
45 70 0.592235013 ubox
45 71 0.051121774 ubox
46 65 0.004141061 ubox
46 66 0.034439533 ubox
46 67 0.750121147 ubox
47 65 0.033157312 ubox
47 66 0.900544193 ubox
47 67 0.033730319 ubox
47 68 0.143652617 ubox
47 69 0.263241650 ubox
48 62 0.003480315 ubox
48 64 0.023951033 ubox
48 65 0.955796391 ubox
48 66 0.030551025 ubox
48 67 0.071529089 ubox
48 68 0.255362443 ubox
48 69 0.011119220 ubox
49 61 0.003882644 ubox
49 64 0.998635374 ubox
49 65 0.006854135 ubox
49 66 0.007313510 ubox
49 67 0.038577716 ubox
49 68 0.008065995 ubox
50 60 0.003884800 ubox
50 63 0.999732965 ubox
51 62 0.999441557 ubox
51 65 0.012295083 ubox
51 66 0.007427323 ubox
52 61 0.999370585 ubox
52 62 0.008803722 ubox
52 64 0.012403509 ubox
52 65 0.007673308 ubox
52 69 0.005434465 ubox
53 61 0.017241496 ubox
53 64 0.007679037 ubox
53 68 0.005439988 ubox
54 67 0.005340724 ubox
66 70 0.004383136 ubox
66 71 0.005503094 ubox
66 72 0.003962918 ubox
67 71 0.006865761 ubox
2 41 0.9500000 lbox
3 40 0.9500000 lbox
5 39 0.9500000 lbox
6 38 0.9500000 lbox
8 37 0.9500000 lbox
9 36 0.9500000 lbox
10 35 0.9500000 lbox
14 32 0.9500000 lbox
15 31 0.9500000 lbox
16 30 0.9500000 lbox
17 29 0.9500000 lbox
18 28 0.9500000 lbox
19 27 0.9500000 lbox
20 26 0.9500000 lbox
21 25 0.9500000 lbox
46 67 0.9500000 lbox
47 66 0.9500000 lbox
48 65 0.9500000 lbox
49 64 0.9500000 lbox
50 63 0.9500000 lbox
51 62 0.9500000 lbox
52 61 0.9500000 lbox
showpage
end
%%EOF
