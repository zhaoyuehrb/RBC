%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGAAACAGAAAUUGCUUUGCGGCCCGCACGGAAAUUGCUUUCCUUCGGCUUCCGUUCUUGGUCCAUGUGAGAGAAGCUGGCUGCUGAA\
) } def
/len { sequence length } bind def

/coor [
[94.83734894 118.14122772]
[86.96891022 113.63626099]
[82.11164856 105.98027802]
[67.16748047 104.68727112]
[52.22331238 103.39426422]
[37.27914429 102.10125732]
[22.33497620 100.80825043]
[14.71831417 110.26584625]
[3.55632114 114.73121643]
[-8.24140835 113.16835022]
[-17.66176796 106.09624481]
[-22.35766029 95.42551422]
[-37.17701340 93.10456848]
[-51.99636841 90.78363037]
[-66.81571960 88.46269226]
[-81.64688110 93.97151947]
[-93.02368927 84.35811615]
[-107.84304810 82.03717804]
[-122.67420959 87.54600525]
[-134.05101013 77.93260193]
[-148.87037659 75.61166382]
[-163.68972778 73.29072571]
[-178.50907898 70.96978760]
[-195.09300232 74.49253082]
[-203.06896973 59.53190231]
[-190.90097046 47.72612762]
[-176.18814087 56.15042877]
[-161.36878967 58.47137070]
[-146.54942322 60.79230881]
[-131.73007202 63.11325073]
[-117.95889282 57.43841553]
[-105.52210236 67.21782684]
[-90.70275116 69.53876495]
[-76.93157196 63.86392593]
[-64.49478149 73.64334106]
[-49.67542648 75.96427917]
[-34.85607147 78.28521729]
[-20.03672028 80.60615540]
[-6.13616037 68.94046021]
[12.21367168 70.95857239]
[23.62798119 85.86408997]
[38.57214737 87.15708923]
[53.51631546 88.45009613]
[68.46048737 89.74310303]
[83.40464783 91.03610992]
[100.65102386 81.14971924]
[117.17423248 92.20240021]
[132.17199707 91.94348907]
[147.16976929 91.68457794]
[162.16752625 91.42567444]
[177.16529846 91.16676331]
[188.10871887 80.08166504]
[203.32226562 80.03274536]
[213.82276917 90.53393555]
[228.82054138 90.27502441]
[243.81829834 90.01611328]
[258.79818726 89.23969269]
[273.74237061 87.94669342]
[288.68652344 86.65368652]
[303.63070679 85.36067963]
[318.57485962 84.06767273]
[324.43411255 69.92809296]
[336.20065308 60.13996506]
[351.17059326 56.95252609]
[365.90393066 61.09822845]
[377.01510620 71.62442017]
[381.95080566 86.11225128]
[379.57687378 101.23253632]
[370.43878174 113.51074219]
[356.63644409 120.12541962]
[341.34152222 119.55657196]
[328.06866455 111.93490601]
[319.86785889 99.01184082]
[304.92370605 100.30484772]
[289.97955322 101.59785461]
[275.03536987 102.89086151]
[260.09121704 104.18386078]
[256.26934814 107.36656952]
[250.35028076 108.03456879]
[244.07720947 105.01388550]
[229.07945251 105.27278900]
[214.08168030 105.53170013]
[203.94990540 116.38906860]
[188.74371338 116.86529541]
[177.42420959 106.16452789]
[162.42643738 106.42343903]
[147.42868042 106.68234253]
[132.43090820 106.94125366]
[117.43314362 107.20016479]
[112.05925751 114.50279999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[12 38]
[13 37]
[14 36]
[15 35]
[17 33]
[18 32]
[20 30]
[21 29]
[22 28]
[23 27]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[54 82]
[55 81]
[56 80]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
