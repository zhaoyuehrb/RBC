%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGCCUGCGCGAGGGCUACGCGCGCUCCGGCCGGGGCGCGGGCGCGCUCUCAGGCGGGCUCCGGCGGCAGCGACGCGAGCGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[93.74018097 394.90695190]
[92.68209839 379.94430542]
[91.62401581 364.98168945]
[90.56593323 350.01904297]
[89.50784302 335.05642700]
[88.44976044 320.09378052]
[79.96379852 313.92675781]
[76.31214142 303.85580444]
[78.98175049 293.25170898]
[87.29799652 285.81356812]
[87.29799652 270.81356812]
[87.29799652 255.81355286]
[87.29799652 240.81355286]
[76.91730499 232.96437073]
[72.96052551 220.36074829]
[77.11367035 207.61419678]
[88.05093384 199.52769470]
[88.58030701 184.53703308]
[89.10968018 169.54637146]
[80.01412964 154.65089417]
[89.61551666 139.06025696]
[89.61551666 124.06025696]
[89.61551666 109.06025696]
[83.45004272 95.38594055]
[72.20888519 85.45435333]
[60.96773148 75.52276611]
[49.72657776 65.59117889]
[38.48542023 55.65959167]
[27.24426651 45.72800446]
[16.00311089 35.79641724]
[-0.16781847 33.07005310]
[-5.63784504 17.61007690]
[5.22012615 5.32038689]
[21.23634529 8.84356117]
[25.93470001 24.55526161]
[37.17585373 34.48684692]
[48.41701126 44.41843414]
[59.65816498 54.35002518]
[70.89932251 64.28160858]
[82.14047241 74.21319580]
[93.38162994 84.14478302]
[108.23236084 82.03388977]
[116.26081848 69.36329651]
[124.28927612 56.69270706]
[132.31773376 44.02211761]
[133.16825867 28.22379112]
[146.51603699 21.61422729]
[154.54449463 8.94363785]
[162.57295227 -3.72695231]
[170.60140991 -16.39754295]
[170.73558044 -32.79614258]
[185.13568115 -40.64272308]
[198.98814392 -31.86539841]
[198.04272461 -15.49352455]
[183.27200317 -8.36908340]
[175.24354553 4.30150652]
[167.21508789 16.97209740]
[159.18663025 29.64268684]
[158.91033936 44.53472900]
[144.98832703 52.05057907]
[136.95986938 64.72116852]
[128.93141174 77.39175415]
[120.90294647 90.06234741]
[118.77237701 101.32915497]
[112.08232880 108.00540161]
[104.61551666 109.06025696]
[104.61551666 124.06025696]
[104.61551666 139.06025696]
[113.24083710 148.84477234]
[112.80527496 161.47692871]
[104.10033417 170.07574463]
[103.57096100 185.06640625]
[103.04158783 200.05705261]
[115.16923523 212.51451111]
[114.65703583 229.55790710]
[102.29799652 240.81355286]
[102.29799652 255.81355286]
[102.29799652 270.81356812]
[102.29799652 285.81356812]
[113.25996399 302.55102539]
[103.41239929 319.03570557]
[104.47048187 333.99832153]
[105.52856445 348.96096802]
[106.58664703 363.92358398]
[107.64473724 378.88623047]
[108.70281982 393.84887695]
[115.85137177 409.22204590]
[103.05790710 420.34695435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 86]
[2 85]
[3 84]
[4 83]
[5 82]
[6 81]
[10 79]
[11 78]
[12 77]
[13 76]
[17 73]
[18 72]
[19 71]
[21 68]
[22 67]
[23 66]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 63]
[43 62]
[44 61]
[45 60]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
