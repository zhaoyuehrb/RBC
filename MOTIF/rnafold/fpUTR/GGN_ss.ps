%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCCUGGGGGCGAGGAACAAGACCUCGGAGUAUUUCAAGGGGAGACCUAGUUCCCUGCCCUGCCCCGGGCCCAGGGCGCCGCGGUCUGAACUCUGCUCGGCUGGAGGACUCGUCUCCGAGCUCCGUCAGAA\
) } def
/len { sequence length } bind def

/coor [
[60.63556290 142.75726318]
[55.31389618 128.73300171]
[59.04118729 114.20347595]
[70.45674133 104.47284698]
[85.39334869 103.09344482]
[70.96596527 98.98850250]
[56.53857803 94.88355255]
[42.11119080 90.77861023]
[27.68380737 86.67366791]
[13.25642300 82.56871796]
[-1.17096162 78.46377563]
[-15.59834671 74.35883331]
[-30.02573013 70.25388336]
[-46.36217880 84.97893524]
[-72.70984650 79.41010284]
[-85.81418610 86.70917511]
[-98.91851807 94.00823975]
[-112.02285767 101.30730438]
[-125.12718964 108.60637665]
[-127.90158081 123.99588013]
[-139.95208740 133.96179199]
[-155.58880615 133.79852295]
[-167.42858887 123.58315277]
[-169.88102722 108.13907623]
[-161.78816223 94.75850677]
[-146.97120667 89.75934601]
[-132.42625427 95.50203705]
[-119.32192230 88.20297241]
[-106.21758270 80.90390778]
[-93.11325073 73.60483551]
[-80.00891113 66.30577087]
[-78.54573822 58.94987869]
[-93.54523468 59.07286072]
[-106.94844055 65.80739594]
[-121.36988068 61.68161392]
[-129.18328857 48.87728882]
[-126.25681305 34.16553116]
[-114.13802338 25.32613373]
[-99.23551178 27.03349304]
[-89.43004608 38.38442230]
[-75.61938477 44.23810196]
[-74.15620422 36.88220978]
[-83.46980286 25.12393951]
[-92.78339386 13.36566925]
[-102.09699249 1.60739839]
[-116.73075867 -4.40620708]
[-118.56805420 -19.18705940]
[-127.88164520 -30.94533157]
[-143.06455994 -28.62698746]
[-157.36668396 -34.22564697]
[-166.94079590 -46.23529816]
[-169.21154785 -61.42540359]
[-163.56808472 -75.70989990]
[-151.52848816 -85.24633789]
[-136.33132935 -87.46945190]
[-122.06459045 -81.78124237]
[-112.56594849 -69.71180725]
[-110.39047241 -54.50776672]
[-116.12337494 -40.25892639]
[-106.80977631 -28.50065613]
[-92.84218597 -23.32808113]
[-90.33872223 -7.70619726]
[-81.02512360 4.05207396]
[-71.71153259 15.81034470]
[-62.39793396 27.56861496]
[-33.94716644 33.52855301]
[-25.92078590 55.82649994]
[-11.49340153 59.93144608]
[2.93398333 64.03639221]
[17.36136818 68.14133453]
[31.78875160 72.24628448]
[46.21613693 76.35122681]
[60.64352036 80.45616913]
[75.07090759 84.56111145]
[89.49829102 88.66606140]
[103.92567444 84.56111145]
[114.03111267 73.47598267]
[124.13654327 62.39084625]
[134.24197388 51.30571365]
[137.82116699 35.89467621]
[152.11340332 31.70169640]
[162.21884155 20.61656189]
[168.42129517 4.83790970]
[185.30032349 6.43000507]
[188.44302368 23.09012985]
[173.30397034 30.72199631]
[163.19853210 41.80712891]
[160.34216309 56.42528534]
[145.32711792 61.41114807]
[135.22167969 72.49628448]
[125.11624146 83.58141327]
[115.01081085 94.66654968]
[129.19366455 89.78323364]
[143.37651062 84.89991760]
[156.15856934 77.05014038]
[171.15344238 76.65814972]
[184.32818604 83.82936859]
[192.13934326 96.63505554]
[192.48609924 111.63104248]
[185.27516174 124.78408051]
[172.44595337 132.55657959]
[157.44898987 132.85806274]
[144.31700134 125.60673523]
[129.92375183 121.38363647]
[115.53050995 117.16054535]
[126.13711548 127.76715088]
[136.74371338 138.37374878]
[147.35031128 148.98034668]
[162.57960510 153.26745605]
[166.10804749 167.73808289]
[176.71466064 178.34469604]
[187.32125854 188.95129395]
[198.04965210 199.43467712]
[208.89842224 209.79345703]
[219.74717712 220.15225220]
[230.59594727 230.51103210]
[246.64936829 233.86058044]
[251.51757812 249.52047729]
[240.19256592 261.38116455]
[224.32453918 257.24139404]
[220.23715210 241.35978699]
[209.38839722 231.00100708]
[198.53962708 220.64222717]
[187.69087219 210.28344727]
[180.61738586 207.91818237]
[176.71466064 199.55789185]
[166.10804749 188.95129395]
[155.50144958 178.34469604]
[141.03080750 174.81625366]
[136.74371338 159.58695984]
[126.13711548 148.98034668]
[115.53050995 138.37374878]
[104.92391205 127.76715088]
[100.15214539 141.98791504]
[88.06060791 150.86454773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 75]
[6 74]
[7 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[42 65]
[43 64]
[44 63]
[45 62]
[47 60]
[48 59]
[76 92]
[77 91]
[78 90]
[79 89]
[81 87]
[82 86]
[105 133]
[106 132]
[107 131]
[108 130]
[110 128]
[111 127]
[112 126]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
