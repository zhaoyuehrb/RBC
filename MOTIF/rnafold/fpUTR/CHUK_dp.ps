%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:42 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CHUK)
} def

/sequence { (\
AAAGACGCGCGAGCAUCGGCGGCCCGGAACCGGCCUUGGAACAACUGUGGAACCUGAGGCCGCUUGCCCUCCCGCCCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
4 17 0.907189803 ubox
5 16 0.901886762 ubox
6 21 0.004061561 ubox
6 74 0.003283393 ubox
7 14 0.979427073 ubox
7 17 0.003694210 ubox
7 20 0.006600244 ubox
7 73 0.003326222 ubox
7 75 0.165869710 ubox
8 13 0.980064765 ubox
8 19 0.006607871 ubox
8 74 0.166199072 ubox
9 17 0.004243192 ubox
9 67 0.004398929 ubox
9 73 0.165993700 ubox
9 75 0.008480277 ubox
10 18 0.011449917 ubox
10 66 0.004464760 ubox
10 74 0.008490103 ubox
11 17 0.025538984 ubox
11 65 0.004461549 ubox
11 71 0.165228475 ubox
11 73 0.007614227 ubox
12 16 0.022242375 ubox
12 64 0.004448955 ubox
12 70 0.163611115 ubox
13 63 0.004439747 ubox
13 67 0.085179057 ubox
13 69 0.142319432 ubox
14 62 0.004372083 ubox
14 66 0.095016101 ubox
15 65 0.090356344 ubox
16 27 0.003314051 ubox
17 26 0.005173665 ubox
17 66 0.035808306 ubox
18 25 0.005360530 ubox
18 64 0.157338168 ubox
18 65 0.025552148 ubox
18 68 0.012867952 ubox
18 73 0.003240498 ubox
18 76 0.981786807 ubox
18 77 0.063659083 ubox
18 78 0.014905285 ubox
19 24 0.005295682 ubox
19 63 0.165883253 ubox
19 64 0.003367406 ubox
19 67 0.012853827 ubox
19 72 0.003234450 ubox
19 75 0.984837681 ubox
19 76 0.045131810 ubox
19 77 0.014516355 ubox
20 62 0.165935592 ubox
20 66 0.012829732 ubox
20 74 0.985871192 ubox
21 61 0.165940705 ubox
21 64 0.006585555 ubox
21 65 0.010367558 ubox
21 68 0.006937289 ubox
21 72 0.029830019 ubox
21 73 0.985385346 ubox
21 76 0.015210130 ubox
22 60 0.165943388 ubox
22 63 0.009397287 ubox
22 64 0.005469684 ubox
22 67 0.007338776 ubox
22 71 0.042089463 ubox
22 72 0.983498713 ubox
22 75 0.015402544 ubox
23 59 0.165928925 ubox
23 62 0.008657427 ubox
23 66 0.007634456 ubox
23 74 0.015370763 ubox
24 58 0.165875308 ubox
25 32 0.003619751 ubox
25 56 0.155342297 ubox
25 66 0.019077833 ubox
26 31 0.004149166 ubox
26 54 0.098101099 ubox
26 55 0.133329717 ubox
26 64 0.008553794 ubox
26 65 0.018668042 ubox
26 68 0.966880440 ubox
26 69 0.156248724 ubox
26 70 0.025674314 ubox
26 71 0.006836618 ubox
26 72 0.009514535 ubox
27 53 0.098952949 ubox
27 54 0.132051680 ubox
27 63 0.009333526 ubox
27 64 0.017596313 ubox
27 65 0.017384364 ubox
27 67 0.967896639 ubox
27 68 0.153782173 ubox
27 69 0.025895810 ubox
27 70 0.005749125 ubox
27 71 0.010264425 ubox
28 64 0.025192372 ubox
28 65 0.758975955 ubox
28 70 0.009677560 ubox
29 64 0.731151119 ubox
30 39 0.016510891 ubox
30 50 0.153804464 ubox
31 38 0.016576196 ubox
31 47 0.009768519 ubox
31 49 0.153944271 ubox
31 62 0.982446871 ubox
32 37 0.012637148 ubox
32 46 0.015377134 ubox
32 48 0.145447200 ubox
32 54 0.006600206 ubox
32 61 0.986102088 ubox
33 45 0.017333763 ubox
33 48 0.040032186 ubox
33 53 0.007407263 ubox
33 60 0.986130164 ubox
34 47 0.053518136 ubox
34 50 0.054808457 ubox
34 59 0.986131101 ubox
35 49 0.054824184 ubox
35 58 0.986120644 ubox
36 44 0.129827825 ubox
36 57 0.984983196 ubox
37 43 0.138589653 ubox
37 47 0.036729905 ubox
37 56 0.954716308 ubox
37 57 0.005090618 ubox
38 42 0.137065135 ubox
38 46 0.058715939 ubox
38 54 0.609472903 ubox
38 55 0.768446220 ubox
39 45 0.059191708 ubox
39 53 0.611106954 ubox
39 54 0.767041473 ubox
41 48 0.181992119 ubox
42 47 0.187016440 ubox
42 49 0.804118909 ubox
42 56 0.004093790 ubox
43 48 0.700036854 ubox
43 55 0.004148020 ubox
47 53 0.052507229 ubox
48 52 0.047432208 ubox
49 55 0.005591806 ubox
50 54 0.005708173 ubox
4 17 0.9500000 lbox
5 16 0.9500000 lbox
7 14 0.9500000 lbox
8 13 0.9500000 lbox
18 76 0.9500000 lbox
19 75 0.9500000 lbox
20 74 0.9500000 lbox
21 73 0.9500000 lbox
22 72 0.9500000 lbox
26 68 0.9500000 lbox
27 67 0.9500000 lbox
28 65 0.9500000 lbox
29 64 0.9500000 lbox
31 62 0.9500000 lbox
32 61 0.9500000 lbox
33 60 0.9500000 lbox
34 59 0.9500000 lbox
35 58 0.9500000 lbox
36 57 0.9500000 lbox
37 56 0.9500000 lbox
38 55 0.9500000 lbox
39 54 0.9500000 lbox
showpage
end
%%EOF
