%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAUCUAUGGCCCCGCCCCGGCCCUUUGUGACGCAGGACAACGCCUGCCACGCGUCGGAACUCGGCCGCGGGACAUCCACGGGGCGCGAGUGACACGCGGGAGGGAGAGCAGUGUUCUGCUGGAGCCG\
) } def
/len { sequence length } bind def

/coor [
[-42.05223846 312.22726440]
[-52.52990723 322.96124268]
[-63.00757980 333.69522095]
[-73.48525238 344.42922974]
[-69.75213623 356.48046875]
[-71.52764893 368.89782715]
[-78.40837097 379.29895020]
[-89.01753235 385.71527100]
[-101.28002930 386.96435547]
[-112.82824707 382.86752319]
[-123.81227875 393.08273315]
[-134.79631042 403.29797363]
[-145.78033447 413.51321411]
[-144.80226135 429.12017822]
[-154.12651062 441.67376709]
[-169.35047913 445.24652100]
[-183.28587341 438.15155029]
[-189.35282898 423.73883057]
[-184.68669128 408.81362915]
[-171.49069214 400.42318726]
[-155.99557495 402.52920532]
[-145.01155090 392.31396484]
[-134.02751160 382.09872437]
[-123.04348755 371.88348389]
[-126.01997375 354.55795288]
[-117.99848175 338.74035645]
[-101.98292542 330.76559448]
[-84.21923065 333.95153809]
[-73.74156189 323.21755981]
[-63.26389313 312.48358154]
[-52.78622437 301.74960327]
[-55.80457306 279.45748901]
[-41.49383163 261.76696777]
[-18.54726791 260.02270508]
[-10.02629662 247.67794800]
[-1.50532508 235.33319092]
[7.01564598 222.98843384]
[15.53661728 210.64367676]
[24.05758858 198.29891968]
[32.57855988 185.95416260]
[41.09952927 173.60940552]
[38.17045593 159.05068970]
[46.63607788 146.40995789]
[61.92645264 143.43638611]
[70.44742584 131.09162903]
[78.81861877 118.64482117]
[87.03880310 106.09777069]
[88.01844788 92.15029907]
[100.41414642 85.68204498]
[108.63433075 73.13499451]
[108.75868225 53.04409409]
[126.22586060 44.89028931]
[133.83026123 31.96074295]
[141.43464661 19.03119850]
[149.03904724 6.10165405]
[156.64344788 -6.82789087]
[150.19606018 -19.07546616]
[150.66513062 -32.79982758]
[157.81968689 -44.39379501]
[169.68576050 -50.86352539]
[183.08982849 -50.60132217]
[191.00442505 -63.34334183]
[198.91903687 -76.08535767]
[206.83363342 -88.82737732]
[214.74824524 -101.56939697]
[222.50831604 -114.40611267]
[230.11270142 -127.33566284]
[237.71710205 -140.26521301]
[238.04391479 -156.08303833]
[251.16545105 -163.13105774]
[258.76986694 -176.06060791]
[266.21746826 -189.08108521]
[273.50723267 -202.19061279]
[272.70214844 -218.56997681]
[286.62933350 -227.22825623]
[300.96166992 -219.25854492]
[300.95529175 -202.85940552]
[286.61672974 -194.90086365]
[279.32699585 -181.79133606]
[278.82070923 -174.34121704]
[271.69940186 -168.45620728]
[264.09500122 -155.52665710]
[264.31210327 -140.63363647]
[250.64665222 -132.66081238]
[243.04225159 -119.73126221]
[235.43785095 -106.80171967]
[234.75170898 -99.36601257]
[227.49026489 -93.65479279]
[219.57565308 -80.91277313]
[211.66105652 -68.17075348]
[203.74644470 -55.42873764]
[195.83184814 -42.68671799]
[202.50689697 -27.74031448]
[198.95809937 -11.59087086]
[186.38243103 -0.60209632]
[169.57299805 0.77650672]
[161.96859741 13.70605183]
[154.36419678 26.63559723]
[146.75979614 39.56514359]
[139.15541077 52.49468613]
[142.62510681 62.23725128]
[140.05250549 72.48200989]
[132.06474304 79.72653198]
[121.18138123 81.35517883]
[112.96119690 93.90222931]
[111.98155212 107.84970093]
[99.58585358 114.31795502]
[91.36566925 126.86500549]
[89.24629211 135.85693359]
[82.79218292 139.61260986]
[74.27120972 151.95736694]
[76.91291809 167.30856323]
[68.09558868 179.70651245]
[53.44429016 182.13037109]
[44.92331696 194.47512817]
[36.40234756 206.81988525]
[27.88137627 219.16464233]
[19.36040497 231.50939941]
[10.83943272 243.85415649]
[2.31846166 256.19891357]
[-6.20250940 268.54367065]
[-1.93541265 275.41299438]
[0.27326995 283.16403198]
[0.26797611 291.19644165]
[-1.93597007 298.89236450]
[-6.15468359 305.66381836]
[-12.05096722 310.99783325]
[-19.16122627 314.49508667]
[-26.93189621 315.89996338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[10 24]
[11 23]
[12 22]
[13 21]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[44 111]
[45 110]
[46 108]
[47 107]
[49 105]
[50 104]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
