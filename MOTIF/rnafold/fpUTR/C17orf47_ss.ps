%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACAUCACCAGACAGAGAGGUAGCUAAGGGGAUUAUUUGAGACACUCUUAGAACAACAGCCACUUUUGUGGGAGCCCAAGAAACAGCAGCUUUAAAACAGGGUAAAUAUUCAGGCAUCAUUAGGAUCCUGAAUACAAGCCAGCCAGUAAAAUACGGGAUCUACUCAGAAGGGCACAAUCUAUCAG\
) } def
/len { sequence length } bind def

/coor [
[103.54471588 246.83642578]
[103.19244385 261.92080688]
[98.94711304 276.39974976]
[91.09819031 289.28604126]
[80.18081665 299.70111084]
[66.93936920 306.93481445]
[52.27666092 310.49392700]
[37.19242477 310.13583374]
[22.71512794 305.88491821]
[9.83185863 298.03100586]
[-0.57898384 287.10961914]
[-7.80756855 273.86538696]
[-11.36104012 259.20129395]
[-10.99711514 244.11720276]
[-6.74060774 229.64155579]
[1.11826658 216.76130676]
[12.04367638 206.35469055]
[25.29071045 199.13121033]
[39.95616150 195.58340454]
[55.04011536 195.95315552]
[59.26610565 181.56076050]
[63.49209213 167.16836548]
[67.71807861 152.77597046]
[71.94406891 138.38357544]
[61.38211060 127.73252106]
[46.95472336 131.83746338]
[32.52733994 135.94241333]
[18.09995461 140.04736328]
[3.67257023 144.15229797]
[-10.75481415 148.25724792]
[-25.18219948 152.36219788]
[-32.90888977 165.88757324]
[-47.59878540 169.84504700]
[-60.44555283 162.39547729]
[-74.87294006 166.50042725]
[-82.34345245 180.42762756]
[-97.49784851 184.91314697]
[-111.34528351 177.29580688]
[-115.67033386 162.09483337]
[-107.90702057 148.32870483]
[-92.66117096 144.16461182]
[-78.97788239 152.07304382]
[-64.55049896 147.96809387]
[-57.54964828 134.87139893]
[-42.97670364 130.50286865]
[-29.28714371 137.93481445]
[-14.85975933 133.82986450]
[-0.43237457 129.72491455]
[13.99501038 125.61997223]
[28.42239380 121.51502991]
[42.84978104 117.41007996]
[57.27716446 113.30513763]
[55.88465881 99.68569946]
[58.66908646 86.47938538]
[65.25017548 74.91843414]
[74.89924622 66.04465485]
[86.61818695 60.61583328]
[99.24199677 59.04175568]
[111.55432129 61.35531998]
[122.40465546 67.22042084]
[133.05570984 56.65846252]
[143.70677185 46.09650040]
[147.60791016 37.81340408]
[154.62658691 35.44845200]
[165.45356750 25.06690979]
[176.28056335 14.68536949]
[187.10754395 4.30382776]
[197.93452454 -6.07771349]
[208.76150513 -16.45925522]
[208.80262756 -33.94263840]
[221.22380066 -45.76197433]
[238.01339722 -44.96702957]
[248.66445923 -55.52898788]
[259.31552124 -66.09095001]
[263.66653442 -81.30210114]
[278.15185547 -84.76973724]
[288.80291748 -95.33169556]
[299.45397949 -105.89366150]
[291.73693848 -118.83710480]
[287.34472656 -133.24269104]
[286.52847290 -148.27175903]
[289.33135986 -163.05046082]
[295.58612061 -176.72055054]
[304.92526245 -188.48921204]
[316.80249023 -197.67503357]
[330.52478027 -203.74749756]
[345.29269409 -206.35760498]
[360.24703979 -205.35789490]
[374.51882935 -200.81082153]
[387.27978516 -192.98481750]
[397.93084717 -203.54678345]
[408.58190918 -214.10874939]
[393.65447998 -212.63493347]
[380.24569702 -219.35835266]
[372.49737549 -232.20216370]
[372.80294800 -247.19905090]
[381.06799316 -259.71661377]
[394.73953247 -265.88824463]
[409.59451294 -263.80761719]
[421.04440308 -254.11741638]
[425.55239868 -239.81083679]
[421.72506714 -225.30545044]
[433.84548950 -234.14260864]
[445.96591187 -242.97976685]
[446.07150269 -258.38415527]
[455.12164307 -270.62948608]
[469.47714233 -275.14434814]
[483.56976318 -270.39721680]
[495.69018555 -279.23434448]
[507.81063843 -288.07150269]
[519.93103027 -296.90866089]
[532.05145264 -305.74581909]
[544.17187500 -314.58297729]
[556.29229736 -323.42013550]
[568.41278076 -332.25726318]
[573.51702881 -339.85827637]
[580.81182861 -341.13906860]
[593.07904053 -349.77136230]
[605.34619141 -358.40365601]
[609.50073242 -373.89944458]
[624.26312256 -380.18045044]
[638.30895996 -372.42840576]
[640.86346436 -356.59002686]
[629.96704102 -344.81515503]
[613.97845459 -346.13647461]
[601.71130371 -337.50418091]
[589.44415283 -328.87188721]
[577.24987793 -320.13684082]
[565.12945557 -311.29968262]
[553.00903320 -302.46255493]
[540.88861084 -293.62539673]
[528.76818848 -284.78823853]
[516.64776611 -275.95108032]
[504.52734375 -267.11392212]
[492.40692139 -258.27676392]
[492.61682129 -243.40754700]
[483.92807007 -231.12057495]
[469.50170898 -226.24890137]
[454.80307007 -230.85934448]
[442.68264771 -222.02218628]
[430.56222534 -213.18502808]
[419.14385986 -203.45768738]
[408.49279785 -192.89572144]
[397.84176636 -182.33377075]
[405.56027222 -169.50752258]
[409.98733521 -155.19802856]
[410.86138916 -140.23580933]
[408.12731934 -125.49034882]
[401.93978882 -111.81955719]
[392.65454102 -100.01988983]
[380.80783081 -90.77993774]
[367.08569336 -84.64022064]
[352.28396606 -81.96159363]
[337.26229858 -82.90404510]
[322.89410400 -87.41710663]
[310.01593018 -95.24260712]
[299.36486816 -84.68064117]
[288.71383667 -74.11868286]
[285.12463379 -59.66299057]
[269.87747192 -55.43989563]
[259.22640991 -44.87793350]
[248.57536316 -34.31597137]
[250.32336426 -21.53761864]
[244.29663086 -9.91518593]
[232.49974060 -3.80188394]
[219.14305115 -5.63226986]
[208.31607056 4.74927139]
[197.48907471 15.13081264]
[186.66209412 25.51235390]
[175.83511353 35.89389420]
[165.00813293 46.27543640]
[154.26872253 56.74755859]
[143.61767578 67.30951691]
[132.96661377 77.87147522]
[139.89642334 92.77642822]
[140.26780701 109.55284882]
[133.74330139 125.38508606]
[121.16580200 137.50592041]
[104.45913696 143.67936707]
[86.33646393 142.60957336]
[82.11047363 157.00196838]
[77.88449097 171.39436340]
[73.65850067 185.78675842]
[69.43251038 200.17913818]
[82.32184601 208.02310181]
[92.74111176 218.93644714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 184]
[21 183]
[22 182]
[23 181]
[24 180]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[34 43]
[35 42]
[60 174]
[61 173]
[62 172]
[64 171]
[65 170]
[66 169]
[67 168]
[68 167]
[69 166]
[72 162]
[73 161]
[74 160]
[76 158]
[77 157]
[78 156]
[90 144]
[91 143]
[92 142]
[102 141]
[103 140]
[104 139]
[108 135]
[109 134]
[110 133]
[111 132]
[112 131]
[113 130]
[114 129]
[115 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
