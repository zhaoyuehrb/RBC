%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCGGAGCCGGGGGCGGAGAGAGGAGGCGCAGGAGGACCCGCGACACAGCUCGGGAUCCGCGCGCGCUGGGCCUCCGGCGCCGCUCGUGGGGUUCGGGAGGCCGGGACCCUGCCCGGGAG\
) } def
/len { sequence length } bind def

/coor [
[261.24380493 261.58370972]
[261.59649658 253.88264465]
[263.90783691 246.50489807]
[252.38964844 236.89601135]
[240.87142944 227.28710938]
[229.35322571 217.67820740]
[214.62374878 215.46652222]
[208.98332214 200.68490601]
[197.46511841 191.07600403]
[185.94691467 181.46711731]
[174.42869568 171.85821533]
[162.91049194 162.24931335]
[151.39228821 152.64042664]
[139.87408447 143.03152466]
[128.35588074 133.42262268]
[116.83766937 123.81372833]
[110.23059082 127.31182098]
[102.95130157 129.01535034]
[95.47808838 128.81237793]
[88.30200195 126.71623993]
[81.89453888 122.86466980]
[76.67673492 117.51073456]
[72.99141693 111.00623322]
[71.08074951 103.77854919]
[71.07025909 96.30258942]
[72.96064758 89.06957245]
[76.62770081 82.55475616]
[67.31855774 70.79296112]
[58.00941849 59.03116608]
[48.70027542 47.26936722]
[39.39113235 35.50757217]
[24.24376297 37.62993240]
[10.16081142 31.92315674]
[0.88682050 20.01268005]
[-1.16656566 5.15873861]
[4.45292521 -8.63571358]
[-4.85621691 -20.39751053]
[-14.16535950 -32.15930939]
[-23.62516403 -43.80027390]
[-33.23406219 -55.31848145]
[-42.84296036 -66.83668518]
[-52.74523926 -78.10366821]
[-62.93434143 -89.11194611]
[-78.73453522 -89.47173309]
[-89.59199524 -100.95611572]
[-89.06517792 -116.75162506]
[-77.46664429 -127.48705292]
[-61.67758942 -126.79327393]
[-51.06538391 -115.08188629]
[-51.92605972 -99.30104828]
[-41.73696136 -88.29277039]
[-36.97132111 -87.22180176]
[-32.87171173 -83.07185364]
[-31.32475281 -76.44558716]
[-21.71585464 -64.92737579]
[-12.10695648 -53.40917206]
[-5.32580853 -50.25115585]
[-2.40356207 -41.46844864]
[6.90558004 -29.70665359]
[16.21472168 -17.94485474]
[30.93109894 -20.24568939]
[44.91627502 -14.83543396]
[54.37819672 -3.07369804]
[56.69771194 11.94351292]
[51.15293121 26.19842911]
[60.46207428 37.96022797]
[69.77121735 49.72202301]
[79.08036041 61.48382187]
[88.38949585 73.24562073]
[111.24185181 73.08863831]
[127.19189453 89.45478821]
[126.44656372 112.29551697]
[137.96476746 121.90441895]
[149.48298645 131.51332092]
[161.00119019 141.12220764]
[172.51939392 150.73110962]
[184.03759766 160.34001160]
[195.55580139 169.94891357]
[207.07402039 179.55780029]
[218.59222412 189.16670227]
[234.14556885 192.06567383]
[238.96212769 206.16000366]
[250.48033142 215.76890564]
[261.99853516 225.37779236]
[273.51675415 234.98669434]
[296.56274414 230.13467407]
[315.78781128 243.30310059]
[319.51000977 266.05456543]
[332.75021362 273.10421753]
[345.99038696 280.15386963]
[359.23056030 287.20352173]
[372.47076416 294.25317383]
[385.71093750 301.30282593]
[398.95111084 308.35247803]
[412.19128418 315.40213013]
[425.43148804 322.45178223]
[441.24896240 322.10800171]
[448.84667969 334.91906738]
[462.08688354 341.96871948]
[478.90936279 344.07577515]
[481.54159546 360.82412720]
[466.17645264 367.98989868]
[455.03723145 355.20889282]
[441.79702759 348.15924072]
[426.92660522 349.00729370]
[418.38183594 335.69195557]
[405.14163208 328.64230347]
[391.90145874 321.59265137]
[378.66128540 314.54302979]
[365.42111206 307.49337769]
[352.18090820 300.44372559]
[338.94073486 293.39407349]
[325.70056152 286.34442139]
[312.46035767 279.29476929]
[306.73587036 284.15518188]
[299.94122314 287.40481567]
[292.52081299 288.81863403]
[284.96301270 288.29205322]
[277.76834106 285.84863281]
[271.41604614 281.63916016]
[266.33233643 275.93252563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 85]
[4 84]
[5 83]
[6 82]
[8 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[27 69]
[28 68]
[29 67]
[30 66]
[31 65]
[36 60]
[37 59]
[38 58]
[39 56]
[40 55]
[41 54]
[42 51]
[43 50]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
