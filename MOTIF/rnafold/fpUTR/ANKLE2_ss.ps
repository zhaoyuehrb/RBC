%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCAGGGCGCGGGCAGCCCGGCGCGGGGUCCUGGGACGGGCGCGGCGCGGGGCGCGGGCUUCUCGGCGGCUGCGGCCCGGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[47.66478348 358.82513428]
[41.44066238 372.94122314]
[28.56027794 381.43234253]
[13.13370991 381.58901978]
[0.08352129 373.36126709]
[-6.42601967 359.37451172]
[-4.31774235 344.09188843]
[5.73560953 332.39001465]
[20.52604866 328.00292969]
[24.61634064 313.57138062]
[28.70663452 299.13983154]
[23.05695534 288.29235840]
[26.50733757 276.13836670]
[37.70696640 269.46322632]
[42.29294205 255.18144226]
[38.81725693 240.69804382]
[50.40322876 229.92419434]
[54.98920441 215.64244080]
[59.57518387 201.36067200]
[64.16116333 187.07890320]
[68.74713898 172.79713440]
[73.33311462 158.51538086]
[66.31810760 145.42623901]
[70.76549530 130.87718201]
[84.54214478 123.60794067]
[89.12812042 109.32617950]
[86.36191559 95.62071228]
[96.59011841 86.08784485]
[101.17609406 71.80607605]
[105.76206970 57.52431488]
[110.34804535 43.24254990]
[114.68682861 28.88375473]
[118.77712250 14.45220947]
[122.86741638 0.02066414]
[126.95771027 -14.41088104]
[131.04800415 -28.84242630]
[135.13829041 -43.27397156]
[133.82444763 -50.11134338]
[135.98570251 -55.66208267]
[140.04084778 -58.54164124]
[145.11705017 -72.65660095]
[150.19325256 -86.77156830]
[147.58262634 -102.37590027]
[159.17048645 -111.73383331]
[164.24667358 -125.84880066]
[164.22807312 -135.20349121]
[169.74937439 -140.35821533]
[175.30973816 -154.28955078]
[180.87010193 -168.22090149]
[181.12594604 -185.17291260]
[197.48629761 -189.61984253]
[206.28845215 -175.12989807]
[194.80145264 -162.66053772]
[189.24107361 -148.72918701]
[183.68070984 -134.79785156]
[178.36164856 -120.77259827]
[173.28544617 -106.65763855]
[176.25915527 -92.06289673]
[164.30821228 -81.69537354]
[159.23200989 -67.58040619]
[154.15582275 -53.46544266]
[149.56983948 -39.18367767]
[145.47955322 -24.75213242]
[141.38925171 -10.32058811]
[137.29896545 4.11095762]
[133.20866394 18.54250336]
[129.11837769 32.97404861]
[130.35000610 40.42649460]
[124.62981415 47.82852554]
[120.04383850 62.11029053]
[115.45785522 76.39205933]
[110.87187958 90.67382050]
[113.63808441 104.37928772]
[103.40988159 113.91215515]
[98.82390594 128.19392395]
[105.79305267 142.12477112]
[100.93877411 156.54318237]
[87.61487579 163.10134888]
[83.02890015 177.38311768]
[78.44292450 191.66488647]
[73.85694885 205.94665527]
[69.27097321 220.22840881]
[64.68498993 234.51017761]
[67.83266449 250.01510620]
[56.57470703 259.76742554]
[51.98873138 274.04919434]
[56.36129379 291.83352661]
[43.13817978 303.23013306]
[39.04788589 317.66168213]
[34.95759201 332.09323120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 90]
[10 89]
[11 88]
[14 86]
[15 85]
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[22 78]
[25 75]
[26 74]
[28 72]
[29 71]
[30 70]
[31 69]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[40 61]
[41 60]
[42 59]
[44 57]
[45 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
