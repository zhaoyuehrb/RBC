%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGCUCUGAGGCUUGCAGUCGUUGCUGGCCAGCACUUGUGUAGAAAGAUCGCUCUUCACACCAGAUUUCACUUUUGAUCCUUCCAGCUCCAGGGUCUCGGGCUUCAGCUUUGUGCCGAGGCACCAACACUGCUGCGGUCCUCUCUCCGACUGAUCGCUGAUCUCACCGUUCCCGCUCCUGUCUCCUGGAACC\
) } def
/len { sequence length } bind def

/coor [
[116.11151123 131.15460205]
[106.44802094 134.47627258]
[96.23724365 134.87165833]
[86.34583282 132.30718994]
[77.68700409 144.55563354]
[69.02817535 156.80409241]
[68.78524780 161.17178345]
[67.30645752 164.85890198]
[64.96000671 167.55909729]
[62.17599487 169.11801147]
[59.39108276 169.54042053]
[49.95756912 181.20269775]
[40.52405930 192.86499023]
[31.09054565 204.52726746]
[28.42724609 220.12269592]
[14.40741539 225.15197754]
[4.97390318 236.81425476]
[-4.45960903 248.47653198]
[-4.21073723 264.51766968]
[-16.68809700 274.60205078]
[-32.32012558 270.99383545]
[-39.11526871 256.46093750]
[-31.86087418 242.15171814]
[-16.12189293 239.04302979]
[-6.68838024 227.38073730]
[2.74513173 215.71846008]
[4.73368406 200.95719910]
[19.42826271 195.09375000]
[28.86177444 183.43147278]
[38.29528809 171.76919556]
[47.72879791 160.10690308]
[56.77971649 148.14526367]
[65.43854523 135.89680481]
[74.09738159 123.64835358]
[69.47362518 122.08660126]
[64.89724731 119.76177979]
[60.48367691 116.66770935]
[56.34999847 112.81476593]
[41.35786819 112.32903290]
[26.36573219 111.84330750]
[11.37359905 111.35757446]
[-2.66988397 118.64394379]
[-15.13993263 110.49856567]
[-30.13206673 110.01284027]
[-45.12419891 109.52711487]
[-54.53994751 121.86093903]
[-69.41669464 126.27251434]
[-84.03403473 121.06548309]
[-92.77129364 108.24207306]
[-92.26882172 92.73313904]
[-82.71982574 80.50217438]
[-67.79609680 76.25225067]
[-53.23610687 81.61753845]
[-44.63847351 94.53498077]
[-29.64633751 95.02070618]
[-14.65420437 95.50643158]
[-1.68305886 88.18532562]
[11.85932827 96.36544037]
[26.85146141 96.85117340]
[41.84359360 97.33689880]
[56.83572769 97.82263184]
[59.78979492 90.92890167]
[50.80355453 78.91859436]
[65.69792938 77.14144897]
[68.65200043 70.24771881]
[57.95986938 59.72734451]
[47.26773453 49.20697021]
[36.57559967 38.68659592]
[21.29244232 41.37075043]
[7.36521196 34.52882767]
[0.14921586 20.79168701]
[2.41915059 5.44153929]
[13.30218029 -5.61917019]
[28.61355782 -8.13737392]
[42.46574402 -1.14476979]
[49.53229523 12.66984177]
[47.09597397 27.99446106]
[57.78810883 38.51483536]
[68.48023987 49.03520966]
[79.17237854 59.55558395]
[111.67837524 61.44683456]
[130.66218567 82.97000122]
[145.02944946 78.65933228]
[159.39669800 74.34866333]
[173.76396179 70.03800201]
[188.13122559 65.72733307]
[202.49848938 61.41666794]
[207.86599731 45.38370514]
[221.59297180 35.80002594]
[238.16148376 36.27669144]
[251.05372620 46.42821121]
[265.34930420 41.88545990]
[279.64486694 37.34270859]
[293.94046021 32.79995728]
[308.23602295 28.25720787]
[312.67877197 18.30926323]
[321.68209839 12.57348442]
[332.13613892 12.74428463]
[340.58435059 18.52325630]
[355.01953125 14.44580555]
[369.45471191 10.36835384]
[383.88989258 6.29090309]
[393.28210449 -15.34635735]
[415.33624268 -22.94642258]
[435.60577393 -11.93787670]
[449.39321899 -17.84601212]
[463.18066406 -23.75414848]
[476.96813965 -29.66228485]
[490.75558472 -35.57042313]
[489.87387085 -52.24380493]
[498.19161987 -68.26147461]
[514.61328125 -78.59536743]
[535.36035156 -79.27650452]
[544.98144531 -90.78450012]
[554.60260010 -102.29249573]
[564.22369385 -113.80049133]
[566.50775146 -130.03981018]
[581.81268311 -135.92968750]
[594.39416504 -125.41114044]
[591.30932617 -109.30474091]
[575.73168945 -104.17937469]
[566.11059570 -92.67137146]
[556.48944092 -81.16337585]
[546.86834717 -69.65538025]
[550.15368652 -62.91324234]
[563.63800049 -69.48395538]
[577.12225342 -76.05467224]
[590.60650635 -82.62538910]
[601.40039062 -93.04136658]
[614.64202881 -85.99448395]
[612.03192139 -71.22331238]
[597.17724609 -69.14111328]
[583.69299316 -62.57039642]
[570.20867920 -55.99968338]
[556.72442627 -49.42896652]
[560.00976562 -42.68682861]
[575.00189209 -43.17255783]
[589.99401855 -43.65828705]
[604.98620605 -44.14401245]
[619.97833252 -44.62974167]
[628.57592773 -57.54718399]
[643.13592529 -62.91247177]
[658.05969238 -58.66254425]
[667.60864258 -46.43158722]
[668.11114502 -30.92264748]
[659.37390137 -18.09923553]
[644.75653076 -12.89221001]
[629.87976074 -17.30378151]
[620.46405029 -29.63760948]
[605.47192383 -29.15188026]
[590.47979736 -28.66615295]
[575.48760986 -28.18042374]
[560.49548340 -27.69469643]
[546.47064209 -11.15034962]
[527.19677734 -4.87255239]
[508.87969971 -9.33804321]
[496.66372681 -21.78296661]
[482.87625122 -15.87483025]
[469.08880615 -9.96669388]
[455.30136108 -4.05855751]
[441.51388550 1.84957898]
[441.69631958 8.94829559]
[440.11361694 15.89329433]
[436.85342407 22.25119781]
[432.10836792 27.62251854]
[426.16476440 31.66674995]
[419.38528442 34.12394714]
[412.18695068 34.83141708]
[405.01531982 33.73443222]
[398.31710815 30.89032555]
[392.51217651 26.46556664]
[387.96734619 20.72608185]
[373.53216553 24.80353355]
[359.09698486 28.88098335]
[344.66180420 32.95843506]
[332.24145508 47.76732635]
[312.77877808 42.55278015]
[298.48318481 47.09553146]
[284.18762207 51.63828278]
[269.89205933 56.18103409]
[255.59648132 60.72378540]
[252.57919312 73.73718262]
[243.44982910 83.63728333]
[230.51673889 87.76295471]
[217.12898254 84.93347168]
[206.80914307 75.78392792]
[192.44189453 80.09459686]
[178.07463074 84.40525818]
[163.70736694 88.71592712]
[149.34010315 93.02659607]
[134.97285461 97.33725739]
[134.25611877 107.53052521]
[130.63179016 117.08461761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[11 31]
[12 30]
[13 29]
[14 28]
[16 26]
[17 25]
[18 24]
[38 61]
[39 60]
[40 59]
[41 58]
[43 56]
[44 55]
[45 54]
[65 80]
[66 79]
[67 78]
[68 77]
[82 191]
[83 190]
[84 189]
[85 188]
[86 187]
[87 186]
[91 181]
[92 180]
[93 179]
[94 178]
[95 177]
[99 175]
[100 174]
[101 173]
[102 172]
[105 161]
[106 160]
[107 159]
[108 158]
[109 157]
[113 124]
[114 123]
[115 122]
[116 121]
[136 153]
[137 152]
[138 151]
[139 150]
[140 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
