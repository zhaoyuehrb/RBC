%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUCAUGGGCCUCAUUAAGCUCUGCCUUCCUUCUGCUUUUUGGAGCCUGGCCUUUGGUUGGCCUUGAAUGAAGAGUGGGGCCCCAAAAGUACCACUGUCAGCACUCUCCAGCAUCAUCUGGCUGUCUGGCACCAUCAAAGAAUUGCAUUUCUGACCCAAGAAGAGCUUAUGGGUGGAUGGGGGUGGG\
) } def
/len { sequence length } bind def

/coor [
[1.40907681 130.04939270]
[-10.26979160 137.29496765]
[-23.41656303 141.25804138]
[-37.12862015 141.67341614]
[-50.46632004 138.51928711]
[-62.51740646 132.01818848]
[-72.45937347 122.62134552]
[-79.61564636 110.97737122]
[-83.50157166 97.88748932]
[-98.49952698 98.13549805]
[-113.49747467 98.38350677]
[-128.49542236 98.63151550]
[-143.49337769 98.87952423]
[-158.49131775 99.12753296]
[-173.48927307 99.37554932]
[-188.48722839 99.62355804]
[-203.48516846 99.87156677]
[-218.48312378 100.11957550]
[-206.67475891 109.36957550]
[-201.63047791 123.49597168]
[-204.90911865 138.13327026]
[-215.49748230 148.75807190]
[-230.12344360 152.08699036]
[-244.26708984 147.09126282]
[-253.55758667 135.31474304]
[-255.12390137 120.39674377]
[-248.48197937 106.94740295]
[-235.68440247 99.12300110]
[-250.55335999 97.14461517]
[-265.42233276 95.16622925]
[-280.29129028 93.18785095]
[-294.99139404 99.03742218]
[-306.58697510 89.68908691]
[-321.45596313 87.71070862]
[-336.32492065 85.73232269]
[-348.72262573 103.04280090]
[-375.90548706 103.43946838]
[-390.70092773 105.90838623]
[-405.49633789 108.37730408]
[-420.29174805 110.84622192]
[-432.59967041 121.68354797]
[-448.05041504 116.18756866]
[-450.74963379 100.01208496]
[-437.92056274 89.79704285]
[-422.76068115 96.05080414]
[-407.96524048 93.58188629]
[-393.16983032 91.11296082]
[-378.37442017 88.64404297]
[-377.69329834 81.17503357]
[-376.33105469 66.23702240]
[-375.64996338 58.76801300]
[-389.75473022 53.66361618]
[-403.85952759 48.55921936]
[-417.96432495 43.45481873]
[-431.40081787 51.45447922]
[-446.82748413 48.89474487]
[-456.96029663 36.98424911]
[-457.01486206 21.34675980]
[-446.96545410 9.36582470]
[-431.55703735 6.69847298]
[-418.06500244 14.60414696]
[-412.85992432 29.35002899]
[-398.75512695 34.45442581]
[-384.65032959 39.55882645]
[-370.54556274 44.66322327]
[-350.58615112 45.75133896]
[-337.41897583 56.78670883]
[-334.34652710 70.86336517]
[-319.47756958 72.84174347]
[-304.60861206 74.82012939]
[-290.97201538 68.82904816]
[-278.31289673 78.31888580]
[-263.44393921 80.29727173]
[-248.57498169 82.27565765]
[-233.70602417 84.25403595]
[-218.73112488 85.12162018]
[-203.73318481 84.87361145]
[-188.73522949 84.62560272]
[-173.73727417 84.37759399]
[-158.73933411 84.12958527]
[-143.74137878 83.88157654]
[-128.74343872 83.63356781]
[-113.74548340 83.38555908]
[-98.74753571 83.13755035]
[-83.74958038 82.88954163]
[-79.23371124 67.23976135]
[-70.10148621 53.72984695]
[-57.23351288 43.68304443]
[-41.87698746 38.08767700]
[-25.52479172 37.49991608]
[-9.77037048 41.98852158]
[3.84753132 51.12702942]
[13.99516964 64.03423309]
[19.67442131 79.45915222]
[34.65597153 78.71540070]
[49.63751984 77.97164154]
[64.61907196 77.22788239]
[79.60061646 76.48413086]
[92.96571350 69.67427063]
[102.37335968 57.99111176]
[111.78100586 46.30795288]
[121.18865204 34.62479401]
[130.59629822 22.94163513]
[133.54879761 14.27808666]
[140.25735474 11.14476776]
[149.85688782 -0.38124853]
[147.09757996 -13.57560062]
[152.36968994 -25.76979065]
[163.53996277 -32.59496689]
[176.40774536 -31.74736404]
[186.19653320 -43.11308670]
[195.98532104 -54.47880936]
[205.77410889 -65.84453583]
[204.34947205 -81.58448029]
[214.53593445 -93.66799927]
[230.29006958 -94.92614746]
[242.26521301 -84.61249542]
[243.35673523 -68.84594727]
[232.91703796 -56.98051071]
[217.13983154 -56.05574799]
[207.35104370 -44.69002533]
[197.56225586 -33.32430267]
[187.77346802 -21.95857811]
[189.74351501 -5.26470757]
[178.82199097 7.95454597]
[161.38290405 9.21827984]
[151.78337097 20.74429703]
[142.27946472 32.34928131]
[132.87181091 44.03244019]
[123.46416473 55.71559906]
[114.05651855 67.39875793]
[104.64887238 79.08191681]
[115.04734802 88.43527985]
[116.51332855 100.68678284]
[129.58558655 108.04313660]
[142.65785217 115.39949036]
[155.73011780 122.75584412]
[168.80238342 130.11219788]
[180.38594055 119.35214233]
[194.70878601 112.70387268]
[210.36544800 110.80655670]
[225.82360840 113.83380890]
[239.57408142 121.47785950]
[250.27822876 132.98078918]
[256.89819336 147.20971680]
[258.79760742 162.76831055]
[255.80259705 178.13380432]
[268.99472046 185.27302551]
[284.81414795 185.03642273]
[292.32489014 197.89869690]
[305.51699829 205.03790283]
[318.70910645 212.17710876]
[331.90121460 219.31632996]
[345.09332275 226.45553589]
[360.16717529 221.70634460]
[374.14538574 229.08099365]
[378.73492432 244.20420837]
[371.21292114 258.10366821]
[356.04202271 262.53305054]
[342.22286987 254.86451721]
[337.95410156 239.64764404]
[324.76199341 232.50842285]
[311.56991577 225.36921692]
[298.37780762 218.23001099]
[285.18569946 211.09078979]
[270.30984497 211.83804321]
[261.85549927 198.46513367]
[248.66339111 191.32591248]
[238.57600403 201.40977478]
[226.04029846 208.24720764]
[212.06961060 211.27525330]
[197.79614258 210.23933411]
[184.37925720 205.21458435]
[172.91125488 196.60049438]
[164.32849121 185.08915710]
[159.33491516 171.60966492]
[158.34429932 157.25315857]
[161.44602966 143.18446350]
[148.37376404 135.82810974]
[135.30149841 128.47175598]
[122.22924042 121.11540222]
[109.15697479 113.75904846]
[87.82332611 114.55657959]
[80.34437561 91.46567535]
[65.36282349 92.20943451]
[50.38127518 92.95319366]
[35.39972687 93.69694519]
[20.41817665 94.44070435]
[17.30285645 107.86618805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[28 75]
[29 74]
[30 73]
[31 72]
[33 70]
[34 69]
[35 68]
[37 48]
[38 47]
[39 46]
[40 45]
[51 65]
[52 64]
[53 63]
[54 62]
[94 188]
[95 187]
[96 186]
[97 185]
[98 184]
[99 132]
[100 131]
[101 130]
[102 129]
[103 128]
[105 127]
[106 126]
[110 123]
[111 122]
[112 121]
[113 120]
[134 182]
[135 181]
[136 180]
[137 179]
[138 178]
[147 168]
[148 167]
[150 165]
[151 164]
[152 163]
[153 162]
[154 161]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
