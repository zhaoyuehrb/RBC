%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCCCUUUAUGUUCACAUCUGGAGGCCACACCCUACCUUCUAAGUCACCAGGCCAUCAAGUCCAGACAAAGGGAUCGAAAGAGUGAGACAGUGCCAGCCACCUCCCACCCAAGCCACUAGCAAGACUCCACA\
) } def
/len { sequence length } bind def

/coor [
[10.47578239 107.34313965]
[-2.94265223 93.14521027]
[-7.42321301 74.20978546]
[-22.04713249 70.87197113]
[-36.67105103 67.53415680]
[-51.29496765 64.19634247]
[-65.91888428 60.85852814]
[-80.54280853 57.52071381]
[-72.52922821 70.20072174]
[-72.25291443 85.19817352]
[-79.79397583 98.16476440]
[-92.96598053 105.34099579]
[-107.94988251 104.64621735]
[-120.40129852 96.28186798]
[-126.71009827 82.67308807]
[-125.04714203 67.76555634]
[-115.89456940 55.88151169]
[-101.90849304 50.46681595]
[-115.64509583 44.44138718]
[-129.38169861 38.41595459]
[-143.11828613 32.39052200]
[-156.85488892 26.36509132]
[-170.59149170 20.33966064]
[-184.72024536 15.30195332]
[-199.17021179 11.27725697]
[-213.62019348 7.25256062]
[-228.07017517 3.22786450]
[-235.59446716 16.29827690]
[-246.13345337 27.08626747]
[-259.02462769 34.91368866]
[-273.45764160 39.28850937]
[-288.52520752 39.93571472]
[-303.28021240 36.81463242]
[-316.79507446 30.12144661]
[-328.22030640 20.27690315]
[-336.83767700 7.89983416]
[-342.10549927 -6.23172522]
[-343.69259644 -21.22945404]
[-341.49926758 -36.15058136]
[-335.66333008 -50.05715561]
[-326.55166626 -62.07499313]
[-314.73706055 -71.44864655]
[-300.96212769 -77.58888245]
[-286.09283447 -80.10971069]
[-271.06384277 -78.85267639]
[-256.81988525 -73.89680481]
[-244.25636292 -65.55361176]
[-234.16302490 -54.34756470]
[-227.17436218 -40.98308563]
[-223.72966003 -26.30027771]
[-224.04547119 -11.22211170]
[-209.59548950 -7.19741583]
[-195.14552307 -3.17271972]
[-180.69554138 0.85197651]
[-186.52653503 -12.96828365]
[-181.07981873 -26.94445229]
[-167.43487549 -33.17466354]
[-153.30630493 -28.13646889]
[-146.68212891 -14.67837238]
[-151.30755615 -0.40933251]
[-164.56605530 6.60306025]
[-150.82946777 12.62849140]
[-137.09286499 18.65392303]
[-123.35626221 24.67935371]
[-109.61965942 30.70478630]
[-95.88306427 36.73021698]
[-85.81934357 35.37672043]
[-77.20499420 42.89679337]
[-62.58107376 46.23460770]
[-47.95715332 49.57242203]
[-33.33323669 52.91023636]
[-18.70931816 56.24805069]
[-4.08539915 59.58586502]
[1.60826218 50.54956436]
[9.63609600 43.47285080]
[19.35367775 38.93975830]
[29.97641563 37.32948685]
[40.64290619 38.78471756]
[50.48477173 43.19905090]
[58.69737625 50.22470856]
[64.60558319 59.29987335]
[67.71926880 69.69363403]
[67.77394867 80.56482697]
[81.90269470 85.60253143]
[96.03144073 90.64024353]
[104.16160583 90.16925049]
[110.43200684 95.96738434]
[124.43782806 101.33739471]
[138.44427490 91.93667603]
[155.13024902 92.69380951]
[167.97061157 103.11569977]
[172.06117249 118.96841431]
[186.18992615 124.00611877]
[200.31866455 129.04382324]
[215.91583252 126.39068604]
[225.30531311 137.95298767]
[239.43405151 142.99070740]
[250.24792480 134.35708618]
[263.81207275 132.23568726]
[276.54269409 137.07809448]
[285.13000488 147.51023865]
[287.39874268 160.72019958]
[301.40457153 166.09019470]
[314.34106445 157.52128601]
[329.84213257 158.22639465]
[341.94723511 167.93443298]
[346.00177002 182.91242981]
[340.44662476 197.40104675]
[327.41793823 205.82913208]
[311.92544556 204.95590210]
[299.92636108 195.11712646]
[296.03454590 180.09602356]
[282.02874756 174.72601318]
[268.60610962 184.10014343]
[252.07450867 183.65657043]
[238.91287231 173.37229919]
[234.39634705 157.11944580]
[220.26759338 152.08174133]
[205.68103027 155.09521484]
[195.28096008 143.17257690]
[181.15222168 138.13487244]
[167.02346802 133.09715271]
[156.70396423 141.65039062]
[143.39482117 143.98246765]
[130.57763672 139.37406921]
[121.65959930 128.93592834]
[119.06782532 115.34321594]
[105.06200409 109.97320557]
[90.99373627 104.76898956]
[76.86499023 99.73128510]
[62.73624039 94.69357300]
[48.42022324 108.32402802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[18 66]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[24 54]
[25 53]
[26 52]
[27 51]
[83 131]
[84 130]
[85 129]
[87 128]
[88 127]
[92 122]
[93 121]
[94 120]
[96 118]
[97 117]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
