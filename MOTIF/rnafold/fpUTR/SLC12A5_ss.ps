%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGCGAGUGUGUGUGCGCCGGGCGGGCGGGCACUGCAGCUUCUUCCUCCGUGGAGCGGAGAGCGAGACAGAGCUACAGCGAACGAGAGAGCGGCGAAGGCGGGUAGAGGGGCGCGGGCGAGGCGGCGCAGCCAUCCCCGGACCAGGGGCCGCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[194.05831909 296.45455933]
[183.05323792 286.26199341]
[168.45806885 283.29040527]
[163.59078979 268.23651123]
[152.58570862 258.04394531]
[141.58062744 247.85139465]
[142.20654297 262.83831787]
[129.03724670 270.01953125]
[116.77770233 261.37643433]
[119.11777496 246.55906677]
[107.01638794 255.42227173]
[94.91500092 264.28549194]
[82.89906311 273.26419067]
[70.96967316 282.35757446]
[59.04027557 291.45095825]
[47.11088181 300.54434204]
[40.82625198 315.06375122]
[26.01379585 316.62594604]
[14.08440304 325.71932983]
[2.15501022 334.81271362]
[-9.77438259 343.90609741]
[-13.33552456 359.54891968]
[-27.84791565 366.38775635]
[-42.17889404 359.17648315]
[-45.33495712 343.44692993]
[-34.89504623 331.26547241]
[-18.86776352 331.97668457]
[-6.93837070 322.88330078]
[4.99102211 313.78991699]
[16.92041588 304.69656372]
[22.35177612 290.82754517]
[38.01750183 288.61492920]
[49.94689560 279.52154541]
[61.87628937 270.42816162]
[73.80567932 261.33480835]
[77.23489380 254.74816895]
[86.05179596 252.18409729]
[98.15318298 243.32089233]
[110.25457001 234.45768738]
[115.72831726 220.49208069]
[112.87245178 205.76644897]
[110.01658630 191.04083252]
[107.16072083 176.31520081]
[104.30484772 161.58958435]
[101.44898224 146.86395264]
[98.59311676 132.13833618]
[58.18793869 126.26039124]
[38.81799698 73.73812103]
[25.92445374 66.07284546]
[13.03090954 58.40756226]
[0.13736533 50.74228287]
[-12.75617886 43.07699966]
[-25.64972305 35.41172028]
[-42.35435104 32.51487732]
[-44.19502258 15.66114616]
[-28.50948715 9.22683430]
[-17.98444176 22.51817703]
[-5.09089851 30.18345642]
[7.80264568 37.84873581]
[20.69618988 45.51401901]
[33.58973312 53.17929840]
[46.48327637 60.84457779]
[57.39023209 50.54708481]
[50.47816467 37.23455811]
[43.56609726 23.92203140]
[28.20244598 21.74538231]
[17.07583237 10.92974186]
[14.46466732 -4.36605597]
[21.37299728 -18.26046562]
[35.14442825 -25.41080093]
[50.48356628 -23.06761360]
[61.49219513 -12.13190746]
[63.93727493 3.19131660]
[56.87862396 17.00996590]
[63.79069138 30.32249260]
[70.70275879 43.63501740]
[78.11486053 42.49014664]
[83.54396057 28.50712776]
[92.93906403 40.20040894]
[100.35116577 39.05553818]
[102.92444611 24.27791214]
[91.08657837 14.49218178]
[85.74259949 0.09296573]
[88.32999420 -15.04641724]
[98.15278625 -26.85354996]
[112.56867981 -32.15237427]
[127.69988251 -29.51753044]
[139.47616577 -19.65777969]
[144.72978210 -5.22534513]
[142.04751587 9.89752007]
[132.15089417 21.64284134]
[117.70207214 26.85118866]
[115.12879944 41.62881470]
[128.93199158 47.50178909]
[142.73394775 53.37425613]
[151.59715271 41.27286911]
[152.83494568 24.92049980]
[167.73060608 18.06110573]
[180.96076965 27.75104141]
[178.91537476 44.02213287]
[163.69854736 50.13607407]
[154.83534241 62.23746109]
[157.90931702 81.32841492]
[155.09799194 98.85723877]
[147.58020020 113.19017029]
[136.93675232 123.23962402]
[124.93746948 128.54571533]
[113.31874084 129.28245544]
[116.17460632 144.00808716]
[119.03047943 158.73371887]
[121.88634491 173.45933533]
[124.74221039 188.18496704]
[127.59807587 202.91058350]
[130.45394897 217.63621521]
[151.77319336 236.84631348]
[162.77827454 247.03886414]
[173.78335571 257.23141479]
[189.16567993 260.93203735]
[193.24578857 275.25692749]
[204.25086975 285.44949341]
[223.10186768 283.97439575]
[236.84271240 296.49621582]
[237.11070251 314.76660156]
[248.49810791 324.53015137]
[259.88552856 334.29370117]
[271.27291870 344.05725098]
[282.66033936 353.82080078]
[294.04772949 363.58435059]
[305.43515015 373.34790039]
[316.82254028 383.11148071]
[332.33532715 386.22018433]
[336.96115112 400.37826538]
[348.34854126 410.14181519]
[359.73596191 419.90536499]
[364.13607788 420.55966187]
[367.71908569 422.41622925]
[370.20333862 425.06167603]
[371.47393799 428.03326416]
[371.58407593 430.87875366]
[382.19067383 441.48535156]
[397.99298096 441.23471069]
[409.28582764 452.29125977]
[409.36938477 468.09530640]
[398.19406128 479.27062988]
[382.38998413 479.18710327]
[371.33343506 467.89425659]
[371.58407593 452.09194946]
[360.97747803 441.48535156]
[349.97241211 431.29278564]
[338.58499146 421.52923584]
[327.19760132 411.76568604]
[312.49929810 409.35531616]
[307.05899048 394.49887085]
[295.67160034 384.73532104]
[284.28417969 374.97177124]
[272.89678955 365.20822144]
[261.50936890 355.44467163]
[250.12196350 345.68112183]
[238.73455811 335.91757202]
[227.34715271 326.15399170]
[216.37713623 329.48086548]
[205.05084229 327.05322266]
[196.22680664 319.36471558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[4 117]
[5 116]
[6 115]
[10 39]
[11 38]
[12 37]
[13 35]
[14 34]
[15 33]
[16 32]
[18 30]
[19 29]
[20 28]
[21 27]
[40 114]
[41 113]
[42 112]
[43 111]
[44 110]
[45 109]
[46 108]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
[63 76]
[64 75]
[65 74]
[80 93]
[81 92]
[95 102]
[96 101]
[123 160]
[124 159]
[125 158]
[126 157]
[127 156]
[128 155]
[129 154]
[130 153]
[132 151]
[133 150]
[134 149]
[139 148]
[140 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
