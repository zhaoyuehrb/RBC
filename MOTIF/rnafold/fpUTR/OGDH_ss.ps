%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAAGAGGGGAGGGCAUUCUUCUCCAGGGGAGGGCUACGUGUUGACGCCAUACGCCGGGGCGGGGCCGAGAGUUUGGAGCCCCGGAGUGGGGUGUCGGCGCCUCAUUCGGGUGGAGCUGAGCCGGAGACAGGCAGUUGUGAAAAACUUCAGGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[83.36129761 211.25677490]
[68.37939453 210.52012634]
[59.82217407 198.20046997]
[64.36106873 183.90502930]
[66.86314392 169.11518860]
[69.36521912 154.32533264]
[71.86729431 139.53549194]
[64.37633514 139.16748047]
[55.08992386 150.94723511]
[45.80351257 162.72698975]
[36.51710510 174.50674438]
[27.23069572 186.28649902]
[17.94428635 198.06625366]
[8.65787697 209.84600830]
[9.10804272 225.88273621]
[-3.24177718 236.12292480]
[-18.91785812 232.71118164]
[-25.89485168 218.26469421]
[-18.82060623 203.86557007]
[-3.12187719 200.55960083]
[6.16453218 188.77984619]
[15.45094109 177.00009155]
[24.73735046 165.22033691]
[34.02375793 153.44058228]
[43.31016922 141.66082764]
[52.59657669 129.88107300]
[38.79947281 135.76663208]
[23.85972404 134.42353821]
[10.12533283 128.39306641]
[-0.97384560 118.30306244]
[-8.28230190 105.20395660]
[-11.03917027 90.45948029]
[-8.95743847 75.60463715]
[-2.25383091 62.18593216]
[8.37375546 51.60035324]
[21.81890678 44.94994736]
[36.68187714 42.92706680]
[51.41532516 45.74231339]
[64.48537445 53.10259628]
[74.53134155 64.24165344]
[80.50747681 78.00026703]
[91.81056213 87.86131287]
[86.61880493 73.78844452]
[81.42704773 59.71557236]
[76.23529053 45.64270020]
[71.04354095 31.56983185]
[65.85178375 17.49696159]
[60.66002655 3.42409158]
[55.46826935 -10.64877892]
[50.27651596 -24.72164917]
[38.24097061 -34.99084091]
[41.09491348 -49.60946655]
[35.90315628 -63.68233871]
[30.71140099 -77.75520325]
[18.67585945 -88.02439880]
[21.52980042 -102.64302826]
[16.33804512 -116.71589661]
[11.14628887 -130.78877258]
[5.95453358 -144.86163330]
[0.76277751 -158.93450928]
[-4.42897844 -173.00737000]
[-9.62073421 -187.08024597]
[-18.72065926 -189.88151550]
[-25.39064789 -196.48123169]
[-28.20396042 -205.28791809]
[-26.64260674 -214.26013184]
[-21.18754578 -221.37942505]
[-25.54181480 -235.73352051]
[-29.89608574 -250.08763123]
[-34.25035477 -264.44174194]
[-46.58287048 -275.25103760]
[-43.12302780 -291.28106689]
[-27.43002319 -296.04147339]
[-15.64747047 -284.63519287]
[-19.89624977 -268.79602051]
[-15.54198074 -254.44189453]
[-11.18770981 -240.08779907]
[-6.83343983 -225.73368835]
[9.43535995 -213.07901001]
[4.45213604 -192.27200317]
[9.64389133 -178.19912720]
[14.83564758 -164.12626648]
[20.02740288 -150.05339050]
[25.21916008 -135.98051453]
[30.41091537 -121.90765381]
[35.60267258 -107.83477783]
[47.26686478 -98.57217407]
[44.78427124 -82.94696045]
[49.97602844 -68.87409210]
[55.16778183 -54.80122375]
[66.83197784 -45.53861618]
[64.34938812 -29.91340446]
[69.54113770 -15.84053421]
[74.73289490 -1.76766431]
[79.92465210 12.30520535]
[85.11640930 26.37807655]
[90.30816650 40.45094681]
[95.49991608 54.52381516]
[100.69167328 68.59668732]
[105.88343048 82.66955566]
[118.59547424 90.63221741]
[133.52323914 89.16195679]
[148.45101929 87.69170380]
[163.37878418 86.22144318]
[173.39045715 74.28811646]
[188.55027771 73.00971985]
[199.86518860 82.62784576]
[214.79295349 81.15759277]
[229.72073364 79.68733215]
[242.69606018 70.63463593]
[256.12042236 77.08718872]
[271.04821777 75.61693573]
[285.97598267 74.14667511]
[293.70581055 60.69197083]
[307.88159180 54.38111877]
[323.05242920 57.64076996]
[333.38482666 69.21752167]
[334.90579224 84.65988159]
[327.03042603 98.02993774]
[312.78701782 104.18663788]
[297.65243530 100.76260376]
[287.44622803 89.07444763]
[272.51846313 90.54470062]
[257.59069824 92.01496124]
[245.68309021 100.96249390]
[231.19097900 94.61510468]
[216.26321411 96.08536530]
[201.33544922 97.55561829]
[192.11434937 109.19637299]
[176.99641418 110.90007019]
[164.84904480 101.14921570]
[149.92127991 102.61947632]
[134.99349976 104.08972931]
[120.06573486 105.55998993]
[116.79266357 112.30809784]
[106.97345734 132.55242920]
[115.06053162 145.18569946]
[123.14760590 157.81895447]
[137.10429382 165.27021790]
[137.44956970 180.16082764]
[145.53663635 192.79408264]
[153.62371826 205.42733765]
[161.71078491 218.06059265]
[176.51435852 225.11653137]
[177.53561401 241.48385620]
[163.72398376 250.32525635]
[149.28767395 242.54547119]
[149.07752991 226.14767456]
[140.99046326 213.51441956]
[132.90338135 200.88114929]
[124.81630707 188.24789429]
[111.43805695 181.70024109]
[110.51434326 165.90602112]
[102.42726898 153.27276611]
[94.34019470 140.63951111]
[86.84922791 140.27149963]
[87.88960266 155.23538208]
[88.92996979 170.19926453]
[89.97033691 185.16313171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[42 100]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[49 93]
[50 92]
[52 90]
[53 89]
[54 88]
[56 86]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[67 78]
[68 77]
[69 76]
[70 75]
[101 134]
[102 133]
[103 132]
[104 131]
[107 128]
[108 127]
[109 126]
[111 124]
[112 123]
[113 122]
[136 155]
[137 154]
[138 153]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
