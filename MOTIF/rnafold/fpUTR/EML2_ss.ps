%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCCGGUUGUGGGCGGGACCAGACGGUACCUAGGGGGAUCCGGGCGCAGCCAAUCCUGGCCCUAGGAUUGUGUUGGGGGGCUUGGCAGGCGGUGUCCCGACCCCCCUUUCUGGGCAUCCUGGGGAUGACCCCAGCGCCGGGCCCGGCGCCGGCCGCCUGAUGCCAGGCGAGCUGAGCUGGGG\
) } def
/len { sequence length } bind def

/coor [
[185.53453064 273.87704468]
[176.15383911 262.17224121]
[177.64166260 247.24620056]
[189.14828491 237.62342834]
[204.10232544 238.79974365]
[195.32659912 226.63478088]
[186.55085754 214.46980286]
[177.77513123 202.30484009]
[168.99938965 190.13987732]
[160.22366333 177.97489929]
[145.52514648 175.85610962]
[136.45199585 163.64411926]
[138.77403259 148.24133301]
[129.99830627 136.07637024]
[121.22257233 123.91139221]
[104.21175385 131.57406616]
[85.89153290 128.42793274]
[72.51089478 115.62400055]
[60.96612549 125.20096588]
[49.42135620 134.77793884]
[37.95787811 144.45205688]
[26.57650566 154.22264099]
[15.19513416 163.99322510]
[10.27363300 179.63647461]
[-5.79110956 182.93132019]
[-16.47306252 170.48834229]
[-10.78354931 155.10778809]
[5.42454672 152.61186218]
[16.80591774 142.84127808]
[28.18729019 133.07067871]
[31.22119522 126.31337738]
[39.84438705 123.23316193]
[51.38915634 113.65619659]
[62.93392563 104.07923126]
[64.32537079 89.14390564]
[54.74840164 77.59913635]
[45.17143250 66.05436707]
[35.59446716 54.50959778]
[26.01749802 42.96483231]
[16.44052887 31.42006302]
[1.67458630 25.73873520]
[-0.49630278 11.00318241]
[-10.07327080 -0.54158658]
[-24.83921432 -6.22291422]
[-27.01010323 -20.95846748]
[-36.58707047 -32.50323486]
[-46.16403961 -44.04800415]
[-55.74100876 -55.59277344]
[-65.31797791 -67.13754272]
[-74.89494324 -78.68231201]
[-89.66088867 -84.36363983]
[-91.83177948 -99.09918976]
[-101.40874481 -110.64395905]
[-110.98571014 -122.18872833]
[-124.46447754 -121.88829803]
[-135.49040222 -129.30339050]
[-140.15672302 -141.53625488]
[-136.96662903 -154.03346252]
[-146.34724426 -165.73832703]
[-161.01513672 -171.66824341]
[-162.93684387 -186.43835449]
[-172.31745911 -198.14323425]
[-181.69807434 -209.84809875]
[-191.07868958 -221.55297852]
[-200.45930481 -233.25784302]
[-209.83992004 -244.96272278]
[-224.55892944 -241.05496216]
[-239.59381104 -243.47824097]
[-252.33967590 -251.81266785]
[-260.58822632 -264.61428833]
[-262.91036987 -279.66513062]
[-258.90371704 -294.35751343]
[-249.26252747 -306.14596558]
[-235.65715027 -312.98800659]
[-220.44480896 -313.69821167]
[-206.26112366 -308.15356445]
[-195.56352234 -297.31469727]
[-190.20541382 -283.05950928]
[-191.11512756 -267.85778809]
[-198.13505554 -254.34333801]
[-188.75444031 -242.63845825]
[-179.37380981 -230.93359375]
[-169.99319458 -219.22871399]
[-160.61257935 -207.52384949]
[-151.23196411 -195.81896973]
[-137.23504639 -190.72627258]
[-134.64237976 -175.11895752]
[-125.26176453 -163.41407776]
[-108.49112701 -162.29454041]
[-97.49457550 -149.13996887]
[-99.44094086 -131.76570129]
[-89.86397552 -120.22092438]
[-80.28701019 -108.67615509]
[-66.20606995 -103.82058716]
[-63.35017395 -88.25927734]
[-53.77320862 -76.71450806]
[-44.19623947 -65.16973877]
[-34.61927032 -53.62497330]
[-25.04230309 -42.08020401]
[-15.46533489 -30.53543472]
[-1.38440025 -25.67986679]
[1.47149765 -10.11855507]
[11.04846573 1.42621386]
[25.12940025 6.28178263]
[27.98529816 21.84309387]
[37.56226730 33.38786316]
[47.13923645 44.93263245]
[56.71620178 56.47740173]
[66.29316711 68.02217102]
[75.87014008 79.56694031]
[84.00508118 72.65703583]
[93.99291229 68.83733368]
[104.70228577 68.55458832]
[114.91542053 71.85411072]
[123.46660614 78.37313080]
[129.37521362 87.38060760]
[142.49041748 80.10107422]
[155.54367065 72.71104431]
[168.53404236 65.21104431]
[181.52442932 57.71104813]
[194.51481628 50.21104813]
[207.50518799 42.71104813]
[218.19911194 29.55519676]
[233.80119324 36.18929291]
[231.74545288 53.01814651]
[215.00518799 55.70142746]
[202.01481628 63.20142746]
[189.02442932 70.70143127]
[176.03404236 78.20143127]
[163.04367065 85.70143127]
[158.81372070 91.78199768]
[149.76994324 93.21627808]
[136.65473938 100.49580383]
[133.38754272 115.13565826]
[142.16326904 127.30062866]
[150.93901062 139.46559143]
[166.28788757 142.12069702]
[175.01443481 154.58271790]
[172.38862610 169.19917297]
[181.16436768 181.36413574]
[189.94009399 193.52909851]
[198.71583557 205.69407654]
[207.49156189 217.85903931]
[216.26730347 230.02401733]
[225.64791870 241.72888184]
[235.60932922 252.94361877]
[245.57075500 264.15835571]
[255.53218079 275.37307739]
[265.49359131 286.58779907]
[275.45501709 297.80252075]
[288.27478027 299.34686279]
[296.34069824 308.91113281]
[295.73828125 321.00637817]
[305.50888062 332.38775635]
[315.27944946 343.76913452]
[325.05004883 355.15048218]
[334.91641235 366.44894409]
[344.87780762 377.66366577]
[354.83923340 388.87841797]
[364.80065918 400.09313965]
[374.76208496 411.30786133]
[384.72351074 422.52258301]
[400.44763184 427.17916870]
[404.01333618 443.18597412]
[391.75253296 454.07656860]
[376.27807617 448.64764404]
[373.50875854 432.48400879]
[363.54736328 421.26928711]
[353.58593750 410.05456543]
[343.62451172 398.83981323]
[333.66308594 387.62509155]
[323.70166016 376.41036987]
[316.89410400 373.49102783]
[313.66867065 364.92108154]
[303.89810181 353.53970337]
[294.12750244 342.15832520]
[284.35690308 330.77697754]
[267.51641846 325.87405396]
[264.24029541 307.76394653]
[254.27886963 296.54922485]
[244.31744385 285.33450317]
[234.35603333 274.11975098]
[224.39460754 262.90502930]
[214.43318176 251.69030762]
[212.32420349 266.54129028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 144]
[6 143]
[7 142]
[8 141]
[9 140]
[10 139]
[13 136]
[14 135]
[15 134]
[18 34]
[19 33]
[20 32]
[21 30]
[22 29]
[23 28]
[35 110]
[36 109]
[37 108]
[38 107]
[39 106]
[40 105]
[42 103]
[43 102]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
[52 93]
[53 92]
[54 91]
[58 88]
[59 87]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[116 133]
[117 132]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
[145 184]
[146 183]
[147 182]
[148 181]
[149 180]
[150 179]
[153 177]
[154 176]
[155 175]
[156 174]
[157 172]
[158 171]
[159 170]
[160 169]
[161 168]
[162 167]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
