%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAAGCGUUGGCGGAGCGUCGGUUGUAGCACUCUGCGCGCCCGCUCUUCUGCUGCUGUUUGUCUACUUCCUCCUGCUUCCCCGCCGCCGCCGCCGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[115.71263123 436.18212891]
[107.99532318 423.15441895]
[104.92869568 408.32623291]
[106.84539795 393.30609131]
[113.53752899 379.72323608]
[124.27915955 369.05102539]
[137.90513611 362.44711304]
[136.07962036 347.55859375]
[134.25408936 332.67010498]
[125.02538300 320.97906494]
[131.02568054 306.33984375]
[129.20016479 291.45135498]
[127.37464142 276.56283569]
[125.54912567 261.67434692]
[123.72360992 246.78584290]
[121.89808655 231.89733887]
[119.39355469 217.10791016]
[116.21523285 202.44848633]
[113.03691101 187.78907776]
[109.85859680 173.12966919]
[95.38220978 164.72283936]
[91.30489349 148.14091492]
[100.58948517 133.41166687]
[96.96559143 118.85599518]
[84.60259247 111.29938507]
[81.10202026 97.23907471]
[88.47874451 84.76789856]
[84.85485077 70.21223450]
[81.23094940 55.65657043]
[77.60705566 41.10090256]
[72.41427612 33.37425232]
[74.10180664 26.04609108]
[70.92349243 11.38668060]
[58.75120544 5.38636255]
[52.39871979 -6.38405037]
[54.01590729 -19.46404648]
[62.77983093 -29.04406357]
[60.05004883 -43.79358292]
[57.32026291 -58.54309845]
[52.60818481 -66.57195282]
[54.73933792 -73.78360748]
[52.46062851 -88.60951233]
[42.47055435 -96.94279480]
[40.95727158 -109.45792389]
[48.19584274 -119.28241730]
[46.37032318 -134.17092896]
[33.76525116 -143.70442200]
[31.67610741 -159.37002563]
[41.34234619 -171.87359619]
[57.02915955 -173.79699707]
[69.42984009 -163.99909973]
[71.18727875 -148.29283142]
[61.25882721 -135.99644470]
[63.08434296 -121.10794067]
[74.39712524 -107.78793335]
[67.28652954 -90.88822174]
[69.56524658 -76.06231689]
[72.06977844 -61.27288437]
[74.79956818 -46.52336502]
[77.52935028 -31.77384758]
[91.74262238 -22.92944908]
[95.31236267 -6.23089027]
[85.58290100 8.20836258]
[88.76121521 22.86777306]
[92.16271973 37.47700882]
[95.78661346 52.03267288]
[99.41051483 66.58834076]
[103.03440857 81.14400482]
[115.39740753 88.70061493]
[118.89797974 102.76092529]
[111.52125549 115.23210144]
[115.14514923 129.78776550]
[127.49476624 135.41407776]
[134.20324707 146.98529053]
[132.98570251 160.10852051]
[124.51800537 169.95135498]
[127.69632721 184.61076355]
[130.87464905 199.27017212]
[134.05296326 213.92958069]
[137.81065369 218.03736877]
[139.33848572 222.72140503]
[138.81022644 226.98756409]
[136.78659058 230.07182312]
[138.61210632 244.96031189]
[140.43762207 259.84881592]
[142.26313782 274.73733521]
[144.08865356 289.62582397]
[145.91418457 304.51431274]
[155.27346802 317.27029419]
[149.14259338 330.84457397]
[150.96810913 345.73309326]
[152.79364014 360.62158203]
[167.61143494 363.73794556]
[180.61320496 371.49890137]
[190.38861084 383.06265259]
[195.87730408 397.17480469]
[196.48390198 412.30459595]
[192.14260864 426.81085205]
[183.32432556 439.12008667]
[170.98561096 447.89700317]
[156.46485901 452.18963623]
[141.33718872 451.53228760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 79]
[18 78]
[19 77]
[20 76]
[23 72]
[24 71]
[27 68]
[28 67]
[29 66]
[30 65]
[32 64]
[33 63]
[37 60]
[38 59]
[39 58]
[41 57]
[42 56]
[45 54]
[46 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
