%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGACCCGGACCUCGGGACCGGGGGGCAGGGCGGGUGUCUGCAGCGUCCUCGGGAGGUCUCAGGCCCCUUGGGCAGACGCUGCGCGUGCCCAGAGGGAGGG\
) } def
/len { sequence length } bind def

/coor [
[47.07670212 208.90187073]
[45.15220261 194.02583313]
[49.24621201 179.59269714]
[36.90145493 188.11367798]
[33.92788696 203.40405273]
[21.28716087 211.86967468]
[6.72844839 208.94059753]
[-5.61630964 217.46156311]
[-17.96106720 225.98254395]
[-30.30582619 234.50350952]
[-42.65058517 243.02447510]
[-49.61261368 257.23153687]
[-64.48223877 258.09378052]
[-76.82700348 266.61474609]
[-86.42763519 280.58843994]
[-102.51295471 275.23132324]
[-101.81803131 258.29162598]
[-85.34796906 254.27000427]
[-73.00321198 245.74902344]
[-66.92416382 232.15144348]
[-51.17155457 230.67971802]
[-38.82679749 222.15875244]
[-26.48203850 213.63778687]
[-14.13728142 205.11680603]
[-1.79252303 196.59584045]
[0.63133544 181.94454956]
[13.02929115 173.12721252]
[28.38048553 175.76892090]
[40.72524261 167.24794006]
[44.07091522 159.31286621]
[52.81135941 155.16183472]
[61.33232880 142.81707764]
[69.85330200 130.47232056]
[78.37427521 118.12755585]
[86.89524078 105.78279877]
[88.21162415 91.86307526]
[100.76000214 85.69622803]
[109.28096771 73.35147095]
[109.45955658 68.62142944]
[111.06819916 64.65882111]
[113.65567017 61.83861160]
[116.69254303 60.33581924]
[119.64884949 60.11785126]
[129.59568787 48.89019012]
[139.54252625 37.66252899]
[149.48936462 26.43486786]
[159.43620300 15.20720768]
[169.38305664 3.97954631]
[179.32989502 -7.24811506]
[189.27673340 -18.47577667]
[198.87992859 -29.99873924]
[208.13070679 -41.80649185]
[217.38148499 -53.61424255]
[226.63227844 -65.42199707]
[235.88305664 -77.22975159]
[245.13383484 -89.03749847]
[247.55398560 -104.67250824]
[261.49380493 -109.91946411]
[270.74459839 -121.72721863]
[279.99539185 -133.53497314]
[289.24615479 -145.34272766]
[294.25488281 -161.53991699]
[311.20562744 -161.21078491]
[315.58178711 -144.83134460]
[301.05392456 -136.09193420]
[291.80313110 -124.28418732]
[282.55233765 -112.47643280]
[273.30157471 -100.66868591]
[271.54309082 -85.87824249]
[256.94158936 -79.78672028]
[247.69081116 -67.97896576]
[238.44001770 -56.17121506]
[229.18923950 -44.36346054]
[219.93846130 -32.55570984]
[210.68766785 -20.74795723]
[210.39700317 -15.82695198]
[206.89817810 -11.08152390]
[200.50439453 -8.52893639]
[190.55755615 2.69872499]
[180.61071777 13.92638588]
[170.66386414 25.15404701]
[160.71702576 36.38171005]
[150.77018738 47.60937119]
[140.82334900 58.83703232]
[130.87651062 70.06468964]
[121.62572479 81.87244415]
[113.10475922 94.21720123]
[111.78837585 108.13692474]
[99.23999786 114.30377197]
[90.71903229 126.64852905]
[82.19805908 138.99328613]
[73.67708588 151.33804321]
[65.15611267 163.68280029]
[79.58666229 159.58897400]
[94.46282959 161.51245117]
[107.37755585 169.14196777]
[116.24118042 181.24305725]
[119.61950684 195.85766602]
[116.96590424 210.62107849]
[108.70973206 223.14448547]
[96.18690491 231.40151978]
[81.42367554 234.05615234]
[66.80882263 230.67884827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 29]
[4 28]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[13 19]
[14 18]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[37 87]
[38 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[58 68]
[59 67]
[60 66]
[61 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
