%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUUACUUGGCUCGGAGCGGGCGAGGGGACGCGUGGGCGGAGCGGGGCUGGCCAGCCUCGGCCCCCAUGACCCGCUGUCCUGUGCCCUUUCCCAGCG\
) } def
/len { sequence length } bind def

/coor [
[66.41418457 335.96487427]
[58.98558807 349.29824829]
[46.50257874 358.08102417]
[31.44366646 360.56939697]
[16.79881287 356.26925659]
[5.47576237 346.03445435]
[-0.27728474 331.89709473]
[0.68194294 316.66415405]
[8.16299057 303.36013794]
[20.68049049 294.62658691]
[35.74908447 292.19754028]
[39.97507095 277.80514526]
[44.20106125 263.41275024]
[40.36286163 249.02116394]
[51.67470551 237.95985413]
[55.90069199 223.56745911]
[60.12668228 209.17506409]
[64.35266876 194.78266907]
[60.51447296 180.39108276]
[71.82631683 169.32977295]
[76.05229950 154.93737793]
[80.27828979 140.54498291]
[84.50428009 126.15258789]
[88.73027039 111.76019287]
[83.74924469 101.10544586]
[87.24149323 89.87432098]
[97.38611603 83.92279053]
[102.06661987 69.67172241]
[106.74712372 55.42065811]
[111.42761993 41.16959381]
[116.10812378 26.91852570]
[120.78862762 12.66745853]
[120.50678253 3.34839630]
[125.85032654 -1.95735395]
[130.98062134 -16.05274391]
[136.11093140 -30.14813232]
[141.24122620 -44.24352264]
[146.37153625 -58.33891296]
[151.27755737 -72.51392365]
[155.95805359 -86.76499176]
[148.51490784 -96.31403351]
[146.71127319 -108.16371918]
[150.89100647 -119.26824951]
[159.87527466 -126.83171844]
[171.29197693 -129.01190186]
[176.86691284 -142.93740845]
[182.44184875 -156.86293030]
[188.01678467 -170.78845215]
[193.59172058 -184.71397400]
[199.16667175 -198.63949585]
[204.74160767 -212.56500244]
[210.31654358 -226.49052429]
[203.86555481 -240.91828918]
[209.58396912 -255.65176392]
[224.07913208 -261.94985962]
[238.75132751 -256.07598877]
[244.89579773 -241.51504517]
[238.86714172 -226.90577698]
[224.24205017 -220.91558838]
[218.66711426 -206.99006653]
[213.09217834 -193.06455994]
[207.51724243 -179.13903809]
[201.94230652 -165.21351624]
[196.36737061 -151.28799438]
[190.79243469 -137.36247253]
[185.21749878 -123.43695831]
[193.47302246 -107.25048065]
[187.34680176 -89.81070709]
[170.20912170 -82.08448792]
[165.52862549 -67.83341980]
[166.44912720 -60.35966492]
[160.46691895 -53.20861053]
[155.33662415 -39.11322021]
[150.20631409 -25.01782990]
[145.07601929 -10.92244148]
[139.94570923 3.17294812]
[135.03968811 17.34796143]
[130.35919189 31.59902763]
[125.67868805 45.85009384]
[120.99819183 60.10116196]
[116.31768799 74.35222626]
[111.63718414 88.60329437]
[115.55374146 104.83633423]
[103.12266541 115.98618317]
[98.89667511 130.37857056]
[94.67068481 144.77096558]
[90.44469452 159.16336060]
[86.21871185 173.55575562]
[89.75463867 188.97677612]
[78.74506378 199.00865173]
[74.51907349 213.40104675]
[70.29309082 227.79344177]
[66.06710052 242.18583679]
[69.60302734 257.60684204]
[58.59345627 267.63873291]
[54.36746597 282.03112793]
[50.14147949 296.42352295]
[61.50474548 306.61364746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 97]
[12 96]
[13 95]
[15 93]
[16 92]
[17 91]
[18 90]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 70]
[40 69]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
