%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGCUGCGGAGCUCGGAUCUUCUCCCCCGUCUGGCCCGCUCUCGACCCGCGCGCUCUGCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[133.41030884 154.54891968]
[129.73718262 143.98854065]
[130.98065186 132.79379272]
[119.01039124 123.75427246]
[107.04013062 114.71475220]
[95.21295929 115.59396362]
[85.91623688 108.23013306]
[84.06425476 96.51581573]
[72.52424622 86.93311310]
[60.98423767 77.35041809]
[49.44422913 67.76771545]
[40.52394485 64.53952026]
[37.60590363 57.46614075]
[26.52077103 47.36070633]
[17.75909615 43.72399139]
[15.17084122 36.52339172]
[4.56423950 25.91679001]
[-6.04236221 15.31018925]
[-16.64896393 4.70358753]
[-27.25556564 -5.90301418]
[-42.07014847 -1.85039127]
[-56.92218018 -5.76352739]
[-67.81654358 -16.58980942]
[-71.82271576 -31.41702080]
[-67.86304474 -46.25671768]
[-57.00266647 -57.11709213]
[-42.16297150 -61.07676315]
[-27.33575821 -57.07059860]
[-16.50947762 -46.17623138]
[-12.59634113 -31.32419777]
[-16.64896393 -16.50961685]
[-6.04236221 -5.90301418]
[4.56423950 4.70358753]
[15.17084122 15.31018925]
[25.77744293 25.91679001]
[36.62620544 36.27557373]
[47.71133804 46.38100815]
[59.02692795 56.22770309]
[70.56694031 65.81040192]
[82.10694885 75.39310455]
[93.64695740 84.97580719]
[110.12834167 87.21312714]
[116.07965088 102.74449921]
[128.04991150 111.78401184]
[140.02017212 120.82353210]
[159.33477783 116.70384216]
[175.52299500 127.50022125]
[179.03509521 146.34294128]
[192.13943481 153.64201355]
[205.24377441 160.94108582]
[218.34809875 168.24014282]
[227.70968628 169.77427673]
[231.87776184 176.19102478]
[244.63102722 184.08750916]
[260.51428223 181.82890320]
[272.08383179 192.94308472]
[270.46450806 208.90420532]
[256.89849854 217.46826172]
[241.79251099 212.06562805]
[236.73454285 196.84077454]
[223.98127747 188.94429016]
[211.04904175 181.34448242]
[197.94470215 174.04541016]
[184.84036255 166.74635315]
[171.73602295 159.44728088]
[162.45971680 165.07568359]
[151.58139038 166.16723633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 45]
[4 44]
[5 43]
[8 41]
[9 40]
[10 39]
[11 38]
[13 37]
[14 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[48 65]
[49 64]
[50 63]
[51 62]
[53 61]
[54 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
