%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUGUCUCUCCUCCUCCCUCCUCCUGCUCCGGGCGGAGCCCGGCAUGGGGGGGCCGGCGCCCGGCAGGCCAGUGGAUCCGGGACCCAGGGAGGGCCGCCCCCCGGGCCUGGUGGCACUGAGCAGGGCCCCCCAGCCCCCACCUCCUGCCCCACGAG\
) } def
/len { sequence length } bind def

/coor [
[-94.83988953 522.68780518]
[-88.80521393 536.47436523]
[-85.57640839 551.17340088]
[-85.27758026 566.21984863]
[-87.92021942 581.03552246]
[-93.40275574 595.05078125]
[-101.51444244 607.72698975]
[-111.94349670 618.57696533]
[-124.28904724 627.18353271]
[-138.07656860 633.21600342]
[-152.77610779 636.44238281]
[-167.82264709 636.73883057]
[-182.63784790 634.09375000]
[-196.65223694 628.60894775]
[-209.32714844 620.49523926]
[-220.17539978 610.06439209]
[-228.77999878 597.71746826]
[-234.81021118 583.92895508]
[-238.03425598 569.22888184]
[-238.32821655 554.18231201]
[-235.68078613 539.36755371]
[-230.19371033 525.35406494]
[-222.07791138 512.68041992]
[-211.64535522 501.83389282]
[-199.29701233 493.23129272]
[-185.50753784 487.20330811]
[-170.80696106 483.98162842]
[-155.76031494 483.69012451]
[-140.94598389 486.33993530]
[-126.93336487 491.82928467]
[-118.84629059 479.19601440]
[-110.75921631 466.56277466]
[-111.34330750 447.26562500]
[-93.39486694 438.16378784]
[-85.81000519 425.22277832]
[-78.22514343 412.28176880]
[-70.64028168 399.34075928]
[-63.18283463 386.32589722]
[-55.85351562 373.23846436]
[-48.52420044 360.15100098]
[-41.19488144 347.06356812]
[-49.32954407 331.43496704]
[-46.46788025 313.89132690]
[-33.56310654 301.44036865]
[-15.61762619 299.16897583]
[-8.80776882 285.80389404]
[-1.99791086 272.43878174]
[-1.76205230 265.01275635]
[5.07910681 258.88009644]
[12.15005779 245.65127563]
[19.22100830 232.42245483]
[26.29195976 219.19363403]
[33.36291122 205.96482849]
[40.43386078 192.73600769]
[47.50481415 179.50718689]
[46.68071747 164.63539124]
[60.00976562 156.11206055]
[67.08071136 142.88325500]
[66.25662231 128.01145935]
[79.58566284 119.48812866]
[86.65661621 106.25931549]
[86.50935364 91.26003265]
[79.18003845 78.17259216]
[71.85072327 65.08515167]
[56.86243439 59.36405945]
[52.12780380 44.03556442]
[61.27882767 30.85837555]
[77.29562378 29.94090652]
[87.89147949 41.98696136]
[84.93815613 57.75583649]
[92.26747894 70.84327698]
[99.59679413 83.93071747]
[114.53828430 85.25434875]
[124.05418396 73.65919495]
[133.57008362 62.06403732]
[143.08598328 50.46888351]
[152.60188293 38.87372589]
[148.83964539 23.93545723]
[154.52845764 9.81133080]
[167.29225159 1.83954978]
[182.12513733 2.89952850]
[191.64103699 -8.69562817]
[201.15693665 -20.29078484]
[210.67283630 -31.88594246]
[220.18873596 -43.48109818]
[223.23655701 -52.14836884]
[230.00708008 -55.20809555]
[239.74879456 -66.61418915]
[249.49052429 -78.02027893]
[252.70793152 -86.62603760]
[259.53720093 -89.55224609]
[269.50100708 -100.76486969]
[279.46478271 -111.97749329]
[282.85052490 -120.51842499]
[289.73596191 -123.30998230]
[299.91796875 -134.32482910]
[310.09997559 -145.33966064]
[316.41162109 -161.07495117]
[333.27920532 -159.36592102]
[336.30639648 -142.68441772]
[321.11480713 -135.15765381]
[310.93280029 -124.14281464]
[300.75079346 -113.12797546]
[290.67739868 -102.01371002]
[280.71362305 -90.80108643]
[270.74984741 -79.58845520]
[260.89660645 -68.27855682]
[251.15489197 -56.87246704]
[241.41316223 -45.46637726]
[231.78388977 -33.96519852]
[222.26799011 -22.37004280]
[212.75209045 -10.77488613]
[203.23619080 0.82027107]
[193.72029114 12.41542816]
[197.65365601 26.75650978]
[192.32514954 40.83028030]
[179.58224487 49.16524887]
[164.19703674 48.38962555]
[154.68113708 59.98477936]
[145.16523743 71.57994080]
[135.64933777 83.17509460]
[126.13343811 94.77024841]
[115.40612793 112.73962402]
[99.88543701 113.33026123]
[92.81448364 126.55908203]
[93.13282013 142.37709045]
[80.30953217 149.95419312]
[73.23858643 163.18301392]
[73.55691528 179.00102234]
[60.73363113 186.57814026]
[53.66268158 199.80696106]
[46.59172821 213.03576660]
[39.52077866 226.26458740]
[32.44982910 239.49340820]
[25.37887764 252.72222900]
[18.30792618 265.95104980]
[11.36718655 279.24865723]
[4.55732965 292.61373901]
[-2.25252795 305.97885132]
[4.86987972 316.32397461]
[6.88562107 328.64770508]
[3.47023439 340.58380127]
[-4.66389227 349.86706543]
[-15.91507339 354.76327515]
[-28.10744095 354.39288330]
[-35.43675995 367.48031616]
[-42.76607895 380.56777954]
[-50.09539413 393.65521240]
[-51.57208252 402.72329712]
[-57.69926834 406.92559814]
[-65.28412628 419.86663818]
[-72.86898804 432.80764771]
[-80.45384979 445.74865723]
[-77.08879089 456.16064453]
[-79.97879791 466.48583984]
[-87.92689514 473.34991455]
[-98.12596130 474.64984131]
[-106.21303558 487.28311157]
[-114.30010986 499.91635132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[30 159]
[31 158]
[32 157]
[34 153]
[35 152]
[36 151]
[37 150]
[38 148]
[39 147]
[40 146]
[41 145]
[45 139]
[46 138]
[47 137]
[49 136]
[50 135]
[51 134]
[52 133]
[53 132]
[54 131]
[55 130]
[57 128]
[58 127]
[60 125]
[61 124]
[62 72]
[63 71]
[64 70]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[87 109]
[88 108]
[89 107]
[91 106]
[92 105]
[93 104]
[95 103]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
