%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGACAGGACUACGCGCCUGGAGUAGGAGAAGGAGGAAAAAAGAGACCAUAGACUUCCAUCCUGGCCUAGAGCGGCCCUUAAAGUGCCAGGGAGAGGAGGGCGGGUGGGGACCACUCCAGAAUUGGCCGCUGGCGGUAUC\
) } def
/len { sequence length } bind def

/coor [
[85.00000000 135.80854797]
[78.95880127 149.53822327]
[72.91760254 163.26789856]
[74.44166565 179.01553345]
[62.23376083 187.54876709]
[56.19255829 201.27844238]
[62.15350723 215.91548157]
[55.94167709 230.44781494]
[41.24244308 236.25367737]
[26.77659607 229.88854980]
[21.12646675 215.12875366]
[27.64417839 200.73100281]
[42.46288681 195.23724365]
[48.50408554 181.50756836]
[46.54791260 166.74198914]
[59.18792725 157.22669983]
[65.22912598 143.49702454]
[71.27032471 129.76734924]
[62.67274094 103.62175751]
[72.42514038 80.74027252]
[92.50000000 71.19296265]
[92.50000000 56.19296265]
[92.50000000 41.19296265]
[92.50000000 26.19296265]
[92.50000000 11.19296265]
[92.50000000 -3.80703712]
[92.50000000 -18.80703735]
[89.35155487 -27.46427727]
[92.66719055 -34.13336945]
[92.99441528 -49.12979889]
[84.99455261 -36.44113541]
[73.67922974 -26.59412956]
[60.00735092 -20.42325211]
[45.13751602 -18.45144272]
[30.32984924 -20.84580231]
[16.83919907 -27.40342140]
[5.80881357 -37.56858826]
[-1.82655585 -50.47986603]
[-5.41986084 -65.04311371]
[-4.66659212 -80.02418518]
[0.36941537 -94.15354156]
[9.26139259 -106.23380280]
[21.25580406 -115.24124908]
[35.33620071 -120.41255951]
[50.30936050 -121.30950165]
[64.90640259 -117.85605621]
[77.89033508 -110.34488678]
[88.16083527 -99.41252136]
[94.84756470 -85.98539734]
[97.38394928 -71.19746399]
[102.82051849 -85.17758179]
[108.25708771 -99.15769958]
[113.69365692 -113.13782501]
[104.35780334 -127.19893646]
[105.20601654 -143.88987732]
[115.70891571 -156.67597961]
[131.59590149 -160.66876221]
[136.72621155 -174.76414490]
[141.85650635 -188.85954285]
[146.98681641 -202.95492554]
[152.11711121 -217.05032349]
[147.66108704 -236.65888977]
[162.84960938 -248.55368042]
[167.36019897 -262.85943604]
[171.87078857 -277.16519165]
[176.38136292 -291.47094727]
[180.89195251 -305.77670288]
[185.40254211 -320.08245850]
[189.91313171 -334.38818359]
[194.26739502 -348.74230957]
[198.46482849 -363.14306641]
[193.65202332 -380.88079834]
[206.71138000 -392.55502319]
[210.59367371 -407.04388428]
[214.47595215 -421.53277588]
[207.73194885 -436.08950806]
[215.03659058 -450.37310791]
[230.78640747 -453.42645264]
[242.89947510 -442.90728760]
[242.08367920 -426.88497925]
[228.96484375 -417.65051270]
[225.08255005 -403.16162109]
[221.20027161 -388.67272949]
[226.98585510 -377.99554443]
[223.81402588 -365.85736084]
[212.86558533 -358.94561768]
[208.66815186 -344.54486084]
[209.82489014 -337.18740845]
[204.21888733 -329.87762451]
[199.70829773 -315.57186890]
[195.19770813 -301.26611328]
[190.68711853 -286.96035767]
[186.17652893 -272.65460205]
[181.66595459 -258.34884644]
[177.15536499 -244.04309082]
[182.70874023 -235.35575867]
[182.51881409 -224.82627869]
[176.40522766 -215.98187256]
[166.21249390 -211.92001343]
[161.08219910 -197.82463074]
[155.95190430 -183.72923279]
[150.82159424 -169.63385010]
[145.69129944 -155.53846741]
[154.17150879 -145.17289734]
[156.42160034 -131.86071777]
[151.74468994 -119.08008575]
[141.26809692 -110.22434998]
[127.67377472 -107.70124817]
[122.23720551 -93.72113037]
[116.80063629 -79.74101257]
[111.36406708 -65.76089478]
[112.93158722 -61.96238327]
[113.03715515 -57.46247101]
[111.40320587 -52.84756470]
[107.99084473 -48.80257416]
[107.66362000 -33.80614471]
[107.50000000 -18.80703735]
[107.50000000 -3.80703712]
[107.50000000 11.19296265]
[107.50000000 26.19296265]
[107.50000000 41.19296265]
[107.50000000 56.19296265]
[107.50000000 71.19296265]
[118.10606384 73.97821045]
[127.57485962 80.74027252]
[134.40524292 90.97697449]
[137.32725525 103.62175751]
[135.51155090 117.15096283]
[128.72967529 129.76734924]
[134.77087402 143.49702454]
[140.81207275 157.22669983]
[146.85327148 170.95637512]
[160.39102173 180.21171570]
[158.87490845 196.54061890]
[143.86459351 203.14532471]
[130.80137634 193.23146057]
[133.12359619 176.99757385]
[127.08239746 163.26789856]
[121.04119873 149.53822327]
[115.00000000 135.80854797]
[107.50000000 135.80854797]
[107.49974823 150.80854797]
[92.49974823 150.80805969]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 14]
[6 13]
[21 123]
[22 122]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[29 116]
[30 115]
[50 111]
[51 110]
[52 109]
[53 108]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 87]
[71 86]
[73 83]
[74 82]
[75 81]
[129 140]
[130 139]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
