%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUGGUCCUCCGCCGGCUACGGCGCUGCGUCACUGGUUUGCAGGCGCUUUCCUCUUGGAAGUGGCGACUGCUGCGGGCCUGAGCGCUGGUCUCACGCGCCUCGGGAGCCAGGUUGGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[-14.90208817 322.90545654]
[-19.45422173 328.97595215]
[-25.80515480 333.00085449]
[-33.10332108 334.49816895]
[-40.39029694 333.32104492]
[-49.96879959 344.86453247]
[-59.54730225 356.40802002]
[-69.12580872 367.95150757]
[-78.70430756 379.49502563]
[-88.28281403 391.03851318]
[-85.30493927 406.38992310]
[-92.93663025 420.03878784]
[-107.57442474 425.54049683]
[-122.30681610 420.29733276]
[-130.17761230 406.78494263]
[-127.47045898 391.38348389]
[-115.46360016 381.36502075]
[-99.82630920 381.45999146]
[-90.24780273 369.91650391]
[-80.66930389 358.37301636]
[-71.09079742 346.82952881]
[-61.51229477 335.28601074]
[-51.93379211 323.74252319]
[-50.90780258 301.32308960]
[-29.39427757 292.73056030]
[-21.31306267 280.09353638]
[-13.23184872 267.45654297]
[-5.15063381 254.81953430]
[2.93058062 242.18252563]
[11.01179504 229.54551697]
[19.09300995 216.90850830]
[12.11694431 203.74795532]
[12.66861248 188.76290894]
[20.69992447 175.98149109]
[34.13875580 168.88961792]
[49.42267227 169.48045349]
[57.50388718 156.84344482]
[65.58510590 144.20643616]
[73.66631317 131.56942749]
[81.74752808 118.93242645]
[89.82874298 106.29541779]
[81.59997559 97.79463196]
[82.38249969 82.11952209]
[78.70968628 67.57612610]
[75.03686523 53.03272629]
[71.36405182 38.48932648]
[60.48324203 27.00374603]
[64.86869049 12.76938248]
[61.19587708 -1.77401590]
[57.52305984 -16.31741333]
[53.85024261 -30.86081123]
[49.81882858 -45.30891418]
[45.43128204 -59.65288544]
[41.04373550 -73.99684906]
[36.65618896 -88.34082031]
[24.29864120 -99.12149811]
[27.72129631 -115.15950012]
[43.40322113 -119.95630646]
[55.21219254 -108.57736969]
[51.00015640 -92.72837067]
[55.38770294 -78.38439941]
[59.77524948 -64.04042816]
[64.16279602 -49.69646072]
[67.97860718 -46.66360474]
[69.86493683 -41.15852737]
[68.39363861 -34.53362656]
[72.06645966 -19.99023056]
[75.73927307 -5.44683170]
[79.41208649 9.09656620]
[90.03018951 19.54190636]
[85.90744781 34.81651306]
[89.58026886 49.35990906]
[93.25308228 63.90330887]
[96.92589569 78.44670868]
[97.06072998 63.44731140]
[107.21885681 52.41044235]
[122.15561676 51.03445816]
[134.15911865 60.02978516]
[137.03193665 74.75211334]
[129.29081726 87.60027313]
[114.93048859 91.94057465]
[129.92016602 91.38412476]
[144.90983582 90.82766724]
[159.89952087 90.27121735]
[174.88919067 89.71475983]
[189.87886047 89.15830994]
[204.86051941 88.41650391]
[219.83183289 87.48945618]
[234.80316162 86.56241608]
[249.76188660 85.45027161]
[264.70568848 84.15320587]
[277.82818604 74.31794739]
[292.79858398 81.01264191]
[294.21664429 97.35036469]
[280.62356567 106.52426147]
[266.00277710 99.09702301]
[251.05894470 100.39408875]
[244.59785461 104.14714813]
[235.73020935 101.53373718]
[220.75888062 102.46078491]
[205.78755188 103.38782501]
[199.23561096 106.97992706]
[190.43531799 104.14798737]
[175.44564819 104.70443726]
[160.45596313 105.26089478]
[145.46629333 105.81734467]
[130.47662354 106.37380219]
[115.48694611 106.93025208]
[102.46575165 114.37663269]
[94.38453674 127.01364136]
[86.30332184 139.65065002]
[78.22210693 152.28765869]
[70.14089203 164.92466736]
[62.05968094 177.56167603]
[69.00764465 191.18786621]
[68.20758057 206.36207581]
[59.97435379 219.01435852]
[46.60303879 225.80139160]
[31.73001671 224.98971558]
[23.64880371 237.62672424]
[15.56758881 250.26373291]
[7.48637438 262.90075684]
[-0.59484023 275.53775024]
[-8.67605495 288.17474365]
[-16.75726891 300.81176758]
[-13.40888405 307.84973145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[31 119]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
[41 109]
[43 74]
[44 73]
[45 72]
[46 71]
[48 69]
[49 68]
[50 67]
[51 66]
[52 63]
[53 62]
[54 61]
[55 60]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 101]
[88 100]
[89 99]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
