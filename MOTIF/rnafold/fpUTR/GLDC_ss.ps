%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGCGCGAGUGUCUUGGUUGAGCGCAGCGCCCAUUCAUUGCCCGCGAGCGUCCAUCCAUCUGUCCGGCCGACUGUCCAGCGAAAGGGGCUCCAGGCCGGGCGCAGCCGCCACCCGGGGGACCGAGGCCAGGAGAGGGGCCAAGAGCGCGGCUGACCCUUGCGGGCCGGGGCAGGGGACGGUGGCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[155.28631592 281.46926880]
[141.23823547 276.21081543]
[134.88687134 262.62182617]
[139.86340332 248.47142029]
[153.32266235 241.84962463]
[167.56945801 246.54199219]
[161.88536072 232.66067505]
[156.20126343 218.77935791]
[150.51716614 204.89804077]
[144.83305359 191.01672363]
[139.14895630 177.13540649]
[127.16582489 168.28929138]
[129.09664917 152.58634949]
[123.41254425 138.70503235]
[117.72844696 124.82370758]
[95.55217743 127.38996887]
[79.78502655 114.69740295]
[65.56488800 119.47104645]
[51.34475327 124.24468994]
[40.72440338 135.97152710]
[26.19649124 132.68685913]
[11.97635365 137.46051025]
[1.35600531 149.18734741]
[-13.17190647 145.90267944]
[-27.39204407 150.67633057]
[-41.61218262 155.44996643]
[-55.83232117 160.22361755]
[-67.68772888 174.30509949]
[-84.73686981 170.17219543]
[-98.87784576 175.17547607]
[-113.01882172 180.17877197]
[-119.88046265 194.16288757]
[-134.29269409 199.03549194]
[-147.58212280 192.40777588]
[-161.72309875 197.41107178]
[-169.90354919 211.21179199]
[-185.81300354 213.27786255]
[-197.24710083 202.02438354]
[-195.43458557 186.08404541]
[-181.76585388 177.68492126]
[-166.72639465 183.27009583]
[-152.58541870 178.26679993]
[-146.42124939 164.75611877]
[-132.15156555 159.48063660]
[-118.02210236 166.03779602]
[-103.88113403 161.03450012]
[-89.74015808 156.03121948]
[-84.24199677 145.24636841]
[-72.49037170 140.96719360]
[-60.60596466 146.00347900]
[-46.38582611 141.22982788]
[-32.16568756 136.45619202]
[-17.94555092 131.68254089]
[-8.34232235 120.29714966]
[7.20270920 123.24037170]
[21.42284775 118.46672821]
[31.02607536 107.08132935]
[46.57110596 110.02455139]
[60.79124451 105.25090790]
[75.01138306 100.47726440]
[75.86968231 93.48950195]
[78.64267731 87.01834106]
[83.11032867 81.57724762]
[76.75882721 67.98833466]
[70.40732574 54.39942932]
[64.05582428 40.81052017]
[57.70432281 27.22161293]
[51.35282135 13.63270569]
[45.00131989 0.04379714]
[38.64981842 -13.54511070]
[32.29831696 -27.13401985]
[17.06919289 -28.55565262]
[4.67820215 -37.35111618]
[-1.60486519 -51.07661819]
[-0.18365863 -66.00431824]
[8.46045017 -78.13465118]
[2.10894823 -91.72355652]
[-4.24255371 -105.31246185]
[-10.59405518 -118.90137482]
[-25.85369873 -121.71614075]
[-36.52010345 -132.98590088]
[-38.49182129 -148.37719727]
[-31.01068497 -161.97175598]
[-16.95334435 -168.54220581]
[-1.72513318 -165.56207275]
[8.81838894 -154.17726135]
[10.62302399 -138.76548767]
[2.99485278 -125.25287628]
[9.34635448 -111.66396332]
[15.69785595 -98.07505798]
[22.04935837 -84.48615265]
[36.90015030 -83.33740997]
[49.26424789 -74.85301208]
[55.76443863 -61.22899628]
[54.56463242 -46.08115005]
[45.88722610 -33.48551941]
[52.23872757 -19.89661217]
[58.59022903 -6.30770445]
[64.94172668 7.28120327]
[71.29323578 20.87011147]
[77.64473724 34.45901871]
[83.99623871 48.04792786]
[90.34774017 61.63683701]
[96.69924164 75.22574615]
[115.29808807 76.84915161]
[129.39526367 91.84935760]
[142.54454041 84.63156891]
[155.69381714 77.41378021]
[168.84309387 70.19599152]
[181.99237061 62.97820282]
[195.14164734 55.76041412]
[194.14663696 37.30658722]
[201.87902832 20.60001945]
[216.47773743 9.50259304]
[234.50309753 6.54499817]
[251.74723816 12.34988976]
[262.09307861 1.48880076]
[272.43893433 -9.37228775]
[275.76937866 -25.42969322]
[291.42346191 -30.31653976]
[303.29763794 -19.00565910]
[299.17675781 -3.13271379]
[283.30004883 0.97356862]
[272.95419312 11.83465767]
[262.60833740 22.69574547]
[263.15933228 23.50806046]
[263.68893433 24.33446884]
[277.74703979 19.10285378]
[291.80514526 13.87123680]
[305.86325073 8.63962078]
[309.90301514 -6.34236956]
[321.99853516 -16.06232643]
[337.49887085 -16.78273010]
[350.44384766 -8.22656822]
[355.85580444 6.31613922]
[351.65374756 21.25342369]
[339.45349121 30.84159660]
[323.94622803 31.39380646]
[311.09487915 22.69772148]
[297.03677368 27.92933655]
[282.97866821 33.16095352]
[268.92056274 38.39257050]
[268.60754395 52.29923248]
[263.25598145 65.18104553]
[253.56883240 75.27211761]
[240.84547424 81.17803192]
[226.80743408 82.06848145]
[213.36544800 77.79390717]
[202.35943604 68.90969086]
[189.21015930 76.12747955]
[176.06088257 83.34526825]
[162.91160583 90.56305695]
[149.76232910 97.78084564]
[136.61305237 104.99863434]
[131.60977173 119.13961029]
[137.29386902 133.02093506]
[142.97796631 146.90225220]
[155.36766052 156.74124146]
[153.03027344 171.45130920]
[158.71437073 185.33262634]
[164.39848328 199.21394348]
[170.08258057 213.09526062]
[175.76667786 226.97657776]
[181.45077515 240.85789490]
[187.80227661 254.44680786]
[194.80619812 267.71124268]
[201.81010437 280.97567749]
[208.81402588 294.24011230]
[215.81794739 307.50454712]
[229.10368347 316.09521484]
[228.20434570 330.96264648]
[235.20825195 344.22708130]
[242.21217346 357.49148560]
[257.51733398 357.38958740]
[271.11141968 364.42233276]
[279.87063599 376.97363281]
[281.78210449 392.15930176]
[276.40664673 406.48977661]
[264.97949219 416.67205811]
[250.12651062 420.36630249]
[235.26080322 416.72357178]
[223.79840088 406.58099365]
[218.37329102 392.26922607]
[220.23211670 377.07702637]
[228.94773865 364.49542236]
[221.94383240 351.23098755]
[214.93991089 337.96655273]
[202.15513611 330.32464600]
[202.55351257 314.50845337]
[195.54959106 301.24401855]
[188.54568481 287.97958374]
[181.54176331 274.71514893]
[174.53784180 261.45071411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 164]
[7 163]
[8 162]
[9 161]
[10 160]
[11 159]
[13 157]
[14 156]
[15 155]
[17 60]
[18 59]
[19 58]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[27 50]
[29 47]
[30 46]
[31 45]
[34 42]
[35 41]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[70 97]
[71 96]
[76 91]
[77 90]
[78 89]
[79 88]
[106 154]
[107 153]
[108 152]
[109 151]
[110 150]
[111 149]
[116 125]
[117 124]
[118 123]
[127 142]
[128 141]
[129 140]
[130 139]
[165 193]
[166 192]
[167 191]
[168 190]
[169 189]
[171 187]
[172 186]
[173 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
