%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAGGGGCUGUCAUUUGCAGCGCUGGUCGCAGCCCUCAGCUGCGCCGGGCGGUUCCGGCUCCUCCCUCUCCUUGUGCCUCAGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[224.48638916 294.52880859]
[226.53398132 278.85473633]
[233.80369568 264.78836060]
[223.56539917 253.82583618]
[213.32710266 242.86329651]
[203.08880615 231.90075684]
[192.85050964 220.93821716]
[182.61221313 209.97567749]
[172.37391663 199.01313782]
[162.13562012 188.05059814]
[151.89732361 177.08805847]
[141.65902710 166.12551880]
[132.20959473 168.80787659]
[122.38616943 167.73701477]
[113.63298035 163.02589417]
[107.25360107 155.32589722]
[104.21684265 145.73710632]
[105.00983429 135.65121460]
[109.56044769 126.54954529]
[100.91024017 114.29499054]
[88.29776764 108.26033783]
[86.83520508 94.35520935]
[78.18500519 82.10066223]
[70.51484680 76.75272369]
[69.45709991 69.27678680]
[61.23031998 56.73405457]
[53.00354004 44.19132614]
[44.77676392 31.64859200]
[37.29366302 26.04190445]
[36.49176788 18.53421402]
[28.69800949 5.71792269]
[20.90424919 -7.09836817]
[13.11049080 -19.91465950]
[5.31673098 -32.73094940]
[-2.47702813 -45.54724121]
[-17.66076469 -50.72736740]
[-22.94184113 -65.87628937]
[-14.26906586 -79.37304688]
[1.70454824 -80.86408997]
[12.72541237 -69.20561218]
[10.33926296 -53.34099960]
[18.13302231 -40.52470779]
[25.92678070 -27.70841789]
[33.72053909 -14.89212704]
[41.51430130 -2.07583642]
[49.30805969 10.74045467]
[57.31949615 23.42181396]
[65.54627228 35.96454620]
[73.77304840 48.50727844]
[81.99983215 61.05001068]
[90.43955231 73.45045471]
[99.08975983 85.70500946]
[111.70223236 91.73966217]
[113.16479492 105.64479065]
[121.81499481 117.89933777]
[142.54170227 119.77108002]
[155.33914185 135.82321167]
[152.62156677 155.88722229]
[162.85986328 166.84976196]
[173.09815979 177.81230164]
[183.33645630 188.77484131]
[193.57475281 199.73738098]
[203.81304932 210.69992065]
[214.05134583 221.66246033]
[224.28964233 232.62500000]
[234.52793884 243.58753967]
[244.76623535 254.55007935]
[257.92065430 248.60752869]
[272.24926758 247.05137634]
[286.33050537 250.02252197]
[298.77154541 257.21334839]
[308.34613037 267.89956665]
[314.11532593 281.01312256]
[315.51962280 295.24896240]
[312.43319702 309.19485474]
[305.17504883 321.47152710]
[315.03311157 332.77722168]
[324.89117432 344.08291626]
[334.74920654 355.38864136]
[350.42993164 360.18936157]
[353.84857178 376.22821045]
[341.48831177 387.00579834]
[326.06436157 381.43505859]
[323.44351196 365.24667358]
[313.58547974 353.94097900]
[303.72741699 342.63528442]
[293.86935425 331.32958984]
[279.34957886 337.16201782]
[263.68505859 337.70816040]
[248.74362183 332.88479614]
[236.31306458 323.24996948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[19 55]
[20 54]
[22 52]
[23 51]
[25 50]
[26 49]
[27 48]
[28 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
