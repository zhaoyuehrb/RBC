%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCUCCAUGCGGGCGUCAACGUCCGAUCCAAGCGCCAAAUUCAAAUUUGCGGCCAUCUUGAGCGGGCGGAAUUCAGUCGCGCGCGGUGCAGUCGGGAGGUGGAGGCACCGGCUGCAUUGUUUUCGGGAUCGAGGGGUGAGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[97.16847992 249.51936340]
[96.85434723 234.52265930]
[96.54020691 219.52593994]
[88.53806305 206.96350098]
[95.98465729 193.00431824]
[95.67052460 178.00761414]
[95.35638428 163.01089478]
[95.04225159 148.01419067]
[88.19065857 144.96366882]
[82.08940125 158.66674805]
[68.38640594 152.56527710]
[74.48748016 138.86260986]
[67.63588715 135.81208801]
[56.28096008 145.61340332]
[44.92603302 155.41470337]
[33.57110977 165.21601868]
[22.21618271 175.01731873]
[10.86125755 184.81863403]
[5.98204899 200.47511292]
[-10.07373047 203.81336975]
[-20.78927040 191.39930725]
[-15.14134407 176.00343323]
[1.05994809 173.46371460]
[12.41487408 163.66239929]
[23.76980019 153.86108398]
[35.12472534 144.05978394]
[46.47965240 134.25846863]
[57.83457565 124.45716095]
[56.18362427 115.36408997]
[56.36918259 106.54493713]
[58.22657394 98.35088348]
[61.52742386 91.08068085]
[47.82424164 84.97962952]
[34.12105942 78.87857819]
[20.41787910 72.77752686]
[0.53850138 75.84641266]
[-10.25146675 59.84729767]
[-24.19811440 54.32542801]
[-38.14476013 48.80356216]
[-48.69812775 59.74407578]
[-62.63691711 65.80860901]
[-77.83556366 66.07237244]
[-91.97638702 60.49512863]
[-102.90300751 49.92737579]
[-108.94920349 35.98062134]
[-109.19297028 20.78164101]
[-103.59712982 6.64816904]
[-93.01501465 -4.26454306]
[-79.06031799 -10.29238510]
[-63.86103058 -10.51615524]
[-49.73493195 -4.90173101]
[-38.83615112 5.69473028]
[-32.82666779 19.65734482]
[-32.62289429 34.85691452]
[-18.67624664 40.37878036]
[-4.72959852 45.90065002]
[4.32155085 40.98672485]
[14.79940605 41.92106247]
[23.18256950 48.63423538]
[26.51892853 59.07434845]
[40.22211075 65.17539978]
[53.92529297 71.27644348]
[67.62847137 77.37749481]
[83.91264343 61.35523224]
[107.56562805 56.42578888]
[108.19376373 41.43894958]
[108.82189941 26.45210457]
[101.66927338 12.34003353]
[109.93275452 -0.05206979]
[110.56089020 -15.03891182]
[111.18902588 -30.02575493]
[111.81715393 -45.01259613]
[100.14826965 -55.42274094]
[97.95206451 -70.90533447]
[106.26552582 -84.14997101]
[121.16329193 -88.90293884]
[135.61108398 -82.92002869]
[142.78710938 -69.02619171]
[139.30305481 -53.78166962]
[126.80400085 -44.38446045]
[126.17586517 -29.39761925]
[125.54772949 -14.41077709]
[124.91959381 0.57606500]
[132.11714172 13.61617756]
[123.80873871 27.08024025]
[123.18060303 42.06708145]
[122.55247498 57.05392456]
[134.59472656 65.99729919]
[148.76037598 61.06429672]
[162.92602539 56.13129807]
[177.09167480 51.19829941]
[191.25730896 46.26530075]
[205.42295837 41.33229828]
[219.58860779 36.39929962]
[233.75425720 31.46630096]
[247.91989136 26.53330040]
[262.08554077 21.60030174]
[276.25119019 16.66730118]
[277.93161011 1.49696994]
[286.03506470 -11.43736267]
[298.95257568 -19.56757736]
[314.11938477 -21.27941132]
[328.52410889 -16.23298073]
[339.30670166 -5.43025780]
[344.32623291 8.98386955]
[342.58609009 24.14746666]
[334.43176270 37.04978943]
[321.48233032 45.12907028]
[306.30889893 46.78116608]
[291.92413330 41.67804718]
[281.18417358 30.83294678]
[267.01855469 35.76594543]
[252.85290527 40.69894791]
[238.68725586 45.63194656]
[224.52160645 50.56494522]
[210.35595703 55.49794388]
[196.19032288 60.43094635]
[182.02467346 65.36394501]
[167.85902405 70.29694366]
[153.69337463 75.22994232]
[139.52774048 80.16294098]
[141.80952454 102.04583740]
[133.39932251 121.07554626]
[144.33384705 131.34375000]
[155.26838684 141.61195374]
[166.20291138 151.88015747]
[177.13743591 162.14837646]
[188.07197571 172.41658020]
[204.15269470 175.63250732]
[209.15095520 191.25138855]
[197.92497253 203.20585632]
[182.02307129 199.19816589]
[177.80375671 183.35110474]
[166.86923218 173.08290100]
[155.93470764 162.81469727]
[145.00018311 152.54649353]
[134.06564331 142.27827454]
[123.13111877 132.01007080]
[119.89900970 137.64077759]
[115.52275085 142.94146729]
[110.03896332 147.70005798]
[110.35309601 162.69676208]
[110.66723633 177.69346619]
[110.98136902 192.69018555]
[119.00598145 206.32528687]
[111.53691864 219.21180725]
[111.85105133 234.20852661]
[112.16519165 249.20523071]
[114.75885010 268.41259766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[5 144]
[6 143]
[7 142]
[8 141]
[13 28]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[32 63]
[33 62]
[34 61]
[35 60]
[37 56]
[38 55]
[39 54]
[65 87]
[66 86]
[67 85]
[69 83]
[70 82]
[71 81]
[72 80]
[88 121]
[89 120]
[90 119]
[91 118]
[92 117]
[93 116]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[123 138]
[124 137]
[125 136]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
