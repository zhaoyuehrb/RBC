%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGCCUCGCACUUCCUGGCGGAGCCAUGGCUGCGCAGCGGGCUGGCCGGGGGUCUCCUGAACCCGGGCCCCGCCGCCCCGACCGCCCGGCCCCGCCGCCGGGGCUGUCCCCGCCGCGUCCGUAGCGCGUCCUGCCAGGGCUGAAAUCUCUUUA\
) } def
/len { sequence length } bind def

/coor [
[115.18344116 291.88345337]
[127.54634094 282.93237305]
[124.84251404 268.17807007]
[122.13868713 253.42378235]
[119.43486786 238.66949463]
[116.73104095 223.91519165]
[114.02721405 209.16088867]
[111.32338715 194.40658569]
[99.24659729 181.70776367]
[105.49563599 164.41458130]
[102.49524689 149.71772766]
[99.49486542 135.02087402]
[87.37541199 132.67010498]
[76.82444000 126.26042175]
[69.15280151 116.58814240]
[65.31360626 104.85495758]
[65.78385162 92.51858521]
[70.50510406 81.11170959]
[59.89850616 70.50510406]
[49.29190445 59.89850616]
[38.68530273 49.29190445]
[28.07869911 38.68530273]
[17.47209740 28.07869911]
[2.24280477 23.79160118]
[-1.28563797 9.32096386]
[-11.89223957 -1.28563797]
[-22.49884224 -11.89223957]
[-35.41030884 -12.68266106]
[-44.02871704 -21.78350067]
[-44.10902023 -33.91569901]
[-54.49988556 -44.73373795]
[-64.89074707 -55.55177307]
[-82.35669708 -55.56757736]
[-94.19531250 -67.94689941]
[-93.46075439 -84.72274780]
[-104.06735229 -95.32934570]
[-119.64327240 -95.49804688]
[-130.24877930 -106.40573883]
[-129.99197388 -121.25395966]
[-140.59857178 -131.86056519]
[-151.20516968 -142.46716309]
[-161.81176758 -153.07376099]
[-177.04687500 -150.79386902]
[-190.54537964 -157.83967590]
[-197.22770691 -171.32339478]
[-194.71896362 -185.98095703]
[-205.32556152 -196.58755493]
[-215.93215942 -207.19415283]
[-226.53875732 -217.80075073]
[-241.76805115 -222.08786011]
[-245.29649353 -236.55848694]
[-255.90310669 -247.16510010]
[-266.50970459 -257.77169800]
[-281.73898315 -262.05880737]
[-285.26742554 -276.52941895]
[-295.87405396 -287.13604736]
[-311.84582520 -290.85549927]
[-316.35101318 -306.62365723]
[-304.75506592 -318.21960449]
[-288.98687744 -313.71441650]
[-285.26742554 -297.74264526]
[-274.66082764 -287.13604736]
[-260.19018555 -283.60760498]
[-255.90310669 -268.37829590]
[-245.29649353 -257.77169800]
[-234.68989563 -247.16510010]
[-220.21925354 -243.63665771]
[-215.93215942 -228.40736389]
[-205.32556152 -217.80075073]
[-194.71896362 -207.19415283]
[-184.11235046 -196.58755493]
[-169.45478821 -199.09631348]
[-155.97108459 -192.41398621]
[-148.92526245 -178.91546631]
[-151.20516968 -163.68037415]
[-140.59857178 -153.07376099]
[-129.99197388 -142.46716309]
[-119.38536835 -131.86056519]
[-104.53714752 -132.11738586]
[-93.62944794 -121.51187134]
[-93.46075439 -105.93595123]
[-82.85414886 -95.32934570]
[-70.06160736 -97.12896729]
[-58.40256500 -91.12654114]
[-52.25508118 -79.32308197]
[-54.07271194 -65.94264221]
[-43.68184662 -55.12460327]
[-33.29098129 -44.30656433]
[-16.21399879 -40.37135696]
[-11.89223957 -22.49884224]
[-1.28563797 -11.89223957]
[9.32096386 -1.28563797]
[23.79160118 2.24280477]
[28.07869911 17.47209740]
[38.68530273 28.07869911]
[49.29190445 38.68530273]
[59.89850616 49.29190445]
[70.50510406 59.89850616]
[81.11170959 70.50510406]
[107.00579834 65.68331146]
[128.93785095 80.26888275]
[142.85314941 74.66846466]
[156.76843262 69.06803894]
[170.68371582 63.46761703]
[184.59901428 57.86719513]
[194.28123474 44.63138962]
[210.55351257 46.66730118]
[216.67633057 61.88056183]
[206.35104370 74.62107086]
[190.19943237 71.78248596]
[176.28414917 77.38290405]
[162.36885071 82.98332977]
[148.45356750 88.58374786]
[134.53826904 94.18417358]
[134.93754578 97.53336334]
[135.01280212 100.90542603]
[149.57693481 104.49515533]
[164.14105225 108.08489227]
[178.70518494 111.67462921]
[193.26931763 115.26436615]
[207.68727112 108.22859192]
[222.11508179 115.24413300]
[225.48497009 130.92926025]
[215.21183777 143.25169373]
[199.17636108 142.75871277]
[189.67958069 129.82849121]
[175.11544800 126.23875427]
[160.55133057 122.64901733]
[145.98719788 119.05928802]
[131.42306519 115.46955109]
[128.26974487 120.67700195]
[124.26232910 125.25976562]
[119.52191925 129.07939148]
[114.19172668 132.02047729]
[117.19210815 146.71734619]
[120.19249725 161.41419983]
[130.52815247 169.19270325]
[132.70010376 181.53712463]
[126.07769012 191.70275879]
[128.78150940 206.45706177]
[131.48533630 221.21136475]
[134.18916321 235.96566772]
[136.89299011 250.71995544]
[139.59681702 265.47427368]
[142.30064392 280.22854614]
[157.03424072 284.21398926]
[168.57392883 294.20391846]
[174.62847900 308.21481323]
[173.99575806 323.46481323]
[166.80139160 336.92602539]
[154.47383118 345.92568970]
[139.46072388 348.67694092]
[124.74293518 344.63351440]
[113.24268341 334.59823608]
[107.24335480 320.56359863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[10 136]
[11 135]
[12 134]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[25 92]
[26 91]
[27 90]
[30 88]
[31 87]
[32 86]
[35 82]
[36 81]
[39 78]
[40 77]
[41 76]
[42 75]
[46 71]
[47 70]
[48 69]
[49 68]
[51 66]
[52 65]
[53 64]
[55 62]
[56 61]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
