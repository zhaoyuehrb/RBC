%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCCCGUCCGCUGUCCUCUGCUGCCAGUCCCCUGCCCCGGGCAAAGCCCAUCUGGUCCGCCGAGCAGGCCGGAGCUAUUGGGAGUGGCGGAUCCUCCCACCCCAGCCGGAUCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[142.91468811 606.88775635]
[128.52767944 600.76007080]
[121.49150085 586.79492188]
[125.12841797 571.58612061]
[137.72119141 562.31488037]
[138.49974060 547.33508301]
[139.27830505 532.35534668]
[139.66770935 517.36041260]
[139.66770935 502.36038208]
[139.66770935 487.36038208]
[139.66770935 472.36038208]
[139.66770935 457.36038208]
[139.47299194 442.36163330]
[139.08358765 427.36669922]
[138.69416809 412.37176514]
[121.41611481 407.34628296]
[106.79683685 396.81677246]
[96.52996826 381.98458862]
[91.81111908 364.55059814]
[93.19860077 346.52017212]
[100.54747772 329.97244263]
[113.02448273 316.82064819]
[129.20252991 308.59085083]
[126.87525177 293.77249146]
[124.54797363 278.95413208]
[122.22068787 264.13577271]
[119.89340973 249.31739807]
[117.56612396 234.49903870]
[107.94785309 223.12635803]
[113.45033264 208.29283142]
[111.12305450 193.47447205]
[108.79576874 178.65611267]
[106.46849060 163.83775330]
[91.08126831 154.08523560]
[87.52790833 135.89547729]
[98.48078918 120.55458832]
[95.38751221 105.87699890]
[87.15534973 110.82271576]
[77.01340485 112.40814972]
[66.03074646 110.12879181]
[55.38745880 103.78261566]
[45.13061523 92.83743286]
[34.87377167 81.89224243]
[24.61692429 70.94705200]
[9.37440205 63.52399445]
[12.28781605 46.82224655]
[29.14336586 44.99829865]
[35.56211090 60.69020844]
[45.81895828 71.63539886]
[56.07580185 82.58058167]
[66.33264923 93.52577209]
[73.52884674 91.41278076]
[95.11743927 85.07379150]
[97.82862854 70.32084656]
[100.53981781 55.56790161]
[103.25101471 40.81495667]
[105.96220398 26.06200790]
[108.67340088 11.30906200]
[111.38459015 -3.44388509]
[106.26905060 -18.41525269]
[116.17932129 -29.53441620]
[118.89051056 -44.28736496]
[115.80661774 -60.95847321]
[130.97251892 -68.53687286]
[142.45307922 -56.06157684]
[133.64346313 -41.57617188]
[130.93226624 -26.82322502]
[136.24172974 -12.90708637]
[126.13753510 -0.73269314]
[123.42634583 14.02025318]
[120.71514893 28.77320099]
[118.00395966 43.52614594]
[115.29277039 58.27909470]
[112.58157349 73.03204346]
[109.87038422 87.78498840]
[110.06510162 102.78372192]
[113.15837860 117.46131134]
[124.31900024 121.95806122]
[131.80203247 131.22604370]
[133.80497742 142.84585571]
[129.93661499 153.85662842]
[121.28684998 161.51046753]
[123.61412811 176.32882690]
[125.94141388 191.14718628]
[128.26869202 205.96554565]
[138.05342102 218.39814758]
[132.38449097 232.17176819]
[134.71176147 246.99012756]
[137.03904724 261.80847168]
[139.36633301 276.62683105]
[141.69361877 291.44519043]
[144.02088928 306.26354980]
[156.22361755 307.52627563]
[167.80871582 311.53347778]
[178.16793823 318.07034302]
[186.75842285 326.78921509]
[193.13113403 337.22839355]
[196.95436096 348.83624268]
[198.03094482 361.00064087]
[196.30845642 373.08108521]
[191.88175964 384.44247437]
[184.98776245 394.48846436]
[175.99272156 402.69284058]
[165.37287903 408.62698364]
[153.68911743 411.98236084]
[154.07852173 426.97729492]
[154.46794128 441.97222900]
[157.85261536 450.58987427]
[154.66770935 457.36038208]
[154.66770935 472.36038208]
[154.66770935 487.36038208]
[154.66770935 502.36038208]
[154.66770935 517.36041260]
[157.72630310 523.44293213]
[157.23490906 529.25860596]
[154.25808716 533.13391113]
[153.47952271 548.11364746]
[152.70097351 563.09344482]
[164.26475525 573.62023926]
[166.30541992 589.12408447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 118]
[6 117]
[7 116]
[8 113]
[9 112]
[10 111]
[11 110]
[12 109]
[13 107]
[14 106]
[15 105]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[30 85]
[31 84]
[32 83]
[33 82]
[36 77]
[37 76]
[41 51]
[42 50]
[43 49]
[44 48]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
