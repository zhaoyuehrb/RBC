%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGCAGCCCGACGCAAGAGGCAGGAAGCGCAGCAACUCGUGUCUGAGCGCCCGGCGGAAAACCGAAGUUGGAAGUGUCUCUUAGCAGCGCGCGGAGAAGAACGGGGAGCCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[96.06793976 289.06512451]
[105.68544006 276.22445679]
[104.89380646 261.24536133]
[94.53459167 247.14689636]
[102.85635376 230.78594971]
[101.66959381 215.83297729]
[90.20590210 206.39266968]
[88.78935242 191.24513245]
[98.76893616 179.28495789]
[97.58217621 164.33198547]
[96.39542389 149.37899780]
[95.20866394 134.42602539]
[74.62496948 123.75321960]
[65.33293915 102.51043701]
[50.49077988 100.34008789]
[35.64862442 98.16973877]
[25.78002739 107.44634247]
[12.55750084 109.27813721]
[0.88546860 103.21374512]
[-5.03812885 91.68886566]
[-19.81782150 89.12747955]
[-34.59751511 86.56610107]
[-49.37720871 84.00472260]
[-64.15689850 81.44334412]
[-79.07559967 86.71050262]
[-90.29473114 76.91355133]
[-105.07442474 74.35217285]
[-123.53774261 82.23268127]
[-137.98660278 69.49490356]
[-152.88088989 67.71709442]
[-169.32499695 71.84355927]
[-177.84237671 57.18441010]
[-166.11395264 44.94183731]
[-151.10307312 52.82282257]
[-136.20880127 54.60063171]
[-128.65238953 47.49616623]
[-118.20362091 45.75472260]
[-108.34828186 50.20624924]
[-102.51304626 59.57247925]
[-87.73335266 62.13385773]
[-73.87179565 56.68348694]
[-61.59552002 66.66365051]
[-46.81583023 69.22502899]
[-32.03613663 71.78640747]
[-17.25644112 74.34778595]
[-2.47674870 76.90917206]
[10.77682972 66.64910889]
[27.69164658 69.13789368]
[37.81897354 83.32758331]
[52.66112900 85.49793243]
[67.50328827 87.66828156]
[79.79319763 71.71939087]
[98.86398315 65.26072693]
[101.62022400 50.51613235]
[104.37646484 35.77153397]
[107.13271332 21.02693748]
[109.88895416 6.28234148]
[97.83492279 -3.14946222]
[91.55535889 -17.10746002]
[92.49326324 -32.38420486]
[100.43310547 -45.46921158]
[113.55037689 -53.35564423]
[128.83082581 -54.23125839]
[142.76309204 -47.89484024]
[152.14567566 -35.80245590]
[154.82250977 -20.73284721]
[150.17848206 -6.14889717]
[139.28076172 4.59810734]
[124.63355255 9.03858376]
[121.87730408 23.78318024]
[119.12106323 38.52777863]
[116.36482239 53.27237320]
[113.60858154 68.01696777]
[118.42140198 70.52526855]
[122.78508759 73.75218964]
[126.59325409 77.61906433]
[129.75305176 82.03160095]
[132.18743896 86.88222504]
[133.83706665 92.05267334]
[148.83576965 91.85467529]
[163.83445740 91.65668488]
[178.83316040 91.45869446]
[193.83184814 91.26069641]
[204.82020569 80.22013855]
[220.03382874 80.23300934]
[230.49159241 90.77676392]
[245.49028015 90.57876587]
[261.24822998 84.32388306]
[271.62091064 97.73447418]
[261.60583496 111.41420746]
[245.68827820 105.57746124]
[230.68959045 105.77545166]
[220.51379395 116.59158325]
[205.30580139 117.00604248]
[194.02984619 106.25939178]
[179.03114319 106.45738220]
[164.03245544 106.65538025]
[149.03376770 106.85337067]
[134.03506470 107.05136871]
[131.76171875 114.11740112]
[128.03984070 120.53959656]
[123.03916931 126.02507019]
[116.98777771 130.32363892]
[110.16164398 133.23925781]
[111.34840393 148.19224548]
[112.53515625 163.14521790]
[113.72191620 178.09820557]
[125.46313477 188.33448792]
[126.45365906 203.51583862]
[116.62257385 214.64620972]
[117.80933380 229.59919739]
[127.14553070 238.61708069]
[127.76143646 251.17973328]
[119.87290192 260.45373535]
[120.66453552 275.43283081]
[131.58190918 287.18826294]
[129.05561829 303.03115845]
[115.02362061 310.80819702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[5 111]
[6 110]
[9 107]
[10 106]
[11 105]
[12 104]
[14 51]
[15 50]
[16 49]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 40]
[27 39]
[29 35]
[30 34]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[79 99]
[80 98]
[81 97]
[82 96]
[83 95]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
