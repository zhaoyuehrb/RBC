%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCCCGCCCCGCACGGCCAGGCGAAGCGGAGCCGGCCGUGCGGUGUGUGUGUAUGUGUUCGCGGGGCGCCGUCUCAGCCCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[145.61582947 125.32105255]
[131.59059143 120.00198364]
[117.56534576 114.68290710]
[108.19163513 121.37817383]
[96.74405670 122.66115570]
[86.12078857 118.20704651]
[79.01129150 109.14348602]
[77.21548462 97.76508331]
[63.59062576 91.49106598]
[49.96576691 85.21704865]
[34.19448090 86.47285461]
[25.87026024 74.12146759]
[12.24540424 67.84745026]
[-1.37945211 61.57343674]
[-15.00430870 55.29941940]
[-28.62916565 49.02540207]
[-42.25402069 42.75138474]
[-55.87887573 36.47736740]
[-69.50373077 30.20335197]
[-83.12859344 23.92933464]
[-96.75344849 17.65531731]
[-106.07492828 16.86747742]
[-110.73451996 10.92238808]
[-124.13470459 4.18183184]
[-137.53488159 -2.55872393]
[-151.26176453 4.67678356]
[-166.61511230 2.42866206]
[-177.69128418 -8.43864059]
[-180.23123169 -23.74642372]
[-173.25831604 -37.60853577]
[-159.45376587 -44.69470596]
[-144.12570190 -42.28016281]
[-133.16807556 -31.29334450]
[-130.79432678 -15.95890713]
[-117.39414215 -9.21835136]
[-103.99396515 -2.47779489]
[-90.47943115 4.03046131]
[-76.85457611 10.30447769]
[-63.22971725 16.57849503]
[-49.60486221 22.85251236]
[-35.98000336 29.12652969]
[-22.35514832 35.40054703]
[-8.73029137 41.67456436]
[4.89456463 47.94858170]
[18.51942062 54.22259903]
[32.14427567 60.49661255]
[46.94102478 58.79204941]
[56.23978424 71.59219360]
[69.86463928 77.86620331]
[83.48949432 84.14022064]
[99.91247559 77.10630035]
[116.38875580 84.01445007]
[122.88442230 100.65766144]
[136.90966797 105.97673798]
[150.93490601 111.29581451]
[159.56787109 104.41075134]
[170.22868347 101.86598969]
[180.88015747 104.07622528]
[189.51716614 110.55426025]
[194.54409790 120.01629639]
[195.06942749 130.63583374]
[208.46960449 137.37638855]
[221.86978149 144.11694336]
[237.67501831 143.40625000]
[245.56796265 156.03759766]
[258.96813965 162.77815247]
[272.36831665 169.51870728]
[285.76849365 176.25926208]
[299.16870117 182.99981689]
[312.56887817 189.74037170]
[325.79943848 181.80593872]
[341.21868896 182.30688477]
[353.90634155 191.08337402]
[359.81384277 205.33486938]
[357.05612183 220.51374817]
[346.51318359 231.77650452]
[331.54919434 235.52922058]
[316.93914795 230.57443237]
[307.34503174 218.49317932]
[305.82830811 203.14056396]
[292.42813110 196.40000916]
[279.02795410 189.65943909]
[265.62777710 182.91888428]
[252.22758484 176.17832947]
[238.82740784 169.43777466]
[223.98063660 170.63059998]
[215.12922668 157.51713562]
[201.72904968 150.77658081]
[188.32885742 144.03601074]
[170.59898376 151.63761902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 55]
[2 54]
[3 53]
[8 50]
[9 49]
[10 48]
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 36]
[24 35]
[25 34]
[61 89]
[62 88]
[63 87]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
