%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUCCCGCCCGCCCGCAGACGACCGCCGUUCUGUUGCCGCGUCCUAGGAGGGCCAGAUUGGUGGCUGUGGGGACUUUUGG\
) } def
/len { sequence length } bind def

/coor [
[73.50875854 240.30039978]
[66.00875854 253.29077148]
[58.50875473 266.28115845]
[51.00875473 279.27154541]
[53.75541687 295.07772827]
[43.00279236 306.98403931]
[26.99937630 305.85699463]
[18.02161980 292.56115723]
[22.95648956 277.29595947]
[38.01837540 271.77154541]
[45.51837540 258.78115845]
[53.01837540 245.79077148]
[60.51837540 232.80039978]
[55.50094604 208.27934265]
[75.39440155 192.12544250]
[78.18307495 177.38694763]
[80.97174835 162.64845276]
[83.76042938 147.90995789]
[86.54910278 133.17144775]
[89.33777618 118.43296051]
[92.12644958 103.69445801]
[90.39949799 100.84986877]
[89.78253174 97.25851440]
[90.57492065 93.37649536]
[92.88435364 89.77104950]
[96.58898163 87.04006195]
[101.54316711 72.88181305]
[106.49735260 58.72356033]
[111.45153809 44.56531143]
[116.40572357 30.40706253]
[121.35990906 16.24881172]
[118.61470795 0.66759127]
[130.12136841 -8.78999996]
[135.07556152 -22.94824982]
[140.02973938 -37.10649872]
[144.98393250 -51.26475143]
[144.07829285 -58.22073746]
[146.60763550 -63.65869522]
[150.87385559 -66.27204895]
[156.87223816 -80.02048492]
[162.87062073 -93.76892090]
[152.87568665 -105.30426025]
[148.88385010 -120.03612518]
[151.68768311 -135.03950500]
[160.73049927 -147.33544922]
[174.21681213 -154.48260498]
[189.46893311 -155.06188965]
[203.45854187 -148.95829773]
[213.40795898 -137.38368225]
[217.34176636 -122.63620758]
[214.47886658 -107.64398956]
[205.38769531 -95.38375092]
[191.87333679 -88.28975677]
[176.61904907 -87.77053833]
[170.62066650 -74.02210236]
[164.62229919 -60.27367020]
[159.14218140 -46.31056595]
[154.18798828 -32.15231323]
[149.23381042 -17.99406433]
[144.27961731 -3.83581424]
[147.37918091 10.73271370]
[135.51815796 21.20299721]
[130.56398010 35.36124802]
[125.60978699 49.51949692]
[120.65560150 63.67774963]
[115.70141602 77.83599854]
[110.74723053 91.99424744]
[106.86494446 106.48313904]
[104.07627106 121.22163391]
[101.28759766 135.96012878]
[98.49892426 150.69862366]
[95.71025085 165.43711853]
[92.92157745 180.17561340]
[90.13290405 194.91412354]
[95.31857300 198.75523376]
[99.32823181 203.77709961]
[101.90428925 209.63484192]
[102.88697815 215.93069458]
[102.22424316 222.24099731]
[99.97427368 228.14469910]
[96.30068970 233.25149536]
[91.46071625 237.22760010]
[85.78723145 239.81752014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 69]
[21 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[33 60]
[34 59]
[35 58]
[36 57]
[39 56]
[40 55]
[41 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
