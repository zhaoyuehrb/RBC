%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUGGCCCUUCGAGCCAGCUCCGCCCCGUUGUUCCUGGCUUGAGUAGGGCAGAGAGCACCGCCCAGCAGCCAGUGGGUUCCCGCGCGUGCCGAGACUCUGAGGCCUUGCACCCCCACGAUCCCGUACG\
) } def
/len { sequence length } bind def

/coor [
[135.76252747 168.58222961]
[150.49247742 165.75093079]
[138.00794983 157.43608093]
[125.52342987 149.12123108]
[113.03890991 140.80638123]
[100.55438995 132.49153137]
[85.90242004 129.27908325]
[71.08428955 131.60783386]
[56.26616287 133.93658447]
[41.44803238 136.26533508]
[26.62990570 138.59408569]
[11.87188053 141.27749634]
[-2.81755495 144.31402588]
[-17.50699043 147.35055542]
[-32.19642639 150.38706970]
[-46.88586044 153.42359924]
[-61.57529831 156.46012878]
[-76.26473236 159.49665833]
[-90.95417023 162.53317261]
[-105.64360046 165.56970215]
[-112.10749054 179.55270386]
[-125.41008759 186.96176147]
[-140.34797668 185.13865662]
[-151.21786499 174.99058533]
[-165.90728760 178.02709961]
[-174.37843323 191.36933899]
[-189.82081604 194.73213196]
[-203.07275391 186.12040710]
[-206.27209473 170.64334106]
[-197.52073669 157.48320007]
[-182.01069641 154.44766235]
[-168.94381714 163.33767700]
[-154.25437927 160.30114746]
[-148.29898071 146.67501831]
[-135.30824280 139.07865906]
[-120.15831757 140.60615540]
[-108.68013000 150.88026428]
[-93.99069214 147.84373474]
[-79.30125427 144.80722046]
[-64.61182404 141.77069092]
[-49.92238617 138.73416138]
[-35.23295212 135.69763184]
[-20.54351616 132.66111755]
[-5.85408068 129.62458801]
[8.83535480 126.58806610]
[12.20574284 123.07735443]
[17.85121918 121.70972443]
[24.30115509 123.77596283]
[39.11928177 121.44721222]
[53.93741226 119.11846161]
[68.75553894 116.78971100]
[83.57366943 114.46096039]
[79.66166687 104.47311401]
[81.05487061 94.36969757]
[86.89196014 86.65804291]
[95.27374268 83.00146484]
[97.78000641 68.21232605]
[100.28626251 53.42318726]
[102.79252625 38.63404846]
[101.13291931 29.54812050]
[105.54028320 23.52210999]
[108.40045929 8.79732132]
[111.26063538 -5.92746735]
[114.12080383 -20.65225601]
[102.47548676 -30.66635132]
[97.41253662 -45.16677094]
[100.29386902 -60.25297165]
[110.34442139 -71.86684418]
[124.86063385 -76.88431549]
[139.93772888 -73.95571136]
[151.52005005 -63.86880875]
[156.49198914 -49.33693314]
[153.51614380 -34.26909256]
[143.39297485 -22.71845245]
[128.84559631 -17.79208374]
[125.98542023 -3.06729412]
[123.12524414 11.65749454]
[120.26507568 26.38228416]
[117.58166504 41.14030838]
[115.07540131 55.92944717]
[112.56914520 70.71858978]
[110.06288147 85.50772858]
[119.67526245 101.87139893]
[108.86923981 120.00700378]
[121.35375977 128.32185364]
[133.83828735 136.63670349]
[146.32279968 144.95155334]
[158.80732727 153.26640320]
[198.74848938 138.28062439]
[213.61819458 140.25337219]
[228.48789978 142.22613525]
[243.35762024 144.19888306]
[252.37797546 142.21357727]
[258.55859375 146.40136719]
[273.37673950 148.73011780]
[288.19485474 151.05886841]
[303.02893066 145.55786133]
[314.40066528 155.17726135]
[329.21878052 157.50601196]
[344.31881714 151.10902405]
[357.24398804 161.20216370]
[354.69802856 177.40248108]
[339.29998779 183.04446411]
[326.89004517 172.32412720]
[312.07189941 169.99537659]
[298.29772949 175.66296387]
[285.86611938 165.87699890]
[271.04797363 163.54824829]
[256.22985840 161.21949768]
[241.38485718 159.06858826]
[226.51515198 157.09584045]
[211.64544678 155.12309265]
[196.77574158 153.15032959]
[192.25175476 159.13227844]
[204.21549988 168.18041992]
[195.16716003 180.14401245]
[183.20379639 171.09614563]
[178.67980957 177.07809448]
[184.62713623 190.84869385]
[190.57444763 204.61929321]
[204.04867554 213.96685791]
[202.42111206 230.28503418]
[187.36604309 236.78709412]
[174.37083435 226.78427124]
[176.80383301 210.56660461]
[170.85652161 196.79600525]
[164.90921021 183.02540588]
[159.48815918 197.01155090]
[145.50584412 202.44245911]
[132.06552124 195.78233337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 88]
[3 87]
[4 86]
[5 85]
[6 84]
[7 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[24 33]
[25 32]
[56 82]
[57 81]
[58 80]
[59 79]
[61 78]
[62 77]
[63 76]
[64 75]
[89 113]
[90 112]
[91 111]
[92 110]
[94 109]
[95 108]
[96 107]
[98 105]
[99 104]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
