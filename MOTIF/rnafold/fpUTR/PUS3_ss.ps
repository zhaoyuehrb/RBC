%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGUGACAGCUUCCUUUCUCGGAAACGCGGCGCGGCCGGCUGCCGGAAAACAGGGCAGACCUGUAUGGUUCGUUUAUUCCUGGGGUUGUCAUAUC\
) } def
/len { sequence length } bind def

/coor [
[85.65449524 325.72903442]
[71.16143036 320.44183350]
[61.84576797 308.14459229]
[60.68010712 292.76132202]
[68.03639984 279.20077515]
[81.56729126 271.79006958]
[82.51864624 256.82028198]
[83.47000885 241.85047913]
[84.42136383 226.88067627]
[85.37272644 211.91087341]
[86.32408142 196.94107056]
[87.27544403 181.97128296]
[88.22679901 167.00148010]
[89.17816162 152.03167725]
[90.12951660 137.06187439]
[91.08087921 122.09207916]
[73.66213989 105.21343231]
[79.10685730 78.64855957]
[67.17042542 69.56441498]
[55.23400116 60.48027039]
[43.29757309 51.39612198]
[34.39886856 48.61449814]
[31.13263130 41.82950974]
[19.49043465 32.37121964]
[7.84823847 22.91292763]
[-5.03967428 28.60177803]
[-19.05331421 28.14451599]
[-31.42498207 21.68915367]
[-39.73628616 10.56262207]
[-42.39081955 -3.00157213]
[-38.92054749 -16.31158447]
[-50.25679016 -26.13449478]
[-61.59303284 -35.95740509]
[-72.92927551 -45.78031540]
[-88.85920715 -51.58322525]
[-87.69292450 -68.49700928]
[-71.11727142 -72.05850220]
[-63.10636520 -57.11656189]
[-51.77012253 -47.29364777]
[-40.43387985 -37.47073746]
[-29.09763527 -27.64782715]
[-14.05164051 -33.30346680]
[1.89394152 -30.63640976]
[14.42429161 -20.27354240]
[20.10127831 -4.93692493]
[17.30652809 11.27073097]
[28.94872475 20.72902107]
[40.59092331 30.18731117]
[52.38171768 39.45969391]
[64.31814575 48.54384232]
[76.25457764 57.62798691]
[88.19100189 66.71213531]
[103.07032013 64.81324768]
[112.34270477 53.02244949]
[121.61509705 41.23165131]
[130.88748169 29.44085503]
[140.15986633 17.65005875]
[139.69061279 1.61387014]
[152.02824402 -8.64100933]
[167.70837402 -5.24791384]
[174.70254517 9.19026470]
[167.64544678 23.59779167]
[151.95065308 26.92244339]
[142.67826843 38.71324158]
[133.40588379 50.50403595]
[124.13350677 62.29483414]
[114.86112213 74.08563232]
[120.20663452 80.82439423]
[123.05826569 88.33542633]
[123.45046997 95.79454803]
[138.29779053 97.92926788]
[147.72883606 85.80693054]
[161.96354675 80.03906250]
[177.17289734 82.17720032]
[189.26560974 91.64618683]
[194.98883057 105.89891815]
[192.80302429 121.10147858]
[183.29618835 133.16445923]
[169.02558899 138.84297180]
[153.82994080 136.60952759]
[141.79682922 127.06491852]
[136.16307068 112.77658844]
[121.31575012 110.64186859]
[115.02265167 118.49136353]
[106.05067444 123.04343414]
[105.09931946 138.01322937]
[104.14795685 152.98303223]
[103.19660187 167.95283508]
[102.24523926 182.92263794]
[101.29388428 197.89244080]
[100.34252167 212.86222839]
[99.39116669 227.83203125]
[98.43980408 242.80183411]
[97.48844910 257.77163696]
[96.53708649 272.74142456]
[109.02098083 281.80541992]
[114.60142517 296.18814087]
[111.49774170 311.30007935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[18 52]
[19 51]
[20 50]
[21 49]
[23 48]
[24 47]
[25 46]
[31 41]
[32 40]
[33 39]
[34 38]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[70 83]
[71 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
