%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:21:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGGUUUGCGGAGCGGUCGGGUGUAUUCUCCGCCGCCCCCACGCCCUCGAGGUCCCCGCCACCGAACCAGCGGCGGAGCCCGCCCGCGCCUCCCGCGGCAUUCCCGCACCGGAUCGCUCCUCGCUGGGGCGGGACCUGGCCUGGCGGCUCUGGUCACU\
) } def
/len { sequence length } bind def

/coor [
[50.09458160 164.91903687]
[56.51369095 151.36193848]
[68.21202850 141.96934509]
[75.59581757 128.91256714]
[82.97960663 115.85578156]
[70.23996735 123.77420807]
[57.50032425 131.69264221]
[49.86418915 145.54904175]
[34.97031403 145.69635010]
[22.23067093 153.61477661]
[16.55807495 160.84024048]
[9.16429996 161.56060791]
[-3.72741985 169.22895813]
[-11.63246250 182.93373108]
[-26.52637863 182.79040527]
[-39.41809845 190.45875549]
[-52.30981827 198.12710571]
[-65.20153809 205.79545593]
[-71.01403809 212.90885925]
[-78.42045593 213.48483276]
[-91.45934296 220.90017700]
[-104.49823761 228.31552124]
[-117.53712463 235.73086548]
[-120.17450714 251.14443970]
[-132.13587952 261.21716309]
[-147.77343750 261.19299316]
[-159.70362854 251.08334351]
[-162.29335022 235.66169739]
[-154.31983948 222.20967102]
[-139.54792786 217.07890320]
[-124.95246887 222.69198608]
[-111.91358185 215.27662659]
[-98.87469482 207.86128235]
[-85.83580780 200.44593811]
[-72.86988831 192.90373230]
[-59.97816467 185.23538208]
[-47.08644485 177.56703186]
[-34.19472504 169.89868164]
[-27.21178627 156.74240112]
[-11.39576817 156.33723450]
[1.49595165 148.66888428]
[14.31224251 140.87513733]
[27.05188560 132.95671082]
[33.77679443 119.66667175]
[49.58189392 118.95299530]
[62.32153702 111.03456116]
[75.06118011 103.11613464]
[78.39260101 93.48137665]
[84.83241272 86.95483398]
[92.52052307 84.24271393]
[99.61515045 85.12612915]
[104.69856262 88.61614990]
[112.98643494 76.11370087]
[121.27429962 63.61125183]
[129.56216431 51.10880280]
[137.85003662 38.60634995]
[146.13789368 26.10389900]
[154.42576599 13.60144901]
[156.57624817 4.67054224]
[162.99929810 0.93808615]
[171.52954102 -11.40027332]
[180.05976868 -23.73863220]
[165.11500549 -22.45256424]
[153.52278137 -31.97204208]
[151.87776184 -46.88156509]
[161.11578369 -58.69931412]
[175.98144531 -60.70233154]
[188.01788330 -51.75112915]
[190.37814331 -36.93964767]
[200.29122925 -48.19712067]
[210.20433044 -59.45458984]
[220.11741638 -70.71205902]
[230.03050232 -81.96952820]
[239.94358826 -93.22700500]
[249.85668945 -104.48447418]
[253.20323181 -113.03937531]
[260.07470703 -115.86245728]
[270.20556641 -126.92436218]
[280.33639526 -137.98626709]
[290.46725464 -149.04817200]
[300.59811401 -160.11007690]
[293.03967285 -178.43547058]
[300.20263672 -199.78009033]
[321.86877441 -212.67977905]
[328.63946533 -226.06474304]
[335.41018677 -239.44972229]
[336.50271606 -248.57067871]
[342.44583130 -253.02787781]
[349.47640991 -266.27819824]
[356.50698853 -279.52850342]
[353.19674683 -295.22634888]
[363.51666260 -307.50961304]
[379.55014038 -306.95568848]
[388.99771118 -293.98944092]
[384.61196899 -278.55749512]
[369.75729370 -272.49792480]
[362.72671509 -259.24758911]
[355.69613647 -245.99728394]
[348.79516602 -232.67900085]
[342.02444458 -219.29403687]
[335.25375366 -205.90905762]
[340.42611694 -200.47799683]
[351.28842163 -210.82260132]
[361.63284302 -199.96014404]
[350.77087402 -189.61587524]
[355.94326782 -184.18479919]
[369.64248657 -190.29476929]
[383.34170532 -196.40472412]
[395.34439087 -208.37849426]
[410.17291260 -200.15953064]
[406.38009644 -183.63526917]
[389.45166016 -182.70552063]
[375.75244141 -176.59555054]
[362.05322266 -170.48559570]
[353.45950317 -154.52575684]
[339.47775269 -145.40277100]
[324.25552368 -144.23211670]
[311.66003418 -149.97923279]
[301.52917480 -138.91732788]
[291.39831543 -127.85541534]
[281.26745605 -116.79351044]
[271.13659668 -105.73160553]
[261.11416626 -94.57138062]
[251.20106506 -83.31391144]
[241.28797913 -72.05644226]
[231.37487793 -60.79896927]
[221.46179199 -49.54150009]
[211.54870605 -38.28403091]
[201.63562012 -27.02655792]
[192.39813232 -15.20839977]
[183.86790466 -2.87003970]
[175.33766174 9.46831989]
[166.92820740 21.88931656]
[158.64035034 34.39176559]
[150.35247803 46.89421844]
[142.06462097 59.39666748]
[133.77674866 71.89911652]
[125.48888397 84.40156555]
[117.20101166 96.90402222]
[117.34735870 111.90330505]
[125.87759399 124.24166107]
[134.40782166 136.58001709]
[142.93806458 148.91838074]
[157.98266602 155.44461060]
[159.58403015 171.76539612]
[146.09478760 181.09129333]
[131.39152527 173.82864380]
[130.59970093 157.44862366]
[122.06946564 145.11026001]
[113.53923798 132.77189636]
[105.00900269 120.43354034]
[106.57965851 135.35107422]
[108.15032196 150.26861572]
[115.13751984 163.54187012]
[115.62513733 178.53393555]
[109.51521301 192.23316956]
[98.03514862 201.88760376]
[83.49108887 205.55780029]
[68.80471802 202.50650024]
[56.92628479 193.34664917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[9 43]
[10 42]
[12 41]
[13 40]
[15 38]
[16 37]
[17 36]
[18 35]
[20 34]
[21 33]
[22 32]
[23 31]
[52 139]
[53 138]
[54 137]
[55 136]
[56 135]
[57 134]
[58 133]
[60 132]
[61 131]
[62 130]
[69 129]
[70 128]
[71 127]
[72 126]
[73 125]
[74 124]
[75 123]
[77 122]
[78 121]
[79 120]
[80 119]
[81 118]
[84 101]
[85 100]
[86 99]
[88 98]
[89 97]
[90 96]
[106 114]
[107 113]
[108 112]
[140 151]
[141 150]
[142 149]
[143 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
