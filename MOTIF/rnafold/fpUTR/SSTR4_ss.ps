%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGCUCUCUGGCGCAGCGCUAGCUCCGCCGCGCUCAGCUGCCCUGCGCCGGCACCCCUGGUC\
) } def
/len { sequence length } bind def

/coor [
[115.49126434 337.46777344]
[114.04355621 322.53781128]
[112.59584808 307.60784912]
[98.29087067 303.33035278]
[86.68196106 293.87631226]
[79.55779266 280.66226196]
[78.03138733 265.68704224]
[82.36632538 251.22944641]
[91.93186188 239.50155640]
[105.29449463 232.31018066]
[103.84677887 217.38020325]
[102.39907074 202.45022583]
[100.95136261 187.52024841]
[99.50365448 172.59028625]
[98.05594635 157.66030884]
[96.60823822 142.73033142]
[95.16053009 127.80036163]
[93.71282196 112.87038422]
[85.74292755 101.38246155]
[91.35720825 88.57732391]
[89.90950012 73.64735413]
[85.83992767 65.05146027]
[88.77046204 57.96374512]
[88.04576111 42.98126221]
[87.32106781 27.99877930]
[86.59636688 13.01629543]
[75.17665100 2.42252421]
[74.65513611 -12.78216839]
[84.82505035 -23.60383034]
[84.10034943 -38.58631516]
[77.29582977 -54.11483002]
[90.33380890 -64.95214844]
[104.35687256 -55.42377090]
[99.08283234 -39.31101608]
[99.80753326 -24.32853127]
[110.97441864 -14.53892708]
[111.92279816 0.64511812]
[101.57884979 12.29159451]
[102.30355072 27.27407837]
[103.02825165 42.25656128]
[103.75295258 57.23904419]
[104.83946991 72.19963837]
[106.28717804 87.12961578]
[114.25707245 98.61753845]
[108.64279175 111.42267609]
[110.09049988 126.35264587]
[111.53821564 141.28262329]
[112.98592377 156.21260071]
[114.43363190 171.14257812]
[115.88134003 186.07254028]
[117.32904816 201.00251770]
[118.77675629 215.93249512]
[120.22446442 230.86247253]
[134.71980286 235.35255432]
[146.36038208 245.02415466]
[153.39225769 258.37954712]
[154.77142334 273.36904907]
[150.31874084 287.70568848]
[140.74247742 299.21395874]
[127.52582550 306.16012573]
[128.97352600 321.09011841]
[130.42123413 336.02008057]
[137.96804810 351.20172119]
[125.46888733 362.65628052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[10 53]
[11 52]
[12 51]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[20 43]
[21 42]
[23 41]
[24 40]
[25 39]
[26 38]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
