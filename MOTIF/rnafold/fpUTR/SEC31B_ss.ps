%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAGGAGCGGCUCCGGCCGCCGCGCCUGACCCUUGUCCGGGGUCUUCCGCACAGUGGGCUGAGGGCCAUGUCAGUUUUCUGCCACCUACAGGAUAGACC\
) } def
/len { sequence length } bind def

/coor [
[105.00449371 226.14524841]
[116.31837463 215.65716553]
[113.58859253 200.90765381]
[99.37532043 192.06324768]
[95.80558014 175.36470032]
[105.53504181 160.92544556]
[102.35671997 146.26603699]
[99.17840576 131.60661316]
[87.78930664 129.16423035]
[78.05748749 122.76355743]
[65.38277435 130.78550720]
[52.70805740 138.80744934]
[40.03334045 146.82939148]
[27.35862541 154.85133362]
[20.22659111 169.61839294]
[3.85423470 170.55540466]
[-4.91596842 156.69842529]
[2.93801546 142.30235291]
[19.33668137 142.17662048]
[32.01139450 134.15467834]
[44.68611145 126.13272858]
[57.36082840 118.11078644]
[70.03554535 110.08884430]
[68.61772156 96.15213776]
[73.36055756 82.97080994]
[62.99934006 72.12436676]
[52.63812637 61.27793121]
[37.35486221 63.20875549]
[24.02104187 55.85602570]
[17.64888954 42.22299194]
[20.49225807 27.62664604]
[10.13104248 16.78020859]
[-0.23017168 5.93376923]
[-10.59138584 -4.91266966]
[-20.95260048 -15.75910854]
[-31.31381607 -26.60554695]
[-47.25523376 -28.40852737]
[-55.66254044 -42.07223129]
[-50.08636475 -57.11503220]
[-34.80427933 -61.99737930]
[-21.53938484 -52.97395706]
[-20.46737671 -36.96676254]
[-10.10616207 -26.12032318]
[0.25505233 -15.27388382]
[10.61626720 -4.42744541]
[20.97748184 6.41899300]
[31.33869553 17.26543236]
[46.04980850 15.09260941]
[59.37714767 22.08160591]
[66.11235046 35.73775482]
[63.48456192 50.91671753]
[73.84577942 61.76315308]
[84.20699310 72.60959625]
[105.27911377 68.82654572]
[123.93074036 79.33666992]
[137.28543091 72.50643921]
[150.64013672 65.67620850]
[159.40344238 52.50369644]
[174.25785828 53.59696579]
[187.61256409 46.76673508]
[200.96725464 39.93650436]
[214.32196045 33.10626984]
[227.67665100 26.27603912]
[241.03135681 19.44580650]
[254.38604736 12.61557484]
[256.65695190 -2.73442912]
[267.54067993 -13.79445457]
[282.85220337 -16.31169510]
[296.70394897 -9.31822014]
[303.76962280 4.49683523]
[301.33236694 19.82130241]
[290.32928467 30.76260948]
[274.99133301 33.11360168]
[261.21627808 25.97027206]
[247.86158752 32.80050278]
[234.50688171 39.63073730]
[221.15219116 46.46096802]
[207.79748535 53.29119873]
[194.44279480 60.12143326]
[181.08810425 66.95166016]
[173.28001404 79.63563538]
[157.47036743 79.03090668]
[144.11566162 85.86113739]
[130.76097107 92.69136810]
[131.44482422 103.29790497]
[128.57525635 113.53175354]
[122.47651672 122.23645020]
[113.83781433 128.42829895]
[117.01613617 143.08770752]
[120.19445038 157.74711609]
[132.36672974 163.74743652]
[138.71922302 175.51785278]
[137.10203552 188.59785461]
[128.33810425 198.17787170]
[131.06788635 212.92738342]
[145.38598633 218.67160034]
[154.30693054 231.25810242]
[154.98411560 246.67059326]
[147.20143127 259.99099731]
[133.44230652 266.96884155]
[118.09723663 265.37750244]
[106.06277466 255.72476196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 95]
[3 94]
[6 90]
[7 89]
[8 88]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[25 53]
[26 52]
[27 51]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[55 84]
[56 83]
[57 82]
[59 80]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
