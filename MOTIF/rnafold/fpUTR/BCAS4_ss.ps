%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUGGGUGGCGCUGCCCGCUCGGCCCGGCGCUCCUGGAGCUGCGAGCCGCGACCGCCGGGAGCGCACCUGCCCCGCCUCCGCCAGGCGGUCCGCGGGGC\
) } def
/len { sequence length } bind def

/coor [
[102.51771545 140.41920471]
[88.19959259 138.74018860]
[75.37681580 132.15199280]
[64.20885468 142.16581726]
[53.04089355 152.17962646]
[41.87293243 162.19345093]
[30.70496941 172.20727539]
[19.53700829 182.22109985]
[8.36904716 192.23492432]
[-2.79891491 202.24874878]
[-3.40840364 218.04127502]
[-15.06297684 228.71585083]
[-30.84818268 227.93942261]
[-41.39893723 216.17263794]
[-40.45566940 200.39653015]
[-28.57799721 189.97076416]
[-12.81273746 191.08078003]
[-1.64477539 181.06695557]
[9.52318668 171.05313110]
[20.69114876 161.03932190]
[31.85910988 151.02549744]
[43.02707291 141.01167297]
[54.19503403 130.99784851]
[65.36299133 120.98402405]
[60.27922440 107.89376068]
[59.97148132 93.85433960]
[64.47676849 80.55387878]
[73.25337219 69.59162140]
[85.24599457 62.28566742]
[82.46277618 47.54613876]
[79.67955780 32.80661011]
[76.89633942 18.06708336]
[74.11312866 3.32755399]
[71.32991028 -11.41197491]
[68.54669189 -26.15150261]
[65.76347351 -40.89103317]
[62.98025894 -55.63056183]
[60.19704437 -70.37008667]
[44.87140656 -77.32356262]
[36.73327637 -91.86551666]
[38.78122711 -108.23711395]
[50.02350998 -120.08679199]
[46.78324127 -134.73263550]
[43.54297256 -149.37847900]
[40.30270767 -164.02432251]
[30.97759056 -178.18336487]
[42.00184250 -191.06365967]
[57.43059540 -184.03585815]
[54.94854736 -167.26458740]
[58.18881607 -152.61874390]
[61.42908478 -137.97290039]
[64.66934967 -123.32706451]
[77.43842316 -119.10717773]
[86.49392700 -109.01790619]
[89.35996246 -95.65586090]
[85.17265320 -82.53293610]
[74.93656921 -73.15330505]
[77.71978760 -58.41377640]
[80.50300598 -43.67424774]
[83.28622437 -28.93471909]
[86.06943512 -14.19519138]
[88.85265350 0.54433757]
[91.63587189 15.28386593]
[94.41909027 30.02339554]
[97.20230103 44.76292419]
[99.98551941 59.50245285]
[115.69316101 62.66668701]
[128.94412231 71.67527771]
[137.66400146 85.11798096]
[140.48776245 100.89038849]
[136.97334290 116.52340698]
[149.29768372 125.07389069]
[161.62202454 133.62437439]
[173.94635010 142.17486572]
[186.27069092 150.72534180]
[198.59501648 159.27583313]
[210.91935730 167.82630920]
[227.98046875 164.36775208]
[242.03886414 174.05487061]
[244.77278137 190.56744385]
[257.35705566 198.73051453]
[269.94137573 206.89356995]
[282.52566528 215.05664062]
[299.10437012 218.60375977]
[300.28530884 235.51652527]
[284.36044312 241.33323669]
[274.36257935 227.64093018]
[261.77828979 219.47785950]
[249.19400024 211.31480408]
[236.60971069 203.15173340]
[224.40240479 207.58609009]
[211.69535828 204.07409668]
[203.25073242 193.69676208]
[202.36886597 180.15065002]
[190.04454041 171.60015869]
[177.72019958 163.04968262]
[165.39587402 154.49919128]
[153.07153320 145.94871521]
[140.74719238 137.39822388]
[128.42286682 128.84774780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 24]
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[42 52]
[43 51]
[44 50]
[45 49]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
