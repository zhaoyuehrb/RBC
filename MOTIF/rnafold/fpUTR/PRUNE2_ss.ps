%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGGAGCAGUCGGUCGCUGCGCCCCGGCGGGCCACUUUCCCGGGACCCCGCUCGUCUUCCUUGGGCCGAGAUUUUCCACUGCGCCCCUCCGAGUACCCGGGUUCCAAACCCCUAGCCACGAC\
) } def
/len { sequence length } bind def

/coor [
[256.67721558 258.36529541]
[245.87258911 247.96051025]
[235.06794739 237.55570984]
[224.26332092 227.15090942]
[213.45867920 216.74610901]
[202.65405273 206.34130859]
[185.45491028 203.10427856]
[180.38095093 185.45703125]
[169.31825256 175.32704163]
[158.25555420 165.19705200]
[147.19285583 155.06706238]
[136.13015747 144.93707275]
[128.99258423 142.71548462]
[124.92082214 134.41079712]
[114.11618805 124.00600433]
[97.08337402 127.69563293]
[81.19280243 120.53884125]
[72.66767883 105.33843994]
[74.84669495 88.04734802]
[63.53292084 78.19856262]
[47.98253632 79.10594177]
[36.64906693 68.95670319]
[35.87984848 54.12619781]
[24.56607819 44.27741241]
[13.25230694 34.42862701]
[1.93853641 24.57983971]
[-10.30655193 15.91624928]
[-23.35930824 8.52533913]
[-36.50391006 1.29903376]
[-49.73827744 -5.76152515]
[-62.97264481 -12.82208443]
[-76.20701599 -19.88264275]
[-89.44138336 -26.94320297]
[-102.93246460 -33.49993896]
[-116.66107941 -39.54353714]
[-129.99832153 -31.61273003]
[-145.44685364 -33.06952667]
[-157.06642151 -43.35375977]
[-160.38903809 -58.51092911]
[-154.13711548 -72.71279907]
[-140.71463013 -80.49845123]
[-125.28279877 -78.87415314]
[-113.77548218 -68.46447754]
[-110.61748505 -53.27215195]
[-96.88886261 -47.22855759]
[-93.39860535 -48.23438644]
[-89.23692322 -47.52772522]
[-85.24836731 -44.80758286]
[-82.38082123 -40.17757034]
[-69.14645386 -33.11701202]
[-55.91208649 -26.05645180]
[-42.67771912 -18.99589348]
[-29.44334984 -11.93533421]
[-21.97753525 -11.55858898]
[-15.96839809 -4.52741766]
[-2.91564226 2.86349273]
[-6.99079943 -11.57233429]
[-1.98456025 -25.71226311]
[10.26613426 -34.36792374]
[25.26613426 -34.36329651]
[37.51148224 -25.70007515]
[42.50899506 -11.55706120]
[38.42493057 2.87624836]
[26.75785637 12.30383396]
[11.78732300 13.26606846]
[23.10109329 23.11485481]
[34.41486359 32.96364212]
[45.72863388 42.81242752]
[60.52367020 41.53080750]
[72.13774109 51.35770798]
[73.38170624 66.88478851]
[84.69548035 76.73358154]
[96.09317017 72.42661285]
[108.23871613 73.39777374]
[118.80719757 79.46115875]
[125.77558899 89.45610046]
[127.80998993 101.46936798]
[124.52098846 113.20136261]
[135.32562256 123.60616302]
[146.26014709 133.87437439]
[157.32284546 144.00436401]
[168.38554382 154.13435364]
[179.44824219 164.26434326]
[190.51094055 174.39433289]
[203.48013306 174.62432861]
[212.49452209 183.38319397]
[213.05885315 195.53668213]
[223.86347961 205.94148254]
[234.66812134 216.34628296]
[245.47274780 226.75106812]
[256.27737427 237.15586853]
[267.08203125 247.56066895]
[282.21273804 239.01483154]
[299.20635986 235.46574402]
[316.45883179 237.23788452]
[332.34487915 244.15391541]
[345.37112427 255.55241394]
[354.31640625 270.35113525]
[358.34634399 287.14968872]
[357.09106445 304.36212158]
[350.67919922 320.36663818]
[362.47354126 329.63455200]
[374.26785278 338.90243530]
[386.06219482 348.17031860]
[397.85650635 357.43823242]
[414.04641724 362.47042847]
[413.69271851 379.42068481]
[397.30694580 383.77307129]
[388.58862305 369.23254395]
[376.79428101 359.96466064]
[364.99996948 350.69677734]
[353.20562744 341.42886353]
[341.41131592 332.16098022]
[331.27639771 340.01525879]
[319.61587524 345.36901855]
[307.03619385 347.93945312]
[294.19259644 347.58859253]
[281.75506592 344.33074951]
[270.37319946 338.33203125]
[260.64248657 329.90170288]
[253.07296753 319.47647095]
[248.06268311 307.59768677]
[245.87655640 294.88330078]
[246.63253784 281.99572754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[14 79]
[15 78]
[19 72]
[20 71]
[23 68]
[24 67]
[25 66]
[26 65]
[27 56]
[28 55]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 45]
[35 44]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
