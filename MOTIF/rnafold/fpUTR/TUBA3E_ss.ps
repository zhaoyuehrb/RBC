%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGCGCGCGUGGGCAGGUCAUUGCAGUUGGGCGCUCAGCAGCUGUGGCAGCCGGUUGAGGUCUGGAAGUAGCGUUGGGCUGAAGCAGCGGAGUUCGCC\
) } def
/len { sequence length } bind def

/coor [
[94.53298187 357.07507324]
[87.01409149 342.50119019]
[96.10247040 328.85079956]
[96.56439209 313.85791016]
[97.02632141 298.86502075]
[97.25730896 283.86679077]
[97.25730896 268.86679077]
[87.64917755 254.27105713]
[96.75931549 238.36163330]
[96.29739380 223.36874390]
[95.83546448 208.37585449]
[82.16239929 202.41659546]
[72.39246368 191.06504822]
[68.50405884 176.53778076]
[71.32017517 161.70236206]
[80.33487701 149.51129150]
[93.80321503 142.41444397]
[93.34129333 127.42156219]
[92.87936401 112.42867279]
[85.68284607 100.44110870]
[92.12774658 88.03324890]
[91.66582489 73.04036713]
[91.20389557 58.04748154]
[83.04528809 44.49212265]
[90.38698578 31.53261757]
[89.92505646 16.53973198]
[89.46313477 1.54684544]
[74.12336731 -11.16819286]
[72.81814575 -30.75118446]
[85.93066406 -44.95164871]
[84.08733368 -59.83795929]
[82.24401093 -74.72426605]
[80.40068817 -89.61057281]
[78.55736542 -104.49687958]
[76.71403503 -119.38318634]
[72.48905182 -127.68247986]
[75.05046844 -134.75541687]
[73.66644287 -149.69142151]
[72.28241730 -164.62744141]
[70.89839172 -179.56346130]
[69.51436615 -194.49946594]
[68.13034058 -209.43548584]
[57.13416672 -224.10479736]
[64.87583160 -239.77062988]
[63.03250885 -254.65693665]
[61.18918228 -269.54324341]
[59.34585953 -284.42956543]
[51.39890289 -299.40560913]
[63.58975220 -311.18777466]
[78.28623199 -302.73498535]
[74.23217010 -286.27288818]
[76.07549286 -271.38656616]
[77.91881561 -256.50027466]
[79.76213837 -241.61395264]
[89.17031860 -233.83877563]
[90.73870087 -221.32833862]
[83.06635284 -210.81950378]
[84.45037842 -195.88349915]
[85.83440399 -180.94747925]
[87.21842957 -166.01145935]
[88.60245514 -151.07545471]
[89.98648071 -136.13943481]
[91.60034943 -121.22650909]
[93.44367218 -106.34020233]
[95.28699493 -91.45389557]
[97.13031769 -76.56758881]
[98.97364044 -61.68128204]
[100.81697083 -46.79497528]
[110.57972717 -42.76204681]
[117.77447510 -34.91699982]
[120.99883270 -24.68669128]
[119.58121490 -13.97193623]
[113.71934509 -4.79438496]
[104.45601654 1.08491957]
[104.91794586 16.07780457]
[105.37986755 31.07069206]
[113.50543976 43.55365753]
[106.19678497 57.58555222]
[106.65870667 72.57843781]
[107.12063599 87.57132721]
[114.31715393 99.55889130]
[107.87225342 111.96675110]
[108.33417511 126.95963287]
[108.79610443 141.95251465]
[122.67578125 148.20678711]
[132.42387390 159.81977844]
[136.14793396 174.45368958]
[133.16122437 189.19277954]
[124.10862732 201.12425232]
[110.82835388 207.91392517]
[111.29027557 222.90681458]
[111.75220490 237.89970398]
[120.65781403 247.38603210]
[120.63870239 259.99438477]
[112.25730896 268.86679077]
[112.25730896 283.86679077]
[115.43038940 292.62237549]
[112.01921082 299.32693481]
[111.55728149 314.31982422]
[111.09535217 329.31271362]
[119.32616425 343.49670410]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 100]
[4 99]
[5 98]
[6 96]
[7 95]
[9 92]
[10 91]
[11 90]
[17 84]
[18 83]
[19 82]
[21 80]
[22 79]
[23 78]
[25 76]
[26 75]
[27 74]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[44 54]
[45 53]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
