%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAGAGGGCUGCUCAACUGCAAGGACGCUGUAAGCAGGAAGAGAAGCCACAGCGCUUCAGAAAAGAGUGGGACAGGGACAAGCAUAUCUAAGAGGCUGAAC\
) } def
/len { sequence length } bind def

/coor [
[117.94563293 167.50332642]
[104.05787659 173.17167664]
[89.07330322 172.49157715]
[75.75611877 165.58850098]
[66.56293488 153.73583984]
[63.18962860 139.12007141]
[66.25846863 124.43735504]
[75.20334625 112.39620972]
[88.37126160 105.21871948]
[73.70536041 102.07050323]
[59.03945541 98.92228699]
[44.37355042 95.77407074]
[29.25683784 100.44264221]
[18.43695450 90.20645905]
[3.77105117 87.05824280]
[-10.89485264 83.91002655]
[-25.31588745 93.66924286]
[-42.02270889 90.13108063]
[-50.89368439 75.93264771]
[-65.64798737 73.22882080]
[-80.40228271 70.52499390]
[-95.15657806 67.82117462]
[-103.72218323 80.41284943]
[-116.67216492 88.42645264]
[-131.76286316 90.47358704]
[-146.37971497 86.19955444]
[-157.99028015 76.34487915]
[-164.58294678 62.61692429]
[-165.01550293 47.39415359]
[-159.21298218 33.31399918]
[-148.18074036 22.81593132]
[-133.83015442 17.71880722]
[-118.64756775 18.90573311]
[-105.26344299 26.17106628]
[-95.99666595 38.25604630]
[-92.45275879 53.06687164]
[-77.69845581 55.77069855]
[-62.94416046 58.47452545]
[-48.18986130 61.17834854]
[-38.62694168 52.39850235]
[-25.55184937 50.75707626]
[-13.77074623 57.08572388]
[-7.74663591 69.24412537]
[6.91926765 72.39234161]
[21.58517075 75.54055786]
[35.65288162 70.64680481]
[47.52176666 81.10816956]
[62.18767166 84.25638580]
[76.85357666 87.40460205]
[91.51947784 90.55281830]
[100.47733307 87.40455627]
[109.04011536 91.34724426]
[123.93074799 89.53919220]
[138.82138062 87.73114777]
[153.71202087 85.92309570]
[168.06690979 74.51462555]
[183.94598389 81.81565094]
[198.77522278 79.55868530]
[213.60444641 77.30171967]
[221.77674866 72.84993744]
[228.91499329 75.20757294]
[243.80563354 73.39952087]
[258.69625854 71.59147644]
[262.83477783 56.99186707]
[272.22229004 45.12099075]
[285.40383911 37.76845551]
[300.35565186 36.02748489]
[314.79568481 40.13243484]
[326.53201294 49.42782593]
[333.79550171 62.47277451]
[348.68615723 60.66472244]
[355.30889893 46.73121643]
[368.42538452 38.60956192]
[383.85018921 38.89134598]
[396.66128540 47.48665237]
[402.77072144 61.65275192]
[400.22897339 76.86929321]
[389.84713745 88.28073120]
[374.93798828 92.24572754]
[360.25900269 87.49904633]
[350.49420166 75.55535889]
[335.60354614 77.36340332]
[331.67297363 91.76756287]
[322.50222778 103.60153198]
[309.46417236 111.04292297]
[294.53021240 112.93074036]
[279.97207642 108.94641876]
[268.01647949 99.66706085]
[260.50430298 86.48210907]
[245.61367798 88.29015350]
[230.72305298 90.09820557]
[215.86141968 92.13095093]
[201.03219604 94.38791656]
[186.20295715 96.64488220]
[178.69606018 106.26336670]
[166.23878479 108.18258667]
[155.52006531 100.81372833]
[140.62944031 102.62178040]
[125.73880005 104.42983246]
[110.84816742 106.23787689]
[123.31461334 114.57980347]
[131.13195801 127.38172913]
[132.85812378 142.28207397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 50]
[10 49]
[11 48]
[12 47]
[14 45]
[15 44]
[16 43]
[19 39]
[20 38]
[21 37]
[22 36]
[52 100]
[53 99]
[54 98]
[55 97]
[57 94]
[58 93]
[59 92]
[61 91]
[62 90]
[63 89]
[70 82]
[71 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
