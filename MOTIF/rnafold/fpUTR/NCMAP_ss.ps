%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAUCCCAGGGUGGCAGCGCCGGGCGGCGGCGGGGACCCUGGCUGGGAGCGCGGCGGUGCCGGCGGGAGGCCGAGCGGGGCUCGACAGAGCAGGAUCGAG\
) } def
/len { sequence length } bind def

/coor [
[184.93510437 182.64410400]
[173.54403687 172.88482666]
[158.75956726 174.28305054]
[147.06837463 164.54803467]
[145.70201111 149.03125000]
[134.31094360 139.27197266]
[122.91986847 129.51269531]
[111.52879333 119.75341797]
[100.48713684 122.86642456]
[89.32292938 120.22648621]
[80.84494781 112.49778748]
[77.18617249 101.62478638]
[79.26710510 90.34300232]
[68.49842072 79.90099335]
[57.72974396 69.45898438]
[46.96106720 59.01697540]
[36.19238663 48.57496643]
[20.89888191 44.52289581]
[17.14801788 30.10831070]
[6.37933969 19.66630173]
[-4.38933945 9.22429276]
[-15.15801811 -1.21771657]
[-25.92669678 -11.65972614]
[-41.22020340 -15.71179390]
[-44.97106552 -30.12638092]
[-55.73974609 -40.56838989]
[-73.13789368 -39.93309021]
[-85.43192291 -51.78168869]
[-85.43825531 -68.52057648]
[-96.52338409 -78.62601471]
[-107.60852051 -88.73144531]
[-118.69365692 -98.83688354]
[-134.10469055 -102.41606140]
[-138.29766846 -116.70830536]
[-149.38281250 -126.81373596]
[-165.50932312 -129.79159546]
[-170.73793030 -145.33486938]
[-159.68989563 -157.45399475]
[-143.73048401 -153.68183899]
[-139.27737427 -137.89888000]
[-128.19223022 -127.79344177]
[-113.57408142 -124.93706512]
[-108.58821869 -109.92201233]
[-97.50308228 -99.81658173]
[-86.41795349 -89.71114349]
[-75.33281708 -79.60571289]
[-62.56787491 -81.99072266]
[-50.60450363 -76.45632172]
[-43.96334457 -64.84412384]
[-45.29773331 -51.33706665]
[-34.52905655 -40.89505768]
[-20.00579834 -37.58987427]
[-15.48468781 -22.42840385]
[-4.71600914 -11.98639584]
[6.05267000 -1.54438627]
[16.82134819 8.89762306]
[27.59002686 19.33963203]
[42.11328506 22.64481735]
[46.63439560 37.80628586]
[57.40307617 48.24829483]
[68.17175293 58.69030380]
[78.94042969 69.13231659]
[89.70911407 79.57432556]
[107.56768036 78.41664886]
[120.79302216 90.47314453]
[121.28807068 108.36234283]
[132.67913818 118.12162018]
[144.07022095 127.88089752]
[155.46128845 137.64016724]
[171.00402832 136.61021423]
[182.41717529 146.66976929]
[183.30329895 161.49374390]
[194.69438171 171.25302124]
[206.66464233 180.29254150]
[219.16867065 188.57801819]
[231.43934631 181.66883850]
[245.42565918 180.76304626]
[258.36163330 185.98202515]
[267.71405029 196.24162292]
[271.67837524 209.47673035]
[269.52688599 223.05693054]
[281.76983643 231.72354126]
[294.01278687 240.39013672]
[306.25573730 249.05674744]
[322.62597656 250.03027344]
[329.72503662 264.81320190]
[320.25003052 278.19815063]
[303.94802856 276.41580200]
[297.58914185 261.29971313]
[285.34619141 252.63310242]
[273.10324097 243.96649170]
[260.86029053 235.29988098]
[246.43482971 242.40110779]
[230.30033875 241.30204773]
[216.81645203 232.20587158]
[209.67361450 217.48925781]
[210.88319397 201.08204651]
[198.37916565 192.79658508]
[195.46107483 193.35302734]
[192.13093567 192.68280029]
[188.89649963 190.61633301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[5 69]
[6 68]
[7 67]
[8 66]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[25 51]
[26 50]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[74 98]
[75 97]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
