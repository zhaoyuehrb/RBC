%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCGGACCGAGCGGCGAGCGGGCAGGACAGAGGUGGACCUCAGCAGGCUCUGCAUAACCAGCCGUGUGUG\
) } def
/len { sequence length } bind def

/coor [
[89.20184326 253.92414856]
[73.78868103 258.37542725]
[60.78240967 248.98306274]
[60.16032791 232.95207214]
[72.39965057 222.58006287]
[74.96904755 207.80177307]
[69.52619934 193.93725586]
[79.51301575 181.66639709]
[82.08241272 166.88809204]
[84.33324432 152.05792236]
[86.26446533 137.18276978]
[83.93022156 129.92388916]
[88.61215210 121.71443176]
[91.18154907 106.93612671]
[93.43238068 92.10596466]
[95.36360931 77.23080444]
[82.98366547 65.92443085]
[79.70286560 49.65011215]
[86.59755707 34.72851181]
[100.83013153 26.83846855]
[102.11960602 11.89399624]
[103.40907288 -3.05047607]
[104.69854736 -17.99494934]
[105.66617584 -32.96370697]
[106.31150818 -47.94981766]
[93.47367096 -54.23629761]
[84.07376099 -64.94721222]
[79.53509521 -78.40969849]
[80.52524567 -92.53830719]
[86.85805511 -105.15802002]
[97.52748871 -114.33909607]
[110.86732483 -118.69215393]
[112.15679932 -133.63662720]
[113.44627380 -148.58110046]
[114.73574066 -163.52557373]
[107.30107117 -178.14260864]
[116.46806335 -191.74034119]
[132.80650330 -190.33058167]
[139.50880432 -175.36358643]
[129.68022156 -162.23609924]
[128.39074707 -147.29162598]
[127.10127258 -132.34715271]
[125.81179810 -117.40267944]
[139.60920715 -109.62868500]
[148.72817993 -96.61048889]
[151.33889771 -80.87371826]
[146.88009644 -65.49776459]
[136.17884827 -53.51320648]
[121.29762268 -47.30448532]
[120.65228271 -32.31837082]
[123.60189819 -25.28702545]
[119.64302063 -16.70547676]
[118.35354614 -1.76100409]
[117.06407928 13.18346882]
[115.77460480 28.12794113]
[126.74558258 36.02841949]
[132.35342407 48.45011139]
[131.00155640 62.12157822]
[122.94235992 73.38213348]
[110.23876953 79.16202545]
[108.30754089 94.03718567]
[110.52130127 102.06835175]
[105.95985413 109.50552368]
[103.39045715 124.28382874]
[101.13962555 139.11399841]
[99.20840454 153.98915100]
[101.24364471 163.21809387]
[96.86071777 169.45748901]
[94.29132080 184.23579407]
[99.55038452 199.15734863]
[89.74734497 210.37117004]
[87.17794800 225.14945984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 72]
[6 71]
[8 69]
[9 68]
[10 66]
[11 65]
[13 64]
[14 63]
[15 61]
[16 60]
[20 55]
[21 54]
[22 53]
[23 52]
[24 50]
[25 49]
[32 43]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
