%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGGCCGCGGGCCGGGGGCGGACUGGGGCGGGCGGAAGGAGAGCCAGGCCGGAAGGAGGCUGCCGGAGGGCGGGAGGCAGGAGCGGGCCAGGAGCUGCUGGGCUGGAGCGGCGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[131.21263123 481.95101929]
[130.83264160 466.95584106]
[130.45265198 451.96066284]
[130.07266235 436.96545410]
[122.01542664 424.43829346]
[129.40065002 410.44653320]
[129.02066040 395.45135498]
[128.64067078 380.45614624]
[128.26068115 365.46096802]
[127.88068390 350.46578979]
[126.36315918 335.54275513]
[123.71686554 320.77801514]
[113.85558319 309.61538696]
[119.03690338 294.66665649]
[116.39060211 279.90194702]
[113.74430847 265.13720703]
[111.09800720 250.37248230]
[101.23672485 239.20985413]
[106.41804504 224.26112366]
[103.77175140 209.49639893]
[101.12545013 194.73167419]
[89.57197571 188.87890625]
[83.43904877 177.25041199]
[85.18485260 164.02317810]
[94.39028931 154.09762573]
[92.11887360 139.27059937]
[89.84745789 124.44357300]
[87.57603455 109.61654663]
[78.85174561 97.41462708]
[65.55635071 90.46968079]
[52.26094818 83.52472687]
[33.94233704 84.77394867]
[25.03233147 69.71184540]
[11.56526375 63.10593414]
[-1.90180397 56.50001907]
[-15.05219173 64.56667328]
[-30.47566605 64.22028351]
[-43.25065231 55.57139587]
[-49.30069733 41.37983322]
[-46.69525909 26.17407036]
[-36.26571655 14.80621338]
[-21.34010124 10.90370178]
[-6.68112516 15.71181488]
[3.03358817 27.69630051]
[4.70410824 43.03295135]
[18.17117691 49.63886642]
[31.63824463 56.24477768]
[43.25632858 52.62823486]
[54.56607819 58.11477661]
[59.20589828 70.22933197]
[72.50129700 77.17427826]
[85.79669952 84.11923218]
[92.76159668 81.33710480]
[84.42337036 68.86818695]
[72.55023956 59.70146561]
[71.47570801 44.74000168]
[81.91703033 33.97065735]
[96.90457153 34.58203125]
[106.43405151 46.16602707]
[104.14420319 60.99071884]
[106.69139099 75.77286530]
[113.65628815 72.99073792]
[118.50785828 58.79700089]
[123.35942841 44.60326004]
[128.21099854 30.40951920]
[133.06256104 16.21577835]
[129.36802673 0.23821802]
[141.54071045 -10.75077629]
[157.05839539 -5.44666910]
[159.95782471 10.69412899]
[147.25630188 21.06734848]
[142.40473938 35.26108932]
[137.55316162 49.45483017]
[132.70159912 63.64857101]
[127.85002899 77.84230804]
[133.66264343 82.58187866]
[147.68441772 77.25366211]
[145.28788757 92.06100464]
[151.10049438 96.80057526]
[164.02708435 89.19113159]
[171.63116455 74.66151428]
[188.02520752 74.25247192]
[196.34442139 88.38479614]
[188.03071594 102.52036285]
[171.63652039 102.11771393]
[158.70993042 109.72714996]
[142.19291687 119.69863129]
[125.50872803 121.89884949]
[111.48131561 117.19253540]
[102.40306091 107.34513092]
[104.67447662 122.17215729]
[106.94589996 136.99917603]
[109.21731567 151.82620239]
[123.47839355 161.86251831]
[126.07435608 178.76673889]
[115.89017487 192.08537292]
[118.53647614 206.85009766]
[121.18276978 221.61482239]
[131.23333740 233.83352661]
[125.86273956 247.72618103]
[128.50903320 262.49090576]
[131.15533447 277.25564575]
[133.80162048 292.02035522]
[143.85218811 304.23907471]
[138.48159790 318.13171387]
[141.12788391 332.89645386]
[151.14009094 321.72702026]
[166.10317993 320.67538452]
[177.57925415 330.33459473]
[179.09677124 345.25762939]
[169.79998779 357.02920532]
[154.93150330 359.01113892]
[142.87586975 350.08578491]
[143.25585938 365.08099365]
[143.63584900 380.07617188]
[144.01583862 395.07135010]
[144.39584351 410.06652832]
[152.48025513 423.66629028]
[145.06785583 436.58547974]
[145.44784546 451.58065796]
[145.82783508 466.57583618]
[146.20782471 481.57104492]
[148.88580322 500.76681519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[6 117]
[7 116]
[8 115]
[9 114]
[10 113]
[11 106]
[12 105]
[14 103]
[15 102]
[16 101]
[17 100]
[19 98]
[20 97]
[21 96]
[25 93]
[26 92]
[27 91]
[28 90]
[29 52]
[30 51]
[31 50]
[33 47]
[34 46]
[35 45]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
