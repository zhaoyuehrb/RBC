%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAAUCAGAUUGUGCCCACAAGGCGGAAAUGUACGACAGCGGGUUCCGGUGACCACGAAGGCGGCAAAGGCGACGGA\
) } def
/len { sequence length } bind def

/coor [
[115.04862976 235.94030762]
[110.25419617 230.82255554]
[106.48197174 224.90179443]
[103.86380768 218.37969971]
[102.49217987 211.47908020]
[102.41693115 204.43621826]
[103.64346313 197.49281311]
[106.13246155 190.88766479]
[109.80112457 184.84846497]
[114.52594757 179.58395386]
[120.14688110 175.27670288]
[114.89221954 161.22718811]
[109.63755798 147.17768860]
[104.38288879 133.12818909]
[99.12822723 119.07868958]
[85.98652649 112.97608185]
[80.91068268 99.40470886]
[86.82226562 86.17597961]
[81.56760406 72.12647247]
[76.31294250 58.07697296]
[72.31467438 55.08944321]
[69.90555573 51.29521179]
[69.13711548 47.36381912]
[69.81247711 43.90054703]
[71.53617096 41.36264420]
[68.57325745 26.65818596]
[65.61034393 11.95372486]
[62.64743423 -2.75073552]
[59.68452454 -17.45519638]
[47.19342041 -30.81106377]
[53.10838699 -47.20836639]
[49.56322098 -61.78340530]
[46.01805496 -76.35844421]
[32.38949585 -84.36081696]
[28.49209023 -99.67700958]
[36.63809967 -113.22019958]
[51.99464417 -116.95545959]
[65.45095062 -108.66671753]
[69.02364349 -93.27153778]
[60.59309387 -79.90361023]
[64.13825989 -65.32857513]
[67.68342590 -50.75353241]
[77.96595001 -44.06553268]
[80.92164612 -31.74440575]
[74.38898468 -20.41810608]
[77.35189819 -5.71364641]
[80.31480408 8.99081421]
[83.27771759 23.69527435]
[86.24063110 38.39973450]
[90.36244202 52.82230759]
[95.61711121 66.87181091]
[100.87177277 80.92131042]
[114.01347351 87.02391815]
[119.08931732 100.59529114]
[113.17773438 113.82402039]
[118.43239594 127.87352753]
[123.68705750 141.92303467]
[128.94172668 155.97253418]
[134.19638062 170.02203369]
[160.32995605 175.48001099]
[176.36920166 196.60513306]
[174.62820435 222.89831543]
[186.86776733 231.56970215]
[201.94776917 227.43112183]
[216.13829041 234.00097656]
[222.73902893 248.17716980]
[218.63328552 263.26614380]
[205.75970459 272.14334106]
[190.19676208 270.61721802]
[179.29283142 259.40838623]
[178.19639587 243.80928040]
[165.95681763 235.13789368]
[160.49174500 239.43405151]
[154.32118225 242.65191650]
[147.65562439 244.67851257]
[140.72302246 245.44161987]
[133.76098633 244.91221619]
[127.00871277 243.10568237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[18 52]
[19 51]
[20 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 42]
[32 41]
[33 40]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
