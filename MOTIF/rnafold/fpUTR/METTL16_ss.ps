%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGGCUAGAUGGCUUCACAAGAUGGCGGCGCGCUGGGAGCGUAUCAUCUGCGUUUCUAGGAGCUUCGCUAUGCGGCUGCUUUAAGAUUCUAGGGUUGUACAGGCCCACGCCAGACACGACGUCUGGCAGGAACCUCGGCCUCAGAG\
) } def
/len { sequence length } bind def

/coor [
[81.14945984 345.68655396]
[83.34130859 330.20336914]
[95.00727081 319.78991699]
[94.37492371 304.80325317]
[93.74257660 289.81658936]
[93.11022186 274.82992554]
[92.47787476 259.84326172]
[91.84552765 244.85659790]
[88.39781952 238.26165771]
[91.36120605 229.54800415]
[91.04496002 214.55133057]
[87.73706055 207.88516235]
[90.88349915 199.23593140]
[90.88349915 184.23593140]
[87.71687317 177.50149536]
[91.04496002 168.92051697]
[91.36120605 153.92384338]
[91.67745209 138.92718506]
[75.90059662 134.21549988]
[62.67451477 123.09840393]
[54.58544159 106.91709900]
[53.53168106 88.04265594]
[60.32295609 69.53160095]
[74.44799042 54.63097000]
[61.10449219 47.77887726]
[47.76099777 40.92678452]
[34.41750717 34.07469177]
[21.07401276 27.22259903]
[7.73051834 20.37050629]
[-5.61297512 13.51841354]
[-21.42358971 14.09725094]
[-29.21089363 1.40051270]
[-42.55438614 -5.45158005]
[-60.88691330 -4.09284353]
[-69.86682892 -19.13662148]
[-83.35182190 -25.70587158]
[-96.83680725 -32.27511978]
[-110.32180023 -38.84437180]
[-123.80679321 -45.41362000]
[-137.29177856 -51.98286819]
[-150.77676392 -58.55212021]
[-164.26176453 -65.12136841]
[-177.74674988 -71.69062042]
[-191.23173523 -78.25986481]
[-204.71673584 -84.82911682]
[-220.29101562 -80.97926331]
[-232.92303467 -90.86923981]
[-232.92259216 -106.91229248]
[-220.29002380 -116.80156708]
[-204.71595764 -112.95086670]
[-198.14747620 -98.31410980]
[-184.66249084 -91.74485779]
[-171.17750549 -85.17560577]
[-157.69250488 -78.60636139]
[-144.20751953 -72.03710938]
[-130.72253418 -65.46785736]
[-117.23754120 -58.89860916]
[-103.75254822 -52.32936096]
[-90.26756287 -45.76011276]
[-76.78256989 -39.19086075]
[-63.29758072 -32.62161255]
[-51.71953201 -36.26885986]
[-40.40956116 -30.85106850]
[-35.70229340 -18.79507446]
[-22.35880089 -11.94298077]
[-7.50260305 -13.01192570]
[1.23911750 0.17491981]
[14.58261108 7.02701283]
[27.92610550 13.87910557]
[41.26959991 20.73119926]
[54.61309052 27.58329201]
[67.95658875 34.43538284]
[81.30007935 41.28747559]
[94.57059479 34.29509735]
[96.46314240 19.41496658]
[89.62544250 4.50933552]
[99.33462524 -8.70670605]
[115.60272217 -6.63762712]
[121.69451141 8.58808136]
[111.34327698 21.30751610]
[109.45072937 36.18764496]
[115.54611969 40.55756760]
[124.28595734 28.36678696]
[133.02580261 16.17600441]
[141.76564026 3.98522425]
[150.50549316 -8.20555687]
[159.24551392 -20.39620209]
[171.43603516 -11.65598297]
[162.69627380 0.53428632]
[153.95642090 12.72506714]
[145.21658325 24.91584778]
[136.47674561 37.10662842]
[127.73690033 49.29740906]
[133.83229065 53.66733170]
[147.31727600 47.09808350]
[160.80226135 40.52883148]
[174.28726196 33.95958328]
[187.77224731 27.39033318]
[194.34072876 12.75357723]
[209.91479492 8.90287304]
[222.54736328 18.79215050]
[222.54780579 34.83520508]
[209.91577148 44.72517395]
[194.34149170 40.87532425]
[180.85650635 47.44457245]
[167.37152100 54.01382446]
[153.88653564 60.58307266]
[140.40153503 67.15232086]
[144.15122986 81.21299744]
[143.56837463 94.65913391]
[139.30886841 106.27719879]
[153.41026306 111.39098358]
[167.51164246 116.50477600]
[181.61303711 121.61856079]
[195.71443176 126.73235321]
[209.81581116 131.84613037]
[223.91720581 136.95993042]
[238.99990845 131.49259949]
[252.60249329 139.99842834]
[254.29022217 155.95246887]
[242.76841736 167.11613464]
[226.87561035 164.92562866]
[218.80342102 151.06130981]
[204.70202637 145.94752502]
[190.60063171 140.83374023]
[176.49925232 135.71995544]
[162.39785767 130.60617065]
[148.29646301 125.49237823]
[134.19508362 120.37858582]
[126.98969269 129.25999451]
[117.55648804 135.72618103]
[106.67411804 139.24342346]
[106.35787201 154.24009705]
[106.04162598 169.23675537]
[105.88349915 184.23593140]
[105.88349915 199.23593140]
[106.04162598 214.23509216]
[106.35787201 229.23176575]
[106.83219147 244.22425842]
[107.46453857 259.21090698]
[108.09689331 274.19760132]
[108.72924042 289.18426514]
[109.36158752 304.17092896]
[109.99393463 319.15759277]
[122.49563599 328.55126953]
[125.98397064 343.79483032]
[118.81185913 357.69067383]
[104.36574554 363.67764282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[10 138]
[11 137]
[13 136]
[14 135]
[16 134]
[17 133]
[18 132]
[24 73]
[25 72]
[26 71]
[27 70]
[28 69]
[29 68]
[30 67]
[32 65]
[33 64]
[35 61]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[74 81]
[75 80]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
