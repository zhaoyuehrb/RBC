%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGAGCAGGAAGGAGACGGCCGCCCAGCAGCCCGUGGGCAGGCGCGGCGGAGCGAGCGGGGCCGGCGGCGGGCGCCGAGGGACGCCGAGGCCUCGGGCGGGGGCUGGCCCGGGGUUCCAGGUCUCCAGUGGGGGCUGCAGACUAAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[106.97422791 410.67276001]
[107.62312317 395.38104248]
[115.31414795 382.14825439]
[128.27996826 374.01519775]
[127.06520081 359.06448364]
[125.85042572 344.11373901]
[114.36906433 334.69494629]
[112.92414093 319.55007935]
[122.88129425 307.57122803]
[121.66652679 292.62051392]
[120.45175934 277.66976929]
[119.23699188 262.71905518]
[101.16527557 253.59674072]
[92.11367035 235.33609009]
[95.84643555 215.16018677]
[111.03410339 201.16049194]
[108.31302643 186.40936279]
[105.59194946 171.65824890]
[102.87087250 156.90711975]
[100.14979553 142.15599060]
[97.42871857 127.40486145]
[74.63307190 117.41502380]
[67.25495148 90.79655457]
[52.98910141 86.16129303]
[38.72325516 81.52603912]
[24.45740700 76.89078522]
[10.14531708 72.40033722]
[-4.21154261 68.05516052]
[-18.56840324 63.70998383]
[-34.01820755 67.11792755]
[-43.95845795 56.02555466]
[-58.31531525 51.68037415]
[-76.11101532 56.30566406]
[-87.64076996 43.10897064]
[-102.08274078 39.05565643]
[-116.56504822 35.14890289]
[-131.08621216 31.38911438]
[-145.60736084 27.62932777]
[-160.12852478 23.86953926]
[-171.65715027 29.73855972]
[-183.70173645 26.26679230]
[-189.92486572 15.85089684]
[-204.36683655 11.79758167]
[-220.11376953 16.37647438]
[-231.76382446 4.83488941]
[-227.33242798 -10.95418167]
[-211.37821960 -14.74829578]
[-200.31352234 -2.64439344]
[-185.87155151 1.40892184]
[-169.15885925 -3.86118865]
[-156.36872864 9.34838200]
[-141.84757996 13.10817051]
[-127.32642365 16.86795807]
[-112.80526733 20.62774658]
[-105.49868774 19.25165749]
[-98.02942657 24.61367989]
[-83.58745575 28.66699600]
[-72.85336304 23.01034927]
[-60.76127625 26.31282997]
[-53.97013855 37.32351685]
[-39.61327744 41.66869354]
[-25.19037247 37.94995499]
[-14.22322559 49.35312271]
[0.13363476 53.69830322]
[14.49049473 58.04347992]
[21.84683228 56.96462250]
[29.09266090 62.62493896]
[43.35850906 67.26019287]
[57.62435532 71.89544678]
[71.89020538 76.53070068]
[83.65818787 67.22937775]
[82.44341278 52.27864838]
[81.22864532 37.32791901]
[71.46578979 24.15147591]
[78.24281311 9.21815681]
[94.58808899 7.89007902]
[103.68701172 21.53345490]
[96.17937469 36.11315155]
[97.39414978 51.06388092]
[98.60891724 66.01461029]
[106.90556335 68.90663147]
[113.65657043 73.63940430]
[118.50803375 79.62622833]
[131.23770142 71.69176483]
[143.96736145 63.75730896]
[156.69702148 55.82284927]
[169.42669678 47.88838959]
[177.04537964 34.02237701]
[191.93905640 33.85632324]
[204.66871643 25.92186546]
[217.39837646 17.98740387]
[223.06777954 10.74868011]
[230.46742249 10.02416134]
[243.35527039 2.34932256]
[256.24313354 -5.32551622]
[269.13098145 -13.00035572]
[271.73019409 -17.66263771]
[275.49853516 -20.53661728]
[279.54244995 -21.47737122]
[283.04354858 -20.72244835]
[296.37396240 -27.59994125]
[309.70437622 -34.47743225]
[318.10607910 -48.56087494]
[334.49746704 -48.05598450]
[342.01644897 -33.48215103]
[332.92819214 -19.83168221]
[316.58187866 -21.14701271]
[303.25143433 -14.26951981]
[289.92102051 -7.39202833]
[276.80581665 -0.11249883]
[263.91796875 7.56234026]
[251.03012085 15.23717880]
[238.14225769 22.91201782]
[225.33283997 30.71706772]
[212.60317993 38.65152740]
[199.87351990 46.58598709]
[193.16534424 59.88447189]
[177.36114502 60.61805344]
[164.63148499 68.55251312]
[151.90182495 76.48696899]
[139.17216492 84.42143250]
[126.44249725 92.35589600]
[127.06462860 105.01436615]
[121.94889069 116.60976410]
[112.17984772 124.68378448]
[114.90092468 139.43490601]
[117.62200165 154.18603516]
[120.34307861 168.93716431]
[123.06415558 183.68829346]
[125.78522491 198.43942261]
[135.61506653 200.55543518]
[144.31333923 205.54017639]
[151.06846619 212.90782166]
[155.25646973 221.95117188]
[156.49864197 231.80958557]
[154.69566345 241.55084229]
[150.03530884 250.25927734]
[142.97306824 257.12191772]
[134.18771362 261.50427246]
[135.40249634 276.45501709]
[136.61726379 291.40573120]
[137.83203125 306.35647583]
[149.59240723 316.57073975]
[150.61137390 331.75021362]
[140.80116272 342.89898682]
[142.01593018 357.84970093]
[143.23069763 372.80044556]
[157.33941650 378.73361206]
[167.06582642 390.55120850]
[170.17486572 405.53762817]
[165.95210266 420.24908447]
[155.36790466 431.30499268]
[140.85443115 436.16479492]
[125.74677277 433.71176147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 147]
[5 146]
[6 145]
[9 142]
[10 141]
[11 140]
[12 139]
[16 130]
[17 129]
[18 128]
[19 127]
[20 126]
[21 125]
[23 70]
[24 69]
[25 68]
[26 67]
[27 65]
[28 64]
[29 63]
[31 61]
[32 60]
[34 57]
[35 56]
[36 54]
[37 53]
[38 52]
[39 51]
[42 49]
[43 48]
[71 80]
[72 79]
[73 78]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
[89 116]
[90 115]
[91 114]
[93 113]
[94 112]
[95 111]
[96 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
