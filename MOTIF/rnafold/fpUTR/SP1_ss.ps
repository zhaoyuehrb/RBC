%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGGGUUCGCUUGCCUCGUCAGCGUCCGCGUUUUUCCCGGCCCCCCCCAACCCCCCCGGACAGGACCCCCUUGAGCUUGUCCCUCAGCUGCCACC\
) } def
/len { sequence length } bind def

/coor [
[93.51050568 99.08224487]
[80.21151733 92.14417267]
[66.91252899 85.20610046]
[53.61353683 78.26802826]
[40.31454849 71.32994843]
[27.01555824 64.39187622]
[13.71656799 57.45380020]
[-7.53439999 71.59023285]
[-32.89834595 70.59925079]
[-52.76114273 55.02074051]
[-66.47733307 61.09249115]
[-80.19351959 67.16423798]
[-93.90971375 73.23599243]
[-103.39683533 85.89715576]
[-118.16674042 83.97385406]
[-131.88293457 90.04560852]
[-143.91897583 101.98587799]
[-158.72451782 93.72559357]
[-154.88563538 77.21198273]
[-137.95468140 76.32942200]
[-124.23849487 70.25766754]
[-115.73244476 58.03079605]
[-99.98146057 59.51980209]
[-86.26527405 53.44805145]
[-72.54907990 47.37630081]
[-58.83289337 41.30455017]
[-59.59441757 26.67080498]
[-55.14588165 12.70882320]
[-66.87335205 3.35647583]
[-78.60083008 -5.99587107]
[-93.18037415 -0.95203745]
[-108.16696930 -4.61339664]
[-118.77844238 -15.81162262]
[-121.62870789 -30.97340202]
[-115.80825806 -45.26066589]
[-103.17437744 -54.11439896]
[-87.75849152 -54.70941162]
[-74.47975159 -46.85583115]
[-67.57536316 -33.05971146]
[-69.24848175 -17.72334290]
[-57.52100754 -8.37099648]
[-45.79353714 0.98135072]
[-40.12334824 -3.18248773]
[-33.81646729 -6.31648588]
[-27.05830193 -8.32551384]
[-20.04805183 -9.14755726]
[-12.99282074 -8.75563145]
[-6.10150719 -7.15865469]
[0.42138329 -4.40126514]
[6.38180828 -0.56257850]
[11.60195923 4.24608183]
[15.92556572 9.88440895]
[19.22257423 16.18721008]
[21.39305687 22.96924210]
[22.37023735 30.03065491]
[22.12255096 37.16288376]
[20.65464211 44.15481186]
[33.95363235 51.09288788]
[47.25262070 58.03096008]
[60.55160904 64.96903229]
[73.85060120 71.90711212]
[87.14958954 78.84518433]
[100.44857788 85.78325653]
[115.40043640 86.98411560]
[129.63627625 82.25749207]
[143.87210083 77.53086853]
[154.35656738 64.92102051]
[170.47125244 67.96221161]
[175.63876343 83.52591705]
[164.54319763 95.60153198]
[148.59872437 91.76670074]
[134.36289978 96.49332428]
[120.12705994 101.21994781]
[118.93006134 108.62380981]
[116.53605652 123.43154144]
[115.33905792 130.83540344]
[127.36026764 139.80705261]
[139.38146973 148.77871704]
[151.40267944 157.75038147]
[166.18003845 153.01654053]
[180.90707397 157.90466309]
[189.92095947 170.53515625]
[189.75566101 186.05134583]
[180.47473145 198.48695374]
[165.64689636 203.06019592]
[150.97373962 198.01260376]
[142.09739685 185.28506470]
[142.43101501 169.77157593]
[130.40980530 160.79992676]
[118.38860321 151.82826233]
[106.36740112 142.85661316]
[96.71758270 138.59107971]
[89.35342407 132.43095398]
[84.57269287 125.18814850]
[82.42625427 117.69730377]
[82.72635651 110.74694824]
[85.07305908 105.01640320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[10 26]
[11 25]
[12 24]
[13 23]
[15 21]
[16 20]
[28 42]
[29 41]
[30 40]
[64 73]
[65 72]
[66 71]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
