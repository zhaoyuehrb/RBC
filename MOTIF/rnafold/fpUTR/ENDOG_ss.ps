%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACCCGGUUGGGCUCUGCUGCUCCCUUCUGGGUUCCGAGGCCCAAGCCCUUGGCAGUGUUUGUGAGUGGAAGGGAGGUCACGCUAUCGUCCGCGGCCCCAGCAGCCCUGUGCCCUCGUUGGAUCCCGCGACGCGGCUCCUUUAAGAGCCUCGCGGGUCGCCCGCCGCUAGGUCGCUCCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[240.13150024 280.51651001]
[225.63568115 274.65093994]
[218.34724426 260.81573486]
[221.70759583 245.54347229]
[234.13005066 236.04524231]
[234.63667297 221.05380249]
[235.14328003 206.06234741]
[235.64988708 191.07090759]
[227.27975464 185.90431213]
[221.79685974 177.52618408]
[220.36279297 167.43843079]
[206.78607178 161.06089783]
[193.20936584 154.68338013]
[179.63264465 148.30586243]
[166.05592346 141.92834473]
[161.32043457 142.68627930]
[156.06080627 140.46211243]
[152.13395691 135.09930420]
[138.78038025 128.26687622]
[125.42680359 121.43445587]
[112.07322693 114.60203552]
[90.77194214 121.14747620]
[72.84457397 101.54946899]
[57.92153549 100.03194427]
[42.99849701 98.51441956]
[28.07545662 96.99689484]
[13.15241623 95.47937012]
[-1.77062333 93.96184540]
[-16.69366264 92.44432068]
[-31.61670303 90.92679596]
[-46.53974152 92.44432068]
[-60.85183334 96.93476868]
[-75.16391754 101.42521667]
[-89.47601318 105.91566467]
[-103.78810120 110.40611267]
[-114.47975159 122.84075928]
[-130.54191589 119.53337097]
[-135.45121765 103.88630676]
[-124.15738678 91.99591827]
[-108.27854156 96.09402466]
[-93.96645355 91.60357666]
[-79.65436554 87.11312866]
[-65.34227753 82.62268066]
[-51.03018951 78.13223267]
[-51.59968948 70.65388489]
[-52.73868561 55.69719315]
[-53.30818176 48.21884537]
[-68.13520813 45.94742966]
[-82.96223450 43.67601395]
[-99.53429413 47.25414276]
[-107.56019592 32.32024765]
[-95.43170929 20.47388840]
[-80.69081879 28.84898758]
[-65.86379242 31.12040520]
[-51.03676605 33.39182281]
[-62.95972824 24.29001236]
[-58.26159668 10.04474831]
[-48.74257660 -1.54784858]
[-35.68362045 -8.92779732]
[-20.84202957 -11.10200119]
[-6.21499109 -7.77788448]
[6.22917747 0.59723723]
[14.81590271 12.89634895]
[18.38969612 27.46439552]
[16.46964073 42.34100342]
[9.31411457 55.52426529]
[-2.11398602 65.24015808]
[-16.27543831 70.18102264]
[-30.09917831 76.00376129]
[-15.17613792 77.52128601]
[-0.25309849 79.03881073]
[14.66994095 80.55633545]
[29.59298134 82.07386017]
[44.51602173 83.59138489]
[59.43906021 85.10890961]
[74.36209869 86.62643433]
[84.51151276 75.58154297]
[81.74061584 60.83969498]
[78.96972656 46.09784317]
[76.19883728 31.35599327]
[66.04544067 19.22260284]
[71.29853058 5.28508568]
[68.52763367 -9.45676517]
[54.44813538 -15.97958946]
[46.92102051 -29.54875183]
[48.84062195 -44.94663239]
[59.46881866 -56.25243378]
[74.71884155 -59.11884308]
[88.72676086 -52.44366455]
[96.10623169 -38.79364777]
[94.01969910 -23.41749573]
[83.26948547 -12.22765541]
[86.04037476 2.51419497]
[95.99557495 13.59315014]
[90.94068909 28.58510399]
[93.71157837 43.32695389]
[96.48246765 58.06880569]
[99.25335693 72.81065369]
[116.62613678 84.00173950]
[118.90564728 101.24845886]
[132.25921631 108.08087921]
[145.61279297 114.91329956]
[158.96636963 121.74571991]
[172.43344116 128.35163879]
[186.01016235 134.72915649]
[199.58688354 141.10667419]
[213.16358948 147.48419189]
[226.74031067 153.86170959]
[249.99777222 147.97462463]
[265.74349976 165.23640442]
[280.63876343 167.00575256]
[295.53405762 168.77510071]
[310.15054321 162.71965027]
[321.87631226 171.90419006]
[336.77157593 173.67355347]
[351.66687012 175.44290161]
[366.58990479 176.96041870]
[381.53643799 178.22569275]
[395.94009399 171.68002319]
[407.96936035 180.46330261]
[422.91589355 181.72857666]
[437.86242676 182.99383545]
[451.84185791 170.23277283]
[470.39358521 171.69422913]
[481.80444336 185.98863220]
[496.78518677 186.74836731]
[511.76593018 187.50810242]
[526.74670410 188.26783752]
[541.72741699 189.02757263]
[556.70819092 189.78730774]
[571.68890381 190.54705811]
[576.37286377 188.14591980]
[581.04046631 187.82838440]
[584.89587402 189.23567200]
[587.40338135 191.74375916]
[602.32641602 193.26127625]
[617.24945068 194.77880859]
[632.17254639 196.29632568]
[647.09558105 197.81385803]
[659.18420410 187.63346863]
[674.92340088 189.06604004]
[684.97546387 201.26164246]
[683.37652588 216.98484802]
[671.07531738 226.90734863]
[655.36993408 225.14231873]
[645.57800293 212.73689270]
[630.65496826 211.21937561]
[615.73193359 209.70184326]
[600.80889893 208.18432617]
[585.88586426 206.66679382]
[570.92919922 205.52780151]
[555.94842529 204.76806641]
[540.96771240 204.00833130]
[525.98693848 203.24858093]
[511.00619507 202.48884583]
[496.02545166 201.72911072]
[481.04470825 200.96937561]
[474.42044067 210.28965759]
[464.00756836 215.29766846]
[452.35153198 214.64050293]
[442.36434937 208.36614990]
[436.59716797 197.94038391]
[421.65063477 196.67510986]
[406.70407104 195.40985107]
[393.36953735 202.04602051]
[380.27117920 193.17222595]
[365.32464600 191.90696716]
[361.14715576 194.26237488]
[355.44247437 194.00335693]
[349.89752197 190.33818054]
[335.00222778 188.56883240]
[320.10696411 186.79946899]
[306.55587769 192.98149109]
[293.76470947 183.67037964]
[278.86941528 181.90103149]
[263.97415161 180.13168335]
[261.58187866 183.95040894]
[258.47482300 187.21409607]
[254.77827454 189.79112244]
[250.64134216 191.57752991]
[250.13471985 206.56896973]
[249.62811279 221.56040955]
[249.12150574 236.55184937]
[260.87438965 246.86705017]
[263.19604492 262.33132935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 183]
[6 182]
[7 181]
[8 180]
[11 108]
[12 107]
[13 106]
[14 105]
[15 104]
[18 103]
[19 102]
[20 101]
[21 100]
[23 76]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[30 69]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[47 55]
[48 54]
[49 53]
[77 98]
[78 97]
[79 96]
[80 95]
[82 93]
[83 92]
[110 176]
[111 175]
[112 174]
[114 172]
[115 171]
[116 170]
[117 167]
[118 166]
[120 164]
[121 163]
[122 162]
[125 157]
[126 156]
[127 155]
[128 154]
[129 153]
[130 152]
[131 151]
[135 150]
[136 149]
[137 148]
[138 147]
[139 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
