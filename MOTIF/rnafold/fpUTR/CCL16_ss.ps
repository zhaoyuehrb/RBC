%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCAAGCGGACCACCAGCAACAGACAACAUCUUCAUUCGGCUCUCCCUGAAGCUGUACUGCCUCGCUGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[91.33513641 116.50285339]
[79.60766602 125.85520172]
[67.88019562 135.20755005]
[56.15272141 144.55989075]
[44.42525101 153.91224670]
[47.37658310 168.93051147]
[42.99941254 183.59675598]
[32.29957962 194.54080200]
[17.73582268 199.24778748]
[2.65479255 196.63606262]
[-9.47800446 187.30580139]
[-15.87453842 173.40101624]
[-15.06493282 158.11692810]
[-7.23523045 144.96572876]
[5.81536198 136.96943665]
[21.08791351 135.96556091]
[35.07290268 142.18476868]
[46.80037308 132.83242798]
[58.52784729 123.48007965]
[70.25531769 114.12773132]
[81.98278809 104.77538300]
[83.54551697 88.09599304]
[98.70128632 78.05972290]
[117.39100647 83.97507477]
[123.34260559 70.20632172]
[129.29420471 56.43757248]
[124.58638000 46.23902130]
[126.39588165 35.37916565]
[133.84805298 27.58095360]
[144.17828369 25.37428665]
[151.23237610 12.13646317]
[158.28645325 -1.10136068]
[157.94795227 -16.91894531]
[170.76156616 -24.51240349]
[177.81564331 -37.75022507]
[184.86972046 -50.98804855]
[191.92379761 -64.22587585]
[198.97787476 -77.46369934]
[195.11698914 -88.01204681]
[197.80564880 -98.68827820]
[205.86865234 -105.85311890]
[216.34437561 -107.21043396]
[224.45399475 -119.82923889]
[224.69340515 -136.22663879]
[239.14356995 -143.98063660]
[252.93940735 -135.11459351]
[251.88894653 -118.74912262]
[237.07279968 -111.71962738]
[228.96318054 -99.10082245]
[229.75224304 -79.95310974]
[212.21569824 -70.40962219]
[205.16162109 -57.17179489]
[198.10754395 -43.93397141]
[191.05346680 -30.69614792]
[183.99938965 -17.45832443]
[184.84243774 -2.58759689]
[171.52427673 5.95271778]
[164.47019958 19.19054222]
[157.41610718 32.42836380]
[159.76325989 51.44805145]
[143.06295776 62.38917542]
[137.11135864 76.15792084]
[131.15974426 89.92667389]
[132.38238525 104.87676239]
[140.49200439 117.49556732]
[148.60160828 130.11436462]
[156.71122742 142.73316956]
[172.01892090 147.53465271]
[177.67454529 162.54776001]
[169.33959961 176.25572205]
[153.40792847 178.14295959]
[142.10096741 166.76174927]
[144.09242249 150.84278870]
[135.98281860 138.22398376]
[127.87319946 125.60517883]
[119.76358795 112.98637390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[24 63]
[25 62]
[26 61]
[30 59]
[31 58]
[32 57]
[34 55]
[35 54]
[36 53]
[37 52]
[38 51]
[42 49]
[43 48]
[64 76]
[65 75]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
