%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGGUUACGGACAACAUACAGAAGCCACUGCCAAUGAGCUCCGCCGAGUAGCACCGGGGCAGGGCUAGCGCUUAAAGGAGCCGCGACCCCUUUGCAGACCAGAGGGUGACCCGG\
) } def
/len { sequence length } bind def

/coor [
[80.63261414 246.77973938]
[68.34897614 237.29861450]
[64.01648712 222.39863586]
[69.30108643 207.80915833]
[82.17073059 199.14015198]
[82.57344818 184.14555359]
[82.97617340 169.15095520]
[83.37889099 154.15637207]
[83.78160858 139.16177368]
[84.18432617 124.16718292]
[81.65991211 138.95323181]
[73.82440186 151.74403381]
[61.79874420 160.70973206]
[47.30335236 164.56767273]
[32.41195679 162.76593018]
[19.25493240 155.56227112]
[9.71454239 143.98724365]
[5.15564489 129.69682312]
[6.23044205 114.73537445]
[12.78517246 101.24331665]
[23.88210678 91.15084839]
[37.93370819 85.90179443]
[52.92973328 86.24710083]
[66.72483063 92.13735962]
[77.34646606 102.73138428]
[68.33532715 90.73973846]
[59.32419586 78.74810028]
[50.31306076 66.75645447]
[42.55116272 61.69115829]
[41.22612000 54.31972122]
[32.54018784 42.09046936]
[23.85425377 29.86121941]
[15.16831875 17.63197136]
[6.48238516 5.40272093]
[-12.21214294 3.05104971]
[-23.17516327 -11.88306141]
[-19.92957115 -29.80179214]
[-29.25940895 -41.54718018]
[-46.50217819 -47.83482361]
[-48.54615021 -65.20800781]
[-58.18796158 -76.69866943]
[-67.82978058 -88.18933868]
[-77.47158813 -99.68000793]
[-93.05841827 -104.77733612]
[-96.17218781 -120.87815857]
[-83.60971069 -131.41932678]
[-68.29418945 -125.55699158]
[-65.98092651 -109.32181549]
[-56.33911133 -97.83115387]
[-46.69729614 -86.34048462]
[-37.05548096 -74.84981537]
[-24.95774841 -73.45131683]
[-16.83650017 -63.84279251]
[-17.51402092 -50.87701797]
[-8.18418407 -39.13162994]
[3.31623650 -40.31501389]
[14.04659748 -35.69710922]
[21.24054718 -26.34042740]
[22.98142052 -14.54493237]
[18.71163559 -3.28321314]
[27.39756966 8.94603634]
[36.08350372 21.17528534]
[44.76943588 33.40453720]
[53.45537186 45.63378525]
[62.30470276 57.74532318]
[71.31583405 69.73696136]
[80.32697296 81.72860718]
[89.33810425 93.72024536]
[91.41799927 75.08001709]
[114.78209686 62.46718597]
[127.77248383 54.96718597]
[140.76286316 47.46718597]
[153.65138245 39.79346085]
[166.43571472 31.94740105]
[179.22006226 24.10133934]
[186.55543518 9.43422318]
[202.93917847 8.72351742]
[211.51708984 22.70033455]
[203.46496582 36.98652267]
[187.06611633 36.88567734]
[174.28178406 44.73173904]
[161.49745178 52.57780075]
[157.38908386 58.84000397]
[148.26286316 60.45756531]
[135.27247620 67.95756531]
[122.28209686 75.45756531]
[121.98010254 82.95148468]
[136.96792603 83.55570221]
[136.36347961 98.54351807]
[121.37611389 97.93931580]
[121.07411957 105.43323517]
[133.41888428 113.95420837]
[145.76364136 122.47518158]
[158.10839844 130.99615479]
[170.45315552 139.51712036]
[182.79791260 148.03808594]
[198.77384949 146.57220459]
[209.77635193 158.24803162]
[207.36521912 174.10885620]
[193.39007568 181.98762512]
[178.57145691 175.84042358]
[174.27694702 160.38284302]
[161.93218994 151.86187744]
[149.58741760 143.34091187]
[137.24266052 134.81993103]
[124.89791107 126.29896545]
[112.55315399 117.77799225]
[99.17892456 124.56990051]
[98.77619934 139.56449890]
[98.37348175 154.55908203]
[97.97076416 169.55368042]
[97.56804657 184.54827881]
[97.16532135 199.54286194]
[109.55108643 208.89018250]
[114.04495239 223.74227905]
[108.91893768 238.38822937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[25 68]
[26 67]
[27 66]
[28 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[37 55]
[38 54]
[40 51]
[41 50]
[42 49]
[43 48]
[70 86]
[71 85]
[72 84]
[73 82]
[74 81]
[75 80]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
