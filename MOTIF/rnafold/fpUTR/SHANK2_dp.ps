%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:15 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SHANK2)
} def

/sequence { (\
CUCCUCCUGCACCCUCGCUGCCUCCUUUCCUCCAUGCUGCCUGGAUCUGGCGAGCUGGGGUGAUUAAUUGGCU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 71 0.156297682 ubox
2 63 0.008618149 ubox
2 70 0.151291508 ubox
2 71 0.092814863 ubox
3 62 0.008237774 ubox
3 70 0.122109022 ubox
3 71 0.561399416 ubox
4 60 0.006287558 ubox
4 70 0.567743525 ubox
4 71 0.060444829 ubox
5 59 0.006268029 ubox
5 63 0.015304486 ubox
5 70 0.058393821 ubox
5 71 0.029860613 ubox
6 58 0.006334369 ubox
6 62 0.013045973 ubox
6 70 0.039799030 ubox
6 71 0.165693099 ubox
7 57 0.006317152 ubox
7 70 0.167566433 ubox
7 71 0.031686160 ubox
8 17 0.019118820 ubox
8 62 0.005863755 ubox
8 66 0.151923909 ubox
8 70 0.031035783 ubox
9 16 0.025317413 ubox
9 18 0.476220900 ubox
9 19 0.005545848 ubox
9 21 0.011797173 ubox
9 55 0.005882277 ubox
9 61 0.008238134 ubox
9 65 0.140116893 ubox
9 69 0.030170610 ubox
9 72 0.022389780 ubox
10 17 0.476635536 ubox
10 20 0.012009264 ubox
10 54 0.005233327 ubox
10 60 0.008360594 ubox
10 62 0.832800496 ubox
10 71 0.019905905 ubox
11 19 0.011657564 ubox
11 61 0.834817475 ubox
12 59 0.010638973 ubox
12 60 0.835098023 ubox
13 58 0.011930572 ubox
13 59 0.835051486 ubox
13 60 0.008466586 ubox
14 54 0.006380747 ubox
14 57 0.013065213 ubox
14 58 0.834965328 ubox
14 59 0.011388267 ubox
15 53 0.011123223 ubox
15 57 0.817035341 ubox
15 58 0.013682997 ubox
16 52 0.012582809 ubox
16 57 0.087473066 ubox
17 51 0.012579226 ubox
17 55 0.834314071 ubox
17 56 0.019293455 ubox
17 72 0.035254439 ubox
18 50 0.012575766 ubox
18 54 0.834983602 ubox
18 71 0.035263045 ubox
19 49 0.012371672 ubox
19 52 0.408816046 ubox
19 53 0.723694339 ubox
19 70 0.034379708 ubox
20 37 0.006941298 ubox
20 48 0.009418643 ubox
20 51 0.832689625 ubox
20 55 0.003903208 ubox
20 69 0.023216835 ubox
20 72 0.547459971 ubox
21 36 0.006934040 ubox
21 50 0.833515545 ubox
21 71 0.548393213 ubox
22 49 0.832805936 ubox
22 50 0.038046950 ubox
22 54 0.003617586 ubox
22 70 0.548046655 ubox
22 71 0.003984053 ubox
23 45 0.287308591 ubox
23 49 0.035691492 ubox
23 50 0.005911901 ubox
23 53 0.005631591 ubox
23 63 0.005268965 ubox
23 70 0.004579515 ubox
24 44 0.289781000 ubox
24 49 0.018509038 ubox
24 50 0.030580498 ubox
24 52 0.006231545 ubox
24 62 0.005266669 ubox
24 71 0.007779545 ubox
25 43 0.289694893 ubox
25 44 0.016287624 ubox
25 49 0.031499369 ubox
25 50 0.008072304 ubox
25 70 0.007915813 ubox
26 43 0.016170265 ubox
26 44 0.004435712 ubox
26 45 0.026260673 ubox
26 49 0.008532188 ubox
26 63 0.034444370 ubox
26 67 0.046815919 ubox
27 43 0.004866668 ubox
27 44 0.017105252 ubox
27 45 0.099413028 ubox
27 49 0.004136147 ubox
27 62 0.034231377 ubox
27 63 0.089402640 ubox
27 66 0.047950909 ubox
27 67 0.020081453 ubox
28 43 0.013842655 ubox
28 44 0.074198990 ubox
28 45 0.744334559 ubox
28 62 0.085643335 ubox
28 63 0.532243025 ubox
28 66 0.009549895 ubox
29 43 0.073460540 ubox
29 44 0.753627429 ubox
29 50 0.003643709 ubox
29 60 0.050798833 ubox
29 62 0.537154012 ubox
30 43 0.753328250 ubox
30 44 0.007342590 ubox
30 49 0.003933904 ubox
30 59 0.050730005 ubox
30 60 0.543719315 ubox
31 43 0.007790458 ubox
31 45 0.187712529 ubox
31 58 0.012041664 ubox
31 59 0.543178682 ubox
31 60 0.059221985 ubox
32 43 0.003655862 ubox
32 44 0.193448027 ubox
32 57 0.011171515 ubox
32 58 0.545780367 ubox
32 59 0.065591282 ubox
33 39 0.267976937 ubox
33 43 0.193696105 ubox
33 57 0.545802236 ubox
33 58 0.065562175 ubox
34 38 0.218709916 ubox
34 42 0.183495018 ubox
34 56 0.533731360 ubox
36 42 0.009679405 ubox
36 55 0.549419261 ubox
37 44 0.006105188 ubox
37 54 0.549512579 ubox
38 43 0.005742363 ubox
38 52 0.270006838 ubox
38 53 0.476078820 ubox
39 51 0.549082578 ubox
40 50 0.549667206 ubox
41 49 0.549536550 ubox
41 50 0.018088751 ubox
42 49 0.018182713 ubox
43 48 0.031677931 ubox
62 69 0.003303252 ubox
63 68 0.008523755 ubox
64 71 0.014858123 ubox
65 70 0.016395702 ubox
10 62 0.9500000 lbox
11 61 0.9500000 lbox
12 60 0.9500000 lbox
13 59 0.9500000 lbox
14 58 0.9500000 lbox
15 57 0.9500000 lbox
17 55 0.9500000 lbox
18 54 0.9500000 lbox
19 53 0.9500000 lbox
20 51 0.9500000 lbox
21 50 0.9500000 lbox
22 49 0.9500000 lbox
28 45 0.9500000 lbox
29 44 0.9500000 lbox
30 43 0.9500000 lbox
showpage
end
%%EOF
