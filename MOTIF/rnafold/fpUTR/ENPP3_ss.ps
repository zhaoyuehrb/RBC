%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCCAAUCACUGAAGAGCUGUGAUCUUCCUAAACAGUUAAAAGUCAGGCACAGCUAUGUAACUCAUACAGUUUCUCUUUGCCAGACUAGACUAAAGAAGGAGCACUAAUUUAUUCUGAUAAAACAGGUCUAUGCAGCUACCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[111.06189728 489.17694092]
[99.92620850 499.61526489]
[85.36170197 504.18011475]
[70.26016235 501.96508789]
[57.62001801 493.41000366]
[49.95098114 480.21347046]
[48.77574158 464.99566650]
[54.32764053 450.77810669]
[65.50434875 440.38369751]
[80.08672333 435.87622070]
[82.26356506 421.03503418]
[80.10851288 413.91455078]
[84.64316559 405.90899658]
[87.12828064 391.11627197]
[89.61340332 376.32357788]
[80.72342682 366.94461060]
[78.85057831 353.96127319]
[84.90467834 342.10479736]
[96.86505127 335.82730103]
[99.65737915 321.08950806]
[102.44970703 306.35168457]
[105.24202728 291.61389160]
[108.03435516 276.87606812]
[110.82667542 262.13827515]
[113.15778351 247.32051086]
[115.02539062 232.43724060]
[116.89300537 217.55395508]
[118.76062012 202.67068481]
[120.62823486 187.78739929]
[118.91554260 172.88549805]
[113.72013092 158.81398010]
[108.52471161 144.74246216]
[103.32929993 130.67094421]
[87.48196411 128.19732666]
[75.01808929 118.10234833]
[69.30651093 103.11453247]
[71.89098358 87.28489685]
[82.07295990 74.89199066]
[76.58592987 60.93160248]
[71.09889984 46.97121429]
[65.61186981 33.01082230]
[55.33181000 29.21533203]
[48.99750519 20.54467773]
[48.52725983 10.03763294]
[53.83476257 1.21367383]
[48.93321228 -12.96288395]
[44.03166199 -27.13944244]
[39.13011169 -41.31600189]
[27.30807495 -51.83028030]
[30.46173668 -66.38719177]
[25.56018448 -80.56375122]
[20.65863419 -94.74031067]
[15.75708389 -108.91686249]
[3.93504810 -119.43114471]
[7.08870935 -133.98805237]
[2.18715858 -148.16461182]
[-16.28941917 -152.88781738]
[-28.15391541 -167.62791443]
[-28.80959129 -186.38945007]
[-18.17306900 -201.67742920]
[-23.94934082 -215.52064514]
[-29.72561455 -229.36386108]
[-35.50188828 -243.20707703]
[-49.73314285 -250.61322021]
[-52.67431259 -266.38436890]
[-42.06917572 -278.42224121]
[-26.05308914 -277.49243164]
[-16.91222382 -264.30819702]
[-21.65866852 -248.98335266]
[-15.88239670 -235.14013672]
[-10.10612392 -221.29692078]
[-4.32985163 -207.45368958]
[6.92347622 -206.96049500]
[17.21400642 -202.25418091]
[25.01794815 -193.98908997]
[29.16378403 -183.34954834]
[29.00802231 -171.88032532]
[24.53476715 -161.26229858]
[16.36371613 -153.06616211]
[21.26526833 -138.88960266]
[32.73670959 -129.38932800]
[29.93364143 -113.81841278]
[34.83519363 -99.64186096]
[39.73674393 -85.46530151]
[44.63829422 -71.28874207]
[56.10973740 -61.78846741]
[53.30666733 -46.21755219]
[58.20821762 -32.04099274]
[63.10977173 -17.86443520]
[68.01132202 -3.68787694]
[83.51887512 7.79887152]
[79.57225800 27.52379227]
[85.05928802 41.48418045]
[90.54631805 55.44457245]
[96.03335571 69.40496063]
[109.59574890 70.67914581]
[121.28734589 77.66976166]
[128.82873535 89.01389313]
[130.74964905 102.49989319]
[126.67558289 115.49851227]
[117.40081787 125.47552490]
[122.59622955 139.54704285]
[127.79164886 153.61856079]
[132.98706055 167.69007874]
[135.83718872 152.96334839]
[142.19615173 139.37791443]
[151.67915344 127.75584412]
[163.71240234 118.80036163]
[177.56779480 113.05333710]
[192.40695190 110.86253357]
[207.33195496 112.36050415]
[221.43974304 117.45661163]
[233.87666321 125.84249878]
[243.89016724 137.01074219]
[250.87435913 150.28556824]
[254.40663147 164.86373901]
[254.27325439 179.86314392]
[250.48229980 194.37620544]
[243.26313782 207.52473450]
[233.05261230 218.51313782]
[220.46853638 226.67652893]
[206.27233887 231.52095032]
[191.32305908 232.75326538]
[176.52520752 230.29891968]
[162.77421570 224.30641174]
[150.90211487 215.13835144]
[141.62728882 203.34947205]
[135.51152039 189.65501404]
[133.64390564 204.53828430]
[131.77629089 219.42156982]
[129.90867615 234.30485535]
[128.04106140 249.18812561]
[130.12628174 254.11473083]
[130.07382202 258.86337280]
[128.32154846 262.63580322]
[125.56448364 264.93060303]
[122.77215576 279.66839600]
[119.97983551 294.40621948]
[117.18750763 309.14401245]
[114.39518738 323.88183594]
[111.60285950 338.61962891]
[121.71362305 352.85723877]
[118.49436951 369.67749023]
[104.40611267 378.80868530]
[101.92098999 393.60140991]
[99.43587494 408.39410400]
[97.10476685 423.21185303]
[94.92793274 438.05307007]
[107.60166931 446.55831909]
[115.32260895 459.72454834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 148]
[11 147]
[13 146]
[14 145]
[15 144]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 132]
[26 131]
[27 130]
[28 129]
[29 128]
[30 104]
[31 103]
[32 102]
[33 101]
[38 95]
[39 94]
[40 93]
[41 92]
[45 90]
[46 89]
[47 88]
[48 87]
[50 85]
[51 84]
[52 83]
[53 82]
[55 80]
[56 79]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
