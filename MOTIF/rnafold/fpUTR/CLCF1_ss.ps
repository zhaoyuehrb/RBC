%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCAGAAAAAAAAAAAAAAAGUUUGCAGAAUGUCCCACACCGAAAAAAAAAAAAAAUCCGAAACCGAGCGAAAAAAACCUGCGAGUGGGCCUGGCGGAUGGGAUUAUUAAAGCUUCGCCGGAGCCGCGGCUCGCCCUCCCACUCCGCCAGCCUCCGGGAGAGGAGCCGCACCCGGCCGGCCCGGCCCCAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[-5.55368423 188.74293518]
[-7.50394249 203.61561584]
[-13.00480366 217.57055664]
[-21.72746277 229.77365112]
[-33.15053940 239.49543762]
[-46.59123230 246.15484619]
[-61.24615097 249.35382080]
[-76.23931885 248.90112305]
[-90.67454529 244.82383728]
[-103.68898010 237.36566162]
[-114.50472260 226.97241211]
[-122.47525787 214.26530457]
[-127.12418365 200.00390625]
[-128.17359924 185.04066467]
[-125.56078339 170.26997375]
[-119.44191742 156.57473755]
[-110.18273926 144.77355957]
[-98.33670807 135.57185364]
[-84.61190033 129.51960754]
[-69.82868958 126.97861481]
[-54.87273788 128.10034180]
[-40.54562378 123.65807343]
[-26.21850586 119.21580505]
[-11.89138889 114.77354431]
[-26.59435272 111.80320740]
[-41.29731369 108.83287811]
[-56.00027847 105.86254883]
[-70.70323944 102.89221954]
[-85.40620422 99.92188263]
[-100.10916901 96.95155334]
[-104.83490753 111.20724487]
[-111.24456787 124.78935242]
[-119.24466705 137.49981689]
[-128.71855164 149.15325928]
[-139.52804565 159.57977295]
[-151.51554871 168.62727356]
[-164.50621033 176.16384888]
[-178.31062317 182.07957458]
[-192.72744751 186.28819275]
[-207.54644775 188.72831726]
[-222.55154419 189.36437988]
[-237.52389526 188.18710327]
[-252.24517822 185.21363831]
[-266.50070190 180.48738098]
[-280.08255005 174.07720947]
[-292.79272461 166.07662964]
[-304.44580078 156.60231018]
[-314.87191772 145.79241943]
[-323.91897583 133.80459595]
[-331.45504761 120.81363678]
[-337.37026978 107.00901794]
[-341.57833862 92.59203339]
[-344.01791382 77.77292633]
[-344.65341187 62.76781082]
[-343.47558594 47.79550171]
[-340.50158691 33.07434082]
[-335.77478027 18.81900215]
[-329.36410522 5.23737288]
[-321.36303711 -7.47248650]
[-311.88830566 -19.12522888]
[-301.07800293 -29.55092430]
[-289.08984375 -38.59753418]
[-276.09860229 -46.13313293]
[-262.29376221 -52.04782867]
[-247.87661743 -56.25536728]
[-233.05743408 -58.69438934]
[-218.05229187 -59.32933426]
[-203.08001709 -58.15093231]
[-188.35897827 -55.17637253]
[-174.10380554 -50.44903564]
[-160.52241516 -44.03785706]
[-147.81286621 -36.03632736]
[-136.16047668 -26.56114006]
[-125.73518372 -15.75046539]
[-116.68901825 -3.76195788]
[-109.15390778 9.22955608]
[-103.23973083 23.03462219]
[-99.03273010 37.45191956]
[-96.59426117 52.27120590]
[-95.95987701 67.27636719]
[-97.13883972 82.24858856]
[-82.43587494 85.21892548]
[-67.73291016 88.18925476]
[-53.02994919 91.15958405]
[-38.32698441 94.12991333]
[-23.62402153 97.10025024]
[-8.92105770 100.07057953]
[5.87449837 93.10822296]
[20.64949417 99.50404358]
[34.69421768 94.23661804]
[48.73894119 88.96919250]
[62.78366470 83.70177460]
[76.82838440 78.43434906]
[89.35826874 70.18801880]
[99.75135040 59.37210464]
[110.14442444 48.55619049]
[120.53749847 37.74028015]
[130.93057251 26.92436600]
[141.32365417 16.10845566]
[151.71673584 5.29254246]
[162.02323914 -5.60589457]
[172.24252319 -16.58616447]
[182.46179199 -27.56643486]
[192.68107605 -38.54670334]
[202.90036011 -49.52697372]
[199.76119995 -57.21810150]
[199.02436829 -65.45854187]
[200.73521423 -73.51851654]
[204.72315979 -80.69006348]
[210.61853027 -86.34923553]
[217.88673401 -90.01039124]
[225.87670898 -91.36779022]
[233.87924194 -90.32108307]
[241.18986511 -86.98242188]
[252.41142273 -96.93614197]
[251.66432190 -110.39136505]
[258.70349121 -121.65379333]
[270.76672363 -126.72704315]
[283.35910034 -123.96399689]
[294.73797607 -133.73751831]
[306.11682129 -143.51103210]
[317.49569702 -153.28454590]
[318.44165039 -169.06050110]
[330.32107544 -179.48423767]
[346.08615112 -178.37155151]
[356.38369751 -166.38256836]
[355.10440063 -150.63014221]
[343.00723267 -140.45989990]
[327.26919556 -141.90568542]
[315.89035034 -132.13217163]
[304.51147461 -122.35865021]
[293.13262939 -112.58513641]
[292.58123779 -95.78157806]
[279.79946899 -84.34667206]
[262.36514282 -85.71458435]
[251.14360046 -75.76086426]
[252.07847595 -53.85492325]
[236.32998657 -38.20643234]
[213.88063049 -39.30769348]
[203.66134644 -28.32742500]
[193.44206238 -17.34715462]
[183.22279358 -6.36688519]
[173.00350952 4.61338472]
[170.74520874 11.65971184]
[162.53263855 15.68561935]
[152.13957214 26.50153160]
[141.74649048 37.31744385]
[131.35340881 48.13335419]
[120.96033478 58.94926834]
[110.56726074 69.76518250]
[100.17417908 80.58109283]
[113.68227386 77.20371246]
[129.64445496 83.85760498]
[143.68917847 89.12503052]
[157.73390198 94.39244843]
[171.77862549 99.65987396]
[186.92012024 94.35753632]
[200.42903137 103.01135254]
[201.94250488 118.98285675]
[190.29951477 130.02008057]
[174.43156433 127.65620422]
[166.51119995 113.70459747]
[152.46647644 108.43717194]
[138.42175293 103.16975403]
[124.37702942 97.90232849]
[120.30394745 104.19995117]
[108.08470154 123.09280396]
[118.64892578 133.74160767]
[129.21316528 144.39041138]
[139.77738953 155.03921509]
[155.73422241 158.82231140]
[160.17651367 174.60832214]
[148.53442383 186.15794373]
[132.78433228 181.58992004]
[129.12858582 165.60343933]
[118.56435394 154.95463562]
[108.00012970 144.30583191]
[97.43589783 133.65702820]
[77.31352997 113.86360168]
[82.09580994 92.47907257]
[68.05108643 97.74649811]
[54.00636292 103.01391602]
[39.96163940 108.28134155]
[25.91691589 113.54876709]
[18.90537071 126.80916595]
[22.45936203 141.38204956]
[26.01335526 155.95494080]
[37.72937393 167.42956543]
[33.38854980 183.24377441]
[17.45635033 187.12927246]
[6.32245731 175.08898926]
[11.44046402 159.50894165]
[7.88647175 144.93605042]
[4.33247948 130.36315918]
[0.46478516 144.85594177]
[-3.40290904 159.34873962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 82]
[30 81]
[89 184]
[90 183]
[91 182]
[92 181]
[93 180]
[94 151]
[95 150]
[96 149]
[97 148]
[98 147]
[99 146]
[100 145]
[101 143]
[102 142]
[103 141]
[104 140]
[105 139]
[114 136]
[115 135]
[119 132]
[120 131]
[121 130]
[122 129]
[153 165]
[154 164]
[155 163]
[156 162]
[167 178]
[168 177]
[169 176]
[170 175]
[185 194]
[186 193]
[187 192]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
