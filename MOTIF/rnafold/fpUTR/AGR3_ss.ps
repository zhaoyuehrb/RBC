%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAACAUCCAGAAUACAUUUCCAACAAGAGCACUGGCCAAGUCAGCUUCUUCUGAGAGAGUCUCUAGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[141.28822327 151.78073120]
[134.79942322 156.34680176]
[127.81112671 160.10409546]
[120.42365265 162.99870300]
[112.74301910 164.98905945]
[104.87948608 166.04660034]
[96.94591522 166.15614319]
[89.05618286 165.31611633]
[81.32352448 163.53858948]
[73.85894775 160.84906006]
[66.76957703 157.28613281]
[60.15717697 152.90095520]
[54.11665726 147.75646973]
[48.73472214 141.92652893]
[44.08861923 135.49478149]
[40.24503708 128.55357361]
[37.25914383 121.20252228]
[35.17379379 113.54713440]
[34.01892090 105.69730377]
[33.81110382 97.76570129]
[34.55332565 89.86616516]
[36.23492813 82.11208344]
[38.83177948 74.61475372]
[42.30660248 67.48179626]
[46.60952377 60.81557846]
[51.67877960 54.71179199]
[57.44161224 49.25804901]
[63.81530380 44.53262329]
[70.70836639 40.60334778]
[78.02186584 37.52661514]
[85.65082550 35.34659195]
[93.48574829 34.09456253]
[101.41416931 33.78850555]
[109.32229614 34.43280792]
[113.10196686 19.91681290]
[116.88163757 5.40081882]
[120.66130829 -9.11517525]
[124.44097900 -23.63117027]
[122.58085632 -40.48276520]
[138.25894165 -46.93518448]
[148.79933167 -33.65600586]
[138.95697021 -19.85149956]
[135.17730713 -5.33550453]
[131.39762878 9.18048954]
[127.61796570 23.69648361]
[123.83829498 38.21247864]
[150.73649597 57.43510818]
[164.99069214 87.26531219]
[163.04859924 120.26911163]
[176.71702576 126.44763184]
[190.38545227 132.62614441]
[204.05387878 138.80467224]
[217.72230530 144.98318481]
[231.39073181 151.16171265]
[245.18722534 157.04872131]
[259.10556030 162.64157104]
[273.02389526 168.23440552]
[286.94223022 173.82725525]
[303.89358521 174.12265015]
[308.30236816 190.49333191]
[293.79193115 199.26164246]
[281.34936523 187.74559021]
[267.43103027 182.15274048]
[253.51271057 176.55990601]
[239.59437561 170.96705627]
[231.98718262 171.40975952]
[225.21220398 164.83013916]
[211.54377747 158.65161133]
[197.87535095 152.47309875]
[184.20692444 146.29458618]
[170.53849792 140.11605835]
[156.87007141 133.93754578]
[152.40332031 140.49510193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[49 72]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
