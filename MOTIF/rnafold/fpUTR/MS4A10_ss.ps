%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGGGGAGCUCCGGCAGCGCAAGAGGGCAAAGCACAGCUGGAAGCUCAGAGCUGCAGUCCCAGGUCCUGGGCCAGGGCCCCCAUCCAGCAUCA\
) } def
/len { sequence length } bind def

/coor [
[94.57128906 299.05865479]
[93.04447937 283.95788574]
[97.07956696 269.32632446]
[106.13083649 257.14279175]
[118.97418976 249.05497742]
[116.07762146 234.33729553]
[113.18105316 219.61962891]
[110.28448486 204.90196228]
[107.38791656 190.18428040]
[102.92260742 184.11405945]
[104.64397430 174.94352722]
[102.22550964 160.13978577]
[99.80704498 145.33602905]
[97.38858032 130.53228760]
[78.35865021 121.69542694]
[69.47433472 102.68761444]
[74.90065765 82.41982269]
[65.09444427 71.06912994]
[55.28823471 59.71844101]
[45.48202133 48.36774826]
[35.67580795 37.01705551]
[21.95580101 39.19301987]
[9.07199192 34.29732513]
[0.39736298 23.72747040]
[-1.85484278 10.35088921]
[2.80497885 -2.27248001]
[-6.62853289 -13.93476295]
[-16.06204414 -25.59704590]
[-30.89868927 -22.18598175]
[-45.68479919 -25.54126167]
[-57.49949646 -34.94515228]
[-64.03275299 -48.49053955]
[-64.03698730 -63.46750259]
[-57.56491470 -76.90542603]
[-66.99842834 -88.56771088]
[-76.43193817 -100.22998810]
[-91.09412384 -108.74214172]
[-86.97352600 -125.18772125]
[-70.02995300 -125.78074646]
[-64.76965332 -109.66350555]
[-55.33614349 -98.00122070]
[-45.90262985 -86.33893585]
[-31.40892982 -89.86003113]
[-16.76350403 -86.72619629]
[-4.88240242 -77.50662994]
[1.84498692 -63.98766327]
[2.03637290 -48.82684708]
[-4.39976168 -35.03055954]
[5.03375006 -23.36827469]
[14.46726227 -11.70599174]
[30.73403358 -13.11430073]
[44.81171417 -4.52218151]
[51.12112808 10.89423084]
[47.02650070 27.21084404]
[56.83271408 38.56153488]
[66.63892365 49.91222763]
[76.44513702 61.26292038]
[86.25135040 72.61360931]
[97.09364319 69.49438477]
[108.32989502 70.51013184]
[118.43704224 75.52317047]
[126.04508209 83.85399628]
[140.34065247 79.31124878]
[154.63623047 74.76849365]
[168.93180847 70.22574615]
[183.22737122 65.68299866]
[196.49154663 55.12371826]
[210.31004333 64.94641876]
[204.69656372 80.94407654]
[187.77012634 79.97856903]
[173.47454834 84.52131653]
[159.17898560 89.06407166]
[144.88340759 93.60681915]
[130.58782959 98.14957428]
[129.72802734 107.43531036]
[126.11511993 116.03247070]
[120.08370209 123.14485931]
[112.19232941 128.11381531]
[114.61079407 142.91757202]
[117.02925873 157.72131348]
[119.44772339 172.52507019]
[122.10559082 187.28771973]
[125.00215912 202.00538635]
[127.89872742 216.72306824]
[130.79528809 231.44073486]
[133.69186401 246.15840149]
[148.64216614 248.77618408]
[161.63525391 256.62121582]
[170.91389465 268.63250732]
[175.22322083 283.18563843]
[173.98046875 298.31243896]
[167.35368347 311.96713257]
[156.23908997 322.30297852]
[142.13983154 327.92221069]
[126.96274567 328.06481934]
[112.76039124 322.71157837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[11 81]
[12 80]
[13 79]
[14 78]
[17 58]
[18 57]
[19 56]
[20 55]
[21 54]
[26 50]
[27 49]
[28 48]
[34 42]
[35 41]
[36 40]
[62 74]
[63 73]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
