%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAUGACCAAAUUACUGCCAGAGCCUUCUAACUUCUCUGCACCCACUCCAGUCUAGCUGAGGCCUGAGGAAUAGAUGGAUAAAUAACAGUAUCUGAGACCUGCUGUUGGUGUAUGUUAA\
) } def
/len { sequence length } bind def

/coor [
[106.14143372 323.71630859]
[92.73107910 330.64923096]
[77.94731140 333.70581055]
[62.88718796 332.65933228]
[48.66826248 327.58737183]
[36.34567642 318.86633301]
[26.83384895 307.14337158]
[20.83862114 293.28842163]
[18.80487442 278.32958984]
[20.88353157 263.37692261]
[26.92033768 249.54003906]
[36.46732712 237.84570312]
[48.81604385 229.16171265]
[63.05013657 224.13247681]
[78.11333466 223.13119507]
[81.18161774 208.44836426]
[84.24990082 193.76553345]
[82.51771545 186.48840332]
[87.59083557 178.74638367]
[91.03615570 164.14741516]
[94.48146820 149.54844666]
[97.92678833 134.94947815]
[79.28155518 126.53765869]
[69.16097260 109.68516541]
[70.39679718 90.86468506]
[81.64556122 76.73020172]
[75.63875580 62.98544693]
[63.02260208 53.43854523]
[65.01573181 38.67789841]
[59.00892639 24.93314743]
[53.00211716 11.18839264]
[46.99530792 -2.55636048]
[35.22902679 -8.02643299]
[30.54073906 -19.69285393]
[34.95877075 -31.03345299]
[29.30785370 -44.92831421]
[23.65693474 -58.82317352]
[18.00601578 -72.71803284]
[12.35509777 -86.61289215]
[-2.42559266 -97.50257874]
[0.51210201 -114.75241089]
[-5.49470663 -128.49716187]
[-13.88850307 -116.06558990]
[-28.81814957 -114.61449432]
[-39.44880676 -125.19699097]
[-38.06552124 -140.13307190]
[-25.67218399 -148.58323669]
[-11.26233292 -144.41439819]
[-15.45461750 -158.81665039]
[-19.64690208 -173.21890259]
[-25.11184502 -180.68949890]
[-23.75657845 -188.04614258]
[-27.57664490 -202.55155945]
[-31.39671135 -217.05697632]
[-41.27745819 -230.83403015]
[-30.77408218 -244.14250183]
[-15.07808685 -237.73374939]
[-16.89129639 -220.87704468]
[-13.07122898 -206.37162781]
[-9.25116158 -191.86621094]
[-5.24465418 -177.41119385]
[-1.05236959 -163.00894165]
[3.13991499 -148.60668945]
[8.25004673 -134.50398254]
[14.25685596 -120.75922394]
[25.46199036 -116.00810242]
[30.54475975 -104.50806427]
[26.24995804 -92.26380920]
[31.90087509 -78.36894989]
[37.55179214 -64.47409058]
[43.20271301 -50.57923126]
[48.85363007 -36.68437195]
[63.25748444 -26.74878883]
[60.74006271 -8.56316948]
[66.74687195 5.18158436]
[72.75367737 18.92633820]
[78.76049042 32.67109299]
[90.94699097 41.23487473]
[89.38350677 56.97863770]
[95.39031219 70.72338867]
[103.72187805 69.92039490]
[112.13254547 71.49377441]
[119.94380188 75.42115784]
[126.49715424 81.48652649]
[131.20932007 89.29010010]
[133.62322998 98.27387238]
[133.45063782 107.76123810]
[130.60220337 117.00792694]
[144.76954651 121.93606567]
[158.93688965 126.86419678]
[173.10421753 131.79232788]
[187.27156067 136.72047424]
[201.43890381 141.64860535]
[213.51678467 132.05026245]
[228.86888123 130.52816772]
[242.59637451 137.56799316]
[250.31889343 150.92338562]
[249.57218933 166.33267212]
[240.59454346 178.87879944]
[226.25070190 184.55834961]
[211.11770630 181.55900574]
[200.02445984 170.83784485]
[196.51075745 155.81594849]
[182.34342957 150.88780212]
[168.17608643 145.95967102]
[154.00874329 141.03153992]
[139.84141541 136.10340881]
[125.67407227 131.17526245]
[112.52574921 138.39480591]
[109.08043671 152.99375916]
[105.63511658 167.59272766]
[102.18980408 182.19169617]
[98.93273163 196.83381653]
[95.86445618 211.51664734]
[92.79617310 226.19947815]
[106.19787598 233.14907837]
[117.22683716 243.45755005]
[125.06463623 256.35992432]
[129.12965393 270.89880371]
[129.12025452 285.99523926]
[125.03710938 300.52899170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 115]
[16 114]
[17 113]
[19 112]
[20 111]
[21 110]
[22 109]
[26 80]
[27 79]
[29 77]
[30 76]
[31 75]
[32 74]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[41 65]
[42 64]
[48 63]
[49 62]
[50 61]
[52 60]
[53 59]
[54 58]
[88 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
