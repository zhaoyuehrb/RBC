%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCAGUUCUCAGAUGGUUCUUGGAGCACUGGCGAAGUCAAGCGAAAAUAAGGUGCCACUUCAUCUGUAUACUAGGAGGAAAGUCAACA\
) } def
/len { sequence length } bind def

/coor [
[184.92225647 361.34445190]
[179.89906311 347.21051025]
[174.87586975 333.07659912]
[169.85267639 318.94268799]
[164.82948303 304.80877686]
[153.27682495 295.40744019]
[155.94598389 279.81301880]
[150.92279053 265.67910767]
[145.89959717 251.54518127]
[131.58525085 247.51559448]
[122.27839661 235.68992615]
[121.71289062 220.47369385]
[130.31503296 207.69444275]
[125.29183960 193.56053162]
[120.26864624 179.42662048]
[115.24545288 165.29269409]
[110.22225952 151.15878296]
[105.19906616 137.02487183]
[100.17587280 122.89096069]
[89.00955963 120.08076477]
[80.62393188 112.18995667]
[77.14063263 101.21497345]
[79.44095612 89.93258667]
[86.94291687 81.19735718]
[82.89596558 66.75359344]
[78.20993805 61.61332703]
[77.15302277 55.75658035]
[79.10199738 51.18497849]
[76.05015564 36.49871826]
[72.99831390 21.81245613]
[69.94647217 7.12619448]
[66.89463806 -7.56006670]
[52.72645187 -9.84107304]
[40.23109436 -16.83712578]
[30.92029572 -27.67815018]
[25.91235161 -41.03034973]
[25.79784775 -55.26029205]
[30.57007599 -68.63474274]
[39.62836838 -79.53173828]
[51.85361862 -86.63734436]
[49.30496597 -101.41923523]
[38.40143585 -113.66852570]
[43.81402588 -129.14871216]
[59.97472000 -131.93508911]
[70.25878906 -119.16129303]
[64.08686066 -103.96789551]
[66.63551331 -89.18599701]
[82.05519104 -85.97888184]
[95.11929321 -77.11390686]
[103.83814240 -63.90597153]
[106.87043762 -48.33403397]
[103.72952271 -32.74461746]
[94.86124420 -19.49822235]
[81.58089447 -10.61190701]
[84.63273621 4.07435417]
[87.68457794 18.76061630]
[90.73641968 33.44687653]
[93.78825378 48.13313675]
[97.33972168 62.70664597]
[101.38667297 77.15040588]
[117.38576508 85.10832214]
[122.79138184 102.14002228]
[114.30978394 117.86776733]
[119.33297729 132.00167847]
[124.35617065 146.13558960]
[129.37936401 160.26950073]
[134.40255737 174.40342712]
[139.42575073 188.53733826]
[144.44894409 202.67124939]
[159.18656921 207.15554810]
[168.35067749 219.31582642]
[168.59426880 234.36257935]
[160.03350830 246.52198792]
[165.05670166 260.65591431]
[170.07989502 274.78982544]
[181.99185181 285.20211792]
[178.96339417 299.78558350]
[183.98658752 313.91949463]
[189.00978088 328.05340576]
[194.03297424 342.18731689]
[199.05616760 356.32122803]
[214.21684265 358.42181396]
[226.65803528 367.33673096]
[233.52081299 381.01739502]
[233.22819519 396.32009888]
[225.84741211 409.72839355]
[213.07450867 418.16116333]
[197.84460449 419.68060303]
[183.65742493 413.93756104]
[173.77308655 402.25173950]
[170.46292114 387.30847168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[7 75]
[8 74]
[9 73]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[24 60]
[25 59]
[28 58]
[29 57]
[30 56]
[31 55]
[32 54]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
