%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAGAACGAGGACACUGCGGGGUGUGCGGCGGCCCAAGCGGUUUCAAACGGCUUAGAGCAGGCCGCUUGGUUCUGACCCAGCUGAGGAAAUACUCUUAAUUCUAAGGAAAACCUGGAAGCACA\
) } def
/len { sequence length } bind def

/coor [
[55.36980057 209.44987488]
[56.05202484 218.54711914]
[54.36024475 227.49209595]
[50.41950607 235.67720032]
[44.50727463 242.54904175]
[37.03392792 247.64587402]
[28.51427460 250.62864685]
[19.53210258 251.30349731]
[10.70016861 249.63436890]
[2.61840463 245.74475098]
[-8.05358791 256.28555298]
[-18.59439278 266.95755005]
[-29.00239944 277.75909424]
[-32.42490768 293.79711914]
[-48.10678864 298.59408569]
[-59.91586685 287.21524048]
[-55.70397186 271.36621094]
[-39.80394745 267.35110474]
[-29.39593887 256.54956055]
[-26.99455452 249.47390747]
[-18.59439278 245.61357117]
[-7.92240095 235.07276917]
[-13.25303936 214.30717468]
[-5.21349859 194.29685974]
[13.21650314 182.85855103]
[34.96750259 184.55540466]
[43.66377258 172.33349609]
[52.36004639 160.11160278]
[61.05632019 147.88969421]
[69.75259399 135.66780090]
[82.77873993 84.24780273]
[77.33976746 70.26862335]
[71.72831726 56.35777664]
[65.94524384 42.51739883]
[60.16216660 28.67702103]
[45.27693939 17.92181969]
[48.06325531 0.64205408]
[41.93961716 -13.05104733]
[35.81597900 -26.74415016]
[29.69233704 -40.43725204]
[23.56869888 -54.13035202]
[17.44505882 -67.82345581]
[11.32141876 -81.51655579]
[5.19777918 -95.20965576]
[-0.92586040 -108.90276337]
[-7.04949999 -122.59586334]
[-13.17313957 -136.28897095]
[-20.16292191 -123.01707458]
[-34.42079544 -118.35735321]
[-47.89933395 -124.93981934]
[-52.99099350 -139.04920959]
[-46.82193375 -152.72190857]
[-32.87409973 -158.24078369]
[-19.01968193 -152.49063110]
[-23.05109787 -166.93873596]
[-27.08251190 -181.38682556]
[-37.16333008 -195.01817322]
[-26.85535240 -208.47856140]
[-11.06747246 -202.29963684]
[-12.63440800 -185.41824341]
[-8.60299397 -170.97013855]
[-4.57157898 -156.52203369]
[0.51996207 -142.41259766]
[6.64360189 -128.71949768]
[12.76724148 -115.02639771]
[18.89088058 -101.33329773]
[25.01452065 -87.64019775]
[31.13816071 -73.94709778]
[37.26179886 -60.25399399]
[43.38544083 -46.56089020]
[49.50907898 -32.86779022]
[55.63272095 -19.17468834]
[61.75635910 -5.48158550]
[72.99590302 -0.83051401]
[78.17957306 10.61664009]
[74.00254059 22.89394569]
[79.78562164 36.73432159]
[85.56869507 50.57469940]
[91.10992432 55.58728409]
[91.31895447 64.82965088]
[96.75792694 78.80883026]
[97.15219116 63.81401443]
[108.48878479 53.99150848]
[123.38696289 55.73629761]
[132.14720154 67.91243744]
[129.06610107 82.59258270]
[116.15007019 90.21911621]
[131.01145935 88.18460846]
[145.87284851 86.15010071]
[155.22831726 73.41233826]
[170.86302185 71.10330963]
[183.50115967 80.59292603]
[185.64476013 96.25116730]
[176.02204895 108.78827667]
[160.34202576 110.76620483]
[147.90734863 101.01148987]
[133.04595947 103.04599762]
[118.18457794 105.08050537]
[115.63880920 112.13522339]
[129.74816895 117.22699738]
[124.65615082 131.33625793]
[110.54727173 126.24465942]
[108.00149536 133.29937744]
[118.13915253 144.35505676]
[128.27679443 155.41073608]
[138.41445923 166.46641541]
[148.55210876 177.52209473]
[156.75108337 181.79313660]
[158.79960632 188.97886658]
[168.66070557 200.28190613]
[184.34271240 205.07843018]
[187.76565552 221.11636353]
[175.40830994 231.89726257]
[159.98284912 226.33065796]
[157.35766602 210.14300537]
[147.49656677 198.83995056]
[137.49642944 187.65974426]
[127.35877991 176.60406494]
[117.22112274 165.54838562]
[107.08347321 154.49270630]
[96.94582367 143.43702698]
[81.97449493 144.36407471]
[73.27822113 156.58596802]
[64.58194733 168.80787659]
[55.88567352 181.02976990]
[47.18939972 193.25167847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 19]
[13 18]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 81]
[32 80]
[33 78]
[34 77]
[35 76]
[37 73]
[38 72]
[39 71]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[54 62]
[55 61]
[56 60]
[87 98]
[88 97]
[89 96]
[103 121]
[104 120]
[105 119]
[106 118]
[107 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
