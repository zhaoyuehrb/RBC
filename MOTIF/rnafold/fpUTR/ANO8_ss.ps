%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGAAGCAGCGCUCGGGCGAGCGAGGACCGAGGCCGGCGCGGGCGGGCGCGGCCUUUGUCUCCUCCUCCCGCGCGCUCCGCGGCUGCACCGGCCCCAUGAGCCCGCGGCUCCCCGUCGCCCGGGCCGUCCGUAGCCCCUGACCUGACCUGUCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[67.24091339 186.03768921]
[66.65201569 171.04925537]
[66.06311798 156.06082153]
[65.47422028 141.07238770]
[72.54232025 126.11715698]
[82.36592102 113.37724304]
[94.52601624 103.26332855]
[79.75962067 100.62638092]
[64.94429779 98.27986145]
[50.08575439 96.22467804]
[35.22721481 94.16949463]
[20.36867332 92.11431122]
[5.51013374 90.05912018]
[-9.21999931 95.83266449]
[-20.76713943 86.42453766]
[-35.62567902 84.36935425]
[-50.48421860 82.31416321]
[-65.34275818 80.25897980]
[-82.20458984 87.59907532]
[-95.64693451 76.35207367]
[-110.54296112 74.58901215]
[-125.43898773 72.82595062]
[-134.38191223 74.93187714]
[-140.60911560 70.87924957]
[-155.46765137 68.82406616]
[-170.32618713 66.76888275]
[-179.30873108 68.69881439]
[-185.45516968 64.52470398]
[-200.27049255 62.17819214]
[-215.11114502 67.66140747]
[-226.47134399 58.02838516]
[-241.28666687 55.68186569]
[-256.10198975 53.33535004]
[-270.91732788 50.98883438]
[-285.73263550 48.64231491]
[-300.54797363 46.29579926]
[-315.36328125 43.94928360]
[-324.38198853 45.70248413]
[-330.44528198 41.40850449]
[-345.21170044 38.77156067]
[-359.97808838 36.13461685]
[-372.79901123 45.37580109]
[-388.38568115 42.76211166]
[-397.49081421 29.84420395]
[-394.71246338 14.28604126]
[-381.69900513 5.31800795]
[-366.17108154 8.26067829]
[-357.34115601 21.36821747]
[-342.57473755 24.00516319]
[-327.80834961 26.64210701]
[-313.01678467 29.13395691]
[-298.20144653 31.48047447]
[-283.38613892 33.82699203]
[-268.57080078 36.17350769]
[-253.75547791 38.52002335]
[-238.94015503 40.86654282]
[-224.12483215 43.21305847]
[-210.34387207 37.56200027]
[-197.92398071 47.36286545]
[-183.10865784 49.70938110]
[-168.27101135 51.91033936]
[-153.41246033 53.96552658]
[-138.55392456 56.02070999]
[-123.67592621 57.92992401]
[-108.77989960 59.69298553]
[-93.88387299 61.45604706]
[-84.16183472 54.20378876]
[-71.70768738 55.58516312]
[-63.28757477 65.40044403]
[-48.42903519 67.45562744]
[-33.57049561 69.51081085]
[-18.71195412 71.56599426]
[-5.04460335 65.64545441]
[7.56531858 75.20058441]
[22.42385864 77.25576782]
[37.28239822 79.31095123]
[52.14093781 81.36614227]
[66.99948120 83.42132568]
[71.31698608 81.27152252]
[77.03649902 81.84770203]
[82.39656067 85.85998535]
[97.16296387 88.49692535]
[112.07557678 86.88018799]
[125.93376923 81.13993835]
[139.79196167 75.39968872]
[153.65016174 69.65943146]
[167.50834656 63.91918564]
[181.36654663 58.17893219]
[187.74128723 41.91503525]
[203.58462524 35.39759827]
[218.94177246 42.19544601]
[232.68458557 36.18421173]
[246.42739868 30.17298126]
[260.17022705 24.16174889]
[273.91305542 18.15051651]
[287.65585327 12.13928318]
[290.58349609 -9.55223179]
[305.81518555 -25.09151268]
[327.18942261 -28.41263580]
[346.19058228 -18.34830666]
[358.98016357 -26.18578529]
[371.76977539 -34.02326584]
[384.55938721 -41.86074448]
[397.34896851 -49.69821930]
[407.69485474 -63.12949753]
[423.46527100 -56.90608978]
[421.85073853 -40.02919006]
[405.18646240 -36.90861893]
[392.39685059 -29.07114029]
[379.60726929 -21.23366165]
[366.81765747 -13.39618301]
[354.02804565 -5.55870485]
[355.82766724 3.02037215]
[355.37631226 11.79368782]
[352.69418335 20.17922783]
[347.94973755 27.61820412]
[341.44921875 33.61229706]
[333.61685181 37.75703049]
[324.96725464 39.76904678]
[316.07150269 39.50548553]
[307.51953125 36.97404861]
[299.88095093 32.33316803]
[293.66708374 25.88210297]
[279.92428589 31.89333534]
[266.18145752 37.90456772]
[252.43864441 43.91580200]
[238.69581604 49.92703247]
[224.95300293 55.93826675]
[221.96780396 68.50385284]
[212.13294983 77.17298126]
[198.90451050 78.59952545]
[187.10679626 72.03712463]
[173.24859619 77.77737427]
[159.39041138 83.51763153]
[145.53221130 89.25788116]
[131.67402649 94.99813080]
[117.81583405 100.73838043]
[115.35860443 107.82442474]
[125.17478943 119.16649628]
[110.44415283 121.99652100]
[107.98692322 129.08256531]
[115.31624603 142.16999817]
[122.64556122 155.25744629]
[138.04142761 157.99627686]
[148.03515625 170.02372742]
[147.90800476 185.66079712]
[137.72001648 197.52413940]
[122.28164673 200.01223755]
[108.88241577 191.95031738]
[103.84904480 177.14494324]
[109.55812073 162.58676147]
[102.22880554 149.49932861]
[94.89948273 136.41188049]
[80.46265411 140.48348999]
[81.05155182 155.47192383]
[81.64044952 170.46035767]
[82.22934723 185.44879150]
[88.89286804 201.03834534]
[75.75721741 211.75706482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 157]
[2 156]
[3 155]
[4 154]
[7 82]
[8 81]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[15 72]
[16 71]
[17 70]
[18 69]
[20 66]
[21 65]
[22 64]
[24 63]
[25 62]
[26 61]
[28 60]
[29 59]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[39 50]
[40 49]
[41 48]
[83 137]
[84 136]
[85 135]
[86 134]
[87 133]
[88 132]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
[96 123]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
[141 153]
[142 152]
[143 151]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
