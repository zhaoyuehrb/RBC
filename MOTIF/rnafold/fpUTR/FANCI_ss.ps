%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUGUUGUUACGGGUAACGGAAGUGUGGCGGCGUUGGGUUGAGCGGGCUUUUUGGAAGUUUGUGGCGGAGUUCUGUGAUAUGAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[53.07682037 504.22256470]
[36.76554489 502.52716064]
[30.32614517 487.44519043]
[40.38292313 474.49166870]
[41.93368149 459.57205200]
[43.48443985 444.65243530]
[45.03519821 429.73281860]
[46.58595657 414.81320190]
[48.13671494 399.89355469]
[49.68747711 384.97393799]
[47.19412231 377.84378052]
[51.55794144 369.56927490]
[53.62274551 354.71206665]
[41.78772736 345.66784668]
[36.03046799 331.82189941]
[37.98962021 316.85433960]
[47.23831940 304.79788208]
[61.37216949 298.95138550]
[63.43697357 284.09417725]
[65.50177765 269.23696899]
[67.56658173 254.37974548]
[69.63137817 239.52253723]
[71.69618225 224.66534424]
[60.30915451 216.92074585]
[53.37648773 204.94494629]
[52.32119370 191.08076477]
[57.40988159 178.06959534]
[67.68856049 168.50929260]
[81.16091919 164.33555603]
[83.73730469 149.55847168]
[78.30101013 135.69139099]
[88.29363251 123.42525482]
[90.87001801 108.64817047]
[89.06196594 93.75753784]
[83.02406311 80.02642059]
[76.98615265 66.29529572]
[62.16876221 60.79798126]
[55.65450287 46.39867783]
[61.30817032 31.64023590]
[75.77554321 25.27857971]
[90.47338867 31.08796501]
[96.68173218 45.62178802]
[90.71726990 60.25738907]
[96.75518036 73.98851013]
[102.79309082 87.71962738]
[117.73725891 89.01263428]
[126.04387665 76.52263641]
[134.35050964 64.03264618]
[142.65711975 51.54264832]
[150.96374512 39.05265045]
[159.27037048 26.56265450]
[167.57699585 14.07265759]
[171.31372070 -2.46436691]
[188.23890686 -3.45157385]
[193.87289429 12.53887844]
[180.06698608 22.37928200]
[171.76037598 34.86927795]
[163.45375061 47.35927200]
[155.14712524 59.84926987]
[146.84049988 72.33926392]
[138.53387451 84.82926178]
[130.22724915 97.31925964]
[105.64710236 111.22455597]
[103.07071686 126.00164032]
[108.32273102 140.92567444]
[98.51438904 152.13485718]
[95.93800354 166.91194153]
[108.67555237 177.29327393]
[114.46555328 192.57203674]
[111.83729553 208.60392761]
[101.59008026 221.09017944]
[86.55339050 226.73014832]
[84.48858643 241.58734131]
[82.42378235 256.44454956]
[80.35898590 271.30175781]
[78.29418182 286.15896606]
[76.22937775 301.01617432]
[88.23333740 310.49520874]
[93.84391022 324.61676025]
[91.64736938 339.55133057]
[82.33269501 351.30264282]
[68.47994995 356.77685547]
[66.41514587 371.63406372]
[64.60710144 386.52468872]
[63.05633926 401.44433594]
[61.50558090 416.36395264]
[59.95482254 431.28356934]
[58.40406418 446.20318604]
[56.85330200 461.12280273]
[55.30254364 476.04244995]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[12 83]
[13 82]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[29 67]
[30 66]
[32 64]
[33 63]
[34 45]
[35 44]
[36 43]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
[52 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
