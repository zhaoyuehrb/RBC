%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCCUCUUAUUAGGGCUCUGGUGGCGGCGGCGGCGGACCCUUGGGGUCUGGACGCAACGGCGGCGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[53.14301300 200.27037048]
[54.81537247 215.17684937]
[46.80741501 227.86041260]
[32.63017654 232.75999451]
[18.49959946 227.72743225]
[10.61115646 214.96919250]
[12.42314529 200.07978821]
[-0.56723595 207.57978821]
[-13.55761719 215.07978821]
[-17.40546036 230.40850830]
[-31.00806427 238.45491028]
[-46.29524612 234.44522095]
[-54.19739151 220.75830078]
[-50.02629471 205.51437378]
[-36.25659943 197.75737000]
[-21.05761719 202.08940125]
[-8.06723595 194.58940125]
[4.92314529 187.08940125]
[16.67854691 177.77218628]
[26.94675446 166.83766174]
[37.21496201 155.90312195]
[47.48316574 144.96859741]
[57.75137329 134.03407288]
[60.82353973 119.45973969]
[75.91065979 114.69639587]
[86.17886353 103.76186371]
[89.55829620 90.19458771]
[102.88660431 85.96992493]
[113.15481567 75.03540039]
[108.83236694 60.36352921]
[112.41050720 45.59553146]
[122.83094025 34.67395401]
[137.22268677 30.46280289]
[151.69248962 33.99693680]
[161.96069336 23.06240845]
[172.22891235 12.12788010]
[175.86560059 -5.78238916]
[192.64044189 -10.48424339]
[202.44175720 -21.83917046]
[212.24307251 -33.19409561]
[222.04437256 -44.54902267]
[231.84568787 -55.90394592]
[241.64698792 -67.25887299]
[251.44830322 -78.61380005]
[257.22085571 -94.55474854]
[274.13684082 -93.42066956]
[277.72988892 -76.85182953]
[262.80322266 -68.81249237]
[253.00192261 -57.45756531]
[243.20060730 -46.10263824]
[233.39930725 -34.74771118]
[223.59799194 -23.39278603]
[213.79667664 -12.03786087]
[203.99537659 -0.68293476]
[204.52436829 11.58626366]
[196.19454956 21.15357399]
[183.16343689 22.39608574]
[172.89523315 33.33061600]
[162.62701416 44.26514435]
[167.06274414 58.48449326]
[163.76358032 73.11225891]
[153.51785278 84.19789886]
[139.00366211 88.69626617]
[124.08934021 85.30360413]
[113.82113647 96.23813629]
[110.44170380 109.80541229]
[97.11339569 114.03007507]
[86.84518433 124.96459961]
[83.03856659 140.32104492]
[68.68590546 144.30227661]
[58.41769791 155.23680115]
[48.14949036 166.17134094]
[37.88128281 177.10586548]
[27.61307716 188.04039001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[25 68]
[26 67]
[28 65]
[29 64]
[34 59]
[35 58]
[36 57]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
