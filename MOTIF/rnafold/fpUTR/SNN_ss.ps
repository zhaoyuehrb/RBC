%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCGCGGGGCUCCUGCGUCCCGAGUGCGCGGCGGCCGGACCGGGCGGGCGGAGCCGGGCCCGCGGGGCUGCUGCGGGGCGAUCGGGCCGGGCCGCUGCCGCGCCAUGGACUCCCGUGUCCAGCCUGAGUUCCAGCCUCACUGAGUGGCCACCCCCAAAGUGCUGCCAGCCGAGGAAGCCCCCAGCACUGACC\
) } def
/len { sequence length } bind def

/coor [
[198.17726135 929.26342773]
[197.44882202 914.28112793]
[196.72039795 899.29882812]
[188.37416077 886.96228027]
[195.43215942 872.80267334]
[194.70372009 857.82037354]
[193.73277283 842.85180664]
[192.51957703 827.90093994]
[191.30636597 812.95007324]
[190.09315491 797.99926758]
[188.87995911 783.04840088]
[187.66674805 768.09753418]
[186.33251953 753.15698242]
[184.87738037 738.22772217]
[183.42222595 723.29846191]
[171.79081726 714.06561279]
[170.10241699 698.94598389]
[179.86557007 686.80847168]
[178.41041565 671.87921143]
[164.79327393 665.84271240]
[155.96723938 653.72015381]
[154.38362122 638.70819092]
[160.56732178 624.82806396]
[172.94909668 615.84814453]
[171.49394226 600.91888428]
[170.03878784 585.98962402]
[168.58364868 571.06036377]
[167.12849426 556.13110352]
[150.30307007 544.54620361]
[147.42852783 524.02532959]
[160.79603577 507.81079102]
[158.37756348 493.00704956]
[148.68946838 481.69378662]
[154.10052490 466.82666016]
[151.68205261 452.02291870]
[149.26359558 437.21914673]
[146.84513855 422.41540527]
[144.42666626 407.61166382]
[133.00953674 401.62069702]
[127.04249573 389.97186279]
[128.90600586 376.82034302]
[138.14106750 367.00411987]
[135.96263123 352.16314697]
[133.78421021 337.32217407]
[121.71814728 328.66503906]
[119.29750061 313.64523315]
[128.45970154 301.04791260]
[126.28127289 286.20697021]
[124.10284424 271.36599731]
[121.92441559 256.52502441]
[119.62589264 241.70216370]
[117.20742798 226.89840698]
[114.78896332 212.09466553]
[112.37049866 197.29090881]
[109.95203400 182.48716736]
[107.41378784 167.70347595]
[104.75592804 152.94082642]
[102.09806061 138.17817688]
[99.44019318 123.41553497]
[96.78233337 108.65288544]
[84.37998199 113.53041077]
[68.62575531 106.78215027]
[58.26105881 87.63315582]
[51.90955734 74.04425049]
[45.55805588 60.45534134]
[32.70516968 51.22962189]
[34.32544708 36.42340469]
[27.97394562 22.83449745]
[21.62244225 9.24559021]
[8.76955795 0.01987039]
[10.38983536 -14.78634357]
[4.03833389 -28.37525177]
[-8.81455135 -37.60097122]
[-7.19427347 -52.40718460]
[-13.54577541 -65.99609375]
[-28.12958527 -71.46877289]
[-34.37733078 -85.34033966]
[-29.07009125 -99.21004486]
[-35.42159271 -112.79895782]
[-41.77309418 -126.38786316]
[-56.71276474 -131.54360962]
[-63.55583191 -145.78959656]
[-58.24241638 -160.67391968]
[-43.92488098 -167.36598206]
[-29.09756470 -161.89550781]
[-22.55724716 -147.50802612]
[-28.18418503 -132.73936462]
[-21.83268356 -119.15045929]
[-15.48118210 -105.56154633]
[-1.43623769 -100.73712158]
[5.19866753 -87.04651642]
[0.04313285 -72.34759521]
[6.39463472 -58.75868607]
[18.79321861 -50.50493622]
[17.62724113 -34.72675323]
[23.97874451 -21.13784599]
[36.37732697 -12.88409519]
[35.21134949 2.89408851]
[41.56285477 16.48299599]
[47.91435623 30.07190514]
[60.31293869 38.32565308]
[59.14696121 54.10383987]
[65.49846649 67.69274902]
[71.84996796 81.28165436]
[79.33423615 81.76712799]
[94.30278015 82.73807526]
[101.78704834 83.22354889]
[109.84085083 70.56905365]
[117.89465332 57.91455841]
[125.94845581 45.26006317]
[134.00225830 32.60556412]
[130.33041382 17.23373985]
[138.67460632 3.81174850]
[154.08439636 0.30262312]
[167.41741943 8.78826427]
[170.76342773 24.23429298]
[162.13729858 37.47685242]
[146.65675354 40.65937042]
[138.60295105 53.31386566]
[130.54914856 65.96836090]
[122.49534607 78.62285614]
[114.44154358 91.27735138]
[111.54497528 105.99502563]
[114.20284271 120.75767517]
[116.86071014 135.52032471]
[119.51856995 150.28295898]
[122.17643738 165.04560852]
[126.78296661 172.95031738]
[124.75579071 180.06869507]
[127.17425537 194.87245178]
[129.59271240 209.67619324]
[132.01118469 224.47994995]
[134.42964172 239.28370667]
[138.90756226 247.26196289]
[136.76538086 254.34658813]
[138.94381714 269.18756104]
[141.12223816 284.02853394]
[143.30067444 298.86950684]
[155.69656372 308.30239868]
[157.69439697 323.38427734]
[148.62518311 335.14373779]
[150.80360413 349.98471069]
[152.98204041 364.82568359]
[167.20269775 375.00183105]
[169.62327576 391.97912598]
[159.23042297 405.19320679]
[161.64888000 419.99694824]
[164.06735229 434.80068970]
[166.48580933 449.60446167]
[168.90428162 464.40820312]
[178.76536560 476.78033447]
[173.18132019 490.58856201]
[175.59977722 505.39233398]
[184.80889893 508.54592896]
[192.18740845 514.80578613]
[196.74456787 523.27587891]
[197.88879395 532.76733398]
[195.50421143 541.96557617]
[189.96081543 549.61187744]
[182.05775452 554.67596436]
[183.51289368 569.60522461]
[184.96804810 584.53448486]
[186.42318726 599.46374512]
[187.87834167 614.39300537]
[201.76112366 620.81292725]
[210.50875854 633.23773193]
[211.85383606 648.27288818]
[205.53485107 661.87170410]
[193.33966064 670.42407227]
[194.79481506 685.35333252]
[206.71800232 695.37707520]
[207.98106384 710.53814697]
[198.35148621 721.84332275]
[199.80662537 736.77258301]
[201.26177979 751.70184326]
[205.21388245 759.95324707]
[202.61759949 766.88433838]
[203.83081055 781.83514404]
[205.04402161 796.78601074]
[206.25721741 811.73687744]
[207.47042847 826.68774414]
[208.68363953 841.63861084]
[212.13327026 847.30572510]
[212.18449402 853.00653076]
[209.68603516 857.09191895]
[210.41445923 872.07421875]
[218.81280518 885.48236084]
[211.70269775 898.57037354]
[212.43112183 913.55267334]
[213.15956116 928.53497314]
[222.48921204 942.02160645]
[215.23063660 956.72686768]
[198.85084534 957.52325439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 190]
[2 189]
[3 188]
[5 186]
[6 185]
[7 182]
[8 181]
[9 180]
[10 179]
[11 178]
[12 177]
[13 175]
[14 174]
[15 173]
[18 170]
[19 169]
[24 164]
[25 163]
[26 162]
[27 161]
[28 160]
[31 153]
[32 152]
[34 150]
[35 149]
[36 148]
[37 147]
[38 146]
[42 143]
[43 142]
[44 141]
[47 138]
[48 137]
[49 136]
[50 135]
[51 133]
[52 132]
[53 131]
[54 130]
[55 129]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[63 104]
[64 103]
[65 102]
[67 100]
[68 99]
[69 98]
[71 96]
[72 95]
[74 93]
[75 92]
[78 89]
[79 88]
[80 87]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
