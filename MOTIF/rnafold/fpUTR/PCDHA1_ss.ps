%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUACUGAUCACUAAAAGUGAAGGAGGAAGCUCCAUUUUGUCACCGCCUGAGAGAAGACAGAAACGGUAAAGAGAUAAAUGAUUGGAAAUAUUAGAUAAAAUGGCAUGAUUUUGAAGUAAGAGGAGAGCAUAAGAAAGGUGUAGUCCUUUUGCA\
) } def
/len { sequence length } bind def

/coor [
[97.24335480 113.44063568]
[87.75667572 125.05970764]
[78.26999664 136.67878723]
[68.78330994 148.29785156]
[66.04880524 163.88096619]
[52.00615311 168.84614563]
[42.51947403 180.46522522]
[45.17260361 199.17825317]
[33.55090714 213.67788696]
[15.34280491 215.11225891]
[6.33167124 227.10389709]
[-2.67946291 239.09553528]
[-11.69059658 251.08718872]
[-20.70173073 263.07882690]
[-25.38326454 279.37359619]
[-42.33720779 279.38586426]
[-47.04231262 263.09786987]
[-32.69337082 254.06768799]
[-23.68223763 242.07604980]
[-14.67110443 230.08441162]
[-5.65997028 218.09275818]
[3.35116363 206.10112000]
[-0.67698163 195.35543823]
[1.02582264 183.88502502]
[8.14803314 174.58197021]
[18.99707031 169.84877014]
[30.90039825 170.97854614]
[40.38707733 159.35946655]
[42.44303131 144.60743713]
[57.16423798 138.81117249]
[66.65091705 127.19210052]
[76.13759613 115.57302856]
[85.62428284 103.95395660]
[88.17940521 89.17317963]
[83.14383698 75.04367065]
[78.10826874 60.91415787]
[73.07270050 46.78464890]
[68.03713989 32.65513992]
[63.00156784 18.52562714]
[57.96599960 4.39611769]
[52.93043137 -9.73339272]
[47.89486694 -23.86290169]
[42.85929871 -37.99241257]
[4.72436285 -45.58913803]
[-6.70132208 -55.30786896]
[-18.12700653 -65.02660370]
[-29.55269051 -74.74533081]
[-49.49507523 -77.41824341]
[-55.31461716 -95.82282257]
[-67.12236786 -105.07360840]
[-78.93012238 -114.32438660]
[-93.81431580 -109.93799591]
[-108.42282104 -115.16974640]
[-117.13837433 -128.00791931]
[-116.60965729 -143.51599121]
[-107.03998566 -155.73077393]
[-92.10908508 -159.95544434]
[-77.55819702 -154.56552124]
[-68.98242950 -141.63356018]
[-69.67933655 -126.13214111]
[-57.87158966 -116.88135529]
[-46.06383514 -107.63057709]
[-36.00146484 -109.77476501]
[-26.22664833 -105.91689301]
[-20.08866882 -97.11723328]
[-19.83395958 -86.17101288]
[-8.40827560 -76.45228577]
[3.01740885 -66.73355103]
[14.44309330 -57.01482391]
[21.74286079 -58.73627853]
[16.37528610 -72.74303436]
[11.00771332 -86.74978638]
[1.05601037 -97.97313690]
[2.55995345 -112.89755249]
[14.55080509 -121.90973663]
[29.30487251 -119.20465851]
[37.31859207 -106.52473450]
[33.43003845 -92.03748322]
[34.88621521 -77.10833740]
[36.34239578 -62.17918396]
[43.64216232 -63.90063477]
[49.52165985 -77.70032501]
[55.40116119 -91.50002289]
[61.28065872 -105.29971313]
[54.03921127 -119.15956116]
[57.45134735 -134.42033386]
[69.90596008 -143.87637329]
[85.52236938 -143.06280518]
[96.92697906 -132.36380005]
[98.73487854 -116.83106995]
[90.09243774 -103.79871368]
[75.08035278 -99.42021179]
[69.20085144 -85.62052155]
[63.32135391 -71.82083130]
[57.44185257 -58.02113724]
[56.98880768 -43.02798080]
[62.02437592 -28.89846992]
[67.05994415 -14.76896000]
[72.09551239 -0.63944989]
[77.13108063 13.49005985]
[82.16664886 27.61956978]
[87.20221710 41.74908066]
[92.23778534 55.87858963]
[97.27334595 70.00810242]
[102.30891418 84.13761139]
[101.86593628 69.14415741]
[107.75325775 55.34779739]
[118.88484192 45.29355240]
[133.20724487 40.83612823]
[148.07843018 42.79778290]
[160.75509644 50.81665421]
[168.89877319 63.41349411]
[171.00721741 78.26457214]
[166.69146729 92.63031006]
[156.74766541 103.86065674]
[143.01013184 109.88394928]
[128.01303101 109.58908081]
[114.52526855 103.03234100]
[125.34330750 113.42320251]
[136.16134644 123.81407166]
[146.97938538 134.20494080]
[157.79740906 144.59579468]
[168.61544800 154.98666382]
[179.43348694 165.37753296]
[190.25152588 175.76840210]
[201.06956482 186.15925598]
[216.64572144 186.01426697]
[227.46873474 196.70619202]
[227.51097107 211.55657959]
[238.32899475 221.94743347]
[249.14703369 232.33830261]
[259.96508789 242.72917175]
[275.49212646 240.87306213]
[288.55123901 249.47502136]
[292.97631836 264.47344971]
[286.67794800 278.78652954]
[272.63006592 285.65609741]
[257.46563721 281.83853149]
[248.34481812 269.13638306]
[249.57420349 253.54721069]
[238.75617981 243.15634155]
[227.93814087 232.76547241]
[217.12010193 222.37460327]
[202.28005981 222.93037415]
[191.16101074 212.54666138]
[190.67869568 196.97729492]
[179.86065674 186.58642578]
[169.04261780 176.19557190]
[158.22459412 165.80470276]
[147.40655518 155.41383362]
[136.58851624 145.02296448]
[125.77047729 134.63211060]
[114.95243835 124.24124146]
[104.13440704 113.85037231]
[101.78510284 114.09708405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[6 28]
[7 27]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[34 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 69]
[45 68]
[46 67]
[47 66]
[49 62]
[50 61]
[51 60]
[81 95]
[82 94]
[83 93]
[84 92]
[118 154]
[119 153]
[120 152]
[121 151]
[122 150]
[123 149]
[124 148]
[125 147]
[126 146]
[129 143]
[130 142]
[131 141]
[132 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
