%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCAAUUUUGAACAAAGUUAGAGAGUUUUUUCUUCUUUUUUCUUCUUUCUUAAAGCGAACUGUACUCCUCUGCUGUUCCUUUGAACUUGGUUCAGUAGGAAGAAGUGAUAUCCUCCCCAGACCAUCUGCUUUGGGGAGCUUGGCAAAACUGUCCAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[50.84153366 105.83882141]
[53.11829758 86.55634308]
[39.50676346 80.25348663]
[25.89522362 73.95062256]
[17.04162216 80.05197144]
[6.52946520 81.88811493]
[-3.71151471 79.19062042]
[-11.82990360 72.51706696]
[-16.38728142 63.13738632]
[-16.61287308 52.79262924]
[-29.83743095 45.71371460]
[-43.06198883 38.63479614]
[-56.28654480 31.55587769]
[-69.51110077 24.47696114]
[-82.73566437 17.39804268]
[-98.55385590 17.70685005]
[-106.12324524 4.87900400]
[-119.34780121 -2.19991350]
[-132.57235718 -9.27883053]
[-145.79692078 -16.35774803]
[-159.02146912 -23.43666649]
[-173.79637146 -26.02556992]
[-188.63992310 -23.86483574]
[-203.48348999 -21.70410156]
[-218.32704163 -19.54336739]
[-233.17060852 -17.38263321]
[-248.01416016 -15.22189999]
[-250.32687378 -0.28393531]
[-256.94137573 13.30796719]
[-267.26950073 24.34522438]
[-280.39291382 31.84640884]
[-295.14465332 35.14452362]
[-310.21301270 33.94630051]
[-324.25814819 28.35828781]
[-336.03112793 18.87736320]
[-344.48516846 6.34656620]
[-348.86849976 -8.11987305]
[-348.79135132 -23.23560905]
[-344.26062012 -37.65655899]
[-335.67913818 -50.10042572]
[-323.80999756 -59.46070480]
[-309.70858765 -64.90509033]
[-294.62875366 -65.94947052]
[-279.91146851 -62.50097275]
[-266.86529541 -54.86624527]
[-256.65032959 -43.72415924]
[-250.17489624 -30.06545830]
[-235.33134460 -32.22619247]
[-220.48777771 -34.38692474]
[-205.64422607 -36.54766083]
[-190.80065918 -38.70839310]
[-175.95710754 -40.86912918]
[-169.13436890 -54.22765732]
[-176.08552551 -67.51982117]
[-183.03666687 -80.81198120]
[-189.98782349 -94.10414124]
[-196.93896484 -107.39630127]
[-203.72172546 -113.58746338]
[-203.89318848 -121.01229095]
[-210.58688354 -134.43594360]
[-217.28056335 -147.85960388]
[-223.97425842 -161.28326416]
[-237.05671692 -170.18045044]
[-235.81201172 -185.02294922]
[-242.50569153 -198.44660950]
[-249.19938660 -211.87026978]
[-264.26486206 -216.64591980]
[-271.46658325 -230.71398926]
[-266.53192139 -245.72813416]
[-252.38850403 -252.78073120]
[-237.42736816 -247.68759155]
[-230.52470398 -233.47039795]
[-235.77572632 -218.56394958]
[-229.08204651 -205.14028931]
[-222.38835144 -191.71662903]
[-209.78466797 -183.77960205]
[-210.55059814 -167.97694397]
[-203.85690308 -154.55329895]
[-197.16322327 -141.12963867]
[-190.46954346 -127.70597839]
[-183.64680481 -114.34745026]
[-176.69564819 -101.05529022]
[-169.74450684 -87.76313019]
[-162.79336548 -74.47097015]
[-155.84220886 -61.17880630]
[-151.94255066 -36.66122437]
[-138.71800232 -29.58230591]
[-125.49343872 -22.50338936]
[-112.26888275 -15.42447090]
[-99.04432678 -8.34555340]
[-84.17204285 -9.16069126]
[-75.65674591 4.17348576]
[-62.43218613 11.25240326]
[-49.20763016 18.33131981]
[-35.98307037 25.41023827]
[-22.75851250 32.48915482]
[-9.53395557 39.56807327]
[8.59007931 32.53588867]
[26.34855080 41.16447067]
[32.19808578 60.33908844]
[45.80962372 66.64195251]
[59.42115784 72.94480896]
[65.31002808 65.27297974]
[72.64023590 58.86928558]
[81.14113617 54.00255585]
[90.49237061 50.88428879]
[100.33593750 49.65956879]
[110.28987885 50.40049362]
[119.96312714 53.10239792]
[128.97082520 57.68311691]
[136.94966125 63.98525238]
[143.57254028 71.78150177]
[148.56188965 80.78279114]
[151.70126343 90.64896393]
[152.84469604 101.00164032]
[151.92321777 111.43869019]
[166.61711121 114.45360565]
[181.31098938 117.46851349]
[196.00488281 120.48342133]
[210.69876099 123.49833679]
[225.39265442 126.51324463]
[240.08653259 129.52815247]
[254.78042603 132.54306030]
[266.14694214 121.97984314]
[281.55557251 120.14851379]
[295.08139038 127.75327301]
[301.52340698 141.86991882]
[298.40457153 157.07032776]
[286.92413330 167.50962830]
[271.49652100 169.17369080]
[258.05401611 161.42265320]
[251.76551819 147.23695374]
[237.07162476 144.22204590]
[222.37774658 141.20713806]
[207.68385315 138.19221497]
[192.98997498 135.17730713]
[178.29608154 132.16239929]
[163.60218811 129.14749146]
[148.90830994 126.13258362]
[140.11492920 138.28480530]
[147.57316589 151.29920959]
[155.03140259 164.31361389]
[168.60615540 172.43991089]
[168.22125244 187.32954407]
[175.67948914 200.34394836]
[183.13772583 213.35835266]
[190.59596252 226.37275696]
[205.03594971 234.14570618]
[205.25386047 250.54341125]
[191.02551270 258.69732666]
[176.98782349 250.21939087]
[177.58154297 233.83099365]
[170.12332153 220.81658936]
[162.66508484 207.80218506]
[155.20684814 194.78778076]
[142.16555786 187.59236145]
[142.01699829 171.77185059]
[134.55876160 158.75744629]
[127.10052490 145.74304199]
[107.18019104 151.94148254]
[86.70230865 149.96324158]
[68.84615326 140.34042358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[59 80]
[60 79]
[61 78]
[62 77]
[64 75]
[65 74]
[66 73]
[116 139]
[117 138]
[118 137]
[119 136]
[120 135]
[121 134]
[122 133]
[123 132]
[140 159]
[141 158]
[142 157]
[144 155]
[145 154]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
