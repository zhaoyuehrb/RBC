%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACCCAGGAAAAGCGAACCGCGCCAGGCCCUGUCAUCGACCGCUGGGUCCGUCCUCCCAGCGCUCGCGGCCGCUCAC\
) } def
/len { sequence length } bind def

/coor [
[46.39029694 355.16342163]
[36.18679810 366.33230591]
[23.03032303 373.79971313]
[8.20980453 376.83410645]
[-6.82279205 375.13815308]
[-20.59472656 368.87805176]
[-31.75676537 358.66705322]
[-39.21536636 345.50558472]
[-42.23980713 330.68304443]
[-40.53379059 315.65158081]
[-34.26445389 301.88385010]
[-24.04599762 290.72866821]
[-10.87952614 283.27886963]
[3.94504499 280.26437378]
[18.97535515 281.98043823]
[25.18251610 268.32501221]
[31.38967705 254.66957092]
[37.59683609 241.01411438]
[33.63534164 229.41227722]
[38.90632629 217.89749146]
[51.02645111 213.01063538]
[57.75843811 199.60614014]
[64.49042511 186.20166016]
[71.22241211 172.79716492]
[77.95439911 159.39268494]
[77.02389526 155.73162842]
[77.99737549 151.41979980]
[81.16648102 147.44607544]
[86.32657623 144.89164734]
[94.56920624 132.35932922]
[102.81184387 119.82701874]
[90.25936127 116.50175476]
[82.89637756 106.50501251]
[83.39912415 94.66973114]
[90.83507538 86.19248962]
[89.09368134 71.29391479]
[87.35228729 56.39534378]
[79.50801849 41.36524582]
[91.77922821 29.66679001]
[106.41751099 38.21997833]
[102.25086212 54.65394974]
[103.99225616 69.55252075]
[105.73365021 84.45110321]
[116.14710999 91.39070129]
[119.46166992 104.71810913]
[132.73309326 97.72745514]
[146.00451660 90.73680115]
[159.27595520 83.74614716]
[172.54737854 76.75549316]
[185.81880188 69.76483917]
[187.90457153 54.38858795]
[198.65425110 43.19822311]
[213.93434143 40.49666977]
[227.86935425 47.32273102]
[235.10098267 61.05164719]
[232.84852600 76.40436554]
[221.97810364 87.47746277]
[206.66960144 90.01309967]
[192.80944824 83.03627014]
[179.53802490 90.02692413]
[166.26660156 97.01757050]
[152.99517822 104.00822449]
[139.72373962 110.99887848]
[126.45232391 117.98953247]
[115.34416199 128.06965637]
[107.10152435 140.60197449]
[98.85889435 153.13427734]
[91.35889435 166.12466431]
[84.62689972 179.52915955]
[77.89491272 192.93363953]
[71.16292572 206.33813477]
[64.43093872 219.74263000]
[66.02851105 237.96463013]
[51.25228119 247.22128296]
[45.04512024 260.87673950]
[38.83795929 274.53216553]
[32.63079834 288.18762207]
[43.80651093 298.38363647]
[51.28274536 311.53509521]
[54.32704926 326.35357666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 77]
[16 76]
[17 75]
[18 74]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[29 67]
[30 66]
[31 65]
[35 43]
[36 42]
[37 41]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
