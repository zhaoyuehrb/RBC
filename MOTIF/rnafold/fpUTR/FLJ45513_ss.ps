%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAGCUGGAGUCACCCAGCCUGGCCAAGAACUGGAAAAGUCUCUUUGGGGAUUUGGACCCAUUUCUGAAAAGCUCAUGAAAACCACUUUGCCUUGGACUCCUGCCCCCAGCCGGAGCCCUCCAUAUCCAUUUAACCCAAAUCCCCAACUCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[-125.26824188 375.18298340]
[-133.93962097 387.42254639]
[-142.61100769 399.66210938]
[-151.28237915 411.90170288]
[-153.71014404 420.76553345]
[-160.24984741 424.29608154]
[-169.16285706 436.36083984]
[-178.07586670 448.42559814]
[-186.98889160 460.49032593]
[-195.90190125 472.55508423]
[-198.50541687 481.36892700]
[-205.11401367 484.76873779]
[-214.26513672 496.65390015]
[-211.97994995 512.29211426]
[-221.48881531 524.91577148]
[-237.15031433 527.03546143]
[-249.67272949 517.39367676]
[-251.62677002 501.71066284]
[-241.85310364 489.29086304]
[-226.15029907 487.50277710]
[-216.99917603 475.61761475]
[-207.96664429 463.64205933]
[-199.05363464 451.57733154]
[-190.14062500 439.51257324]
[-181.22760010 427.44781494]
[-172.31459045 415.38308716]
[-163.52195740 403.23031616]
[-154.85057068 390.99075317]
[-146.17919922 378.75115967]
[-137.50781250 366.51159668]
[-141.05317688 350.09692383]
[-131.46293640 335.90280151]
[-114.24657440 332.95275879]
[-105.82025909 320.54318237]
[-97.39394379 308.13363647]
[-88.96762848 295.72406006]
[-80.54130554 283.31451416]
[-95.22277832 286.38931274]
[-109.37042236 281.40493774]
[-118.88231659 269.80648804]
[-121.00062561 254.95681763]
[-115.11116028 241.16137695]
[-102.92149353 232.41996765]
[-87.96586609 231.26705933]
[-74.58045959 238.03691101]
[-66.64619446 250.76669312]
[-66.46287537 265.76321411]
[-56.17728806 254.84503174]
[-45.89170456 243.92684937]
[-35.60611725 233.00866699]
[-25.32052803 222.09048462]
[-15.03494167 211.17230225]
[-4.74935484 200.25411987]
[5.53623199 189.33593750]
[15.82181835 178.41777039]
[26.10740662 167.49958801]
[36.39299393 156.58140564]
[46.67858124 145.66322327]
[34.87516022 126.21179962]
[29.91257858 104.00704956]
[32.31211090 81.38138580]
[41.82170486 60.71146011]
[57.44245911 44.16847610]
[77.53353882 33.49014282]
[74.27885437 18.84749794]
[71.02416992 4.20485258]
[67.76949310 -10.43779182]
[64.36940002 -25.04735565]
[60.82423019 -39.62239838]
[57.27906418 -54.19743729]
[44.37794876 -63.73372650]
[43.93402100 -79.77063751]
[56.28782272 -90.00601959]
[71.96257782 -86.58817291]
[78.93395233 -72.13896942]
[71.85410309 -57.74260330]
[75.39926910 -43.16756439]
[78.94443512 -28.59252357]
[83.60653687 -22.80484772]
[82.41213226 -13.69247437]
[85.66681671 0.95017040]
[88.92150116 15.59281540]
[92.17617798 30.23546028]
[98.94953918 29.80598450]
[105.73271179 30.03258514]
[112.46231079 30.91314125]
[119.07542419 32.43942261]
[125.51024628 34.59716797]
[131.70663452 37.36620331]
[137.60667419 40.72065353]
[143.15522766 44.62916183]
[148.30041504 49.05519867]
[152.99417114 53.95739746]
[157.19259644 59.28993607]
[160.85647583 65.00297546]
[163.95155334 71.04311371]
[178.19886780 66.35116577]
[192.44616699 61.65921783]
[206.69346619 56.96726990]
[220.79450989 51.85253906]
[234.73677063 46.31958008]
[248.67901611 40.78662109]
[262.62127686 35.25366211]
[272.59429932 22.97158623]
[287.27807617 25.46864700]
[301.22033691 19.93568802]
[308.87457275 5.83631134]
[324.69479370 3.17178631]
[336.54510498 13.98610783]
[335.33496094 29.98345375]
[321.99267578 38.89202881]
[306.75329590 33.87793732]
[292.81103516 39.41089630]
[283.83526611 51.29722214]
[268.15423584 49.19591522]
[254.21197510 54.72887421]
[240.26972961 60.26183319]
[226.32746887 65.79479218]
[224.59710693 68.92604065]
[221.23599243 71.35422516]
[216.60112000 72.30928802]
[211.38542175 71.21456909]
[197.13810730 75.90651703]
[182.89080811 80.59847260]
[168.64350891 85.29042053]
[170.18141174 98.30541992]
[169.27345276 111.37947845]
[165.95123291 124.05696106]
[160.33058167 135.89602661]
[152.60734558 146.48410034]
[143.05068970 155.45214844]
[131.99369812 162.48765564]
[119.82169342 167.34541321]
[106.95888519 169.85610962]
[93.85355377 169.93228149]
[80.96243286 167.57125854]
[68.73478699 162.85530090]
[57.59676361 155.94880676]
[47.31117630 166.86698914]
[37.02558899 177.78517151]
[26.74000168 188.70335388]
[16.45441437 199.62153625]
[6.16882706 210.53971863]
[-4.11675978 221.45790100]
[-14.40234661 232.37608337]
[-24.68793297 243.29426575]
[-34.97352219 254.21244812]
[-45.25910568 265.13061523]
[-55.54469299 276.04879761]
[-58.64480591 287.37860107]
[-68.13174438 291.74081421]
[-76.55806732 304.15039062]
[-84.98438263 316.55993652]
[-93.41069794 328.96951294]
[-101.83701324 341.37905884]
[-97.79808044 354.26248169]
[-101.87413025 366.92956543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[12 21]
[13 20]
[33 155]
[34 154]
[35 153]
[36 152]
[37 151]
[47 149]
[48 148]
[49 147]
[50 146]
[51 145]
[52 144]
[53 143]
[54 142]
[55 141]
[56 140]
[57 139]
[58 138]
[64 83]
[65 82]
[66 81]
[67 80]
[68 78]
[69 77]
[70 76]
[96 125]
[97 124]
[98 123]
[99 122]
[100 118]
[101 117]
[102 116]
[103 115]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
