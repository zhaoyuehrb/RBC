%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCUUCCGGUUCUUUAUUCCGGAAGUUGCUCUCAGAGGCAGCGUGCGGGUGUGCUCUUUGUGAAAUUCCACCAUGGCGUACCGUGGCCAGGGUCAGAAAGUGCAGAAGGUUAUGGUGCAGCCCAUCGUAUCCUACGCAGG\
) } def
/len { sequence length } bind def

/coor [
[38.97140121 170.25495911]
[31.97869301 156.98460388]
[36.22373962 142.59948730]
[22.36554718 148.33973694]
[8.50735378 154.07998657]
[-5.35083914 159.82023621]
[-17.63812065 168.42388916]
[-27.77197266 179.48304749]
[-37.90582657 190.54220581]
[-48.03968048 201.60136414]
[-58.17353058 212.66052246]
[-68.30738831 223.71968079]
[-64.27429199 238.61054993]
[-68.95381927 253.31108093]
[-80.85275269 263.13040161]
[-96.17418671 264.93518066]
[-110.02909851 258.14953613]
[-117.99645233 244.93875122]
[-117.53387451 229.51832581]
[-108.78898621 216.80886841]
[-94.55224609 210.86590576]
[-79.36654663 213.58583069]
[-69.23268890 202.52667236]
[-59.09883881 191.46751404]
[-48.96498489 180.40835571]
[-38.83113480 169.34919739]
[-28.69727898 158.29003906]
[-34.58835602 144.49528503]
[-49.58478546 144.16806030]
[-64.58121490 143.84083557]
[-79.57764435 143.51361084]
[-94.57408142 143.18638611]
[-109.57051086 142.85916138]
[-120.81220245 153.96771240]
[-136.61549377 153.79000854]
[-147.60456848 142.43150330]
[-147.25979614 126.63097382]
[-135.78573608 115.76260376]
[-119.98973083 116.27440643]
[-109.24328613 127.86273193]
[-94.24685669 128.18995667]
[-79.25042725 128.51718140]
[-64.25399017 128.84440613]
[-49.25756454 129.17163086]
[-34.26113129 129.49885559]
[-22.81208992 132.02020264]
[-14.79992104 138.20866394]
[-11.09109020 145.96205139]
[2.76710248 140.22180176]
[16.62529564 134.48155212]
[30.48348808 128.74128723]
[43.93658066 122.10696411]
[56.92695999 114.60696411]
[69.91734314 107.10696411]
[82.90772247 99.60696411]
[94.82540894 74.20450592]
[100.56565857 60.34631729]
[98.69842529 44.63568115]
[110.71726990 35.83815384]
[116.45751953 21.97995949]
[122.19777679 8.12176704]
[127.93802643 -5.73642635]
[126.07079315 -21.44705963]
[138.08964539 -30.24458885]
[143.82989502 -44.10278320]
[149.57014465 -57.96097565]
[148.85908508 -63.28585052]
[150.17727661 -67.86727142]
[152.88363647 -71.04485321]
[156.16584778 -72.51801300]
[162.80018616 -85.97109985]
[169.43450928 -99.42419434]
[167.13969421 -119.40132141]
[183.53288269 -129.57188416]
[189.57408142 -143.30155945]
[195.61528015 -157.03123474]
[201.65649414 -170.76091003]
[207.69769287 -184.49057007]
[213.73889160 -198.22024536]
[211.41667175 -214.45414734]
[224.47987366 -224.36801147]
[239.49020386 -217.76330566]
[241.00631714 -201.43438721]
[227.46856689 -192.17904663]
[221.42736816 -178.44937134]
[215.38615417 -164.71971130]
[209.34495544 -150.99003601]
[203.30375671 -137.26036072]
[197.26255798 -123.53068542]
[201.83715820 -114.29041290]
[200.50205994 -103.84420013]
[193.46194458 -95.71793365]
[182.88760376 -92.78986359]
[176.25326538 -79.33676910]
[169.61894226 -65.88368225]
[163.42832947 -52.22072220]
[157.68807983 -38.36252975]
[151.94783020 -24.50433731]
[154.22564697 -9.78493500]
[141.79621887 0.00382512]
[136.05596924 13.86201859]
[130.31571960 27.72021103]
[124.57546234 41.57840347]
[126.85327911 56.29780579]
[114.42385101 66.08656311]
[108.68360138 79.94476318]
[122.71672058 74.64651489]
[133.66850281 84.89632416]
[129.31007385 99.24916840]
[114.50702667 101.67809296]
[126.40732574 110.80950928]
[138.30763245 119.94093323]
[153.96621704 122.20353699]
[159.35327148 136.08981323]
[171.25357056 145.22123718]
[183.15386963 154.35266113]
[195.05416870 163.48408508]
[206.95446777 172.61550903]
[218.85476685 181.74693298]
[230.75506592 190.87834167]
[246.78453064 190.21830750]
[257.18551636 202.43302917]
[253.97923279 218.15242004]
[239.62530518 225.31791687]
[225.13482666 218.43275452]
[221.62364197 202.77864075]
[209.72334290 193.64723206]
[197.82304382 184.51580811]
[185.92274475 175.38438416]
[174.02244568 166.25296021]
[162.12214661 157.12153625]
[150.22184753 147.99011230]
[135.41444397 146.38066101]
[129.17620850 131.84123230]
[117.27590942 122.70981598]
[105.37560272 113.57839203]
[90.40772247 112.59734344]
[77.41734314 120.09734344]
[64.42696381 127.59734344]
[51.43658066 135.09735107]
[65.43453979 140.48780823]
[71.70454407 154.11450195]
[66.69200897 168.25221252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[52 140]
[53 139]
[54 138]
[55 137]
[56 106]
[57 105]
[59 103]
[60 102]
[61 101]
[62 100]
[64 98]
[65 97]
[66 96]
[70 95]
[71 94]
[72 93]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[110 136]
[111 135]
[112 134]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
