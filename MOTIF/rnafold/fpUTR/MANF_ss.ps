%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUACGGCGCGCGGCCGGGACUUGGAGGCGGUGCGGCGCGGCGGGUGCGGUUCAGUCGGUCGGCGGCGGCAGCGGAGGAGGAGGAGGAGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[172.07408142 321.03109741]
[179.64428711 307.94738770]
[190.73580933 297.67755127]
[184.22755432 284.16302490]
[169.36447144 283.18612671]
[156.90306091 274.84530640]
[150.24571228 261.29739380]
[151.27023315 246.13667297]
[159.80136108 233.44152832]
[153.29310608 219.92698669]
[146.78485107 206.41246033]
[140.06082153 193.00398254]
[133.12275696 179.70498657]
[120.37601471 171.99978638]
[120.85279083 156.18577576]
[113.91471863 142.88677979]
[106.97664642 129.58779907]
[100.03856659 116.28880310]
[85.68093109 107.76471710]
[86.36959076 91.08156586]
[79.00882721 78.01178741]
[71.64806366 64.94200134]
[64.28730011 51.87222290]
[60.06885147 49.61911011]
[57.19123077 46.39955139]
[55.79647446 42.79890060]
[55.80515671 39.38379669]
[56.94507217 36.62593079]
[51.31606674 22.72218132]
[45.68706131 8.81842899]
[30.76950836 4.97489119]
[21.08870125 -6.77820969]
[20.19539642 -21.80039406]
[28.22296524 -34.31822586]
[22.59395981 -48.22197723]
[10.24337769 -58.11003494]
[12.63908577 -72.81070709]
[7.01008081 -86.71446228]
[1.38107550 -100.61820984]
[-4.24792957 -114.52196503]
[-18.39977074 -122.07874298]
[-21.17336655 -137.88021851]
[-10.44104862 -149.80485535]
[5.56426477 -148.70509338]
[14.56466770 -135.42456055]
[9.65582180 -120.15097046]
[15.28482723 -106.24721527]
[20.91383171 -92.34346771]
[26.54283714 -78.43971252]
[38.49079514 -69.54615021]
[36.49771118 -53.85098267]
[42.12671661 -39.94723129]
[56.60175323 -36.53969193]
[66.41072083 -25.12706184]
[67.63294220 -9.94946003]
[59.59081268 3.18942428]
[65.21981812 17.09317589]
[70.84882355 30.99692726]
[77.35707855 44.51145935]
[84.71784210 57.58124161]
[92.07860565 70.65102386]
[99.43936920 83.72080231]
[110.54910278 87.58859253]
[116.15675354 97.92977905]
[113.33755493 109.35073090]
[120.27563477 122.64971924]
[127.21370697 135.94871521]
[134.15177917 149.24769592]
[147.39477539 157.90412903]
[146.42173767 172.76690674]
[153.35981750 186.06590271]
[160.23228455 192.37156677]
[160.29939270 199.90420532]
[166.80764771 213.41873169]
[173.31590271 226.93327332]
[188.56045532 228.17864990]
[201.05233765 236.83020020]
[207.49374390 250.48211670]
[206.24530029 265.42526245]
[197.74208069 277.65475464]
[204.25033569 291.16928101]
[219.19506836 288.90075684]
[234.14427185 291.13964844]
[247.76867676 297.68698120]
[258.85678101 307.96047974]
[266.42269897 321.04669189]
[269.79360962 335.78195190]
[268.66979980 350.85604858]
[263.15118408 364.92858887]
[253.72851562 376.74826050]
[241.23962402 385.26406860]
[226.79499817 389.71878052]
[211.67906189 389.71627808]
[197.23591614 385.25680542]
[184.74983215 376.73687744]
[175.33106995 364.91409302]
[169.81712341 350.83972168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[9 75]
[10 74]
[11 73]
[12 71]
[13 70]
[15 68]
[16 67]
[17 66]
[18 65]
[20 62]
[21 61]
[22 60]
[23 59]
[28 58]
[29 57]
[30 56]
[34 52]
[35 51]
[37 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
