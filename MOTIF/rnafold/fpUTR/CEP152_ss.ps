%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACCGGGCGAGCUUCUAGUCGGCGAUUGAAGGAUGCGAGUGCUCCUUAAGGGCCUCCGCCCCGUGAGUUCGGUUGUGACUAGGAAGGAGCUAGUGGACUAGAGCCAGGGUAAGGGGAUCUGCUAGAAGUUGGUCUUCCGCCAGGACUAGAGUUUCCUCGCGGUAACAGCCUCCGUGGCCUCCGGAGGACC\
) } def
/len { sequence length } bind def

/coor [
[221.75637817 336.32125854]
[218.85980225 351.03890991]
[215.96324158 365.75659180]
[213.06666565 380.47427368]
[215.94059753 397.18286133]
[200.68057251 404.56985474]
[189.35784912 391.95114136]
[198.34899902 377.57769775]
[201.24555969 362.86001587]
[204.14213562 348.14236450]
[207.03869629 333.42468262]
[205.46272278 318.50769043]
[199.55458069 304.72024536]
[193.64645386 290.93280029]
[187.73831177 277.14532471]
[181.83018494 263.35787964]
[176.29798889 258.44100952]
[175.94000244 249.29899597]
[170.25590515 235.41767883]
[164.57180786 221.53636169]
[158.88771057 207.65504456]
[153.20359802 193.77372742]
[147.51950073 179.89241028]
[141.61137390 166.10494995]
[135.48074341 152.41497803]
[129.35012817 138.72500610]
[123.21949768 125.03502655]
[114.38474274 134.22714233]
[101.92160797 140.06280518]
[87.18336487 141.14050293]
[72.04660034 136.62351990]
[58.67278671 126.42701721]
[44.11314392 130.03489685]
[29.55349922 133.64276123]
[14.99385548 137.25064087]
[0.43421084 140.85850525]
[-7.15574121 145.96705627]
[-14.39040661 144.40489197]
[-29.00656509 147.77653503]
[-40.62667465 159.34826660]
[-56.38541794 154.81019592]
[-60.07154846 138.83068848]
[-47.89308929 127.84810638]
[-32.37820053 133.16036987]
[-17.76204300 129.78874207]
[-3.17366362 126.29886627]
[11.38598061 122.69099426]
[25.94562531 119.08312225]
[40.50526810 115.47524261]
[55.06491470 111.86737061]
[55.36846542 104.37351227]
[42.69226074 96.35391998]
[55.97556305 89.38580322]
[56.27911377 81.89195251]
[42.05897903 77.11830902]
[27.83884048 72.34466553]
[11.88178444 76.12677765]
[0.82618862 64.01456451]
[6.04510212 48.46801758]
[22.16975403 45.48010254]
[32.61248398 58.12452316]
[46.83262253 62.89817047]
[61.05276108 67.67181396]
[71.82972717 57.23835754]
[67.51905823 42.87109756]
[56.14227676 31.87658119]
[59.89566040 17.46265221]
[55.58499527 3.09539151]
[50.11389542 -4.23752356]
[51.32287979 -11.53951550]
[47.24542618 -25.97469521]
[43.16797638 -40.40987396]
[39.09052658 -54.84505081]
[34.89632797 -69.24674225]
[30.58566284 -83.61400604]
[26.27499771 -97.98126221]
[21.96433067 -112.34852600]
[12.08963394 -116.95176697]
[6.50039816 -126.04680634]
[6.84045792 -136.49670410]
[12.75547504 -144.85023499]
[8.91230869 -159.34954834]
[5.06914186 -173.84886169]
[1.22597528 -188.34817505]
[-2.61719131 -202.84748840]
[-16.84772682 -209.33023071]
[-23.53523254 -223.46568298]
[-19.52207184 -238.57954407]
[-6.70313835 -247.53549194]
[8.86886024 -246.10479736]
[19.84130287 -234.96301270]
[21.03333664 -219.37092590]
[11.88212109 -206.69065857]
[15.72528839 -192.19134521]
[19.56845474 -177.69203186]
[23.41162109 -163.19271851]
[27.25478745 -148.69340515]
[41.86061478 -136.03488159]
[36.33159256 -116.65918732]
[40.64225769 -102.29193115]
[44.95292282 -87.92466736]
[49.26358795 -73.55741119]
[54.20411682 -68.04633331]
[53.52570343 -58.92250443]
[57.60315704 -44.48732376]
[61.68060684 -30.05214500]
[65.75805664 -15.61696625]
[69.95225525 -1.21527481]
[74.26292419 13.15198517]
[85.33137512 23.11885834]
[81.88631439 38.56043243]
[86.19698334 52.92769241]
[105.37067413 54.99225998]
[120.76990509 63.95624542]
[130.28601074 77.26050568]
[133.16633606 91.88264465]
[145.82083130 83.82884216]
[158.47532654 75.77503967]
[171.12982178 67.72123718]
[183.78431702 59.66743469]
[196.43881226 51.61363220]
[209.09330750 43.55982971]
[216.58128357 29.62279510]
[231.47274780 29.31670952]
[244.12724304 21.26290703]
[256.78173828 13.20910358]
[266.89773560 -0.39613780]
[282.77169800 5.55823278]
[281.44436646 22.46014214]
[264.83554077 25.86359978]
[252.18104553 33.91740036]
[239.52655029 41.97120667]
[232.94371033 55.33217621]
[217.14710999 56.21432495]
[204.49261475 64.26812744]
[191.83811951 72.32192993]
[179.18362427 80.37573242]
[166.52912903 88.42953491]
[153.87463379 96.48333740]
[141.22013855 104.53713989]
[136.90946960 118.90440369]
[143.04010010 132.59437561]
[149.17071533 146.28434753]
[155.30134583 159.97433472]
[160.44371033 164.16629028]
[162.39350891 169.52348328]
[161.40081787 174.20831299]
[167.08491516 188.08963013]
[172.76902771 201.97094727]
[178.45312500 215.85226440]
[184.13722229 229.73358154]
[189.82131958 243.61489868]
[195.61763000 257.44973755]
[201.52577209 271.23718262]
[207.43389893 285.02465820]
[213.34204102 298.81210327]
[219.25018311 312.59954834]
[262.95034790 320.52706909]
[272.00125122 332.48870850]
[281.05215454 344.45034790]
[290.10308838 356.41198730]
[297.78817749 361.37625122]
[299.20184326 368.64138794]
[308.05789185 380.74804688]
[316.91390991 392.85467529]
[327.55621338 391.80764771]
[337.59402466 395.25369263]
[345.23190308 402.50531006]
[349.13333130 412.20095825]
[348.65432739 422.56021118]
[343.94876099 431.71069336]
[352.20642090 444.23312378]
[360.46408081 456.75555420]
[375.82723999 461.37640381]
[381.65930176 476.32186890]
[373.48635864 490.12704468]
[357.57803345 492.20178223]
[346.13781738 480.95452881]
[347.94165039 465.01321411]
[339.68399048 452.49078369]
[331.42633057 439.96835327]
[312.11685181 437.48019409]
[300.66790771 421.35794067]
[304.80728149 401.71069336]
[295.95126343 389.60406494]
[287.09521484 377.49743652]
[278.14144897 365.46289062]
[269.09051514 353.50125122]
[260.03961182 341.53961182]
[250.98869324 329.57797241]
[243.68061829 331.26379395]
[247.05200195 345.88000488]
[232.43572998 349.25115967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 157]
[13 156]
[14 155]
[15 154]
[16 153]
[18 152]
[19 151]
[20 150]
[21 149]
[22 148]
[23 147]
[24 144]
[25 143]
[26 142]
[27 141]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[38 45]
[39 44]
[54 63]
[55 62]
[56 61]
[64 112]
[65 111]
[67 109]
[68 108]
[70 107]
[71 106]
[72 105]
[73 104]
[74 102]
[75 101]
[76 100]
[77 99]
[81 97]
[82 96]
[83 95]
[84 94]
[85 93]
[116 140]
[117 139]
[118 138]
[119 137]
[120 136]
[121 135]
[122 134]
[124 132]
[125 131]
[126 130]
[158 190]
[159 189]
[160 188]
[161 187]
[163 186]
[164 185]
[165 184]
[171 181]
[172 180]
[173 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
