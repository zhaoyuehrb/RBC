%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUAAUGCGGUAGCGCGGGGAAUUUCGAGUGGUGUUGGAGCGCCGGAGGCUAGUGGGUGGCUGACCCCCAGCAUCCUCGGGAGCGACC\
) } def
/len { sequence length } bind def

/coor [
[-33.65416718 340.71926880]
[-25.05398941 353.00897217]
[-24.21990395 367.98574829]
[-31.40225410 381.15441895]
[-44.44529724 388.56246948]
[-59.43423080 387.98638916]
[-71.87020874 379.59912109]
[-78.02062225 365.91799927]
[-76.03993225 351.05047607]
[-88.08322144 359.99246216]
[-100.12651062 368.93444824]
[-106.14102936 384.19082642]
[-122.39842224 386.34237671]
[-132.17448425 373.17572021]
[-125.41244507 358.23562622]
[-109.06850433 356.89114380]
[-97.02520752 347.94915771]
[-84.98191833 339.00717163]
[-74.46725464 328.30941772]
[-65.73447418 316.11358643]
[-72.01080322 302.60531616]
[-70.67407227 287.66983032]
[-61.98355484 275.32714844]
[-48.19131851 268.94976807]
[-32.95941162 270.34127808]
[-24.22663307 258.14544678]
[-15.49385262 245.94960022]
[-6.76107264 233.75375366]
[1.97170770 221.55792236]
[10.70448780 209.36207581]
[19.43726730 197.16622925]
[20.80030823 189.73669434]
[28.68794441 184.70719910]
[37.83647537 172.82003784]
[46.98500443 160.93289185]
[56.13353348 149.04573059]
[65.28206635 137.15858459]
[74.43059540 125.27143097]
[83.57912445 113.38427734]
[92.72765350 101.49712372]
[83.68885040 98.78052521]
[76.26448822 91.27454376]
[72.34764862 79.84117889]
[73.43334198 65.99528503]
[76.00972748 51.21819687]
[78.58611298 36.44111252]
[75.35014343 19.79885292]
[90.44621277 12.08230972]
[102.04019928 24.45226669]
[93.36320496 39.01749802]
[90.78681946 53.79458237]
[88.21042633 68.57167053]
[93.99257660 73.34835815]
[103.54615021 61.78421783]
[115.11013031 71.33798218]
[105.55687714 82.90173340]
[111.33902740 87.67842102]
[125.36426544 82.35935211]
[139.38951111 77.04027557]
[153.41474915 71.72120667]
[161.28372192 57.74054337]
[177.14286804 55.31829071]
[188.82640076 66.31259155]
[187.37171936 82.28955841]
[173.89472961 90.99302673]
[158.73382568 85.74644470]
[144.70858765 91.06552124]
[130.68334961 96.38459778]
[116.65809631 101.70366669]
[104.61480713 110.64565277]
[95.46627808 122.53280640]
[86.31774902 134.41996765]
[77.16921997 146.30711365]
[68.02068329 158.19425964]
[58.87215805 170.08142090]
[49.72362518 181.96856689]
[40.57509613 193.85572815]
[31.63311005 205.89901733]
[22.90032959 218.09484863]
[14.16754913 230.29069519]
[5.43476915 242.48654175]
[-3.29801130 254.68237305]
[-12.03079128 266.87823486]
[-20.76357079 279.07406616]
[-14.53972340 293.04586792]
[-16.13442230 308.15722656]
[-25.01980782 320.36035156]
[-38.72863770 326.43685913]
[-53.53863144 324.84637451]
[-62.27141190 337.04220581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 18]
[10 17]
[11 16]
[19 90]
[20 89]
[25 84]
[26 83]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[44 52]
[45 51]
[46 50]
[57 69]
[58 68]
[59 67]
[60 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
