%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCUGCCACGAGGCCGCAGUAUAACCGCGUGGCCCGCGCGCGCGCUUCCCUCCCGGCGCAGUCACCGGCGCGGUCU\
) } def
/len { sequence length } bind def

/coor [
[86.90470123 273.69512939]
[89.84990692 254.53852844]
[90.43880463 239.55009460]
[91.02770233 224.56166077]
[91.61660004 209.57322693]
[92.20549774 194.58477783]
[92.50000000 179.58767700]
[92.50000000 164.58767700]
[92.50000000 149.58767700]
[92.50000000 134.58767700]
[70.19268036 119.08090973]
[65.44949341 92.33060455]
[51.82734299 86.05071259]
[42.45337677 85.24877930]
[37.80115509 79.24752045]
[24.43605804 72.43766785]
[11.07096100 65.62780762]
[-2.29413700 58.81795120]
[-15.65923500 52.00809097]
[-29.02433205 45.19823456]
[-38.35958862 44.02890015]
[-42.77261353 37.84962463]
[-55.86005402 30.52030754]
[-71.00102997 35.05091476]
[-84.87107849 27.47482109]
[-89.24135590 12.28679180]
[-81.51904297 -1.50238717]
[-66.28565979 -5.71183968]
[-52.57889557 2.15582728]
[-48.53073502 17.43286705]
[-35.44329453 24.76218605]
[-22.21447563 31.83313751]
[-8.84937763 38.64299393]
[4.51572037 45.45285034]
[17.88081932 52.26271057]
[31.24591637 59.07256699]
[44.61101532 65.88242340]
[58.10723877 72.42856598]
[71.72938538 78.70845795]
[79.15066528 71.40170288]
[88.37737274 66.57138824]
[98.61053467 64.63579559]
[108.96401978 65.76253510]
[118.54126740 69.85404205]
[126.51294708 76.55600739]
[139.60038757 69.22668457]
[152.68783569 61.89736938]
[165.77526855 54.56805038]
[178.86271667 47.23873138]
[180.55274963 31.81396675]
[191.01135254 20.35111046]
[206.21699524 17.25786972]
[220.32278442 23.72365379]
[227.90475464 37.26224136]
[226.04750061 52.66776657]
[215.46514893 64.01648712]
[200.22685242 66.94459534]
[186.19203186 60.32617188]
[173.10458374 67.65549469]
[160.01715088 74.98480988]
[146.92970276 82.31412506]
[133.84226990 89.64344788]
[135.24763489 96.81219482]
[135.15124512 104.11676788]
[133.55720520 111.24593353]
[130.53344727 117.89596558]
[126.20880127 123.78353119]
[120.76750183 128.65777588]
[114.44139099 132.31105042]
[107.50000000 134.58767700]
[107.50000000 149.58767700]
[107.50000000 164.58767700]
[107.50000000 179.58767700]
[110.69623566 188.43630981]
[107.19393158 195.17367554]
[106.60503387 210.16212463]
[106.01613617 225.15055847]
[105.42723846 240.13899231]
[104.83834076 255.12742615]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 73]
[8 72]
[9 71]
[10 70]
[12 39]
[13 38]
[15 37]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[22 31]
[23 30]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
