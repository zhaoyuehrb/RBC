%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGAACAGAAAGCUCUCCCUCUUGUGUGAGGCAGUUGCUGUGGAAACCCCACGGGCAGGAGGCCCCCGGCCAGCACAUCCUGUCUGCUUGUGUCUGCUGCAGAGUUCUGGGACCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[148.55172729 127.64490509]
[142.63459778 136.10820007]
[135.26095581 143.33793640]
[126.68267822 149.08712769]
[117.19285583 153.15934753]
[107.11567688 155.41551208]
[96.79540253 155.77850342]
[86.58460236 154.23594666]
[76.83211517 150.84054565]
[67.87110901 145.70826721]
[60.00772095 139.01446533]
[53.51058578 130.98782349]
[48.60165787 121.90254974]
[34.13785553 125.87727356]
[19.67405319 129.85198975]
[5.21025085 133.82672119]
[0.31158414 143.70188904]
[-9.05528831 149.08270264]
[-19.61253357 148.36909485]
[-27.81968307 142.04624939]
[-42.46757126 145.27725220]
[-57.11545944 148.50827026]
[-71.76334381 151.73927307]
[-80.05685425 165.19264221]
[-95.45330048 168.75987244]
[-108.81822968 160.32458496]
[-112.22248840 144.89129639]
[-103.64636993 131.61628723]
[-88.17794800 128.37539673]
[-74.99435425 137.09138489]
[-60.34646606 133.86038208]
[-45.69857788 130.62936401]
[-31.05069160 127.39836121]
[-17.91058350 113.30664825]
[1.23552811 119.36291504]
[15.69933033 115.38819122]
[30.16313362 111.41346741]
[44.62693405 107.43874359]
[46.73328018 83.14272308]
[58.98839569 62.05847168]
[49.44475937 50.48613358]
[39.90112305 38.91379929]
[30.35748482 27.34145927]
[20.81384850 15.76912212]
[11.27021122 4.19678450]
[-4.49753141 1.23741937]
[-11.88723946 -13.00237560]
[-5.23016071 -27.59904861]
[10.36696339 -31.35528183]
[22.93935394 -21.38961220]
[22.84254837 -5.34685183]
[32.38618469 6.22548580]
[41.92982101 17.79782295]
[51.47345734 29.37016106]
[61.01709747 40.94249725]
[70.56072998 52.51483536]
[85.16749573 46.13434982]
[100.98152161 44.13813782]
[116.71566010 46.68866730]
[131.08926392 53.57835388]
[142.93241882 64.24642181]
[151.28120422 77.82456970]
[155.45606995 93.20764160]
[170.45483398 93.39919281]
[185.45361328 93.59075165]
[200.45239258 93.78230286]
[215.45117188 93.97386169]
[230.44995117 94.16541290]
[239.18754578 91.11808777]
[245.82804871 94.55828094]
[260.81704712 95.13282013]
[275.81582642 95.32437897]
[290.81457520 95.13282013]
[305.81335449 94.94126892]
[320.81213379 94.74971008]
[334.51239014 86.83680725]
[347.33743286 94.41094208]
[362.33621216 94.21939087]
[369.57086182 85.90220642]
[379.99331665 83.06245422]
[390.02777100 86.42015839]
[396.37124634 94.61138916]
[411.36022949 95.18592834]
[426.34921265 95.76047516]
[441.33822632 96.33501434]
[451.38296509 88.12335205]
[463.92556763 88.97899628]
[472.21316528 97.89015961]
[487.18261719 98.84730530]
[496.98171997 86.81581116]
[511.98989868 82.87445831]
[526.43621826 88.53878021]
[534.76568604 101.63072205]
[533.77551270 117.11618042]
[523.84649658 129.04066467]
[508.79641724 132.81896973]
[494.41244507 126.99827576]
[486.22546387 113.81674194]
[471.25604248 112.85958862]
[456.04199219 121.50566101]
[440.76367188 111.32400513]
[425.77468872 110.74946594]
[410.78567505 110.17492676]
[395.79669189 109.60037994]
[379.52264404 119.91515350]
[362.52774048 109.21817017]
[347.52899170 109.40972137]
[334.90155029 117.30892181]
[321.00369263 109.74848938]
[306.00491333 109.94004059]
[291.00613403 110.13159943]
[276.00735474 110.32315063]
[272.02130127 113.14255524]
[266.19683838 113.40745544]
[260.24249268 110.12181091]
[245.25349426 109.54727173]
[230.25839233 109.16419220]
[215.25961304 108.97264099]
[200.26083374 108.78108215]
[185.26206970 108.58953094]
[170.26329041 108.39797211]
[155.26451111 108.20641327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 38]
[14 37]
[15 36]
[16 35]
[20 33]
[21 32]
[22 31]
[23 30]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[63 122]
[64 121]
[65 120]
[66 119]
[67 118]
[68 117]
[70 116]
[71 115]
[72 112]
[73 111]
[74 110]
[75 109]
[77 107]
[78 106]
[82 104]
[83 103]
[84 102]
[85 101]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
