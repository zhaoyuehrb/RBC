%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUGGUGGGGCUGCAGGGUGGGGGCAGGCCAGCUCAGCAGAGCCUGGGGCCAGAGGGCCAGACAGCCACAGAGCUCCUGGCGUGGGCAAGGCUGGCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[-33.29608917 328.85617065]
[-49.75467682 333.79544067]
[-66.91976166 333.54666138]
[-83.19626617 328.14306641]
[-91.71723175 340.48782349]
[-100.23820496 352.83258057]
[-108.75917816 365.17733765]
[-117.28014374 377.52209473]
[-121.30175781 393.99215698]
[-138.24145508 394.68707275]
[-143.59860229 378.60174561]
[-129.62490845 369.00112915]
[-121.10393524 356.65637207]
[-112.58296204 344.31161499]
[-104.06198883 331.96685791]
[-95.54102325 319.62210083]
[-104.07553101 309.90258789]
[-110.16828156 298.48275757]
[-113.49355316 285.96456909]
[-113.87159729 273.00894165]
[-111.27841187 260.30090332]
[-105.84718323 248.51321411]
[-97.86145020 238.27091980]
[-87.74033356 230.11810303]
[-76.01651764 224.48902893]
[-63.30821991 221.68498230]
[-50.28658676 221.85816956]
[-37.64026260 225.00346375]
[-26.03895378 230.95845032]
[-16.09211540 219.73078918]
[-6.14527464 208.50312805]
[3.80156517 197.27546692]
[13.74840450 186.04780579]
[23.69524574 174.82014465]
[33.64208603 163.59248352]
[43.58892441 152.36482239]
[42.43606567 137.55918884]
[52.36363220 126.03105164]
[67.90094757 124.92221069]
[77.84779358 113.69454956]
[74.03591919 97.96829987]
[80.24758911 83.02639008]
[94.08475494 74.63721466]
[110.20552063 76.03944397]
[119.80871582 64.51647949]
[129.41191101 52.99351120]
[132.30317688 37.43873596]
[146.39511108 32.61519623]
[155.99830627 21.09223175]
[165.60150146 9.56926727]
[175.20469666 -1.95369649]
[184.80789185 -13.47665977]
[178.57437134 -27.36566925]
[178.98762512 -42.52206039]
[185.91217041 -55.94111633]
[197.92692566 -64.98580170]
[212.61665344 -67.90495300]
[227.05726624 -64.17209625]
[236.66046143 -75.69506073]
[246.26365662 -87.21802521]
[244.58395386 -102.93280029]
[254.57313538 -115.17991638]
[270.30480957 -116.69336700]
[282.44561768 -106.57526398]
[283.79266357 -90.82848358]
[273.54675293 -78.79531860]
[257.78662109 -77.61483765]
[248.18342590 -66.09187317]
[238.58023071 -54.56890869]
[244.85493469 -41.03769684]
[244.63150024 -26.06240082]
[237.90068054 -12.61408615]
[225.94961548 -3.38412476]
[211.11598206 -0.24561645]
[196.33085632 -3.87346745]
[186.72766113 7.64949608]
[177.12446594 19.17246056]
[167.52127075 30.69542313]
[157.91807556 42.21838760]
[155.71369934 56.94896698]
[140.93487549 62.59670639]
[131.33168030 74.11966705]
[121.72848511 85.64263153]
[125.98606873 98.27222443]
[123.43801880 111.35431671]
[114.75164032 121.46276093]
[102.20188141 125.95020294]
[89.07545471 123.64138794]
[79.12860870 134.86904907]
[79.90067291 150.42674255]
[69.65322113 161.67149353]
[54.81658554 162.31166077]
[44.86974716 173.53932190]
[34.92290497 184.76698303]
[24.97606659 195.99464417]
[15.02922630 207.22230530]
[5.08238649 218.44996643]
[-4.86445332 229.67762756]
[-14.81129360 240.90528870]
[-5.67330980 255.57727051]
[-1.38466203 272.30432129]
[-2.33407021 289.52941895]
[-8.42315197 305.65228271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[8 12]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
[35 93]
[36 92]
[39 89]
[40 88]
[44 83]
[45 82]
[46 81]
[48 79]
[49 78]
[50 77]
[51 76]
[52 75]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
