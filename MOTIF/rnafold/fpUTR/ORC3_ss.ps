%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCAAGGAGCCGUGUGGCUCGCCACUAACCUCUGCCCUGCAGCCGCGAGGGCGCGCGGGAAAUCCCGAGUGCAUCUGGAAUACGCAGAGUCAGUAAGACC\
) } def
/len { sequence length } bind def

/coor [
[3.76875901 312.18957520]
[-2.23851466 317.31631470]
[-9.12134075 321.17156982]
[-16.61482811 323.61080933]
[-24.43132591 324.54385376]
[-32.27145386 323.93829346]
[-39.83557892 321.82061768]
[-46.83526611 318.27499390]
[-53.00426865 313.44003296]
[-65.16635895 322.21975708]
[-77.32844543 330.99948120]
[-89.49053955 339.77920532]
[-101.65263367 348.55892944]
[-107.87113953 363.73333740]
[-124.15592194 365.66671753]
[-133.75459290 352.37017822]
[-126.79285431 337.52206421]
[-110.43235779 336.39685059]
[-98.27026367 327.61712646]
[-86.10816956 318.83740234]
[-73.94608307 310.05767822]
[-61.78399277 301.27795410]
[-65.18341064 277.77609253]
[-54.66152954 256.37319946]
[-33.79621124 244.61087036]
[-9.83242130 246.70680237]
[-1.61812270 234.15589905]
[6.59617662 221.60498047]
[2.21204472 209.38359070]
[5.77186108 196.69386292]
[16.17724991 188.29000854]
[29.72247696 187.45620728]
[38.31570816 175.16165161]
[46.90894318 162.86708069]
[55.50217438 150.57250977]
[64.09540558 138.27795410]
[72.68864441 125.98338318]
[65.43103027 115.03439331]
[62.37102509 102.25982666]
[63.88018799 89.21085358]
[69.77526093 77.47196960]
[79.34043884 68.46859741]
[91.41423798 63.29398727]
[104.53057861 62.57647324]
[117.09678650 66.40317535]
[126.42356110 54.65535736]
[135.75033569 42.90753937]
[138.70791626 34.08037186]
[145.54507446 30.94939232]
[155.22578430 19.49146652]
[154.94548035 6.48506117]
[163.38687134 -2.87771130]
[175.54927063 -3.87456989]
[185.57489014 -15.03194141]
[195.60050964 -26.18931198]
[205.62612915 -37.34668350]
[209.09461975 -52.78300858]
[223.35639954 -57.07845306]
[233.38201904 -68.23582458]
[243.40763855 -79.39319611]
[253.43325806 -90.55056763]
[256.29528809 -106.69803619]
[271.80065918 -112.03806305]
[283.99874878 -101.07728577]
[280.34121704 -85.09121704]
[264.59063721 -80.52494812]
[254.56501770 -69.36757660]
[244.53938293 -58.21020508]
[234.51376343 -47.05283356]
[231.76237488 -32.41455841]
[216.78349304 -27.32106209]
[206.75787354 -16.16369247]
[196.73225403 -5.00632048]
[186.70663452 6.15105057]
[184.09625244 23.43073463]
[166.68370056 29.17216682]
[157.00300598 40.63009262]
[147.49815369 52.23431396]
[138.17138672 63.98213196]
[128.84460449 75.72994995]
[136.49845886 90.57083893]
[136.99069214 107.26188660]
[130.22473145 122.52803040]
[117.52816772 133.37379456]
[101.39228058 137.67105103]
[84.98320770 134.57661438]
[76.38997650 146.87118530]
[67.79673767 159.16575623]
[59.20350647 171.46031189]
[50.61027527 183.75488281]
[42.01704025 196.04945374]
[45.41514969 213.12596130]
[35.67333984 227.15029907]
[19.14708519 229.81929016]
[10.93278503 242.37019348]
[2.71848631 254.92109680]
[7.86710310 260.99911499]
[11.73009777 267.95556641]
[14.16260624 275.52276611]
[15.07473564 283.41027832]
[14.43488789 291.31594849]
[12.27083874 298.93774414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[26 96]
[27 95]
[28 94]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[37 86]
[45 80]
[46 79]
[47 78]
[49 77]
[50 76]
[53 74]
[54 73]
[55 72]
[56 71]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
