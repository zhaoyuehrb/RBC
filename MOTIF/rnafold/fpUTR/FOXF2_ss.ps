%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCGGGCGGCGGGCUAGGGCGCUCGCAGGGCUUCUGGGCCGACCCCGCUCCGGCGCCUCCGCUUCCCGCCCGGGGCCCGCCCUCGCGGCCCGGCCUCGCUCCCGGGUCCCAG\
) } def
/len { sequence length } bind def

/coor [
[111.23061371 527.55072021]
[122.17206573 516.37847900]
[120.53623199 501.46795654]
[118.90039825 486.55743408]
[117.26456451 471.64691162]
[115.62873840 456.73635864]
[113.99290466 441.82583618]
[112.35707092 426.91528320]
[108.44664764 420.52307129]
[110.88593292 411.57592773]
[109.65798950 396.62625122]
[108.43004608 381.67660522]
[107.20210266 366.72695923]
[105.77008057 351.79547119]
[104.13424683 336.88491821]
[102.49842072 321.97439575]
[100.86258698 307.06387329]
[96.95216370 300.67163086]
[99.39144897 291.72448730]
[98.16350555 276.77484131]
[96.93556213 261.82516479]
[95.70761871 246.87551880]
[93.13637543 244.27752686]
[91.76673889 240.25144958]
[92.28051758 235.41064453]
[95.04278564 230.66017151]
[95.04278564 215.66017151]
[95.04278564 200.66017151]
[94.83790588 185.66157532]
[94.42817688 170.66717529]
[94.01845551 155.67276001]
[93.60873413 140.67835999]
[93.19901276 125.68395996]
[82.89875031 122.08436584]
[74.46005249 114.34742737]
[69.53489685 103.41947174]
[69.30245972 90.89688873]
[74.21954346 78.79442596]
[63.54075241 68.26050568]
[52.86195755 57.72659302]
[36.87402344 56.39788055]
[28.06460381 42.98991013]
[33.19153214 27.78812790]
[48.32186890 22.45404053]
[61.84891129 31.07950401]
[63.39587402 47.04779816]
[74.07466888 57.58171463]
[84.75345612 68.11563110]
[99.35088348 64.66378021]
[104.18055725 50.46257401]
[109.01023102 36.26136780]
[113.83990479 22.06016159]
[118.66957855 7.85895634]
[123.49925232 -6.34224892]
[128.32893372 -20.54345512]
[128.14068604 -29.81524658]
[133.48934937 -35.06346893]
[138.70512390 -49.12745285]
[128.42436218 -60.46609116]
[124.60176849 -75.28656006]
[128.11572266 -90.18322754]
[138.15876770 -101.73294830]
[152.42306519 -107.28167725]
[167.63078308 -105.55435944]
[180.28732300 -96.94792175]
[187.48428345 -83.44006348]
[187.56785583 -68.13478088]
[180.51884460 -54.54912567]
[167.95706177 -45.80497742]
[152.76910400 -43.91167831]
[147.55332947 -29.84769249]
[142.53013611 -15.71377945]
[137.70045471 -1.51257408]
[132.87078857 12.68863106]
[128.04110718 26.88983727]
[123.21143341 41.09104156]
[118.38175964 55.29224777]
[113.55208588 69.49345398]
[129.23085022 89.34991455]
[125.91893768 112.64694214]
[108.19342041 125.27423859]
[108.60314178 140.26864624]
[109.01286316 155.26304626]
[109.42258453 170.25744629]
[109.83230591 185.25184631]
[113.23278046 193.87960815]
[110.04278564 200.66017151]
[110.04278564 215.66017151]
[110.04278564 230.66017151]
[110.65727234 245.64758301]
[111.88521576 260.59722900]
[113.11315918 275.54687500]
[114.34110260 290.49655151]
[115.77311707 305.42803955]
[117.40895081 320.33856201]
[119.04478455 335.24911499]
[120.68061829 350.15963745]
[124.77597046 358.48007202]
[122.15175629 365.49902344]
[123.37969971 380.44866943]
[124.60764313 395.39831543]
[125.83558655 410.34796143]
[127.26760864 425.27944946]
[128.90344238 440.19000244]
[130.53927612 455.10052490]
[132.17510986 470.01107788]
[133.81092834 484.92160034]
[135.44676208 499.83212280]
[137.08259583 514.74267578]
[150.18603516 523.27691650]
[154.68865967 538.25225830]
[148.46444702 552.59777832]
[134.45230103 559.53991699]
[119.26831055 555.80084229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 109]
[3 108]
[4 107]
[5 106]
[6 105]
[7 104]
[8 103]
[10 102]
[11 101]
[12 100]
[13 99]
[14 97]
[15 96]
[16 95]
[17 94]
[19 93]
[20 92]
[21 91]
[22 90]
[26 89]
[27 88]
[28 87]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[38 48]
[39 47]
[40 46]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[57 71]
[58 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
