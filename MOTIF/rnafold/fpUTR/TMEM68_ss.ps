%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGAGACAUUGAAGUUUGGGACAAGAUAUUUAUCUAACUUCUGUGUCAAAAUUAGCGACCUGCUAUGGCAAUGAAGAAAGAAACUGAAUUUGUCAUUUUCACCUGAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[95.67056274 179.15950012]
[82.40802765 172.15197754]
[79.10779572 157.51953125]
[88.07811737 145.49765015]
[90.80715942 130.74800110]
[83.31835175 130.33842468]
[73.85202789 141.97409058]
[64.38571167 153.60977173]
[54.91939163 165.24543762]
[56.78472137 180.93925476]
[46.94099808 193.30358887]
[31.22832870 195.00288391]
[18.96876335 185.02899170]
[17.43568420 169.29924011]
[27.53863716 157.14581299]
[43.28372192 155.77911377]
[52.75004196 144.14344788]
[62.21636200 132.50778198]
[71.68267822 120.87210846]
[69.08818054 99.57984161]
[78.98457336 83.61011505]
[94.25196075 78.36314392]
[95.47990417 63.41349030]
[96.70784760 48.46383667]
[97.93579102 33.51418304]
[99.16373444 18.56452942]
[100.39167786 3.61487579]
[86.65903473 -2.76006007]
[75.95613098 -13.42870140]
[69.56111908 -27.08974266]
[68.22835541 -42.08620453]
[72.09946442 -56.60639572]
[80.68858337 -68.90280151]
[92.94323730 -77.50236511]
[107.37328339 -81.38298798]
[108.60122681 -96.33264160]
[109.82917023 -111.28229523]
[99.88256836 -123.26991272]
[101.34084320 -138.41349792]
[112.83049774 -147.82217407]
[114.05844116 -162.77183533]
[115.28638458 -177.72148132]
[116.51432800 -192.67114258]
[106.56773376 -204.65875244]
[108.02600861 -219.80233765]
[119.51566315 -229.21102905]
[120.74360657 -244.16067505]
[121.97154999 -259.11032104]
[123.19949341 -274.05999756]
[124.42743683 -289.00964355]
[122.26403046 -293.13430786]
[121.67715454 -297.30575562]
[122.47225952 -300.99578857]
[124.29557800 -303.80242920]
[126.69301605 -305.49295044]
[129.54397583 -320.21951294]
[132.39494324 -334.94610596]
[135.24589539 -349.67266846]
[127.49223328 -363.71762085]
[133.77151489 -378.48074341]
[149.26681519 -382.63705444]
[162.09147644 -372.99819946]
[162.40750122 -356.95825195]
[149.97247314 -346.82171631]
[147.12150574 -332.09512329]
[144.27055359 -317.36856079]
[141.41958618 -302.64199829]
[139.37709045 -287.78170776]
[138.14915466 -272.83203125]
[136.92120361 -257.88238525]
[135.69326782 -242.93273926]
[134.46531677 -227.98307800]
[144.26570129 -216.82566833]
[143.23336792 -201.64709473]
[131.46398926 -191.44319153]
[130.23603821 -176.49354553]
[129.00810242 -161.54388428]
[127.78015900 -146.59423828]
[137.58053589 -135.43681335]
[136.54820251 -120.25824738]
[124.77882385 -110.05435181]
[123.55088043 -95.10469818]
[122.32293701 -80.15504456]
[135.92634583 -73.97179413]
[146.61351013 -63.48781967]
[153.08102417 -49.95468521]
[154.53089905 -34.99743652]
[150.76893616 -20.41945076]
[142.23046875 -7.98502207]
[129.93016052 0.79416811]
[115.34133148 4.84281874]
[114.11338806 19.79247284]
[112.88544464 34.74212646]
[111.65750122 49.69178009]
[110.42955780 64.64143372]
[109.20161438 79.59108734]
[128.20115662 94.24263763]
[125.87220764 123.83577728]
[134.01313782 136.43440247]
[142.15405273 149.03302002]
[150.29498291 161.63165283]
[158.43591309 174.23027039]
[173.26947021 181.22296143]
[174.36058044 197.58576965]
[160.58679199 206.48603821]
[146.11741638 198.76795959]
[145.83728027 182.37120056]
[137.69636536 169.77258301]
[129.55543518 157.17395020]
[121.41451263 144.57533264]
[113.27358246 131.97669983]
[105.78477478 131.56713867]
[106.88900757 146.52642822]
[114.49480438 159.45515442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 19]
[7 18]
[8 17]
[9 16]
[22 96]
[23 95]
[24 94]
[25 93]
[26 92]
[27 91]
[35 83]
[36 82]
[37 81]
[40 78]
[41 77]
[42 76]
[43 75]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[55 67]
[56 66]
[57 65]
[58 64]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
