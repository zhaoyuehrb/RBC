%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUACUCCACCCCACUCUGGCUGUAGUGUGACAUUCCUGCCUGCCUGAGGAAGAAAUGGUGAGCAGGGGCUGCAAUUGCAGACAAGUGUCACCCAGAAGCCACAAGUUUCUGUGAGCACCAGGUCUACAAACUACCCAAGGCAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[89.80442047 268.24749756]
[95.85076141 252.40837097]
[95.85076141 237.40837097]
[95.85076141 222.40837097]
[95.85076141 207.40837097]
[85.16989136 197.09069824]
[84.95620728 181.87855530]
[95.85076141 170.74543762]
[95.85076141 155.74543762]
[82.38023376 150.12141418]
[71.49157715 141.51007080]
[63.76582336 130.84584045]
[59.48283005 119.14852142]
[58.61957169 107.43330383]
[60.87380219 96.62623596]
[65.70998383 87.49218750]
[72.42258453 80.58075714]
[62.38562775 69.43357849]
[52.34867096 58.28641129]
[42.31171036 47.13923645]
[32.27474976 35.99206543]
[31.08326912 50.94466782]
[20.68546486 61.75603485]
[5.79067421 63.52951431]
[-6.85500145 55.46187210]
[-11.52412510 41.20707321]
[-6.10197353 27.22135544]
[6.95567083 19.83908653]
[21.73449898 22.40365410]
[13.43362617 9.90983486]
[5.13275242 -2.58398318]
[-3.16812086 -15.07780170]
[-11.46899414 -27.57162094]
[-19.76986694 -40.06543732]
[-28.07073975 -52.55925751]
[-36.37161255 -65.05307770]
[-46.75376129 -75.87947845]
[-58.88901520 -84.69625854]
[-71.02426910 -93.51303864]
[-83.15952301 -102.32981873]
[-95.29478455 -111.14659119]
[-111.00722504 -112.99852753]
[-116.75593567 -126.73903656]
[-128.89118958 -135.55581665]
[-141.02644348 -144.37258911]
[-153.16169739 -153.18937683]
[-166.57783508 -145.91133118]
[-181.82360840 -145.18367004]
[-195.87193298 -151.15086365]
[-205.93350220 -162.62811279]
[-210.01060486 -177.33660889]
[-207.29373169 -192.35597229]
[-198.32229614 -204.70410156]
[-184.87759399 -211.92924500]
[-169.62907410 -212.59686279]
[-155.60437012 -206.57440186]
[-145.58805847 -195.05761719]
[-141.56890869 -180.33317566]
[-144.34492493 -165.32463074]
[-132.20967102 -156.50784302]
[-120.07440948 -147.69107056]
[-107.93915558 -138.87428284]
[-93.09470367 -137.65299988]
[-86.47800446 -123.28185272]
[-74.34275055 -114.46507263]
[-62.20749283 -105.64829254]
[-50.07223892 -96.83151245]
[-37.93698120 -88.01473236]
[-31.15077972 -91.20807648]
[-17.57837296 -97.59477234]
[-10.79217052 -100.78811646]
[-9.85031319 -115.75851440]
[-8.90845585 -130.72891235]
[-7.96659756 -145.69931030]
[-15.73892117 -160.13964844]
[-6.89037848 -173.94671631]
[9.47640896 -172.91700745]
[16.52469254 -158.10978699]
[7.00380325 -144.75746155]
[6.06194544 -129.78706360]
[5.12008762 -114.81665802]
[4.17822981 -99.84625244]
[-0.10311814 -88.37248993]
[-6.97577715 -79.86809540]
[-15.30159473 -74.82029724]
[-23.87779427 -73.35395050]
[-15.57692146 -60.86013031]
[-7.27604866 -48.36631393]
[1.02482462 -35.87249374]
[9.32569790 -23.37867546]
[17.62657166 -10.88485622]
[25.92744446 1.60896206]
[34.22831726 14.10278034]
[43.42192459 25.95510674]
[53.45888138 37.10227966]
[63.49584198 48.24945068]
[73.53279877 59.39662170]
[83.56976318 70.54379272]
[118.70117188 59.27441406]
[154.77378845 88.83749390]
[169.61288452 86.64624786]
[184.42820740 84.29973602]
[199.21813965 81.79820251]
[214.00808716 79.29666901]
[228.79801941 76.79513550]
[237.74769592 63.76905823]
[253.30192566 60.96878815]
[266.23266602 70.05568695]
[268.86831665 85.63865662]
[259.64523315 98.47258759]
[244.03526306 100.94335175]
[231.29956055 91.58508301]
[216.50961304 94.08660889]
[201.71968079 96.58814240]
[186.92973328 99.08967590]
[180.81864929 103.33435059]
[171.80412292 101.48533630]
[156.96504211 103.67658234]
[154.79730225 110.85647583]
[169.15702820 115.19217682]
[164.82110596 129.55183411]
[150.46182251 125.21627045]
[148.29408264 132.39616394]
[159.44125366 142.43312073]
[170.58842468 152.47007751]
[185.44352722 148.30718994]
[200.18432617 152.85826111]
[210.10710144 164.67105103]
[212.04553223 179.97615051]
[205.38105774 193.88975525]
[192.24031067 201.97209167]
[176.81642151 201.64410400]
[164.03112793 193.01045227]
[157.96417236 178.82611084]
[160.55146790 163.61724854]
[149.40429688 153.58029175]
[138.25712585 143.54333496]
[131.40553284 146.59385681]
[129.83792114 161.51171875]
[117.70235443 152.69491577]
[110.85076141 155.74543762]
[110.85076141 170.74543762]
[121.74531555 181.87855530]
[121.53163147 197.09069824]
[110.85076141 207.40837097]
[110.85076141 222.40837097]
[110.85076141 237.40837097]
[110.85076141 252.40837097]
[116.89710236 268.24749756]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 148]
[3 147]
[4 146]
[5 145]
[8 142]
[9 141]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 68]
[38 67]
[39 66]
[40 65]
[41 64]
[43 62]
[44 61]
[45 60]
[46 59]
[71 82]
[72 81]
[73 80]
[74 79]
[100 118]
[101 117]
[102 115]
[103 114]
[104 113]
[105 112]
[123 137]
[124 136]
[125 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
