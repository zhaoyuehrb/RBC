%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACGCCGCCCCUCCUUUCCCUUUCCGCUCUCUCCGCCUCCGGAAGCGCGGGCGCGCGGCGCCGGGAGCCCGUUCAGGGCCGCGGGAGUGCGCCAGCGCCGCGCGUGGGGCUGUGGUGGCCGCGGCUCUCAGAUAUAUUUUUGCCAUC\
) } def
/len { sequence length } bind def

/coor [
[184.58517456 354.51986694]
[186.75529480 345.30923462]
[191.41220093 337.04455566]
[198.20014954 330.38394165]
[192.31314087 316.58743286]
[186.42613220 302.79095459]
[180.53912354 288.99447632]
[174.65211487 275.19796753]
[160.07612610 265.47833252]
[162.34747314 247.23709106]
[156.16894531 233.56866455]
[143.87612915 225.15821838]
[145.24226379 209.39610291]
[139.06373596 195.72767639]
[122.91822815 192.94230652]
[111.48177338 180.97978210]
[109.38317871 164.39651489]
[117.64126587 149.67300415]
[111.17401886 136.13880920]
[104.70677185 122.60459900]
[98.23953247 109.07038879]
[94.28000641 111.20682526]
[89.11991119 111.62841034]
[83.45853424 109.87957764]
[68.45853424 109.87957764]
[53.45853424 109.87957764]
[38.45853424 109.87957764]
[24.65836143 117.61687469]
[11.93108940 109.87957764]
[-3.06891084 109.87957764]
[-11.71970844 113.02640533]
[-18.38644600 109.71699524]
[-33.38306808 109.39861298]
[-48.37968826 109.08023834]
[-63.37630844 108.76185608]
[-77.48086548 117.12806702]
[-91.64402771 108.86145782]
[-91.29595184 92.46600342]
[-76.79470062 84.80794525]
[-63.05792999 93.76523590]
[-48.06130600 94.08361053]
[-33.06468582 94.40199280]
[-18.06806564 94.72037506]
[-3.06891084 94.87957764]
[11.93108940 94.87957764]
[24.65836143 87.14227295]
[38.45853424 94.87957764]
[53.45853424 94.87957764]
[68.45853424 94.87957764]
[83.45853424 94.87957764]
[94.92642975 85.21068573]
[97.46144104 70.42644501]
[99.99645233 55.64220810]
[102.53146362 40.85797119]
[105.06647491 26.07373238]
[107.60148621 11.28949356]
[110.13649750 -3.49474549]
[112.67151642 -18.27898407]
[115.20652771 -33.06322098]
[117.74153900 -47.84746170]
[120.27655029 -62.63169861]
[114.98278809 -77.54097748]
[124.75971222 -88.77757263]
[127.29472351 -103.56181335]
[117.97296906 -105.24587250]
[109.23409271 -112.54438782]
[104.06269073 -124.93704224]
[103.42607117 -139.92352295]
[102.78945160 -154.91001892]
[102.15283203 -169.89649963]
[91.35765839 -181.76425171]
[94.04771423 -197.58016968]
[108.15943146 -205.21162415]
[122.86750031 -198.80441284]
[126.88915253 -183.27362061]
[117.13932037 -170.53311157]
[117.77593994 -155.54663086]
[118.41255951 -140.56015015]
[119.04917145 -125.57366180]
[133.67813110 -122.25802612]
[140.71395874 -135.50555420]
[147.74978638 -148.75309753]
[154.78561401 -162.00062561]
[153.66513062 -178.36145020]
[167.42291260 -187.28645325]
[181.90612793 -179.59434509]
[182.21568298 -163.19812012]
[168.03314209 -154.96479797]
[160.99731445 -141.71726990]
[153.96150208 -128.46972656]
[146.92567444 -115.22219849]
[142.07896423 -101.02679443]
[139.54394531 -86.24256134]
[145.01904297 -72.39074707]
[135.06079102 -60.09668732]
[132.52577209 -45.31245041]
[129.99076843 -30.52820969]
[127.45574951 -15.74397182]
[124.92073822 -0.95973325]
[122.38572693 13.82450581]
[119.85071564 28.60874367]
[117.31570435 43.39298248]
[114.78069305 58.17722321]
[112.24568176 72.96145630]
[109.71066284 87.74569702]
[111.77373505 102.60314941]
[118.24098206 116.13735199]
[124.70822144 129.67155457]
[131.17547607 143.20576477]
[144.91691589 144.70370483]
[156.02511597 152.74684143]
[161.64720154 165.13685608]
[160.40522766 178.57701111]
[152.73217773 189.54916382]
[158.91069031 203.21759033]
[171.64544678 212.60569763]
[169.83737183 227.39015198]
[176.01589966 241.05857849]
[187.82313538 246.36149597]
[192.67007446 257.92868042]
[188.44859314 269.31097412]
[194.33560181 283.10745239]
[200.22261047 296.90393066]
[206.10961914 310.70043945]
[211.99662781 324.49691772]
[233.04789734 327.66494751]
[247.93797302 342.69378662]
[250.87364197 363.51171875]
[240.84707642 381.84014893]
[248.43879700 394.77713013]
[256.03051758 407.71414185]
[263.62225342 420.65112305]
[278.97781372 424.39041138]
[287.12026978 437.93572998]
[283.21884155 453.25091553]
[269.58816528 461.24969482]
[254.31510925 457.18655396]
[246.46087646 443.47210693]
[250.68525696 428.24285889]
[243.09353638 415.30584717]
[235.50181580 402.36886597]
[227.91007996 389.43188477]
[218.74630737 391.00469971]
[209.48309326 389.96511841]
[200.85235596 386.38208008]
[193.53967285 380.52600098]
[188.12986755 372.84841919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 125]
[5 124]
[6 123]
[7 122]
[8 121]
[10 118]
[11 117]
[13 115]
[14 114]
[18 109]
[19 108]
[20 107]
[21 106]
[24 50]
[25 49]
[26 48]
[27 47]
[29 45]
[30 44]
[32 43]
[33 42]
[34 41]
[35 40]
[51 105]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[59 97]
[60 96]
[61 95]
[63 93]
[64 92]
[67 79]
[68 78]
[69 77]
[70 76]
[80 91]
[81 90]
[82 89]
[83 88]
[129 142]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
