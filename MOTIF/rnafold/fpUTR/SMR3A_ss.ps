%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCAACUGGCAAGAGUCAUUUUGACCAGCAGGUUAAUCAACUCUAAGACAGAUCCUCACGCAAAGAGGCAACUGAAAGG\
) } def
/len { sequence length } bind def

/coor [
[99.09615326 209.70071411]
[98.52161407 194.71171570]
[97.94707489 179.72271729]
[97.37253571 164.73373413]
[96.79798889 149.74473572]
[96.22344971 134.75573730]
[74.80421448 114.25080109]
[79.18405914 90.37579346]
[68.37623596 79.97430420]
[57.56840897 69.57281494]
[41.08884048 72.79235077]
[26.04573441 65.71086884]
[18.18356705 51.24768448]
[20.37700462 35.09852219]
[9.17870617 25.11863708]
[-2.01959229 15.13875198]
[-13.21789074 5.15886641]
[-24.41618919 -4.82101917]
[-37.77370071 -0.87636060]
[-51.21420670 -4.08716631]
[-61.18776321 -13.49362850]
[-65.11594391 -26.51451302]
[-62.05790329 -39.65479279]
[-72.86573029 -50.05627823]
[-83.67355347 -60.45776749]
[-94.48137665 -70.85925293]
[-105.28919983 -81.26074219]
[-116.09702301 -91.66223145]
[-132.13711548 -95.07506561]
[-136.94352722 -110.75404358]
[-125.57182312 -122.56998444]
[-109.72024536 -118.36765289]
[-105.69553375 -102.47005463]
[-94.88771057 -92.06856537]
[-84.07988739 -81.66707611]
[-73.27206421 -71.26558685]
[-62.46424103 -60.86410141]
[-51.65641785 -50.46261597]
[-35.72254562 -53.88582230]
[-20.69995499 -47.15386963]
[-12.48771572 -32.69698715]
[-14.43630314 -16.01931763]
[-3.23800516 -6.03943205]
[7.96029329 3.94045377]
[19.15859222 13.92033958]
[30.35688972 23.90022469]
[43.22452164 19.84527779]
[56.50790024 22.76519585]
[66.65023041 31.98943138]
[70.88047791 45.14471436]
[67.96990204 58.76499176]
[78.77772522 69.16648102]
[89.58554840 79.56797028]
[105.32099915 73.58847046]
[123.63686371 80.01802826]
[134.94285583 98.89505768]
[149.84388733 100.61531067]
[164.74491882 102.33556366]
[179.64595032 104.05581665]
[190.87997437 93.17781067]
[206.48155212 92.11743927]
[219.08412170 101.37537384]
[222.73712158 116.58029175]
[215.71572876 130.55290222]
[201.33520508 136.69577026]
[186.38562012 132.10841370]
[177.92570496 118.95684052]
[163.02467346 117.23659515]
[148.12364197 115.51634216]
[133.22261047 113.79608917]
[127.72006226 118.89237213]
[137.91244507 129.89761353]
[126.90705872 140.08982849]
[116.71498108 129.08493042]
[111.21244049 134.18119812]
[111.78698730 149.17019653]
[112.36152649 164.15919495]
[112.93606567 179.14817810]
[113.51060486 194.13717651]
[114.08515167 209.12615967]
[117.01200104 228.28558350]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[8 53]
[9 52]
[10 51]
[14 46]
[15 45]
[16 44]
[17 43]
[18 42]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[56 70]
[57 69]
[58 68]
[59 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
