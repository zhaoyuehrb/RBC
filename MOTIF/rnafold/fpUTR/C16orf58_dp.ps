%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:09 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (C16orf58)
} def

/sequence { (\
ACGUCCACCGUGCGGCAGGGGCGGGGCUGGGAUCCAAAAGCUCGGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 11 0.015374186 ubox
2 10 0.016351476 ubox
2 14 0.020917546 ubox
2 23 0.948960132 ubox
2 29 0.005484189 ubox
2 44 0.022218544 ubox
3 9 0.016164918 ubox
3 13 0.021077793 ubox
3 16 0.055286436 ubox
3 22 0.957147521 ubox
3 27 0.015237294 ubox
3 28 0.004623869 ubox
3 33 0.080769817 ubox
3 41 0.007090280 ubox
3 43 0.021224402 ubox
3 46 0.007515504 ubox
4 12 0.020434718 ubox
4 15 0.053940849 ubox
4 19 0.013341600 ubox
4 20 0.080696596 ubox
4 21 0.925343084 ubox
4 24 0.005080117 ubox
4 25 0.060133724 ubox
4 26 0.014614437 ubox
4 31 0.114888630 ubox
4 32 0.084969498 ubox
4 40 0.006444966 ubox
4 45 0.006580911 ubox
5 14 0.053917941 ubox
5 15 0.014468970 ubox
5 18 0.017288570 ubox
5 19 0.105881928 ubox
5 20 0.924897267 ubox
5 21 0.243404943 ubox
5 23 0.008747373 ubox
5 24 0.076788803 ubox
5 25 0.022747608 ubox
5 26 0.016241574 ubox
5 30 0.148999987 ubox
5 31 0.080247203 ubox
5 44 0.006107064 ubox
5 45 0.006045982 ubox
6 12 0.043304367 ubox
6 14 0.014594261 ubox
6 18 0.113832960 ubox
6 19 0.918887713 ubox
6 20 0.247001111 ubox
6 23 0.077012207 ubox
6 24 0.022359699 ubox
6 25 0.021947530 ubox
6 29 0.152171478 ubox
6 30 0.074287129 ubox
6 44 0.006099099 ubox
7 11 0.035153793 ubox
7 28 0.154328349 ubox
8 15 0.897514599 ubox
8 19 0.269739389 ubox
8 20 0.173778371 ubox
8 21 0.041534180 ubox
8 24 0.033064234 ubox
8 25 0.025052700 ubox
8 26 0.171478339 ubox
8 45 0.012384301 ubox
9 14 0.898005738 ubox
9 18 0.284846804 ubox
9 19 0.174924287 ubox
9 20 0.040247919 ubox
9 23 0.033369192 ubox
9 24 0.025058393 ubox
9 25 0.172411428 ubox
9 44 0.012439678 ubox
10 16 0.157411668 ubox
10 22 0.033140420 ubox
10 43 0.012106166 ubox
11 15 0.147815367 ubox
11 17 0.184860153 ubox
11 21 0.032876786 ubox
11 23 0.173170571 ubox
12 16 0.183381932 ubox
12 22 0.174453398 ubox
12 41 0.012037163 ubox
13 21 0.174446784 ubox
13 40 0.012045266 ubox
14 35 0.004255595 ubox
15 22 0.007650823 ubox
15 34 0.004252705 ubox
15 46 0.003798679 ubox
16 21 0.007799526 ubox
16 29 0.004373357 ubox
16 45 0.003857199 ubox
17 28 0.004377004 ubox
18 27 0.004375397 ubox
18 35 0.008659029 ubox
19 34 0.008668519 ubox
19 35 0.004483724 ubox
19 43 0.005997533 ubox
20 28 0.005649818 ubox
20 33 0.006819660 ubox
20 34 0.004477957 ubox
20 42 0.006059967 ubox
21 27 0.006446015 ubox
21 33 0.003612878 ubox
21 41 0.006105154 ubox
21 46 0.205678914 ubox
22 26 0.006402975 ubox
22 29 0.004164558 ubox
22 40 0.006108539 ubox
22 44 0.014546007 ubox
22 45 0.210854664 ubox
23 28 0.003212835 ubox
23 35 0.004613134 ubox
23 43 0.016379301 ubox
24 34 0.004696806 ubox
24 35 0.017844525 ubox
24 42 0.015715568 ubox
24 43 0.828878815 ubox
25 33 0.004475917 ubox
25 34 0.017866012 ubox
25 35 0.004473230 ubox
25 41 0.013503670 ubox
25 42 0.832023227 ubox
25 43 0.029163535 ubox
26 33 0.013613804 ubox
26 34 0.004452112 ubox
26 41 0.833533315 ubox
26 42 0.003362263 ubox
26 46 0.517673239 ubox
27 40 0.833492339 ubox
27 45 0.524571543 ubox
28 36 0.352495619 ubox
28 39 0.750164252 ubox
28 44 0.524307240 ubox
29 35 0.501571065 ubox
29 42 0.004018720 ubox
29 43 0.524636021 ubox
30 34 0.493637024 ubox
30 41 0.036076749 ubox
30 42 0.522640704 ubox
31 41 0.521286659 ubox
31 42 0.003385494 ubox
31 43 0.013034227 ubox
32 42 0.012477374 ubox
33 45 0.005538066 ubox
34 44 0.007913735 ubox
34 45 0.106398804 ubox
35 44 0.107646651 ubox
40 46 0.029734726 ubox
41 45 0.029772797 ubox
2 23 0.9500000 lbox
3 22 0.9500000 lbox
4 21 0.9500000 lbox
5 20 0.9500000 lbox
6 19 0.9500000 lbox
8 15 0.9500000 lbox
9 14 0.9500000 lbox
24 43 0.9500000 lbox
25 42 0.9500000 lbox
26 41 0.9500000 lbox
27 40 0.9500000 lbox
28 39 0.9500000 lbox
showpage
end
%%EOF
