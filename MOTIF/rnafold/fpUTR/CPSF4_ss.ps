%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCAUCCCUCGGGCGGCGGCGGCGGCGGCGGCGAGGCGAAGCGAAGGAGGAGUGUGUGCGGCGGGGCCGGCGGCGGGUAAAGGCGAGAAGGCUGCAGGAGACCGAGGGGGAGCCGGGCCGGUGGGGCCGCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-7.71590376 351.35696411]
[-13.15247440 365.33706665]
[-18.58904457 379.31719971]
[-24.02561569 393.29730225]
[-29.46218681 407.27743530]
[-22.86845398 421.64053345]
[-28.44047737 436.42999268]
[-42.87247467 442.87149048]
[-57.60219574 437.14340210]
[-63.89076233 422.64413452]
[-58.00727463 407.97576904]
[-43.44230270 401.84085083]
[-38.00573349 387.86074829]
[-32.56916428 373.88061523]
[-27.13259315 359.90051270]
[-21.69602203 345.92037964]
[-26.61241150 338.36944580]
[-27.47194099 329.26113892]
[-23.95009232 320.66772461]
[-16.73393059 314.60421753]
[-7.39197826 312.55633545]
[-1.05270433 298.96170044]
[5.28656960 285.36709595]
[11.62584305 271.77249146]
[17.96511650 258.17785645]
[24.30439186 244.58325195]
[30.64366531 230.98863220]
[36.98294067 217.39401245]
[43.32221222 203.79939270]
[49.66148758 190.20477295]
[56.00075912 176.61015320]
[62.34003448 163.01554871]
[68.67930603 149.42092896]
[75.01858521 135.82630920]
[81.35785675 122.23169708]
[75.44822693 115.45923615]
[71.89495850 107.20307922]
[71.03908539 98.25559998]
[72.96273804 89.47554016]
[60.86606979 80.60589600]
[48.76940155 71.73625183]
[31.57057571 74.72829437]
[17.77772522 64.58606720]
[15.59452343 47.94505310]
[3.30724239 39.34140778]
[-10.92979813 45.28364944]
[-26.11536407 42.56295776]
[-37.40379333 32.04749680]
[-41.19299316 17.09271431]
[-36.27384186 2.47062588]
[-24.21602058 -7.15291405]
[-8.86713982 -8.70706844]
[4.87503004 -1.69591284]
[12.62541294 11.64331913]
[11.91088867 27.05412674]
[24.19816971 35.65777206]
[36.49474716 31.66322517]
[49.02674103 35.56105804]
[57.12567520 46.13504791]
[57.63904572 59.63958359]
[69.73571777 68.50922394]
[81.83238220 77.37887573]
[100.63292694 70.99349976]
[119.13704681 78.19286346]
[131.60908508 69.85930634]
[138.78489685 55.75901413]
[153.66584778 55.12145233]
[166.13789368 46.78789902]
[173.31370544 32.68760300]
[188.19465637 32.05003738]
[200.66670227 23.71648598]
[213.13874817 15.38293171]
[225.61079407 7.04937840]
[238.08283997 -1.28417516]
[240.55992126 -22.88624191]
[257.84875488 -35.60745621]
[278.66156006 -31.64954185]
[290.15222168 -41.29135513]
[301.64288330 -50.93317032]
[296.72061157 -68.11164856]
[299.74282837 -85.67074585]
[310.06414795 -100.12959290]
[325.59680176 -108.64203644]
[343.23287964 -109.55684662]
[359.46612549 -102.73783875]
[370.30157471 -113.11053467]
[381.13705444 -123.48323059]
[381.23120117 -139.28724670]
[392.53146362 -150.33619690]
[408.33358765 -150.07496643]
[419.26245117 -138.65852356]
[418.83416748 -122.86003113]
[407.30279541 -112.05247498]
[391.50973511 -112.64777374]
[380.67428589 -102.27507782]
[369.83880615 -91.90238190]
[374.89303589 -80.62847900]
[376.21798706 -68.32001495]
[373.66882324 -56.18064117]
[367.48028564 -45.40218735]
[358.24523926 -37.04766464]
[346.85778809 -31.94642448]
[334.42681885 -30.61185455]
[322.16793823 -33.18973541]
[311.28469849 -39.44250488]
[299.79403687 -29.80068970]
[288.30337524 -20.15887451]
[290.53771973 -11.62897778]
[289.83456421 -2.79552531]
[286.24365234 5.35347652]
[280.13931274 11.89708042]
[272.18173218 16.08545685]
[263.24545288 17.42576027]
[254.32334900 15.73995495]
[246.41639709 11.18786907]
[233.94435120 19.52142334]
[221.47230530 27.85497665]
[209.00025940 36.18852997]
[196.52821350 44.52208328]
[190.24449158 58.02630615]
[174.47145081 59.25994110]
[161.99940491 67.59349823]
[155.71568298 81.09771729]
[139.94264221 82.33135223]
[127.47059631 90.66490936]
[128.48727417 105.50025940]
[122.02080536 118.89078522]
[109.76982880 127.31900787]
[94.95247650 128.57096863]
[88.61319733 142.16558838]
[82.27392578 155.76020813]
[75.93465424 169.35481262]
[69.59537506 182.94943237]
[63.25610352 196.54405212]
[56.91682816 210.13867188]
[50.57755661 223.73329163]
[44.23828125 237.32789612]
[37.89900970 250.92251587]
[31.55973434 264.51712036]
[25.22046089 278.11175537]
[18.88118553 291.70635986]
[12.54191208 305.30099487]
[6.20263863 318.89559937]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[21 143]
[22 142]
[23 141]
[24 140]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[30 134]
[31 133]
[32 132]
[33 131]
[34 130]
[35 129]
[39 62]
[40 61]
[41 60]
[44 56]
[45 55]
[64 125]
[65 124]
[67 122]
[68 121]
[70 119]
[71 118]
[72 117]
[73 116]
[74 115]
[77 107]
[78 106]
[79 105]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
