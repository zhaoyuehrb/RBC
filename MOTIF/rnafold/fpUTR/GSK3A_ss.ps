%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAGCCAGAGCGGCGCGGCCUGGAAGAGGCCAGGGCCCGGGGGAGGCGGCGGCAGCGGCGGCGGCUGGGGCAGCCCGGGCAGCCCGAGCCCCGCAGCCUGGGCCUGUGCUCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.62291718 290.64367676]
[75.07202148 285.51779175]
[65.62035370 273.32476807]
[64.28391266 257.95538330]
[71.48914337 244.31398010]
[84.93688965 236.75344849]
[85.72193146 221.77400208]
[86.50696564 206.79457092]
[83.68003845 199.86500549]
[87.51369476 191.43482971]
[88.69058228 176.48107910]
[89.86746979 161.52731323]
[91.04435730 146.57354736]
[92.22124481 131.61979675]
[86.58244324 126.67469788]
[76.69207001 137.95213318]
[65.41480255 128.06156921]
[75.30484772 116.78451538]
[69.66604614 111.83941650]
[54.99383545 114.95809174]
[40.32162094 118.07676697]
[25.64940643 121.19544220]
[10.97719288 124.31411743]
[1.06878495 136.93168640]
[-14.97425079 136.90782166]
[-24.84506989 124.26082611]
[-20.97162437 108.69239807]
[-6.32529068 102.14530182]
[7.85851765 109.64190674]
[22.53073120 106.52323151]
[37.20294571 103.40455627]
[51.87516022 100.28588104]
[66.54737091 97.16720581]
[83.85154724 78.67457581]
[103.76496887 80.43186188]
[111.93455505 67.85180664]
[120.10414124 55.27174759]
[128.27372742 42.69168854]
[136.44331360 30.11162949]
[144.61289978 17.53157043]
[152.78248596 4.95151234]
[160.95207214 -7.62854624]
[169.12165833 -20.20860481]
[164.38958740 -31.27455902]
[165.63293457 -43.12411880]
[172.42004395 -52.76944351]
[182.93644714 -57.83607864]
[194.46852112 -57.14703751]
[203.28529358 -69.28229523]
[212.10208130 -81.41754913]
[220.91885376 -93.55280304]
[223.47866821 -102.45291138]
[230.12867737 -105.88625336]
[239.26010132 -117.78655243]
[248.39152527 -129.68685913]
[247.49584961 -142.63459778]
[255.44862366 -152.37698364]
[267.51574707 -153.98451233]
[276.95553589 -165.64170837]
[286.39535522 -177.29888916]
[287.84707642 -183.95454407]
[291.89212036 -188.16600037]
[296.64709473 -189.30213928]
[306.68405151 -200.44931030]
[310.16824341 -215.88209534]
[324.43435669 -220.16304016]
[334.47134399 -231.31021118]
[344.50830078 -242.45738220]
[347.99246216 -257.89016724]
[362.25860596 -262.17111206]
[372.29556274 -273.31829834]
[382.33251953 -284.46545410]
[388.43768311 -300.28201294]
[405.32620239 -298.79394531]
[408.57147217 -282.15347290]
[393.47970581 -274.42849731]
[383.44274902 -263.28134155]
[373.40579224 -252.13415527]
[370.63952637 -237.49868774]
[355.65545654 -232.42042542]
[345.61849976 -221.27325439]
[335.58154297 -210.12608337]
[332.81527710 -195.49061584]
[317.83120728 -190.41235352]
[307.79425049 -179.26518250]
[298.05255127 -167.85908508]
[288.61273193 -156.20190430]
[279.17291260 -144.54470825]
[277.42874146 -127.13569641]
[260.29180908 -120.55543518]
[251.16040039 -108.65512848]
[242.02897644 -96.75482941]
[233.05410767 -84.73602295]
[224.23733521 -72.60076904]
[215.42054749 -60.46551514]
[206.60377502 -48.33025742]
[210.61235046 -30.56103325]
[200.28721619 -15.17216206]
[181.70172119 -12.03901958]
[173.53213501 0.54103929]
[165.36254883 13.12109756]
[157.19296265 25.70115662]
[149.02337646 38.28121567]
[140.85379028 50.86127472]
[132.68420410 63.44133377]
[124.51461792 76.02139282]
[116.34503174 88.60144806]
[124.90811157 109.75358582]
[107.17500305 132.79667664]
[105.99811554 147.75044250]
[104.82122803 162.70419312]
[103.64434052 177.65795898]
[102.46746063 192.61172485]
[101.48641205 207.57960510]
[100.70137024 222.55905151]
[99.91632843 237.53849792]
[112.50012207 246.46327209]
[118.23996735 260.78311157]
[115.30430603 275.92858887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 116]
[7 115]
[8 114]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[48 96]
[49 95]
[50 94]
[51 93]
[53 92]
[54 91]
[55 90]
[58 88]
[59 87]
[60 86]
[63 85]
[64 84]
[66 82]
[67 81]
[68 80]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
