%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGUUCAGGUUCCGGGGCGCCGCAGAGCUCCCGGCCUCUGGACCGCGCGCGGCGCUCUGGGGAAUCCGGCGCCACGCGCCGUGCGGUGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[132.51533508 138.45135498]
[117.51541901 138.40052795]
[106.03025818 128.75241089]
[97.37142944 141.00085449]
[88.71260071 153.24931335]
[93.82575226 167.89974976]
[89.31884766 182.74789429]
[76.92487335 192.08433533]
[61.40957260 192.31901550]
[48.73889160 183.36170959]
[43.78496933 168.65666199]
[48.45268631 153.85827637]
[60.94720840 144.65684509]
[76.46414185 144.59048462]
[85.12297058 132.34202576]
[93.78180695 120.09357452]
[87.43030548 106.50466919]
[72.47944641 105.29145813]
[57.52858734 104.07825470]
[43.14783096 110.67404175]
[31.08805275 101.93270111]
[16.13719559 100.71949768]
[4.25844765 111.14402771]
[-11.50669765 110.03238678]
[-21.80505943 98.04409027]
[-20.52680016 82.29158020]
[-8.43029213 72.12054443]
[7.30782413 73.56526947]
[17.35040283 85.76863861]
[32.30125809 86.98184967]
[45.61262894 80.29927826]
[58.74179459 89.12739563]
[73.69264984 90.34060669]
[88.64350891 91.55381012]
[103.20315552 87.94593811]
[115.85765076 79.89213562]
[128.51214600 71.83833313]
[141.16664124 63.78452682]
[148.65460205 49.84749603]
[163.54606628 49.54140854]
[176.20056152 41.48760605]
[188.85505676 33.43380356]
[196.34303284 19.49677086]
[211.23449707 19.19068336]
[223.88899231 11.13688087]
[231.37695312 -2.80015230]
[246.26841736 -3.10623908]
[258.92291260 -11.16004181]
[271.57739258 -19.21384430]
[284.23190308 -27.26764679]
[296.88638306 -35.32144928]
[304.37435913 -49.25848389]
[319.26583862 -49.56457138]
[331.92031860 -57.61837387]
[344.57482910 -65.67217255]
[357.22930908 -73.72597504]
[369.88381958 -81.77977753]
[382.53829956 -89.83358002]
[386.08630371 -95.77925873]
[391.35839844 -98.48633575]
[396.28298950 -97.96817017]
[409.43225098 -105.18595886]
[415.28057861 -120.12506104]
[430.64877319 -124.72920227]
[443.74768066 -115.46648407]
[444.52893066 -99.44245911]
[432.39324951 -88.94940186]
[416.65005493 -92.03668213]
[403.50076294 -84.81888580]
[390.59210205 -77.17908478]
[377.93762207 -69.12528229]
[365.28311157 -61.07147980]
[352.62863159 -53.01767731]
[339.97412109 -44.96387482]
[327.31964111 -36.91007233]
[320.73678589 -23.54910278]
[304.94018555 -22.66695404]
[292.28570557 -14.61315155]
[279.63119507 -6.55934858]
[266.97671509 1.49445403]
[254.32221985 9.54825687]
[247.73937988 22.90922737]
[231.94279480 23.79137611]
[219.28829956 31.84517860]
[212.70545959 45.20615005]
[196.90885925 46.08829880]
[184.25436401 54.14210129]
[171.59986877 62.19590378]
[165.01704407 75.55687714]
[149.22044373 76.43902588]
[136.56594849 84.49282837]
[123.91145325 92.54663086]
[111.25695801 100.60043335]
[125.44005585 95.71784973]
[139.45854187 101.05470276]
[146.80386353 114.13317108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 16]
[4 15]
[5 14]
[17 34]
[18 33]
[19 32]
[21 30]
[22 29]
[35 93]
[36 92]
[37 91]
[38 90]
[40 88]
[41 87]
[42 86]
[44 84]
[45 83]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[53 75]
[54 74]
[55 73]
[56 72]
[57 71]
[58 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
