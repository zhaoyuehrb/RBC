%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAGGGCCGGUGCUGCCUGCCGAAGCCGGCGGCUGAGAGGCAGCGAACUCAUCUUUGCCAGUACAGGAGCUUGUGCCGUGGCCCACAGCCCACAGCCCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[90.04647827 359.79190063]
[77.73175049 350.83267212]
[70.13135529 337.63595581]
[68.56209564 322.48809814]
[73.29586792 308.01358032]
[83.51251221 296.72021484]
[97.44193268 290.56463623]
[97.44193268 275.56463623]
[97.44193268 260.56463623]
[97.44193268 245.56463623]
[86.49097443 229.74031067]
[96.42604065 212.31944275]
[95.55387115 197.34481812]
[91.96760559 190.74848938]
[94.88054657 181.92320251]
[94.44427490 166.92955017]
[94.00800323 151.93589783]
[93.57173157 136.94223022]
[73.48536682 126.51463318]
[63.05776215 106.42826843]
[48.06410980 105.99199677]
[33.07045364 105.55572510]
[18.07680130 105.11945343]
[3.08314705 104.68318176]
[-11.91050720 104.24691010]
[-26.08040047 112.50197601]
[-40.17813873 104.12427521]
[-39.70117188 87.73206329]
[-25.14016724 80.18824768]
[-11.47423649 89.25325775]
[3.51941776 89.68952942]
[18.51307106 90.12580109]
[33.50672531 90.56207275]
[48.50038147 90.99833679]
[63.49403381 91.43460846]
[66.64303589 82.87210846]
[71.76664734 75.32351685]
[78.56154633 69.23566437]
[72.62035370 55.46242523]
[66.47946930 41.77704620]
[60.14019394 28.18243027]
[53.80092239 14.58781433]
[38.54381561 11.75931931]
[27.88755417 0.47997075]
[25.92968369 -14.91309166]
[33.42304993 -28.50092125]
[47.48629379 -35.05871964]
[62.71181870 -32.06488037]
[73.24509430 -20.67059708]
[75.03586578 -5.25720167]
[67.39553833 8.24853992]
[73.73480988 21.84315681]
[80.07408905 35.43777466]
[85.84237671 40.24399567]
[86.39359283 49.52122879]
[92.33479309 63.29446793]
[102.41036224 62.58020020]
[112.31102753 64.58122253]
[121.31836700 69.15232849]
[128.77877808 75.96183777]
[141.98179626 68.84283447]
[155.18482971 61.72383118]
[168.38784790 54.60482407]
[181.37821960 47.10482407]
[194.14497375 39.23017502]
[206.91172791 31.35552788]
[219.67848206 23.48087883]
[232.44522095 15.60622978]
[245.21197510 7.73158121]
[252.51451111 -6.95191145]
[268.89663696 -7.69927597]
[277.50579834 6.25831223]
[269.48565674 20.56248283]
[253.08662415 20.49833107]
[240.31987000 28.37298012]
[227.55313110 36.24762726]
[214.78637695 44.12227631]
[202.01962280 51.99692535]
[189.25286865 59.87157440]
[187.27801514 64.37590790]
[182.36840820 67.61187744]
[175.50685120 67.80784607]
[162.30383301 74.92684937]
[149.10081482 82.04586029]
[135.89778137 89.16486359]
[137.24868774 104.31128693]
[132.47366333 118.74867249]
[122.35802460 130.10266113]
[108.56539154 136.50596619]
[109.00166321 151.49961853]
[109.43792725 166.49327087]
[109.87419891 181.48692322]
[110.52849579 196.47265625]
[111.40066528 211.44728088]
[120.07324219 218.33049011]
[123.37312317 228.66714478]
[120.41607666 238.87660217]
[112.44193268 245.56463623]
[112.44193268 260.56463623]
[112.44193268 275.56463623]
[112.44193268 290.56463623]
[126.37134552 296.72021484]
[136.58798218 308.01358032]
[141.32176208 322.48809814]
[139.75250244 337.63595581]
[132.15211487 350.83267212]
[119.83737946 359.79190063]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 101]
[8 100]
[9 99]
[10 98]
[12 94]
[13 93]
[15 92]
[16 91]
[17 90]
[18 89]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[38 56]
[39 55]
[40 53]
[41 52]
[42 51]
[60 85]
[61 84]
[62 83]
[63 82]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
