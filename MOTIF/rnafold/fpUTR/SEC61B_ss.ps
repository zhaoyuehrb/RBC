%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGCUGCCGGUCUUUCGGGGGCUCCGUAACUUUCUAUCCGUCCGCGUCAGCGCCUUGCCACCCUCAUCUCCAAU\
) } def
/len { sequence length } bind def

/coor [
[20.30788994 185.14268494]
[10.52615356 174.79664612]
[2.07811117 163.33570862]
[-4.91031170 150.93067932]
[-18.79759979 156.60018921]
[-32.68488693 162.26968384]
[-46.57217407 167.93917847]
[-56.42419815 180.31852722]
[-71.13179016 177.96568298]
[-85.01908112 183.63517761]
[-98.90636444 189.30467224]
[-112.79365540 194.97418213]
[-122.40998840 208.25793457]
[-138.69218445 206.30290222]
[-144.89051819 191.12025452]
[-134.62867737 178.32859802]
[-118.46315765 181.08688354]
[-104.57586670 175.41738892]
[-90.68858337 169.74789429]
[-76.80129242 164.07838440]
[-67.94258118 152.10456848]
[-52.24167633 154.05189514]
[-38.35438919 148.38240051]
[-24.46710014 142.71289062]
[-10.57981205 137.04339600]
[-14.58902645 121.66709137]
[-16.47074127 105.88851166]
[-16.19001770 90.00060272]
[-13.75206852 74.29834747]
[-9.20215797 59.07327652]
[-2.62476063 44.60806274]
[5.85800457 31.17127991]
[16.08864403 19.01239395]
[27.87721062 8.35715389]
[41.00483704 -0.59661317]
[55.22778702 -7.68266726]
[70.28199005 -12.76944637]
[85.88795471 -15.76250744]
[101.75592804 -16.60628128]
[117.59129333 -15.28509998]
[133.10006714 -11.82349491]
[147.99427795 -6.28573465]
[161.99742126 1.22536457]
[174.84948730 10.57034874]
[186.31187439 21.57571602]
[198.03935242 12.22336960]
[209.76681519 2.87102246]
[215.25115967 -12.58388233]
[231.42460632 -15.29527283]
[241.64930725 -2.47390318]
[235.40696716 12.69070053]
[219.11917114 14.59849453]
[207.39169312 23.95084190]
[195.66421509 33.30318832]
[203.07905579 45.45813751]
[208.95741272 58.42608643]
[213.21163940 72.01373291]
[215.77835083 86.01853943]
[216.61927795 100.23175812]
[215.72186279 114.44152069]
[213.09951782 128.43601990]
[208.79132080 142.00663757]
[202.86146545 154.95112610]
[195.39837646 167.07650757]
[186.51327515 178.20205688]
[176.33862305 188.16191101]
[165.02606201 196.80764771]
[152.74421692 204.01036072]
[139.67617798 209.66270447]
[126.01673126 213.68041992]
[111.96947479 216.00361633]
[97.74380493 216.59767151]
[83.55175781 215.45373535]
[69.60489655 212.58883667]
[56.11109924 208.04570007]
[43.27151108 201.89202881]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 22]
[9 20]
[10 19]
[11 18]
[12 17]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
