%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGAGGGGGCAUCAUGAAGCGGGCUGGCGGCGCUGCCGCUCCCGGGCGGCCGCGGGCGGGAGGUGCUUCCCAAGGACCGUAGAUGCCUCUCUAGAGC\
) } def
/len { sequence length } bind def

/coor [
[74.98596954 427.80722046]
[63.91181564 417.39419556]
[57.67008209 403.53384399]
[57.21259689 388.33978271]
[62.60911942 374.12902832]
[73.03672028 363.06857300]
[86.90526581 356.84509277]
[86.43410492 341.85247803]
[85.96294403 326.85989380]
[85.49178314 311.86727905]
[85.02062225 296.87469482]
[84.54946136 281.88208008]
[84.07830048 266.88949585]
[83.60713959 251.89689636]
[83.13597107 236.90429688]
[76.04032135 232.64743042]
[71.23917389 225.79139709]
[69.62876892 217.48066711]
[71.56459045 209.14173889]
[76.78655243 202.23826599]
[84.45102692 198.01420593]
[85.86264801 183.08076477]
[87.27427673 168.14733887]
[88.68589783 153.21391296]
[80.49257660 137.78279114]
[91.05077362 122.79904938]
[91.99263763 107.82865143]
[92.69923401 92.84529877]
[93.17039490 77.85270691]
[84.06914520 61.94184113]
[93.67830658 47.35026932]
[93.67830658 32.35026932]
[93.67830658 17.35026932]
[93.67830658 2.35027003]
[93.67830658 -12.64972973]
[93.67830658 -27.64973068]
[84.08177185 -43.26686478]
[93.22785950 -58.15306473]
[92.75669861 -73.14566803]
[92.28553772 -88.13825989]
[91.81437683 -103.13085938]
[91.34321594 -118.12345886]
[90.87205505 -133.11605835]
[82.70509338 -146.66638184]
[90.03880310 -159.63041687]
[89.56764221 -174.62301636]
[89.09648132 -189.61561584]
[79.99969482 -203.26040649]
[87.50960541 -217.83892822]
[103.90066528 -218.35403442]
[112.31114960 -204.27583313]
[104.08908081 -190.08677673]
[104.56024170 -175.09417725]
[105.03140259 -160.10157776]
[113.16465759 -147.62361145]
[105.86464691 -133.58721924]
[106.33580780 -118.59461975]
[106.80697632 -103.60202026]
[107.27813721 -88.60942078]
[107.74929810 -73.61682892]
[108.22045898 -58.62422943]
[116.87853241 -50.01566315]
[117.28976440 -37.40970993]
[108.67830658 -27.64973068]
[108.67830658 -12.64972973]
[108.67830658 2.35027003]
[108.67830658 17.35026932]
[108.67830658 32.35026932]
[108.67830658 47.35026932]
[117.06170654 56.22654343]
[117.07676697 68.83919525]
[108.16299438 78.32386780]
[107.69182587 93.31645966]
[110.64875793 100.98462677]
[106.96303558 108.77050781]
[106.02117920 123.74090576]
[114.00280762 134.02235413]
[112.80085754 146.57760620]
[103.61933136 154.62553406]
[102.20770264 169.55895996]
[100.79608154 184.49240112]
[99.38445282 199.42582703]
[110.50423431 218.76522827]
[98.12857056 236.43313599]
[98.59973145 251.42572021]
[99.07089233 266.41833496]
[99.54206085 281.41091919]
[100.01322174 296.40353394]
[100.48438263 311.39611816]
[100.95554352 326.38873291]
[101.42670441 341.38131714]
[101.89786530 356.37390137]
[116.12982178 361.71432495]
[127.23133850 372.09817505]
[133.50950623 385.94207764]
[134.00697327 401.13485718]
[128.64785767 415.35977173]
[118.24938965 426.44763184]
[104.39726257 432.70758057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[21 82]
[22 81]
[23 80]
[24 79]
[26 76]
[27 75]
[28 73]
[29 72]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
