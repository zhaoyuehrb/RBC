%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACAACUGCAGUGGGGCUGCUUGUGGUUUCCAAACGUCGGCAGAGGCUGGAGACGGCUCUCUAGUGCUGGGUGUGGAGUGAGGCACCACCCUUGCCCUGAAGCCUGGGGCACUCAGUCACC\
) } def
/len { sequence length } bind def

/coor [
[90.24635315 266.63250732]
[75.59185791 262.21612549]
[64.67646790 251.48704529]
[60.00846481 236.91075134]
[62.66051483 221.83676147]
[72.02320099 209.72895813]
[85.94503784 203.36964417]
[86.70478058 188.38890076]
[87.46451569 173.40814209]
[88.22425079 158.42739868]
[85.38847351 151.50903320]
[89.19774628 143.07821655]
[90.33674622 128.12152100]
[91.47574615 113.16483307]
[89.01668549 98.36776733]
[83.10134888 84.58340454]
[77.18601227 70.79903412]
[60.86456299 64.65769196]
[54.11438370 48.94378662]
[60.63510132 33.49762344]
[54.37246704 19.86753082]
[48.10983276 6.23743868]
[41.84719849 -7.39265299]
[35.58456421 -21.02274513]
[24.77508163 -22.14611244]
[15.50911903 -27.66755104]
[9.46845627 -36.50528336]
[7.71584129 -46.98323441]
[10.50853348 -57.14872742]
[17.26312447 -65.13637543]
[12.05354500 -79.20265198]
[6.84396601 -93.26893616]
[1.63438725 -107.33522034]
[-3.57519150 -121.40149689]
[-15.62373352 -131.65544128]
[-12.78831196 -146.27766418]
[-17.99789047 -160.34394836]
[-23.97947693 -167.40155029]
[-23.15632820 -174.83309937]
[-28.00789642 -189.02684021]
[-32.85946655 -203.22058105]
[-37.71103668 -217.41432190]
[-42.56260681 -231.60806274]
[-47.41417694 -245.80180359]
[-52.80152130 -259.80096436]
[-58.71685791 -273.58532715]
[-64.63219452 -287.36968994]
[-70.72167206 -301.07803345]
[-76.98430634 -314.70812988]
[-83.24694061 -328.33822632]
[-89.50957489 -341.96829224]
[-103.19535828 -351.00332642]
[-101.94374847 -367.35461426]
[-87.04228210 -374.20141602]
[-73.82032776 -364.50030518]
[-75.87948608 -348.23095703]
[-69.61685181 -334.60086060]
[-63.35421371 -320.97076416]
[-57.09157944 -307.34066772]
[-51.37487793 -302.52145386]
[-50.84782791 -293.28503418]
[-44.93249130 -279.50067139]
[-39.01715469 -265.71630859]
[-35.77662277 -264.07070923]
[-33.21414185 -260.71255493]
[-32.15426254 -255.99870300]
[-33.22043610 -250.65338135]
[-28.36886597 -236.45964050]
[-23.51729584 -222.26589966]
[-18.66572571 -208.07215881]
[-13.81415653 -193.87841797]
[-8.96258736 -179.68467712]
[-3.93160915 -165.55352783]
[1.27796972 -151.48724365]
[12.95388794 -142.23942566]
[10.49109077 -126.61107635]
[15.70066929 -112.54479980]
[20.91024780 -98.47851562]
[26.11982727 -84.41223145]
[31.32940483 -70.34594727]
[49.53205109 -63.68668365]
[57.25246429 -45.58103180]
[49.21465683 -27.28537941]
[55.47729111 -13.65528774]
[61.73992538 -0.02519622]
[68.00256348 13.60489559]
[74.26519775 27.23498726]
[86.91686249 30.00501251]
[95.76871490 39.72505569]
[97.39408875 52.96762466]
[90.97038269 64.88369751]
[96.88571930 78.66806030]
[102.80105591 92.45243073]
[109.50592804 88.68524933]
[118.56917572 89.15285492]
[127.74920654 94.79818726]
[140.47886658 102.73265076]
[153.20852661 110.66710663]
[165.93820190 118.60157013]
[178.66786194 126.53602600]
[191.39752197 134.47048950]
[207.28746033 132.25923157]
[218.82382202 143.40785217]
[217.15692139 159.36407471]
[203.56546021 167.88764954]
[188.47561646 162.44003296]
[183.46305847 147.20014954]
[170.73339844 139.26568604]
[158.00373840 131.33123779]
[145.27407837 123.39677429]
[132.54440308 115.46231079]
[119.81474304 107.52785492]
[106.43243408 114.30382538]
[105.29344177 129.26051331]
[104.15444183 144.21720886]
[103.20500183 159.18713379]
[102.44525909 174.16787720]
[101.68552399 189.14863586]
[100.92578888 204.12937927]
[114.13283539 211.86451721]
[122.22255707 224.85740662]
[123.33599091 240.12236023]
[117.21727753 254.15161133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 119]
[8 118]
[9 117]
[10 116]
[12 115]
[13 114]
[14 113]
[15 93]
[16 92]
[17 91]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[36 74]
[37 73]
[39 72]
[40 71]
[41 70]
[42 69]
[43 68]
[44 67]
[45 63]
[46 62]
[47 61]
[48 59]
[49 58]
[50 57]
[51 56]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
