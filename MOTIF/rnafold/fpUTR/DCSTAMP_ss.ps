%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAUCAAGACCUACAGCCCUUGGGAAGUGCAUUUCUGCAUUCGAAGAAGAAUCUGAGAGAAACCUGACGCAGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[49.97925949 224.47091675]
[49.39951706 239.58775330]
[44.17488861 253.78488159]
[34.81722260 265.67141724]
[22.24328804 274.08279419]
[7.68495607 278.19497681]
[-7.43149996 277.60510254]
[-21.62512207 272.37097168]
[-33.50536728 263.00534058]
[-41.90832520 250.42578125]
[-46.01076126 235.86468506]
[-45.41076279 220.74864197]
[-40.16711044 206.55851746]
[-30.79352379 194.68455505]
[-18.20833206 186.29002380]
[-3.64450073 182.19735718]
[11.47115135 182.80747986]
[25.65774727 188.06063843]
[34.94415665 176.28088379]
[43.99749374 164.32107544]
[52.81427383 152.18582153]
[61.63105392 140.05056763]
[70.44783020 127.91530609]
[79.26461029 115.78005219]
[73.94871521 100.54498291]
[78.62281036 85.10092926]
[91.49450684 75.37027740]
[107.62783813 75.08448792]
[115.96138763 62.61244583]
[110.20411682 49.92385101]
[111.52770233 36.16283035]
[119.47153473 24.98214722]
[131.83229065 19.29510689]
[145.27403259 20.51679993]
[154.09080505 8.38154602]
[162.90759277 -3.75370932]
[171.72436523 -15.88896370]
[180.54115295 -28.02421951]
[177.43823242 -45.10940552]
[187.34898376 -58.95911789]
[203.86058044 -61.43589401]
[212.19413757 -73.90794373]
[220.52769470 -86.37998199]
[228.86125183 -98.85202789]
[225.53254700 -114.30179596]
[234.17352295 -127.53468323]
[249.65762329 -130.69984436]
[262.79840088 -121.91944885]
[265.79968262 -106.40275574]
[256.88085938 -93.35553741]
[241.33328247 -90.51847839]
[232.99974060 -78.04643250]
[224.66618347 -65.57438660]
[216.33262634 -53.10234070]
[220.60551453 -40.78320312]
[216.86700439 -28.08682442]
[206.29100037 -19.80701828]
[192.67640686 -19.20743942]
[183.85961914 -7.07218552]
[175.04284668 5.06306982]
[166.22605896 17.19832420]
[157.40928650 29.33358002]
[162.99108887 44.64012909]
[158.39569092 60.44254303]
[145.21522522 70.56927490]
[128.43344116 70.94599915]
[120.09988403 83.41804504]
[125.67961121 95.58138275]
[124.48623657 108.91014099]
[116.83452606 119.88882446]
[104.74263763 125.62174225]
[91.39986420 124.59683228]
[82.58308411 136.73208618]
[73.76630402 148.86734009]
[64.94953156 161.00259399]
[56.13275146 173.13784790]
[53.51745987 182.17524719]
[46.72391129 185.56729126]
[37.43750000 197.34704590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 79]
[19 78]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[28 67]
[29 66]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[41 54]
[42 53]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
