%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGACUGCGCCUGCGCAGAGCCGAGGACGCGUCCGGCGCCGAGAUUCAAACUAGUGGCGGGAGGCUGUGAGCUGAGCGGUGGGGUCUGCGUACGCCUGGAGUCCUUCCCCGCUGUGCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[240.75926208 529.74621582]
[240.29525757 513.05633545]
[249.93200684 499.21963501]
[244.80169678 485.12423706]
[239.67140198 471.02883911]
[234.54109192 456.93344116]
[229.41079712 442.83807373]
[224.28050232 428.74267578]
[219.15019226 414.64727783]
[202.17117310 408.02188110]
[195.20469666 390.83807373]
[203.03930664 373.68386841]
[197.21278381 359.86172485]
[185.13932800 351.13928223]
[186.90859985 335.41732788]
[181.08207703 321.59518433]
[175.25555420 307.77304077]
[169.42904663 293.95089722]
[163.60252380 280.12875366]
[157.77600098 266.30661011]
[151.94947815 252.48445129]
[146.12295532 238.66230774]
[134.04949951 229.93986511]
[135.81877136 214.21791077]
[129.99224854 200.39576721]
[117.77060699 199.39247131]
[107.09405518 193.21411133]
[100.05213928 182.99801636]
[98.05371857 170.67851257]
[101.54545593 158.62075806]
[109.91390228 149.16674805]
[104.78359985 135.07135010]
[99.65329742 120.97596741]
[81.70244598 110.26210785]
[81.92061615 89.35823059]
[72.56826782 77.63076019]
[63.21591949 65.90328979]
[53.86357117 54.17581558]
[39.21004105 48.21053314]
[37.32398224 33.43582535]
[27.97163582 21.70835304]
[18.61928749 9.98088074]
[5.84507179 7.73690319]
[-1.69730198 -2.31569505]
[-0.36648563 -14.40789795]
[-9.42355156 -26.36488533]
[-25.04966927 -26.96359634]
[-36.60034180 -37.50475311]
[-38.62169647 -53.01114273]
[-30.15930748 -66.16112518]
[-15.20885944 -70.74567413]
[-0.82949573 -64.60011292]
[6.18928766 -50.62618637]
[2.53343582 -35.42195129]
[11.59050179 -23.46496391]
[28.07849121 -17.59404564]
[30.34675980 0.62853372]
[39.69910812 12.35600567]
[49.05145264 24.08347893]
[63.03604507 29.20993233]
[65.59104156 44.82347107]
[74.94338989 56.55094147]
[84.29573822 68.27841187]
[93.64808655 80.00588226]
[97.13211823 79.21811676]
[100.69928741 79.03282928]
[106.52581024 65.21068573]
[112.35233307 51.38853836]
[118.17885590 37.56639481]
[118.75976562 20.62240410]
[135.20239258 16.49004936]
[143.72502136 31.14614296]
[132.00100708 43.39291763]
[126.17447662 57.21506119]
[120.34795380 71.03720093]
[114.52143097 84.85934448]
[120.31552124 94.76637268]
[120.02939606 106.23976898]
[113.74868011 115.84566498]
[118.87898254 129.94105530]
[124.00928497 144.03643799]
[141.50375366 148.43955994]
[152.82041931 162.28799438]
[153.63606262 179.99765015]
[143.81439209 194.56924438]
[149.64091492 208.39138794]
[162.13111877 218.10247803]
[159.94509888 232.83578491]
[165.77162170 246.65792847]
[171.59814453 260.48007202]
[177.42466736 274.30221558]
[183.25119019 288.12435913]
[189.07769775 301.94650269]
[194.90422058 315.76864624]
[200.73074341 329.59078979]
[213.22094727 339.30187988]
[211.03492737 354.03521729]
[216.86145020 367.85733032]
[228.66044617 370.14703369]
[237.76269531 377.81018066]
[241.94401550 388.82092285]
[240.25759888 400.35568237]
[233.24557495 409.51699829]
[238.37588501 423.61236572]
[243.50617981 437.70776367]
[248.63648987 451.80316162]
[253.76678467 465.89852905]
[258.89709473 479.99392700]
[264.02740479 494.08932495]
[277.58154297 496.91564941]
[287.86862183 506.01965332]
[292.25192261 518.92395020]
[289.67947388 532.19683838]
[280.93420410 542.36450195]
[285.71148682 556.58343506]
[290.48880005 570.80236816]
[295.26608276 585.02124023]
[307.91320801 595.46075439]
[304.92944336 611.58618164]
[289.38424683 616.80908203]
[277.26916504 605.75659180]
[281.04718018 589.79858398]
[276.26989746 575.57965088]
[271.49258423 561.36071777]
[266.71530151 547.14184570]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[6 106]
[7 105]
[8 104]
[9 103]
[12 98]
[13 97]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[24 86]
[25 85]
[31 81]
[32 80]
[33 79]
[35 64]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[45 55]
[46 54]
[66 76]
[67 75]
[68 74]
[69 73]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
