%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUGUAACGCCGGAGUGGGACGCUGCUUUGCGUCUGAAAGGUGCAAAUUGAAACUCGAAAGCCCGCAAAUUAACGGGGUGUCUCUCUCCUGAUGAAGAGGUAUUGCACUCUCAGUCUCGCCAUGUUGAAGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[133.00376892 344.05117798]
[127.05786133 330.27996826]
[123.55861664 315.69381714]
[122.60947418 300.72387695]
[124.23848724 285.81262207]
[128.39749146 271.40072632]
[134.96357727 257.91418457]
[143.74267578 245.75163269]
[154.47528076 235.27255249]
[166.84417725 226.78666687]
[180.48379517 220.54479980]
[194.99096680 216.73143005]
[209.93693542 215.45927429]
[224.87991333 216.76594543]
[239.37054443 220.61003113]
[229.44323730 209.36509705]
[219.51593018 198.12016296]
[209.58862305 186.87522888]
[195.36509705 182.45477295]
[192.03222656 166.98858643]
[182.10491943 155.74365234]
[172.17761230 144.49871826]
[162.25030518 133.25378418]
[152.32299805 122.00884247]
[142.39569092 110.76390839]
[132.46839905 99.51896667]
[125.96685791 119.70532990]
[108.33896637 131.64207458]
[87.01865387 130.17376709]
[71.07217407 115.82394409]
[56.49258423 112.29754639]
[41.91299438 108.77114868]
[27.33340073 105.24474335]
[12.75380898 101.71834564]
[-1.82578325 98.19194794]
[-16.40537453 94.66555023]
[-30.98496819 91.13915253]
[-45.56455994 87.61274719]
[-62.38121796 89.76595306]
[-69.10559082 74.20256042]
[-56.01191330 63.43260574]
[-42.03815842 73.03315735]
[-27.45856857 76.55955505]
[-12.87897587 80.08595276]
[1.70061624 83.61235809]
[16.28020859 87.13875580]
[30.85980034 90.66515350]
[45.43939209 94.19155121]
[60.01898575 97.71795654]
[74.59857941 101.24435425]
[83.05504608 88.85532379]
[74.45911407 76.56263733]
[65.86318207 64.26995850]
[57.26725388 51.97727966]
[43.23540115 42.46184921]
[48.49456024 26.34423256]
[65.43817902 26.93606377]
[69.55993652 43.38135147]
[78.15586090 55.67403030]
[86.75179291 67.96671295]
[95.34772491 80.25939178]
[102.63751984 78.49619293]
[106.87306976 64.10660553]
[117.21711731 74.96978760]
[124.50691223 73.20658875]
[126.53480530 58.34430313]
[128.56269836 43.48201370]
[130.59059143 28.61972427]
[119.29259491 17.98324203]
[116.43737030 2.73111820]
[123.12281036 -11.27189732]
[136.77824402 -18.64135933]
[152.15286255 -16.54355812]
[163.33480835 -5.78514194]
[166.02441406 9.49705887]
[159.18745422 23.42672729]
[145.45288086 30.64761925]
[143.42498779 45.50990677]
[141.39709473 60.37219620]
[139.36920166 75.23448944]
[143.71333313 89.59166718]
[153.64064026 100.83660126]
[163.56793213 112.08153534]
[173.49523926 123.32647705]
[183.42254639 134.57141113]
[193.34985352 145.81634521]
[203.27716064 157.06129456]
[218.21075439 162.28605652]
[220.83355713 176.94792175]
[230.76086426 188.19285583]
[240.68817139 199.43778992]
[250.61547852 210.68272400]
[256.61993408 212.19337463]
[260.90640259 215.97024536]
[275.82888794 217.49320984]
[290.75137329 219.01617432]
[302.93310547 209.30827332]
[318.04492188 211.06535339]
[327.22485352 222.73860168]
[342.14733887 224.26156616]
[357.06982422 225.78453064]
[371.99230957 227.30749512]
[382.23971558 215.65545654]
[397.38632202 212.28488159]
[411.60787964 218.49185181]
[419.43597412 231.88963318]
[417.86050415 247.32652283]
[407.48730469 258.86672974]
[392.30502319 262.07278442]
[378.15164185 255.71189880]
[370.46936035 242.22998047]
[355.54687500 240.70701599]
[340.62438965 239.18405151]
[325.70190430 237.66108704]
[314.35308838 247.23919678]
[299.19787598 245.90727234]
[289.22842407 233.93865967]
[274.30593872 232.41569519]
[259.38345337 230.89273071]
[270.95214844 240.44075012]
[280.71447754 251.82920837]
[288.38186646 264.72149658]
[293.72766113 278.73657227]
[296.59390259 293.46020508]
[296.89587402 308.45715332]
[294.62460327 323.28421021]
[289.84725952 337.50308228]
[282.70501709 350.69357300]
[273.40902710 362.46575928]
[262.23400879 372.47171021]
[249.51025391 380.41564941]
[235.61387634 386.06283569]
[220.95558167 389.24630737]
[205.96864319 389.87200928]
[191.09600830 387.92141724]
[176.77728271 383.45220947]
[163.43566895 376.59643555]
[151.46551514 367.55679321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 92]
[16 91]
[17 90]
[18 89]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[51 61]
[52 60]
[53 59]
[54 58]
[65 80]
[66 79]
[67 78]
[68 77]
[94 119]
[95 118]
[96 117]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
