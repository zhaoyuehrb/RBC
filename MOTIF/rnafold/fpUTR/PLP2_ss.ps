%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGCCCCGCCCGCGUCAGCUCUGCGCGGUGAUUCACUCCCUCCUUCGCCCCGGGGCCCCCUUCCCGGCCAGACGGCGGGCAAGACAGCUGGGUGUACAGCGUCCUCGAAACCACGAGCAAGUGAGCAGAUCCUCCGAGGCACCAGGGACUCCAGCCCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[142.80226135 289.49029541]
[140.68078613 278.98852539]
[144.79571533 268.85827637]
[138.17739868 255.39730835]
[131.55908203 241.93632507]
[124.16892242 240.65740967]
[129.34400940 254.73641968]
[119.73885345 266.25775146]
[104.95849609 263.70019531]
[99.78314972 249.62127686]
[109.38861084 238.09957886]
[101.99845886 236.82066345]
[91.24148560 247.27473450]
[80.48450470 257.72879028]
[69.72753143 268.18286133]
[58.97055054 278.63693237]
[54.97287369 286.90173340]
[47.90784836 289.18518066]
[36.95378494 299.43255615]
[32.70431900 315.27157593]
[16.79481316 319.24896240]
[5.59160566 307.27313232]
[10.61959553 291.66381836]
[26.70641708 288.47848511]
[37.66047668 278.23114014]
[48.51648712 267.87994385]
[59.27346420 257.42587280]
[70.03044128 246.97181702]
[80.78742218 236.51774597]
[91.54439545 226.06369019]
[96.71940613 211.98464966]
[95.29356384 197.05256653]
[91.51016998 190.66392517]
[93.98549652 181.82304382]
[92.84420013 166.86653137]
[91.70291138 151.91000366]
[90.56161499 136.95349121]
[89.42032623 121.99697113]
[88.27902985 107.04045105]
[81.66071320 93.57947540]
[70.51354218 83.54251862]
[59.36636734 73.50556183]
[43.93357849 70.02137756]
[39.65263748 55.75523376]
[28.50546455 45.71827698]
[13.07267284 42.23409271]
[8.79173088 27.96795082]
[-2.35544133 17.93099213]
[-17.45034027 21.00511551]
[-31.29910469 14.67541695]
[-38.67795181 1.55990756]
[-36.93975830 -13.20886612]
[-48.08692932 -23.24582481]
[-59.23410416 -33.28278351]
[-70.38127136 -43.31974411]
[-81.52845001 -53.35670090]
[-92.67562103 -63.39366150]
[-108.44314575 -62.31634521]
[-120.29917145 -72.76670837]
[-121.20972443 -88.54474640]
[-110.63459015 -100.28962708]
[-94.84780884 -101.03330994]
[-83.21540070 -90.33459473]
[-82.63865662 -74.54083252]
[-71.49148560 -64.50387573]
[-60.34431458 -54.46691513]
[-49.19714355 -44.42995834]
[-38.04997253 -34.39299774]
[-26.90279770 -24.35603905]
[-12.39662075 -27.62846947]
[1.41834068 -21.66098785]
[9.16095352 -8.54972076]
[7.68151760 6.78381968]
[18.82868958 16.82077789]
[33.46416092 19.58705139]
[38.54242325 34.57110214]
[49.68959427 44.60806274]
[64.32506561 47.37433624]
[69.40332794 62.35838699]
[80.55049896 72.39534760]
[91.69766998 82.43230438]
[99.07531738 81.08309174]
[104.11602783 66.95542145]
[113.83060455 78.38467407]
[121.20825195 77.03546143]
[128.08164978 63.70292664]
[134.95504761 50.37039566]
[136.11645508 41.26328278]
[142.08833313 36.85131454]
[149.21432495 23.65205956]
[156.34030151 10.45280457]
[163.46629333 -2.74644899]
[158.70201111 -17.81552696]
[166.06263733 -31.80111885]
[181.18124390 -36.40581894]
[195.08822632 -28.89774132]
[199.53282166 -13.73129463]
[191.87814331 0.09553619]
[176.66554260 4.37953854]
[169.53956604 17.57879257]
[162.41357422 30.77804565]
[155.28758240 43.97729874]
[148.28758240 57.24379349]
[141.41418457 70.57632446]
[134.54078674 83.90885925]
[144.89196777 94.76486969]
[158.53643799 88.53364563]
[172.18092346 82.30241394]
[185.82540894 76.07118988]
[191.11291504 61.17764282]
[205.41877747 54.46067810]
[220.25559998 59.90535355]
[226.82093811 74.28144073]
[221.21969604 89.05986023]
[206.77500916 95.47283936]
[192.05662537 89.71567535]
[178.41215515 95.94689941]
[164.76766968 102.17812347]
[151.12318420 108.40934753]
[132.87629700 116.49633789]
[115.66249847 115.09933472]
[103.23554993 105.89916229]
[104.37683868 120.85568237]
[105.51813507 135.81219482]
[106.65943146 150.76872253]
[107.80072021 165.72523499]
[108.94201660 180.68174744]
[110.22563934 195.62672424]
[111.65148163 210.55880737]
[116.85665894 209.89601135]
[122.50509644 210.54347229]
[128.26643372 212.64117432]
[133.77468872 216.24673462]
[138.64839172 221.32749939]
[142.51235962 227.75720215]
[145.02005005 235.31800842]
[151.63836670 248.77899170]
[158.25668335 262.23995972]
[175.49188232 272.63763428]
[173.48199463 291.84252930]
[180.60797119 305.04177856]
[187.73396301 318.24102783]
[194.85995483 331.44030762]
[205.49867249 333.96447754]
[212.82260132 341.78421021]
[214.57180786 352.13119507]
[210.40367126 361.52130127]
[217.02198792 374.98226929]
[223.64030457 388.44326782]
[238.86750793 392.00222778]
[248.20315552 404.54733276]
[247.23921204 420.15518188]
[236.43086243 431.45620728]
[220.88143921 433.11441040]
[207.93292236 424.34686279]
[203.69921875 409.29330444]
[210.17932129 395.06158447]
[203.56100464 381.60058594]
[196.94268799 368.13961792]
[180.13299561 358.63690186]
[181.66069031 338.56628418]
[174.53471375 325.36703491]
[167.40872192 312.16778564]
[160.28273010 298.96853638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 138]
[4 137]
[5 136]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[18 25]
[19 24]
[31 129]
[32 128]
[34 127]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[40 81]
[41 80]
[42 79]
[44 77]
[45 76]
[47 74]
[48 73]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[85 105]
[86 104]
[87 103]
[89 102]
[90 101]
[91 100]
[92 99]
[106 119]
[107 118]
[108 117]
[109 116]
[140 164]
[141 163]
[142 162]
[143 161]
[147 159]
[148 158]
[149 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
