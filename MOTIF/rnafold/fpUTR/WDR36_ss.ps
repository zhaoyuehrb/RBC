%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACGAGCUUCCUUCCACCGCAAAAGAGCUGGAGAACAAUGCUAGGCAACGUGCUGGAGACCUUGGCCCUCGGAACCCAAGUCACGCCUCCCAUGUGAGCUCUGGAGGGAGAACUUU\
) } def
/len { sequence length } bind def

/coor [
[58.76497650 476.55523682]
[44.01568222 472.97433472]
[31.55817795 464.30398560]
[23.07723808 451.71676636]
[19.71983910 436.91497803]
[21.94004250 421.90048218]
[29.43758202 408.70385742]
[41.19847870 399.10980225]
[55.63217163 394.41586304]
[56.43050385 379.43713379]
[57.22883606 364.45840454]
[58.02716827 349.47964478]
[58.82550049 334.50091553]
[59.62383270 319.52215576]
[60.42216492 304.54342651]
[61.22049713 289.56469727]
[62.01882935 274.58593750]
[50.82255173 284.56808472]
[35.91902161 286.26657104]
[22.76380348 279.05960083]
[16.17247581 265.58538818]
[18.55785179 250.77627563]
[29.04674149 240.05325317]
[43.79959869 237.34158325]
[57.41601944 243.63389587]
[64.91200256 256.62872314]
[68.85854340 242.15719604]
[72.80508423 227.68568420]
[76.75161743 213.21415710]
[80.69815826 198.74264526]
[83.47749329 184.00238037]
[85.07189178 169.08735657]
[86.66629791 154.17233276]
[88.26069641 139.25732422]
[78.21009064 134.70083618]
[69.73992920 127.62745667]
[63.46457291 118.55022430]
[59.83917618 108.12751770]
[59.12669754 97.11531067]
[61.37881088 86.31233978]
[66.43216705 76.50215149]
[73.92024231 68.39628601]
[66.65198517 55.27484131]
[59.38372040 42.15339661]
[52.11545563 29.03195000]
[36.69873047 27.27006531]
[25.28472900 16.75815964]
[22.26236534 1.53827310]
[28.79380226 -12.53723621]
[42.36756516 -20.05604935]
[57.76427078 -18.12702751]
[69.06356812 -7.49191952]
[71.92064667 7.75985813]
[65.23690033 21.76368713]
[72.50516510 34.88513184]
[79.77342987 48.00658035]
[87.04169464 61.12802505]
[102.72525024 59.11575699]
[118.00296783 63.19182968]
[126.94847870 51.15115738]
[135.89398193 39.11048126]
[138.55036926 30.23350906]
[145.24137878 26.87259293]
[154.50425720 15.07431889]
[163.76712036 3.27604532]
[173.02999878 -8.52222824]
[181.81443787 -20.68091393]
[190.10643005 -33.18062210]
[193.82380676 -49.72200775]
[210.74781799 -50.72902298]
[216.40051270 -34.74517441]
[202.60614014 -24.88862038]
[194.31414795 -12.38891220]
[194.72038269 -8.76365471]
[193.30711365 -4.76328564]
[189.91961670 -1.28510618]
[184.82826233 0.74064130]
[175.56539917 12.53891468]
[166.30252075 24.33718872]
[157.03965759 36.13545990]
[147.93466187 48.05599213]
[138.98915100 60.09666443]
[130.04364014 72.13734436]
[139.15022278 87.90834808]
[140.52319336 106.06790161]
[133.89132690 123.02882385]
[120.56465912 135.44068909]
[103.17572021 140.85171509]
[101.58131409 155.76673889]
[99.98691559 170.68176270]
[98.39250946 185.59678650]
[111.18100739 177.75749207]
[125.82239532 181.01783752]
[134.07618713 193.54280090]
[131.29696655 208.28308105]
[119.04895020 216.94253540]
[104.22557831 214.64743042]
[95.16967773 202.68917847]
[91.22313690 217.16070557]
[87.27660370 231.63221741]
[83.33006287 246.10374451]
[79.38352203 260.57525635]
[76.99757385 275.38427734]
[76.19924164 290.36300659]
[75.40090942 305.34176636]
[74.60257721 320.32049561]
[73.80423737 335.29925537]
[73.00590515 350.27798462]
[72.20757294 365.25671387]
[71.40924072 380.23547363]
[70.61090851 395.21420288]
[84.46389771 401.41574097]
[95.13838196 412.20556641]
[101.19072723 426.12438965]
[101.80241394 441.28979492]
[96.89070129 455.65084839]
[87.11986542 467.26528931]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[26 102]
[27 101]
[28 100]
[29 99]
[30 98]
[31 91]
[32 90]
[33 89]
[34 88]
[42 57]
[43 56]
[44 55]
[45 54]
[59 83]
[60 82]
[61 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
