%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGAGCUGAGCUCGGGUAGGCCGCGCGAGGUCCCUCCUCUCCGGGCGUCCGUGCGCCUAGCUCUGCGCUGGGAGCCUCGCGCCCUUUGACAGCAGUUAGUUGCUGACUCGG\
) } def
/len { sequence length } bind def

/coor [
[68.51207733 120.88432312]
[54.61466599 126.52896118]
[44.74050522 138.89065552]
[30.03714561 136.51148987]
[16.13973618 142.15612793]
[2.24232435 147.80076599]
[-11.65508652 153.44540405]
[-17.43968964 165.07466125]
[-29.24052429 169.44987488]
[-40.46566010 164.71440125]
[-54.51332855 169.97396851]
[-64.72435760 182.05889893]
[-79.35657501 179.27548218]
[-93.40424347 184.53504944]
[-107.45191193 189.79461670]
[-121.49958038 195.05416870]
[-131.71061707 207.13909912]
[-146.34283447 204.35569763]
[-160.39050293 209.61524963]
[-168.31867981 223.56242371]
[-184.18794250 225.91741943]
[-195.82475281 214.87368774]
[-194.30235291 198.90303040]
[-180.78858948 190.25677490]
[-165.65007019 195.56758118]
[-151.60240173 190.30802917]
[-142.39614868 178.59928894]
[-126.75914764 181.00650024]
[-112.71147919 175.74694824]
[-98.66381073 170.48738098]
[-84.61614227 165.22781372]
[-75.40989685 153.51908875]
[-59.77289200 155.92630005]
[-45.72522354 150.66673279]
[-35.40265274 136.54818726]
[-17.29972649 139.54800415]
[-3.40231633 133.90336609]
[10.49509430 128.25871277]
[24.39250565 122.61407471]
[33.27262878 110.65612030]
[48.97002411 112.63155365]
[62.86743546 106.98690796]
[66.64687347 82.24576569]
[85.06068420 65.29465485]
[110.02942657 63.57123566]
[116.80242920 50.18742371]
[123.57543182 36.80361176]
[130.34843445 23.41979599]
[137.12142944 10.03598309]
[143.89442444 -3.34783030]
[136.67906189 -15.18372917]
[136.29354858 -28.93144608]
[142.73175049 -40.96139908]
[154.20016479 -48.15105057]
[167.61613464 -48.69520950]
[174.75535583 -61.88731384]
[174.51875305 -77.70674896]
[187.38101196 -85.21750641]
[194.52023315 -98.40961456]
[201.65943909 -111.60171509]
[208.79864502 -124.79382324]
[215.93786621 -137.98593140]
[223.07707214 -151.17803955]
[219.89591980 -166.90254211]
[230.31639099 -179.10061646]
[246.34478760 -178.41497803]
[255.68550110 -165.37155151]
[251.17312622 -149.97616577]
[236.26918030 -144.03883362]
[229.12997437 -130.84672546]
[221.99075317 -117.65461731]
[214.85154724 -104.46250916]
[207.71234131 -91.27040100]
[200.57312012 -78.07829285]
[201.32037354 -63.20244598]
[187.94746399 -54.74810410]
[180.80824280 -41.55599594]
[188.36346436 -27.05393791]
[185.80981445 -10.73512554]
[173.95056152 0.99820304]
[157.27824402 3.42516994]
[150.50524902 16.80898285]
[143.73223877 30.19279671]
[136.95924377 43.57661057]
[130.18624878 56.96042252]
[123.41324615 70.34423828]
[129.92373657 76.93024445]
[134.63665771 84.90209961]
[137.26885986 93.78092957]
[137.66221619 103.03334808]
[135.79313660 112.10355377]
[131.77386475 120.44666290]
[142.52560425 130.90611267]
[153.27732849 141.36557007]
[164.02906799 151.82501221]
[174.78080750 162.28446960]
[185.53254700 172.74392700]
[201.55406189 176.24295044]
[206.27609253 191.94755554]
[194.84101868 203.70217896]
[179.01226807 199.41467285]
[175.07308960 183.49566650]
[164.32136536 173.03620911]
[153.56962585 162.57675171]
[142.81788635 152.11730957]
[132.06614685 141.65785217]
[121.31440735 131.19839478]
[114.75871277 134.78253174]
[107.62593079 137.00660706]
[100.19496155 137.78367615]
[92.75637054 137.08334351]
[85.60101318 134.93298340]
[79.00868225 131.41670227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[4 39]
[5 38]
[6 37]
[7 36]
[10 34]
[11 33]
[13 31]
[14 30]
[15 29]
[16 28]
[18 26]
[19 25]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 81]
[55 77]
[56 76]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[92 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
