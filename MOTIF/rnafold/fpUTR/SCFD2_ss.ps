%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGGAGCGUGUCAGAGGCCGACCACGUGUACUGUGGAGACUGUCAAAGUCUCCCGGAGCCCAAUUUCCGGAAGCGGUGAGUUCUGAAAGAAGUUCCUGCACCGUAGUUUCCCAAGUCUGCGAAUCCCCAACC\
) } def
/len { sequence length } bind def

/coor [
[32.70526123 222.27418518]
[29.85776520 207.11187744]
[35.68082428 192.82568359]
[48.31631851 183.97424316]
[47.61843872 168.99049377]
[46.92055893 154.00672913]
[46.22267914 139.02297974]
[32.44944000 133.08178711]
[21.07173538 142.85664368]
[9.69403076 152.63150024]
[-1.68367255 162.40635681]
[-13.06137657 172.18121338]
[-24.32457733 182.08779907]
[-35.47174835 192.12475586]
[-34.74522018 207.74545288]
[-44.27050781 220.14718628]
[-59.55006409 223.47422791]
[-73.36934662 216.15565491]
[-79.20331573 201.64707947]
[-74.29734802 186.79899597]
[-60.96789169 178.62222290]
[-45.50870895 180.97758484]
[-34.36153412 170.94062805]
[-31.46923828 164.06425476]
[-22.83623505 160.80351257]
[-11.45853138 151.02865601]
[-0.08082727 141.25379944]
[11.29687691 131.47894287]
[22.67457962 121.70407867]
[22.15140724 114.22235107]
[7.48021555 117.34583282]
[-5.77250767 124.37187958]
[-18.88727570 117.09157562]
[-19.93310738 102.12807465]
[-7.95856857 93.09423065]
[6.14194250 98.20763397]
[21.10505867 99.25888824]
[20.58188629 91.77716064]
[7.95451212 83.68090057]
[-4.67286205 75.58464050]
[-17.30023575 67.48838043]
[-29.92761040 59.39212036]
[-42.55498505 51.29586029]
[-58.47183990 53.30415726]
[-69.86500549 42.00923157]
[-67.99461365 26.07558060]
[-54.29547882 17.72613907]
[-39.27639771 23.36588478]
[-34.45872498 38.66848373]
[-21.83135033 46.76474380]
[-9.20397663 54.86100388]
[3.42339778 62.95726395]
[16.05077171 71.05352783]
[28.67814636 79.14978027]
[41.11370850 70.76188660]
[38.33728409 56.02108002]
[35.56086349 41.28026962]
[32.78443909 26.53946114]
[30.00801468 11.79865170]
[27.23159027 -2.94215822]
[14.04116058 -11.64779472]
[10.95182514 -27.14719963]
[19.79643250 -40.24485016]
[35.32763290 -43.17014313]
[48.33104324 -34.18755722]
[51.09196854 -18.62629509]
[41.97240067 -5.71858215]
[44.74882507 9.02222729]
[47.52524948 23.76303673]
[50.30167007 38.50384903]
[53.07809448 53.24465561]
[55.85451889 67.98546600]
[81.77926636 53.20426178]
[109.15293121 55.01814270]
[129.03492737 70.22333527]
[141.27195740 61.54835129]
[153.50897217 52.87336731]
[165.74598694 44.19837952]
[172.52944946 29.90519524]
[187.38711548 28.85670090]
[199.62413025 20.18171692]
[206.40759277 5.88853121]
[221.26525879 4.84003782]
[233.50227356 -3.83494711]
[245.73928833 -12.50993252]
[257.97631836 -21.18491745]
[267.40109253 -35.27781296]
[283.55227661 -30.12264633]
[283.06967163 -13.17556953]
[266.65130615 -8.94789791]
[254.41427612 -0.27291319]
[242.17726135 8.40207195]
[229.94024658 17.07705688]
[224.03204346 30.74975014]
[208.29911804 32.41873550]
[196.06210327 41.09371948]
[190.15390015 54.76641464]
[174.42097473 56.43539810]
[162.18395996 65.11038208]
[149.94692993 73.78536987]
[137.70991516 82.46035767]
[141.05397034 93.34806824]
[141.31900024 104.73468018]
[138.48512268 115.76618958]
[151.11248779 123.86244965]
[163.73986816 131.95870972]
[176.36724854 140.05496216]
[188.99461365 148.15122986]
[202.60166931 141.02775574]
[217.94677734 141.67820740]
[230.90219116 149.92761230]
[237.98298645 163.55691528]
[237.28443909 178.89991760]
[228.99446106 191.82942200]
[215.34301758 198.86744690]
[200.00228882 198.12080383]
[187.09884644 189.79034424]
[180.10363770 176.11691284]
[180.89836121 160.77859497]
[168.27098083 152.68234253]
[155.64360046 144.58607483]
[143.01623535 136.48982239]
[130.38885498 128.39355469]
[112.79135132 144.08543396]
[87.35517883 148.59983826]
[61.20643616 138.32510376]
[61.90431595 153.30885315]
[62.60219574 168.29261780]
[63.30007553 183.27636719]
[76.70361328 190.91500854]
[83.82936096 204.59811401]
[82.40352631 219.95944214]
[72.88108063 232.09725952]
[58.30061340 237.13842773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 129]
[5 128]
[6 127]
[7 126]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[55 72]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
[75 101]
[76 100]
[77 99]
[78 98]
[80 96]
[81 95]
[83 93]
[84 92]
[85 91]
[86 90]
[104 123]
[105 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
