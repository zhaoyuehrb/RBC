%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUCUGCAUAAACCCAGGCCACGGUUCCUAUUGGCUGAGUCCUCUGAGGGUGACGUCAUCGGGACGUACUAAGACUAGGGUUGGGCCGAGAGUCGGAGCCAUUACUGCAGGAAAAGGUCCCGGAGAGCUGAGCAGUCAAG\
) } def
/len { sequence length } bind def

/coor [
[94.48111725 154.90650940]
[101.18107605 141.48474121]
[93.84612274 143.04948425]
[86.53852844 156.14907837]
[79.23093414 169.24865723]
[71.92333984 182.34823608]
[64.61575317 195.44783020]
[71.25745392 209.47163391]
[68.35463715 224.71478271]
[57.02348709 235.31593323]
[41.62106323 237.19876099]
[28.06991577 229.63926697]
[21.58073425 215.54423523]
[24.64874077 200.33348083]
[36.09422684 189.85586548]
[51.51616669 188.14022827]
[58.82376099 175.04064941]
[66.13135529 161.94107056]
[73.43894196 148.84147644]
[80.74653625 135.74189758]
[67.85488892 120.60652161]
[64.30381012 102.26708984]
[69.86923981 85.69689941]
[81.99945068 74.83717346]
[76.48992157 60.88564301]
[70.98040009 46.93411255]
[65.47087860 32.98258591]
[59.96135330 19.03105545]
[54.45182800 5.07952785]
[35.66148758 -1.82106054]
[28.00254250 -19.98802185]
[35.93457413 -37.70711517]
[29.51187515 -51.26251602]
[23.08917427 -64.81791687]
[16.66647530 -78.37332153]
[10.24377537 -91.92872620]
[3.82107544 -105.48412323]
[-9.08002949 -114.64229584]
[-7.53744507 -129.45680237]
[-13.96014500 -143.01220703]
[-20.38284492 -156.56761169]
[-26.80554390 -170.12301636]
[-33.22824478 -183.67840576]
[-39.65094376 -197.23381042]
[-55.88428879 -197.19563293]
[-70.46533966 -204.19816589]
[-80.51184082 -216.80120850]
[-84.06230927 -232.46313477]
[-80.45881653 -248.05340576]
[-70.46826172 -260.47827148]
[-77.18926239 -273.88824463]
[-83.91026306 -287.29824829]
[-90.63126373 -300.70825195]
[-97.32725525 -307.03973389]
[-97.34892273 -314.49008179]
[-103.77162170 -328.04550171]
[-110.19432068 -341.60089111]
[-116.61701965 -355.15631104]
[-131.18171692 -361.88302612]
[-134.86338806 -377.49792480]
[-124.83776855 -390.02255249]
[-108.79565430 -389.84912109]
[-99.04318237 -377.11062622]
[-103.06161499 -361.57901001]
[-96.63891602 -348.02359009]
[-90.21621704 -334.46820068]
[-83.79351807 -320.91278076]
[-77.22126770 -307.42926025]
[-70.50026703 -294.01925659]
[-63.77926254 -280.60925293]
[-57.05826187 -267.19924927]
[-43.17288208 -268.09640503]
[-29.95733833 -263.60549927]
[-19.42819023 -254.37677002]
[-13.20543957 -241.78599548]
[-12.26333141 -227.72952271]
[-16.77796364 -214.33866882]
[-26.09554100 -203.65650940]
[-19.67284203 -190.10110474]
[-13.25014210 -176.54571533]
[-6.82744265 -162.99031067]
[-0.40474275 -149.43490601]
[6.01795721 -135.87950134]
[18.45966721 -127.69091034]
[17.37647820 -111.90682220]
[23.79917717 -98.35142517]
[30.22187805 -84.79602051]
[36.64457703 -71.24061584]
[43.06727600 -57.68521500]
[49.48997498 -44.12981415]
[59.86422348 -43.38982010]
[69.04637909 -38.33449936]
[75.31604004 -29.83342361]
[77.46620941 -19.40865898]
[75.03511810 -8.96241951]
[68.40335846 -0.42999616]
[73.91287994 13.52153206]
[79.42240143 27.47306061]
[84.93193054 41.42458725]
[90.44145203 55.37611771]
[95.95097351 69.32764435]
[114.75762939 70.08923340]
[130.98933411 82.13890839]
[138.09794617 102.54631805]
[132.16302490 124.77334595]
[144.18017578 133.75042725]
[156.19732666 142.72752380]
[168.21447754 151.70460510]
[180.23162842 160.68168640]
[197.98942566 155.46659851]
[215.79121399 169.25729370]
[229.48538208 175.37854004]
[243.17955017 181.49980164]
[258.61849976 177.13874817]
[271.56958008 186.60704041]
[272.09790039 202.64138794]
[259.79809570 212.94161987]
[244.10559082 209.60629272]
[237.05828857 195.19396973]
[223.36412048 189.07270813]
[209.66995239 182.95146179]
[200.56048584 194.86857605]
[210.06034851 206.47686768]
[219.56019592 218.08517456]
[235.08320618 223.37370300]
[237.99884033 239.51158142]
[225.30775452 249.89755249]
[210.06544495 243.84741211]
[207.95190430 227.58503723]
[198.45204163 215.97673035]
[188.95217896 204.36842346]
[171.13125610 191.00849915]
[171.25454712 172.69883728]
[159.23739624 163.72175598]
[147.22024536 154.74467468]
[135.20309448 145.76757812]
[123.18594360 136.79049683]
[115.85098267 138.35523987]
[127.44435883 147.87332153]
[127.23133850 162.87181091]
[115.37232208 172.05677795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[32 90]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[50 71]
[51 70]
[52 69]
[53 68]
[55 67]
[56 66]
[57 65]
[58 64]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[111 121]
[112 120]
[113 119]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
