%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGCAGUUGAGUGCUGCAGCGGCAGUCGUCGCCCCUGCCGCCGCUGCCACCGAAGGAAGCAUCCCAGACACCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[93.68868256 181.20758057]
[79.91350555 175.27085876]
[72.65470886 162.14418030]
[74.94997406 147.32083130]
[85.83992004 137.00361633]
[73.80807495 145.96099854]
[61.77622604 154.91836548]
[49.74437714 163.87574768]
[37.71252823 172.83312988]
[33.97404861 188.43452454]
[19.38495827 195.10820007]
[5.13676405 187.73471069]
[2.15945768 171.97033691]
[12.73697472 159.90817261]
[28.75514984 160.80128479]
[40.78699875 151.84390259]
[52.81884384 142.88652039]
[64.85069275 133.92915344]
[76.88253784 124.97176361]
[69.78887939 102.99079895]
[78.38176727 84.35050201]
[69.19275665 72.49460602]
[60.00374985 60.63871765]
[50.81474304 48.78282928]
[41.62573624 36.92693710]
[32.43672562 25.07104874]
[23.24771881 13.21515846]
[7.88964510 14.67568779]
[-5.80951548 7.58086252]
[-13.47841167 -5.80538321]
[-12.66992664 -21.21154785]
[-3.64204454 -33.72158051]
[10.72447014 -39.34357452]
[25.84531403 -36.28356934]
[36.89548111 -25.51800728]
[40.34890366 -10.48213673]
[35.10360718 4.02615070]
[44.29261780 15.88204098]
[53.48162460 27.73793030]
[62.67063141 39.59382248]
[71.85964203 51.44971085]
[81.04865265 63.30559921]
[90.23765564 75.16149139]
[104.63433838 73.71734619]
[117.66886902 79.99835205]
[130.35867310 72.00028992]
[143.04846191 64.00222015]
[150.59765625 50.09825897]
[165.49032593 49.85766983]
[178.18011475 41.85960388]
[181.43069458 26.39321136]
[194.71105957 17.82540703]
[210.14222717 21.23931885]
[218.56913757 34.60953140]
[214.99227905 50.00373840]
[201.53370667 58.28882599]
[186.17819214 54.54940033]
[173.48838806 62.54746628]
[166.84684753 75.87935638]
[151.04652405 76.69201660]
[138.35673523 84.69008636]
[125.66693878 92.68814850]
[128.51011658 110.43215179]
[118.98120880 128.24392700]
[129.48446655 138.95288086]
[139.98773193 149.66181946]
[150.49098206 160.37077332]
[166.06648254 158.97866821]
[178.86318970 167.96635437]
[182.83888245 183.09010315]
[176.11637878 197.20895386]
[161.86982727 203.65640259]
[146.82601929 199.38818359]
[138.08818054 186.41960144]
[139.78204346 170.87403870]
[129.27877808 160.16508484]
[118.77552032 149.45614624]
[108.27226257 138.74719238]
[117.43681335 150.62200928]
[117.41484070 165.62197876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[45 62]
[46 61]
[47 60]
[49 58]
[50 57]
[64 78]
[65 77]
[66 76]
[67 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
