%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGGAAGCCACAUCAAACCCUGGGGCCUUUGCUGGGCCUCUCCAUCUGCCCAGUUACUGGGAGGUAGAUAGCCCCAGGAAGGAAUCCAGUCAGGCCUGGGCACCAGGCCAGGAGUGGAUAAAGCUAGAAAGAGACACCACAGAAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[71.57157898 170.48548889]
[76.60971832 156.18888855]
[86.23614502 144.47958374]
[99.28842163 136.77154541]
[96.51425171 122.03031158]
[89.28335571 120.03929901]
[74.82155609 116.05728912]
[67.59066010 114.06628418]
[57.66168213 125.30974579]
[47.73270416 136.55320740]
[44.39753342 152.01889038]
[30.17334557 156.43722534]
[20.24436760 167.68067932]
[23.74811172 182.79701233]
[17.66655731 197.07266235]
[4.33818674 205.01837158]
[-11.11197090 203.57882690]
[-22.74301338 193.30758667]
[-26.08256721 178.15414429]
[-19.84650612 163.94529724]
[-6.43272448 156.14465332]
[9.00090694 157.75170898]
[18.92988396 146.50825500]
[21.55486679 131.84677124]
[36.48924255 126.62422943]
[46.41822052 115.38076782]
[56.34719467 104.13730621]
[55.41771317 89.16613007]
[44.17425537 79.23715210]
[32.93079376 69.30817413]
[21.68733215 59.37919998]
[6.22165251 56.04402924]
[1.80331182 41.81984329]
[-9.44014931 31.89086533]
[-20.68361092 21.96188927]
[-31.92707253 12.03291225]
[-43.17053223 2.10393548]
[-58.63621140 -1.23123479]
[-63.05455399 -15.45542336]
[-74.29801178 -25.38439941]
[-89.76369476 -28.71957016]
[-94.18202972 -42.94375992]
[-105.42549133 -52.87273407]
[-120.89117432 -56.20790482]
[-125.30951691 -70.43209076]
[-136.55297852 -80.36106873]
[-147.79643250 -90.29004669]
[-159.03990173 -100.21902466]
[-167.60162354 -103.58362579]
[-170.41040039 -110.47126007]
[-181.44625854 -120.63048553]
[-192.48211670 -130.78970337]
[-203.51797485 -140.94892883]
[-214.55383301 -151.10815430]
[-230.30213928 -157.38726807]
[-228.62797546 -174.25836182]
[-211.95275879 -177.32000732]
[-204.39460754 -162.14401245]
[-193.35874939 -151.98478699]
[-182.32289124 -141.82556152]
[-171.28703308 -131.66635132]
[-160.25117493 -121.50711823]
[-149.11091614 -111.46248627]
[-137.86746216 -101.53350830]
[-126.62400055 -91.60453033]
[-115.38053894 -81.67555237]
[-100.71906281 -79.05056763]
[-95.49652100 -64.11619568]
[-84.25305939 -54.18721771]
[-69.59158325 -51.56223679]
[-64.36903381 -36.62786102]
[-53.12557602 -26.69888496]
[-38.46410370 -24.07390022]
[-33.24155807 -9.13952541]
[-21.99809456 0.78945094]
[-10.75463390 10.71842766]
[0.48882726 20.64740372]
[11.73228836 30.57638168]
[26.39375877 33.20136261]
[31.61630821 48.13573837]
[42.85976791 58.06471634]
[54.10322952 67.99369049]
[65.34669495 77.92266846]
[96.65230560 69.53927612]
[114.27236176 85.70551300]
[127.60919952 78.84046173]
[140.94602966 71.97541809]
[154.28286743 65.11037445]
[167.61970520 58.24532700]
[176.34861755 45.04999924]
[191.20584106 46.10451889]
[204.54267883 39.23947144]
[214.10748291 23.53852081]
[231.56896973 24.99407005]
[244.76107788 17.85485840]
[257.95318604 10.71564770]
[271.14529419 3.57643676]
[284.33740234 -3.56277418]
[297.52951050 -10.70198536]
[310.72161865 -17.84119606]
[321.77398682 -30.69738579]
[337.18734741 -23.63590431]
[334.66867065 -6.87008667]
[317.86083984 -4.64908981]
[304.66873169 2.49012113]
[291.47662354 9.62933254]
[278.28451538 16.76854324]
[265.09240723 23.90775299]
[251.90029907 31.04696465]
[238.70819092 38.18617630]
[234.93440247 49.72060776]
[223.94863892 55.76280975]
[211.40771484 52.57630539]
[198.07089233 59.44135284]
[190.29591370 72.14564514]
[174.48474121 71.58216095]
[161.14790344 78.44720459]
[147.81108093 85.31225586]
[134.47424316 92.17729950]
[121.13740540 99.04234314]
[136.13285828 99.41172028]
[151.12831116 99.78108978]
[165.32823181 94.94761658]
[180.31954956 95.45754242]
[194.15821838 101.24472809]
[205.04959106 111.55869293]
[211.58128357 125.06192017]
[212.90625000 140.00328064]
[208.85266113 154.44519043]
[199.94621277 166.51478577]
[187.34188843 174.64688110]
[172.67422485 177.78689575]
[157.84535217 175.52761841]
[144.77827454 168.16206360]
[135.16754150 156.64538574]
[130.25926208 142.46943665]
[120.75737000 130.86279297]
[111.25548553 119.25614166]
[114.02965546 133.99737549]
[128.99096680 136.43351746]
[142.21528625 143.84251404]
[152.10569763 155.32969666]
[157.46789551 169.50794983]
[157.65435791 184.66516113]
[152.64257812 198.97102356]
[143.03775024 210.69804382]
[129.99969482 218.43013000]
[115.10284424 221.23358154]
[100.14603424 218.76988220]
[86.93540192 211.33651733]
[77.06616974 199.83113098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 139]
[5 138]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[28 83]
[29 82]
[30 81]
[31 80]
[33 78]
[34 77]
[35 76]
[36 75]
[37 74]
[39 72]
[40 71]
[42 69]
[43 68]
[45 66]
[46 65]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[85 120]
[86 119]
[87 118]
[88 117]
[89 116]
[91 114]
[92 113]
[94 110]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
