%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUGCUUUUAGCCCUCACCGGGGGCAGGAGGGACCAAGGCUGGGCCCAGAACACAUAGUCCUAGGGUAACAGUGAAGGGGUCGUGAGGGGACAGUGACUCCCUUCCAACCCCUUCUUCAUAGGGACUGUUGGCAAACAAAGAAAAUCAACUGGGAAA\
) } def
/len { sequence length } bind def

/coor [
[113.44597626 129.16773987]
[103.75387573 132.80725098]
[93.12388611 133.22071838]
[82.63018036 130.18788147]
[72.23386383 141.00068665]
[68.24660492 156.31121826]
[53.84803009 160.12309265]
[43.45172119 170.93588257]
[33.05540848 181.74868774]
[22.65909958 192.56149292]
[12.26278877 203.37429810]
[8.54433155 211.77572632]
[1.55462444 214.29481506]
[-9.05197716 224.90141296]
[-19.65857887 235.50801086]
[-30.26518059 246.11462402]
[-40.87178421 256.72122192]
[-51.47838593 267.32781982]
[-58.40293503 282.80319214]
[-75.19042206 280.43325806]
[-77.56034851 263.64578247]
[-62.08498764 256.72122192]
[-51.47838593 246.11462402]
[-40.87178421 235.50801086]
[-30.26518059 224.90141296]
[-19.65857887 214.29481506]
[-9.05197716 203.68821716]
[1.44998491 192.97799683]
[11.84629536 182.16519165]
[22.24260521 171.35238647]
[32.63891602 160.53958130]
[43.03522491 149.72677612]
[46.27887726 135.18965149]
[61.42106247 130.60437012]
[71.81737518 119.79156494]
[66.07712555 105.93337250]
[51.08001328 105.63887024]
[36.08290482 105.34436035]
[21.99168587 113.73302460]
[7.81537914 105.48896790]
[8.13735485 89.09297943]
[22.62639236 81.41184998]
[36.37741089 90.34725189]
[51.37451935 90.64176178]
[66.37162781 90.93626404]
[88.73541260 70.88923645]
[114.87302399 76.75016785]
[126.08564758 66.78638458]
[137.29827881 56.82259750]
[148.51089478 46.85881042]
[159.72352600 36.89502335]
[159.23768616 28.16611671]
[161.83476257 20.40231323]
[166.76889038 14.57946110]
[173.03028870 11.27572060]
[179.52626038 10.62066936]
[185.26103210 12.31911373]
[193.09851074 -0.47048849]
[200.93598938 -13.26009083]
[208.77346802 -26.04969406]
[216.61094666 -38.83929443]
[224.44842529 -51.62889862]
[232.28590393 -64.41850281]
[240.12338257 -77.20810699]
[239.68965149 -97.32778931]
[256.98355103 -105.90927887]
[264.31286621 -118.99671936]
[271.64218140 -132.08415222]
[257.12670898 -128.30249023]
[243.50633240 -134.58624268]
[236.96250916 -148.08358765]
[240.46508789 -162.66893005]
[252.42445374 -171.72285461]
[267.41299438 -171.13635254]
[278.62829590 -161.17559814]
[280.98052979 -146.36143494]
[290.03384399 -158.32124329]
[299.08718872 -170.28105164]
[308.14053345 -182.24085999]
[317.19387817 -194.20066833]
[326.24722290 -206.16049194]
[335.30053711 -218.12030029]
[344.35388184 -230.08010864]
[340.98294067 -243.15251160]
[345.70333862 -255.59214783]
[356.57479858 -262.91946411]
[369.48696899 -262.63522339]
[378.77337646 -274.41497803]
[388.05978394 -286.19473267]
[397.34622192 -297.97448730]
[406.63262939 -309.75424194]
[415.91903687 -321.53399658]
[425.20544434 -333.31375122]
[421.84405518 -348.58578491]
[429.13153076 -362.42147827]
[443.62695312 -368.28805542]
[458.48602295 -363.41549683]
[466.69274902 -350.10446167]
[464.37216187 -334.64001465]
[452.61996460 -324.32400513]
[436.98519897 -324.02734375]
[427.69879150 -312.24758911]
[418.41238403 -300.46783447]
[409.12597656 -288.68807983]
[399.83953857 -276.90832520]
[390.55313110 -265.12857056]
[381.26672363 -253.34881592]
[383.96676636 -236.77287292]
[373.66018677 -223.08847046]
[356.31369019 -221.02676392]
[347.26037598 -209.06695557]
[338.20703125 -197.10714722]
[329.15368652 -185.14733887]
[320.10034180 -173.18753052]
[311.04699707 -161.22772217]
[301.99365234 -149.26791382]
[292.94033813 -137.30809021]
[284.72961426 -124.75483704]
[277.40029907 -111.66739655]
[270.07098389 -98.57996368]
[273.73233032 -88.97239685]
[271.42547607 -78.72710419]
[263.68179321 -71.31108093]
[252.91297913 -69.37062836]
[245.07550049 -56.58102417]
[237.23802185 -43.79141998]
[229.40054321 -31.00181770]
[221.56306458 -18.21221542]
[213.72558594 -5.42261267]
[205.88810730 7.36699009]
[198.05062866 20.15659332]
[200.97698975 34.86837006]
[213.11224365 43.68515015]
[229.11894226 42.60573196]
[239.83609009 54.54400253]
[237.04240417 70.34194183]
[222.88096619 77.88072205]
[208.21520996 71.37723541]
[204.29545593 55.82040405]
[192.16020203 47.00362778]
[198.58290100 60.55902863]
[208.92967224 71.41925049]
[212.69717407 85.93840790]
[208.93643188 100.45932007]
[198.59472656 111.32436371]
[184.27699280 115.79678345]
[169.58967590 112.75003052]
[158.23231506 102.95155334]
[153.06565857 88.86944580]
[155.39114380 74.05080414]
[164.62419128 62.22731400]
[169.68730164 48.10765076]
[158.47468567 58.07143402]
[147.26205444 68.03522491]
[136.04943848 77.99900818]
[124.83680725 87.96279907]
[128.25083923 96.21266174]
[128.90661621 105.40242004]
[126.55950165 114.60581207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[18 22]
[36 45]
[37 44]
[38 43]
[47 156]
[48 155]
[49 154]
[50 153]
[51 152]
[57 131]
[58 130]
[59 129]
[60 128]
[61 127]
[62 126]
[63 125]
[64 124]
[66 120]
[67 119]
[68 118]
[76 117]
[77 116]
[78 115]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[87 107]
[88 106]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[132 140]
[133 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
