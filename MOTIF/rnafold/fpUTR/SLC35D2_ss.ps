%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCCCGGCCCGGCCGGGCGGGACCAGUGCGCAGCCGGGGCUGGCGGGCGGCGGGGUCCGCGGGGCCGCAGGAG\
) } def
/len { sequence length } bind def

/coor [
[74.59014130 404.55593872]
[77.56465149 385.40383911]
[78.17648315 370.41632080]
[78.78830719 355.42880249]
[79.40013885 340.44128418]
[69.14899445 329.69653320]
[69.55597687 314.48834229]
[80.89556885 303.80886841]
[81.50739288 288.82135010]
[82.11922455 273.83383179]
[82.73105621 258.84631348]
[83.34288025 243.85879517]
[83.95471191 228.87127686]
[76.74298096 215.83900452]
[85.03672791 202.36590576]
[85.64855957 187.37838745]
[82.69103241 180.37078857]
[86.60340881 171.79566956]
[87.82604980 156.84558105]
[89.04869080 141.89549255]
[90.27133179 126.94539642]
[78.12484741 118.49808502]
[71.81281281 105.11704254]
[73.01875305 90.37120056]
[81.42101288 78.19351196]
[94.77857971 71.83196259]
[96.00122070 56.88187408]
[93.53408051 47.78503036]
[97.59088135 41.35105896]
[99.42229462 26.46328163]
[93.42780304 11.82167530]
[102.66114044 0.13430254]
[104.49256134 -14.75347519]
[106.32397461 -29.64125252]
[107.85131836 -44.56328964]
[109.07395935 -59.51337814]
[110.29659271 -74.46347046]
[102.79663849 -89.04711151]
[111.90274048 -102.68569946]
[128.24731445 -101.34901428]
[135.01647949 -86.41213226]
[125.24668121 -73.24082947]
[124.02404785 -58.29074097]
[122.80140686 -43.34065247]
[125.47064209 -36.21823883]
[121.21175385 -27.80983734]
[119.38033295 -12.92206001]
[117.54891968 1.96571732]
[123.67440796 15.54245090]
[114.31007385 28.29469681]
[112.47865295 43.18247223]
[110.95130920 58.10451126]
[109.72866821 73.05460358]
[121.87515259 81.50191498]
[128.18717957 94.88295746]
[126.98124695 109.62879944]
[118.57898712 121.80648804]
[105.22142029 128.16804504]
[103.99877930 143.11813354]
[102.77613831 158.06822205]
[101.55349731 173.01831055]
[100.63607788 187.99021912]
[100.02424622 202.97773743]
[107.19221497 217.08201599]
[98.94223022 229.48310852]
[98.33039856 244.47062683]
[97.71857452 259.45812988]
[97.10674286 274.44564819]
[96.49491119 289.43316650]
[95.88308716 304.42068481]
[106.31446838 315.98892212]
[105.48048401 331.17968750]
[94.38765717 341.05313110]
[93.77582550 356.04064941]
[93.16400146 371.02816772]
[92.55216980 386.01568604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 76]
[3 75]
[4 74]
[5 73]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[13 65]
[15 63]
[16 62]
[18 61]
[19 60]
[20 59]
[21 58]
[26 53]
[27 52]
[29 51]
[30 50]
[32 48]
[33 47]
[34 46]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
