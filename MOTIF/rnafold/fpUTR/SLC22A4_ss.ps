%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGUUUCCCAGGAACGGUCCCCGGCUUCGCGCCCCAAUUUCUAACAGCCUGCCUGUCCCCCGGGAACGUUCUAACAUCCUUGGGGAGCGCCCCAGCUACAAGACACUGUCCUGAGAACGCUGUCAUCACCCGUAGUUGCAAGUUUCGGAGCGGCAGUGGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[68.74118042 478.03845215]
[52.36845779 477.10787964]
[45.23062897 462.34362793]
[54.67048264 448.93386841]
[55.52165985 433.95803833]
[56.37284088 418.98220825]
[57.22401810 404.00637817]
[58.07519913 389.03054810]
[58.92637634 374.05471802]
[59.77755737 359.07888794]
[60.62873459 344.10305786]
[48.09819412 336.05004883]
[41.23529816 322.71749878]
[41.97221375 307.64025879]
[50.21104813 294.87237549]
[63.82330322 287.89715576]
[64.67447662 272.92132568]
[57.67185974 259.77551270]
[66.17978668 246.43663025]
[67.03096771 231.46080017]
[67.88214874 216.48497009]
[57.80396271 205.57781982]
[58.45384216 190.37808228]
[69.96259308 179.88110352]
[70.81377411 164.90527344]
[71.66495514 149.92944336]
[72.51612854 134.95361328]
[73.36730957 119.97778320]
[67.30085754 106.25925446]
[55.64962769 96.81209564]
[43.99839401 87.36493683]
[28.40609360 84.68338013]
[23.39323425 70.65767670]
[11.74200153 61.21051788]
[0.09076955 51.76335907]
[-11.56046295 42.31620026]
[-23.21169472 32.86904144]
[-34.86292648 23.42188454]
[-48.07762527 32.07905960]
[-63.30021286 36.23056412]
[-79.04158783 35.48270035]
[-93.76572418 29.92043495]
[-106.03955841 20.09793282]
[-114.67246246 6.98336649]
[-118.83174133 -8.13650036]
[-118.12292480 -23.78256416]
[-112.62717438 -38.42807770]
[-124.45510101 -47.65305328]
[-136.28302002 -56.87802887]
[-151.12324524 -52.74594498]
[-165.38430786 -58.08218765]
[-173.67063904 -70.64406586]
[-172.97938538 -85.49869537]
[-184.80731201 -94.72367096]
[-196.63523865 -103.94865417]
[-208.46316528 -113.17362976]
[-224.49734497 -112.64000702]
[-234.80166626 -124.93636322]
[-231.47154236 -140.62998962]
[-217.06155396 -147.68206787]
[-202.62582397 -140.68286133]
[-199.23818970 -125.00154877]
[-187.41026306 -115.77657318]
[-175.58233643 -106.55159760]
[-163.75440979 -97.32662201]
[-149.51544189 -101.61495972]
[-135.31367493 -96.63764191]
[-126.66477966 -84.10568237]
[-127.05804443 -68.70595551]
[-115.23012543 -59.48097992]
[-103.40219879 -50.25600052]
[-91.77293396 -58.53660202]
[-78.26426697 -63.20344925]
[-63.97172165 -63.86856461]
[-50.05706024 -60.46887589]
[-37.65388870 -53.27207947]
[-27.77527428 -42.85560608]
[-21.23102379 -30.06027222]
[-18.56128883 -15.92242527]
[-19.99199867 -1.59000778]
[-25.41576958 11.77065277]
[-13.76453686 21.21781158]
[-2.11330462 30.66496849]
[9.53792763 40.11212540]
[21.18915939 49.55928421]
[32.84039307 59.00644302]
[47.59931946 61.01227188]
[53.44555283 75.71370697]
[65.09678650 85.16086578]
[76.74801636 94.60802460]
[83.87557220 84.06056976]
[94.90728760 79.13562012]
[106.23238373 80.70046997]
[114.51450348 87.60801697]
[128.83206177 83.13505554]
[143.14962769 78.66208649]
[157.46719360 74.18911743]
[171.78474426 69.71614838]
[186.10231018 65.24317932]
[200.41987610 60.77021027]
[208.96801758 40.74516296]
[229.22308350 33.55915833]
[247.98278809 43.45718765]
[261.81365967 37.65143204]
[275.64456177 31.84567833]
[289.47543335 26.03992271]
[299.20526123 13.56431770]
[313.93527222 15.77246761]
[327.76617432 9.96671391]
[341.59704590 4.16095877]
[346.05560303 -10.82754040]
[359.13391113 -19.40029335]
[374.65676880 -17.50950623]
[385.29476929 -6.04795122]
[386.02496338 9.57257462]
[376.50256348 21.97653770]
[361.22378540 25.30716515]
[347.40280151 17.99183846]
[333.57192993 23.79759216]
[319.74102783 29.60334778]
[311.00048828 41.66368484]
[295.28118896 39.87080383]
[281.45031738 45.67655563]
[267.61941528 51.48231125]
[253.78854370 57.28806686]
[253.40129089 66.01213837]
[250.16290283 74.16907501]
[244.40386963 80.84915924]
[236.73742676 85.29734039]
[227.99433899 86.99860382]
[219.13299561 85.73736572]
[211.13423157 81.62442017]
[204.89283752 75.08776855]
[190.57527161 79.56073761]
[176.25772095 84.03370667]
[161.94015503 88.50667572]
[147.62258911 92.97964478]
[133.30503845 97.45261383]
[118.98747253 101.92558289]
[109.91291809 119.05235291]
[88.34313965 120.82896423]
[87.49195862 135.80479431]
[86.64078522 150.78062439]
[85.78960419 165.75645447]
[84.93842316 180.73228455]
[95.18367004 192.46568298]
[94.10711670 207.64118958]
[82.85797882 217.33615112]
[82.00679779 232.31198120]
[81.15561676 247.28781128]
[88.09735870 261.50479126]
[79.65031433 273.77252197]
[78.79913330 288.74835205]
[91.53337860 297.22100830]
[98.27245331 310.84017944]
[97.29625702 325.90383911]
[88.96688080 338.37289429]
[75.60456848 344.95422363]
[74.75338745 359.93005371]
[73.90220642 374.90591431]
[73.05102539 389.88174438]
[72.19985199 404.85757446]
[71.34867096 419.83340454]
[70.49748993 434.80923462]
[69.64630890 449.78506470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 165]
[5 164]
[6 163]
[7 162]
[8 161]
[9 160]
[10 159]
[11 158]
[16 153]
[17 152]
[19 150]
[20 149]
[21 148]
[24 145]
[25 144]
[26 143]
[27 142]
[28 141]
[29 90]
[30 89]
[31 88]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[47 71]
[48 70]
[49 69]
[53 65]
[54 64]
[55 63]
[56 62]
[94 139]
[95 138]
[96 137]
[97 136]
[98 135]
[99 134]
[100 133]
[103 125]
[104 124]
[105 123]
[106 122]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
