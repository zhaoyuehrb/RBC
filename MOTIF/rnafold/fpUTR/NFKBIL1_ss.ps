%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAUUUCCUCCAGCCUGGAGUGUCUCCGCCCUUCCCGCCUCCCGUCUCCGAGCUUCUUAAACACAGGCCUUGGGCCUACGGCUCUGGGGGUACUUGGGGGGGCGGGGGCAGGUCUG\
) } def
/len { sequence length } bind def

/coor [
[82.72880554 166.96554565]
[82.48215485 151.16319275]
[93.54154205 139.87312317]
[93.14888763 124.87826538]
[92.75623322 109.88340759]
[85.94515991 106.74345398]
[84.18207550 121.63948059]
[69.47029114 124.56578827]
[62.14103317 111.47830963]
[72.32301331 100.46356201]
[65.51194000 97.32361603]
[53.85475159 106.76342010]
[42.19755936 116.20322418]
[30.54037094 125.64302826]
[18.88318253 135.08283997]
[10.37894917 149.74961853]
[-6.06885099 145.63789368]
[-6.67102623 128.69464111]
[9.44337654 123.42564392]
[21.10056496 113.98583984]
[32.75775528 104.54603577]
[44.41494370 95.10623169]
[56.07213593 85.66642761]
[97.33099365 88.36087036]
[103.78865814 74.82209015]
[110.24632263 61.28331375]
[116.70398712 47.74453354]
[123.16165924 34.20575333]
[129.61932373 20.66697502]
[136.07699585 7.12819529]
[142.53465271 -6.41058397]
[148.99232483 -19.94936371]
[155.44998169 -33.48814392]
[161.90765381 -47.02692032]
[168.36532593 -60.56570053]
[174.82298279 -74.10447693]
[181.28065491 -87.64325714]
[187.73832703 -101.18203735]
[184.56944275 -122.29214478]
[201.74090576 -133.61831665]
[207.11642456 -147.62202454]
[212.49194336 -161.62573242]
[212.66102600 -170.88510132]
[218.19583130 -175.92260742]
[223.93608093 -189.78079224]
[229.67633057 -203.63899231]
[235.41658020 -217.49717712]
[220.63381958 -214.95359802]
[209.25189209 -224.72355652]
[209.52595520 -239.72103882]
[221.25721741 -249.06863403]
[235.93717957 -245.98666382]
[242.91871643 -232.71002197]
[250.41871643 -245.70040894]
[257.91873169 -258.69079590]
[265.41873169 -271.68115234]
[272.91873169 -284.67153931]
[268.19378662 -290.81460571]
[265.20257568 -297.94003296]
[264.13299561 -305.57104492]
[265.04470825 -313.20019531]
[267.86602783 -320.32302856]
[272.39938354 -326.47152710]
[278.33511353 -331.24478149]
[285.27261353 -334.33514404]
[292.74734497 -335.54815674]
[300.26196289 -334.81451416]
[307.31933594 -332.19415283]
[317.35629272 -343.34133911]
[327.39324951 -354.48849487]
[337.43020630 -365.63568115]
[347.46716309 -376.78283691]
[353.57232666 -392.59939575]
[370.46081543 -391.11132812]
[373.70608521 -374.47085571]
[358.61434937 -366.74588013]
[348.57739258 -355.59872437]
[338.54043579 -344.45153809]
[328.50347900 -333.30438232]
[318.46649170 -322.15719604]
[322.75421143 -299.50686646]
[309.21527100 -280.54321289]
[285.90908813 -277.17153931]
[278.40908813 -264.18115234]
[270.90908813 -251.19078064]
[263.40908813 -238.20040894]
[255.90910339 -225.21002197]
[249.27476501 -211.75692749]
[243.53451538 -197.89874268]
[237.79426575 -184.04054260]
[232.05401611 -170.18235779]
[226.49565125 -156.25021362]
[221.12013245 -142.24650574]
[215.74461365 -128.24279785]
[220.73478699 -120.64087677]
[221.60829163 -111.45001221]
[218.03369141 -102.78746033]
[210.71939087 -96.70966339]
[201.27709961 -94.72437286]
[194.81942749 -81.18559265]
[188.36177063 -67.64681244]
[181.90409851 -54.10803604]
[175.44644165 -40.56925583]
[168.98876953 -27.03047562]
[162.53109741 -13.49169731]
[156.07344055 0.04708239]
[149.61576843 13.58586121]
[143.15809631 27.12464142]
[136.70043945 40.66342163]
[130.24276733 54.20219803]
[123.78510284 67.74098206]
[117.32743835 81.27975464]
[110.86977386 94.81853485]
[107.75109863 109.49075317]
[108.14374542 124.48561096]
[108.53639984 139.48046875]
[120.17150879 150.17625427]
[120.75223541 165.96986389]
[109.93403625 177.49124146]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 116]
[4 115]
[5 114]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 104]
[34 103]
[35 102]
[36 101]
[37 100]
[38 99]
[40 94]
[41 93]
[42 92]
[44 91]
[45 90]
[46 89]
[47 88]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
