%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGGCCGGCGCGCGCCCGCCGGAAGCCGCGACCCCGACGCGCCCCCCAUUGCCCUCGGCGCCGGAAGUGGUCGCGGGUCGUUCUGCUUCCUGCCCGAGGGGCGUGCGCGGGUCAGGGGCGGCCGCGGAGGCGGAAGCAUCC\
) } def
/len { sequence length } bind def

/coor [
[226.37330627 347.44424438]
[220.54350281 341.63122559]
[217.49354553 333.88259888]
[217.80383301 325.46652222]
[221.49809265 317.79315186]
[213.99809265 304.80276489]
[206.49809265 291.81240845]
[198.99809265 278.82202148]
[185.93376160 271.66851807]
[185.73437500 255.84857178]
[178.23437500 242.85818481]
[170.73437500 229.86781311]
[163.23437500 216.87742615]
[155.73437500 203.88705444]
[148.23437500 190.89666748]
[140.73437500 177.90628052]
[133.23437500 164.91590881]
[125.73436737 151.92552185]
[118.23436737 138.93515015]
[110.03735352 126.37294006]
[101.16770935 114.27626801]
[88.44853210 108.46988678]
[86.73561859 94.59337616]
[77.86597443 82.49670410]
[68.99633026 70.40003967]
[60.12668610 58.30336761]
[51.25703812 46.20669937]
[42.38739395 34.11003113]
[23.60783577 26.92114449]
[22.15596962 7.68396187]
[12.76711750 -4.01430559]
[3.37826514 -15.71257305]
[-6.01058674 -27.41083908]
[-15.39943886 -39.10910797]
[-24.78829193 -50.80737305]
[-34.17714310 -62.50564194]
[-43.69304276 -74.10079956]
[-53.33485794 -85.59146881]
[-62.97666931 -97.08213043]
[-72.61848450 -108.57279968]
[-80.59510040 -113.18084717]
[-82.34198761 -120.42091370]
[-91.73083496 -132.11918640]
[-101.11968994 -143.81745911]
[-116.58466339 -145.68084717]
[-125.93965149 -157.67829895]
[-124.06788635 -172.41030884]
[-133.45674133 -184.10858154]
[-146.97080994 -184.03239441]
[-157.88800049 -191.66239929]
[-162.32876587 -204.01243591]
[-158.87438965 -216.47155762]
[-168.00581360 -228.37185669]
[-177.13723755 -240.27215576]
[-186.26864624 -252.17245483]
[-200.70779419 -261.05770874]
[-196.16693115 -277.39224243]
[-179.21372986 -277.55068970]
[-174.36834717 -261.30386353]
[-165.23693848 -249.40357971]
[-156.10551453 -237.50328064]
[-146.97409058 -225.60298157]
[-130.25367737 -224.14772034]
[-119.51947784 -210.81039429]
[-121.75846863 -193.49742126]
[-112.36961365 -181.79916382]
[-97.58168793 -180.43797302]
[-87.89340973 -168.70800781]
[-89.42142487 -153.20629883]
[-80.03256989 -141.50804138]
[-70.64371490 -129.80976868]
[-61.12781906 -118.21461487]
[-51.48600388 -106.72394562]
[-41.84418869 -95.23327637]
[-32.20237732 -83.74261475]
[-25.44222260 -80.61682892]
[-22.47887611 -71.89449310]
[-13.09002399 -60.19622803]
[-3.70117164 -48.49795914]
[5.68768024 -36.79969025]
[15.07653236 -25.10142517]
[24.46538544 -13.40315723]
[33.85423660 -1.70489025]
[44.16278076 -1.49592865]
[52.81219864 4.51184988]
[56.76951981 14.50879860]
[54.48406219 25.24038696]
[63.35371017 37.33705521]
[72.22335052 49.43372345]
[81.09299469 61.53039169]
[89.96264648 73.62705994]
[98.83229065 85.72373199]
[111.55146790 91.53011322]
[113.26438141 105.40662384]
[122.13402557 117.50329590]
[127.37197113 103.44754791]
[141.55577087 98.56699371]
[154.33361816 106.42361450]
[156.37982178 121.28339386]
[146.20100403 132.30117798]
[131.22474670 131.43515015]
[138.72474670 144.42552185]
[146.22474670 157.41590881]
[153.72474670 170.40628052]
[161.22474670 183.39666748]
[168.72474670 196.38705444]
[176.22474670 209.37742615]
[183.72474670 222.36781311]
[191.22474670 235.35818481]
[198.72474670 248.34857178]
[212.32553101 256.43121338]
[211.98846436 271.32202148]
[219.48846436 284.31240845]
[226.98846436 297.30276489]
[234.48846436 310.29315186]
[254.70578003 319.86746216]
[254.27917480 341.47970581]
[262.88281250 353.76696777]
[271.48645020 366.05426025]
[280.22363281 378.24694824]
[289.09326172 390.34362793]
[304.46224976 392.87982178]
[313.28500366 405.27392578]
[310.77243042 419.91024780]
[319.64205933 432.00692749]
[328.51171875 444.10357666]
[337.38134766 456.20025635]
[352.60144043 462.30609131]
[354.65548706 478.57611084]
[341.43048096 488.27307129]
[326.53115845 481.42160034]
[325.28469849 465.06991577]
[316.41503906 452.97323608]
[307.54541016 440.87655640]
[298.67575073 428.77990723]
[283.96127319 426.77496338]
[274.79388428 414.63357544]
[276.99661255 399.21325684]
[268.12695312 387.11660767]
[261.58572388 383.55535889]
[259.19918823 374.65789795]
[250.59553528 362.37060547]
[241.99188232 350.08334351]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 115]
[6 114]
[7 113]
[8 112]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 95]
[21 94]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[30 83]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 75]
[38 74]
[39 73]
[40 72]
[42 71]
[43 70]
[44 69]
[47 66]
[48 65]
[52 62]
[53 61]
[54 60]
[55 59]
[117 143]
[118 142]
[119 141]
[120 139]
[121 138]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
