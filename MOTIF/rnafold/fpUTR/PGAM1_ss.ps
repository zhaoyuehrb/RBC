%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAUGCAGCGCAUGCGCACACCUGGAGGGCGGAGAGCGGUCCAGAGCGAGUGGAAAGAUUUGGGCGAGAACUUGCGCGGGAGCCGGACUGAGCGGUGCGAGCGCGCAGGCGCGGCCGACGGGGCGGGCUGCUACUCCGGAAUCUGCUAAUCCCAGUCGGUGCCGCAUCCCCAGCCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-37.84799194 476.66928101]
[-44.05802917 490.32342529]
[-50.26807022 503.97756958]
[-48.05555344 522.24719238]
[-62.69846725 531.90100098]
[-68.67448425 545.65917969]
[-74.65049744 559.41735840]
[-75.20308685 568.55950928]
[-80.84778595 573.35803223]
[-87.05782318 587.01214600]
[-84.93595886 603.27343750]
[-98.12041473 613.02545166]
[-113.04816437 606.23620605]
[-114.36280823 589.88983154]
[-100.71195984 580.80212402]
[-94.50192261 567.14794922]
[-88.40866852 553.44134521]
[-82.43265533 539.68316650]
[-76.45663452 525.92498779]
[-80.60229492 514.54510498]
[-75.71707916 503.02551270]
[-63.92220306 497.76751709]
[-57.71216583 484.11337280]
[-51.50212479 470.45925903]
[-45.76187515 456.60104370]
[-40.49810410 442.55496216]
[-43.27713013 427.92190552]
[-31.18914413 417.71450806]
[-25.92537308 403.66839600]
[-20.66160202 389.62231445]
[-15.39783192 375.57623291]
[-10.25416183 361.48571777]
[-5.23096704 347.35177612]
[-8.25941944 332.76831055]
[3.65253305 322.35601807]
[8.67572689 308.22210693]
[13.57807922 294.04580688]
[18.35923195 279.82821655]
[23.14038658 265.61059570]
[27.92153931 251.39297485]
[32.70269012 237.17535400]
[26.12939453 230.44506836]
[22.44855309 221.72433472]
[22.20865631 212.20364380]
[25.48529053 203.19958496]
[31.86480522 195.97280884]
[40.49606705 191.55157471]
[50.20385361 190.58547974]
[55.94410324 176.72729492]
[61.68435669 162.86909485]
[59.40653992 148.14968872]
[71.83596802 138.36093140]
[77.57621765 124.50273895]
[83.31647491 110.64454651]
[76.63318634 124.07338715]
[64.31435394 132.63180542]
[49.39755630 134.20945740]
[35.56095886 128.41734314]
[26.21639252 116.68366241]
[23.66803551 101.90171814]
[28.54426003 87.71643066]
[39.64268875 77.62560272]
[54.22667694 74.11742401]
[68.70010376 78.05693817]
[79.49349213 88.47171021]
[69.44384766 77.33596802]
[59.39420700 66.20022583]
[49.34456635 55.06448746]
[33.58416748 50.53216934]
[29.89220238 34.55401611]
[42.06664658 23.56698036]
[57.58347321 28.87358284]
[60.48030472 45.01484680]
[70.52994537 56.15058517]
[80.57958984 67.28633118]
[90.62922668 78.42206573]
[105.62431335 78.03794861]
[115.09062958 66.40227509]
[124.55694580 54.76660919]
[134.02326965 43.13093948]
[143.48959351 31.49526978]
[142.06454468 15.98375893]
[151.83049011 4.31838655]
[166.62712097 3.05541420]
[176.09344482 -8.58025551]
[185.55976868 -20.21592522]
[195.02607727 -31.85159302]
[204.49240112 -43.48726273]
[201.58142090 -56.65259171]
[206.71662903 -68.90885162]
[217.81291199 -75.86018372]
[230.69267273 -75.15431976]
[240.35627747 -86.62667847]
[250.01986694 -98.09902954]
[259.68347168 -109.57138824]
[269.34704590 -121.04373932]
[279.01065063 -132.51609802]
[281.98361206 -148.05546570]
[296.10067749 -152.80491638]
[305.76428223 -164.27726746]
[298.12432861 -181.88926697]
[310.79443359 -203.79974365]
[318.36825562 -216.74722290]
[325.94204712 -229.69471741]
[333.51586914 -242.64219666]
[333.06805420 -259.03521729]
[347.18069458 -267.38784790]
[361.33587646 -259.10757446]
[360.97198486 -242.71246338]
[346.46334839 -235.06838989]
[338.88952637 -222.12089539]
[331.31573486 -209.17341614]
[323.74191284 -196.22593689]
[329.30978394 -191.20111084]
[340.44552612 -181.15147400]
[346.01339722 -176.12664795]
[358.11846924 -184.98481750]
[364.23876953 -200.19909668]
[380.51071167 -202.23771667]
[390.19512939 -189.00350952]
[383.32952881 -174.11070251]
[366.97665405 -172.87974548]
[354.87155151 -164.02157593]
[335.13882446 -149.61428833]
[317.23663330 -154.61367798]
[307.57305908 -143.14131165]
[305.29129028 -128.42251587]
[290.48300171 -122.85250092]
[280.81942749 -111.38014221]
[271.15582275 -99.90779114]
[261.49221802 -88.43543243]
[251.82862854 -76.96308136]
[242.16503906 -65.49073029]
[244.31938171 -48.82231522]
[233.54879761 -35.48329544]
[216.12806702 -34.02094269]
[206.66175842 -22.38527489]
[197.19543457 -10.74960518]
[187.72911072 0.88606411]
[178.26280212 12.52173328]
[180.03669739 27.26584625]
[170.60226440 39.20092010]
[155.12525940 40.96158981]
[145.65893555 52.59725952]
[136.19261169 64.23292542]
[126.72629547 75.86859894]
[117.25997925 87.50426483]
[119.97846985 95.28135681]
[119.48683929 103.20002747]
[116.09587860 110.03443909]
[110.54725647 114.81656647]
[103.86561584 116.97226715]
[97.17466736 116.38479614]
[91.43441772 130.24299622]
[85.69416046 144.10118103]
[87.56140137 159.81181335]
[75.54254913 168.60934448]
[69.80229950 182.46754456]
[64.06204987 196.32572937]
[73.37620544 215.15286255]
[65.92124176 234.47724915]
[46.92030716 241.95651245]
[42.13915253 256.17413330]
[37.35800171 270.39175415]
[32.57684708 284.60934448]
[27.79569435 298.82696533]
[28.02463531 307.98297119]
[22.80964088 313.24530029]
[17.78644753 327.37921143]
[20.45560646 342.97363281]
[8.90294647 352.37496948]
[3.87975240 366.50891113]
[3.95233917 375.66748047]
[-1.35173893 380.83999634]
[-6.61550999 394.88607788]
[-11.87928104 408.93218994]
[-17.14305115 422.97827148]
[-14.74052620 438.61599731]
[-26.45201111 447.81872559]
[-31.71578217 461.86483765]
[-30.83524323 466.17208862]
[-31.33511925 470.13186646]
[-32.93318176 473.34945679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[5 19]
[6 18]
[7 17]
[9 16]
[10 15]
[25 180]
[26 179]
[28 177]
[29 176]
[30 175]
[31 174]
[32 172]
[33 171]
[35 169]
[36 168]
[37 166]
[38 165]
[39 164]
[40 163]
[41 162]
[48 159]
[49 158]
[50 157]
[52 155]
[53 154]
[54 153]
[65 76]
[66 75]
[67 74]
[68 73]
[77 147]
[78 146]
[79 145]
[80 144]
[81 143]
[84 140]
[85 139]
[86 138]
[87 137]
[88 136]
[92 133]
[93 132]
[94 131]
[95 130]
[96 129]
[97 128]
[99 126]
[100 125]
[102 113]
[103 112]
[104 111]
[105 110]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
