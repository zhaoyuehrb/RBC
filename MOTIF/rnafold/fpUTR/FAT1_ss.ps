%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCGGCCGGGCGCGGGGAGAGGGCGCGGGAGCGGCUCGUGCGGCAGGUACCAUGCGGACGCGCGAGCCCGGCGAGGGCCCCGGCAGGCCCGGUCCCUGCUCGGGGGCGCGCUGAGACGGCGGGUGAGCUCCACGAGAGCGCCGUCGCCACUUCGGGCCAACUUUGCGAUUCCCGACAGUUAAGCA\
) } def
/len { sequence length } bind def

/coor [
[123.96257019 262.67044067]
[135.71743774 253.35253906]
[150.53988647 251.05151367]
[164.56472778 256.36587524]
[156.53153992 243.69828796]
[148.49835205 231.03070068]
[140.46516418 218.36309814]
[132.43197632 205.69551086]
[124.39878082 193.02792358]
[119.99900818 191.12640381]
[116.75582123 186.43063354]
[116.31723785 179.80307007]
[108.70953369 166.87547302]
[101.10183716 153.94787598]
[93.49413300 141.02027893]
[85.88642883 128.09268188]
[74.47628784 118.35569763]
[60.51318359 112.87557983]
[46.55007553 107.39546204]
[32.58697128 101.91535187]
[18.62386322 96.43523407]
[4.28010321 102.50930023]
[-9.80240631 96.75277710]
[-15.50470352 83.04075623]
[-29.46780968 77.56063843]
[-43.43091583 72.08052826]
[-57.39402390 66.60041046]
[-71.44628906 61.35313797]
[-85.58382416 56.34016037]
[-101.17632294 59.02059174]
[-110.58601379 47.47472763]
[-124.72355652 42.46175003]
[-127.15950012 52.30785751]
[-135.14634705 61.31822968]
[-148.12121582 66.76845551]
[-164.30494690 66.32828522]
[-178.98233032 63.23400497]
[-193.65969849 60.13972092]
[-208.33708191 57.04543686]
[-223.01445007 53.95115662]
[-237.69183350 50.85687256]
[-252.36921692 47.76258850]
[-267.04660034 44.66830826]
[-281.72396851 41.57402420]
[-296.40133667 38.47974014]
[-311.15130615 35.75233841]
[-325.96466064 33.39350891]
[-340.77804565 31.03467941]
[-352.46902466 41.42000961]
[-368.10177612 41.80913925]
[-380.29495239 32.01833344]
[-383.29138184 16.67051506]
[-375.67617798 3.01245093]
[-361.04501343 -2.50693774]
[-346.30630493 2.71843576]
[-338.41921997 16.22130966]
[-323.60583496 18.58013916]
[-308.79248047 20.93896866]
[-305.72753906 19.15999794]
[-301.64398193 18.78815269]
[-297.21762085 20.28799820]
[-293.30706787 23.80236435]
[-278.62969971 26.89664650]
[-263.95230103 29.99093056]
[-249.27493286 33.08521271]
[-234.59754944 36.17949677]
[-219.92018127 39.27377701]
[-205.24279785 42.36806107]
[-190.56541443 45.46234131]
[-175.88804626 48.55662537]
[-161.21066284 51.65090942]
[-152.65777588 39.32742691]
[-144.10563660 27.00505257]
[-152.13882446 14.33746338]
[-160.17202759 1.66987312]
[-174.94540405 -5.44905043]
[-175.89694214 -21.82056999]
[-162.04776001 -30.60306740]
[-147.64471436 -22.76186562]
[-147.50442505 -6.36331797]
[-139.47123718 6.30427217]
[-131.43804932 18.97186279]
[-119.71057892 28.32420921]
[-105.57303619 33.33718872]
[-90.99175262 30.29819679]
[-80.57084656 42.20262146]
[-66.43331146 47.21559906]
[-61.79756927 45.99753571]
[-56.34807587 47.69209290]
[-51.91390610 52.63730621]
[-37.95080185 58.11742020]
[-23.98769569 63.59753418]
[-10.02458858 69.07765198]
[3.48203135 62.90457916]
[17.72067261 68.26328278]
[24.10397911 82.47212982]
[38.06708527 87.95223999]
[52.03019333 93.43235779]
[65.99330139 98.91247559]
[79.95640564 104.39258575]
[88.13278961 85.89159393]
[106.18480682 84.86246490]
[117.59494781 75.12548065]
[129.00508118 65.38850403]
[140.41522217 55.65152359]
[151.74403381 45.82004929]
[162.99075317 35.89476013]
[174.23747253 25.96947479]
[185.48419189 16.04418755]
[196.73091125 6.11889887]
[201.95835876 -8.81376171]
[216.62069702 -11.43393517]
[227.86740112 -21.35922241]
[239.11412048 -31.28450966]
[250.36083984 -41.20979691]
[247.92535400 -56.44370270]
[254.13348389 -70.56683350]
[267.00424194 -79.07253265]
[282.43063354 -79.24668121]
[295.49011230 -71.03369904]
[302.01550293 -57.05432510]
[299.92453003 -41.76931763]
[289.88442993 -30.05607414]
[275.09896851 -25.65224648]
[260.28613281 -29.96307945]
[249.03941345 -20.03779221]
[237.79269409 -10.11250496]
[226.54597473 -0.18721701]
[222.12297058 14.03552055]
[206.65620422 17.36561775]
[195.40948486 27.29090500]
[184.16276550 37.21619415]
[172.91604614 47.14147949]
[161.66932678 57.06676865]
[158.72891235 63.86286545]
[150.15220642 67.06166077]
[138.74206543 76.79863739]
[127.33192444 86.53562164]
[115.92179108 96.27259827]
[114.10840607 111.86721039]
[98.81402588 120.48497009]
[106.42173004 133.41256714]
[114.02943420 146.34016418]
[121.63713837 159.26777649]
[129.24484253 172.19537354]
[137.06637573 184.99473572]
[145.09956360 197.66232300]
[153.13275146 210.32991028]
[161.16593933 222.99749756]
[169.19912720 235.66510010]
[177.23233032 248.33268738]
[186.28939819 260.28967285]
[196.30780029 271.45352173]
[206.32621765 282.61734009]
[216.43707275 293.69754028]
[226.63966370 304.69332886]
[236.84225464 315.68908691]
[247.04484558 326.68487549]
[257.24743652 337.68066406]
[271.48675537 332.35989380]
[286.67816162 332.89831543]
[300.50506592 339.21377563]
[310.85897827 350.34323120]
[316.16098022 364.58953857]
[315.60260010 379.78021240]
[309.26895142 393.59878540]
[298.12588501 403.93804932]
[283.87261963 409.22134399]
[268.68267822 408.64297485]
[254.87243652 402.29113770]
[244.54785156 391.13449097]
[239.28332520 376.87426758]
[239.88168335 361.68511963]
[246.25166321 347.88323975]
[236.04907227 336.88748169]
[225.84648132 325.89169312]
[215.64389038 314.89590454]
[205.44129944 303.90014648]
[198.57400513 301.13006592]
[195.16238403 292.63577271]
[185.14396667 281.47192383]
[175.12554932 270.30807495]
[176.44242859 285.25018311]
[170.21189880 298.89495850]
[158.05793762 307.68594360]
[143.14849854 309.33172607]
[129.36973572 303.40335083]
[120.31310272 291.44604492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 151]
[5 150]
[6 149]
[7 148]
[8 147]
[9 146]
[12 145]
[13 144]
[14 143]
[15 142]
[16 141]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[24 93]
[25 92]
[26 91]
[27 90]
[28 87]
[29 86]
[31 84]
[32 83]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 58]
[47 57]
[48 56]
[73 82]
[74 81]
[75 80]
[102 139]
[103 138]
[104 137]
[105 136]
[106 134]
[107 133]
[108 132]
[109 131]
[110 130]
[112 128]
[113 127]
[114 126]
[115 125]
[152 182]
[153 181]
[154 180]
[155 178]
[156 177]
[157 176]
[158 175]
[159 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
