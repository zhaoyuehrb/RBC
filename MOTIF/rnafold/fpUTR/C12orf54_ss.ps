%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUGGGGCUCAAAUAGGAAAAAGUCUAGGGGUGAAGGAGUGGGGCAAAGUGUAAUUUGGGGAACCAAGCAGGGGCCUGGAGCUAUCUCCAUCUUCAGCUCCAGAGUCCUUGGUUUCUGUCUGAGAACAA\
) } def
/len { sequence length } bind def

/coor [
[86.75292969 515.71343994]
[71.63623047 517.07348633]
[57.05009842 512.87713623]
[44.96718979 503.69195557]
[37.02162170 490.76013184]
[34.28796387 475.83056641]
[37.13592529 460.92239380]
[45.18033600 448.05181885]
[57.33326340 438.95947266]
[71.95111847 434.87503052]
[73.37696075 419.94293213]
[74.80279541 405.01086426]
[76.22863770 390.07879639]
[69.73617554 376.67367554]
[78.75022888 363.67144775]
[80.17607117 348.73937988]
[81.60191345 333.80731201]
[83.02775574 318.87521362]
[84.45359802 303.94314575]
[85.87943268 289.01107788]
[87.30527496 274.07897949]
[79.14435577 258.59002686]
[89.82444000 243.64494324]
[90.89452362 228.68316650]
[91.96461487 213.72138977]
[92.50000000 198.73094177]
[92.50000000 183.73094177]
[92.50000000 168.73094177]
[84.76270294 156.00367737]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[89.45893860 21.74844551]
[89.93198395 15.96150589]
[92.87395477 12.08701992]
[93.58768463 -2.89599013]
[94.30141449 -17.87899971]
[95.01514435 -32.86201096]
[95.72886658 -47.84502029]
[96.44259644 -62.82802963]
[84.25570679 -54.08276749]
[69.42037964 -56.29929733]
[60.32188416 -68.22479248]
[62.10290527 -83.11868286]
[73.75676727 -92.56259918]
[88.69643402 -91.21862030]
[98.47746277 -79.84698486]
[101.31623077 -94.57592010]
[104.15499878 -109.30484772]
[99.16922760 -124.31993103]
[109.17535400 -135.35290527]
[112.01412201 -150.08183289]
[114.85289001 -164.81077576]
[109.86711121 -179.82585144]
[119.87324524 -190.85882568]
[122.71201324 -205.58775330]
[125.55078125 -220.31669617]
[116.96006012 -233.31042480]
[120.04879761 -248.20722961]
[132.48928833 -256.31707764]
[135.32804871 -271.04602051]
[127.56276703 -285.08453369]
[133.82981873 -299.85284424]
[149.32168579 -304.02200317]
[162.15431213 -294.39373779]
[162.48362732 -278.35406494]
[150.05699158 -268.20724487]
[147.21821594 -253.47831726]
[155.75343323 -241.32571411]
[153.08433533 -226.34805298]
[140.27970886 -217.47792053]
[137.44094849 -202.74899292]
[134.60217285 -188.02006531]
[139.79100037 -174.05848694]
[129.58181763 -161.97200012]
[126.74304962 -147.24307251]
[123.90428162 -132.51414490]
[129.09310913 -118.55257416]
[118.88393402 -106.46607971]
[116.04516602 -91.73715210]
[113.20639801 -77.00821686]
[111.42560577 -62.11430359]
[110.71188354 -47.13129044]
[109.99815369 -32.14828110]
[109.28442383 -17.16527176]
[108.57069397 -2.18226147]
[107.85696411 12.80074883]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[115.23729706 156.00367737]
[107.50000000 168.73094177]
[107.50000000 183.73094177]
[107.50000000 198.73094177]
[110.21888733 203.41535950]
[110.74663544 208.18969727]
[109.43185425 212.18089294]
[106.92639923 214.79147339]
[105.85630798 229.75325012]
[104.78622437 244.71504211]
[112.65561676 255.01451111]
[111.39713287 267.51089478]
[102.23735809 275.50482178]
[100.81151581 290.43688965]
[99.38567352 305.36898804]
[97.95983124 320.30105591]
[96.53398895 335.23315430]
[95.10815430 350.16522217]
[93.68231201 365.09729004]
[100.07278442 379.57046509]
[91.16072083 391.50463867]
[89.73487854 406.43670654]
[88.30903625 421.36877441]
[86.88319397 436.30087280]
[100.46389771 443.07794189]
[110.67646790 454.30593872]
[116.13973236 468.46636963]
[116.11483765 483.64410400]
[110.60514069 497.78649902]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 126]
[11 125]
[12 124]
[13 123]
[15 121]
[16 120]
[17 119]
[18 118]
[19 117]
[20 116]
[21 115]
[23 112]
[24 111]
[25 110]
[26 106]
[27 105]
[28 104]
[30 102]
[31 101]
[32 100]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[53 87]
[54 86]
[55 85]
[57 83]
[58 82]
[59 81]
[61 79]
[62 78]
[63 77]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
