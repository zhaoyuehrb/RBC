%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAGAAAACUCAAGUGAAACUGACUCUGCUAGAACAGUGCCGUGCUUUUCCACAGAAGGUUAGACCCUGAAAGAG\
) } def
/len { sequence length } bind def

/coor [
[25.80619812 274.99002075]
[14.44544315 269.62646484]
[5.15903425 281.40621948]
[-4.12737513 293.18597412]
[0.21403760 308.08334351]
[-5.06181622 322.67599487]
[-17.92626190 331.35272217]
[-33.43265915 330.77716064]
[-45.61848068 321.17062378]
[-49.79803085 306.22705078]
[-44.36418533 291.69250488]
[-31.40637016 283.15582275]
[-15.90712929 283.89956665]
[-6.62071991 272.11981201]
[2.66568947 260.34005737]
[-7.84924603 246.03256226]
[-13.75032043 229.26995850]
[-14.51836109 211.50038147]
[-10.07805252 194.26171875]
[-0.80521989 179.04846191]
[12.50496578 167.18215942]
[28.70616531 159.69665527]
[46.39960480 157.24795532]
[64.05482483 160.05679321]
[70.33472443 146.43464661]
[76.61462402 132.81250000]
[82.89451599 119.19035339]
[89.17441559 105.56820679]
[94.91466522 91.71001434]
[100.10642242 77.63714600]
[105.29817200 63.56427383]
[110.48992920 49.49140167]
[103.42459106 37.83816910]
[104.43328857 24.44452477]
[112.91293335 14.28234100]
[125.52981567 10.99097061]
[131.27006531 -2.86722255]
[137.01031494 -16.72541618]
[135.14308167 -32.43605042]
[147.16192627 -41.23357773]
[152.90219116 -55.09177017]
[158.64244080 -68.94996643]
[153.85615540 -84.26241302]
[162.96269226 -97.47037506]
[178.97631836 -98.44184113]
[189.61271667 -86.43157959]
[186.71258545 -70.65283203]
[172.50062561 -63.20971298]
[166.76037598 -49.35152054]
[161.02012634 -35.49332809]
[163.29794312 -20.77392387]
[150.86851501 -10.98516369]
[145.12826538 2.87302899]
[139.38801575 16.73122215]
[146.50199890 31.83613586]
[140.49250793 47.77112198]
[124.56280518 54.68315887]
[119.37104797 68.75602722]
[114.17929077 82.82889557]
[108.98753357 96.90177155]
[110.13351440 102.31955719]
[108.00640106 107.95239258]
[102.79656219 111.84809875]
[96.51666260 125.47025299]
[90.23677063 139.09239197]
[83.95687103 152.71453857]
[77.67697906 166.33668518]
[87.65451813 174.11866760]
[95.80011749 183.79319763]
[101.76268005 194.93916321]
[105.28606415 207.07205200]
[106.22008514 219.66516113]
[104.52690887 232.17231750]
[100.28259277 244.05166626]
[93.67365265 254.78909302]
[84.98886871 263.92050171]
[74.60671234 271.05184937]
[62.97877121 275.87619019]
[50.61018753 278.18682861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[29 60]
[30 59]
[31 58]
[32 57]
[36 54]
[37 53]
[38 52]
[40 50]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
