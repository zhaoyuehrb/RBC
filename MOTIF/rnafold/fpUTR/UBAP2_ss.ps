%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGACGCGAGGUCACGUGACGGGUUGGGCAGCCUGUGCCGCCGCCGCCGCUUUGUAAGAGGCACAUUGGCAGAUUUUCUAUUUUGUACAUACAUUAUUUUGUAUAUACUGUAU\
) } def
/len { sequence length } bind def

/coor [
[98.19976807 121.38837433]
[91.79811859 134.95373535]
[85.39647675 148.51908875]
[78.99482727 162.08444214]
[72.59317780 175.64981079]
[76.63572693 191.17518616]
[66.90303802 203.92878723]
[50.86121368 204.12715149]
[40.81615829 191.61808777]
[44.47358322 175.99749756]
[59.02782059 169.24815369]
[65.42946625 155.68280029]
[71.83111572 142.11744690]
[78.23276520 128.55209351]
[84.63440704 114.98672485]
[80.44617462 108.76509857]
[65.48175812 109.79772949]
[72.06970978 96.32183075]
[67.88147736 90.10020447]
[52.90425110 90.92652130]
[37.92702866 91.75283813]
[22.94980621 92.57914734]
[7.97258425 93.40546417]
[-7.00463867 94.23178101]
[-21.98186111 95.05809784]
[-35.40725708 104.47567749]
[-50.15964890 97.31334686]
[-51.06304169 80.93910217]
[-37.18810272 72.19736481]
[-22.80817795 80.08087921]
[-7.83095503 79.25456238]
[7.14626741 78.42824554]
[22.12349129 77.60192871]
[37.10071182 76.77561188]
[52.07793427 75.94929504]
[67.05516052 75.12297821]
[76.26834869 63.28586960]
[73.39269257 48.56409836]
[70.51702881 33.84232712]
[67.64137268 19.12055397]
[54.12469482 15.23890114]
[43.66913223 5.93380976]
[38.29639053 -6.91849136]
[39.01194000 -20.76368523]
[45.61737823 -32.87697220]
[56.76081467 -40.89933777]
[54.29189682 -55.69475555]
[51.82297897 -70.49017334]
[41.91977310 -82.82861328]
[47.45670319 -96.65582275]
[44.98778534 -111.45124054]
[42.51886749 -126.24665833]
[33.94795609 -140.87457275]
[45.63153839 -153.15994263]
[60.67112732 -145.33387756]
[57.31428528 -128.71557617]
[59.78320694 -113.92015839]
[62.25212479 -99.12474060]
[71.97873688 -87.84456635]
[66.61840057 -72.95909882]
[69.08731842 -58.16367722]
[71.55623627 -43.36825562]
[86.77043152 -38.11667252]
[97.35123444 -25.86459923]
[100.36608124 -9.86427402]
[94.90744019 5.57442808]
[82.36314392 16.24489403]
[85.23880005 30.96666718]
[88.11446381 45.68843842]
[90.99011993 60.41021347]
[91.62072754 45.42347336]
[96.99227905 31.41824532]
[106.54518890 19.85355949]
[119.28424835 11.93419456]
[133.88233948 8.48517323]
[148.81866455 9.86580372]
[162.53720093 15.93225765]
[173.60877991 26.05254555]
[180.87998962 39.17235947]
[183.59332275 53.92491150]
[181.46614075 68.77331543]
[174.72001648 82.17070007]
[164.05776978 92.72135925]
[150.59014893 99.32614899]
[135.72465515 101.29713440]
[148.05133057 109.84426117]
[160.37799072 118.39138031]
[176.12744141 119.89648438]
[182.17765808 133.50692749]
[194.50433350 142.05404663]
[206.83099365 150.60116577]
[219.15766907 159.14828491]
[231.48432922 167.69541931]
[246.98913574 164.63330078]
[260.07122803 173.50090027]
[262.96923828 189.03721619]
[253.96383667 202.02482605]
[238.39775085 204.75842285]
[225.50607300 195.61619568]
[222.93721008 180.02207947]
[210.61053467 171.47496033]
[198.28387451 162.92784119]
[185.95721436 154.38072205]
[173.63053894 145.83360291]
[158.76277161 144.93983459]
[151.83087158 130.71804810]
[139.50421143 122.17092133]
[127.17754364 113.62380219]
[119.93309784 115.56494904]
[130.53976440 126.17148590]
[126.65765381 140.66041565]
[112.16883850 144.54296875]
[101.56198120 133.93663025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[5 11]
[19 36]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[37 70]
[38 69]
[39 68]
[40 67]
[46 62]
[47 61]
[48 60]
[50 58]
[51 57]
[52 56]
[85 108]
[86 107]
[87 106]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
