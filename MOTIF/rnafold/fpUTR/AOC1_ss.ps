%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGAUUGACUUCAAGAAGGAGUCAGAGAUCAGCUUAAGGGCAAAGGCUGGAAGCAGAGCGAACUGGGAGCAGAGCACACAGAGCCGUGGAGCGAGAG\
) } def
/len { sequence length } bind def

/coor [
[-35.89749908 253.51838684]
[-40.63843536 239.28730774]
[-36.34183121 224.91604614]
[-49.78173447 231.57705688]
[-63.22164154 238.23805237]
[-76.66155243 244.89904785]
[-89.76928711 252.19200134]
[-102.51517487 260.10037231]
[-115.26105499 268.00875854]
[-128.00692749 275.91714478]
[-140.75282288 283.82553101]
[-153.49870300 291.73391724]
[-166.24458313 299.64230347]
[-171.28833008 314.87188721]
[-186.38928223 320.28860474]
[-199.96327209 311.73721313]
[-201.59750366 295.77761841]
[-190.03833008 284.65261841]
[-174.15295410 286.89642334]
[-161.40707397 278.98803711]
[-148.66119385 271.07965088]
[-135.91531372 263.17126465]
[-123.16943359 255.26287842]
[-110.42355347 247.35450745]
[-97.67767334 239.44612122]
[-96.54454803 235.92185974]
[-93.53787231 232.82452393]
[-88.90508270 231.08139038]
[-83.32254791 231.45913696]
[-69.88264465 224.79814148]
[-56.44273376 218.13714600]
[-43.00282669 211.47615051]
[-30.51428032 203.16734314]
[-19.17803764 193.34443665]
[-7.84179354 183.52153015]
[3.49445009 173.69860840]
[2.03774905 158.89942932]
[9.66496372 145.92677307]
[23.63172913 139.86189270]
[38.66536331 143.22283936]
[50.00160599 133.39993286]
[61.33785248 123.57701874]
[55.53557968 108.57631683]
[55.34249115 92.49370575]
[60.78293228 77.35801697]
[71.17060089 65.07860565]
[85.19509888 57.20452499]
[101.08722687 54.72908783]
[103.92599487 40.00015640]
[106.76476288 25.27122498]
[100.89272308 9.95942688]
[111.42592621 -2.60972667]
[127.52871704 0.49383244]
[132.63592529 16.07742882]
[121.49369049 28.10999298]
[118.65492249 42.83892441]
[115.81615448 57.56785583]
[127.99269104 64.40439606]
[137.50724792 74.62592316]
[151.15173340 68.39469147]
[154.44442749 57.78547287]
[162.92695618 50.96175766]
[173.55310059 50.05636597]
[182.67977905 55.13125229]
[196.69200134 49.77795792]
[210.70420837 44.42466354]
[220.61914062 31.36227226]
[236.85284424 33.68582535]
[242.70547485 49.00505447]
[232.15635681 61.56084824]
[216.05751038 58.43688202]
[202.04528809 63.79017639]
[188.03306580 69.14347076]
[177.19429016 85.02335358]
[157.38294983 82.03917694]
[143.73847961 88.27040100]
[145.21943665 102.41662598]
[142.23921204 116.32443237]
[135.09179688 128.62171936]
[124.48236084 138.09529114]
[111.45757294 143.81051636]
[97.30242157 145.20355225]
[83.41340637 142.13694763]
[71.16075897 134.91326904]
[59.82451630 144.73617554]
[48.48827362 154.55908203]
[49.67551041 169.91801453]
[41.68467712 182.87950134]
[27.75860596 188.58287048]
[13.31736088 185.03485107]
[1.98111749 194.85777283]
[-9.35512638 204.68067932]
[-20.69137001 214.50358582]
[-5.77580976 216.09295654]
[5.51856422 225.96397400]
[9.09069157 240.53242493]
[3.64351058 254.50842285]
[-8.84507275 262.81716919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[33 93]
[34 92]
[35 91]
[36 90]
[40 86]
[41 85]
[42 84]
[48 57]
[49 56]
[50 55]
[59 76]
[60 75]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
