%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGCCGCGCUCCUCAUCUGCCCCGCGCCGAGCGCCGCCGCCGCCGCCGCCGCCGCCGCUCCGCUGCCCGCGCCGCCCGCGGCUCCCG\
) } def
/len { sequence length } bind def

/coor [
[48.03986740 359.91912842]
[39.92813110 346.87707520]
[39.44022751 331.52590942]
[46.70740509 317.99508667]
[59.77482605 309.92425537]
[59.25133514 294.93341064]
[58.72784042 279.94253540]
[58.20434952 264.95166016]
[57.68085861 249.96081543]
[57.15736389 234.96995544]
[46.88127899 245.89707947]
[32.61597824 250.53401184]
[17.87898827 247.73736572]
[6.30415583 238.19676208]
[0.74559581 224.26469421]
[2.57393670 209.37654114]
[11.33834648 197.20341492]
[24.87770081 190.74694824]
[39.85346985 191.59919739]
[52.57293701 199.54998779]
[59.89942551 212.63766479]
[64.03398132 198.21873474]
[56.61080933 185.35668945]
[60.59843826 170.67495728]
[74.13966370 162.97605896]
[78.27422333 148.55712891]
[82.40878296 134.13819885]
[86.54334259 119.71927643]
[77.54447937 108.10440063]
[77.05156708 93.41963959]
[85.25131226 81.22747040]
[99.03773499 76.14615631]
[103.17229462 61.72723389]
[107.30685425 47.30830765]
[111.44141388 32.88938522]
[104.03760529 19.18459129]
[108.43603516 4.62064886]
[121.54708862 -2.35329604]
[125.68164825 -16.77222061]
[122.04792023 -32.17048645]
[132.99360657 -42.27203751]
[137.12815857 -56.69096375]
[133.49443054 -72.08922577]
[144.44012451 -82.19078064]
[148.57467651 -96.60970306]
[139.68084717 -109.47180176]
[141.18682861 -125.03670502]
[152.38156128 -135.95512390]
[167.97923279 -137.07173157]
[180.61508179 -127.85929108]
[184.32287598 -112.66764069]
[177.35188293 -98.66980743]
[162.99360657 -92.47514343]
[158.85903931 -78.05622101]
[162.78849792 -63.68928909]
[151.54708862 -52.55640411]
[147.41253662 -38.13747787]
[151.34199524 -23.77054977]
[140.10057068 -12.63766098]
[135.96601868 1.78126431]
[143.38919067 14.64330387]
[139.40156555 29.32504272]
[125.86033630 37.02394485]
[121.72577667 51.44286728]
[117.59121704 65.86179352]
[113.45665741 80.28072357]
[122.45552063 91.89559937]
[122.94843292 106.58036041]
[114.74868774 118.77252960]
[100.96226501 123.85384369]
[96.82770538 138.27276611]
[92.69314575 152.69169617]
[88.55858612 167.11061096]
[95.96239471 180.81541443]
[91.56396484 195.37934875]
[78.45291138 202.35330200]
[74.31835175 216.77221680]
[76.68620300 226.64892578]
[72.14822388 234.44645691]
[72.67172241 249.43731689]
[73.19521332 264.42819214]
[73.71870422 279.41903687]
[74.24219513 294.40991211]
[74.76568604 309.40075684]
[88.36427307 316.54037476]
[96.55760956 329.53134155]
[97.14173889 344.87911987]
[89.95952606 358.45526123]
[76.94296265 366.60781860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[21 77]
[22 76]
[25 73]
[26 72]
[27 71]
[28 70]
[32 66]
[33 65]
[34 64]
[35 63]
[38 60]
[39 59]
[41 57]
[42 56]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
