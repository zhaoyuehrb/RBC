%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUCCUUGCGGCCCGGCCGACCUCGCGGGCUUGGGCCUGGGCGGGCACCGACGGAGCGGCCCUGGCUGCAGCCUCCCGGCGCCAGCGAAGACAGGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[31.94718742 145.55038452]
[23.53870392 133.12873840]
[20.72833824 118.39436340]
[23.97433472 103.74978638]
[32.74741745 91.58290863]
[45.61708069 83.87759399]
[60.48484421 81.89025879]
[74.92643738 85.94493103]
[86.58663940 95.37996674]
[77.25986481 83.63214874]
[67.93309021 71.88432312]
[58.60631180 60.13650513]
[49.27953720 48.38868713]
[39.95276260 36.64086533]
[30.62598801 24.89304733]
[13.39663029 18.62327003]
[11.31442451 1.27201557]
[1.63372433 -10.18590927]
[-8.04697609 -21.64383316]
[-17.72767639 -33.10175705]
[-27.40837669 -44.55968475]
[-42.91540527 -46.03272247]
[-52.56978989 -57.79059219]
[-51.06990433 -72.56509399]
[-60.75060654 -84.02301788]
[-76.25763702 -85.49606323]
[-85.91201782 -97.25392914]
[-84.41213226 -112.02843475]
[-94.09283447 -123.48635864]
[-103.77353668 -134.94429016]
[-113.62784576 -146.25325012]
[-123.65346527 -157.41061401]
[-133.67907715 -168.56799316]
[-143.70471191 -179.72535706]
[-153.73033142 -190.88273621]
[-169.14952087 -189.14256287]
[-182.63011169 -196.82717896]
[-188.98854065 -210.98168945]
[-185.77986145 -226.16339111]
[-174.23786926 -236.53460693]
[-158.80070496 -238.10740662]
[-145.40428162 -230.27699280]
[-139.19976807 -216.05435181]
[-142.57295227 -200.90835571]
[-132.54733276 -189.75097656]
[-122.52171326 -178.59361267]
[-112.49609375 -167.43623352]
[-102.47047424 -156.27886963]
[-95.54101562 -153.35784912]
[-92.31561279 -144.62498474]
[-82.63491058 -133.16705322]
[-72.95420837 -121.70913696]
[-58.13667679 -120.72107697]
[-48.15584564 -109.23901367]
[-49.29268265 -93.70372009]
[-39.61198044 -82.24579620]
[-24.79444695 -81.25773621]
[-14.81361771 -69.77568054]
[-15.95045185 -54.24038315]
[-6.26975203 -42.78245926]
[3.41094851 -31.32453346]
[13.09164906 -19.86660957]
[22.77235031 -8.40868473]
[34.89868546 -7.04138374]
[43.05062103 2.57446432]
[42.37380600 15.56627274]
[51.70058441 27.31409264]
[61.02735901 39.06191254]
[70.35413361 50.80973053]
[79.68090820 62.55755234]
[89.00768280 74.30537415]
[98.33445740 86.05319214]
[111.79176331 92.67897034]
[126.79001617 92.90772247]
[141.78826904 93.13646698]
[155.84257507 84.68611145]
[170.05488586 92.86792755]
[169.80480957 109.26516724]
[155.34959412 117.00975037]
[141.55952454 108.13471985]
[126.56127167 107.90597534]
[111.56301117 107.67723083]
[108.14789581 114.35457611]
[101.31766510 127.70927429]
[97.90254974 134.38662720]
[106.86672211 146.41340637]
[115.83089447 158.44020081]
[124.79506683 170.46697998]
[140.30876160 170.14302063]
[153.03077698 179.02728271]
[158.06922913 193.70356750]
[153.48675537 208.52856445]
[141.04537964 217.80174255]
[125.52908325 217.95739746]
[112.90419769 208.93565369]
[108.02524567 194.20556641]
[112.76828003 179.43115234]
[103.80410767 167.40437317]
[94.83993530 155.37757874]
[85.87576294 143.35079956]
[73.94049835 152.43647766]
[59.38503647 156.06117249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 72]
[10 71]
[11 70]
[12 69]
[13 68]
[14 67]
[15 66]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[24 56]
[25 55]
[28 52]
[29 51]
[30 50]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[73 82]
[74 81]
[75 80]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
