%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUUCGGCCCUCAGACUGGGCUGGGCAGGUCUGAGAGUUAGGGAAAGUCCGUUCCCACUGCCCUCGGGGAGAGAAGAAAGGAGGGGGCAAGGGAGAAGCUGCUGGUCGGACUCACA\
) } def
/len { sequence length } bind def

/coor [
[45.41086197 275.19754028]
[39.26229477 261.18136597]
[40.34322357 245.91406250]
[48.40526581 232.90399170]
[61.59581757 225.14074707]
[60.80418777 210.16165161]
[60.01255798 195.18255615]
[59.22092819 180.20346069]
[58.42929459 165.22436523]
[57.63766479 150.24526978]
[56.84603500 135.26615906]
[44.64133453 126.54577637]
[30.21394920 130.65072632]
[15.78656387 134.75566101]
[1.35917962 138.86061096]
[-13.06820488 142.96556091]
[-27.49559021 147.07049561]
[-41.92297363 151.17544556]
[-56.35036087 155.28039551]
[-63.35554886 166.20806885]
[-75.55158997 169.28312683]
[-86.19612885 163.37298584]
[-100.72684479 167.09565735]
[-114.56987000 176.88377380]
[-127.80758667 166.29135132]
[-121.29368591 150.63870239]
[-104.44952393 152.56494141]
[-89.91880798 148.84226990]
[-78.13355255 135.91217041]
[-60.45530319 140.85299683]
[-46.02791977 136.74806213]
[-31.60053444 132.64311218]
[-17.17314911 128.53816223]
[-2.74576521 124.43322754]
[11.68161964 120.32827759]
[26.10900497 116.22333527]
[40.53638840 112.11839294]
[43.06015015 105.05577087]
[28.30354881 107.74700165]
[18.59465599 96.31295776]
[23.64248466 82.18782043]
[38.39914322 79.49691010]
[48.10766983 90.93052673]
[50.63143158 83.86790466]
[42.07289505 71.54915619]
[33.51436234 59.23041153]
[19.51148796 49.67238617]
[24.81960297 33.57082367]
[41.76134109 34.21414185]
[45.83310699 50.67187500]
[54.39163971 62.99061966]
[62.95017624 75.30936432]
[92.91763306 61.90250778]
[119.03619385 73.07195282]
[130.25375366 63.11371613]
[141.47129822 53.15548325]
[152.68885803 43.19724655]
[163.90641785 33.23901367]
[165.47653198 20.35407066]
[175.13056946 12.29188442]
[187.28527832 12.99823952]
[198.76179504 3.33958316]
[210.23829651 -6.31907368]
[221.71481323 -15.97772980]
[233.19132996 -25.63638687]
[244.66784668 -35.29504395]
[256.14434814 -44.95370102]
[250.66448975 -59.06928635]
[250.06735229 -74.19946289]
[254.41772461 -88.70301056]
[263.24371338 -101.00670624]
[275.58792114 -109.77592468]
[290.11135864 -114.05945587]
[305.23861694 -113.39265442]
[319.32879639 -107.84783936]
[330.85354614 -98.02648163]
[338.56271362 -84.99392700]
[341.62005615 -70.16384125]
[339.69396973 -55.14489365]
[332.99334717 -41.56621552]
[322.24502563 -30.90073013]
[308.61492920 -24.30534363]
[293.58154297 -22.49547577]
[278.77554321 -25.66744804]
[265.80300903 -33.47718811]
[254.32649231 -23.81853104]
[242.84999084 -14.15987396]
[231.37347412 -4.50121737]
[219.89695740 5.15743971]
[208.42044067 14.81609631]
[196.94393921 24.47475243]
[191.93594360 41.23780060]
[173.86465454 44.45656967]
[162.64709473 54.41480255]
[151.42953491 64.37303925]
[140.21197510 74.33127594]
[128.99443054 84.28950500]
[133.63887024 93.50534058]
[135.30775452 104.08247375]
[133.61099243 115.04813385]
[128.47912598 125.32227325]
[120.19078827 133.82357788]
[109.36521149 139.58171082]
[96.91867065 141.84413147]
[83.98765564 140.16629028]
[71.82513428 134.47453308]
[72.61676025 149.45362854]
[73.40839386 164.43272400]
[74.20001984 179.41181946]
[74.99165344 194.39091492]
[75.78327942 209.37001038]
[76.57491302 224.34910583]
[90.51026154 230.67877197]
[99.89870453 242.76661682]
[102.58283997 257.83493042]
[97.94587708 272.42111206]
[87.05335999 283.17340088]
[72.40830231 287.62097168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[10 107]
[11 106]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[22 28]
[23 27]
[44 52]
[45 51]
[46 50]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
