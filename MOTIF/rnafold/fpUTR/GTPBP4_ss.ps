%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGUCCCACCUGCGCCCGACGGCGGAAGUUCCGGGAGUGCCAAGUACCCGCGUGCAUACGGCUGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[75.57344055 99.09078979]
[61.47805023 93.96048737]
[48.63389206 102.46541595]
[33.42239380 101.78446198]
[21.66768837 92.38813782]
[17.74683380 78.04363251]
[3.65144539 72.91333008]
[-10.44394398 67.78302765]
[-24.53933334 62.65272141]
[-38.94008255 58.45528793]
[-53.58452225 55.20869446]
[-65.20867920 65.31735992]
[-80.37892914 66.62773132]
[-93.25953674 58.84608841]
[-99.01918030 45.13607407]
[-113.66362000 41.88947678]
[-128.30805969 38.64288330]
[-142.95249939 35.39628983]
[-158.42141724 40.84096527]
[-170.69329834 29.96286201]
[-167.14387512 13.95244026]
[-151.42448425 9.27984905]
[-139.70590210 20.75185013]
[-125.06146240 23.99844360]
[-110.41702271 27.24503899]
[-95.77258301 30.49163246]
[-84.75846863 20.50027084]
[-69.79601288 18.89128876]
[-56.60088730 26.49011040]
[-50.33792877 40.56425476]
[-35.69348526 43.81084824]
[-32.33794022 41.96424484]
[-27.84651566 41.85541534]
[-23.15179443 44.03370667]
[-19.40903091 48.55733490]
[-5.31364202 53.68763733]
[8.78174782 58.81793976]
[22.87713623 63.94823837]
[35.10115814 55.47998428]
[50.14562225 55.83776093]
[62.23601532 65.09388733]
[66.60835266 79.86510468]
[80.70374298 84.99539948]
[88.96459961 78.18937683]
[99.34142303 75.56539917]
[109.84452820 77.62660980]
[118.46000671 83.97777557]
[123.53588867 93.40110779]
[124.09891510 104.08973694]
[137.40406799 111.01596069]
[153.21766663 110.52510834]
[160.93420410 123.26497650]
[174.23936462 130.19120789]
[187.54452515 137.11743164]
[196.91734314 138.37980652]
[201.26919556 144.64704895]
[214.25958252 152.14704895]
[230.06576538 149.40039062]
[241.97209167 160.15301514]
[240.84504700 176.15643311]
[227.54920959 185.13418579]
[212.28399658 180.19931030]
[206.75958252 165.13742065]
[193.76919556 157.63742065]
[180.61830139 150.42259216]
[167.31314087 143.49636841]
[154.00798035 136.57014465]
[139.14605713 137.55641174]
[130.47784424 124.32112885]
[117.17268372 117.39489746]
[99.59212494 124.44007111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[6 38]
[7 37]
[8 36]
[9 35]
[10 31]
[11 30]
[15 26]
[16 25]
[17 24]
[18 23]
[49 70]
[50 69]
[52 67]
[53 66]
[54 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
