%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGAGGCCCCGAGGGCGGGACGUUUCGUCCUCCCUGCCGCGCGUGCCCUGCCUACCACGAGCGGCCCGGGAGUACCUGUACCUUUCAGCUGCGCCGGCCGCGAGGCCACGGAGAGCUCGCCUUGGAGAGCCCAGGAGCAGGGGAGAC\
) } def
/len { sequence length } bind def

/coor [
[206.40994263 236.67611694]
[196.31826782 225.57844543]
[186.22659302 214.48078918]
[176.13490295 203.38313293]
[161.84788513 199.17242432]
[158.28781128 183.75697327]
[148.19613647 172.65930176]
[138.10446167 161.56164551]
[128.01277161 150.46398926]
[113.72574615 146.25328064]
[110.16567993 130.83782959]
[100.07400513 119.74016571]
[85.23708344 117.53431702]
[72.35340118 125.21617126]
[59.46972275 132.89802551]
[46.58604431 140.57986450]
[40.76847076 147.71185303]
[33.34876633 148.28456116]
[20.30599594 155.69308472]
[7.26322412 163.10159302]
[-5.77954674 170.51011658]
[-18.82231712 177.91864014]
[-31.86508942 185.32714844]
[-42.65120697 198.40751648]
[-58.20628357 191.66392517]
[-56.03231049 174.84994507]
[-39.27360535 172.28437805]
[-26.23083496 164.87585449]
[-13.18806362 157.46734619]
[-0.14529265 150.05882263]
[12.89747810 142.65031433]
[25.94025040 135.24179077]
[38.90419388 127.69618988]
[51.78787231 120.01434326]
[64.67155457 112.33248901]
[77.55522919 104.65064240]
[78.02955627 89.65814209]
[65.65721893 81.17726135]
[53.28488541 72.69637299]
[40.91255569 64.21549225]
[28.54022026 55.73461151]
[12.78292274 54.31399918]
[6.65979576 40.73620224]
[-5.71253729 32.25531769]
[-18.08486938 23.77443504]
[-30.45720291 15.29355145]
[-44.27695084 21.99505806]
[-59.59479141 20.87285614]
[-72.29030609 12.22881031]
[-78.94845581 -1.61187410]
[-77.77824402 -16.92612076]
[-69.09445190 -29.59447670]
[-55.23296356 -36.20921707]
[-39.92245865 -34.99100876]
[-27.28138542 -26.26754379]
[-20.71012688 -12.38539219]
[-21.97632027 2.92121887]
[-9.60398769 11.40210152]
[2.76834559 19.88298416]
[15.14067841 28.36386681]
[30.01302528 29.17786980]
[37.02110291 43.36227798]
[49.39343643 51.84315872]
[61.76576996 60.32404327]
[74.13809967 68.80492401]
[86.51043701 77.28581238]
[100.76647949 72.62048340]
[105.73132324 58.46596909]
[110.69616699 44.31145477]
[115.66101837 30.15693855]
[110.77885437 18.17070198]
[115.25551605 6.45629215]
[126.16546631 1.13402700]
[131.42762756 -12.91266823]
[136.68978882 -26.95936394]
[134.28547668 -42.59681320]
[145.99591064 -51.80089188]
[151.25807190 -65.84758759]
[156.52023315 -79.89428711]
[148.67166138 -93.41959381]
[151.40414429 -108.81659698]
[163.42745972 -118.81529236]
[179.06457520 -118.69460297]
[190.93212891 -108.51151276]
[193.42660522 -93.07417297]
[185.37022400 -79.67161560]
[170.56692505 -74.63212585]
[165.30476379 -60.58542633]
[160.04260254 -46.53873062]
[162.82330322 -31.90599632]
[150.73648071 -21.69720268]
[145.47431946 -7.65050745]
[140.21215820 6.39618826]
[144.05081177 23.49060059]
[129.81553650 35.12178421]
[124.85068512 49.27630234]
[119.88584137 63.43081665]
[114.92099762 77.58533478]
[120.24322510 87.32217407]
[120.65290070 97.18314362]
[117.06747437 105.06357574]
[111.17166138 109.64848328]
[121.26333618 120.74614716]
[136.27220154 125.75062561]
[139.11044312 140.37231445]
[149.20211792 151.46997070]
[159.29379272 162.56762695]
[169.38546753 173.66528320]
[184.39431763 178.66976929]
[187.23255920 193.29145813]
[197.32424927 204.38911438]
[207.41592407 215.48677063]
[217.50759888 226.58442688]
[236.34663391 223.64216614]
[253.05982971 232.50688171]
[261.06347656 249.48472595]
[257.32604980 267.72680664]
[268.09902954 278.16436768]
[278.87203979 288.60192871]
[289.75445557 298.92532349]
[300.74511719 309.13342285]
[311.84277344 319.22509766]
[323.04620361 329.19924927]
[334.24963379 339.17337036]
[345.45306396 349.14749146]
[356.65649414 359.12161255]
[372.69146729 359.63110352]
[382.17489624 372.57110596]
[377.83197021 388.01516724]
[362.99414062 394.11587524]
[349.04376221 386.19335938]
[346.68237305 370.32504272]
[335.47894287 360.35092163]
[324.27551270 350.37680054]
[313.07208252 340.40267944]
[301.86865234 330.42852783]
[294.73312378 328.31567383]
[290.53701782 320.12408447]
[279.54635620 309.91598511]
[272.45693970 307.65313721]
[268.43447876 299.37490845]
[257.66146851 288.93734741]
[246.88848877 278.49978638]
[236.34989929 282.49151611]
[225.03216553 282.22891235]
[214.59544373 277.71173096]
[206.58523560 269.56668091]
[202.20353699 258.96072388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[6 108]
[7 107]
[8 106]
[9 105]
[11 103]
[12 102]
[13 36]
[14 35]
[15 34]
[16 33]
[18 32]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[45 58]
[46 57]
[67 98]
[68 97]
[69 96]
[70 95]
[73 93]
[74 92]
[75 91]
[77 89]
[78 88]
[79 87]
[117 143]
[118 142]
[119 141]
[120 139]
[121 138]
[122 136]
[123 135]
[124 134]
[125 133]
[126 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
