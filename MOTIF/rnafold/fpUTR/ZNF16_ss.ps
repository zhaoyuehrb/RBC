%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCGGGGCGGGACUUCCGGGGGUCAGCCGGCGUUGGCUGAGACGUCUUCGUGCCACGGUGCUGCCUCCUUUCCAAGCGCGACCCGUUGAGAUCCCCUUGACCACACCCUCAUUCUCAGCUGGUGCUCAUGAAGGACAGAAGAGUCAAUGUCAGUACAAUGUGAGUGAAGGGCUGAGGUCCUUGUC\
) } def
/len { sequence length } bind def

/coor [
[70.22428894 159.54560852]
[56.91349411 150.75259399]
[46.07666016 139.04544067]
[38.33602524 125.09634399]
[34.13603973 109.70626068]
[19.14441872 110.20748901]
[4.15279484 110.70870972]
[-10.83882904 111.20993805]
[-25.81998444 111.96160126]
[-40.78648758 112.96348572]
[-55.75299072 113.96537781]
[-59.49727249 128.60906982]
[-67.57350922 141.36120605]
[-79.18013000 150.97966003]
[-93.17244720 156.53215027]
[-108.17549896 157.48660278]
[-122.71920013 153.76211548]
[-135.38233948 145.73561096]
[-144.93154907 134.20378113]
[-150.44129944 120.30401611]
[-165.40780640 121.30590057]
[-180.37431335 122.30779266]
[-195.34082031 123.30968475]
[-210.30731201 124.31156921]
[-218.68025208 128.01350403]
[-225.53189087 125.20303345]
[-240.51304626 125.95469666]
[-255.49420166 126.70635223]
[-263.92782593 130.26786804]
[-270.73156738 127.34329224]
[-285.72317505 127.84451294]
[-299.25711060 136.03862000]
[-312.23580933 128.73092651]
[-327.22744751 129.23214722]
[-342.21905518 129.73338318]
[-350.71102905 133.15345764]
[-357.46493530 130.11560059]
[-372.46282959 130.36625671]
[-387.46072388 130.61689758]
[-402.45602417 130.99285889]
[-417.44763184 131.49407959]
[-432.43927002 131.99530029]
[-447.43087769 132.49652100]
[-459.39566040 143.18406677]
[-475.18664551 140.35125732]
[-482.69030762 126.17118835]
[-476.15051270 111.52159119]
[-460.58401489 107.64038849]
[-447.93212891 117.50490570]
[-432.94049072 117.00367737]
[-417.94888306 116.50245667]
[-402.95724487 116.00122833]
[-396.36404419 112.62874603]
[-387.71139526 115.61899567]
[-372.71347046 115.36834717]
[-357.71557617 115.11769867]
[-342.72027588 114.74175262]
[-327.72866821 114.24053192]
[-312.73703003 113.73930359]
[-300.27542114 105.58103943]
[-286.22439575 112.85289001]
[-271.23278809 112.35166168]
[-256.24588013 111.72519684]
[-241.26470947 110.97354126]
[-226.28355408 110.22187805]
[-211.30920410 109.34506989]
[-196.34269714 108.34317780]
[-181.37620544 107.34129333]
[-166.40969849 106.33940125]
[-151.44319153 105.33750916]
[-147.83525085 90.82738495]
[-139.90829468 78.12567139]
[-128.42796326 68.48295593]
[-114.51045990 62.85320663]
[-99.51406097 61.79943085]
[-84.90651703 65.43738556]
[-72.12143707 73.42300415]
[-62.41756439 84.98490143]
[-56.75487900 98.99887848]
[-41.78837585 97.99698639]
[-26.82187271 96.99509430]
[-23.04821587 94.03845978]
[-17.37218666 93.43422699]
[-11.34005356 96.21831512]
[3.65157008 95.71708679]
[18.64319420 95.21586609]
[33.63481522 94.71463776]
[36.20712280 80.95423126]
[41.59992218 68.03590393]
[49.57478714 56.53081131]
[59.77911758 46.94763565]
[71.76174927 39.71008682]
[84.99288940 35.13815308]
[98.88753510 33.43397903]
[112.83137512 34.67291260]
[126.20789337 38.80017471]
[138.42567444 45.63328552]
[148.94453430 54.87012863]
[157.29937744 66.10231018]
[163.12083435 78.83322906]
[166.15150452 92.50000000]
[181.15150452 92.50000000]
[196.15150452 92.50000000]
[211.15150452 92.50000000]
[224.95169067 84.76270294]
[237.67895508 92.50000000]
[252.67895508 92.50000000]
[267.67843628 92.37467194]
[282.67633057 92.12402344]
[297.67425537 91.87337494]
[312.67214966 91.62272644]
[327.66744995 91.24678040]
[342.65905762 90.74555969]
[357.65069580 90.24433136]
[372.64230347 89.74311066]
[387.63394165 89.24188232]
[401.16784668 81.04776764]
[414.14657593 88.35546875]
[429.13818359 87.85424042]
[435.42822266 77.73808289]
[445.71987915 71.98146057]
[457.39193726 71.91765594]
[467.53515625 77.44660187]
[473.67736816 87.08867645]
[488.67736816 87.08867645]
[503.67736816 87.08867645]
[518.67736816 87.08867645]
[533.67736816 87.08867645]
[547.47753906 79.35137939]
[560.20483398 87.08867645]
[575.20483398 87.08867645]
[582.46209717 75.35697174]
[594.47576904 68.79976654]
[608.05200195 69.03823090]
[619.64154053 75.90293884]
[626.26745605 87.50610352]
[641.26538086 87.75675201]
[656.26324463 88.00740051]
[667.44805908 76.84159851]
[683.25207520 76.93859863]
[694.29901123 88.24085999]
[694.03491211 104.04293823]
[682.61651611 114.96975708]
[666.81811523 114.53861237]
[656.01263428 103.00530243]
[641.01470947 102.75466156]
[626.01678467 102.50401306]
[616.58123779 115.92596436]
[600.84948730 121.13811493]
[584.95092773 115.90129089]
[575.20483398 102.08867645]
[560.20483398 102.08867645]
[547.47753906 109.82598114]
[533.67736816 102.08867645]
[518.67736816 102.08867645]
[503.67736816 102.08867645]
[488.67736816 102.08867645]
[473.67736816 102.08867645]
[461.55520630 115.78696442]
[442.95172119 116.30356598]
[429.63940430 102.84586334]
[414.64779663 103.34709167]
[402.18615723 111.50535583]
[388.13516235 104.23350525]
[373.14352417 104.73473358]
[358.15191650 105.23595428]
[343.16027832 105.73718262]
[328.16867065 106.23840332]
[321.57546997 109.61088562]
[312.92279053 106.62063599]
[297.92489624 106.87128448]
[282.92697144 107.12193298]
[267.92907715 107.37258148]
[261.28045654 110.63441467]
[252.67895508 107.50000000]
[237.67895508 107.50000000]
[224.95169067 115.23729706]
[211.15150452 107.50000000]
[196.15150452 107.50000000]
[181.15150452 107.50000000]
[166.15150452 107.50000000]
[162.46813965 123.02182770]
[155.19793701 137.22178650]
[144.75834656 149.28451538]
[131.74879456 158.51741028]
[116.91628265 164.39030457]
[101.11246490 166.56602478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 87]
[6 86]
[7 85]
[8 84]
[9 81]
[10 80]
[11 79]
[20 70]
[21 69]
[22 68]
[23 67]
[24 66]
[26 65]
[27 64]
[28 63]
[30 62]
[31 61]
[33 59]
[34 58]
[35 57]
[37 56]
[38 55]
[39 54]
[40 52]
[41 51]
[42 50]
[43 49]
[101 181]
[102 180]
[103 179]
[104 178]
[106 176]
[107 175]
[108 173]
[109 172]
[110 171]
[111 170]
[112 168]
[113 167]
[114 166]
[115 165]
[116 164]
[118 162]
[119 161]
[124 158]
[125 157]
[126 156]
[127 155]
[128 154]
[130 152]
[131 151]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
