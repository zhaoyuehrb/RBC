%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAACCGGCUUCCCCGCCCCAUUUGGUGGGGGCUGGCCCUUGGCCCUCCAACUCCUUUACCCUACAUGCCUGAGAAGCCAGGGACCAAGAUGGAUCUUCUCCUCGACAUCAGCUAAGCCUGGAGGACUCUUCCCCUCAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[149.50817871 283.59939575]
[143.87916565 269.69561768]
[138.25016785 255.79188538]
[128.44235229 252.63050842]
[121.88644409 244.39645386]
[120.96467590 233.69039917]
[126.22805786 224.06996155]
[121.19829559 209.93838501]
[116.01782227 195.86135864]
[110.68721771 181.84049988]
[105.35662079 167.81962585]
[100.02602386 153.79876709]
[94.69541931 139.77789307]
[80.45958710 135.05126953]
[67.80154419 143.09950256]
[55.14349747 151.14772034]
[42.48545456 159.19595337]
[29.82741165 167.24417114]
[17.16936684 175.29240417]
[4.51132441 183.34062195]
[1.32198703 198.81976318]
[-11.92437267 207.44006348]
[-27.36892509 204.08724976]
[-35.84869003 190.75048828]
[-32.33277512 175.34223938]
[-18.90710831 167.00395203]
[-3.53690147 170.68258667]
[9.12114239 162.63435364]
[21.77918625 154.58613586]
[34.43722916 146.53790283]
[47.09527206 138.48968506]
[59.75331497 130.44145203]
[72.41136169 122.39322662]
[66.82658386 105.76470184]
[69.98847198 89.46104431]
[80.17959595 77.55219269]
[73.38402557 64.17982483]
[66.58845520 50.80745697]
[53.43871307 42.01001740]
[54.57050705 27.15847397]
[47.77493668 13.78610706]
[40.97936249 0.41373980]
[34.18379211 -12.95862770]
[27.38821983 -26.33099365]
[20.59264755 -39.70336151]
[13.79707527 -53.07572937]
[-1.85258651 -62.71741867]
[-0.31517911 -80.16859436]
[-7.39496374 -93.39268494]
[-14.47474766 -106.61678314]
[-29.12092972 -103.01953888]
[-44.20156479 -103.17848969]
[-58.76867294 -107.08364105]
[-71.90654755 -114.48952484]
[-82.78933716 -124.93058014]
[-90.73294067 -137.75048828]
[-95.23800659 -152.14337158]
[-96.02135468 -167.20448303]
[-93.03373718 -181.98707581]
[-86.46295929 -195.56188965]
[-76.72206879 -207.07562256]
[-64.42338562 -215.80448914]
[-50.34000397 -221.19978333]
[-35.35723114 -222.92237854]
[-20.41689110 -220.86396790]
[-6.45814657 -215.15394592]
[5.64154387 -206.15127563]
[15.12158298 -194.42182922]
[21.38604927 -180.70297241]
[24.04115105 -165.85705566]
[22.91998672 -150.81730652]
[18.09303474 -136.52915955]
[9.86371994 -123.89075470]
[-1.25065434 -113.69656372]
[5.82913017 -100.47247314]
[12.90891457 -87.24837494]
[24.43038368 -83.41992950]
[30.42139626 -72.40058899]
[27.16944313 -59.87129974]
[33.96501541 -46.49893188]
[40.76058578 -33.12656784]
[47.55615997 -19.75419998]
[54.35173035 -6.38183212]
[61.14730453 6.99053478]
[67.94287872 20.36290169]
[80.60655212 28.20385933]
[79.96081543 44.01188278]
[86.75639343 57.38425064]
[93.55196381 70.75661469]
[110.64194489 72.00890350]
[124.24729919 82.42668915]
[138.21040344 76.94657898]
[152.17350769 71.46646118]
[166.13661194 65.98634338]
[166.38586426 50.78745270]
[172.43710327 36.84288025]
[183.36753845 26.27907753]
[197.51037598 20.70694351]
[212.70892334 20.97618866]
[226.64552307 27.04575539]
[237.19493103 37.99008179]
[242.74845886 52.14023209]
[242.45922852 67.33841705]
[236.37132263 81.26702118]
[225.41313171 91.80203247]
[211.25569153 97.33693695]
[196.05790710 97.02770233]
[182.13731384 90.92149353]
[171.61672974 79.94944763]
[157.65362549 85.42956543]
[143.69052124 90.90968323]
[129.72741699 96.38979340]
[130.62637329 105.19140625]
[128.88291931 114.19059753]
[124.46712494 122.58589935]
[117.59362030 129.57858276]
[108.71628571 134.44729614]
[114.04689026 148.46815491]
[119.37748718 162.48902893]
[124.70808411 176.50988770]
[130.03868103 190.53076172]
[136.05529785 197.49990845]
[135.32987976 204.90863037]
[140.35963440 219.04020691]
[156.28988647 231.31658936]
[152.15391541 250.16287231]
[157.78292847 264.06661987]
[163.41192627 277.97036743]
[169.62989807 291.62091064]
[176.42546082 304.99325562]
[183.22103882 318.36563110]
[190.01661682 331.73800659]
[205.28950500 335.09548950]
[214.79006958 347.51617432]
[214.03240967 363.13537598]
[203.37429810 374.57821655]
[187.84814453 376.44171143]
[174.78492737 367.84597778]
[170.35270691 352.84967041]
[176.64424133 338.53356934]
[169.84867859 325.16122437]
[163.05310059 311.78884888]
[156.25752258 298.41647339]
[153.55973816 297.43499756]
[151.10328674 295.28756714]
[149.34878540 292.06622314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[7 124]
[8 123]
[9 121]
[10 120]
[11 119]
[12 118]
[13 117]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[36 89]
[37 88]
[38 87]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[48 76]
[49 75]
[50 74]
[91 112]
[92 111]
[93 110]
[94 109]
[129 143]
[130 142]
[131 141]
[132 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
