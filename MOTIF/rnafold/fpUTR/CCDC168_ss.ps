%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUUGAUAAGAUACCAGCAGCACUGGCCAAAUGUUGCACAUGGUUAUGAGUUGGGCAUACCGAGGUUUUAUAUUUCAGGGCCUCUGAAAUCAAGGACUUCUGAAUGAGACACCAGUCUCUUUCACAUAUGACAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[40.89051437 261.29846191]
[27.77003288 254.02847290]
[16.24831009 244.42378235]
[6.73534822 232.82621765]
[-0.43032774 219.64846802]
[-4.99372435 205.35948181]
[-6.79245138 190.46771240]
[-5.76249981 175.50311279]
[-1.94052148 160.99819946]
[4.53747702 147.46914673]
[13.44097328 135.39736938]
[24.45313263 125.21245575]
[37.18208313 117.27684784]
[51.17485428 111.87294006]
[65.93351746 109.19301605]
[80.93413544 109.33258820]
[65.94251251 108.83136749]
[50.95088959 108.33013916]
[35.95926666 107.82891846]
[20.96764374 107.32769012]
[10.98416519 115.57732391]
[-1.54098213 114.80398560]
[-9.88110733 105.97253418]
[-24.85784340 105.13743591]
[-33.68207550 107.80001068]
[-40.15780640 104.11322784]
[-55.11221695 102.94467163]
[-70.06662750 101.77611542]
[-85.02104187 100.60755920]
[-99.97545624 99.43900299]
[-114.92987061 98.27043915]
[-121.17141724 100.82075500]
[-126.88481903 99.91261292]
[-130.51954651 96.70210266]
[-145.40705872 94.86853790]
[-160.29457092 93.03496552]
[-176.75401306 97.09982300]
[-185.21644592 82.40888214]
[-173.44226074 70.21031952]
[-158.46101379 78.14745331]
[-143.57348633 79.98102570]
[-128.68597412 81.81459045]
[-113.76131439 83.31603241]
[-98.80690002 84.48458862]
[-83.85248566 85.65314484]
[-68.89807129 86.82170105]
[-53.94366074 87.99025726]
[-38.98924637 89.15881348]
[-24.02274513 90.16070557]
[-9.04600906 90.99580383]
[6.11867952 82.23281097]
[21.46886826 92.33606720]
[36.46049118 92.83729553]
[51.45211411 93.33851624]
[66.44374084 93.83974457]
[81.43536377 94.34096527]
[67.32310486 89.25724030]
[59.27561951 76.59873199]
[60.66064453 61.66281128]
[70.89857483 50.69992447]
[85.70499420 48.29786301]
[98.88365936 55.46184921]
[104.91951752 69.19387054]
[101.28597260 83.74835968]
[109.21585846 71.01584625]
[117.14573669 58.28333282]
[125.07562256 45.55081558]
[133.00550842 32.81830215]
[140.93539429 20.08578873]
[148.86528015 7.35327435]
[156.79516602 -5.37924051]
[153.43312073 -20.58892250]
[161.65652466 -33.38853836]
[176.17735291 -36.50000000]
[184.10723877 -49.23251343]
[192.03712463 -61.96503067]
[199.96701050 -74.69754028]
[207.89689636 -87.43006134]
[215.82678223 -100.16257477]
[223.75666809 -112.89508820]
[221.53970337 -128.78422546]
[232.68417358 -140.32460022]
[248.64099121 -138.66343689]
[257.16946411 -125.07502747]
[251.72724915 -109.98323822]
[236.48918152 -104.96520233]
[228.55929565 -92.23268890]
[220.62940979 -79.50017548]
[212.69952393 -66.76766205]
[204.76963806 -54.03514481]
[196.83975220 -41.30263138]
[188.90986633 -28.57011604]
[192.52162170 -14.16557407]
[184.66098022 -1.14002991]
[169.52767944 2.55064464]
[161.59779358 15.28315926]
[153.66790771 28.01567268]
[145.73802185 40.74818802]
[137.80813599 53.48070145]
[129.87825012 66.21321869]
[121.94837189 78.94573212]
[114.01848602 91.67824554]
[118.62194061 105.95438385]
[132.49606323 111.65602112]
[146.37019348 117.35765076]
[160.24432373 123.05928040]
[175.94969177 121.14830017]
[184.78065491 133.14259338]
[198.65478516 138.84423828]
[212.52891541 144.54586792]
[226.40304565 150.24749756]
[240.27716064 155.94912720]
[256.44903564 153.22827148]
[266.68124390 166.04365540]
[260.44778442 181.21191406]
[244.16108704 183.12924194]
[234.57553101 169.82325745]
[220.70141602 164.12162781]
[206.82728577 158.41999817]
[192.95315552 152.71835327]
[179.07902527 147.01672363]
[164.36602783 149.33552551]
[154.54269409 136.93341064]
[140.66856384 131.23178101]
[126.79443359 125.53014374]
[112.92031097 119.82851410]
[125.08628845 128.60284424]
[135.38798523 139.50582886]
[143.45880127 152.14947510]
[149.01155090 166.08386230]
[151.84861755 180.81312561]
[151.86903381 195.81311035]
[149.07211304 210.55003357]
[143.55734253 224.49949646]
[135.52098083 237.16508484]
[125.24902344 248.09608459]
[113.10698700 256.90350342]
[99.52695465 263.27395630]
[84.99217224 266.98074341]
[70.01987457 267.89193726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[23 50]
[24 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[34 42]
[35 41]
[36 40]
[64 102]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[74 92]
[75 91]
[76 90]
[77 89]
[78 88]
[79 87]
[80 86]
[103 126]
[104 125]
[105 124]
[106 123]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
