%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCCGCGGUGACGUCGGGAGGGCAGCGACGCGCGGAGGCGGCGGCGGAGCCUCCUCCUGCUGCUGCUGCGCCCCAUCCCCCCGCGGCCGGCCAGUUCCAGCCCGCACCCCGCGUCGGUGCCCGCGCCCCUCCCCGGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[112.76875305 665.69537354]
[123.39707947 653.99859619]
[122.44250488 639.02899170]
[121.48793793 624.05944824]
[120.53337097 609.08984375]
[119.57880402 594.12023926]
[118.62423706 579.15063477]
[117.66966248 564.18103027]
[114.08029938 557.66076660]
[116.85713959 548.88421631]
[116.22052002 533.89770508]
[112.77035522 527.30273438]
[115.73285675 518.58709717]
[115.41447449 503.59045410]
[107.99452209 498.49829102]
[103.72083282 490.42184448]
[103.68305206 481.14614868]
[108.01805115 472.78961182]
[115.84944916 467.32009888]
[116.48606873 452.33358765]
[117.12268829 437.34710693]
[106.90289307 420.98007202]
[117.79360962 404.07098389]
[117.79360962 389.07098389]
[117.79360962 374.07098389]
[117.79360962 359.07098389]
[117.79360962 344.07098389]
[110.05631256 331.34371948]
[117.79360962 317.54354858]
[117.79360962 302.54354858]
[117.79360962 287.54354858]
[117.79360962 272.54354858]
[117.79360962 257.54354858]
[117.79360962 242.54354858]
[117.79360962 227.54354858]
[114.62645721 220.80805969]
[117.95619202 212.22601318]
[118.27457428 197.22938538]
[107.81510162 186.68733215]
[107.92435455 171.47409058]
[119.05275726 160.57470703]
[119.37113953 145.57809448]
[119.68952179 130.58146667]
[56.65084076 103.89770508]
[45.82149887 93.51862335]
[34.99215698 83.13954163]
[24.16281509 72.76045990]
[13.33347416 62.38137436]
[2.39458632 52.11781311]
[-8.65261555 41.97092438]
[-19.69981766 31.82403564]
[-30.74701881 21.67714882]
[-46.86226273 18.63890839]
[-52.03261948 3.07614923]
[-40.93926620 -9.00149632]
[-24.99409485 -5.16958284]
[-20.60013199 10.62994671]
[-9.55292892 20.77683449]
[1.49427247 30.92372322]
[12.54147434 41.07061005]
[19.64447212 43.29433823]
[23.71255684 51.55203247]
[34.54189682 61.93111801]
[45.37123871 72.31020355]
[56.20058060 82.68928528]
[67.02992249 93.06836700]
[74.20117188 90.87219238]
[95.71492767 84.28368378]
[98.87511444 69.62035370]
[102.03530121 54.95702744]
[105.19549561 40.29369736]
[108.35568237 25.63036919]
[111.51586914 10.96704006]
[99.72544861 1.20770979]
[93.83163452 -12.91750050]
[95.18878937 -28.16271973]
[103.48503876 -41.02470779]
[116.81397247 -48.54787827]
[132.11270142 -49.00345612]
[145.86567688 -42.28675461]
[154.91258240 -29.94122505]
[157.17449951 -14.80377674]
[152.13165283 -0.35288593]
[140.94284058 10.09073925]
[126.17919922 14.12722874]
[123.01901245 28.79055786]
[119.85881805 43.45388794]
[116.69863129 58.11721420]
[113.53844452 72.78054047]
[110.37825012 87.44387054]
[116.45522308 91.83937073]
[134.68614197 105.02587128]
[147.62312317 97.43414307]
[160.56011963 89.84241486]
[161.93878174 74.38671112]
[172.16412354 62.71529388]
[187.30430603 59.31607056]
[201.53759766 65.49610901]
[209.39102173 78.87905884]
[207.84477234 94.31890106]
[197.49342346 105.87870026]
[182.31726074 109.11348724]
[168.15184021 102.77940369]
[155.21485901 110.37113190]
[142.27786255 117.96286011]
[134.68614197 130.89984131]
[134.36775208 145.89646912]
[134.04937744 160.89309692]
[144.70516968 172.25494385]
[144.16865540 187.45912170]
[133.27119446 197.54777527]
[132.95280457 212.54438782]
[132.79360962 227.54354858]
[132.79360962 242.54354858]
[132.79360962 257.54354858]
[132.79360962 272.54354858]
[132.79360962 287.54354858]
[132.79360962 302.54354858]
[132.79360962 317.54354858]
[140.53091431 331.34371948]
[132.79360962 344.07098389]
[132.79360962 359.07098389]
[132.79360962 374.07098389]
[132.79360962 389.07098389]
[132.79360962 404.07098389]
[140.97679138 411.36810303]
[143.69883728 421.76126099]
[140.28591919 431.71566772]
[132.10917664 437.98373413]
[131.47254944 452.97021484]
[130.83593750 467.95669556]
[141.96549988 486.21591187]
[130.41110229 503.27209473]
[130.72947693 518.26873779]
[131.20700073 533.26110840]
[131.84362793 548.24761963]
[132.63926697 563.22650146]
[133.59382629 578.19604492]
[134.54840088 593.16564941]
[135.50296021 608.13525391]
[136.45753479 623.10485840]
[137.41210938 638.07446289]
[138.36666870 653.04406738]
[150.39460754 663.29608154]
[151.56706238 679.05682373]
[141.18843079 690.97570801]
[125.41617584 691.98144531]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[5 140]
[6 139]
[7 138]
[8 137]
[10 136]
[11 135]
[13 134]
[14 133]
[19 131]
[20 130]
[21 129]
[23 125]
[24 124]
[25 123]
[26 122]
[27 121]
[29 119]
[30 118]
[31 117]
[32 116]
[33 115]
[34 114]
[35 113]
[37 112]
[38 111]
[41 108]
[42 107]
[43 106]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 60]
[50 59]
[51 58]
[52 57]
[68 90]
[69 89]
[70 88]
[71 87]
[72 86]
[73 85]
[92 105]
[93 104]
[94 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
