%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGUCCGGUCUGCCUGGUCUCUCUAACCGCGCCAGUGUGCCUCCGACUCGGAACGGCUUCCGCGGCCGGGGCAGCGAGGGCCGGGGGCGGCGGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[76.23906708 472.69937134]
[60.50089264 471.25524902]
[50.45783997 459.05227661]
[52.06827164 443.33026123]
[64.37674713 433.41677856]
[65.74736786 418.47952271]
[67.11799622 403.54226685]
[68.48862457 388.60504150]
[69.85924530 373.66778564]
[71.22987366 358.73052979]
[72.60050201 343.79327393]
[59.75658798 336.21044922]
[51.44449234 323.75177002]
[49.35742950 308.85864258]
[53.96240616 294.47760010]
[64.39705658 283.47738647]
[78.63059235 278.07666016]
[80.00121307 263.13940430]
[81.37184143 248.20214844]
[82.74246979 233.26490784]
[84.11309052 218.32765198]
[85.48371887 203.39041138]
[86.85434723 188.45315552]
[87.99701691 173.49674988]
[88.91147614 158.52464294]
[81.96447754 145.34934998]
[90.52870178 132.04653931]
[91.44316101 117.07444763]
[81.92004395 106.15398407]
[82.80338287 91.69141388]
[93.58473969 82.01109314]
[94.49919891 67.03899384]
[84.30363464 55.26240158]
[85.44430542 40.09159088]
[96.73432159 30.44425011]
[97.64878082 15.47214985]
[98.56324005 0.50005043]
[95.93045807 -8.42937374]
[99.74076843 -14.91252899]
[101.11138916 -29.84977722]
[102.48201752 -44.78702545]
[93.12426758 -62.51269913]
[104.56021881 -77.97840118]
[105.01766205 -92.97142792]
[105.47510529 -107.96445465]
[105.47510529 -122.96445465]
[105.01766205 -137.95747375]
[104.56021881 -152.95050049]
[104.10277557 -167.94352722]
[97.57621765 -183.59089661]
[110.80535889 -194.19401550]
[124.65629578 -184.41711426]
[119.09580231 -168.40097046]
[119.55324554 -153.40794373]
[120.01068878 -138.41491699]
[120.46813202 -123.42189026]
[123.39893341 -119.45446014]
[123.74993134 -113.56495667]
[120.46813202 -107.50701141]
[120.01068878 -92.51398468]
[119.55324554 -77.52096558]
[127.33196259 -70.57833862]
[129.97004700 -60.26224518]
[126.33094788 -50.01972198]
[117.41926575 -43.41640091]
[116.04863739 -28.47915077]
[114.67801666 -13.54190350]
[113.53533936 1.41451001]
[112.62088013 16.38661003]
[111.70642090 31.35870934]
[121.73841858 42.30834961]
[121.02430725 57.50521088]
[109.47129822 67.95345306]
[108.55683899 82.92555237]
[118.07995605 93.84601593]
[117.19661713 108.30858612]
[106.41526031 117.98890686]
[105.50080109 132.96099854]
[112.38239288 147.20719910]
[103.88358307 159.43910217]
[102.96911621 174.41120911]
[105.60189819 183.34063721]
[101.79159546 189.82379150]
[100.42096710 204.76103210]
[99.05033875 219.69828796]
[97.67971802 234.63552856]
[96.30908966 249.57278442]
[94.93846130 264.51004028]
[93.56784058 279.44726562]
[106.58083344 287.34811401]
[114.83935547 300.06359863]
[116.75028992 315.04254150]
[111.98773956 329.30715942]
[101.54714966 340.04510498]
[87.53775024 345.16390991]
[86.16712189 360.10116577]
[84.79649353 375.03839111]
[83.42587280 389.97564697]
[82.05524445 404.91290283]
[80.68461609 419.85015869]
[79.31399536 434.78738403]
[89.61282349 446.77529907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 101]
[6 100]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[17 89]
[18 88]
[19 87]
[20 86]
[21 85]
[22 84]
[23 83]
[24 81]
[25 80]
[27 78]
[28 77]
[31 74]
[32 73]
[35 70]
[36 69]
[37 68]
[39 67]
[40 66]
[41 65]
[43 61]
[44 60]
[45 59]
[46 56]
[47 55]
[48 54]
[49 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
