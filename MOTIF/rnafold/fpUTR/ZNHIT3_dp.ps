%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:43 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ZNHIT3)
} def

/sequence { (\
AGGGGCGUGCACGCGGGCGCGGCUGCGUGAGAGGCGCGCGGCGGCGCAGUAAACAGUCUCCUUCCACAAAACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 62 0.820882763 ubox
1 63 0.071198916 ubox
2 59 0.005616137 ubox
2 60 0.308094901 ubox
2 61 0.944396087 ubox
2 62 0.084893781 ubox
2 63 0.014163414 ubox
2 64 0.007998557 ubox
2 65 0.031961820 ubox
2 73 0.006345781 ubox
3 58 0.005624638 ubox
3 59 0.312890643 ubox
3 60 0.944500787 ubox
3 61 0.087314924 ubox
3 62 0.016839276 ubox
3 63 0.005972107 ubox
3 64 0.031521599 ubox
3 65 0.012943390 ubox
3 72 0.006354972 ubox
3 73 0.005071575 ubox
4 57 0.004896560 ubox
4 58 0.451896630 ubox
4 59 0.886014819 ubox
4 60 0.086836067 ubox
4 61 0.018806022 ubox
4 62 0.005640547 ubox
4 63 0.022535854 ubox
4 64 0.012923857 ubox
4 72 0.005126041 ubox
5 14 0.053896324 ubox
5 50 0.004441507 ubox
5 57 0.453455328 ubox
5 58 0.887678929 ubox
5 59 0.036445318 ubox
5 60 0.018477552 ubox
5 61 0.006099459 ubox
5 62 0.007278600 ubox
5 63 0.004007753 ubox
6 13 0.054227806 ubox
6 15 0.029465189 ubox
6 49 0.006286140 ubox
6 56 0.520113654 ubox
7 12 0.053060545 ubox
7 14 0.031997728 ubox
7 47 0.021231985 ubox
7 54 0.276928013 ubox
7 57 0.028367304 ubox
8 13 0.030686218 ubox
8 15 0.003866536 ubox
8 46 0.021257305 ubox
8 51 0.007967439 ubox
8 53 0.277024730 ubox
8 55 0.917140213 ubox
8 56 0.015932180 ubox
9 14 0.005805405 ubox
9 45 0.021320455 ubox
9 50 0.012538440 ubox
9 54 0.921104627 ubox
9 57 0.020780479 ubox
10 29 0.003694563 ubox
10 44 0.021305943 ubox
10 49 0.012753845 ubox
10 56 0.020922255 ubox
11 28 0.003818916 ubox
11 50 0.120616368 ubox
11 57 0.008513617 ubox
12 27 0.003821999 ubox
12 43 0.021351710 ubox
12 49 0.120028591 ubox
12 56 0.008595225 ubox
13 26 0.003822291 ubox
13 42 0.021429911 ubox
13 47 0.015447328 ubox
13 50 0.919207350 ubox
14 25 0.003821993 ubox
14 40 0.003619579 ubox
14 41 0.021130989 ubox
14 46 0.015211336 ubox
14 49 0.934075267 ubox
15 24 0.003790551 ubox
15 39 0.005023715 ubox
15 45 0.013577886 ubox
15 61 0.007861374 ubox
15 65 0.004545057 ubox
16 23 0.003762550 ubox
16 60 0.007861486 ubox
16 64 0.004542167 ubox
17 37 0.005072364 ubox
17 39 0.020844616 ubox
17 47 0.998525397 ubox
18 36 0.005073667 ubox
18 38 0.020856277 ubox
18 43 0.013106136 ubox
18 46 0.999604028 ubox
19 35 0.005073565 ubox
19 37 0.020856675 ubox
19 42 0.013144902 ubox
19 45 0.999642099 ubox
20 34 0.005072635 ubox
20 36 0.020855958 ubox
20 41 0.013137517 ubox
20 43 0.007066714 ubox
20 44 0.999246313 ubox
21 35 0.020742100 ubox
21 42 0.006886331 ubox
22 39 0.013125483 ubox
22 42 0.999254903 ubox
23 31 0.005066509 ubox
23 33 0.020617594 ubox
23 38 0.012838251 ubox
23 41 0.999664519 ubox
24 30 0.005058223 ubox
24 32 0.020541792 ubox
24 38 0.004390729 ubox
24 40 0.998906372 ubox
25 37 0.014987660 ubox
25 39 0.999617235 ubox
26 36 0.015106169 ubox
26 38 0.999628236 ubox
27 35 0.015632886 ubox
27 37 0.999606681 ubox
28 34 0.015749307 ubox
28 36 0.999033013 ubox
29 35 0.993234187 ubox
37 46 0.003162707 ubox
38 45 0.003163154 ubox
48 59 0.022040117 ubox
49 58 0.023975107 ubox
49 61 0.003346504 ubox
50 56 0.003519111 ubox
55 62 0.007379057 ubox
56 61 0.007820290 ubox
56 67 0.004666698 ubox
57 66 0.004609164 ubox
62 69 0.023639725 ubox
62 70 0.021548913 ubox
62 71 0.022052729 ubox
63 68 0.026525814 ubox
63 69 0.026517471 ubox
63 70 0.029814268 ubox
1 62 0.9500000 lbox
2 61 0.9500000 lbox
3 60 0.9500000 lbox
4 59 0.9500000 lbox
5 58 0.9500000 lbox
8 55 0.9500000 lbox
9 54 0.9500000 lbox
13 50 0.9500000 lbox
14 49 0.9500000 lbox
17 47 0.9500000 lbox
18 46 0.9500000 lbox
19 45 0.9500000 lbox
20 44 0.9500000 lbox
22 42 0.9500000 lbox
23 41 0.9500000 lbox
24 40 0.9500000 lbox
25 39 0.9500000 lbox
26 38 0.9500000 lbox
27 37 0.9500000 lbox
28 36 0.9500000 lbox
29 35 0.9500000 lbox
showpage
end
%%EOF
