%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCGCUGCCCGCCGCCCGGCUCCCGGCUGCUCGCGGCCCCCUGCUCCUGCCUGGCGCUCUGGCCAGGCUCGGGCUCCGGAGGACAGGACCGCGCGACUGGCCGGCCGAUCCCUGGGCCGGCCGCGGGAGCAGGGCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[85.57692719 396.26989746]
[80.78132629 410.93295288]
[68.80513000 420.65789795]
[53.46990967 422.34149170]
[39.66907120 415.44653320]
[31.80641747 402.17315674]
[32.39088821 386.75689697]
[41.23598480 374.11694336]
[55.51926422 368.28674316]
[58.16029358 353.52105713]
[60.80131912 338.75540161]
[63.44234848 323.98971558]
[56.77247620 313.83892822]
[58.90706635 301.47390747]
[69.23455811 293.66110229]
[72.20159149 278.95745850]
[75.16861725 264.25384521]
[78.13564301 249.55020142]
[73.06869507 235.54394531]
[83.38282776 223.54689026]
[86.34985352 208.84326172]
[89.31688690 194.13963318]
[92.28391266 179.43600464]
[95.25093842 164.73237610]
[98.21797180 150.02873230]
[101.18499756 135.32510376]
[88.55527496 132.67582703]
[77.97206879 125.76684570]
[70.77491760 115.70249939]
[67.79006958 103.96903992]
[69.23873901 92.21659088]
[74.73200989 82.02740479]
[83.34970093 74.70282745]
[78.46269226 60.52124786]
[73.57568359 46.33966827]
[68.68867493 32.15809250]
[63.80166626 17.97651291]
[53.67658615 13.73791504]
[47.71562576 4.78491163]
[47.71093750 -5.75041056]
[53.42003632 -14.34112644]
[49.16511154 -28.72499275]
[44.91018295 -43.10885620]
[40.65525818 -57.49272537]
[35.17864609 -64.90425110]
[36.46909332 -72.24201965]
[32.53340912 -86.71649170]
[28.59772491 -101.19096375]
[24.66204071 -115.66544342]
[-4.18621874 -127.44234467]
[-11.49381161 -140.54193115]
[-18.80140305 -153.64151001]
[-26.10899734 -166.74108887]
[-33.41658783 -179.84068298]
[-40.72418213 -192.94026184]
[-48.03177261 -206.03984070]
[-63.30207443 -210.11335754]
[-71.14698792 -223.83314514]
[-66.91226196 -239.05952454]
[-53.11029053 -246.75895691]
[-37.92953491 -242.36347961]
[-30.37646675 -228.48088074]
[-34.93218994 -213.34744263]
[-27.62459755 -200.24784851]
[-20.31700516 -187.14826965]
[-13.00941277 -174.04869080]
[-5.70182037 -160.94911194]
[1.60577238 -147.84951782]
[8.91336536 -134.74993896]
[23.70734406 -137.22747803]
[26.34837151 -151.99313354]
[28.98940086 -166.75880432]
[31.63042831 -181.52447510]
[28.46731758 -198.18074036]
[43.59701157 -205.83114624]
[55.13675308 -193.41056824]
[46.39609528 -178.88345337]
[43.75506973 -164.11778259]
[41.11404037 -149.35211182]
[38.47301483 -134.58644104]
[39.13651276 -119.60112762]
[43.07219696 -105.12664795]
[47.00788116 -90.65217590]
[50.94356537 -76.17770386]
[55.03912354 -61.74765015]
[59.29404831 -47.36378479]
[63.54897690 -32.97991943]
[67.80390167 -18.59605217]
[82.77873230 -6.43650246]
[77.98324585 13.08950424]
[82.87025452 27.27108192]
[87.75726318 41.45265961]
[92.64427185 55.63423920]
[97.53128052 69.81581879]
[110.42684174 70.49098969]
[122.27962494 76.60153961]
[130.83621216 87.37400818]
[134.31469727 101.12004852]
[131.76628113 115.49743652]
[146.40068054 118.78901672]
[161.03507996 122.08058929]
[175.66946411 125.37216949]
[190.30386353 128.66374207]
[204.93826294 131.95532227]
[219.57266235 135.24690247]
[234.20704651 138.53848267]
[248.84144592 141.83006287]
[260.40521240 131.48313904]
[275.84567261 129.94284058]
[289.22558594 137.80140686]
[295.40014648 152.03707886]
[291.99511719 167.17594910]
[280.31976318 177.39680481]
[264.86352539 178.76953125]
[251.56964111 170.76626587]
[245.54986572 156.46444702]
[230.91546631 153.17288208]
[216.28108215 149.88130188]
[201.64668274 146.58972168]
[187.01228333 143.29814148]
[172.37789917 140.00656128]
[157.74349976 136.71498108]
[143.10910034 133.42341614]
[128.47471619 130.13183594]
[115.88862610 138.29214478]
[112.92160034 152.99577332]
[109.95457458 167.69940186]
[106.98754120 182.40303040]
[104.02051544 197.10665894]
[101.05348206 211.81028748]
[98.08645630 226.51391602]
[102.94118500 241.57188416]
[92.83927917 252.51722717]
[89.87224579 267.22085571]
[86.90522003 281.92449951]
[83.93819427 296.62811279]
[90.23171234 313.89440918]
[78.20801544 326.63076782]
[75.56698608 341.39642334]
[72.92596436 356.16210938]
[70.28493500 370.92776489]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 141]
[10 140]
[11 139]
[12 138]
[15 136]
[16 135]
[17 134]
[18 133]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[33 94]
[34 93]
[35 92]
[36 91]
[37 90]
[41 88]
[42 87]
[43 86]
[44 85]
[46 84]
[47 83]
[48 82]
[49 81]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[70 80]
[71 79]
[72 78]
[73 77]
[99 124]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
