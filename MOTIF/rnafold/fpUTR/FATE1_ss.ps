%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:59:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGAUUUUCUGAGUGUGACUCCUCUGUUCCUGGCACCCUGUGCAUCCUUAGCCAUAGCUUACAAGAGAACAGCUGGUUGUG\
) } def
/len { sequence length } bind def

/coor [
[112.35549927 261.70141602]
[123.25452423 250.78286743]
[119.95532990 236.15017700]
[109.60818481 225.43637085]
[114.12071228 210.27233887]
[110.82151794 195.63966370]
[106.16702271 189.66471863]
[107.68136597 180.40556335]
[104.92512512 165.66096497]
[102.16888428 150.91636658]
[99.41263580 136.17178345]
[96.65639496 121.42717743]
[93.90015411 106.68258667]
[90.81224060 103.93804932]
[89.05805206 99.76918793]
[89.27645874 94.85805511]
[91.75072479 90.15945435]
[90.64293671 75.20041656]
[89.53514862 60.24138260]
[88.42736053 45.28234482]
[87.31957245 30.32330704]
[85.93554688 15.38729477]
[84.27575684 0.47940773]
[69.54125214 -7.58764791]
[62.50685120 -22.66065407]
[65.72370148 -38.81242371]
[77.75333405 -49.81785965]
[75.54380798 -64.65423584]
[73.33428192 -79.49060822]
[59.56895447 -83.21315002]
[48.32405472 -91.91094208]
[41.30440903 -104.22293854]
[39.55794144 -118.24349213]
[43.31936264 -131.81724548]
[51.97925186 -142.87049866]
[64.18251801 -149.72799683]
[62.52272797 -164.63587952]
[60.86293793 -179.54376221]
[59.20314789 -194.45164490]
[51.44129562 -209.52447510]
[63.77637100 -221.15556335]
[78.36759949 -212.52235413]
[74.11103058 -196.11143494]
[75.77082062 -181.20355225]
[77.43061066 -166.29566956]
[79.09040070 -151.38778687]
[94.16910553 -146.44578552]
[105.66462708 -135.42411804]
[111.27712250 -120.45867157]
[109.85382843 -104.48098755]
[101.62548065 -90.64407349]
[88.17065430 -81.70013428]
[90.38018036 -66.86376190]
[92.58970642 -52.02738571]
[105.06250763 -46.90588379]
[113.39407349 -36.16633606]
[115.28468323 -22.59597206]
[110.12437439 -9.78580475]
[99.18364716 -1.18038249]
[100.84343719 13.72750473]
[104.80820465 20.18079948]
[102.27861023 29.21551895]
[103.38639832 44.17455673]
[104.49418640 59.13359451]
[105.60197449 74.09263611]
[106.70976257 89.05166626]
[108.64475250 103.92633820]
[111.40099335 118.67093658]
[114.15723419 133.41552734]
[116.91347504 148.16012573]
[119.66972351 162.90472412]
[122.42596436 177.64932251]
[125.45420074 192.34046936]
[128.75338745 206.97314453]
[139.33651733 218.73359680]
[134.58801270 232.85098267]
[137.88720703 247.48367310]
[152.41709900 252.66882324]
[161.81901550 264.90023804]
[163.09283447 280.27493286]
[155.83207703 293.88687134]
[142.35363770 301.39254761]
[126.95843506 300.39694214]
[114.55902100 291.21771240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[5 74]
[6 73]
[8 72]
[9 71]
[10 70]
[11 69]
[12 68]
[13 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 60]
[23 59]
[27 54]
[28 53]
[29 52]
[36 46]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
