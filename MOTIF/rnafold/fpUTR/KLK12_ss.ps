%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGUAGGUGGACGGAGAGAUAGCAGCGACGAGGACAGGCCAAACAGUGACAGCCACGUAGAGGAUCUGGCAGACAAAGAGACAAGGUGAGAAGGAGACUUUGGAAGUGACCCACC\
) } def
/len { sequence length } bind def

/coor [
[96.51247406 253.54624939]
[89.12519073 267.19204712]
[75.11345673 273.85919189]
[59.86507416 270.98403931]
[49.24335480 259.67218018]
[47.33256912 244.27319336]
[54.86745071 230.70834351]
[68.95068359 224.19357300]
[71.73001862 209.45330811]
[74.50934601 194.71305847]
[77.28868103 179.97279358]
[80.06800842 165.23252869]
[55.77040863 151.92601013]
[38.76844025 130.05433655]
[24.65793800 135.14292908]
[24.33074951 150.31715393]
[18.54047585 164.34701538]
[8.07019997 175.33509827]
[-5.66405582 181.79533386]
[-20.80484772 182.85403442]
[-35.30450821 178.36802673]
[-47.20207596 168.94400024]
[-54.88850403 155.85647583]
[-57.32426453 140.87544250]
[-54.17994308 126.02694702]
[-45.88078308 113.31913757]
[-33.54917526 104.47064209]
[-18.85287094 100.67813873]
[-3.77942324 102.45454407]
[9.63260746 109.55960083]
[19.56935501 121.03241730]
[33.67985916 115.94383240]
[31.85873413 96.94470215]
[35.37289047 78.18478394]
[43.94717407 61.13294601]
[56.91024780 47.12429428]
[73.24713135 37.25566864]
[68.91675568 22.89433670]
[64.58637238 8.53300667]
[60.25599670 -5.82832384]
[55.73483276 -20.13073921]
[51.02368164 -34.37170410]
[35.93781662 -36.41574097]
[23.28698921 -44.77298737]
[15.55088902 -57.74113846]
[14.21792889 -72.72059631]
[19.49914169 -86.73552704]
[30.29690742 -97.02502441]
[25.58575630 -111.26598358]
[20.87460518 -125.50695038]
[7.24519348 -133.96972656]
[5.50703144 -149.91835022]
[16.99349022 -161.11839294]
[32.89313889 -158.97813416]
[41.00913239 -145.13940430]
[35.11557007 -130.21810913]
[39.82672119 -115.97713470]
[44.53787231 -101.73617554]
[59.34168243 -99.91610718]
[71.93901825 -91.81570435]
[79.80229950 -78.99658203]
[81.32622528 -63.97334290]
[76.15524292 -49.72034454]
[65.26464081 -39.08285141]
[69.97579193 -24.84188843]
[75.12989044 -19.41041756]
[74.61732483 -10.15870285]
[78.94770813 4.20262766]
[83.27808380 18.56395912]
[87.60846710 32.92528915]
[96.97348022 31.85744858]
[106.39629364 32.09083557]
[115.69696808 33.62099457]
[124.69789124 36.41870499]
[133.22720337 40.43054199]
[141.12200928 45.57989502]
[148.23156738 51.76844025]
[154.42010498 58.87799454]
[159.56945801 66.77280426]
[163.58129883 75.30210876]
[166.37899780 84.30303192]
[167.90916443 93.60370636]
[168.14254761 103.02651978]
[167.07470703 112.39153290]
[181.43603516 116.72191620]
[195.79737854 121.05229187]
[210.15870667 125.38267517]
[224.52003479 129.71305847]
[238.88136292 134.04342651]
[250.54660034 123.94760132]
[265.82147217 121.78378296]
[279.83178711 128.24243164]
[288.10696411 141.26261902]
[288.00634766 156.68965149]
[279.56213379 169.60083008]
[265.46875000 175.87622070]
[250.22340393 173.51339722]
[238.69081116 163.26629639]
[234.55097961 148.40475464]
[220.18965149 144.07438660]
[205.82832336 139.74400330]
[191.46699524 135.41362000]
[177.10566711 131.08325195]
[162.74433899 126.75286865]
[158.46003723 135.14242554]
[153.06072998 142.86170959]
[146.64935303 149.76348877]
[139.34823608 155.71609497]
[131.29661560 160.60601807]
[122.64805603 164.33998108]
[113.56752777 166.84675598]
[104.22822571 168.07855225]
[94.80827332 168.01185608]
[92.02893829 182.75212097]
[89.24961090 197.49238586]
[86.47027588 212.23265076]
[83.69094849 226.97290039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[14 32]
[15 31]
[37 70]
[38 69]
[39 68]
[40 67]
[41 65]
[42 64]
[48 58]
[49 57]
[50 56]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
