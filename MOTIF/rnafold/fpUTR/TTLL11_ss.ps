%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGUGUUGGCGGGGACUGAGCCUCCUGCUUGAGGUAGUUGUUUUUACUCCCAGUCCCCAGGCUCACGAGCCCCACGCGCGCUCAAUCUGCCCUCCCGCUUCUCCUCGCCACUCCGAGUUCUGCGCCCUCGAGAUCCAGCGCAUCCGCGGGGUGGGCGGGUCCUGGCGGCUCUUUGCCCUCUUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[74.14800262 228.16430664]
[86.29503632 218.65361023]
[84.80152130 203.72814941]
[83.30800629 188.80268860]
[81.20568085 186.92132568]
[79.72924805 184.08604431]
[79.24872589 180.53367615]
[80.04064178 176.63154602]
[82.24515533 172.84089661]
[81.74658203 157.84918213]
[81.24800873 142.85746765]
[68.64762115 134.71926880]
[54.77753067 140.43072510]
[40.90744019 146.14216614]
[27.03734970 151.85360718]
[13.16726017 157.56504822]
[-0.70283020 163.27650452]
[-14.57291985 168.98794556]
[-28.44301033 174.69938660]
[-34.30198288 195.03520203]
[-58.25769424 202.55799866]
[-70.43675995 211.31416321]
[-82.61582947 220.07031250]
[-94.79490662 228.82647705]
[-106.97397614 237.58262634]
[-109.27645111 253.21829224]
[-122.01029205 262.57910156]
[-137.62074280 260.11145020]
[-146.84640503 247.27934265]
[-144.21383667 231.69584656]
[-131.28491211 222.60638428]
[-115.73012543 225.40354919]
[-103.55105591 216.64739990]
[-91.37198639 207.89125061]
[-79.19291687 199.13508606]
[-67.01384735 190.37893677]
[-72.60981750 176.46185303]
[-87.46035004 178.57414246]
[-102.31088257 180.68643188]
[-110.42133331 194.05633545]
[-125.24485779 199.03601074]
[-139.78224182 193.27420044]
[-147.16937256 179.49143982]
[-143.91827393 164.19554138]
[-131.56402588 154.60876465]
[-115.93991089 155.25767517]
[-104.42316437 165.83589172]
[-89.57263947 163.72361755]
[-74.72210693 161.61132812]
[-60.52047729 151.51162720]
[-44.87898636 152.01919556]
[-34.15445328 160.82929993]
[-20.28436470 155.11785889]
[-6.41427517 149.40640259]
[7.45581484 143.69496155]
[21.32590485 137.98352051]
[35.19599533 132.27207947]
[49.06608582 126.56063080]
[62.93617630 120.84918213]
[59.95271301 101.46525574]
[65.94898224 84.00014496]
[53.91713715 75.04276276]
[41.88528824 66.08538818]
[29.85343933 57.12800598]
[13.51123047 55.76264572]
[6.76829386 40.81390381]
[16.56118584 27.65976715]
[32.81581879 29.83208275]
[38.81081772 45.09615707]
[50.84266663 54.05353546]
[62.87451553 63.01091385]
[74.90636444 71.96829224]
[84.26692963 65.82489777]
[95.02090454 62.70823288]
[106.21585846 62.89433670]
[116.86029816 66.36672211]
[126.01149750 72.81784821]
[138.33442688 64.26534271]
[143.61300659 56.78678131]
[150.93400574 55.67508698]
[163.39738464 47.32857895]
[175.86076355 38.98207474]
[188.32415771 30.63556862]
[191.39747620 13.42343521]
[205.68182373 3.93814993]
[222.07945251 7.63539886]
[234.40238953 -0.91711301]
[246.72531128 -9.46962547]
[259.04824829 -18.02213669]
[271.37115479 -26.57464981]
[283.69409180 -35.12716293]
[296.01702881 -43.67967224]
[308.33993530 -52.23218536]
[320.59136963 -60.88681793]
[332.77044678 -69.64297485]
[344.94952393 -78.39912415]
[357.12857056 -87.15528107]
[369.30764771 -95.91143799]
[381.48672485 -104.66759491]
[377.11172485 -116.58866882]
[377.32125854 -129.88467407]
[382.51141357 -142.77630615]
[392.38562012 -153.39076233]
[405.94454956 -160.03045654]
[421.57952881 -161.43463135]
[429.61270142 -174.10223389]
[437.64590454 -186.76982117]
[445.67907715 -199.43740845]
[441.98220825 -214.80323792]
[450.30456543 -228.23880005]
[465.70861816 -231.77299500]
[479.05541992 -223.30908203]
[482.42657471 -207.86851501]
[473.82202148 -194.61192322]
[458.34667969 -191.40422058]
[450.31347656 -178.73663330]
[442.28030396 -166.06903076]
[434.24710083 -153.40144348]
[438.82516479 -147.46080017]
[453.69268799 -149.44989014]
[447.98129272 -135.57949829]
[452.55935669 -129.63883972]
[466.85571289 -134.17913818]
[481.15206909 -138.71945190]
[495.44842529 -143.25975037]
[509.74478149 -147.80004883]
[511.84307861 -162.91824341]
[520.30029297 -175.62408447]
[533.43719482 -183.39482117]
[548.64550781 -184.68756104]
[562.90551758 -179.24563599]
[573.38592529 -168.14953613]
[578.00585938 -153.60241699]
[575.84802246 -138.49259949]
[567.34088135 -125.82015991]
[554.17346191 -118.10121918]
[538.96020508 -116.86837769]
[524.72174072 -122.36641693]
[514.28509521 -133.50369263]
[499.98870850 -128.96339417]
[485.69235229 -124.42309570]
[471.39602661 -119.88278961]
[457.09967041 -115.34249115]
[446.89636230 -93.79347992]
[427.90631104 -81.80041504]
[406.82775879 -81.85984039]
[390.24288940 -92.48852539]
[378.06381226 -83.73236847]
[365.88473511 -74.97621155]
[353.70565796 -66.22005463]
[341.52661133 -57.46390152]
[329.34753418 -48.70774841]
[325.74505615 -42.23818970]
[316.89245605 -39.90925980]
[304.56951904 -31.35674667]
[292.24661255 -22.80423355]
[279.92367554 -14.25172138]
[267.60073853 -5.69920969]
[255.27783203 2.85330224]
[242.95489502 11.40581417]
[230.63197327 19.95832634]
[230.13536072 32.84499359]
[222.18382263 43.24430847]
[209.50631714 47.21789551]
[196.67065430 43.09894943]
[184.20727539 51.44545364]
[171.74389648 59.79196167]
[159.28051758 68.13846588]
[146.88693237 76.58826447]
[134.56401062 85.14077759]
[138.36645508 97.62624359]
[137.70159912 110.94067383]
[132.45965576 123.50112915]
[123.08592224 133.75102234]
[110.54841614 140.35240173]
[96.23972321 142.35888672]
[96.73829651 157.35060120]
[97.23686981 172.34231567]
[98.23346710 187.30917358]
[99.72698212 202.23463440]
[101.22049713 217.16009521]
[115.01119232 224.07531738]
[122.85433960 237.36022949]
[122.24721527 252.77563477]
[113.38356018 265.40255737]
[99.09172821 271.21179199]
[83.93219757 268.34960938]
[72.74230957 257.72933960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 181]
[3 180]
[4 179]
[9 178]
[10 177]
[11 176]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[37 49]
[38 48]
[39 47]
[61 72]
[62 71]
[63 70]
[64 69]
[77 170]
[78 169]
[80 168]
[81 167]
[82 166]
[83 165]
[86 161]
[87 160]
[88 159]
[89 158]
[90 157]
[91 156]
[92 155]
[93 154]
[94 152]
[95 151]
[96 150]
[97 149]
[98 148]
[99 147]
[105 118]
[106 117]
[107 116]
[108 115]
[122 143]
[123 142]
[124 141]
[125 140]
[126 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
