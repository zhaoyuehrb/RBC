%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCUCGGGCCGGUCCGCCCGCGCGCAGGUGAGUGAGCCAGGGCGGAGCGCAGCUGCGCCGGGCUUGGGCGCCUGGGGCCGCCGCUCCCCACCGUCGUUUUCCCCACCGAGGCCGAGGCGUCCCGGAGUC\
) } def
/len { sequence length } bind def

/coor [
[279.46951294 220.49960327]
[266.90203857 212.31065369]
[254.33457947 204.12170410]
[241.76712036 195.93275452]
[229.19966125 187.74380493]
[216.63220215 179.55485535]
[203.97099304 171.51161194]
[191.21772766 163.61512756]
[178.46447754 155.71864319]
[165.71122742 147.82215881]
[152.95796204 139.92567444]
[140.11434937 132.17701721]
[127.18210602 124.57721710]
[114.24986267 116.97741699]
[101.31761169 109.37760925]
[95.97698975 109.52381134]
[90.95616150 106.61956787]
[87.97521210 101.11634064]
[75.40774536 92.92739868]
[62.84028625 84.73844910]
[50.27282333 76.54949951]
[37.51956558 68.65301514]
[24.58732033 61.05321121]
[11.65507317 53.45341110]
[-1.27717352 45.85360718]
[-14.20942020 38.25380325]
[-23.28230858 36.57794571]
[-27.34970856 30.32615662]
[-40.10296631 22.42967415]
[-52.85622406 14.53319168]
[-65.60948181 6.63670874]
[-78.36273956 -1.25977361]
[-91.11599731 -9.15625572]
[-106.92230225 -9.84272480]
[-113.67008209 -23.12115669]
[-126.42333984 -31.01763916]
[-142.22964478 -31.70410728]
[-148.97743225 -44.98253632]
[-161.73068237 -52.87902069]
[-178.63534546 -48.54900742]
[-193.17921448 -57.56891251]
[-196.67279053 -73.97840118]
[-209.60502625 -81.57820129]
[-225.99893188 -81.16333771]
[-234.32316589 -95.29270172]
[-226.01448059 -109.43122864]
[-209.62013245 -109.03440094]
[-202.00523376 -94.51044464]
[-189.07298279 -86.91064453]
[-177.12457275 -91.87123871]
[-164.31582642 -88.97375488]
[-155.40469360 -79.06343079]
[-153.83419800 -65.63227844]
[-141.08094788 -57.73579407]
[-126.18683624 -57.61413574]
[-118.52685547 -43.77089691]
[-105.77359772 -35.87441254]
[-90.87949371 -35.75275421]
[-83.21951294 -21.90951347]
[-70.46625519 -14.01303101]
[-57.71299744 -6.11654806]
[-44.95973969 1.77993429]
[-32.20648193 9.67641640]
[-19.45322609 17.57289886]
[-6.60961771 25.32155800]
[6.32262897 32.92136002]
[19.25487518 40.52116394]
[32.18712234 48.12096405]
[45.11936951 55.72076797]
[49.96525192 55.38034821]
[55.06097794 58.14313889]
[58.46177292 63.98203278]
[71.02923584 72.17098236]
[83.59669495 80.35993195]
[96.16416168 88.54888153]
[108.91741943 96.44536591]
[121.84966278 104.04516602]
[134.78190613 111.64496613]
[147.71415710 119.24477386]
[156.78704834 120.92063141]
[160.85444641 127.17241669]
[173.60769653 135.06890869]
[186.36096191 142.96537781]
[199.11421204 150.86186218]
[211.86747742 158.75834656]
[220.89923096 160.64332581]
[224.82115173 166.98739624]
[237.38861084 175.17634583]
[249.95606995 183.36529541]
[262.52352905 191.55424500]
[275.09100342 199.74319458]
[287.65844727 207.93214417]
[302.28005981 200.30368042]
[318.66104126 201.05914307]
[332.36117554 209.89952087]
[339.71438599 224.34715271]
[338.80941772 240.43936157]
[351.56268311 248.33583069]
[364.31594849 256.23233032]
[384.41149902 255.85409546]
[392.98687744 273.12597656]
[406.09121704 280.42504883]
[419.19555664 287.72412109]
[432.29989624 295.02319336]
[445.40423584 302.32226562]
[458.50857544 309.62130737]
[473.53604126 305.52102661]
[486.72174072 313.10998535]
[490.53814697 327.46166992]
[503.64245605 334.76074219]
[519.40447998 331.77099609]
[531.47497559 342.33898926]
[530.59448242 358.35787964]
[517.43847656 367.53930664]
[502.09909058 362.84008789]
[496.34341431 347.86508179]
[483.23907471 340.56600952]
[469.02795410 344.87643433]
[455.63430786 337.66079712]
[451.20950317 322.72564697]
[438.10516357 315.42657471]
[425.00082397 308.12753296]
[411.89648438 300.82846069]
[398.79214478 293.52938843]
[385.68783569 286.23031616]
[376.04330444 289.92434692]
[365.75314331 287.60415649]
[358.32226562 279.80947876]
[356.41946411 268.98556519]
[343.66619873 261.08908081]
[330.91293335 253.19261169]
[319.28775024 260.45068359]
[305.60168457 261.98013306]
[292.53579712 257.42361450]
[282.67459106 247.62173462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 79]
[13 78]
[14 77]
[15 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 69]
[23 68]
[24 67]
[25 66]
[26 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[35 57]
[36 56]
[38 54]
[39 53]
[42 49]
[43 48]
[97 131]
[98 130]
[99 129]
[101 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
