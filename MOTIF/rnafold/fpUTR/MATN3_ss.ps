%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCCGAGCCUCGCGUGGGCUCCUGGCCCCCGACGGACACCACCAGGCCCACGGAGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[29.12274742 252.70225525]
[22.69653320 266.41293335]
[12.16486931 277.29238892]
[-1.32984805 284.16052246]
[-16.32381439 286.27233887]
[-31.19059372 283.39874268]
[-44.31755066 275.85144043]
[-54.28077316 264.44912720]
[-59.99951935 250.42861938]
[-60.85346985 235.31076050]
[-56.74998856 220.73542786]
[-48.13419724 208.28366089]
[-35.94066238 199.30610657]
[-21.49205589 194.77658081]
[-6.35565233 195.18644714]
[7.82666588 200.49121094]
[17.34256554 188.89605713]
[26.85846519 177.30090332]
[36.37436295 165.70574951]
[45.89026260 154.11058044]
[55.40616226 142.51542664]
[64.92205811 130.92027283]
[74.43795776 119.32511902]
[83.95385742 107.72995758]
[85.69409180 89.39001465]
[102.73915863 82.40090942]
[111.07271576 69.92887115]
[119.40626526 57.45682526]
[127.73982239 44.98477936]
[120.77819824 33.62602997]
[118.77036285 20.50403595]
[121.99370575 7.67573452]
[129.90849304 -2.86243987]
[141.24787903 -9.48524094]
[154.22056580 -11.18922329]
[166.79371643 -7.74462223]
[176.30961609 -19.33977890]
[181.68395996 -35.41934967]
[198.62290955 -34.70629501]
[202.62689209 -18.23193741]
[187.90476990 -9.82388020]
[178.38887024 1.77127695]
[185.03794861 17.30765533]
[183.11315918 34.18404770]
[173.03442383 47.96372604]
[157.37652588 54.98147964]
[140.21186829 53.31833267]
[131.87831116 65.79037476]
[123.54476166 78.26242065]
[115.21120453 90.73446655]
[117.79252625 100.81041718]
[114.30590820 110.60998535]
[105.94042206 116.79113770]
[95.54901886 117.24585724]
[86.03311920 128.84101868]
[76.51721954 140.43617249]
[67.00131989 152.03132629]
[57.48542023 163.62648010]
[47.96952057 175.22164917]
[38.45362091 186.81680298]
[28.93772125 198.41195679]
[19.42182350 210.00711060]
[27.39149475 222.88201904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[26 50]
[27 49]
[28 48]
[29 47]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
