%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCCUGCGCCAAGGGGUAGUGAGACCGCGCGGCAACAGCUUGCGGCUGCGGGGAGCUCCCGUGGGCGCUCCGCUGGCUGUGCAGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[197.47291565 302.01995850]
[195.64485168 297.37884521]
[195.95639038 291.74530029]
[189.12397766 278.39172363]
[182.29154968 265.03814697]
[166.15609741 260.64068604]
[157.94471741 245.68806458]
[163.09011841 229.07260132]
[155.81059265 215.95741272]
[148.53105164 202.84220886]
[141.25152588 189.72700500]
[133.97200012 176.61181641]
[119.18982697 174.99153137]
[108.06463623 164.85771179]
[105.00406647 149.94174194]
[111.38711548 135.92166138]
[104.10758972 122.80645752]
[96.82805634 109.69125366]
[90.34240723 104.60647583]
[89.53269958 96.00787354]
[82.70027924 82.65429688]
[75.86785889 69.30072021]
[62.01501083 68.15634918]
[50.65718079 60.33366394]
[44.74353409 47.99548340]
[45.74389648 34.45914459]
[53.28503418 23.30480766]
[46.90751648 9.72809029]
[40.52999878 -3.84862685]
[34.15248108 -17.42534447]
[27.54656792 -30.89241219]
[20.71414566 -44.24599075]
[7.54019642 -53.00713348]
[8.63103294 -67.86174011]
[1.79861081 -81.21531677]
[-5.03381109 -94.56889343]
[-11.86623287 -107.92247009]
[-25.92121315 -116.37170410]
[-25.36095619 -132.76127625]
[-10.76180363 -140.23100281]
[2.85788560 -131.09666443]
[1.48734403 -114.75489044]
[8.31976604 -101.40131378]
[15.15218735 -88.04773712]
[21.98460960 -74.69416046]
[34.66985703 -66.88815308]
[34.06772232 -51.07841110]
[40.90014267 -37.72483444]
[46.87207413 -33.10983658]
[47.72919846 -23.80286217]
[54.10671616 -10.22614479]
[60.48423386 3.35057259]
[66.86175537 16.92728996]
[82.98806000 19.43769455]
[94.60948944 31.13005447]
[97.07051086 47.59746170]
[89.22143555 62.46829605]
[96.05385590 75.82187653]
[102.88627625 89.17545319]
[109.94326019 102.41172791]
[117.22278595 115.52692413]
[124.50231934 128.64212036]
[139.77679443 130.64129639]
[150.81620789 141.12864685]
[153.53138733 155.93040466]
[147.08720398 169.33227539]
[154.36672974 182.44747925]
[161.64625549 195.56268311]
[168.92578125 208.67788696]
[176.20532227 221.79307556]
[189.61267090 224.02696228]
[199.09980774 233.48506165]
[201.30908203 246.49934387]
[195.64512634 258.20571899]
[202.47755432 271.55929565]
[209.30996704 284.91287231]
[216.80996704 297.90325928]
[224.95829773 310.49710083]
[233.10662842 323.09094238]
[241.25495911 335.68478394]
[249.40327454 348.27862549]
[257.55160522 360.87246704]
[272.38928223 367.85641479]
[273.48999023 384.21859741]
[259.72143555 393.12695312]
[245.24752808 385.41738892]
[244.95776367 369.02078247]
[236.80943298 356.42694092]
[228.66111755 343.83309937]
[220.51278687 331.23925781]
[212.36445618 318.64544678]
[204.21614075 306.05160522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[16 62]
[17 61]
[18 60]
[20 59]
[21 58]
[22 57]
[27 53]
[28 52]
[29 51]
[30 50]
[31 48]
[32 47]
[34 45]
[35 44]
[36 43]
[37 42]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
