%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUGCGGCGAGCUCCGUCCAAAAGAAAAUGGGGUUUGGUGUAAAUCUGGGGGUGUAAUGUUAUCAUAUAUCACUCUACCUCGUAAAACCGACACUGAAAGCUGCCGGACAACAAAUCACAGGUCAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[37.32614899 213.76667786]
[26.40592957 203.48324585]
[20.80661392 189.56752014]
[21.56111145 174.58650208]
[28.52826881 161.30609131]
[14.79166889 167.33152771]
[1.05506861 173.35696411]
[-12.68153095 179.38238525]
[-22.21132278 192.01147461]
[-36.97465897 190.03834534]
[-50.71125793 196.06378174]
[-64.44786072 202.08920288]
[-78.18445587 208.11463928]
[-91.92105865 214.14007568]
[-105.65765381 220.16549683]
[-119.39425659 226.19093323]
[-133.13085938 232.21636963]
[-146.86746216 238.24179077]
[-160.60404968 244.26722717]
[-162.21388245 259.54150391]
[-171.25816345 271.95507812]
[-185.30401611 278.16873169]
[-200.57319641 276.51104736]
[-212.95834351 267.42788696]
[-219.12794495 253.36264038]
[-217.42239380 238.09873962]
[-208.30047607 225.74211121]
[-194.21594238 219.61662292]
[-178.95745850 221.37002563]
[-166.62948608 230.53062439]
[-152.89288330 224.50518799]
[-139.15628052 218.47976685]
[-125.41968536 212.45433044]
[-111.68309021 206.42889404]
[-97.94648743 200.40347290]
[-84.20988464 194.37803650]
[-70.47328949 188.35260010]
[-56.73668671 182.32717896]
[-43.00008774 176.30174255]
[-34.45283127 164.10363770]
[-18.70696259 165.64579773]
[-4.97036266 159.62036133]
[8.76623726 153.59492493]
[22.50283623 147.56950378]
[27.88137054 139.73855591]
[38.43628693 137.94726562]
[50.16375732 128.59492493]
[61.89123154 119.24257660]
[73.61870575 109.89022827]
[85.34617615 100.53787994]
[91.20895386 86.73107910]
[89.79380035 71.79798126]
[88.37864685 56.86488724]
[86.96349335 41.93179321]
[85.54834747 26.99869728]
[84.13319397 12.06560135]
[72.23689270 2.00996375]
[71.01445770 -13.15447807]
[80.67428589 -24.43381119]
[79.25913239 -39.36690521]
[77.84397888 -54.30000305]
[76.42882538 -69.23310089]
[66.49015045 -82.27743530]
[73.06629944 -97.30029297]
[89.39230347 -98.84744263]
[98.67336273 -85.32730865]
[91.36192322 -70.64824677]
[92.77707672 -55.71515274]
[94.19223022 -40.78205872]
[95.60737610 -25.84896278]
[107.21401978 -16.58497047]
[108.86190796 -1.46084821]
[99.06629181 10.65044975]
[100.48143768 25.58354568]
[101.89659119 40.51663971]
[103.31174469 55.44973755]
[104.72689819 70.38283539]
[106.14205170 85.31592560]
[112.05944061 71.53244019]
[111.95474243 56.53281021]
[119.22970581 43.41507721]
[132.00897217 35.56076431]
[146.99829102 34.99457550]
[160.33366394 41.86246109]
[168.57746887 54.39400482]
[169.60461426 69.35879517]
[163.15031433 82.89917755]
[150.87835693 91.52468109]
[135.95254517 93.01184845]
[122.87465668 100.35819244]
[137.87361145 100.18104553]
[152.87255859 100.00389099]
[166.58039856 92.10414886]
[179.39816284 99.69059753]
[194.39710999 99.51344299]
[203.25871277 86.77563477]
[217.92601013 81.71106720]
[232.75914001 86.26715851]
[242.05445862 98.69200134]
[242.23771667 114.20799255]
[233.23844910 126.84892273]
[218.51707458 131.75407410]
[203.73423767 127.03734589]
[194.57426453 114.51239777]
[179.57531738 114.68954468]
[166.94030762 122.57662201]
[153.04971313 115.00284576]
[138.05076599 115.18000031]
[123.05181122 115.35714722]
[136.29956055 122.39256287]
[144.74638367 134.78817749]
[146.74276733 149.65472412]
[141.86535645 163.83961487]
[131.14845276 174.33474731]
[116.86470795 178.91455078]
[102.04314423 176.60778809]
[89.82683563 167.90367126]
[82.80638885 154.64797974]
[82.47058105 139.65173340]
[88.89044952 126.09526062]
[94.69852448 112.26535797]
[82.97104645 121.61770630]
[71.24357605 130.97004700]
[59.51610565 140.32240295]
[47.78863144 149.67474365]
[62.78862381 149.69163513]
[76.39801025 155.99913025]
[86.10626221 167.43373108]
[90.12250519 181.88604736]
[87.70587158 196.69009399]
[79.30213928 209.11497498]
[66.46155548 216.86863708]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 44]
[6 43]
[7 42]
[8 41]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[16 33]
[17 32]
[18 31]
[19 30]
[46 125]
[47 124]
[48 123]
[49 122]
[50 121]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[56 73]
[59 70]
[60 69]
[61 68]
[62 67]
[90 109]
[91 108]
[92 107]
[94 105]
[95 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
