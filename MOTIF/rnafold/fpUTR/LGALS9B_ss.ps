%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCUUCUGCAAAGGACUGCCUGGCAGGUGUGAAAGGCAGCGGUGGCCACAGAGGCGGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[120.10106659 292.50604248]
[117.96634674 277.65872192]
[115.83161926 262.81140137]
[113.69689941 247.96408081]
[104.22707367 236.46748352]
[109.92165375 221.70664978]
[107.78692627 206.85932922]
[105.65220642 192.01200867]
[103.51747894 177.16468811]
[101.38275909 162.31736755]
[99.24803925 147.47004700]
[83.40974426 144.48295593]
[69.48351288 136.36914062]
[59.07435608 124.06370544]
[53.38195419 108.98489380]
[53.06236649 92.87055206]
[58.15242767 77.57788849]
[68.06549072 64.86942291]
[81.65907288 56.20981216]
[78.12268829 41.63263702]
[74.58630371 27.05546379]
[71.04991913 12.47829056]
[67.51353455 -2.09888315]
[63.97714996 -16.67605591]
[50.76496124 -24.92686844]
[47.38622284 -39.76057053]
[55.33353424 -52.30552673]
[51.79714966 -66.88269806]
[40.09500122 -78.37146759]
[44.45492935 -94.18041992]
[60.39180756 -98.04666901]
[71.51114655 -85.99294281]
[66.37432098 -70.41908264]
[69.91070557 -55.84190750]
[82.72299194 -48.33317947]
[86.51704407 -33.60022736]
[78.55432129 -20.21244049]
[82.09070587 -5.63526726]
[85.62709045 8.94190598]
[89.16347504 23.51907921]
[92.69985962 38.09625244]
[96.23624420 52.67342758]
[110.01712036 53.59280396]
[122.95023346 58.43971634]
[133.94102478 66.80394745]
[142.05931091 77.97763062]
[146.61804199 91.01510620]
[147.23139954 104.81299591]
[143.84747314 118.20354462]
[136.75265503 130.05349731]
[126.54738617 139.35997009]
[114.09535980 145.33532715]
[116.23007965 160.18264771]
[118.36480713 175.02996826]
[120.49952698 189.87728882]
[122.63424683 204.72460938]
[124.76897430 219.57192993]
[134.39147949 232.13050842]
[128.54421997 245.82936096]
[130.67893982 260.67669678]
[132.81365967 275.52401733]
[134.94839478 290.37133789]
[145.50547791 302.92044067]
[139.66255188 318.24337769]
[123.43032074 320.57720947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 37]
[27 34]
[28 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
