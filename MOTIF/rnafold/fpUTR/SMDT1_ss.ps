%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCUUUCUUCCCGAGGGCGGCACGAGGGCUGGGCGGUGGGGUGCGGGUGCCCGGGUGAGGGGCGGAGCUGGGGGC\
) } def
/len { sequence length } bind def

/coor [
[115.92552185 318.08377075]
[119.02908325 302.88024902]
[130.49902344 292.42941284]
[128.71376038 277.53601074]
[126.92848206 262.64263916]
[125.14321136 247.74926758]
[123.35793304 232.85588074]
[121.57266235 217.96249390]
[118.90269470 203.20204163]
[115.35752869 188.62699890]
[111.81236267 174.05195618]
[108.26719666 159.47691345]
[104.72203064 144.90187073]
[100.88777924 130.40020752]
[96.76596069 115.97763062]
[86.82160187 109.59548950]
[83.80118561 98.17185974]
[89.29165649 87.70874786]
[85.74649048 73.13370514]
[82.20132446 58.55866241]
[78.65615845 43.98362350]
[75.11099243 29.40858459]
[70.70323181 15.07081223]
[65.44857025 1.02130938]
[60.19390869 -13.02819347]
[54.93924713 -27.07769585]
[41.27465439 -29.81818771]
[30.87789345 -38.93457413]
[26.44590187 -51.91733170]
[29.05595398 -65.27396393]
[37.90619278 -75.46839142]
[33.21424103 -89.71569061]
[28.52229309 -103.96299744]
[15.93801594 -114.47812653]
[19.01843071 -130.58535767]
[34.59466934 -135.71496582]
[46.64323807 -124.59002686]
[42.76959610 -108.65494537]
[47.46154404 -94.40763855]
[52.15349197 -80.16033936]
[67.83322144 -75.74327850]
[77.96906281 -62.78126144]
[78.48564911 -46.17037201]
[68.98874664 -32.33235931]
[74.24341583 -18.28285599]
[79.49807739 -4.23335314]
[84.75273895 9.81614876]
[88.08218384 11.62286758]
[90.59026337 15.28049183]
[91.34445953 20.32580948]
[89.68602753 25.86341667]
[93.23119354 40.43845749]
[96.77635956 55.01349640]
[100.32152557 69.58853912]
[103.86669922 84.16357422]
[115.76007843 95.83303070]
[111.18853760 111.85581207]
[115.31035614 126.27838898]
[120.81785583 133.91299438]
[119.29706573 141.35670471]
[122.84223175 155.93174744]
[126.38740540 170.50679016]
[129.93257141 185.08183289]
[133.47773743 199.65687561]
[137.49429321 203.81411743]
[139.14166260 208.64218140]
[138.59371948 213.04313660]
[136.46604919 216.17723083]
[138.25131226 231.07060242]
[140.03659058 245.96398926]
[141.82186890 260.85736084]
[143.60713196 275.75076294]
[145.39241028 290.64413452]
[159.00740051 298.08804321]
[165.61630249 312.12731934]
[162.67785645 327.36364746]
[151.32196045 337.93829346]
[135.91517639 339.78509521]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[8 68]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 58]
[15 57]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 47]
[24 46]
[25 45]
[26 44]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
