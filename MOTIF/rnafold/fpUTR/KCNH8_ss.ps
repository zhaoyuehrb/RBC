%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:09:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCACAGCCGGGGCGGCUGGAACUCUCUCCCUUUCUCCCUCCAUCCUUCCACUUCCCCUGCUCGGCCCCGCCGUCAGGCCGGGUCCCCCUUCCCUGCCGUCAUCAGGUUCCCCUUCUCCCUUCUUGGCACUUUCCUUUCGAACCAUCCUUCUGGACAAACUUUGAUGGAGAAUUUCACACCACGCUGGAAAA\
) } def
/len { sequence length } bind def

/coor [
[107.93614960 203.16397095]
[106.97509766 188.19479370]
[98.43825531 175.98939514]
[105.27547455 161.72184753]
[104.31442261 146.75267029]
[92.04940033 144.10163879]
[81.48648834 138.44874573]
[73.29823303 130.49771118]
[67.90983582 121.08320618]
[54.00608444 126.71221161]
[40.10233307 132.34121704]
[30.21427536 144.69180298]
[15.51359940 142.29609680]
[1.60984790 147.92509460]
[-12.29390335 153.55410767]
[-26.19765472 159.18310547]
[-36.08571243 171.53369141]
[-50.78638840 169.13798523]
[-64.69013977 174.76698303]
[-71.48058319 180.89566040]
[-78.86212921 180.37281799]
[-92.85430908 185.77825928]
[-106.84649658 191.18368530]
[-120.83868408 196.58912659]
[-134.83087158 201.99456787]
[-132.91316223 216.94734192]
[-134.63031006 231.92448425]
[-139.88247681 246.05523682]
[-148.36431885 258.51806641]
[-159.58271790 268.58834839]
[-172.88543701 275.68069458]
[-187.49908447 279.38269043]
[-202.57403564 279.47912598]
[-217.23385620 275.96441650]
[-230.62623596 269.04290771]
[-241.97256470 259.11697388]
[-250.61318970 246.76370239]
[-256.04574585 232.70130920]
[-257.95440674 217.74737549]
[-256.22817993 202.77127075]
[-250.96742249 188.64370728]
[-242.47802734 176.18603516]
[-231.25352478 166.12252808]
[-217.94651794 159.03828430]
[-203.33062744 155.34513855]
[-188.25561523 155.25782776]
[-173.59793091 158.78141785]
[-160.20974731 165.71105957]
[-148.86943054 175.64387512]
[-140.23631287 188.00238037]
[-126.24411774 182.59693909]
[-112.25193024 177.19149780]
[-98.25975037 171.78607178]
[-84.26756287 166.38063049]
[-70.31914520 160.86323547]
[-56.41539383 155.23423767]
[-47.52182388 143.28627014]
[-31.82666016 145.27935791]
[-17.92290878 139.65036011]
[-4.01915693 134.02134705]
[9.88459396 128.39234924]
[18.77816200 116.44438171]
[34.47332764 118.43746948]
[48.37707901 112.80846405]
[62.28083038 107.17945862]
[59.87226105 85.18588257]
[70.51919556 63.19874573]
[61.35601425 51.32288361]
[52.19283676 39.44701767]
[43.02965546 27.57115555]
[33.86647415 15.69529152]
[19.31043625 9.49591255]
[17.66142654 -5.30712891]
[8.49824715 -17.18299294]
[-0.66493213 -29.05885696]
[-16.02994919 -34.79019928]
[-18.48176575 -51.00502777]
[-5.49816370 -61.02291489]
[9.56444168 -54.53831863]
[11.21093178 -38.22203445]
[20.37411118 -26.34617233]
[29.53729057 -14.47030830]
[43.43791580 -9.12036991]
[45.74234009 6.53211212]
[54.90551758 18.40797615]
[64.06869507 30.28384018]
[73.23188019 42.15970230]
[82.39505768 54.03556824]
[89.88326263 53.61503983]
[87.53540802 38.79992676]
[85.18755341 23.98481178]
[82.25972748 9.27332592]
[94.41124725 0.47898427]
[107.47077942 7.85792112]
[106.20831299 22.80431175]
[105.53398895 37.78914642]
[104.85966492 52.77398300]
[112.34786224 52.35345459]
[120.12374878 39.52631378]
[127.89964294 26.69917107]
[135.67552185 13.87202930]
[143.45141602 1.04488826]
[137.12901306 -9.75561047]
[136.01007080 -22.14789963]
[140.24607849 -33.77050400]
[148.97398376 -42.43484116]
[160.49116516 -46.53730392]
[172.58740234 -45.35583878]
[180.77043152 -57.92715836]
[188.95346069 -70.49848175]
[181.42008972 -83.82166290]
[180.95281982 -99.12003326]
[187.65899658 -112.87815094]
[199.99760437 -121.93448639]
[215.13331604 -124.20797729]
[229.58805847 -119.17617798]
[240.04023743 -107.99536896]
[244.08802795 -93.23480988]
[240.80125427 -78.28637695]
[230.93521118 -66.58509827]
[216.75703430 -60.81985855]
[201.52478027 -62.31545639]
[193.34175110 -49.74413681]
[185.15873718 -37.17281342]
[192.23152161 -21.00180435]
[188.15458679 -3.66759348]
[174.37431335 7.85715103]
[156.27856445 8.82077694]
[148.50267029 21.64791870]
[140.72677612 34.47505951]
[132.95089722 47.30220032]
[125.17500305 60.12934113]
[143.73687744 82.65026855]
[145.46479797 111.72084045]
[160.08871460 115.05865479]
[174.71263123 118.39646912]
[189.33654785 121.73428345]
[203.96047974 125.07209778]
[215.28482056 118.88080597]
[227.40243530 121.97049713]
[233.94529724 132.15412903]
[248.51382446 135.72590637]
[263.08236694 139.29768372]
[277.65090942 142.86946106]
[292.21945190 146.44123840]
[305.69647217 134.32699585]
[323.58981323 132.73208618]
[338.72979736 142.10639954]
[345.16320801 158.54225159]
[359.83874512 161.64524841]
[374.51428223 164.74824524]
[389.92913818 159.15231323]
[402.30697632 169.90968323]
[398.91452026 185.95410156]
[383.24166870 190.78044128]
[371.41128540 179.42378235]
[356.73574829 176.32078552]
[342.06021118 173.21778870]
[334.34228516 182.60655212]
[323.29754639 187.84954834]
[310.99935913 187.89450073]
[299.78564453 182.67138672]
[291.81417847 173.11749268]
[288.64767456 161.00978088]
[274.07913208 157.43800354]
[259.51058960 153.86622620]
[244.94206238 150.29444885]
[230.37351990 146.72267151]
[213.81906128 152.53053284]
[200.62266541 139.69601440]
[185.99873352 136.35820007]
[171.37481689 133.02038574]
[156.75090027 129.68257141]
[142.12698364 126.34475708]
[136.41613770 131.20646667]
[147.64959717 141.14675903]
[158.88307190 151.08705139]
[173.41732788 154.79585266]
[181.78933716 167.24211121]
[179.74552917 182.10221863]
[168.32429504 191.82618713]
[153.32844543 191.47352600]
[142.37693787 181.22343445]
[141.03446960 166.28176880]
[133.01446533 153.60583496]
[124.99444580 140.92990112]
[119.28360748 145.79161072]
[120.24465942 160.76078796]
[128.85023499 174.03688049]
[121.94427490 187.23373413]
[122.90532684 202.20291138]
[133.95501709 213.83407593]
[131.60813904 229.70454407]
[117.66501617 237.63984680]
[102.82162476 231.55270386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 191]
[2 190]
[4 188]
[5 187]
[9 65]
[10 64]
[11 63]
[13 61]
[14 60]
[15 59]
[16 58]
[18 56]
[19 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[67 88]
[68 87]
[69 86]
[70 85]
[71 84]
[73 82]
[74 81]
[75 80]
[98 132]
[99 131]
[100 130]
[101 129]
[102 128]
[108 124]
[109 123]
[110 122]
[134 174]
[135 173]
[136 172]
[137 171]
[138 170]
[141 168]
[142 167]
[143 166]
[144 165]
[145 164]
[149 158]
[150 157]
[151 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
