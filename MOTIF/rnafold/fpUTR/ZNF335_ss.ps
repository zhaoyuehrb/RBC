%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGCGGAGGAAAGAGGAUGGCGACCUCGUCGAUGCCGGAGUCAGAGAGGAACGUGGCUACGAAAGCCUCGGAGUGAAGUUCCCAGACCCUACGCCCCGCUGUCAGGCAGCCCGCCGAUCAG\
) } def
/len { sequence length } bind def

/coor [
[215.81445312 386.55987549]
[221.25492859 379.86071777]
[214.64901733 366.39367676]
[208.04310608 352.92660522]
[201.43719482 339.45953369]
[194.83128357 325.99246216]
[188.22537231 312.52539062]
[181.61946106 299.05831909]
[175.78250122 294.38546753]
[175.02163696 285.16537476]
[168.75900269 271.53527832]
[155.42016602 270.12051392]
[144.45126343 262.21258545]
[138.80386353 249.80659485]
[140.06320190 236.12490845]
[148.00492859 224.78028870]
[142.08959961 210.99592590]
[136.17425537 197.21154785]
[119.87242889 186.93821716]
[122.24456787 166.99615479]
[115.63864899 153.52908325]
[109.03273773 140.06201172]
[103.19578552 135.38917542]
[102.43492889 126.16906738]
[96.17229462 112.53897858]
[85.30039978 102.20446777]
[71.37060547 96.64022827]
[57.44081116 91.07598114]
[43.51101303 85.51174164]
[34.26420975 85.21884155]
[29.30172729 79.62606049]
[15.51736069 73.71072388]
[1.65916777 67.97047424]
[-12.27062702 62.40622711]
[-26.20042229 56.84198380]
[-40.62323380 63.30403519]
[-55.36109543 57.59693909]
[-61.67029953 43.10661316]
[-55.80770493 28.42991257]
[-41.25148392 22.27426338]
[-26.63758659 28.29170036]
[-20.63617897 42.91218948]
[-6.70638323 48.47643280]
[7.22341156 54.04067612]
[14.68711185 53.59498596]
[21.43269920 59.92635345]
[35.21706390 65.84169006]
[49.07526016 71.58194733]
[63.00505447 77.14618683]
[76.93484497 82.71043396]
[90.86464691 88.27467346]
[97.17871094 84.22714233]
[109.80684662 76.13206482]
[116.12091064 72.08452606]
[116.88064575 57.10377884]
[109.85224915 42.92943192]
[118.22424316 30.61038208]
[118.98397827 15.62963486]
[119.74371338 0.64888740]
[120.50345612 -14.33186054]
[110.85863495 -27.15204239]
[115.00776672 -42.64927673]
[129.76799011 -48.93541336]
[143.81651306 -41.18826294]
[146.37652588 -25.35077858]
[135.48420715 -13.57212257]
[134.72445679 1.40862489]
[133.96472168 16.38937187]
[133.20498657 31.37012100]
[140.28773499 44.47294617]
[131.86138916 57.86351776]
[131.10165405 72.84426117]
[138.95054626 60.06166077]
[153.74459839 62.53875732]
[165.65629578 71.65529633]
[171.91207886 85.28853607]
[171.05531311 100.26404572]
[163.28547668 113.09486389]
[150.41175842 120.79338837]
[135.43171692 121.56706238]
[121.83297729 115.23540497]
[109.80238342 106.27633667]
[116.06501770 119.90643311]
[122.49980927 133.45610046]
[129.10571289 146.92317200]
[135.71163940 160.39022827]
[146.32524109 163.35754395]
[153.35998535 171.55165100]
[154.63285828 182.05335999]
[149.95863342 191.29621887]
[155.87396240 205.08058167]
[161.78930664 218.86494446]
[178.28575134 222.34593201]
[189.37864685 234.82174683]
[190.87644958 251.28253174]
[182.38909912 265.27264404]
[188.65173340 278.90274048]
[195.08653259 292.45242310]
[201.69244385 305.91946411]
[208.29835510 319.38653564]
[214.90426636 332.85360718]
[221.51017761 346.32067871]
[228.11608887 359.78775024]
[234.72200012 373.25482178]
[256.51379395 378.41226196]
[267.56884766 397.58029175]
[261.27322388 418.51544189]
[269.84222412 430.82690430]
[278.41125488 443.13836670]
[293.88546753 447.37258911]
[300.09036255 462.16714478]
[292.26614380 476.17288208]
[276.41482544 478.64581299]
[264.69619751 467.68890381]
[266.09979248 451.70736694]
[257.53079224 439.39593506]
[248.96176147 427.08447266]
[240.75682068 428.67404175]
[232.41987610 427.71807861]
[224.72549438 424.28475952]
[218.39469910 418.67337036]
[214.02749634 411.38833618]
[212.04595947 403.09390259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 97]
[11 96]
[16 92]
[17 91]
[18 90]
[20 86]
[21 85]
[22 84]
[24 83]
[25 82]
[26 51]
[27 50]
[28 49]
[29 48]
[31 47]
[32 46]
[33 44]
[34 43]
[35 42]
[54 72]
[55 71]
[57 69]
[58 68]
[59 67]
[60 66]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
