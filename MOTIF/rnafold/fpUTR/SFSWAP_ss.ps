%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUUUGUGGCCCGCUAUGGCGGCGGUGUUGAGGUUGGGUACGGGAUGCGGGGUCUUUGACUGAAGGGGUAGGCCAAGUGGAGGUAUCAGGGACGUCGCGCGGCACAGAAGAGGACCAGCCUGGACGCCGGGGACGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[139.73332214 147.87458801]
[136.83319092 133.15762329]
[132.32261658 147.46337891]
[127.81201935 161.76913452]
[123.30143738 176.07489014]
[124.30501556 192.99909973]
[108.32001495 198.64854431]
[98.46626282 184.85217285]
[108.99568176 171.56430054]
[113.50627136 157.25854492]
[118.01685333 142.95278931]
[122.52744293 128.64703369]
[116.24633789 124.54853058]
[97.40303040 112.25301361]
[86.12543488 122.14319611]
[74.84783936 132.03338623]
[63.57024002 141.92356873]
[58.81414795 157.61788940]
[42.78507996 161.08215332]
[31.97237206 148.75262451]
[37.49920654 133.31286621]
[53.68005371 130.64598083]
[64.95764923 120.75579071]
[76.23524475 110.86560059]
[87.51284027 100.97541046]
[95.70985413 88.41320801]
[100.22044373 74.10745239]
[104.73102570 59.80170059]
[109.24161530 45.49594498]
[113.75220490 31.19019127]
[118.26278687 16.88443565]
[122.77337646 2.57868195]
[119.54397583 -12.90942764]
[130.75033569 -22.72099113]
[135.26092529 -37.02674484]
[139.77151489 -51.33250046]
[144.28208923 -65.63825226]
[148.79267883 -79.94400787]
[153.30326843 -94.24976349]
[157.81385803 -108.55551910]
[142.04978943 -125.72754669]
[139.43724060 -148.77394104]
[150.84217834 -168.83619690]
[171.76907349 -178.28416443]
[173.07640076 -193.22708130]
[170.79702759 -198.09169006]
[170.67655945 -202.85745239]
[172.30213928 -206.70178223]
[174.98945618 -209.09375000]
[177.27130127 -223.91917419]
[179.55316162 -238.74458313]
[181.83500671 -253.57000732]
[184.11685181 -268.39544678]
[178.56893921 -283.21200562]
[188.15229797 -294.61413574]
[190.43415833 -309.43957520]
[192.71600342 -324.26498413]
[194.99784851 -339.09039307]
[197.27970886 -353.91583252]
[199.56155396 -368.74124146]
[201.84341431 -383.56668091]
[204.12525940 -398.39208984]
[205.59552002 -413.31985474]
[206.24980164 -428.30560303]
[206.90409851 -443.29132080]
[194.93049622 -452.98352051]
[191.00575256 -467.69577026]
[196.43246460 -481.73196411]
[208.93405151 -489.78482056]
[209.58833313 -504.77053833]
[199.85353088 -517.52252197]
[203.89350891 -533.04858398]
[218.60911560 -539.43841553]
[232.71182251 -531.79034424]
[235.38322449 -515.97125244]
[224.57406616 -504.11624146]
[223.91976929 -489.13052368]
[235.67192078 -480.01870728]
[239.85466003 -465.56295776]
[234.66259766 -451.24877930]
[221.88981628 -442.63702393]
[221.23553467 -427.65130615]
[220.58123779 -412.66558838]
[233.46405029 -420.34887695]
[247.58062744 -415.27719116]
[252.62823486 -401.15197754]
[244.92295837 -388.28228760]
[230.08836365 -386.06085205]
[218.95068359 -396.11026001]
[216.66883850 -381.28482056]
[214.38697815 -366.45941162]
[212.10513306 -351.63397217]
[209.82327271 -336.80856323]
[207.54142761 -321.98312378]
[205.25958252 -307.15771484]
[202.97772217 -292.33227539]
[208.68885803 -278.57611084]
[198.94227600 -266.11358643]
[196.66043091 -251.28816223]
[194.37858582 -236.46273804]
[192.09672546 -221.63731384]
[189.81488037 -206.81188965]
[188.01931763 -191.91975403]
[186.71199036 -176.97682190]
[193.92237854 -174.01112366]
[200.36061096 -169.59396362]
[205.73809814 -163.91755676]
[209.81266785 -157.23066711]
[212.39932251 -149.82774353]
[213.37872314 -142.03590393]
[212.70269775 -134.20054626]
[210.39651489 -126.66993713]
[206.55802917 -119.77986145]
[201.35353088 -113.83855438]
[195.01051331 -109.11294556]
[187.80781555 -105.81665802]
[180.06323242 -104.10037231]
[172.11961365 -104.04492950]
[167.60902405 -89.73917389]
[163.09843445 -75.43341827]
[158.58784485 -61.12766647]
[154.07725525 -46.82191467]
[149.56668091 -32.51615906]
[145.05609131 -18.21040535]
[148.60812378 -3.74553823]
[137.07913208 7.08926868]
[132.56854248 21.39502335]
[128.05795288 35.70077896]
[123.54737091 50.00653076]
[119.03678131 64.31228638]
[114.52619934 78.61804199]
[110.01560974 92.92379761]
[120.83256531 82.53180695]
[132.20887756 72.75533295]
[146.31771851 67.66213226]
[161.31555176 67.91770172]
[175.24266052 73.48864746]
[186.27928162 83.64704895]
[192.98330688 97.06554413]
[194.47874451 111.99081421]
[190.57020569 126.47264099]
[181.76840210 138.61875916]
[169.22340393 146.84208679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[14 25]
[15 24]
[16 23]
[17 22]
[26 132]
[27 131]
[28 130]
[29 129]
[30 128]
[31 127]
[32 126]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[39 119]
[40 118]
[44 104]
[45 103]
[49 102]
[50 101]
[51 100]
[52 99]
[53 98]
[55 96]
[56 95]
[57 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 83]
[64 82]
[65 81]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
