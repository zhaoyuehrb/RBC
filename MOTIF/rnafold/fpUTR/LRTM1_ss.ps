%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGAAAGCAACAACUGUUUUCUGCAUUGAAGAAAAGCAAGGGCAGGGUUCAGAAAGACUGAAUGUAAAGCUGGGCUCUGAGUCUGCCAUGCCCUUCGUGUGUUGCUCUGCACAUUAAUUAAAGGGUCUACGAGGUCAGCAAGGACGCCCAAGGAGACUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[-105.66242218 234.53247070]
[-106.99663544 241.90377808]
[-109.74356842 248.86257935]
[-113.79351807 255.14134216]
[-118.98677826 260.49948120]
[-125.11991119 264.73257446]
[-131.95372009 267.68017578]
[-139.22262573 269.23184204]
[-146.64488220 269.33139038]
[-153.93363953 267.97869873]
[-160.80787659 265.22985840]
[-167.00335693 261.19464111]
[-172.28273010 256.03210449]
[-176.44464111 249.94456482]
[-190.74559021 254.47038269]
[-205.04652405 258.99618530]
[-212.37370300 272.74209595]
[-226.94136047 277.12820435]
[-240.00083923 270.05816650]
[-254.30178833 274.58395386]
[-268.60272217 279.10977173]
[-282.90368652 283.63558960]
[-297.20462036 288.16137695]
[-311.50558472 292.68719482]
[-323.58361816 306.55834961]
[-340.55422974 302.16876221]
[-354.76583862 306.96768188]
[-368.97747803 311.76660156]
[-373.47387695 326.61791992]
[-385.86123657 335.96313477]
[-401.37637329 336.20880127]
[-414.05337524 327.26046753]
[-419.01773071 312.55895996]
[-414.36047363 297.75726318]
[-401.87246704 288.54696655]
[-386.35559082 288.46963501]
[-373.77639771 297.55496216]
[-359.56475830 292.75604248]
[-345.35314941 287.95715332]
[-339.68557739 277.23742676]
[-327.84756470 273.13961792]
[-316.03137207 278.38626099]
[-301.73043823 273.86044312]
[-287.42950439 269.33462524]
[-273.12854004 264.80883789]
[-258.82760620 260.28302002]
[-244.52665710 255.75720215]
[-237.91244507 242.46104431]
[-223.47372437 237.66751099]
[-209.57234192 244.69525146]
[-195.27139282 240.16943359]
[-180.97044373 235.64363098]
[-176.23381042 212.73425293]
[-158.77606201 196.98863220]
[-135.27095032 194.61021423]
[-114.81362152 206.65679932]
[-101.77561951 199.23989868]
[-88.73760986 191.82299805]
[-75.69960785 184.40609741]
[-62.66160202 176.98919678]
[-49.62359619 169.57229614]
[-47.50859833 165.24295044]
[-42.62743378 162.21923828]
[-35.94107819 162.13198853]
[-22.62855148 155.21990967]
[-23.18156433 140.31489563]
[-17.18361473 126.59141541]
[-5.77528000 116.79289246]
[8.81555557 112.90345764]
[23.70868111 115.74630737]
[35.94009399 124.81018829]
[49.25262070 117.89812469]
[62.56514359 110.98605347]
[75.87767029 104.07398987]
[89.19020081 97.16192627]
[102.43591309 90.12267303]
[115.61359406 82.95687103]
[128.79127502 75.79107666]
[133.36732483 60.90156555]
[146.83345032 53.82214737]
[161.00012207 58.27646255]
[174.17779541 51.11066818]
[178.75384521 36.22115326]
[192.21997070 29.14173698]
[206.38664246 33.59605408]
[219.56433105 26.43025589]
[232.74200439 19.26445961]
[241.16937256 5.87453079]
[256.04669189 6.59177351]
[269.22436523 -0.57402354]
[282.11791992 -8.23930359]
[294.70840454 -16.39281654]
[307.29888916 -24.54632950]
[319.88937378 -32.69984436]
[332.47985840 -40.85335541]
[341.13394165 -62.36196518]
[363.57162476 -63.08596802]
[375.32464600 -72.40618896]
[387.07766724 -81.72640991]
[398.83068848 -91.04662323]
[410.58370972 -100.36684418]
[422.33673096 -109.68706512]
[423.90002441 -125.41384888]
[436.17871094 -135.36418152]
[451.88809204 -133.63471985]
[461.70806885 -121.25150299]
[459.81259155 -105.56129456]
[447.32626343 -95.87280273]
[431.65695190 -97.93404388]
[419.90393066 -88.61382294]
[408.15090942 -79.29360199]
[396.39788818 -69.97338867]
[384.64486694 -60.65316772]
[372.89184570 -51.33294678]
[373.88439941 -44.17811584]
[372.29437256 -37.06187820]
[368.27630615 -30.89535713]
[362.29870605 -26.48513985]
[355.08969116 -24.42788887]
[347.54852295 -25.02997017]
[340.63336182 -28.26287460]
[328.04287720 -20.10936165]
[315.45239258 -11.95584869]
[302.86190796 -3.80233550]
[290.27142334 4.35117769]
[289.56857300 7.11067057]
[287.70455933 9.75076771]
[284.72192383 11.81810570]
[280.82983398 12.88419151]
[276.39016724 12.60366058]
[263.21249390 19.76945686]
[255.72769165 32.64683914]
[239.90780640 32.44214249]
[226.73011780 39.60794067]
[213.55244446 46.77373886]
[209.59069824 61.08597565]
[196.32873535 68.54083252]
[181.34359741 64.28835297]
[168.16590881 71.45414734]
[164.20417786 85.76638794]
[150.94219971 93.22124481]
[135.95707703 88.96875763]
[122.77938843 96.13455963]
[109.60170746 103.30035400]
[104.55926514 109.64091492]
[96.10226440 110.47444916]
[82.78973389 117.38652039]
[69.47721100 124.29858398]
[56.16468430 131.21064758]
[42.85215759 138.12271118]
[43.22881317 153.34176636]
[36.98576736 167.15882874]
[25.41010475 176.85543823]
[10.83218384 180.54937744]
[-3.84338999 177.55990601]
[-15.71648502 168.53244019]
[-29.02901077 175.44450378]
[-42.20669556 182.61030579]
[-55.24470139 190.02720642]
[-68.28270721 197.44410706]
[-81.32070923 204.86100769]
[-94.35871887 212.27790833]
[-107.39672852 219.69480896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 52]
[15 51]
[16 50]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[26 39]
[27 38]
[28 37]
[56 163]
[57 162]
[58 161]
[59 160]
[60 159]
[61 158]
[64 157]
[65 156]
[71 150]
[72 149]
[73 148]
[74 147]
[75 146]
[76 144]
[77 143]
[78 142]
[81 139]
[82 138]
[85 135]
[86 134]
[87 133]
[89 131]
[90 130]
[91 125]
[92 124]
[93 123]
[94 122]
[95 121]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
