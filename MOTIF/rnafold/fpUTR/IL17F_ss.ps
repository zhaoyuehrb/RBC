%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACACAGGCAUACACAGGAAGAUACAUUCACAGAAAGAGCUUCCUGCACAAAGUAAGCCACCAGCGCAAC\
) } def
/len { sequence length } bind def

/coor [
[93.57534027 291.85778809]
[83.86347198 280.27456665]
[77.99882507 266.34268188]
[76.50286865 251.30096436]
[79.50863647 236.48689270]
[86.74885559 223.21772766]
[97.57972717 212.67335510]
[111.03817749 205.79138184]
[108.43345642 191.01927185]
[105.82872772 176.24714661]
[95.99890900 165.05680847]
[101.22229004 150.12272644]
[98.61756897 135.35060120]
[96.01284027 120.57849121]
[79.87621307 105.86554718]
[85.58045197 84.78657532]
[79.84020233 70.92838287]
[74.09995270 57.07019043]
[68.35969543 43.21199799]
[62.61944580 29.35380554]
[56.87919617 15.49561214]
[51.13894272 1.63741910]
[37.02775955 0.49227408]
[24.87944794 -6.64696026]
[17.08686638 -18.30663300]
[15.15548229 -32.12955093]
[19.41282654 -45.35144043]
[28.95466042 -55.35372543]
[23.82435799 -69.44911194]
[18.69405556 -83.54450226]
[7.59505272 -96.36045074]
[16.83763695 -110.57350922]
[33.05384445 -105.62669373]
[32.78944397 -88.67480469]
[37.91974640 -74.57941437]
[43.05004883 -60.48402786]
[58.89064789 -58.14109421]
[71.51675415 -48.14229965]
[77.49587250 -33.08765411]
[75.14365387 -16.96703339]
[64.99713898 -4.10283232]
[70.73738861 9.75536060]
[76.47763824 23.61355400]
[82.21788788 37.47174835]
[87.95814514 51.32994080]
[93.69839478 65.18813324]
[99.43864441 79.04632568]
[107.16065216 80.29982758]
[113.88524628 84.29740143]
[118.67573547 90.48220825]
[120.86486816 97.99275970]
[120.14769745 105.78290558]
[116.62412262 112.76753998]
[110.78495789 117.97376251]
[113.38967896 132.74588013]
[115.99440765 147.51800537]
[126.01053619 159.76495361]
[120.60084534 173.64242554]
[123.20556641 188.41455078]
[125.81029510 203.18666077]
[140.81086731 205.05053711]
[154.59494019 211.25462341]
[165.93684387 221.24726868]
[173.82804871 234.13990784]
[177.56689453 248.78614807]
[176.82090759 263.88366699]
[171.65643311 278.08999634]
[162.53268433 290.14190674]
[150.26094055 298.96774292]
[135.93240356 303.78277588]
[120.82114410 304.15878296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 60]
[9 59]
[10 58]
[12 56]
[13 55]
[14 54]
[16 47]
[17 46]
[18 45]
[19 44]
[20 43]
[21 42]
[22 41]
[28 36]
[29 35]
[30 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
