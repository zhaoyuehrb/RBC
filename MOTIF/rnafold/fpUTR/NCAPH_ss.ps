%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGCCGGCGACGUCACGCGGCCGUUACGGCGCUCAGGCGUCUCGACGCGCGCGAUUUAAAACCAGCUCAGGAGACGCCAAGGAAAG\
) } def
/len { sequence length } bind def

/coor [
[138.90713501 96.64580536]
[124.48821259 100.78036499]
[110.06929016 104.91492462]
[95.72471619 109.30049896]
[81.45886993 113.93575287]
[67.19302368 118.57100677]
[54.65697479 134.16830444]
[35.93580246 129.88587952]
[22.02804375 135.50497437]
[8.12028694 141.12406921]
[-5.78747129 146.74316406]
[-12.02875328 161.01496887]
[-26.21324348 166.51541138]
[-39.78075790 160.47735596]
[-53.68851471 166.09645081]
[-66.10930634 177.63595581]
[-80.63626099 168.89503479]
[-76.25839996 152.51606750]
[-59.30761337 152.18869019]
[-45.39985657 146.56959534]
[-39.83459473 132.80139160]
[-25.81019592 126.90470123]
[-11.40657043 132.83541870]
[2.50118780 127.21631622]
[16.40894508 121.59721375]
[30.31670380 115.97811890]
[33.56507492 106.00904083]
[42.01376724 99.43138885]
[52.91867447 98.69675446]
[62.55776596 104.30516052]
[76.82361603 99.66990662]
[91.08946228 95.03465271]
[97.33029938 89.63562012]
[105.93473053 90.49600220]
[120.35365295 86.36143494]
[134.77258301 82.22687531]
[143.36936951 60.98633957]
[164.31088257 52.31097031]
[184.95509338 61.05696869]
[197.94548035 53.55696869]
[210.93586731 46.05696869]
[223.92623901 38.55696869]
[236.91662598 31.05696869]
[249.90701294 23.55696869]
[262.89739990 16.05696869]
[275.88775635 8.55696774]
[277.37292480 -8.18649387]
[288.37545776 -20.67568588]
[304.47613525 -24.18937492]
[319.38049316 -17.55364227]
[332.10122681 -25.50242996]
[328.92532349 -40.32435989]
[331.01345825 -55.33820343]
[338.11343384 -68.73097229]
[349.36788940 -78.88542175]
[363.41781616 -84.57535553]
[378.56661987 -85.11367798]
[392.98498535 -80.43539429]
[404.93185425 -71.10542297]
[412.96453857 -58.25040436]
[416.11309814 -43.42264938]
[413.99731445 -28.41267586]
[406.87268066 -15.03301525]
[395.59951782 -4.89932394]
[381.53912354 0.76470470]
[366.38937378 1.27511144]
[351.97964478 -3.42973757]
[340.05001831 -12.78170872]
[327.32928467 -4.83292007]
[327.61532593 8.63510513]
[321.10812378 20.55456543]
[309.43887329 27.71119308]
[295.64678955 28.11386490]
[283.38775635 21.54734802]
[270.39739990 29.04734802]
[257.40701294 36.54734802]
[244.41662598 44.04734802]
[231.42623901 51.54734802]
[218.43586731 59.04734802]
[205.44548035 66.54734802]
[192.45509338 74.04734802]
[193.51562500 82.24214935]
[192.20945740 90.42916107]
[188.62806702 97.93662262]
[183.05023193 104.14411926]
[175.92044067 108.53380585]
[167.81340027 110.73361206]
[159.38784790 110.54872131]
[151.33288574 107.97875214]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 32]
[5 31]
[6 30]
[8 26]
[9 25]
[10 24]
[11 23]
[14 20]
[15 19]
[39 81]
[40 80]
[41 79]
[42 78]
[43 77]
[44 76]
[45 75]
[46 74]
[50 69]
[51 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
