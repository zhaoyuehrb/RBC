%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUCCGCCCUCUCCCCGCCUCCUUUUCGGGCGUCCCGAGGCCGCUCCCCAACCGACAACCAAGACCCCGCAGGCCACGCAGCCCUGGAGCCGAGGCCCCCCGACGGCGGAGGCGCCCGCGGGUCCCCUACAGCCAAGGUCCCUGAGUGCCAGAGGUGGUGGUGUUGCUUAUCUUCUGGAACCCC\
) } def
/len { sequence length } bind def

/coor [
[-74.03102875 360.52972412]
[-82.63027191 363.59259033]
[-91.68306732 364.66964722]
[-100.73746490 363.71237183]
[-109.34259033 360.77371216]
[-117.07112885 356.00512695]
[-128.28585815 365.96655273]
[-133.46524048 380.91595459]
[-148.11906433 383.58328247]
[-159.33378601 393.54470825]
[-170.54852295 403.50613403]
[-181.76324463 413.46752930]
[-178.78497314 428.47012329]
[-183.68359375 442.85412598]
[-195.04876709 452.78890991]
[-209.76228333 455.68167114]
[-223.85333252 450.85382080]
[-235.06805420 460.81524658]
[-246.28277588 470.77664185]
[-257.49749756 480.73806763]
[-268.71224976 490.69949341]
[-268.09124756 506.32473755]
[-277.70013428 518.66180420]
[-293.00180054 521.88555908]
[-306.77133179 514.47381592]
[-312.50714111 499.92614746]
[-307.50097656 485.11154175]
[-294.11657715 477.02502441]
[-278.67364502 479.48477173]
[-267.45892334 469.52334595]
[-256.24420166 459.56192017]
[-245.02947998 449.60049438]
[-233.81474304 439.63909912]
[-236.94676208 425.07693481]
[-232.33862305 410.80734253]
[-221.13262939 400.69342041]
[-206.27119446 397.52566528]
[-191.72467041 402.25280762]
[-180.50993347 392.29138184]
[-169.29521179 382.32998657]
[-158.08049011 372.36856079]
[-153.70326233 358.13165283]
[-138.24728394 354.75183105]
[-127.03254700 344.79040527]
[-132.96444702 324.39941406]
[-127.80414581 303.72583008]
[-112.88568115 288.41177368]
[-92.21627045 282.67404175]
[-71.40013885 288.14309692]
[-61.62954712 276.76174927]
[-51.85896301 265.38037109]
[-55.47346497 250.95561218]
[-49.83429337 237.00341797]
[-36.90975952 228.95297241]
[-21.54552650 230.06944275]
[-11.77494049 218.68806458]
[-9.35548496 203.99128723]
[5.50430727 198.56015015]
[15.27489471 187.17878723]
[17.69434929 172.48199463]
[32.55414200 167.05087280]
[42.32472992 155.66949463]
[52.09531784 144.28813171]
[54.51477051 129.59133911]
[69.37456512 124.16021729]
[79.14514923 112.77883911]
[88.91574097 101.39746857]
[98.58985901 89.93399048]
[108.16683197 78.38922119]
[117.74379730 66.84445190]
[127.32076263 55.29968643]
[129.59371948 34.00550461]
[149.19775391 27.58925629]
[158.17770386 15.57423973]
[167.15763855 3.55922365]
[169.79714966 -5.20891285]
[176.39210510 -8.58117485]
[185.57369995 -20.44281006]
[187.90240479 -36.09170151]
[201.81130981 -41.42007065]
[210.99290466 -53.28170776]
[220.17448425 -65.14334106]
[221.96260071 -85.20796204]
[240.12886047 -91.79466248]
[248.90458679 -103.95963287]
[257.68032837 -116.12460327]
[266.35302734 -128.36325073]
[274.92202759 -140.67469788]
[268.32189941 -153.02110291]
[267.69296265 -166.94052124]
[273.10113525 -179.70989990]
[283.43682861 -188.85575867]
[296.64215088 -192.63333130]
[310.12042236 -190.35917664]
[318.89617920 -202.52413940]
[327.67190552 -214.68911743]
[322.98718262 -229.36424255]
[327.78582764 -243.81507874]
[340.02868652 -252.56584167]
[354.89877319 -252.43116760]
[363.67453003 -264.59613037]
[372.45025635 -276.76110840]
[381.22598267 -288.92605591]
[378.90396118 -304.32885742]
[387.97708130 -316.54086304]
[402.67559814 -318.65963745]
[411.45135498 -330.82461548]
[420.22708130 -342.98956299]
[429.00280762 -355.15454102]
[430.12268066 -371.51541138]
[444.96850586 -378.48202515]
[458.26818848 -368.88772583]
[456.34014893 -352.60229492]
[441.16778564 -346.37881470]
[432.39205933 -334.21383667]
[423.61630249 -322.04885864]
[414.84057617 -309.88391113]
[417.46640015 -295.26745605]
[408.73983765 -282.80541992]
[393.39096069 -280.15032959]
[384.61523438 -267.98535156]
[375.83947754 -255.82040405]
[367.06375122 -243.65542603]
[371.88211060 -229.58697510]
[367.43994141 -215.20883179]
[355.24050903 -206.09687805]
[339.83688354 -205.91337585]
[331.06112671 -193.74841309]
[322.28540039 -181.58343506]
[329.26498413 -167.02070618]
[327.94680786 -150.83152771]
[318.59588623 -137.43586731]
[303.68322754 -130.53871155]
[287.23348999 -132.10568237]
[278.66445923 -119.79422760]
[277.42114258 -112.49217987]
[269.84530640 -107.34886932]
[261.06954956 -95.18389893]
[252.29382324 -83.01892853]
[254.83012390 -73.09287262]
[251.40113831 -63.20579529]
[242.91464233 -56.71415329]
[232.03611755 -55.96175385]
[222.85453796 -44.10011673]
[213.67294312 -32.23847961]
[212.00097656 -17.43801498]
[197.43533325 -11.26122093]
[188.25375366 0.60041487]
[179.17265320 12.53916645]
[170.19271851 24.55418396]
[161.21276855 36.56919861]
[163.90650940 45.06937790]
[162.35067749 53.98929214]
[156.77114868 61.29467392]
[148.32571411 65.26032257]
[138.86553955 64.87665558]
[129.28855896 76.42142487]
[119.71159363 87.96619415]
[110.13462830 99.51096344]
[107.81381226 107.25005341]
[100.29711151 111.16806030]
[90.52651978 122.54943085]
[80.75593567 133.93080139]
[77.63761902 149.44166565]
[63.47668839 154.05871582]
[53.70610046 165.44009399]
[43.93551254 176.82145691]
[40.81719971 192.33232117]
[26.65626526 196.94937134]
[16.88567924 208.33074951]
[13.76736546 223.84159851]
[-0.39356828 228.45866394]
[-10.16415596 239.84002686]
[-6.73398495 254.85801697]
[-12.73447037 268.85256958]
[-25.67184639 276.53945923]
[-40.47758865 275.15093994]
[-50.24817657 286.53231812]
[-60.01876450 297.91369629]
[-55.10903931 305.72091675]
[-52.05793762 314.41183472]
[-51.01264191 323.55139160]
[-52.02006912 332.68334961]
[-55.02479553 341.35296631]
[-59.87207794 349.12979126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 44]
[7 43]
[9 41]
[10 40]
[11 39]
[12 38]
[17 33]
[18 32]
[19 31]
[20 30]
[21 29]
[49 179]
[50 178]
[51 177]
[55 173]
[56 172]
[58 170]
[59 169]
[61 167]
[62 166]
[63 165]
[65 163]
[66 162]
[67 161]
[68 159]
[69 158]
[70 157]
[71 156]
[73 151]
[74 150]
[75 149]
[77 148]
[78 147]
[80 145]
[81 144]
[82 143]
[84 139]
[85 138]
[86 137]
[87 135]
[88 134]
[94 129]
[95 128]
[96 127]
[100 123]
[101 122]
[102 121]
[103 120]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
