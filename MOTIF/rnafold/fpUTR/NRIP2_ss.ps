%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUUUCCAGCCGGAGUCUCACUCCCUCUACAGCAAUCUCGGGAAAUUGGAGACUGACGCGGCUGCUCCUGC\
) } def
/len { sequence length } bind def

/coor [
[85.08103180 271.48822021]
[72.17972565 263.49316406]
[63.04088593 251.37516785]
[58.90046310 236.77305603]
[60.31841660 221.66168213]
[67.10297394 208.08470154]
[78.33658600 197.87832642]
[92.50000000 192.42283630]
[92.50000000 177.42283630]
[92.50000000 162.42283630]
[92.50000000 147.42283630]
[92.50000000 132.42283630]
[92.50000000 117.42284393]
[81.07096863 101.22363281]
[90.31925964 83.68777466]
[88.38803864 68.81261444]
[86.45681763 53.93745422]
[84.52558899 39.06229401]
[82.59436798 24.18713379]
[80.66314697 9.31197357]
[64.18467712 -1.64032221]
[60.63672256 -20.80855751]
[71.76461792 -36.45677185]
[67.93431854 -50.95949173]
[64.10401917 -65.46221161]
[60.27371979 -79.96492767]
[45.20539093 -81.96839905]
[32.05327225 -89.59009552]
[22.82296562 -101.66775513]
[18.92202568 -116.35962677]
[20.94532013 -131.42530823]
[28.58430672 -144.56738281]
[40.67409897 -153.78179932]
[55.37108994 -157.66340637]
[70.43409729 -155.62030029]
[83.56611633 -147.96401978]
[92.76461792 -135.86212158]
[96.62689209 -121.16004181]
[94.56396484 -106.09973145]
[86.89042664 -92.97779846]
[74.77643585 -83.79522705]
[78.60673523 -69.29251099]
[82.43703461 -54.78979111]
[86.26733398 -40.28707504]
[96.70002747 -37.52805710]
[105.00164032 -30.50501060]
[109.51934814 -20.52349663]
[109.31409454 -9.48664951]
[104.35485077 0.46762240]
[95.53830719 7.38075066]
[97.46952820 22.25591087]
[99.40074921 37.13106918]
[101.33197784 52.00622940]
[103.26319885 66.88139343]
[105.19441986 81.75654602]
[113.19008636 86.36815643]
[118.06250000 94.20762634]
[118.65792847 103.41865540]
[114.83538818 111.82019043]
[107.50000000 117.42284393]
[107.50000000 132.42283630]
[107.50000000 147.42283630]
[107.50000000 162.42283630]
[107.50000000 177.42283630]
[107.50000000 192.42283630]
[121.66341400 197.87832642]
[132.89701843 208.08470154]
[139.68157959 221.66168213]
[141.09953308 236.77305603]
[136.95912170 251.37516785]
[127.82027435 263.49316406]
[114.91896820 271.48822021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[15 55]
[16 54]
[17 53]
[18 52]
[19 51]
[20 50]
[23 44]
[24 43]
[25 42]
[26 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
