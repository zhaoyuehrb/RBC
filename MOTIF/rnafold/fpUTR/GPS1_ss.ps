%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCCGGAAGCGACGGCUUCGCUGCCCCGGAAGUGGACGGCACGCCGCGGCGGGGUGGGUGCAAG\
) } def
/len { sequence length } bind def

/coor [
[124.89029694 193.30389404]
[122.81794739 178.44773865]
[120.74560547 163.59158325]
[118.67326355 148.73542786]
[116.60091400 133.87925720]
[114.52857208 119.02310944]
[101.99581909 122.37068939]
[90.41746521 118.66660309]
[83.20284271 109.91571808]
[68.34668732 111.98806763]
[53.49052811 114.06040955]
[38.63437271 116.13275909]
[23.77821732 118.20510101]
[11.18488216 128.70938110]
[-4.11337662 122.80216217]
[-6.37902308 106.56027222]
[6.71864605 96.69198608]
[21.70587158 103.34894562]
[36.56202698 101.27660370]
[51.41818619 99.20425415]
[66.27433777 97.13191223]
[81.13050079 95.05956268]
[87.15368652 83.87921143]
[99.32792664 78.28936005]
[113.09549713 81.30075836]
[122.73668671 92.51660919]
[132.84211731 81.43147278]
[142.94755554 70.34634399]
[153.05299377 59.26120758]
[163.15841675 48.17607117]
[173.26385498 37.09093857]
[171.10435486 23.58990669]
[177.12820435 11.53525257]
[188.87391663 5.34029627]
[201.83445740 7.12311745]
[212.44105530 -3.48348403]
[223.04765320 -14.09008598]
[233.65425110 -24.69668770]
[237.69174194 -33.28105545]
[245.00418091 -35.53400040]
[256.08932495 -45.63943481]
[263.72119141 -60.77848816]
[280.38131714 -57.63578415]
[281.97341919 -40.75675964]
[266.19476318 -34.55430222]
[255.10961914 -24.44886780]
[244.26086426 -14.09008598]
[233.65425110 -3.48348403]
[223.04765320 7.12311745]
[212.44105530 17.72971916]
[213.25369263 34.37110138]
[201.67214966 46.80797577]
[184.34898376 47.19637299]
[174.24356079 58.28150558]
[164.13812256 69.36663818]
[154.03268433 80.45177460]
[143.92724609 91.53691101]
[133.82182312 102.62203979]
[129.38471985 116.95075989]
[131.45707703 131.80691528]
[133.52941895 146.66307068]
[135.60176086 161.51922607]
[137.67410278 176.37538147]
[139.74644470 191.23155212]
[150.25073242 203.82487488]
[144.34350586 219.12313843]
[128.10162354 221.38877869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[35 50]
[36 49]
[37 48]
[38 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
