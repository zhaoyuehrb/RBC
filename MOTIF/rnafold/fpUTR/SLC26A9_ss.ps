%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAGAGCCCUUUCACACACCUCAGGAACACCUUUCGGCUGCCCGCUCCCCAGACACACCUGCAGCCCUGCCCAGCCGGCUUUGCUCACCCACUGCUUGUAAAUGCCCCAGAU\
) } def
/len { sequence length } bind def

/coor [
[194.29690552 219.08979797]
[184.51629639 207.71704102]
[174.73568726 196.34428406]
[164.95506287 184.97152710]
[155.17445374 173.59877014]
[145.39384460 162.22601318]
[135.61322021 150.85325623]
[125.83261108 139.48049927]
[116.05200195 128.10774231]
[106.27138519 116.73498535]
[115.25526428 128.74707031]
[119.13512421 143.23660278]
[117.35591125 158.13070679]
[110.17215729 171.29861450]
[98.61158752 180.85650635]
[84.32807159 185.43701172]
[69.36502075 184.38485718]
[55.86306381 177.85054016]
[45.75381470 166.76887512]
[40.48351288 152.72523499]
[40.80612946 137.72871399]
[46.67551804 123.92471313]
[57.25199127 113.28807068]
[71.02246857 107.34046173]
[86.01867676 106.93305969]
[71.03126526 106.31857300]
[56.04386139 105.70408630]
[41.77682877 113.79011536]
[27.77968597 105.24541473]
[28.45149040 88.86003113]
[43.10115051 81.48985291]
[56.65834808 90.71668243]
[71.64575958 91.33116913]
[86.63316345 91.94565582]
[92.11443329 86.82650757]
[88.72877502 72.21359253]
[103.07697296 76.58821106]
[108.55824280 71.46906281]
[108.96796417 56.47465897]
[109.37768555 41.48025513]
[109.78740692 26.48585129]
[110.19712830 11.49144840]
[94.60334015 0.64941561]
[88.58637238 -17.20928192]
[94.34889984 -34.99676895]
[109.45481873 -45.76341629]
[108.63568115 -60.74103546]
[107.81654358 -75.71865082]
[99.18608093 -82.61573792]
[95.91768646 -92.93714905]
[98.88167572 -103.11978149]
[106.83991241 -109.79010010]
[106.83991241 -124.79010010]
[106.83991241 -139.79010010]
[95.48877716 -150.78678894]
[95.32168579 -166.59019470]
[106.43777466 -177.82443237]
[122.24205780 -177.82443237]
[133.35813904 -166.59019470]
[133.19105530 -150.78678894]
[121.83991241 -139.79010010]
[121.83991241 -124.79010010]
[121.83991241 -109.79010010]
[132.78073120 -93.94442749]
[122.79415894 -76.53778839]
[123.61329651 -61.56017303]
[124.43243408 -46.58255386]
[134.98072815 -42.30368805]
[143.16201782 -34.31472778]
[147.73176575 -23.77616310]
[147.97418213 -12.24022865]
[143.81399536 -1.42231643]
[135.83354187 7.05412006]
[125.19153595 11.90116978]
[124.78181458 26.89557266]
[124.37209320 41.88997650]
[123.96237183 56.88438034]
[123.55264282 71.87878418]
[117.64414215 106.95436859]
[127.42475891 118.32713318]
[137.20536804 129.69989014]
[146.98599243 141.07264709]
[156.76660156 152.44540405]
[166.54721069 163.81816101]
[176.32781982 175.19091797]
[186.10844421 186.56367493]
[195.88905334 197.93643188]
[205.66966248 209.30918884]
[220.48022461 203.61082458]
[236.31951904 203.30450439]
[251.28875732 208.40875244]
[263.59967041 218.29452515]
[271.78814697 231.76278687]
[274.88824463 247.18978882]
[272.54635620 262.72296143]
[265.06109619 276.50323486]
[275.14868164 287.60458374]
[290.55795288 285.77856445]
[304.08114624 293.38796997]
[310.51831055 307.50683594]
[307.39422607 322.70617676]
[295.91018677 333.14154053]
[280.48202515 334.80029297]
[267.04217529 327.04461670]
[260.75857544 312.85675049]
[264.04733276 297.69219971]
[253.95973206 286.59082031]
[240.96090698 292.36761475]
[226.78997803 293.82998657]
[212.84329224 290.82037354]
[200.49926758 283.62261963]
[190.98214722 272.93508911]
[185.24063110 259.80303955]
[183.85324097 245.51638794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[6 83]
[7 82]
[8 81]
[9 80]
[10 79]
[25 34]
[26 33]
[27 32]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[46 67]
[47 66]
[48 65]
[52 63]
[53 62]
[54 61]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
