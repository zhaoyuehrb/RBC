%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAGAGCAGCUGUUGCAGUAACCUGUUGCAGAAAAGUGAAAGUAUAUCCGCAACAGUUGGCUCUGAUUGCAGAGAGCGCGCUUGUGAGAACUG\
) } def
/len { sequence length } bind def

/coor [
[153.80166626 171.79827881]
[152.80097961 153.03497314]
[141.20582581 143.51907349]
[129.61067200 134.00317383]
[118.01551056 124.48727417]
[106.42034912 114.97137451]
[94.65948486 115.38966370]
[85.68583679 107.77609253]
[84.18274689 96.10417175]
[72.90515137 86.21398163]
[61.62755203 76.32379913]
[50.34995651 66.43360901]
[39.07236099 56.54342270]
[27.79476166 46.65323639]
[16.51716614 36.76305008]
[5.23956823 26.87286186]
[-6.03802872 16.98267365]
[-17.31562614 7.09248638]
[-35.37902069 4.01757336]
[-40.55422592 -12.66324806]
[-52.14938354 -22.17914772]
[-63.74454117 -31.69504738]
[-79.26199341 -30.33622360]
[-90.88557434 -40.15187454]
[-92.08537292 -54.95376968]
[-103.68053436 -64.46966553]
[-119.25669861 -67.24339294]
[-124.18652344 -81.29850006]
[-135.78167725 -90.81439972]
[-147.37683105 -100.33029938]
[-158.97200012 -109.84619904]
[-174.67364502 -108.04787445]
[-186.99583435 -117.94429016]
[-188.62805176 -133.66406250]
[-178.60191345 -145.88095093]
[-162.86576843 -147.34686279]
[-150.75556946 -137.19212341]
[-149.45610046 -121.44135284]
[-137.86093140 -111.92545319]
[-126.26578522 -102.40955353]
[-114.67062378 -92.89366150]
[-99.92382050 -90.80057526]
[-94.16463470 -76.06482697]
[-82.56947327 -66.54892731]
[-67.81792450 -68.25988770]
[-55.92323303 -58.77458572]
[-54.22864151 -43.29020309]
[-42.63348389 -33.77430344]
[-31.03832817 -24.25840569]
[-18.84943390 -25.10589790]
[-9.08858585 -17.10372353]
[-7.42543888 -4.18511057]
[3.85215831 5.70507669]
[15.12975597 15.59526348]
[26.40735245 25.48545074]
[37.68494797 35.37563705]
[48.96254730 45.26582718]
[60.24014282 55.15601349]
[71.51773834 65.04620361]
[82.79534149 74.93638611]
[94.07293701 84.82657623]
[110.53889465 87.57846069]
[115.93624878 103.37621307]
[127.53141022 112.89211273]
[139.12657166 122.40801239]
[150.72172546 131.92391968]
[162.31687927 141.43981934]
[173.92356873 137.94978333]
[185.63490295 140.56108093]
[194.47912598 148.48962402]
[198.27162170 159.61781311]
[196.15383911 171.05902100]
[207.10179138 181.31291199]
[218.04975891 191.56678772]
[232.71595764 187.22514343]
[247.48861694 190.78395081]
[258.42382812 201.19007874]
[262.65380859 215.57629395]
[259.13864136 230.05072021]
[270.08657837 240.30459595]
[281.03454590 250.55848694]
[297.11947632 253.75337219]
[302.13818359 269.36569214]
[290.92785645 281.33483887]
[275.02072144 277.34799194]
[270.78067017 261.50643921]
[259.83270264 251.25256348]
[248.88475037 240.99867249]
[234.67121887 245.45301819]
[220.03913879 242.17298889]
[208.94009399 231.94178772]
[204.42274475 217.43350220]
[207.79586792 202.51475525]
[196.84791565 192.26086426]
[185.89994812 182.00698853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[20 49]
[21 48]
[22 47]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[72 95]
[73 94]
[74 93]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
