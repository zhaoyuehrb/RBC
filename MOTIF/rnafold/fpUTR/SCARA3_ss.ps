%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGUCCCGGCCGGAGCCCCACGGCCGCGGGCGGCGCCUAGGACGGCGAUCCGCGCCCUGGAGGAUCCGCCGGCCGCCCGGCUCCACUACAGCUCCAGCCGCCUGCAGCGGGGCCCUCCUGAGGCCCCAGAGGAAGAGACC\
) } def
/len { sequence length } bind def

/coor [
[43.10231781 98.76229858]
[44.44971085 88.79005432]
[30.26813316 83.90304565]
[16.08655548 79.01603699]
[1.90497708 74.12902832]
[-12.27660084 69.24201965]
[-31.80260849 74.03750610]
[-43.96215820 59.06267548]
[-58.34602356 54.80775070]
[-72.72988892 50.55282211]
[-87.11375427 46.29789734]
[-101.49761963 42.04296875]
[-115.88148499 37.78804398]
[-130.26535034 33.53311539]
[-147.27676392 44.08331680]
[-166.30531311 38.92459488]
[-175.37626648 21.76064491]
[-190.01066589 18.46906662]
[-204.68057251 15.33957195]
[-219.38420105 12.37254333]
[-234.08782959 9.40551472]
[-249.14579773 14.26024055]
[-260.09115601 4.15833521]
[-274.79476929 1.19130647]
[-289.49841309 -1.77572238]
[-298.61080933 -0.40173972]
[-304.49285889 -4.97445250]
[-319.12725830 -8.26603031]
[-333.76165771 -11.55760765]
[-348.39605713 -14.84918499]
[-363.03045654 -18.14076233]
[-371.95602417 -11.75195885]
[-382.70559692 -11.38300800]
[-391.67257690 -16.91349030]
[-395.98330688 -26.28429031]
[-410.45779419 -30.21997452]
[-424.93225098 -34.15565872]
[-439.40673828 -38.09134293]
[-452.99645996 -30.02319336]
[-468.29000854 -34.00843430]
[-476.21405029 -47.68269730]
[-472.06732178 -62.93328094]
[-458.31005859 -70.71228790]
[-443.10415649 -66.40456390]
[-435.47103882 -52.56581497]
[-420.99658203 -48.63013077]
[-406.52209473 -44.69444656]
[-392.04760742 -40.75876236]
[-373.83438110 -47.11315155]
[-359.73886108 -32.77515793]
[-345.10446167 -29.48357964]
[-330.47006226 -26.19200325]
[-315.83569336 -22.90042496]
[-301.20129395 -19.60884666]
[-286.53137207 -16.47935295]
[-271.82775879 -13.51232338]
[-257.12411499 -10.54529476]
[-243.11785889 -15.61224270]
[-231.12080383 -5.29811525]
[-216.41717529 -2.33108664]
[-201.71354675 0.63594216]
[-194.47750854 -1.13832664]
[-186.71908569 3.83467197]
[-172.08468628 7.12624979]
[-165.11074829 -0.58975548]
[-155.47196960 -4.70828533]
[-144.91319275 -4.40987396]
[-135.37690735 0.31858861]
[-128.64599609 8.66897202]
[-126.01042938 19.14925003]
[-111.62656403 23.40417671]
[-97.24269867 27.65910339]
[-82.85882568 31.91403008]
[-68.47496033 36.16895676]
[-54.09109879 40.42388535]
[-39.70722961 44.67881012]
[-31.11651611 38.96971130]
[-20.58119392 38.97439957]
[-11.62819004 44.93535995]
[-7.38959217 55.06044006]
[6.79198551 59.94744873]
[20.97356415 64.83445740]
[35.15513992 69.72146606]
[49.33671951 74.60847473]
[59.06256485 60.11891937]
[72.83853912 49.16722107]
[89.42411041 42.85393143]
[107.29054260 41.85670853]
[124.76178741 46.35874176]
[140.17169189 56.02310944]
[152.02287292 70.01636505]
[159.13203430 87.07981873]
[173.60652161 83.14413452]
[188.08099365 79.20845032]
[199.36756897 68.12135315]
[213.67904663 72.24820709]
[228.15351868 68.31252289]
[242.62799072 64.37683868]
[253.79080200 52.36335373]
[269.71362305 56.28714371]
[274.01638794 72.11174774]
[262.27282715 83.55816650]
[246.56367493 78.85131073]
[232.08920288 82.78699493]
[217.61473083 86.72267914]
[207.36346436 97.52826691]
[192.01667786 93.68292236]
[177.54220581 97.61860657]
[163.06771851 101.55429077]
[160.91807556 116.39945984]
[173.68159485 124.27933502]
[186.44511414 132.15921021]
[199.20864868 140.03909302]
[211.97216797 147.91897583]
[224.73568726 155.79884338]
[239.52372742 150.71476746]
[254.10137939 156.37393188]
[261.58551025 170.10424805]
[258.44238281 185.42268372]
[246.15602112 195.09635925]
[230.52772522 194.55763245]
[218.93667603 184.06088257]
[216.85580444 168.56237793]
[204.09228516 160.68249512]
[191.32876587 152.80261230]
[178.56524658 144.92272949]
[165.80171204 137.04286194]
[153.03819275 129.16297913]
[146.87294006 137.91218567]
[139.29032898 145.40559387]
[130.53915405 151.41854858]
[120.90282440 155.77458191]
[110.69023895 158.35060120]
[100.22587585 159.08027649]
[89.83950043 157.95574951]
[79.85573578 155.02729797]
[70.58397675 150.40136719]
[62.30873489 144.23677063]
[55.28097153 136.73921204]
[49.71046448 128.15455627]
[45.75955963 118.76064301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 84]
[3 83]
[4 82]
[5 81]
[6 80]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[17 64]
[18 63]
[19 61]
[20 60]
[21 59]
[23 57]
[24 56]
[25 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[35 48]
[36 47]
[37 46]
[38 45]
[92 109]
[93 108]
[94 107]
[96 105]
[97 104]
[98 103]
[110 128]
[111 127]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
