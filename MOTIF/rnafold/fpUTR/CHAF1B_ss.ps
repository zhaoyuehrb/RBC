%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAAGCGGCGCGCGCUGCGCGGGAGGUGACGGUGCCUCUGACUGUCCGGGUCCCUCCAGCAUUUUGCAGCUUUCUCCUGUCUUGAAGAAGUAGAACGGUGCCCGAGAAACGUUUUUCCCCUUCGAGACUCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[171.98651123 156.64015198]
[159.60083008 148.17877197]
[158.26319885 133.23852539]
[168.94752502 122.71197510]
[154.29196167 119.51596832]
[139.63639832 116.31996155]
[124.98083496 113.12395477]
[110.32527161 109.92794800]
[96.94803619 113.99503326]
[86.47872162 104.72761536]
[71.82315826 101.53160858]
[57.16759109 98.33560181]
[44.73386383 109.74335480]
[28.11867332 111.50593567]
[13.85400295 103.12846375]
[7.43024302 88.06378174]
[-7.29380512 85.19979858]
[-22.01785278 82.33581543]
[-36.74190140 79.47183228]
[-47.01270676 88.26302338]
[-60.28052902 89.48850250]
[-71.64984894 82.92236328]
[-77.05595398 71.17227173]
[-91.71151733 67.97626495]
[-106.36708069 64.78025818]
[-121.02264404 61.58425140]
[-133.45637512 72.99200439]
[-150.07156372 74.75458527]
[-164.33622742 66.37711334]
[-170.75999451 51.31243134]
[-185.48403931 48.44844818]
[-200.20808411 45.58446503]
[-214.93212891 42.72047806]
[-229.65618896 39.85649490]
[-244.38023376 36.99251175]
[-256.41949463 46.97200394]
[-272.05639648 46.82635117]
[-283.90768433 36.62433624]
[-286.37753296 21.18303108]
[-278.29974365 7.79335165]
[-263.48843384 2.77749324]
[-248.93701172 8.50379181]
[-241.51625061 22.26846504]
[-226.79220581 25.13244820]
[-212.06814575 27.99643135]
[-197.34410095 30.86041451]
[-182.62005615 33.72439957]
[-167.89601135 36.58838272]
[-158.97952271 26.58928871]
[-146.17718506 22.28752327]
[-132.81895447 24.91543579]
[-122.43585205 33.88796616]
[-117.82663727 46.92868805]
[-103.17107391 50.12469482]
[-88.51551056 53.32070541]
[-73.85994720 56.51671219]
[-60.15394211 46.83658981]
[-43.34927368 50.08826447]
[-33.87791824 64.74777985]
[-19.15386963 67.61176300]
[-4.42982149 70.47574615]
[10.29422665 73.33972931]
[19.21071053 63.34063721]
[32.01305389 59.03887177]
[45.37128448 61.66678619]
[55.75438309 70.63931274]
[60.36360168 83.68003845]
[75.01916504 86.87604523]
[89.67472839 90.07205200]
[103.05196381 86.00496674]
[113.52127838 95.27238464]
[128.17684937 98.46839142]
[142.83241272 101.66439819]
[157.48797607 104.86040497]
[172.14353943 108.05641174]
[186.95619202 110.41967010]
[201.87867737 111.94263458]
[216.80116272 113.46559906]
[231.72364807 114.98856354]
[246.64613342 116.51153564]
[261.59924316 117.69686890]
[276.57528687 118.54396820]
[291.55136108 119.39106750]
[306.52740479 120.23817444]
[321.50347900 121.08527374]
[336.47955322 121.93237305]
[351.45559692 122.77947235]
[366.43167114 123.62657166]
[381.40771484 124.47367859]
[389.87692261 111.73712158]
[403.49426270 104.99433899]
[418.55816650 105.96643829]
[431.02951050 114.29241943]
[437.61450195 127.65293884]
[452.59054565 128.50004578]
[467.56661987 129.34713745]
[482.54266357 130.19424438]
[497.51873779 131.04133606]
[512.49481201 131.88844299]
[519.83813477 118.50791931]
[532.26483154 109.64562988]
[547.30755615 107.06118011]
[561.97955322 111.26771545]
[573.36767578 121.43002319]
[579.21087646 135.53038025]
[578.34893799 150.76913452]
[570.95294189 164.12063599]
[558.49145508 172.93392944]
[543.43865967 175.45912170]
[528.78338623 171.19483948]
[517.43530273 160.98776245]
[511.64770508 146.86450195]
[496.67163086 146.01741028]
[481.69558716 145.17030334]
[466.71951294 144.32319641]
[451.74343872 143.47610474]
[436.76739502 142.62899780]
[428.71777344 155.16172791]
[415.38711548 162.02825928]
[400.30966187 161.29545593]
[387.53955078 153.06008911]
[380.56063843 139.44973755]
[365.58456421 138.60263062]
[350.60848999 137.75553894]
[335.63244629 136.90843201]
[320.65637207 136.06134033]
[305.68032837 135.21423340]
[290.70425415 134.36712646]
[275.72817993 133.52003479]
[260.75213623 132.67292786]
[256.60144043 135.18722534]
[250.81323242 135.06187439]
[245.12316895 131.43402100]
[230.20068359 129.91105652]
[215.27819824 128.38809204]
[200.35571289 126.86511993]
[185.43322754 125.34215546]
[192.31169128 138.67207336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[7 72]
[8 71]
[10 69]
[11 68]
[12 67]
[16 62]
[17 61]
[18 60]
[19 59]
[23 56]
[24 55]
[25 54]
[26 53]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[76 137]
[77 136]
[78 135]
[79 134]
[80 133]
[81 130]
[82 129]
[83 128]
[84 127]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[94 117]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
