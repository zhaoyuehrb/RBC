%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCUCGCUGCAUCUGGAGCUCUAGGUCGCCUCUUCGCUACUCUGUGUCCUCUGCUCCUAGAGGCCCACCCUCUGUGGCCCUGUGUCCUGUAGGUAUUGGGAGAUCCACAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[106.90682983 151.05908203]
[99.19434357 151.51780701]
[91.49996948 150.81814575]
[83.99672699 148.97579956]
[76.85332489 146.03222656]
[70.23038483 142.05358887]
[64.27682495 137.12934875]
[59.12652206 131.37025452]
[54.89527512 124.90577698]
[51.67822647 117.88128662]
[49.54771805 110.45472717]
[48.55165100 102.79308319]
[48.71242142 95.06864166]
[50.02641678 87.45508575]
[52.46408844 80.12360382]
[55.97062683 73.23904419]
[44.42311859 63.66538620]
[32.87561035 54.09172058]
[17.35156631 55.37306595]
[5.77712917 45.49951172]
[4.65123177 30.69181442]
[-6.89627790 21.11815071]
[-18.44378662 11.54448891]
[-29.99129677 1.97082615]
[-41.53880692 -7.60283661]
[-53.08631516 -17.17650032]
[-64.63382721 -26.75016212]
[-77.60931396 -26.34391785]
[-87.04544067 -34.66244888]
[-88.19256592 -46.78504562]
[-99.48113251 -56.66271591]
[-114.33333588 -50.16813278]
[-130.47441101 -50.76741028]
[-144.70173645 -58.29129028]
[-154.21429443 -71.20159149]
[-157.16407776 -86.90538025]
[-153.01490784 -102.27571106]
[-164.56240845 -111.84937286]
[-176.10992432 -121.42304230]
[-191.82034302 -119.70311737]
[-204.09298706 -129.66091919]
[-205.64671326 -145.38864136]
[-195.55972290 -157.55532837]
[-179.81643677 -158.94267273]
[-167.75708008 -148.72761536]
[-166.53625488 -132.97055054]
[-154.98875427 -123.39688873]
[-143.44123840 -113.82321930]
[-131.06513977 -120.23802948]
[-117.13288879 -121.43137360]
[-103.76327515 -117.18836975]
[-93.00231934 -108.12343597]
[-86.51015472 -95.59153748]
[-85.30497742 -81.48574829]
[-89.60346222 -67.95127869]
[-78.31489563 -58.07360458]
[-60.98685837 -55.66904449]
[-55.06016541 -38.29767227]
[-43.51265335 -28.72400856]
[-31.96514511 -19.15034676]
[-20.41763496 -9.57668400]
[-8.87012482 -0.00302086]
[2.67738509 9.57064152]
[14.22489452 19.14430428]
[28.98480225 17.50700569]
[40.83200073 27.05156326]
[42.44927216 42.54421234]
[53.99678040 52.11787415]
[65.54428864 61.69153976]
[87.09635162 50.11783981]
[111.55720520 49.78879547]
[133.41278076 60.77857590]
[147.73631287 80.60981750]
[151.29890442 104.81208038]
[165.87036133 108.37198639]
[180.44180298 111.93188477]
[195.01325989 115.49178314]
[209.58470154 119.05168152]
[224.15614319 122.61158752]
[238.89640808 125.39091492]
[253.76370239 127.38179779]
[268.63101196 129.37268066]
[283.33602905 123.53546906]
[294.92373657 132.89355469]
[309.79104614 134.88442993]
[324.65832520 136.87532043]
[333.71072388 134.89767456]
[339.89288330 139.12219238]
[354.70190430 141.50814819]
[369.82650757 135.16950989]
[382.71261597 145.31250000]
[380.10412598 161.50285339]
[364.68438721 167.08534241]
[352.31594849 156.31716919]
[337.50692749 153.93121338]
[322.66744995 151.74261475]
[307.80017090 149.75172424]
[292.93286133 147.76084900]
[279.29125977 153.74046326]
[266.64010620 144.23997498]
[251.77282715 142.24908447]
[236.90553284 140.25820923]
[234.54225159 141.98370361]
[231.31021118 142.81399536]
[227.57133484 142.39633179]
[223.81431580 140.52505493]
[220.59625244 137.18302917]
[206.02479553 133.62313843]
[191.45335388 130.06323242]
[176.88191223 126.50333405]
[162.31045532 122.94342804]
[147.73901367 119.38352966]
[144.30387878 126.30399323]
[139.87257385 132.63299561]
[134.54469299 138.22824097]
[128.44007874 142.96389771]
[121.69596100 146.73348999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 69]
[17 68]
[18 67]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 59]
[27 58]
[30 56]
[31 55]
[37 48]
[38 47]
[39 46]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[80 102]
[81 101]
[82 100]
[84 98]
[85 97]
[86 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
