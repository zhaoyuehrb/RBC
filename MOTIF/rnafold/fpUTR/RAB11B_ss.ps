%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCAACCGCCGCUCUGCGCGGCGCCGGCUCCGCCCCCGUCGGGUGUUUGUGGUGGGGCUGCGGAGUCGCCGAUCCCGCCGGAAGCGCCAGGACA\
) } def
/len { sequence length } bind def

/coor [
[92.55287933 313.18283081]
[77.34410095 314.90090942]
[63.08317947 309.34350586]
[53.04715729 297.78768921]
[49.54224396 282.88891602]
[53.37384033 268.07077026]
[63.66147614 256.73837280]
[78.04113007 251.49581909]
[79.97895050 236.62152100]
[69.17531586 223.84631348]
[70.89588165 206.86714172]
[84.56929779 196.10406494]
[86.02444458 181.17480469]
[87.47959137 166.24555969]
[88.93473816 151.31629944]
[90.14794159 136.36544800]
[91.11888885 121.39690399]
[92.08983612 106.42835999]
[89.38813782 98.65670013]
[93.34233856 90.99330139]
[94.79748535 76.06405640]
[96.25263214 61.13479996]
[97.70777893 46.20555115]
[98.43621063 31.22324753]
[98.43621063 16.22324753]
[90.69891357 2.42307544]
[98.43621063 -10.30419636]
[98.43621063 -25.30419731]
[98.43621063 -40.30419540]
[98.43621063 -55.30419540]
[98.43621063 -70.30419922]
[98.43621063 -85.30419922]
[98.43621063 -100.30419922]
[98.43621063 -115.30419922]
[98.43621063 -130.30419922]
[97.95048523 -145.29632568]
[96.97953796 -160.26487732]
[96.00859070 -175.23341370]
[95.03764343 -190.20195007]
[94.06669617 -205.17050171]
[93.09574890 -220.13903809]
[92.12480164 -235.10758972]
[91.15385437 -250.07612610]
[77.96478271 -258.25097656]
[72.13082123 -272.62957764]
[75.89526367 -287.68310547]
[87.81059265 -297.62313843]
[103.29512787 -298.62756348]
[116.39474487 -290.31015015]
[122.07238007 -275.86907959]
[118.14485931 -260.85726929]
[106.12239838 -251.04707336]
[107.09334564 -236.07853699]
[108.06429291 -221.10998535]
[109.03524017 -206.14144897]
[110.00618744 -191.17289734]
[110.97713470 -176.20436096]
[111.94808197 -161.23582458]
[112.91902924 -146.26727295]
[116.00027466 -142.39096069]
[116.54718781 -136.48974609]
[113.43621063 -130.30419922]
[113.43621063 -115.30419922]
[113.43621063 -100.30419922]
[113.43621063 -85.30419922]
[113.43621063 -70.30419922]
[113.43621063 -55.30419540]
[113.43621063 -40.30419540]
[113.43621063 -25.30419731]
[113.43621063 -10.30419636]
[121.17351532 2.42307544]
[113.43621063 16.22324753]
[113.43621063 31.22324753]
[115.84053802 34.04727936]
[116.88891602 38.24453735]
[115.91962433 43.11103439]
[112.63703156 47.66069794]
[111.18188477 62.58995056]
[109.72673798 77.51920319]
[108.27159119 92.44844818]
[107.05838013 107.39930725]
[106.08743286 122.36785126]
[105.11648560 137.33639526]
[107.71936798 146.29667664]
[103.86399078 152.77145386]
[102.40884399 167.70069885]
[100.95369720 182.62995911]
[99.49854279 197.55920410]
[109.26099396 207.00357056]
[111.70456696 220.16603088]
[106.14725494 232.12992859]
[94.85325623 238.55934143]
[92.91542816 253.43365479]
[105.47190094 262.18542480]
[112.51266479 275.77536011]
[112.41979218 291.08056641]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 93]
[9 92]
[12 88]
[13 87]
[14 86]
[15 85]
[16 83]
[17 82]
[18 81]
[20 80]
[21 79]
[22 78]
[23 77]
[24 73]
[25 72]
[27 70]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
