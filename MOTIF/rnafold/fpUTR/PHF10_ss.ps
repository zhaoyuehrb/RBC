%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCGGCAGCGGCGGCGGCGGCCGGGACAAGGCGGAGGCGACGGCGGCGGCGGCGGCGCGGGGCGCUCGGGCUG\
) } def
/len { sequence length } bind def

/coor [
[10.28441429 134.28613281]
[-3.33773351 140.56602478]
[-16.95988083 146.84591675]
[-26.25311661 159.65007019]
[-41.05059814 157.95188904]
[-54.67274475 164.23178101]
[-63.96598053 177.03593445]
[-78.76346588 175.33775330]
[-92.38561249 181.61766052]
[-101.67884827 194.42181396]
[-116.47632599 192.72363281]
[-130.09848022 199.00352478]
[-139.11613464 212.70074463]
[-155.46902466 211.46984863]
[-162.33468628 196.57707214]
[-152.65032959 183.34283447]
[-136.37837219 185.38137817]
[-122.75622559 179.10148621]
[-114.43733215 166.74650574]
[-98.66550446 167.99551392]
[-85.04335785 161.71560669]
[-76.72447205 149.36064148]
[-60.95264053 150.60963440]
[-47.33049393 144.32974243]
[-39.01160431 131.97477722]
[-23.23977661 133.22377014]
[-9.61763000 126.94387817]
[4.00451803 120.66397858]
[4.10764217 111.33041382]
[7.40302849 102.54991150]
[13.52396774 95.38571167]
[21.75969505 90.71633911]
[31.13784409 89.12789917]
[40.53922272 90.84064484]
[48.83137131 95.67904663]
[55.00498199 103.08923340]
[69.59053040 99.58755493]
[84.17607880 96.08587646]
[95.88417816 84.22733307]
[111.89378357 88.85303497]
[126.33061218 84.78142548]
[140.76744080 80.70982361]
[155.12155151 76.35555267]
[169.38739014 71.72029877]
[176.60902405 57.91863632]
[191.14265442 53.42105103]
[204.25592041 60.39082718]
[218.52177429 55.75556946]
[232.69386292 50.84111786]
[246.76672363 45.64936447]
[257.03591919 33.61381912]
[271.65454102 36.46776199]
[285.72741699 31.27600670]
[295.79196167 18.32852936]
[311.99786377 20.83866692]
[317.67388916 36.22420502]
[306.98101807 48.65782166]
[290.91915894 45.34887695]
[276.84631348 50.54063034]
[267.58370972 62.20482635]
[251.95848083 59.72223282]
[237.88562012 64.91398621]
[232.56027222 70.32683563]
[223.15702820 70.02141571]
[208.89117432 74.65667725]
[202.37904358 88.00312805]
[187.97747803 92.90715790]
[174.02264404 85.98614502]
[159.75680542 90.62139893]
[154.22305298 95.82100677]
[144.83905029 95.14665222]
[130.40222168 99.21825409]
[115.96539307 103.28986359]
[109.55117035 113.20954895]
[98.12110901 116.19217682]
[87.67775726 110.67142487]
[73.09220886 114.17310333]
[58.50666046 117.67478180]
[49.15010071 137.07379150]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[5 24]
[6 23]
[8 21]
[9 20]
[11 18]
[12 17]
[36 78]
[37 77]
[38 76]
[40 73]
[41 72]
[42 71]
[43 69]
[44 68]
[47 65]
[48 64]
[49 62]
[50 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
