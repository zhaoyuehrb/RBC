%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGGGCGCAGCCUCGGCAGCGGCGGCGGCGGAGCCCUGAGGCGACAGCAGCUGCGGGAGGCGACGGGCUGCGGCCUGCGGAACCUGAGGCAGCUGGGGAGGGCCGGGCGCGCCGGCCGGAUAGCGAGCCGCGCUGGCGGCGGCGGUGGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[83.35495758 580.77764893]
[67.86548615 579.85260010]
[55.89937210 569.97375488]
[52.05783844 554.93969727]
[57.81803131 540.53137207]
[70.96504211 532.28906250]
[71.85926819 517.31573486]
[72.75349426 502.34240723]
[65.78869629 489.17651367]
[74.33493042 475.86215210]
[75.22915649 460.88882446]
[76.12338257 445.91549683]
[69.15858459 432.74960327]
[77.70481873 419.43524170]
[78.59904480 404.46191406]
[79.49327850 389.48858643]
[80.23860168 374.50714111]
[80.83494568 359.51898193]
[81.43129730 344.53085327]
[74.20610046 331.50601196]
[82.48593140 318.02438354]
[83.08228302 303.03622437]
[83.67862701 288.04809570]
[84.27497864 273.05993652]
[84.87132263 258.07180786]
[81.97908020 251.22584534]
[85.63146973 242.79246521]
[86.52569580 227.81913757]
[87.41992188 212.84580994]
[88.31414795 197.87249756]
[79.61622620 182.65747070]
[89.81413269 167.35536194]
[90.41048431 152.36721802]
[73.86737823 146.38285828]
[60.17779922 135.33378601]
[50.83656693 120.42646790]
[46.86368179 103.28870392]
[31.91109848 102.09695435]
[16.95851517 100.90520477]
[2.39039564 108.43527222]
[-11.26697063 99.35736084]
[-9.96405602 83.01005554]
[4.95881367 76.21005249]
[18.15026855 85.95262146]
[33.10285187 87.14437103]
[48.05543518 88.33612061]
[54.82212067 71.83542633]
[66.65863037 58.49533844]
[82.23667908 49.81286621]
[79.27377319 35.10840607]
[76.31085968 20.40394402]
[73.34794617 5.69948387]
[63.03718185 -6.30045986]
[68.10805511 -20.30529976]
[65.14514160 -35.00976181]
[62.18222809 -49.71422195]
[51.87146378 -61.71416473]
[56.94233322 -75.71900177]
[53.97942352 -90.42346191]
[51.01651001 -105.12792206]
[48.05360031 -119.83238983]
[34.10314941 -126.36622620]
[26.76080894 -139.70578003]
[28.65871429 -154.63433838]
[38.86111069 -165.45326233]
[35.89820099 -180.15771484]
[31.11112022 -188.00283813]
[33.02561951 -195.18385315]
[30.35565186 -209.94430542]
[27.68568230 -224.70477295]
[25.01571465 -239.46524048]
[22.34574509 -254.22570801]
[11.34198761 -266.38504028]
[16.62725830 -281.90914917]
[32.76452637 -284.82815552]
[43.15315247 -272.13925171]
[37.10620880 -256.89566040]
[39.77617645 -242.13520813]
[42.44614410 -227.37474060]
[45.11611557 -212.61428833]
[47.78608322 -197.85382080]
[50.60266113 -183.12063599]
[53.56557083 -168.41616821]
[67.16168976 -162.39259338]
[74.69289398 -149.36396790]
[73.08953094 -134.22187805]
[62.75806046 -122.79529572]
[65.72097015 -108.09083557]
[68.68388367 -93.38637543]
[71.64679718 -78.68191528]
[81.74563599 -67.73373413]
[76.88668823 -52.67713165]
[79.84960175 -37.97267151]
[82.81251526 -23.26821136]
[92.91135406 -12.32002831]
[88.05240631 2.73657274]
[91.01531982 17.44103241]
[93.97823334 32.14549255]
[96.94113922 46.84995270]
[108.16006470 47.39109039]
[119.01577759 50.27391052]
[129.02507019 55.37009048]
[137.74243164 62.45279694]
[144.77983093 71.20677185]
[149.82403564 81.24236298]
[164.46669006 77.98767853]
[179.10932922 74.73300171]
[193.75196838 71.47831726]
[208.39462280 68.22363281]
[223.03726196 64.96895599]
[232.82817078 52.25999069]
[248.87074280 52.13499832]
[258.85848999 64.68985748]
[255.12965393 80.29355621]
[240.54470825 86.97627258]
[226.29194641 79.61159515]
[211.64930725 82.86627960]
[197.00665283 86.12096405]
[182.36401367 89.37564087]
[167.72137451 92.63032532]
[153.07872009 95.88500977]
[152.37411499 109.55176544]
[148.20886230 122.58738708]
[140.85816956 134.13053894]
[130.80776978 143.41848755]
[118.72171783 149.83755493]
[105.39862061 152.96356201]
[104.80227661 167.95170593]
[112.98032379 177.97184753]
[112.14298248 190.47610474]
[103.28746796 198.76672363]
[102.39324188 213.74003601]
[101.49901581 228.71336365]
[100.60478973 243.68669128]
[99.85946655 258.66815186]
[99.26311493 273.65631104]
[98.66677094 288.64443970]
[98.07041931 303.63256836]
[97.47407532 318.62072754]
[104.65660858 332.71759033]
[96.41943359 345.12719727]
[95.82308960 360.11532593]
[95.22673798 375.10348511]
[98.02404785 383.85772705]
[94.46659851 390.38281250]
[93.57237244 405.35614014]
[92.67814636 420.32946777]
[99.57897949 434.56634521]
[91.09670258 446.80972290]
[90.20247650 461.78305054]
[89.30825043 476.75637817]
[96.20909119 490.99325562]
[87.72681427 503.23663330]
[86.83258820 518.20996094]
[85.93836212 533.18328857]
[98.01094055 542.93176270]
[102.01533508 557.92321777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 155]
[7 154]
[8 153]
[10 151]
[11 150]
[12 149]
[14 147]
[15 146]
[16 145]
[17 143]
[18 142]
[19 141]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[27 134]
[28 133]
[29 132]
[30 131]
[32 128]
[33 127]
[37 46]
[38 45]
[39 44]
[49 99]
[50 98]
[51 97]
[52 96]
[54 94]
[55 93]
[56 92]
[58 90]
[59 89]
[60 88]
[61 87]
[65 83]
[66 82]
[68 81]
[69 80]
[70 79]
[71 78]
[72 77]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
