%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCCUCACUCCCAGACUCCUUGCGGAGCUCGCCGCCUGAUUCUAGGCUGGUCACUACUCCGAGCCUGUGACGUUUGCGGCAGCCAGGCCGUCGACG\
) } def
/len { sequence length } bind def

/coor [
[101.07822418 303.50738525]
[111.35531616 291.50085449]
[109.95762634 276.56610107]
[101.06806946 264.61517334]
[107.48581696 250.15406799]
[106.08813477 235.21932983]
[104.69044495 220.28459167]
[103.29275513 205.34985352]
[101.89506531 190.41511536]
[90.29926300 181.13755798]
[88.66905975 166.01152039]
[98.47883606 153.91168213]
[97.08114624 138.97694397]
[95.45137024 124.06574249]
[93.58988190 109.18169403]
[91.49715424 94.32839203]
[89.17368317 79.50943756]
[86.85021210 64.69048309]
[84.52674103 49.87152481]
[82.20326233 35.05256653]
[72.88079834 29.02782249]
[68.59471130 19.02980804]
[70.57678986 8.55958176]
[77.90919495 1.13583338]
[76.51150513 -13.79890728]
[75.11381531 -28.73364639]
[73.71612549 -43.66838837]
[72.31843567 -58.60312653]
[70.92074585 -73.53786469]
[66.94449615 -81.96295166]
[69.71924591 -88.95767975]
[68.78670502 -103.92866516]
[67.85415649 -118.89965057]
[66.92161560 -133.87063599]
[65.98906708 -148.84161377]
[62.97696304 -163.53608704]
[57.94421387 -177.66659546]
[52.69231415 -191.71713257]
[47.22254181 -205.68429565]
[41.75276947 -219.65145874]
[36.28299713 -233.61862183]
[30.81322479 -247.58576965]
[17.66873360 -257.39160156]
[19.85704613 -273.64410400]
[35.12701416 -279.62408447]
[47.77020645 -269.17984009]
[44.78038406 -253.05554199]
[50.25015640 -239.08839417]
[55.71993256 -225.12123108]
[61.18970490 -211.15406799]
[66.65947723 -197.18690491]
[72.12589264 -192.01545715]
[72.07472992 -182.69934082]
[77.10747528 -168.56883240]
[83.42951202 -182.17147827]
[95.98291016 -190.38197327]
[110.97904968 -190.72238159]
[123.89208221 -183.08998108]
[130.82485962 -169.78822327]
[129.68504333 -154.83158875]
[120.81665802 -142.73400879]
[106.89617157 -137.14651489]
[92.12479401 -139.75543213]
[80.96005249 -149.77416992]
[81.89260101 -134.80317688]
[82.82514191 -119.83219910]
[83.75769043 -104.86121368]
[84.69023132 -89.89022827]
[85.85549164 -74.93555450]
[87.25318146 -60.00081635]
[88.65086365 -45.06607819]
[90.04855347 -30.13133621]
[91.44624329 -15.19659615]
[92.84393311 -0.26185566]
[105.23087311 14.44788837]
[97.02222443 32.72909546]
[99.34569550 47.54805374]
[101.66916656 62.36700821]
[103.99263763 77.18596649]
[106.31610870 92.00492096]
[110.64535522 98.98723602]
[108.47393036 107.32021332]
[110.33541870 122.20426178]
[114.57176208 130.50160217]
[112.01589203 137.57925415]
[113.41358185 152.51399231]
[125.29811096 162.58352661]
[126.50281525 177.74938965]
[116.82980347 189.01742554]
[118.22749329 203.95216370]
[119.62518311 218.88690186]
[121.02287292 233.82164001]
[122.42056274 248.75637817]
[131.41009521 261.77557373]
[124.89236450 275.16842651]
[126.29005432 290.10314941]
[138.61647034 299.99432373]
[140.25538635 315.71337891]
[130.23446655 327.93453979]
[114.49893188 329.40716553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[12 86]
[13 85]
[14 83]
[15 82]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 54]
[37 53]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
