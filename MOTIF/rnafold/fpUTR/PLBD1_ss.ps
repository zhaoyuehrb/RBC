%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCGGAGCAGGCCGGGCUCAAGAAAGAGGAAAGUUGAGGACGCCCCACCUCGGAGAGGCGGCGCCCCUGAGUAGGCCAGGAGCCUCUCUUGCAACUUCUGCCACCGCGGGCCACCGCGGCCGCCUGAUCCCGCAGAGGAAGGUCGCGGCCGUGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[97.59604645 115.24617767]
[91.12525940 128.77868652]
[84.65446472 142.31120300]
[78.18367767 155.84370422]
[71.71288300 169.37622070]
[65.24209595 182.90873718]
[58.77130127 196.44123840]
[52.30051041 209.97375488]
[57.79731750 224.79133606]
[51.13069534 239.12072754]
[36.25582886 244.46057129]
[21.99771500 237.64282227]
[16.81543732 222.71232605]
[23.78355217 208.52709961]
[38.76799774 203.50296021]
[45.23878860 189.97045898]
[51.70957947 176.43794250]
[58.18037033 162.90542603]
[64.65116119 149.37292480]
[71.12195587 135.84040833]
[77.59274292 122.30789185]
[84.06353760 108.77538300]
[76.39439392 121.66663361]
[63.76036835 129.75250244]
[48.84221268 131.31732178]
[34.80533218 126.02902985]
[24.62814140 115.00973511]
[20.47008705 100.59756470]
[23.21344376 85.85057068]
[32.27611542 73.89782715]
[45.73513794 67.27553558]
[60.73470688 67.38884735]
[74.09214783 74.21371460]
[82.97312927 86.30181885]
[75.22264099 73.45932007]
[67.47215271 60.61681366]
[59.72166061 47.77431107]
[51.97116852 34.93180847]
[44.22068024 22.08930397]
[17.94034576 20.37181473]
[3.19735932 -7.99211454]
[-9.64514446 -15.74260521]
[-18.65787888 -17.51222038]
[-22.65946960 -23.76996040]
[-35.34926605 -31.76802826]
[-48.03906250 -39.76609421]
[-60.72885895 -47.76416016]
[-71.24062347 -44.73712921]
[-81.46467590 -47.95579910]
[-88.06938934 -56.11649323]
[-89.04409790 -66.34851074]
[-101.41422272 -74.83261871]
[-113.78434753 -83.31671906]
[-126.15447235 -91.80081940]
[-142.63645935 -95.77327728]
[-143.38191223 -112.71083069]
[-127.31265259 -118.11593628]
[-117.67037201 -104.17094421]
[-105.30024719 -95.68684387]
[-92.93012238 -87.20274353]
[-80.55999756 -78.71863556]
[-61.25249481 -78.68692780]
[-52.73079300 -60.45395660]
[-40.04099655 -52.45589066]
[-27.35120010 -44.45782471]
[-14.66140366 -36.45975876]
[-1.89465356 -28.58510780]
[10.94785023 -20.83461761]
[17.51453590 -24.45796204]
[17.80509567 -39.45514679]
[30.64791107 -31.70465088]
[37.21459579 -35.32799530]
[37.50546646 -50.32517624]
[37.79633713 -65.32235718]
[34.82250214 -74.01242065]
[38.24106979 -80.60677338]
[38.82269669 -95.59548950]
[39.40432739 -110.58420563]
[39.98595810 -125.57292938]
[30.18945122 -138.27757263]
[34.15409470 -153.82302856]
[48.83855820 -160.28414917]
[62.97817612 -152.70451355]
[65.72624207 -136.89857483]
[54.97467804 -124.99129486]
[54.39304733 -110.00257874]
[53.81141663 -95.01386261]
[53.22978592 -80.02513885]
[52.79351807 -65.03148651]
[52.50264740 -50.03430557]
[52.21177673 -35.03712463]
[63.83688736 -23.18298340]
[68.09085846 -8.58259773]
[65.18436432 4.92503405]
[57.06318283 14.33881283]
[64.81367493 27.18131638]
[72.56416321 40.02381897]
[80.31465149 52.86632538]
[88.06514740 65.70882416]
[95.81563568 78.55133057]
[110.44416046 81.86888123]
[122.97647858 73.62625122]
[135.50880432 65.38361359]
[148.04112244 57.14097977]
[154.91349792 42.25130844]
[171.26693726 41.02779007]
[180.27842712 54.72907639]
[172.67770386 69.26045990]
[156.28375244 69.67329407]
[143.75143433 77.91593170]
[131.21911621 86.15856934]
[118.68679810 94.40119934]
[118.68679810 109.40119934]
[131.21911621 117.64383698]
[144.01824951 115.80667114]
[154.29724121 122.97005463]
[156.83560181 134.82879639]
[169.20573425 143.31289673]
[181.57585144 151.79699707]
[193.94598389 160.28109741]
[206.31610107 168.76521301]
[218.68623352 177.24931335]
[231.05635071 185.73341370]
[243.42648315 194.21751404]
[255.79660034 202.70161438]
[268.16671753 211.18572998]
[274.79669189 212.08836365]
[279.27410889 215.68821716]
[280.84329224 220.24638367]
[292.87512207 229.20376587]
[304.90698242 238.16113281]
[316.93884277 247.11851501]
[329.14212036 255.84089661]
[341.51223755 264.32501221]
[357.48373413 262.81146240]
[368.52102661 274.45440674]
[366.15722656 290.32235718]
[352.20565796 298.24279785]
[337.36874390 292.13983154]
[333.02813721 276.69512939]
[320.65802002 268.21102905]
[315.83731079 268.20199585]
[310.98181152 265.13107300]
[307.98144531 259.15036011]
[295.94961548 250.19299316]
[283.91775513 241.23561096]
[271.88592529 232.27822876]
[259.68261719 223.55584717]
[247.31250000 215.07174683]
[234.94238281 206.58764648]
[222.57225037 198.10354614]
[210.20213318 189.61943054]
[197.83200073 181.13533020]
[185.46188354 172.65122986]
[173.09175110 164.16712952]
[160.72163391 155.68302917]
[148.35150146 147.19891357]
[130.82786560 146.80743408]
[122.97647858 130.17614746]
[110.44416046 121.93351746]
[105.15843964 120.70747375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[34 100]
[35 99]
[36 98]
[37 97]
[38 96]
[39 95]
[41 68]
[42 67]
[44 66]
[45 65]
[46 64]
[47 63]
[51 61]
[52 60]
[53 59]
[54 58]
[72 91]
[73 90]
[74 89]
[76 88]
[77 87]
[78 86]
[79 85]
[101 112]
[102 111]
[103 110]
[104 109]
[113 160]
[114 159]
[117 157]
[118 156]
[119 155]
[120 154]
[121 153]
[122 152]
[123 151]
[124 150]
[125 149]
[126 148]
[129 147]
[130 146]
[131 145]
[132 144]
[133 141]
[134 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
