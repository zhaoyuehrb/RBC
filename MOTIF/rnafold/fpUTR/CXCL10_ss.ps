%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGCAGAUAAAUAUGGCACACUAGCCCCACGUUUUCUGAGACAUUCCUCAAUUGCUUAGACAUAUUCUGAGCCUACAGCAGAGGAACCUCCAGUCUCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[16.51042366 233.21670532]
[11.23361206 243.29666138]
[4.51154852 252.47306824]
[-3.50426865 260.54040527]
[-12.63337231 267.31811523]
[-22.67039299 272.65463257]
[-33.38967133 276.43090820]
[-44.55034256 278.56280518]
[-55.90174484 279.00326538]
[-67.18903351 277.74310303]
[-78.15893555 274.81143188]
[-88.56539917 270.27471924]
[-98.17513275 264.23550415]
[-106.77282715 256.83001709]
[-114.16598511 248.22503662]
[-120.18921661 238.61422729]
[-124.70795441 228.21369934]
[-139.28829956 231.73699951]
[-153.86863708 235.26028442]
[-161.89144897 248.87681580]
[-177.21348572 252.75123596]
[-190.74443054 244.58491516]
[-194.45663452 229.22277832]
[-186.14772034 215.77893066]
[-170.74719238 212.22933960]
[-157.39193726 220.67994690]
[-142.81158447 217.15664673]
[-128.23124695 213.63336182]
[-128.43290710 194.09924316]
[-123.62648773 175.15473938]
[-114.12735748 158.06272888]
[-100.56387329 143.96392822]
[-83.83583069 133.80068970]
[-65.05476379 128.25407410]
[-45.47009659 127.69817352]
[-26.38601685 132.17491150]
[-9.07463551 141.39089966]
[5.30881500 154.73669434]
[17.74990082 146.35699463]
[30.19098473 137.97729492]
[42.63207245 129.59759521]
[55.07315445 121.21788788]
[67.51424408 112.83818817]
[79.95532990 104.45848083]
[87.29914856 83.86447144]
[109.04196167 81.56335449]
[120.10945892 71.43860626]
[131.17695618 61.31386566]
[142.24446106 51.18911743]
[153.31196594 41.06437302]
[164.37945557 30.93962860]
[159.35365295 12.60755062]
[164.11634827 -5.71255684]
[177.32270813 -19.16247940]
[195.39968872 -24.21636200]
[213.51257324 -19.60478020]
[223.30490112 -30.96744919]
[233.09722900 -42.33011627]
[242.88955688 -53.69278717]
[252.68190002 -65.05545807]
[262.47421265 -76.41812134]
[272.26657104 -87.78079224]
[272.51766968 -103.82188416]
[285.30319214 -113.51258087]
[300.81518555 -109.41901398]
[307.15417480 -94.68141937]
[299.45742798 -80.60521698]
[283.62924194 -77.98846436]
[273.83688354 -66.62579346]
[264.04455566 -55.26312256]
[254.25222778 -43.90045547]
[244.45989990 -32.53778458]
[234.66757202 -21.17511749]
[224.87524414 -9.81244850]
[230.33735657 0.19186428]
[232.42156982 11.42538357]
[230.90461731 22.77664566]
[225.92039490 33.11722946]
[217.94830322 41.41392517]
[207.76719666 46.83198166]
[196.37931824 48.81904984]
[184.91159058 47.16147614]
[174.50419617 42.00712967]
[163.43670654 52.13187408]
[152.36920166 62.25661850]
[141.30171204 72.38136292]
[130.23420715 82.50611115]
[119.16670990 92.63085175]
[120.53437805 99.91972351]
[119.22373962 107.21906281]
[115.40574646 113.57681274]
[109.57838440 118.16374207]
[102.50170135 120.38156891]
[95.09873199 119.94102478]
[88.33502960 116.89956665]
[75.89394379 125.27927399]
[63.45285797 133.65896606]
[51.01177216 142.03868103]
[38.57068634 150.41838074]
[26.12960243 158.79808044]
[13.68851662 167.17778015]
[18.30818367 177.59188843]
[21.31944275 188.57687378]
[22.65542221 199.88594055]
[22.28688812 211.26516724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 28]
[18 27]
[19 26]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[43 96]
[44 95]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[51 83]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
[62 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
