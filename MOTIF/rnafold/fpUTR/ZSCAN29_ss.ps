%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUUCUGAUAGUGCCAUCUUUCUCUGCCCUAGGAAGAAACACCUCUUACAGUCAUCUGCAGGGGAUUCUCCAAGGACAUGGGAAGAUAGAUGUAAGCCCUGGAACCCAGACUCCUAAGCGAAGGGAAGCUGCAUUCUGCUAUUA\
) } def
/len { sequence length } bind def

/coor [
[142.16778564 219.93693542]
[156.39828491 224.67839050]
[151.10212708 210.64447021]
[145.80595398 196.61056519]
[140.50979614 182.57666016]
[135.21362305 168.54273987]
[129.91746521 154.50883484]
[124.62129974 140.47492981]
[113.99217987 144.85156250]
[102.71427917 146.51235962]
[91.46457672 145.40422058]
[80.90718079 141.63891602]
[71.65408325 135.48364258]
[64.22975159 127.34266663]
[59.04143143 117.73096466]
[56.35696793 107.24179840]
[56.29127502 96.51013947]
[58.80215836 86.17427826]
[63.69553375 76.83781433]
[52.64833069 66.69092560]
[41.60112762 56.54403687]
[30.55392838 46.39714813]
[19.50672531 36.25025940]
[8.45952415 26.10337257]
[-2.58767748 15.95648575]
[-13.63487911 5.80959749]
[-29.03240013 2.17271209]
[-33.17181396 -12.13513565]
[-44.21901703 -22.28202438]
[-59.61653519 -25.91890907]
[-63.75595093 -40.22675705]
[-74.80315399 -50.37364578]
[-85.85035706 -60.52053452]
[-101.24787903 -64.15741730]
[-105.38729095 -78.46526337]
[-116.43449402 -88.61215210]
[-127.48169708 -98.75904083]
[-135.98153687 -102.29338074]
[-138.65277100 -109.24046326]
[-149.48211670 -119.61955261]
[-160.31146240 -129.99862671]
[-171.24192810 -129.13989258]
[-180.62879944 -134.36611938]
[-185.45393372 -143.71795654]
[-184.32138062 -153.95831299]
[-194.70046997 -164.78765869]
[-205.07954407 -175.61700439]
[-215.45863342 -186.44633484]
[-225.83770752 -197.27568054]
[-238.73710632 -198.34222412]
[-247.16067505 -207.63394165]
[-246.97221375 -219.77238464]
[-257.11911011 -230.81959534]
[-267.26599121 -241.86679077]
[-283.06552124 -246.26075745]
[-286.89743042 -262.20593262]
[-274.81979370 -273.29928589]
[-259.25701904 -268.12893677]
[-256.21878052 -252.01368713]
[-246.07189941 -240.96647644]
[-235.92501831 -229.91928101]
[-218.94364929 -225.61067200]
[-215.00837708 -207.65476990]
[-204.62928772 -196.82542419]
[-194.25019836 -185.99607849]
[-183.87112427 -175.16673279]
[-173.49203491 -164.33740234]
[-154.60427856 -160.39064026]
[-149.93237305 -140.82797241]
[-139.10302734 -130.44888306]
[-128.27369690 -120.06980896]
[-117.33480835 -109.80624390]
[-106.28760529 -99.65935516]
[-95.24040222 -89.51246643]
[-80.63304901 -86.60135651]
[-75.70346832 -71.56773376]
[-64.65626526 -61.42084503]
[-53.60906219 -51.27396011]
[-39.00171280 -48.36284637]
[-34.07212830 -33.32922363]
[-23.02492714 -23.18233681]
[-8.41757584 -20.27122498]
[-3.48799133 -5.23760414]
[7.55921030 4.90928364]
[18.60641289 15.05617142]
[29.65361404 25.20306015]
[40.70081711 35.34994888]
[51.74801636 45.49683380]
[62.79521942 55.64372253]
[73.84242249 65.79061127]
[83.54763794 59.68486404]
[94.63698578 56.30587387]
[106.35106659 55.95445633]
[117.86931610 58.72167969]
[128.36744690 64.47781372]
[137.07643127 72.87696075]
[143.33876038 83.37724304]
[146.65776062 95.27555084]
[146.73645020 107.75449371]
[161.73306274 107.43611145]
[170.62882996 94.85948944]
[185.05575562 89.98942566]
[199.41415405 94.49498749]
[208.26037598 106.44833374]
[223.25698853 106.12995148]
[238.25361633 105.81156921]
[246.99487305 92.99088287]
[261.61383057 87.78842926]
[276.48919678 92.20464325]
[285.90109253 104.54141235]
[286.23046875 120.05499268]
[277.35064697 132.78009033]
[262.67608643 137.82365417]
[247.84950256 133.24633789]
[238.57199097 120.80818939]
[223.57537842 121.12657166]
[208.57875061 121.44495392]
[200.24781799 133.76296997]
[186.09358215 138.87385559]
[171.47296143 134.62048340]
[162.05145264 122.43273163]
[147.05482483 122.75111389]
[138.65521240 135.17875671]
[143.95137024 149.21267700]
[149.24754333 163.24658203]
[154.54370117 177.28048706]
[159.83987427 191.31440735]
[165.13603210 205.34831238]
[170.43220520 219.38221741]
[176.61071777 233.05064392]
[183.64654541 246.29818726]
[190.68237305 259.54571533]
[206.06564331 261.57910156]
[217.29255676 272.29058838]
[220.04615784 287.56137085]
[213.26760864 301.51956177]
[199.56340027 308.79791260]
[184.20309448 306.59777832]
[173.09303284 295.76513672]
[170.50526428 280.46536255]
[177.43482971 266.58154297]
[170.39900208 253.33401489]
[163.36318970 240.08647156]
[157.52043152 253.90176392]
[143.69502258 259.72052002]
[129.73164368 254.24111938]
[123.55326080 240.57263184]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 129]
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 83]
[28 81]
[29 80]
[31 78]
[32 77]
[33 76]
[35 74]
[36 73]
[37 72]
[39 71]
[40 70]
[41 69]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[52 61]
[53 60]
[54 59]
[99 122]
[100 121]
[104 117]
[105 116]
[106 115]
[130 143]
[131 142]
[132 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
