%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCAGCCCCAGCCCGGCUCCCUCCAGAGCCCACAUUUGGGCCCAGCCCCGUCCAAGGCUGCAUCCCGGCCCUAUCCCGGGUCACGGAGUGACCCUUCCUCGUCCCGAUCACCCCGCCCGGUCCACCCGCC\
) } def
/len { sequence length } bind def

/coor [
[89.59738922 202.91795349]
[95.64373016 187.07882690]
[95.64373016 172.07882690]
[88.41468048 170.08111572]
[84.41904449 184.53916931]
[69.96107483 180.54328918]
[73.95657349 166.08572388]
[66.72752380 164.08802795]
[59.02540970 176.95960999]
[59.31026077 193.35627747]
[45.11532593 201.56820679]
[31.04313660 193.14767456]
[31.56995201 176.75698853]
[46.15383148 169.25749207]
[53.85594559 156.38591003]
[48.33193207 148.38591003]
[44.08577728 139.93902588]
[41.13576126 131.23886108]
[27.17878151 136.73457336]
[13.22180271 142.23027039]
[-0.73517662 147.72596741]
[-14.69215584 153.22166443]
[-20.76536369 167.81248474]
[-35.40866470 173.75801086]
[-49.93444824 167.53086853]
[-55.72482300 152.82553101]
[-49.34446716 138.36639404]
[-34.57872772 132.73181152]
[-20.18785667 139.26469421]
[-6.23087740 133.76898193]
[7.72610235 128.27328491]
[21.68308258 122.77758789]
[35.64006042 117.28189087]
[33.71315002 106.84975433]
[33.46611404 96.24402618]
[34.90520859 85.73348999]
[37.99396133 75.58450317]
[42.65410233 66.05426025]
[48.76752853 57.38428497]
[56.17930984 49.79430008]
[64.70161438 43.47664642]
[58.23865891 29.94039345]
[51.77570343 16.40413857]
[45.31274414 2.86788297]
[38.84978867 -10.66837215]
[31.45153618 -23.71696663]
[23.15456963 -36.21337891]
[14.85760117 -48.70979309]
[6.56063414 -61.20620728]
[-1.73633301 -73.70262146]
[-17.24468994 -74.22267914]
[-29.46481133 -83.78554535]
[-33.69780731 -98.71408844]
[-28.31600571 -113.26798248]
[-15.38882160 -121.85095978]
[0.11298233 -121.16268921]
[12.22864437 -111.46782684]
[16.29944611 -96.49423981]
[10.76007938 -81.99958801]
[19.05704689 -69.50317383]
[27.35401344 -57.00675964]
[35.65098190 -44.51034927]
[43.94794846 -32.01393509]
[48.56542969 -46.28554535]
[61.82205582 -53.30422592]
[76.22106934 -49.10084152]
[83.61967468 -36.05244827]
[79.83389282 -21.53804779]
[67.00462341 -13.76568031]
[52.38604355 -17.13132858]
[58.84899902 -3.59507322]
[65.31195831 9.94118214]
[71.77490997 23.47743607]
[78.23786926 37.01369095]
[102.00948334 33.39048767]
[125.51946259 38.44009018]
[145.70671082 51.50502777]
[159.94276428 70.88419342]
[166.37405396 94.05434418]
[181.36993408 94.40598297]
[196.36579895 94.75762177]
[211.36167908 95.10926056]
[226.35755920 95.46089935]
[241.35343933 95.81253815]
[248.86306763 87.78213501]
[259.35021973 85.31324005]
[269.23977661 88.99629211]
[275.29815674 97.36611176]
[290.26107788 98.42024994]
[299.13623047 95.88478088]
[305.56106567 99.67854309]
[320.49517822 101.08316803]
[335.42926025 102.48778534]
[350.36334229 103.89241028]
[341.27536011 91.95891571]
[341.78744507 76.96765900]
[351.66857910 65.68213654]
[366.46078491 63.19394684]
[379.49032593 70.62567139]
[384.87881470 84.62439728]
[380.19512939 98.87442017]
[367.55307007 106.94651794]
[382.05703735 110.77215576]
[396.56097412 114.59780121]
[413.41836548 112.79106903]
[419.82107544 128.48953247]
[406.50857544 138.98779297]
[392.73532104 129.10174561]
[378.23138428 125.27610016]
[363.72744751 121.45046234]
[348.95870972 118.82649994]
[334.02462769 117.42187500]
[319.09054565 116.01725769]
[304.15646362 114.61263275]
[289.20693970 113.38316345]
[274.24401855 112.32902527]
[257.62390137 122.10349274]
[241.00180054 110.80841827]
[226.00592041 110.45677948]
[211.01004028 110.10514069]
[196.01416016 109.75350189]
[181.01829529 109.40186310]
[166.02241516 109.05022430]
[164.46136475 119.74432373]
[161.16011047 130.16613770]
[156.16677856 140.03132629]
[149.57609558 149.06416321]
[141.52783203 157.00523376]
[132.20404053 163.61874390]
[121.82491302 168.69944763]
[110.64373016 172.07882690]
[110.64373016 187.07882690]
[116.69007111 202.91795349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[8 15]
[9 14]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[79 123]
[80 122]
[81 121]
[82 120]
[83 119]
[84 118]
[88 116]
[89 115]
[91 114]
[92 113]
[93 112]
[94 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
