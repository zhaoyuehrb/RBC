%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGCGAGCACUGCGGCUGGGCGCUGAGGAUCAGCCGCUUCCUGCCUGGAUUCCACAGCUUCGCGCCGUGUACUGUCGCCCCAUCCCUGCGCGCCCAGCCUGCCAAGCAGCGUGCCCCGGUUGCAGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[212.84480286 376.44107056]
[199.16963196 370.27746582]
[199.62248230 355.28466797]
[199.20883179 340.29037476]
[191.81111145 341.52481079]
[184.98547363 354.88186646]
[178.15983582 368.23892212]
[181.71150208 383.88388062]
[171.58203125 396.32470703]
[155.54191589 396.01779175]
[145.89575195 383.19863892]
[150.04324341 367.70095825]
[164.80279541 361.41326904]
[171.62843323 348.05624390]
[178.45407104 334.69918823]
[179.16244507 319.71591187]
[173.62739563 305.77450562]
[168.09234619 291.83306885]
[162.55731201 277.89166260]
[157.02226257 263.95022583]
[151.48722839 250.00880432]
[145.95217896 236.06738281]
[140.41712952 222.12594604]
[134.88209534 208.18452454]
[129.34704590 194.24310303]
[115.61269379 188.59483337]
[109.80076599 174.53509521]
[115.81832123 160.16754150]
[110.28327942 146.22610474]
[104.74822998 132.28468323]
[82.11902618 129.58882141]
[65.54885101 112.09356689]
[63.90570831 86.74201202]
[49.89988708 81.37200165]
[35.89406586 76.00199890]
[29.16134071 76.67597198]
[23.92898178 74.16480255]
[21.36355782 70.03347015]
[7.62695789 64.00804138]
[-7.78113651 68.47683716]
[-20.79807663 59.09926987]
[-21.43838120 43.06900024]
[-9.21086216 32.68307877]
[6.50457382 35.90869904]
[13.65238953 50.27143860]
[27.38898849 56.29687119]
[41.26407242 61.99617767]
[55.26989365 67.36618042]
[69.27571106 72.73619080]
[81.11282349 63.52299881]
[79.34535980 48.62749481]
[77.57790375 33.73198700]
[62.28414154 22.67849731]
[59.86828613 4.28317404]
[71.38928986 -9.85320187]
[68.92037201 -24.64862061]
[66.45145416 -39.44404221]
[56.54824448 -51.78247833]
[62.08517838 -65.60968781]
[59.61625671 -80.40510559]
[47.44770050 -90.86004639]
[48.17869568 -106.88643646]
[61.24848557 -116.19020081]
[76.63105011 -111.63429260]
[82.52619934 -96.71360779]
[74.41167450 -82.87402344]
[76.88059998 -68.07860565]
[86.60720825 -56.79843521]
[81.24687195 -41.91296005]
[83.71578979 -27.11754036]
[86.18470764 -12.32212067]
[96.78240204 -7.80519819]
[103.92275238 1.38825095]
[105.71315002 13.01227951]
[101.58651733 24.15422630]
[92.47341156 31.96452904]
[94.24086761 46.86003494]
[96.00832367 61.75553894]
[107.09774017 62.86673737]
[117.21599579 67.06995392]
[125.53730774 73.90436554]
[131.41709900 82.69982147]
[134.44142151 92.64141846]
[134.45484924 102.84448242]
[131.56495667 112.43321228]
[126.12395477 120.61576080]
[118.68965912 126.74964142]
[124.22470093 140.69107056]
[129.75975037 154.63249207]
[143.99360657 160.95980835]
[149.40832520 175.17724609]
[143.28846741 188.70806885]
[148.82351685 202.64949036]
[154.35856628 216.59091187]
[159.89360046 230.53233337]
[165.42864990 244.47375488]
[170.96368408 258.41519165]
[176.49873352 272.35659790]
[182.03378296 286.29803467]
[187.56881714 300.23944092]
[193.10386658 314.18087769]
[231.81900024 325.79415894]
[242.61183167 336.21118164]
[253.40466309 346.62823486]
[264.19747925 357.04528809]
[277.14550781 357.61309814]
[285.92587280 366.59179688]
[286.18606567 378.74526978]
[296.72985840 389.41433716]
[307.27362061 400.08337402]
[317.81741333 410.75244141]
[328.36120605 421.42147827]
[343.68045044 418.95156860]
[357.51049805 425.98782349]
[364.53344727 439.82467651]
[362.04879761 455.14151001]
[351.01199341 466.04876709]
[335.66683960 468.35232544]
[321.91390991 461.16647339]
[315.04150391 447.25427246]
[317.69213867 431.96527100]
[307.14837646 421.29620361]
[296.60458374 410.62716675]
[286.06079102 399.95809937]
[275.51702881 389.28906250]
[258.39794922 385.61822510]
[253.78045654 367.83810425]
[242.98762512 357.42108154]
[232.19479370 347.00402832]
[221.40196228 336.58697510]
[214.00424194 337.82144165]
[218.48164368 352.13760376]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[16 101]
[17 100]
[18 99]
[19 98]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[28 89]
[29 88]
[30 87]
[33 49]
[34 48]
[35 47]
[38 46]
[39 45]
[50 78]
[51 77]
[52 76]
[55 71]
[56 70]
[57 69]
[59 67]
[60 66]
[102 130]
[103 129]
[104 128]
[105 127]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
