%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGGCGGUAGCUGAGGGGUUGACCGAGAGACCCAGUUGAAGGCCUUUACGAAGUGAAAGAGGCCGGGAGUCGCCCCCUACCCGCUUCUCGUAGUCCUGGGAGCACAGCAGAAGUGUUUUUCUUUUUUUAAUGAACAAGUAAACCAUACAAAUUGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[141.47787476 321.25714111]
[130.58171082 309.80944824]
[131.05522156 294.01223755]
[142.61747742 283.23773193]
[142.90834045 268.24057007]
[143.19921875 253.24337769]
[143.49008179 238.24620056]
[143.78094482 223.24902344]
[144.07182312 208.25184631]
[144.36268616 193.25466919]
[123.31611633 169.53031921]
[129.42881775 143.23843384]
[118.92555237 132.52947998]
[108.42229462 121.82054138]
[97.91903687 111.11159515]
[85.07653046 103.36109924]
[70.70668793 99.05905151]
[56.33684540 94.75700378]
[41.96700287 90.45495605]
[27.59716034 86.15290833]
[12.15765762 89.60722351]
[2.18414736 78.54475403]
[-12.18569565 74.24270630]
[-26.55553818 69.94065857]
[-40.92538071 65.63860321]
[-46.03026199 70.41732788]
[-52.32707596 73.33703613]
[-59.16984558 74.13389587]
[-65.86763000 72.76005554]
[-71.75429535 69.38520050]
[-76.25474548 64.37637329]
[-78.94109344 58.25825882]
[-79.57318878 51.65833282]
[-93.34642792 45.71713638]
[-107.11967468 39.77593994]
[-101.84321594 53.81727219]
[-106.67243195 68.01863098]
[-119.41484833 75.93259430]
[-134.28540039 73.96621704]
[-144.53285217 63.01223373]
[-145.50485229 48.04375839]
[-136.76010132 35.85649109]
[-122.26755524 31.98355865]
[-135.11006165 24.23306847]
[-147.95256042 16.48257637]
[-160.79505920 8.73208618]
[-173.63757324 0.98159581]
[-186.48007202 -6.76889467]
[-199.32257080 -14.51938534]
[-212.73123169 -7.02915955]
[-228.08834839 -7.26280832]
[-241.26292419 -15.15748119]
[-248.71109009 -28.58955002]
[-248.42930603 -43.94585800]
[-240.49337769 -57.09563446]
[-227.03802490 -64.50165558]
[-211.68267822 -64.17173767]
[-198.55784607 -56.19462585]
[-191.19403076 -42.71612930]
[-191.57208252 -27.36188889]
[-178.72958374 -19.61139870]
[-165.88706970 -11.86090755]
[-153.04457092 -4.11041689]
[-140.20207214 3.64007354]
[-127.35956573 11.39056396]
[-114.51705933 19.14105415]
[-101.17847443 26.00269699]
[-87.40523529 31.94389343]
[-73.63199615 37.88508987]
[-51.16213989 32.35704803]
[-36.62333298 51.26876450]
[-22.25349045 55.57081223]
[-7.88364697 59.87285995]
[6.48619556 64.17491150]
[20.89787102 60.41287994]
[31.89920998 71.78306580]
[46.26905060 76.08511353]
[60.63889313 80.38716125]
[75.00873566 84.68920898]
[89.37857819 88.99125671]
[79.67099762 77.55609894]
[83.37091064 63.01957321]
[97.36415100 57.61687469]
[109.87280273 65.89537811]
[110.36846161 80.88726044]
[118.11895752 68.04475403]
[125.86944580 55.20225525]
[133.61993408 42.35974884]
[141.37042236 29.51724625]
[143.14004517 20.50451279]
[149.39778137 16.50292015]
[157.39584351 3.81312466]
[153.65641785 -11.54240322]
[161.94151306 -25.00096512]
[177.33570862 -28.57783318]
[190.70593262 -20.15091515]
[194.11984253 -4.71975422]
[185.55203247 8.56061745]
[170.08564758 11.81119156]
[162.08757019 24.50098801]
[154.21293640 37.26773834]
[146.46243286 50.11024094]
[138.71194458 62.95274353]
[130.96145630 75.79524994]
[123.21096802 88.63774872]
[116.92781067 96.70195770]
[108.62798309 100.60832977]
[119.13124084 111.31727600]
[129.63450623 122.02622223]
[140.13775635 132.73516846]
[151.62258911 127.38863373]
[165.22663879 127.71972656]
[178.11254883 134.47535706]
[187.24720764 146.98776245]
[190.09750366 163.17440796]
[203.98336792 168.84739685]
[217.86921692 174.52040100]
[233.57061768 172.57701111]
[242.42631531 184.55307007]
[256.31216431 190.22607422]
[270.19802856 195.89907837]
[285.89944458 193.95568848]
[294.75512695 205.93174744]
[308.64099121 211.60475159]
[322.52685547 217.27774048]
[338.22824097 215.33436584]
[347.08392334 227.31042480]
[360.96978760 232.98341370]
[374.85565186 238.65641785]
[391.02185059 235.90219116]
[401.28048706 248.69644165]
[395.07833862 263.87753296]
[378.79565430 265.82846069]
[369.18264771 252.54226685]
[355.29678345 246.86927795]
[341.41094971 241.19627380]
[326.70275879 243.54542542]
[316.85385132 231.16360474]
[302.96798706 225.49060059]
[289.08212280 219.81761169]
[274.37393188 222.16676331]
[264.52502441 209.78492737]
[250.63917542 204.11193848]
[236.75331116 198.43893433]
[222.04513550 200.78808594]
[212.19622803 188.40626526]
[198.31036377 182.73326111]
[184.42449951 177.06025696]
[178.15834045 181.18157959]
[186.40078735 193.71401978]
[173.86820984 201.95626831]
[165.62603760 189.42420959]
[159.35987854 193.54553223]
[159.06900024 208.54270935]
[158.77813721 223.53988647]
[158.48725891 238.53707886]
[158.19639587 253.53425598]
[157.90551758 268.53143311]
[157.61465454 283.52862549]
[168.75041199 294.74334717]
[168.61102295 310.54702759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 159]
[5 158]
[6 157]
[7 156]
[8 155]
[9 154]
[10 153]
[12 110]
[13 109]
[14 108]
[15 107]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[22 74]
[23 73]
[24 72]
[25 71]
[33 69]
[34 68]
[35 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
[91 100]
[92 99]
[115 148]
[116 147]
[117 146]
[119 144]
[120 143]
[121 142]
[123 140]
[124 139]
[125 138]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
