%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUUUGAAGACGCUCACGGAGCGGCUGGCUAGGCUGAGGAGAGCUCGCCGGGCUCUGAGGCGCAGGAAUUCAAUAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[106.01197052 329.27639771]
[98.67212677 315.96493530]
[96.99002838 300.85733032]
[101.22220612 286.25744629]
[110.72326660 274.39160156]
[124.04437256 267.06927490]
[122.36489868 252.16357422]
[120.68543243 237.25790405]
[119.00596619 222.35221863]
[117.32649994 207.44653320]
[100.31066895 196.54039001]
[96.30107117 176.44563293]
[108.14739227 159.38426208]
[104.26510620 144.89537048]
[100.38282013 130.40647888]
[96.50053406 115.91759491]
[86.67462921 109.38353729]
[83.83420563 97.93039703]
[89.46827698 87.56219482]
[86.13046265 72.93827820]
[82.79264832 58.31436157]
[79.45483398 43.69044113]
[76.11701965 29.06652260]
[72.77920532 14.44260406]
[68.31156921 9.03462982]
[67.56005859 3.08448648]
[69.78199005 -1.39807343]
[67.54635620 -16.23053551]
[65.31072235 -31.06299782]
[63.07508469 -45.89546204]
[60.83945084 -60.72792435]
[50.84278870 -69.12963867]
[49.40171814 -81.70156860]
[56.75372314 -91.50022125]
[55.07425308 -106.40589905]
[53.39478683 -121.31158447]
[51.71532059 -136.21726990]
[39.20431519 -145.87388611]
[37.26885605 -161.55921936]
[47.05720901 -173.96742249]
[62.76212311 -175.73693848]
[75.06615448 -165.81794739]
[76.66953278 -150.09519958]
[66.62100220 -137.89672852]
[68.30046844 -122.99105072]
[69.97993469 -108.08536530]
[71.65940857 -93.17968750]
[82.84709930 -79.79724884]
[75.67191315 -62.96355820]
[77.90754700 -48.13109589]
[80.14318085 -33.29863358]
[82.37881470 -18.46616936]
[84.61444855 -3.63370752]
[87.40312195 11.10478973]
[90.74093628 25.72870827]
[94.07875061 40.35262680]
[97.41656494 54.97654724]
[100.75437927 69.60046387]
[104.09219360 84.22438049]
[115.81852722 96.07693481]
[110.98942566 112.03530884]
[114.87171173 126.52420044]
[118.75399780 141.01309204]
[122.63628387 155.50196838]
[132.62019348 157.84869385]
[140.93049622 163.75778198]
[146.36231995 172.31779480]
[148.14881897 182.23716736]
[146.06929016 192.03895569]
[140.47531128 200.28079224]
[132.23217773 205.76705933]
[133.91165161 220.67274475]
[135.59112549 235.57843018]
[137.27058411 250.48411560]
[138.95005798 265.38980103]
[153.56654358 269.56433105]
[165.46978760 279.01846313]
[172.84463501 292.31057739]
[174.56646729 307.41369629]
[170.37272644 322.02468872]
[160.90292358 333.91546631]
[147.60112000 341.27282715]
[132.49575806 342.97479248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[13 64]
[14 63]
[15 62]
[16 61]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
