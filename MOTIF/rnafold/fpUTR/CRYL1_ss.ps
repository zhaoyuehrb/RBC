%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUCCCCGGAGCCCAGAGCUCGCAGCUCCGCCGGCGCCUGGUCCCAGCGCCCGCGGCGCCGCGUCCCCGGCCCAACC\
) } def
/len { sequence length } bind def

/coor [
[60.91428757 344.24530029]
[46.00640869 347.21575928]
[31.09755516 344.25021362]
[18.46121788 335.80087280]
[10.02434540 323.15618896]
[7.07350016 308.24441528]
[10.05866528 293.33947754]
[18.52462387 280.71426392]
[31.18037987 272.29403687]
[46.09601974 269.36282349]
[49.02237320 254.65103149]
[47.18964767 247.28222656]
[52.36324310 239.42422485]
[55.86492157 224.83866882]
[59.36660385 210.25312805]
[48.45367432 202.70178223]
[40.80572891 191.81672668]
[37.38428497 178.92750549]
[38.63294601 165.61796570]
[44.42001343 153.53160095]
[54.05199432 144.16867065]
[66.35661316 138.69993591]
[79.82547760 137.82028198]
[84.46073151 123.55443573]
[89.09598541 109.28858948]
[86.37712097 95.57365417]
[96.63816833 86.07615662]
[101.27342224 71.81031036]
[98.17929840 56.29460526]
[109.47084808 46.58120728]
[114.10610199 32.31536102]
[118.74136353 18.04951286]
[123.37661743 3.78366518]
[120.28249359 -11.73203564]
[131.57405090 -21.44543266]
[136.20930481 -35.71128082]
[140.84455872 -49.97712708]
[145.47981262 -64.24297333]
[150.11506653 -78.50882721]
[149.80964661 -87.91207123]
[155.22250366 -93.23741913]
[160.41424561 -107.31028748]
[157.10530090 -123.37213135]
[169.53892517 -134.06498718]
[184.92445374 -128.38896179]
[187.43460083 -112.18306732]
[174.48712158 -102.11853027]
[169.29536438 -88.04566193]
[164.38092041 -73.87357330]
[159.74566650 -59.60772324]
[155.11039734 -45.34187317]
[150.47514343 -31.07602692]
[145.83988953 -16.81017876]
[149.26556396 -2.31486630]
[137.64245605 8.41892052]
[133.00720215 22.68476868]
[128.37194824 36.95061493]
[123.73670197 51.21646500]
[127.16236877 65.71177673]
[115.53926849 76.44556427]
[110.90401459 90.71141052]
[113.62287903 104.42634583]
[103.36183167 113.92384338]
[98.72657776 128.18969727]
[94.09132385 142.45553589]
[106.60313416 153.87152100]
[112.96972656 169.50808716]
[111.99695587 186.30874634]
[103.92042542 201.01100159]
[90.35065460 210.77993774]
[73.95215607 213.75480652]
[70.45046997 228.34034729]
[66.94879150 242.92590332]
[63.73415375 257.57739258]
[60.80780029 272.28915405]
[73.46632385 280.70523071]
[81.93643188 293.32766724]
[84.92649841 308.23162842]
[81.98056030 323.14434814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 75]
[11 74]
[13 73]
[14 72]
[15 71]
[23 65]
[24 64]
[25 63]
[27 61]
[28 60]
[30 58]
[31 57]
[32 56]
[33 55]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
