%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGUGAAGUGAGGUGAGGUGUGGUGUUGGGCCGGUGCUGCUGCCGCUGCCGCCGGGGAGGAGGUGGAAAGCGGGGCUGUGGCGGGCCGGCGGGGGCGGCCUGUCAGCCGCUGCUUUGUCUCCUUAGCUCGGGUCCCUUCUGCGCUGCCGCAGGGAGGCCGCCCGGGCCAGGCGAGCCGAACCA\
) } def
/len { sequence length } bind def

/coor [
[119.39311981 265.92095947]
[116.58975983 280.86117554]
[108.27824402 293.58859253]
[95.72600555 302.16238403]
[80.84718323 305.27508545]
[65.91068268 302.45208740]
[53.19421387 294.12384033]
[44.63694382 281.56033325]
[41.54379654 266.67742920]
[44.38645172 251.74464417]
[52.73143005 239.03915405]
[65.30617523 230.49841309]
[80.19313812 227.42485046]
[82.97883606 212.68579102]
[85.76452637 197.94673157]
[77.18558502 185.82495117]
[79.80071259 170.83776855]
[92.57331085 161.92156982]
[95.35900879 147.18251038]
[98.14469910 132.44345093]
[87.18453979 129.83581543]
[77.78139496 123.64610291]
[71.06308746 114.62375641]
[67.83302307 103.85752106]
[68.47410583 92.64406586]
[72.90337372 82.33187866]
[59.18297958 76.26963806]
[45.46258545 70.20739746]
[31.74218941 64.14515686]
[18.02179527 58.08291245]
[2.27184892 59.58283615]
[-6.24267197 47.36186218]
[-19.96306610 41.29962158]
[-33.68346024 35.23737717]
[-49.43340683 36.73730087]
[-57.94792938 24.51632690]
[-71.66831970 18.45408440]
[-85.38871765 12.39184380]
[-101.13866425 13.89176559]
[-109.65318298 1.67079163]
[-123.37358093 -4.39144993]
[-137.09397888 -10.45369148]
[-146.23147583 -11.06346607]
[-150.99450684 -16.73713112]
[-164.60998535 -23.03148079]
[-178.22546387 -29.32583046]
[-191.84092712 -35.62018204]
[-205.45640564 -41.91453171]
[-223.73989868 -39.81540298]
[-233.30223083 -54.51871490]
[-247.02262878 -60.58095932]
[-260.74304199 -66.64319611]
[-274.46340942 -72.70544434]
[-288.18380737 -78.76768494]
[-301.53182983 -70.85500336]
[-316.97836304 -72.33278656]
[-328.58395386 -82.63279724]
[-331.88598633 -97.79446411]
[-325.61474609 -111.98782349]
[-312.18170166 -119.75524139]
[-296.75210571 -118.10997772]
[-285.25894165 -107.68467712]
[-282.12158203 -92.48807526]
[-268.40118408 -86.42583466]
[-254.68078613 -80.36359406]
[-240.96038818 -74.30135345]
[-227.23999023 -68.23911285]
[-215.83496094 -72.31322479]
[-204.34663391 -67.35662079]
[-199.16206360 -55.53000641]
[-185.54658508 -49.23565674]
[-171.93110657 -42.94130707]
[-158.31562805 -36.64695358]
[-144.70016479 -30.35260582]
[-131.03173828 -24.17408562]
[-117.31133270 -18.11184502]
[-103.59094238 -12.04960251]
[-88.82237244 -13.98313713]
[-79.32647705 -1.32855117]
[-65.60607910 4.73369074]
[-51.88568497 10.79593182]
[-37.11711502 8.86239815]
[-27.62121964 21.51698303]
[-13.90082455 27.57922554]
[-0.18043008 33.64146805]
[14.58814144 31.70793343]
[24.08403587 44.36251831]
[37.80443192 50.42475891]
[51.52482605 56.48700333]
[65.24522400 62.54924393]
[78.96561432 68.61148834]
[92.83596039 62.90066528]
[98.31043243 48.93534470]
[96.14340973 33.26324463]
[107.99201202 24.23772430]
[113.46647644 10.27240372]
[118.94094849 -3.69291663]
[124.41542053 -17.65823746]
[129.88989258 -31.62355804]
[135.36434937 -45.58887863]
[128.80960083 -59.96979523]
[134.42172241 -74.74408722]
[148.87113953 -81.14643097]
[163.58526611 -75.37842560]
[169.83448792 -60.86212540]
[163.91123962 -46.20980072]
[149.32968140 -40.11441040]
[143.85520935 -26.14908981]
[138.38073730 -12.18376827]
[132.90626526 1.78155267]
[127.43180084 15.74687386]
[121.95732880 29.71219444]
[124.51591492 44.38539886]
[112.27574921 54.40981293]
[106.80128479 68.37512970]
[119.70307159 74.29821014]
[128.83955383 85.18518066]
[132.44235229 98.95051575]
[129.80485535 112.94951630]
[144.21987915 117.09767914]
[159.62156677 113.47847748]
[169.71278381 124.43368530]
[184.12780762 128.58184814]
[198.54281616 132.73001099]
[210.20155334 127.17822266]
[222.13265991 130.94631958]
[228.09217834 141.48944092]
[242.43467712 145.88179016]
[256.77719116 150.27412415]
[271.11968994 154.66647339]
[285.46218872 159.05880737]
[299.80468750 163.45115662]
[314.14718628 167.84349060]
[328.48968506 172.23583984]
[346.32043457 167.67982483]
[357.78601074 180.95259094]
[372.20101929 185.10073853]
[386.61602783 189.24890137]
[401.03106689 193.39706421]
[415.44607544 197.54522705]
[429.89578247 201.57084656]
[444.37918091 205.47363281]
[458.86254883 209.37641907]
[473.34591675 213.27920532]
[489.04434204 208.53666687]
[500.81390381 219.95637512]
[496.54705811 235.79071045]
[480.63320923 239.75067139]
[469.44314575 227.76258850]
[454.95977783 223.85980225]
[440.47637939 219.95701599]
[425.99301147 216.05422974]
[418.69979858 217.35266113]
[411.29791260 211.96025085]
[396.88290405 207.81208801]
[382.46786499 203.66392517]
[368.05285645 199.51576233]
[353.63784790 195.36759949]
[342.88964844 200.94882202]
[330.83587646 197.59381104]
[324.09735107 186.57833862]
[309.75485229 182.18598938]
[295.41235352 177.79365540]
[281.06982422 173.40130615]
[266.72732544 169.00897217]
[252.38484192 164.61662292]
[238.04232788 160.22428894]
[223.69982910 155.83193970]
[206.84823608 160.69497681]
[194.39465332 147.14503479]
[179.97964478 142.99687195]
[165.56462097 138.84870911]
[151.19400024 142.76460266]
[140.07171631 131.51269531]
[125.65670013 127.36454010]
[112.88375854 135.22914124]
[110.09806824 149.96820068]
[107.31237030 164.70726013]
[115.94983673 177.66998291]
[112.91478729 192.57780457]
[100.50358582 200.73242188]
[97.71789551 215.47148132]
[94.93219757 230.21054077]
[107.67053986 238.50531006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 183]
[14 182]
[15 181]
[18 178]
[19 177]
[20 176]
[26 91]
[27 90]
[28 89]
[29 88]
[30 87]
[32 85]
[33 84]
[34 83]
[36 81]
[37 80]
[38 79]
[40 77]
[41 76]
[42 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[50 67]
[51 66]
[52 65]
[53 64]
[54 63]
[92 115]
[93 114]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[119 175]
[120 174]
[122 172]
[123 171]
[124 170]
[127 168]
[128 167]
[129 166]
[130 165]
[131 164]
[132 163]
[133 162]
[134 161]
[136 158]
[137 157]
[138 156]
[139 155]
[140 154]
[141 152]
[142 151]
[143 150]
[144 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
