%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGGUCUCUCGGUGCUCGCUCCAUCGGGUCUGGCGGGGCUGGCAGCGGCGAGGACCCGGGUCUGGCGCUGUGGGCCGGGAGCCGUGGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[176.26176453 315.09472656]
[180.07847595 302.64123535]
[173.88786316 288.97827148]
[167.69726562 275.31533813]
[161.50665283 261.65237427]
[155.31605530 247.98941040]
[149.12544250 234.32644653]
[142.93484497 220.66349792]
[136.74423218 207.00053406]
[125.43750763 202.36961365]
[120.22254181 190.87557983]
[124.44466400 178.55363464]
[118.70441437 164.69543457]
[112.96416473 150.83724976]
[107.22391510 136.97904968]
[101.48365784 123.12085724]
[95.74340820 109.26266479]
[89.88482666 103.48094177]
[90.05027771 94.85591125]
[84.76652527 80.81732178]
[70.64860535 74.23536682]
[65.49011230 59.92297363]
[71.85200500 46.50425720]
[66.56825256 32.46566772]
[61.47330475 27.76830292]
[59.90764999 22.04741096]
[61.43114471 17.33223534]
[57.07687378 2.97812986]
[52.72260284 -11.37597466]
[48.36833191 -25.73007965]
[44.01406097 -40.08418655]
[39.65979385 -54.43828964]
[35.30552292 -68.79239655]
[25.36267281 -70.78640747]
[16.94146538 -76.32994843]
[11.24586391 -84.57773590]
[9.07028866 -94.30181885]
[10.68904018 -104.07435608]
[15.82256126 -112.47726440]
[23.68453979 -118.30796051]
[21.24110794 -133.10760498]
[18.79767609 -147.90725708]
[16.35424423 -162.70690918]
[5.53813457 -175.03346252]
[11.06071186 -190.47474670]
[27.24082184 -193.14608765]
[37.43375397 -180.29945374]
[31.15389442 -165.15034485]
[33.59732437 -150.35069275]
[36.04075623 -135.55104065]
[38.48418808 -120.75138855]
[56.04340744 -110.63938141]
[60.90617371 -90.67761230]
[49.65962601 -73.14666748]
[54.01389694 -58.79256058]
[58.36816788 -44.43845367]
[62.72243881 -30.08435059]
[67.07670593 -15.73024559]
[71.43097687 -1.37614024]
[75.78524780 12.97796440]
[80.60684204 27.18191719]
[85.89059448 41.22050476]
[99.52128601 47.11454773]
[105.07974243 61.27640533]
[98.80511475 75.53356934]
[104.08886719 89.57215881]
[109.60160065 103.52241516]
[115.34185791 117.38060760]
[121.08210754 131.23880005]
[126.82235718 145.09700012]
[132.56260681 158.95518494]
[138.30285645 172.81338501]
[153.14343262 183.56042480]
[150.40719604 200.80993652]
[156.59779358 214.47288513]
[162.78840637 228.13584900]
[168.97900391 241.79879761]
[175.16961670 255.46176147]
[181.36021423 269.12472534]
[187.55082703 282.78768921]
[193.74142456 296.45062256]
[208.92567444 306.70635986]
[206.75529480 324.03616333]
[213.38963318 337.48922729]
[220.02395630 350.94232178]
[226.65829468 364.39541626]
[233.29261780 377.84851074]
[245.72088623 389.37997437]
[238.08056641 404.51477051]
[221.42219543 401.36276245]
[219.83952332 384.48284912]
[213.20520020 371.02975464]
[206.57086182 357.57666016]
[199.93653870 344.12356567]
[193.30220032 330.67047119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 75]
[9 74]
[12 72]
[13 71]
[14 70]
[15 69]
[16 68]
[17 67]
[19 66]
[20 65]
[23 62]
[24 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[40 51]
[41 50]
[42 49]
[43 48]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
