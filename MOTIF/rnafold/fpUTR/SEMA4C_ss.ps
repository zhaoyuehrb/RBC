%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGAGAGGCCGCGGAGGGCUGGCGGGCGAGCGCGGGCAGGCGGCGACGCGGGGGCAGGGGUGGACGGCGGUCAGAGCCGAACGCGAGGGCGGCGCCCGGGGACUGGAGCUGCGCGCAAUAGGACAGCUGGCCUGAAGCUCAGAGCCGGGGCGUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.99594116 531.59796143]
[88.99594116 516.59796143]
[88.99594116 501.59796143]
[77.39076233 496.46667480]
[68.56842804 487.28149414]
[63.87439346 475.39190674]
[64.04395294 462.56350708]
[69.08728790 450.71591187]
[78.28263092 441.63546753]
[90.27932739 436.70584106]
[90.86457062 421.71728516]
[91.44981384 406.72869873]
[84.21497345 393.70922852]
[92.48480988 380.22143555]
[93.07005310 365.23287964]
[93.65528870 350.24429321]
[82.42781067 332.95880127]
[93.95379639 314.93231201]
[93.66111755 299.93518066]
[93.36844635 284.93801880]
[93.07576752 269.94088745]
[92.78308868 254.94374084]
[84.26866150 246.30676270]
[83.93138885 233.78163147]
[92.50000000 224.09687805]
[92.50000000 209.09687805]
[92.50000000 194.09687805]
[92.50000000 179.09687805]
[92.50000000 164.09687805]
[84.76270294 151.36961365]
[92.50000000 137.56944275]
[92.50000000 122.56943512]
[92.50000000 107.56943512]
[91.18456268 92.62722778]
[88.56382751 77.85794067]
[85.94309235 63.08865738]
[75.91369629 50.85257339]
[81.30833435 36.96923447]
[78.68759918 22.19995117]
[76.06686401 7.43066692]
[73.44612885 -7.33861685]
[59.77394104 -22.10671806]
[67.02398682 -40.00050735]
[63.82900620 -54.65629578]
[60.63402557 -69.31208038]
[47.08021545 -72.87934875]
[36.44355392 -81.90373993]
[30.77005386 -94.57437897]
[31.11856842 -108.38658142]
[37.36367798 -120.63689423]
[48.23143005 -128.95227051]
[45.32302094 -143.66761780]
[42.41460800 -158.38294983]
[39.50619888 -173.09828186]
[29.23996162 -185.13635254]
[34.36268234 -199.12229919]
[31.45427322 -213.83764648]
[13.83353424 -219.14901733]
[1.37030041 -232.57522583]
[-2.58071351 -250.37673950]
[2.98039913 -267.65393066]
[16.44744110 -279.69564819]
[12.68308353 -294.21560669]
[8.91872597 -308.73559570]
[-4.42111969 -316.77835083]
[-8.03187180 -331.55731201]
[-0.28210282 -344.22525024]
[-4.04646063 -358.74520874]
[-7.81081867 -373.26519775]
[-11.57517719 -387.78515625]
[-25.77029037 -394.34509277]
[-32.38092422 -408.51666260]
[-28.28573227 -423.60848999]
[-15.41834354 -432.49468994]
[0.14565466 -430.97943115]
[11.05741978 -419.77822876]
[12.16474915 -404.17990112]
[2.94479609 -391.54953003]
[6.70915413 -377.02954102]
[10.47351170 -362.50958252]
[14.23787022 -347.98959351]
[27.16623116 -340.68255615]
[31.19066811 -326.01086426]
[23.43869781 -312.49993896]
[27.20305634 -297.97998047]
[30.96741486 -283.45999146]
[42.72588348 -281.91708374]
[53.29638290 -276.46441650]
[61.41691589 -267.72650146]
[66.10902405 -256.72155762]
[66.79565430 -244.74305725]
[63.37203979 -233.20747375]
[56.22085571 -223.48695374]
[46.16960907 -216.74604797]
[49.07802200 -202.03071594]
[59.13623047 -191.04519653]
[54.22153473 -176.00669861]
[57.12994385 -161.29135132]
[60.03835678 -146.57601929]
[62.94676590 -131.86068726]
[78.34504700 -127.03836823]
[89.28399658 -115.04943085]
[92.71819305 -99.09161377]
[87.62120056 -83.48600769]
[75.28981781 -72.50706482]
[78.48479462 -57.85127258]
[81.67977142 -43.19548416]
[90.79079437 -38.43454361]
[95.85958099 -29.23885918]
[94.98476410 -18.55424881]
[88.21541595 -9.95935154]
[90.83615112 4.80993176]
[93.45688629 19.57921600]
[96.07762146 34.34849930]
[105.91956329 45.52818680]
[100.71237946 60.46792221]
[103.33311462 75.23720551]
[105.95384979 90.00649261]
[113.47371674 77.02760315]
[126.75260925 70.05113983]
[141.70680237 71.22261810]
[153.73733521 80.18176270]
[159.14439392 94.17331696]
[156.26512146 108.89438629]
[145.98500061 119.81771088]
[131.46553040 123.58398438]
[117.17195129 119.03494263]
[107.50000000 107.56943512]
[107.50000000 122.56943512]
[107.50000000 137.56944275]
[115.23729706 151.36961365]
[107.50000000 164.09687805]
[107.50000000 179.09687805]
[107.50000000 194.09687805]
[107.50000000 209.09687805]
[107.50000000 224.09687805]
[117.08098602 239.79483032]
[107.78023529 254.65106201]
[108.07291412 269.64822388]
[108.36558533 284.64535522]
[108.65826416 299.64248657]
[108.95094299 314.63964844]
[116.62825012 320.26721191]
[120.76651764 328.68597412]
[120.53977966 337.92596436]
[116.12728882 345.89001465]
[108.64386749 350.82952881]
[108.05863190 365.81811523]
[107.47338867 380.80670166]
[114.66636658 394.89822388]
[106.43839264 407.31393433]
[105.85314941 422.30252075]
[105.26790619 437.29110718]
[120.32076263 446.27621460]
[128.73390198 461.55487061]
[128.28315735 478.90216064]
[119.18142700 493.57254028]
[103.99594116 501.59796143]
[103.99594116 516.59796143]
[103.99594116 531.59796143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[10 153]
[11 152]
[12 151]
[14 149]
[15 148]
[16 147]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[25 136]
[26 135]
[27 134]
[28 133]
[29 132]
[31 130]
[32 129]
[33 128]
[34 118]
[35 117]
[36 116]
[38 114]
[39 113]
[40 112]
[41 111]
[43 107]
[44 106]
[45 105]
[51 100]
[52 99]
[53 98]
[54 97]
[56 95]
[57 94]
[62 86]
[63 85]
[64 84]
[67 81]
[68 80]
[69 79]
[70 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
