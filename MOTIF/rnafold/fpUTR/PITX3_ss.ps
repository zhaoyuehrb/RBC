%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCGCCCGAGCGGAGAGGCGGCCCGGGAGCAGGGGGGCGGCCCCCACUCCGGCCGGGUGCCCGGCCCCUGGCCCCUGCCUGCCCUCUAGAUCGCCGCCGCAGCCGCCGCUACUGGGAGUCUGCCUGUUGCAGGACGCACUAGCCCUCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[154.84788513 163.16818237]
[144.18766785 152.61546326]
[133.42106628 142.17131042]
[122.54917908 131.83680725]
[111.67728424 121.50230408]
[100.80538940 111.16780090]
[98.23544312 125.94600677]
[85.18009949 133.33235168]
[71.18909454 127.92385864]
[66.49657440 113.67674255]
[74.53502655 101.01249695]
[89.42401886 99.19461060]
[79.65343475 87.81323242]
[69.88284302 76.43186188]
[60.11225891 65.05049133]
[43.30273056 66.65885925]
[28.97759056 58.03536987]
[22.65845680 42.73422623]
[26.64359474 26.83729553]
[16.64434814 15.65628147]
[6.64510298 4.47526789]
[-3.35414338 -6.70574665]
[-13.35338974 -17.88676071]
[-23.35263634 -29.06777382]
[-45.10556793 -28.52788544]
[-60.07541275 -43.93151855]
[-58.94431305 -65.10066223]
[-70.02342224 -75.21269989]
[-81.10253143 -85.32474518]
[-89.60395050 -88.82717133]
[-92.30105591 -95.75575256]
[-103.17294312 -106.09025574]
[-114.04483795 -116.42476654]
[-124.91673279 -126.75926971]
[-135.78862000 -137.09376526]
[-151.12162781 -140.99369812]
[-155.01551819 -155.37030029]
[-165.88742065 -165.70480347]
[-176.75930786 -176.03930664]
[-185.18800354 -179.71331787]
[-187.74412537 -186.69514465]
[-198.40434265 -197.24786377]
[-209.06454468 -207.80058289]
[-219.72476196 -218.35330200]
[-229.00154114 -214.47457886]
[-238.98838806 -213.59683228]
[-248.74165344 -215.78492737]
[-257.34518433 -220.81491089]
[-263.99652100 -228.19671631]
[-268.08157349 -237.22196960]
[-269.23138428 -247.03186035]
[-267.35534668 -256.69888306]
[-262.64816284 -265.31454468]
[-272.18606567 -276.89160156]
[-281.72399902 -288.46865845]
[-291.26190186 -300.04571533]
[-300.79980469 -311.62277222]
[-310.33773804 -323.19982910]
[-325.87802124 -328.43734741]
[-328.84661865 -344.56558228]
[-316.18969727 -354.99316406]
[-300.92761230 -348.99310303]
[-298.76068115 -332.73773193]
[-289.22277832 -321.16067505]
[-279.68484497 -309.58361816]
[-270.14694214 -298.00656128]
[-260.60900879 -286.42953491]
[-251.07110596 -274.85247803]
[-231.02722168 -277.68902588]
[-213.16625977 -267.87222290]
[-204.70413208 -249.18017578]
[-209.17202759 -229.01351929]
[-198.51182556 -218.46080017]
[-187.85160828 -207.90806580]
[-177.19140625 -197.35534668]
[-166.42480469 -186.91119385]
[-155.55290222 -176.57669067]
[-144.68101501 -166.24218750]
[-130.12564087 -163.08146667]
[-125.45411682 -147.96566772]
[-114.58222198 -137.63116455]
[-103.71033478 -127.29665375]
[-92.83843994 -116.96215057]
[-81.96655273 -106.62764740]
[-70.99048615 -96.40384674]
[-59.91138077 -86.29180908]
[-48.83227158 -76.17977142]
[-40.71598434 -79.50785828]
[-31.91334534 -79.98913574]
[-23.39869118 -77.54162598]
[-16.12390900 -72.40912628]
[-10.91203022 -65.13722992]
[-8.36414909 -56.51542664]
[-8.79021645 -47.49143219]
[-12.17162132 -39.06702042]
[-2.17237520 -27.88600731]
[7.82687092 -16.70499229]
[17.82611656 -5.52397823]
[27.82536316 5.65703583]
[37.82460785 16.83804893]
[50.95734024 14.26107407]
[63.74628067 18.55835915]
[72.80265808 28.70446968]
[75.67087555 42.10955048]
[71.49362946 55.27990341]
[81.26422119 66.66127777]
[91.03480530 78.04264832]
[100.80538940 89.42401886]
[111.13989258 100.29591370]
[122.01178741 110.63041687]
[132.88368225 120.96492004]
[143.75556946 131.29942322]
[152.18426514 134.97343445]
[154.74038696 141.95526123]
[165.40060425 152.50798035]
[176.47970581 162.62001038]
[187.95951843 172.27476501]
[199.43931580 181.92950439]
[210.91911316 191.58425903]
[222.39892578 201.23899841]
[233.23745728 199.67384338]
[242.93476868 204.26828003]
[248.36048889 213.26986694]
[247.91308594 223.55015564]
[258.99218750 233.66220093]
[274.55960083 233.12065125]
[285.65136719 243.53352356]
[286.07171631 258.37802124]
[297.15081787 268.49005127]
[305.65225220 271.99249268]
[308.34933472 278.92108154]
[319.22122192 289.25558472]
[335.23101807 290.28820801]
[344.28704834 303.53085327]
[339.44229126 318.82492065]
[324.41326904 324.43807983]
[310.72891235 316.06439209]
[308.88671875 300.12747192]
[298.01483154 289.79296875]
[287.03878784 279.56915283]
[275.95965576 269.45712280]
[261.13858032 270.39056396]
[249.75875854 260.29333496]
[248.88015747 244.74131775]
[237.80105591 234.62927246]
[218.68730164 231.94078064]
[212.74417114 212.71881104]
[201.26437378 203.06405640]
[189.78456116 193.40931702]
[178.30476379 183.75456238]
[166.82496643 174.09982300]
[163.96929932 174.24256897]
[160.88423157 173.22889709]
[158.02273560 170.96519470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 112]
[4 111]
[5 110]
[6 109]
[12 108]
[13 107]
[14 106]
[15 105]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[24 95]
[27 87]
[28 86]
[29 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[37 78]
[38 77]
[39 76]
[41 75]
[42 74]
[43 73]
[44 72]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[116 151]
[117 150]
[118 149]
[119 148]
[120 147]
[124 145]
[125 144]
[128 141]
[129 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
