%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCGGAGGGGGAGGCCCGCGGCUGCCGCCGCCAUUUCGGGCGCUGCUGUGAAGCUGAAACCGGAGCCGGUCCGCUGGGCGGCGGGCGCCGGGGGCCGGAGGGGCGCGCGCGGCGGCGGCACCCCAGCGUUUAGGCGCGGAGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[77.41828918 122.47801208]
[69.91869354 122.39999390]
[64.72327423 136.47151184]
[59.52786255 150.54302979]
[54.33244705 164.61454773]
[49.13703156 178.68606567]
[52.44179916 194.74877930]
[40.00540161 205.43840027]
[24.62134171 199.75837708]
[22.11541748 183.55181885]
[35.06551361 173.49064636]
[40.26092911 159.41912842]
[45.45634460 145.34761047]
[50.65176010 131.27609253]
[55.84717560 117.20457458]
[52.90169144 102.49661255]
[42.68821335 91.51094818]
[32.47473145 80.52528381]
[22.26125145 69.53961945]
[12.04777241 58.55395508]
[-3.01537251 53.71533585]
[-6.01472902 39.12584686]
[-16.22820854 28.14018440]
[-26.44168854 17.15452003]
[-36.65517044 6.16885471]
[-52.21462631 5.43328953]
[-62.41604996 -5.85323191]
[-61.61891556 -20.68226242]
[-71.83239746 -31.66792679]
[-82.04587555 -42.65359116]
[-92.25935364 -53.63925552]
[-102.47283173 -64.62492371]
[-112.68631744 -75.61058807]
[-122.89979553 -86.59625244]
[-133.11328125 -97.58191681]
[-146.67245483 -94.90840912]
[-159.67362976 -99.26533508]
[-168.73925781 -109.40756226]
[-171.57049561 -122.60209656]
[-167.52938843 -135.36396790]
[-177.51211548 -146.55973816]
[-187.49484253 -157.75549316]
[-197.47756958 -168.95126343]
[-207.46029663 -180.14703369]
[-220.94557190 -179.36941528]
[-232.24067688 -186.41560364]
[-237.32084656 -198.50965881]
[-234.52970886 -211.12736511]
[-244.27735901 -222.52838135]
[-254.02500916 -233.92939758]
[-268.87384033 -239.39044189]
[-271.26370239 -254.09207153]
[-281.01135254 -265.49307251]
[-296.09674072 -262.60745239]
[-310.59860229 -267.66625977]
[-320.61602783 -279.30871582]
[-323.45434570 -294.40307617]
[-318.35009766 -308.88900757]
[-306.67630005 -318.86987305]
[-291.57315063 -321.66088867]
[-277.10327148 -316.51126099]
[-267.15902710 -304.80624390]
[-264.41537476 -289.69439697]
[-269.61032104 -275.24072266]
[-259.86267090 -263.83972168]
[-245.71107483 -259.19415283]
[-242.62399292 -243.67704773]
[-232.87634277 -232.27603149]
[-223.12869263 -220.87501526]
[-206.34983826 -220.30209351]
[-194.92881775 -207.54104614]
[-196.26452637 -190.12976074]
[-186.28179932 -178.93399048]
[-176.29907227 -167.73822021]
[-166.31634521 -156.54246521]
[-156.33361816 -145.34669495]
[-140.09165955 -147.51554871]
[-125.60099792 -139.51637268]
[-118.64312744 -124.31539917]
[-122.12760925 -107.79539490]
[-111.91413116 -96.80973053]
[-101.70065308 -85.82406616]
[-91.48716736 -74.83840179]
[-81.27368927 -63.85273743]
[-71.06021118 -52.86707306]
[-60.84672928 -41.88140869]
[-50.63325119 -30.89574242]
[-35.78552246 -30.61189461]
[-25.27110672 -19.61636353]
[-25.66950417 -4.04462528]
[-15.45602417 6.94103956]
[-5.24254417 17.92670441]
[4.97093534 28.91236877]
[19.30354309 32.96522141]
[23.03343582 48.34047699]
[33.24691772 59.32614136]
[43.46039581 70.31180573]
[53.67387772 81.29747009]
[63.88735580 92.28313446]
[73.92400360 72.95972443]
[93.37810516 62.37611008]
[115.79489899 64.51744080]
[133.46841431 79.06550598]
[148.42864990 80.15681458]
[163.38890076 81.24813080]
[178.34915161 82.33943939]
[192.67567444 75.62666321]
[204.80630493 84.26941681]
[219.76654053 85.36072540]
[228.61868286 82.85243988]
[235.02561951 86.63354492]
[249.95993042 88.03584290]
[264.89425659 89.43814850]
[279.56701660 82.11408234]
[293.09512329 91.38350677]
[291.56201172 107.71083832]
[276.54483032 114.29991150]
[263.49194336 104.37245941]
[248.55763245 102.97015381]
[233.62332153 101.56784821]
[218.67523193 100.32097626]
[203.71498108 99.22966766]
[190.45852661 106.02050018]
[177.25784302 97.29968262]
[162.29759216 96.20837402]
[147.33734131 95.11706543]
[132.37709045 94.02575684]
[127.80622864 99.97194672]
[140.41188049 108.10198212]
[155.12852478 111.00380707]
[160.41821289 125.04015350]
[151.27703857 136.93296814]
[136.35232544 135.43190002]
[129.76261902 121.95549774]
[118.66449738 111.86432648]
[114.09362793 117.81051636]
[118.99517822 131.98707581]
[123.89672852 146.16363525]
[128.94548035 160.28843689]
[134.14089966 174.35995483]
[147.09098816 184.42112732]
[144.58506775 200.62767029]
[129.20100403 206.30769348]
[116.76461792 195.61807251]
[120.06938171 179.55537415]
[114.87397003 165.48385620]
[109.57250214 160.26463318]
[109.72016907 151.06518555]
[104.81861877 136.88862610]
[99.91706848 122.71206665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[16 99]
[17 98]
[18 97]
[19 96]
[20 95]
[22 93]
[23 92]
[24 91]
[25 90]
[28 87]
[29 86]
[30 85]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[40 76]
[41 75]
[42 74]
[43 73]
[44 72]
[48 69]
[49 68]
[50 67]
[52 65]
[53 64]
[103 127]
[104 126]
[105 125]
[106 124]
[108 122]
[109 121]
[111 120]
[112 119]
[113 118]
[136 150]
[137 149]
[138 148]
[139 146]
[140 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
