%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUAUCUGAAGACGCCGUUUCCUGCGCGUCCUGUAUCUAUGGAGACGGCAAUAUGGAGGCGAUCUUACAUUUCUUUGAUUUCAUCUGAACGUCCAGUUCACAAUUGGAGUG\
) } def
/len { sequence length } bind def

/coor [
[210.80680847 223.96775818]
[196.59692383 221.81593323]
[183.56307983 215.72251892]
[172.77554321 206.17788696]
[165.12294006 193.95620728]
[161.23908997 180.05265808]
[161.45048523 165.60238647]
[165.74888611 151.78787231]
[153.34971619 143.34628296]
[140.83439636 135.07785034]
[128.20535278 126.98419189]
[115.57630920 118.89053345]
[102.94727325 110.79687500]
[90.20694733 102.87954712]
[77.35779572 95.14008331]
[64.50864410 87.40061188]
[51.65949631 79.66114807]
[46.15404892 79.57669067]
[41.73543167 77.51270294]
[38.99319077 74.25315094]
[38.10063934 70.70329285]
[25.94092178 61.92028427]
[13.78120041 53.13727570]
[1.15215969 45.04361725]
[-11.90716648 37.66432190]
[-24.96649361 30.28502655]
[-34.11765289 28.74925423]
[-38.28215790 22.51473808]
[-51.13130569 14.77527046]
[-63.98045349 7.03580236]
[-76.82960510 -0.70366544]
[-89.78509521 -8.26377678]
[-102.84442139 -15.64307213]
[-115.90374756 -23.02236748]
[-128.96307373 -30.40166092]
[-145.34757996 -29.70870972]
[-153.91033936 -43.69481277]
[-145.84272766 -57.97226715]
[-129.44401550 -57.85365295]
[-121.58377838 -43.46098709]
[-108.52445221 -36.08169174]
[-95.46512604 -28.70239830]
[-82.40579987 -21.32310295]
[-74.92915344 -20.76448441]
[-69.09013367 -13.55281448]
[-56.24098587 -5.81334686]
[-43.39183807 1.92612100]
[-30.54268837 9.66558838]
[-17.58719826 17.22570038]
[-4.52787209 24.60499573]
[8.53145409 31.98428917]
[11.37715912 31.25097466]
[14.70301247 31.68309975]
[18.03425980 33.47681808]
[20.83188057 36.64051056]
[22.56420708 40.97755432]
[34.72392654 49.76056290]
[46.88364792 58.54356766]
[59.39896393 66.81199646]
[72.24811554 74.55146027]
[85.09725952 82.29093170]
[97.94641113 90.03039551]
[106.04757690 91.19063568]
[111.04093170 98.16783905]
[123.66996765 106.26149750]
[136.29901123 114.35515594]
[148.92805481 122.44881439]
[157.97972107 124.49078369]
[161.79130554 130.94711304]
[174.19047546 139.38870239]
[186.59584045 129.68006897]
[201.36834717 124.26573181]
[217.07078552 123.65979767]
[232.17936707 127.90914917]
[245.23159790 136.59008789]
[254.96784973 148.85055542]
[260.45291138 163.49374390]
[261.16577148 179.09487915]
[257.04922485 194.13995361]
[269.67825317 202.23361206]
[282.30731201 210.32727051]
[294.93634033 218.42094421]
[307.56539917 226.51460266]
[320.19442749 234.60826111]
[338.40219116 229.79376221]
[354.15689087 239.52545166]
[357.87329102 257.34454346]
[370.93261719 264.72384644]
[383.99194336 272.10314941]
[397.05126953 279.48245239]
[410.11059570 286.86172485]
[425.89065552 283.96871948]
[437.89611816 294.61053467]
[436.91741943 310.62371826]
[423.70535278 319.72430420]
[408.39505005 314.93109131]
[402.73129272 299.92105103]
[389.67196655 292.54177856]
[376.61264038 285.16247559]
[363.55331421 277.78317261]
[350.49398804 270.40386963]
[340.26940918 275.82577515]
[328.57821655 275.57116699]
[318.39108276 269.58697510]
[312.35385132 259.29095459]
[312.10076904 247.23728943]
[299.47174072 239.14363098]
[286.84268188 231.04997253]
[274.21365356 222.95631409]
[261.58459473 214.86265564]
[248.95556641 206.76899719]
[238.10021973 216.11441040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 70]
[9 69]
[10 67]
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 60]
[17 59]
[21 58]
[22 57]
[23 56]
[24 51]
[25 50]
[26 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 43]
[33 42]
[34 41]
[35 40]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[87 101]
[88 100]
[89 99]
[90 98]
[91 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
