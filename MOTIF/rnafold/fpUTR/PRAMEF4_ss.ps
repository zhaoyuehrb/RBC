%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUGCUUGGUUCUUCCUGAGAUCUGAGCACCUUCUAGACUACAUCCAGAUCUGUUUUCCCUGCAGAUUC\
) } def
/len { sequence length } bind def

/coor [
[94.37570953 160.67794800]
[74.53180695 155.36079407]
[57.58249664 143.75158691]
[45.45415878 127.16979218]
[39.52524185 107.50000000]
[24.52524185 107.50000000]
[9.52524185 107.50000000]
[-5.47475863 107.50000000]
[-20.47475815 107.50000000]
[-35.47475815 107.50000000]
[-50.47475815 107.50000000]
[-64.27493286 115.23729706]
[-77.00220490 107.50000000]
[-92.00220490 107.50000000]
[-107.00220490 107.50000000]
[-122.00220490 107.50000000]
[-137.84133911 113.54634094]
[-148.03608704 100.00000000]
[-137.84133911 86.45365906]
[-122.00220490 92.50000000]
[-107.00220490 92.50000000]
[-92.00220490 92.50000000]
[-77.00220490 92.50000000]
[-64.27493286 84.76270294]
[-50.47475815 92.50000000]
[-35.47475815 92.50000000]
[-20.47475815 92.50000000]
[-5.47475863 92.50000000]
[9.52524185 92.50000000]
[24.52524185 92.50000000]
[39.52524185 92.50000000]
[41.84349442 81.79925537]
[46.03919601 71.68608093]
[51.97689819 62.48695755]
[59.46492004 54.49885941]
[68.26152802 47.97966003]
[78.08273315 43.13982010]
[88.61149597 40.13558197]
[99.50790405 39.06393433]
[110.42020416 39.95946503]
[120.99610901 42.79327011]
[130.89419556 47.47386551]
[139.79493713 53.85014725]
[147.41099548 61.71627426]
[153.49649048 70.81829834]
[157.85498047 80.86239624]
[160.34574890 91.52430725]
[160.88838196 102.45983124]
[159.46537781 113.31594849]
[156.12268066 123.74218750]
[169.11305237 131.24218750]
[182.10343933 138.74218750]
[195.09382629 146.24218750]
[208.08419800 153.74218750]
[221.07458496 161.24218750]
[234.06495667 168.74218750]
[248.69662476 163.22415161]
[263.43484497 168.45089722]
[271.32067871 181.95451355]
[268.63070679 197.35899353]
[256.63504028 207.39082336]
[240.99763489 207.31327820]
[229.10203552 197.16296387]
[226.56495667 181.73257446]
[213.57458496 174.23257446]
[200.58419800 166.73257446]
[187.59382629 159.23257446]
[174.60343933 151.73257446]
[161.61305237 144.23257446]
[148.62268066 136.73257446]
[133.65318298 150.80264282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[13 23]
[14 22]
[15 21]
[16 20]
[50 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
[56 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
