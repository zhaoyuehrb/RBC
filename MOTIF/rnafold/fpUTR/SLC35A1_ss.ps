%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGGCGGUCCCCGGUGUCCUGCGCGGGGGCGCGGAGGGGGCGGGCGUCAGUUCCGCGGGGGGCUGUCGGGGAACC\
) } def
/len { sequence length } bind def

/coor [
[76.54020691 257.16894531]
[71.26942444 271.59512329]
[59.48141479 281.44085693]
[44.34709167 284.05767822]
[29.93750954 278.74169922]
[20.12877846 266.92288208]
[17.55939484 251.78044128]
[22.92051125 237.38760376]
[34.77001190 227.61596680]
[49.92044449 225.09405518]
[55.11219788 211.02117920]
[60.30395508 196.94831848]
[65.21840668 182.77622986]
[69.85366058 168.51037598]
[74.48891449 154.24452209]
[79.12417603 139.97868347]
[83.75942993 125.71283722]
[88.39468384 111.44698334]
[84.40108490 95.26811981]
[96.71013641 84.03460693]
[100.78174591 69.59777832]
[104.85334778 55.16095352]
[108.92495728 40.72412491]
[112.99655914 26.28729630]
[109.29568481 10.90503120]
[120.19718170 0.75581819]
[124.26879120 -13.68101025]
[128.34039307 -28.11783981]
[132.41200256 -42.55466843]
[136.48361206 -56.99149704]
[140.55522156 -71.42832184]
[143.76985168 -86.07981110]
[146.11637878 -100.89514160]
[148.46289062 -115.71046448]
[150.80940247 -130.52578735]
[153.15592957 -145.34111023]
[140.84510803 -154.43519592]
[134.18109131 -168.21379089]
[134.69522095 -183.51065063]
[142.26934814 -196.81069946]
[155.16299438 -205.05766296]
[170.41329956 -206.35646057]
[184.51583862 -200.40863037]
[194.22998047 -188.58094788]
[197.32345581 -173.59132385]
[193.08543396 -158.88426208]
[182.48976135 -147.83934021]
[167.97125244 -142.99459839]
[165.62472534 -128.17927551]
[163.27821350 -113.36394501]
[160.93170166 -98.54862213]
[158.58517456 -83.73329926]
[160.58784485 -80.52422333]
[160.96899414 -76.11311340]
[159.14796448 -71.35797119]
[154.99205017 -67.35671997]
[150.92044067 -52.91988754]
[146.84883118 -38.48305893]
[142.77722168 -24.04623222]
[138.70561218 -9.60940361]
[134.63401794 4.82742500]
[138.62611389 19.17707062]
[127.43338776 30.35890198]
[123.36178589 44.79573059]
[119.29017639 59.23255920]
[115.21857452 73.66938782]
[111.14696503 88.10621643]
[116.25346375 98.75826263]
[112.82438660 110.06240845]
[102.66053009 116.08223724]
[98.02527618 130.34808350]
[93.39002228 144.61393738]
[88.75476837 158.87979126]
[84.11950684 173.14562988]
[79.48425293 187.41148376]
[79.78967285 196.81472778]
[74.37682343 202.14007568]
[69.18506622 216.21293640]
[63.99331284 230.28581238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 79]
[11 78]
[12 77]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[20 67]
[21 66]
[22 65]
[23 64]
[24 63]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
