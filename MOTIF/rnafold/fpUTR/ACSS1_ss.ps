%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGCGGAGACUCCACGGGGCGCCCCGGGCGUGAGGCACCCACUCUGGGAGCACAGAGAGCUCAGGUAGCCUGCCUAG\
) } def
/len { sequence length } bind def

/coor [
[86.49685669 130.94041443]
[78.33111572 126.67417908]
[71.49149323 120.25991058]
[59.45964050 129.21728516]
[47.42779541 138.17466736]
[35.39594650 147.13204956]
[28.94690323 161.57920837]
[14.11766720 162.97312927]
[2.08581972 171.93051147]
[-9.94602776 180.88789368]
[-19.04034042 195.19627380]
[-35.30710220 190.41833496]
[-35.21896744 173.46461487]
[-18.90340805 168.85604858]
[-6.87155914 159.89866638]
[5.16028881 150.94128418]
[10.74873352 137.13482666]
[26.43856621 135.10020447]
[38.47041321 126.14281464]
[50.50226212 117.18544006]
[62.53411102 108.22805786]
[62.24324036 93.23088074]
[49.87311554 84.74678040]
[37.50299072 76.26267242]
[25.13286591 67.77857208]
[12.76274014 59.29446793]
[-3.71924734 55.32201004]
[-4.46470404 38.38446045]
[11.60455799 32.97935486]
[21.24684334 46.92434311]
[33.61697006 55.40844727]
[45.98709488 63.89255142]
[58.35721970 72.37665558]
[70.72734070 80.86075592]
[97.93323517 68.13180542]
[121.94024658 81.19560242]
[135.47276306 74.72480774]
[149.00526428 68.25402069]
[162.53778076 61.78322983]
[175.94227600 55.05123901]
[189.21369934 48.06058884]
[202.48512268 41.06993484]
[206.93605042 20.79951286]
[224.36497498 10.05578232]
[243.93318176 15.04877090]
[255.96504211 6.09139204]
[267.99688721 -2.86598682]
[280.02871704 -11.82336617]
[292.06057739 -20.78074455]
[294.10284424 -36.45252609]
[306.67935181 -46.02369308]
[322.32867432 -43.81584549]
[331.76632690 -31.13885880]
[329.39315796 -15.51376343]
[316.61709595 -6.21065331]
[301.01794434 -8.74889660]
[288.98611450 0.20848215]
[276.95425415 9.16586113]
[264.92242432 18.12323952]
[252.89056396 27.08061790]
[254.52014160 36.88172913]
[252.30604553 46.62813568]
[246.53405762 54.85998154]
[238.02624512 60.32696152]
[228.02413940 62.17815399]
[218.00756836 60.09420776]
[209.47576904 54.34136200]
[196.20434570 61.33201599]
[182.93292236 68.32266998]
[178.36494446 74.38320160]
[169.00857544 75.31574249]
[155.47605896 81.78652954]
[141.94354248 88.25732422]
[128.41104126 94.72811127]
[129.39161682 102.57096863]
[128.20286560 110.55040741]
[124.84580231 118.06580353]
[119.48769379 124.52815247]
[112.45549011 129.40602112]
[104.21662903 132.26863098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[5 19]
[6 18]
[8 16]
[9 15]
[10 14]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[36 74]
[37 73]
[38 72]
[39 71]
[40 69]
[41 68]
[42 67]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
