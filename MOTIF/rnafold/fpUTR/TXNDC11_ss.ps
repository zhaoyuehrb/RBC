%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGACCCCGCGGCGGCGGCGCGGCUGACGUGGAGCGUCCGGGUUAGCGGGUGCGGCGAGCUGCGGGAUUGGGGAGCAACGGGCCGGGCCGGGCCUUCGGGCCCGAGGCGGCGGCGGCGGUAUAAAGCCGGCGACUGGGAGCAUGUA\
) } def
/len { sequence length } bind def

/coor [
[86.01428223 167.17361450]
[97.23088074 156.27764893]
[95.96730804 141.33096313]
[85.29431152 138.83624268]
[75.64576721 133.63601685]
[67.69384003 126.09258270]
[61.99250031 116.73143005]
[58.93891525 106.20468903]
[43.94641876 105.73036957]
[28.95391846 105.25604248]
[13.96142006 104.78172302]
[-1.03107858 104.30740356]
[-16.02357674 103.83307648]
[-31.01607513 103.35875702]
[-46.00857544 102.88442993]
[-61.99108124 111.96668243]
[-76.55050659 102.22106171]
[-91.54967499 102.06292725]
[-105.43064880 109.65431976]
[-118.07564545 101.78327942]
[-133.07481384 101.62514496]
[-148.07397461 101.46701050]
[-163.07315063 101.30888367]
[-178.86061096 110.72607422]
[-193.62228394 101.28957367]
[-208.62144470 101.44770050]
[-223.62060547 101.60583496]
[-238.61978149 101.76396942]
[-253.61894226 101.92209625]
[-268.61810303 102.08023071]
[-282.33593750 109.96257782]
[-295.14407349 102.35987854]
[-310.14324951 102.51801300]
[-325.14242554 102.67613983]
[-340.14157104 102.83427429]
[-355.91607666 109.04725647]
[-366.25308228 95.60913849]
[-356.20169067 81.95608521]
[-340.29971313 87.83510590]
[-325.30053711 87.67697906]
[-310.30139160 87.51884460]
[-295.30221558 87.36071777]
[-282.65722656 79.48966980]
[-268.77624512 87.08106232]
[-253.77706909 86.92292786]
[-238.77790833 86.76480103]
[-223.77874756 86.60666656]
[-208.77957153 86.44853973]
[-193.78041077 86.29040527]
[-185.05757141 77.84850311]
[-172.51876831 77.63368988]
[-162.91500854 86.30971527]
[-147.91584778 86.46784973]
[-132.91668701 86.62597656]
[-117.91751862 86.78411102]
[-105.10938263 79.18141174]
[-91.39154816 87.06376648]
[-76.39237976 87.22189331]
[-67.49349976 78.96576691]
[-54.95295334 79.01536560]
[-45.53425217 87.89193726]
[-30.54175377 88.36625671]
[-15.54925442 88.84057617]
[-0.55675602 89.31490326]
[14.43574238 89.78922272]
[29.42824173 90.26354980]
[44.42074203 90.73786926]
[59.41323853 91.21218872]
[62.65468216 80.75853729]
[68.57025909 71.40032959]
[76.80854797 63.81633377]
[86.84739685 58.57646561]
[98.02678680 56.09928131]
[109.59212494 56.61922073]
[120.74522400 60.16611481]
[130.69932556 66.55864716]
[138.73457336 75.41256714]
[149.50756836 64.97500610]
[149.92254639 49.40370178]
[160.99658203 38.97200394]
[175.83888245 39.46357727]
[186.61187744 29.02602005]
[197.38487244 18.58846283]
[208.15786743 8.15090656]
[218.93086243 -2.28664947]
[229.70385742 -12.72420597]
[240.14141846 -23.49720001]
[250.23309326 -34.59486008]
[260.32476807 -45.69251633]
[270.41644287 -56.79017639]
[276.59933472 -72.57650757]
[293.48031616 -71.00534821]
[296.64367676 -54.34913635]
[281.51409912 -46.69849777]
[271.42242432 -35.60083771]
[261.33074951 -24.50318146]
[251.23907471 -13.40552235]
[251.06617737 -9.81965637]
[249.10513306 -6.14692163]
[245.33828735 -3.24667287]
[240.14141846 -1.95121074]
[229.36842346 8.48634529]
[218.59542847 18.92390251]
[207.82243347 29.36145782]
[197.04943848 39.79901505]
[186.27644348 50.23657227]
[186.29843140 65.08699799]
[175.52177429 75.82563019]
[159.94512939 75.74800110]
[149.17213440 86.18556213]
[151.06468201 101.06568909]
[164.10745239 108.47420502]
[177.22760010 115.74481201]
[190.42366028 122.87670135]
[206.24296570 122.63133240]
[213.76086426 135.48942566]
[226.95692444 142.62132263]
[240.15298462 149.75320435]
[253.34906006 156.88510132]
[267.28286743 150.05657959]
[282.56344604 152.75544739]
[293.31506348 163.94392395]
[295.40353394 179.31980896]
[288.02581787 192.97076416]
[274.01873779 199.64772034]
[258.76834106 196.78324890]
[248.13871765 185.47880554]
[246.21716309 170.08116150]
[233.02110291 162.94926453]
[219.82502747 155.81738281]
[206.62896729 148.68548584]
[191.75354004 149.44097900]
[183.29177856 136.07276917]
[170.09570312 128.94087219]
[162.66557312 128.52473450]
[156.69892883 121.51697540]
[143.65615845 114.10845947]
[139.25851440 122.01290894]
[133.48760986 128.75386047]
[126.62570953 134.10566711]
[118.98913574 137.90742493]
[110.91399384 140.06738281]
[112.17756653 155.01406860]
[125.06415558 163.87239075]
[129.19200134 178.95532227]
[122.61206818 193.14117432]
[108.43119049 199.73181152]
[93.34513855 195.61535645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[8 68]
[9 67]
[10 66]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[17 58]
[18 57]
[20 55]
[21 54]
[22 53]
[23 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
[34 40]
[35 39]
[77 110]
[78 109]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 97]
[88 96]
[89 95]
[90 94]
[111 137]
[112 136]
[113 134]
[114 133]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
