%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGGGCCUCGCCCACACCAAACCUGUGGACGCCGACCCGGGACCGCCGCUGGCUGGCUGCUGGCUCACUCGACCGUC\
) } def
/len { sequence length } bind def

/coor [
[163.56356812 135.92787170]
[149.70538330 130.18760681]
[135.84718323 124.44736481]
[128.26242065 124.80728912]
[121.56472778 118.20008087]
[107.94257355 111.92018890]
[94.00314331 113.00819397]
[85.77752686 101.70195770]
[72.15538025 95.42206573]
[58.53323364 89.14216614]
[44.17912674 84.78789520]
[29.36380196 82.44138336]
[14.52315235 87.92459869]
[3.16295457 78.29157257]
[-11.65237045 75.94506073]
[-26.46769524 73.59854126]
[-41.28302002 71.25202179]
[-56.09834671 68.90550995]
[-67.78068542 79.30054474]
[-83.41310120 79.70266724]
[-95.61443329 69.92200470]
[-98.62359619 54.57667923]
[-91.01974487 40.91229248]
[-76.39319611 35.38074493]
[-61.65015411 40.59386826]
[-53.75182724 54.09017944]
[-38.93650436 56.43669891]
[-24.12117958 58.78321457]
[-9.30585384 61.12973022]
[5.50947142 63.47624969]
[19.29043007 57.82519150]
[31.71031952 67.62605286]
[46.52564240 69.97257233]
[39.31132889 56.82138824]
[41.91658020 42.04936600]
[53.19450378 32.15954971]
[68.18024445 31.50570107]
[80.27667999 40.37566757]
[84.15863037 54.86464310]
[78.11715698 68.59419250]
[64.81312561 75.52001953]
[78.43527222 81.79991913]
[92.05742645 88.07981110]
[105.99685669 86.99180603]
[114.22247314 98.29804230]
[127.84461975 104.57793427]
[141.58743286 110.58917236]
[155.44563293 116.32942200]
[169.30383301 122.06967163]
[184.19985962 123.83273315]
[199.01518250 121.48621368]
[213.83050537 119.13970184]
[228.64582825 116.79318237]
[243.46115112 114.44666290]
[258.27648926 112.10015106]
[268.83166504 100.01844025]
[284.85147095 100.88190460]
[294.04684448 114.02816772]
[289.36392212 129.37254333]
[274.39501953 135.14413452]
[260.62298584 126.91547394]
[245.80766296 129.26199341]
[230.99234009 131.60850525]
[216.17701721 133.95501709]
[201.36169434 136.30154419]
[186.54637146 138.64805603]
[198.90220642 147.15296936]
[207.22810364 159.63011169]
[210.33924866 174.30392456]
[207.79290771 189.08621216]
[199.95143127 201.87336731]
[187.93070984 210.84567261]
[173.44139099 214.72633362]
[158.54537964 212.96307373]
[145.36250305 205.80685425]
[135.76875305 194.27601624]
[131.12939453 180.01150513]
[132.10464478 165.04324341]
[138.55570984 151.50131226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[5 46]
[6 45]
[8 43]
[9 42]
[10 41]
[11 33]
[12 32]
[14 30]
[15 29]
[16 28]
[17 27]
[18 26]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
