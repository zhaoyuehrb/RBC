%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUAGCGCCAGCGCGCUGUGACGUAAUGUGAGGGGUCUCCCGGCAGGGCUGAGCUGGACCA\
) } def
/len { sequence length } bind def

/coor [
[102.59560394 201.26467896]
[101.10208893 186.33921814]
[92.13600922 174.44558716]
[98.46080780 159.94360352]
[96.96728516 145.01814270]
[95.47377014 130.09268188]
[93.98025513 115.16721344]
[85.28884888 107.06142426]
[84.40070343 95.21002960]
[91.78693390 85.89938354]
[91.03924561 70.91802979]
[90.29155731 55.93667984]
[89.54386902 40.95532608]
[76.43088531 29.65897179]
[75.37454987 12.71673870]
[86.53684998 0.37263963]
[85.04332733 -14.55282211]
[83.54981232 -29.47828293]
[82.05629730 -44.40374374]
[69.43273163 -59.77875900]
[77.19182587 -77.23109436]
[74.21963501 -91.93367767]
[71.24744415 -106.63626862]
[56.44367218 -110.35260773]
[44.72389603 -120.13062286]
[38.41508102 -134.02888489]
[38.76984787 -149.28787231]
[45.71775818 -162.87791443]
[57.87929916 -172.10070801]
[72.83979034 -175.12503052]
[87.62880707 -171.35041809]
[99.30998993 -161.52633667]
[105.56402588 -147.60333252]
[105.14916992 -132.34585571]
[98.14779663 -118.78327942]
[85.95002747 -109.60845947]
[88.92221832 -94.90587616]
[91.89440918 -80.20328522]
[101.25859833 -75.06018829]
[106.15741730 -65.31411743]
[104.63713837 -54.28603363]
[96.98175812 -45.89726257]
[98.47527313 -30.97180176]
[99.96879578 -16.04633904]
[101.46231079 -1.12087810]
[112.63921356 5.72248459]
[117.79974365 17.98316956]
[114.79317474 31.14349747]
[104.52522278 40.20763779]
[105.27291107 55.18899155]
[106.02059937 70.17034149]
[106.76828766 85.15169525]
[116.27251434 98.78054047]
[108.90571594 113.67369843]
[110.39923096 128.59916687]
[111.89275360 143.52462769]
[113.38626862 158.45008850]
[122.45917511 171.41128540]
[116.02754974 184.84570312]
[117.52106476 199.77116394]
[125.11442566 214.92956543]
[112.65047455 226.42243958]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[4 57]
[5 56]
[6 55]
[7 54]
[10 52]
[11 51]
[12 50]
[13 49]
[16 45]
[17 44]
[18 43]
[19 42]
[21 38]
[22 37]
[23 36]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
