%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCGGCUCUAGGGCCGGCGCGGUGACGUGCGCGUGCGCGCACUGGAGGGAAAAGGCGGAAGCGGAAGUCGGGGGGCGCGCCAGCUCGUAGCAGGGGAGCGCCCGCGGCGUCGGGUUUGGGCUGGAGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[141.27510071 462.86968994]
[139.54644775 447.96963501]
[137.81781006 433.06958008]
[136.08915710 418.16952515]
[132.15832520 411.83096313]
[134.49676514 402.90585327]
[133.11274719 387.96984863]
[131.72871399 373.03384399]
[130.34469604 358.09780884]
[126.56131744 351.67016602]
[129.10528564 342.80145264]
[128.06661987 327.83746338]
[127.02794647 312.87347412]
[125.98928070 297.90948486]
[124.95061493 282.94546509]
[116.35059357 270.78451538]
[123.11373901 256.48171997]
[122.07507324 241.51771545]
[121.03640747 226.55371094]
[119.99774170 211.58972168]
[118.95907593 196.62571716]
[117.92041016 181.66172791]
[116.88174438 166.69773865]
[108.28172302 154.53677368]
[115.04486847 140.23396301]
[114.00620270 125.26996613]
[100.53089142 130.87815857]
[85.06143951 129.28320312]
[71.42656708 119.97689819]
[63.41545105 104.45704651]
[48.61112595 102.04210663]
[33.80680084 99.62717438]
[19.00247383 97.21223450]
[4.19814730 94.79729462]
[-10.60617924 92.38235474]
[-25.74316788 98.69136810]
[-38.60940552 88.52318573]
[-35.96921158 72.33795929]
[-20.53858757 66.78566742]
[-8.19124031 77.57803345]
[6.61308527 79.99296570]
[21.41741180 82.40790558]
[36.22173691 84.82284546]
[51.02606583 87.23778534]
[65.83039093 89.65272522]
[70.81875610 84.05216980]
[56.12996674 81.01251221]
[51.41809464 66.77178955]
[61.39506912 55.57089615]
[76.08379364 58.61087036]
[80.79548645 72.85105896]
[85.78385162 67.25050354]
[81.67890930 52.82312012]
[65.64109039 48.97951508]
[53.77965164 37.65639114]
[49.24786758 21.99403954]
[53.18490601 6.26816177]
[64.43125153 -5.27730036]
[59.99416351 -19.60601997]
[47.59943008 -30.34392929]
[50.96664047 -46.39366150]
[66.63188934 -51.24462891]
[78.48011780 -39.90657425]
[74.32288361 -24.04311180]
[78.75997162 -9.71439171]
[92.29424286 -7.55837154]
[103.62262726 0.27203855]
[110.48807526 12.28640556]
[111.49269867 26.15401459]
[106.38204193 39.15595245]
[96.10629272 48.71817398]
[100.21123505 63.14555740]
[112.90436554 67.61180878]
[122.46958923 76.00448608]
[127.87763977 86.71165466]
[128.81835938 97.93920135]
[141.92269897 90.64012909]
[155.02703857 83.34106445]
[168.13136292 76.04199982]
[181.23570251 68.74292755]
[194.34004211 61.44386292]
[202.63117981 47.96915817]
[217.51501465 48.53549194]
[230.61935425 41.23642349]
[240.06750488 23.49645233]
[259.32943726 24.40937042]
[272.08270264 16.51288795]
[284.83596802 8.61640549]
[295.11965942 -4.86252451]
[310.91864014 1.28795874]
[309.38214111 18.17213631]
[292.73245239 21.36966324]
[279.97918701 29.26614571]
[267.22592163 37.16262817]
[265.76004028 47.38583374]
[258.72586060 55.24651337]
[248.30033875 57.94538116]
[237.91841125 54.34075928]
[224.81407166 61.63982773]
[217.46025085 74.59245300]
[201.63911438 74.54820251]
[188.53477478 81.84726715]
[175.43043518 89.14633179]
[162.32609558 96.44540405]
[149.22177124 103.74446869]
[136.11743164 111.04353333]
[128.97019958 124.23130035]
[130.00886536 139.19529724]
[138.68318176 152.42657471]
[131.84574890 165.65907288]
[132.88441467 180.62306213]
[133.92308044 195.58705139]
[134.96174622 210.55105591]
[136.00041199 225.51504517]
[137.03907776 240.47904968]
[138.07774353 255.44303894]
[146.75204468 268.67431641]
[139.91461182 281.90679932]
[140.95327759 296.87081909]
[141.99194336 311.83480835]
[143.03060913 326.79879761]
[144.06927490 341.76278687]
[145.28070068 356.71380615]
[146.66473389 371.64981079]
[148.04875183 386.58581543]
[149.43278503 401.52185059]
[150.98921204 416.44085693]
[152.71786499 431.34094238]
[154.44651794 446.24099731]
[156.17515564 461.14105225]
[168.71795654 470.75631714]
[170.70516968 486.43518066]
[160.95782471 498.87564087]
[145.25883484 500.69696045]
[132.92213440 490.81863403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 130]
[2 129]
[3 128]
[4 127]
[6 126]
[7 125]
[8 124]
[9 123]
[11 122]
[12 121]
[13 120]
[14 119]
[15 118]
[17 116]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[25 108]
[26 107]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[52 72]
[53 71]
[58 65]
[59 64]
[76 106]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[83 99]
[84 98]
[86 94]
[87 93]
[88 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
