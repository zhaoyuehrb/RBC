%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUUGUAAAGAUAUUGAUUCCAGAUAAUGUUUGCCUUUCUAACUCUCUCUUCCUUAGACUUGAUGGAUAGGUUCAGGGCUACAUCUCGGCAGCCAACUCACCGCAGCUACCCAGGGAAAGAGGAAUGGAAAACGAGCUCGGAAGAUAUAAGUUACAACCCCCAGAAGUCUAGCCUAGCGCUAUUGG\
) } def
/len { sequence length } bind def

/coor [
[221.33415222 392.94500732]
[215.05143738 379.32415771]
[203.80418396 374.83941650]
[198.46351624 363.52728271]
[202.39094543 351.22860718]
[196.33547974 337.50521851]
[190.28002930 323.78182983]
[184.22456360 310.05844116]
[178.16909790 296.33505249]
[172.11364746 282.61166382]
[156.19381714 277.21618652]
[148.95108032 261.67410278]
[155.30364990 245.38461304]
[149.02091980 231.76377869]
[142.73818970 218.14292908]
[136.45547485 204.52209473]
[130.17274475 190.90124512]
[126.06392670 188.43316650]
[123.47196198 183.34886169]
[123.91597748 176.72164917]
[118.08945465 162.89950562]
[112.26293945 149.07736206]
[106.43641663 135.25521851]
[100.93068695 130.30346680]
[100.63003540 121.15458679]
[95.03405762 107.23751068]
[92.31992340 105.80519867]
[90.07157898 103.34615326]
[88.67302704 100.03274536]
[88.43852997 96.17776489]
[89.56271362 92.20510864]
[84.90375519 77.94698334]
[80.24478912 63.68885803]
[75.58583069 49.43073654]
[70.92686462 35.17261124]
[59.78963089 28.64235687]
[56.20914841 16.65624046]
[61.58464813 5.80646133]
[57.16332245 -8.52713108]
[52.74199295 -22.86072350]
[48.32066727 -37.19431686]
[43.89933777 -51.52790833]
[39.47801208 -65.86149597]
[25.78592682 -73.28878784]
[21.50625801 -87.88806915]
[28.67141914 -100.89560699]
[24.25009155 -115.22920227]
[19.82876396 -129.56278992]
[15.40743637 -143.89637756]
[10.98610878 -158.22998047]
[-0.47511679 -169.13642883]
[3.16700768 -183.57887268]
[-1.25431991 -197.91247559]
[-5.67564774 -212.24606323]
[-10.09697533 -226.57965088]
[-14.51830292 -240.91325378]
[-19.29560280 -255.13215637]
[-24.42590523 -269.22753906]
[-29.55620766 -283.32293701]
[-34.38933563 -287.87902832]
[-35.94750595 -293.36904907]
[-34.61425018 -297.97299194]
[-39.27320862 -312.23110962]
[-43.93217087 -326.48922729]
[-49.58264160 -333.69094849]
[-48.54794312 -341.02322388]
[-52.96926880 -355.35681152]
[-57.39059830 -369.69039917]
[-69.95386505 -374.57757568]
[-77.29627228 -385.64996338]
[-76.92040253 -398.73550415]
[-69.18791962 -409.05642700]
[-73.37039185 -423.46151733]
[-77.55286407 -437.86660767]
[-81.73533630 -452.27172852]
[-85.53211212 -455.90872192]
[-87.35854340 -460.21060181]
[-87.29290009 -464.31054688]
[-85.74794769 -467.49984741]
[-89.20718384 -482.09552002]
[-92.66642761 -496.69119263]
[-96.12566376 -511.28686523]
[-110.86212921 -515.61492920]
[-121.44863892 -526.74243164]
[-125.03747559 -541.67614746]
[-120.66324615 -556.39898682]
[-109.50261688 -566.95056152]
[-94.55772400 -570.49255371]
[-79.84867859 -566.07220459]
[-69.33213043 -554.87854004]
[-65.83699036 -539.92260742]
[-70.30342865 -525.22747803]
[-81.52999115 -514.74609375]
[-78.07074738 -500.15042114]
[-74.61151123 -485.55474854]
[-71.15227509 -470.95907593]
[-67.33023071 -456.45419312]
[-63.14775848 -442.04910278]
[-58.96528625 -427.64398193]
[-54.78281403 -413.23889160]
[-39.71890259 -405.78030396]
[-34.60075760 -389.41516113]
[-43.05700684 -374.11172485]
[-38.63567734 -359.77813721]
[-34.21435165 -345.44454956]
[-29.67404938 -331.14819336]
[-25.01508713 -316.89007568]
[-20.35612488 -302.63195801]
[-15.46081734 -288.45324707]
[-10.33051491 -274.35784912]
[-5.20021343 -260.26245117]
[-2.15687037 -258.44680786]
[0.15092412 -255.05741882]
[0.98888248 -250.45960999]
[-0.18471068 -245.33457947]
[4.23661709 -231.00097656]
[8.65794468 -216.66738892]
[13.07927227 -202.33380127]
[17.50059891 -188.00021362]
[28.64558220 -178.11898804]
[25.31970215 -162.65130615]
[29.74102974 -148.31771851]
[34.16235733 -133.98411560]
[38.58368301 -119.65052795]
[43.00501251 -105.31693268]
[56.25255203 -98.60588074]
[60.94059372 -84.13256073]
[53.81160355 -70.28282928]
[58.23292923 -55.94923401]
[62.65425873 -41.61564255]
[67.07558441 -27.28205109]
[71.49691010 -12.94845867]
[75.91824341 1.38513350]
[89.40657806 12.59891891]
[85.18498993 30.51365089]
[89.84395599 44.77177429]
[94.50291443 59.02989578]
[99.16187286 73.28801727]
[103.82083893 87.54614258]
[108.95114136 101.64153290]
[114.54711151 115.55860901]
[120.25856018 129.42869568]
[126.08508301 143.25083923]
[131.91160583 157.07298279]
[137.73812866 170.89512634]
[143.79357910 184.61851501]
[150.07630920 198.23936462]
[156.35903931 211.86019897]
[162.64176941 225.48104858]
[168.92448425 239.10188293]
[182.02481079 242.28019714]
[190.77044678 252.28132629]
[192.13284302 265.30117798]
[185.83703613 276.55618286]
[191.89248657 290.27957153]
[197.94795227 304.00296021]
[204.00341797 317.72634888]
[210.05886841 331.44973755]
[216.11433411 345.17312622]
[231.22143555 355.68670654]
[228.67227173 373.04141235]
[234.95500183 386.66226196]
[241.35070801 400.23043823]
[247.85896301 413.74496460]
[254.36723328 427.25949097]
[260.87548828 440.77401733]
[273.83422852 449.85046387]
[272.38531494 464.67443848]
[278.89355469 478.18896484]
[285.40182495 491.70349121]
[292.02218628 505.16345215]
[298.75415039 518.56793213]
[305.48614502 531.97247314]
[317.99795532 543.41320801]
[310.46789551 558.60314941]
[293.78704834 555.57238770]
[292.08166504 538.70440674]
[285.34967041 525.29992676]
[278.61767578 511.89544678]
[272.79513550 507.32043457]
[271.88729858 498.21176147]
[265.37902832 484.69720459]
[258.87078857 471.18267822]
[246.37754822 463.07290649]
[247.36094666 447.28228760]
[240.85269165 433.76776123]
[234.34443665 420.25320435]
[227.83618164 406.73867798]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[5 159]
[6 158]
[7 157]
[8 156]
[9 155]
[10 154]
[13 150]
[14 149]
[15 148]
[16 147]
[17 146]
[20 145]
[21 144]
[22 143]
[23 142]
[25 141]
[26 140]
[31 139]
[32 138]
[33 137]
[34 136]
[35 135]
[38 133]
[39 132]
[40 131]
[41 130]
[42 129]
[43 128]
[46 125]
[47 124]
[48 123]
[49 122]
[50 121]
[52 119]
[53 118]
[54 117]
[55 116]
[56 115]
[57 111]
[58 110]
[59 109]
[62 108]
[63 107]
[64 106]
[66 105]
[67 104]
[68 103]
[72 100]
[73 99]
[74 98]
[75 97]
[79 96]
[80 95]
[81 94]
[82 93]
[163 188]
[164 187]
[165 186]
[166 185]
[168 183]
[169 182]
[170 181]
[171 179]
[172 178]
[173 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
