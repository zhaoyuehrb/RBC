%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGAAAGCAGUGAUAUAACUCUAGGUAAAUGCUAUGUCUACUAAUUAUAGUUUCUUAAUUUUCAUAGCUAUAUUAUGAAAAGAGUAAAUUGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[67.47881317 418.31192017]
[52.80217743 421.62747192]
[37.76328659 422.10528564]
[22.90579033 419.72802734]
[8.76677132 414.58172607]
[-4.14265013 406.85232544]
[-15.35580635 396.81930542]
[-24.46735001 384.84533691]
[-31.14790344 371.36322021]
[-35.15597153 356.86041260]
[-36.34666061 341.86111450]
[-34.67692947 326.90756226]
[-30.20714188 312.54034424]
[-23.09887314 299.27877808]
[-13.60908413 287.60229492]
[-2.08082485 277.93295288]
[11.06916523 270.62036133]
[25.36552238 265.92880249]
[40.29144287 264.02789307]
[55.30736160 264.98635864]
[59.07458115 250.46713257]
[62.84180069 235.94790649]
[66.60902405 221.42868042]
[70.37624359 206.90945435]
[60.13805008 191.89828491]
[64.00723267 173.82327271]
[80.02896118 163.98971558]
[82.86772919 149.26078796]
[85.70649719 134.53186035]
[88.54527283 119.80292511]
[77.79500580 105.50498962]
[80.62141418 87.84116364]
[95.29636383 77.61154938]
[97.19525146 62.73222733]
[99.09413910 47.85290527]
[100.99302673 32.97358322]
[102.89191437 18.09426308]
[104.79080200 3.21494031]
[96.55338287 -2.65757942]
[91.14424896 -11.13684368]
[89.31265259 -20.96659279]
[91.28164673 -30.70983315]
[96.72191620 -38.95889282]
[104.80590820 -44.53879547]
[114.33346558 -46.67456055]
[118.10068512 -61.19379044]
[121.86790466 -75.71302032]
[125.63512421 -90.23225403]
[129.40234375 -104.75148010]
[119.43816376 -116.64663696]
[118.40235901 -132.12910461]
[126.69322205 -145.24555969]
[141.12274170 -150.95243835]
[156.14247131 -147.05535889]
[165.97702026 -135.05281067]
[166.84481812 -119.56002045]
[158.41215515 -106.53428650]
[143.92156982 -100.98426056]
[140.15435791 -86.46503448]
[136.38713074 -71.94580078]
[132.61991882 -57.42657089]
[128.85269165 -42.90734100]
[140.79623413 -26.52551460]
[137.10504150 -6.30278444]
[119.67012024 5.11382723]
[117.77124023 19.99314880]
[115.87235260 34.87247086]
[113.97346497 49.75179291]
[112.07457733 64.63111877]
[110.17568970 79.51043701]
[118.84975433 87.03646088]
[122.77397156 97.82909393]
[120.95950317 109.16876221]
[113.86354828 118.19804382]
[103.27420044 122.64169312]
[100.43543243 137.37062073]
[97.59666443 152.09956360]
[94.75789642 166.82849121]
[103.34999847 175.35845947]
[106.63919830 186.88449097]
[103.89883423 198.42880249]
[95.94432831 207.06875610]
[84.89546967 210.67666626]
[81.12825012 225.19589233]
[77.36103058 239.71513367]
[73.59381104 254.23435974]
[69.82659149 268.75360107]
[83.41424561 275.21673584]
[95.53304291 284.13476562]
[105.74488831 295.18530273]
[113.68062592 307.96890259]
[119.05339813 322.02343750]
[121.66897583 336.84085083]
[121.43280029 351.88546753]
[118.35342407 366.61346436]
[112.54214478 380.49243164]
[104.20906067 393.02062988]
[93.65538788 403.74520874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[27 78]
[28 77]
[29 76]
[30 75]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
