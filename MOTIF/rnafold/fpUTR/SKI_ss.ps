%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCGGCGGCGGGGGCCGGGGGGGCCCGGGCGCGCGGGAGCGGGAGCGGCCGGGGGAGCCGGAGCGCACC\
) } def
/len { sequence length } bind def

/coor [
[89.52518463 104.01908875]
[75.51762390 98.65361786]
[64.38729095 109.04000854]
[49.91015625 113.54550934]
[34.97358704 111.32762146]
[22.53229332 102.87923431]
[15.02385044 89.92034912]
[13.89117432 75.04814148]
[-0.11638430 69.68267059]
[-14.12394238 64.31719208]
[-28.24370193 59.25434875]
[-42.46912766 54.49647903]
[-56.48301315 61.29712677]
[-70.84183502 56.26932144]
[-77.23884583 42.86731720]
[-91.46427155 38.10944748]
[-105.68969727 33.35157776]
[-119.91512299 28.59370804]
[-134.14054871 23.83583832]
[-149.08111572 29.68039131]
[-162.89312744 21.51902008]
[-164.98117065 5.61242962]
[-153.74349976 -5.83720398]
[-137.80067444 -4.04670238]
[-129.38267517 9.61041451]
[-115.15724945 14.36828423]
[-100.93182373 19.12615395]
[-86.70640564 23.88402176]
[-72.48097992 28.64189148]
[-59.30820847 21.78524208]
[-44.81382751 26.40775108]
[-37.71125793 40.27105713]
[-23.48583221 45.02892685]
[-15.91341686 44.13529968]
[-8.75846958 50.30963516]
[5.24908924 55.67510986]
[19.25664711 61.04058075]
[30.03506088 50.73081589]
[44.27948380 46.10417557]
[59.18116379 48.12927628]
[71.77721405 56.45751953]
[79.53974915 69.48173523]
[80.88309479 84.64605713]
[94.89065552 90.01152802]
[109.01041412 95.07437134]
[123.23583984 99.83224487]
[138.77760315 96.87178040]
[148.39344788 108.24652100]
[162.61886597 113.00438690]
[176.84429932 117.76226044]
[194.62803650 113.57619476]
[205.91813660 126.83680725]
[220.33508301 130.97825623]
[234.75202942 135.11972046]
[249.16897583 139.26116943]
[263.84426880 132.77925110]
[277.99462891 140.33885193]
[280.76507568 156.14086914]
[270.03039551 168.06336975]
[254.02528381 166.96043396]
[245.02752686 153.67811584]
[230.61058044 149.53666687]
[216.19363403 145.39520264]
[201.77668762 141.25375366]
[190.85023499 146.87664795]
[178.66748047 143.31271362]
[172.08642578 131.98768616]
[157.86100769 127.22981262]
[143.63557434 122.47193909]
[129.11131287 125.77272034]
[118.47796631 114.05767059]
[104.25254822 109.29979706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[8 37]
[9 36]
[10 35]
[11 33]
[12 32]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[45 72]
[46 71]
[48 69]
[49 68]
[50 67]
[52 64]
[53 63]
[54 62]
[55 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
