%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAGUCUGCAGUGCGGAGGGGGCGGGAAGUCCAGGCCCCGCACUCGAUCCACGCUGGCUCCCUACGGAGGCCCACCUACUCGAGGCCCACCGACUCCUACUGCAAUCAGUACUAUGCGAUCGUCCUAGAGAGUCCAUUCAGCUGCACUUCCGCCUCAGU\
) } def
/len { sequence length } bind def

/coor [
[105.35427856 246.95765686]
[101.89504242 261.55331421]
[98.43580627 276.14898682]
[94.97656250 290.74465942]
[97.20716858 307.55123901]
[81.67490387 314.34719849]
[70.84477997 301.30322266]
[80.38088989 287.28543091]
[83.84013367 272.68975830]
[87.29936981 258.09408569]
[90.75860596 243.49841309]
[92.50000000 228.59983826]
[92.50000000 213.59983826]
[92.50000000 198.59983826]
[92.50000000 183.59983826]
[92.50000000 168.59983826]
[92.50000000 153.59983826]
[92.50000000 138.59983826]
[77.08328247 133.78451538]
[64.38098145 122.86347198]
[56.77887344 107.26514435]
[42.78561783 112.66780853]
[28.79236412 118.07047272]
[14.79910851 123.47314453]
[0.80585301 128.87580872]
[-10.38846874 143.46795654]
[-27.59780121 140.14074707]
[-41.48366165 145.81373596]
[-51.09664917 159.09991455]
[-67.37933350 157.14898682]
[-73.58148956 141.96791077]
[-63.32286835 129.17366028]
[-47.15665817 131.92788696]
[-33.27079773 126.25488281]
[-28.27942848 115.20231628]
[-16.71691132 110.37739563]
[-4.59681273 114.88255310]
[9.39644241 109.47988892]
[23.38969803 104.07721710]
[37.38295364 98.67455292]
[51.37620926 93.27188873]
[55.67825699 78.90204620]
[46.95587540 66.69876099]
[39.38114548 61.50411606]
[38.18538666 54.17320633]
[29.70128250 41.80308151]
[21.21718025 29.43295670]
[12.73307705 17.06282997]
[4.24897385 4.69270563]
[-9.56513214 8.58967972]
[-23.88571548 8.02345848]
[-37.30871201 3.06285906]
[-48.52218246 -5.79311037]
[-56.43451691 -17.66541100]
[-60.28072739 -31.38221741]
[-59.69636154 -45.59457016]
[-54.75201416 -58.90904617]
[-45.94509125 -70.02436066]
[-54.18772507 -82.55667877]
[-62.43035889 -95.08898926]
[-70.79412079 -107.54080200]
[-79.27822876 -119.91092682]
[-87.76232910 -132.28105164]
[-102.78246307 -138.86341858]
[-104.32286835 -155.19004822]
[-90.79890442 -164.46553040]
[-76.12286377 -157.14801025]
[-75.39220428 -140.76515198]
[-66.90810394 -128.39503479]
[-58.42399597 -116.02490234]
[-52.01580048 -112.26896667]
[-49.89804459 -103.33162689]
[-41.65540695 -90.79930878]
[-33.41277313 -78.26699066]
[-18.16273880 -82.08998108]
[-2.49799418 -80.46587372]
[11.69156456 -73.57218933]
[22.68772697 -62.22331619]
[29.15201569 -47.77434158]
[30.28859901 -31.95925903]
[25.94221497 -16.68287468]
[16.61909866 -3.79139733]
[25.10320282 8.57872772]
[33.58730698 20.94885254]
[42.07140732 33.31897736]
[50.55551147 45.68910217]
[59.15915680 57.97638321]
[67.88153839 70.17966461]
[79.43856049 62.14747238]
[92.72547150 58.30426788]
[106.30117035 58.90568924]
[118.74378204 63.73376083]
[128.79951477 72.13591766]
[135.50888062 83.10868835]
[150.03472900 79.36707306]
[164.56059265 75.62545013]
[179.08644104 71.88383484]
[193.61228943 68.14221954]
[208.10116577 64.25993347]
[222.55172729 60.23734283]
[237.00230408 56.21475601]
[244.80599976 42.73366165]
[259.51824951 38.86003876]
[272.32229614 46.38275909]
[286.77285767 42.36016846]
[297.99261475 31.20545197]
[312.32864380 35.24623489]
[326.77920532 31.22364616]
[341.22976685 27.20105743]
[348.70184326 21.85981560]
[355.99963379 23.24348450]
[370.52548218 19.50186729]
[385.05133057 15.76025105]
[398.88156128 5.95410490]
[412.13308716 16.52925301]
[405.63958740 32.19038391]
[388.79293823 30.28610039]
[374.26708984 34.02771759]
[359.74124146 37.76933289]
[345.25234985 41.65161896]
[330.80178833 45.67420959]
[316.35122681 49.69680023]
[306.16506958 60.56379318]
[290.79547119 56.81073380]
[276.34490967 60.83332062]
[269.26947021 73.88988495]
[254.67182922 78.17521667]
[241.02488708 70.66532135]
[226.57432556 74.68790436]
[212.12376404 78.71049500]
[206.49554443 83.55767822]
[197.35389709 82.66806793]
[182.82804871 86.40968323]
[168.30220032 90.15130615]
[153.77635193 93.89292145]
[139.25050354 97.63453674]
[139.04039001 104.69525909]
[137.57038879 111.60446167]
[134.88793945 118.13917542]
[131.07958984 124.08850861]
[126.26828003 129.26046753]
[120.60924530 133.48815918]
[114.28512573 136.63513184]
[107.50000000 138.59983826]
[107.50000000 153.59983826]
[107.50000000 168.59983826]
[107.50000000 183.59983826]
[107.50000000 198.59983826]
[107.50000000 213.59983826]
[107.50000000 228.59983826]
[116.09402466 216.30583191]
[129.11578369 208.86042786]
[144.07006836 207.69032288]
[158.09140015 213.01969910]
[168.49302673 223.82739258]
[173.28184509 238.04241943]
[171.54020691 252.94097900]
[163.60185242 265.66821289]
[150.98791504 273.78536987]
[136.11543274 275.73709106]
[121.83422852 271.14935303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[12 150]
[13 149]
[14 148]
[15 147]
[16 146]
[17 145]
[18 144]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[27 34]
[28 33]
[42 88]
[43 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[58 74]
[59 73]
[60 72]
[61 70]
[62 69]
[63 68]
[94 136]
[95 135]
[96 134]
[97 133]
[98 132]
[99 130]
[100 129]
[101 128]
[104 125]
[105 124]
[107 122]
[108 121]
[109 120]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
