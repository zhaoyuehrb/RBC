%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCGUUAGGGAGCCCAAUGGGCGUCGCCGCCAGGCCCCGUUGCAGAGCGCGUCUAGCCAAUAGGCAGCGGCGGCGGGCGGGCGCGGGCGACAGGCGGCGCAGCUGAGGCGGAGCAGGCGCUGCGGCAGGAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[85.31433868 217.94897461]
[77.56279755 204.36782837]
[80.40541840 188.99078369]
[92.50000000 179.07839966]
[92.50000000 164.07839966]
[84.76270294 151.35113525]
[92.50000000 137.55096436]
[92.50000000 122.55096436]
[85.68096161 119.42834473]
[83.95575714 134.32879639]
[69.25145721 137.29251099]
[61.88895035 124.22370911]
[72.04289246 113.18310547]
[65.22385406 110.06048584]
[53.86745453 119.86008453]
[42.51105118 129.65968323]
[31.15464973 139.45927429]
[23.11306000 154.38473511]
[6.54476452 150.78918457]
[5.41323471 133.87304688]
[21.35505295 128.10287476]
[32.71145630 118.30327606]
[44.06785583 108.50367737]
[55.42425919 98.70407867]
[58.28824234 83.98003387]
[51.43311310 70.63809967]
[44.57798767 57.29616547]
[37.72285843 43.95423126]
[30.86772919 30.61229515]
[24.01259995 17.27036095]
[16.70917702 4.16845226]
[8.96585464 -8.67837429]
[1.22253239 -21.52520180]
[-11.13521385 -25.40740395]
[-17.30660820 -36.33660507]
[-14.43736076 -48.14223099]
[-21.88837433 -61.16077042]
[-29.33938789 -74.17931366]
[-36.79040146 -87.19785309]
[-43.82942581 -93.15393066]
[-44.25888824 -100.59587860]
[-51.41378784 -113.77947998]
[-58.56868362 -126.96308136]
[-65.72357941 -140.14668274]
[-72.87847900 -153.33029175]
[-76.83535767 -155.54776001]
[-79.55790710 -158.62599182]
[-80.92607880 -162.05296326]
[-81.00496674 -165.33206177]
[-80.02246094 -168.04321289]
[-85.95789337 -181.81893921]
[-91.89332581 -195.59466553]
[-97.98404694 -209.30244446]
[-104.22928619 -222.94050598]
[-110.47452545 -236.57858276]
[-116.71976471 -250.21664429]
[-122.96500397 -263.85473633]
[-137.44067383 -270.77096558]
[-140.91824341 -286.43258667]
[-130.73001099 -298.82531738]
[-114.69152832 -298.44250488]
[-105.10614014 -285.57781982]
[-109.32693481 -270.09997559]
[-103.08169556 -256.46188354]
[-96.83645630 -242.82382202]
[-90.59121704 -229.18574524]
[-84.34597778 -215.54768372]
[-78.65316772 -210.73530579]
[-78.11759949 -201.53009033]
[-72.18216705 -187.75436401]
[-66.24673462 -173.97863770]
[-59.69487762 -160.48519897]
[-52.53997803 -147.30158997]
[-45.38507843 -134.11798096]
[-38.23018265 -120.93437958]
[-31.07528305 -107.75077057]
[-23.77186012 -94.64886475]
[-16.32084656 -81.63032532]
[-8.86983395 -68.61178589]
[-1.41882026 -55.59324265]
[14.18575478 -47.64325333]
[14.06935883 -29.26852417]
[21.81268120 -16.42169762]
[29.55600357 -3.57487011]
[32.95956421 -2.38415551]
[35.93115997 0.56278139]
[37.62925339 5.03265953]
[37.35453415 10.41523266]
[44.20966339 23.75716782]
[51.06479263 37.09910202]
[57.91992188 50.44103622]
[64.77504730 63.78297043]
[71.63018036 77.12490082]
[94.12071991 63.84252167]
[119.86479187 68.99672699]
[135.67012024 90.13029480]
[150.07546997 94.31190491]
[164.48081970 98.49351501]
[178.88616943 102.67512512]
[193.29151917 106.85673523]
[207.69686890 111.03834534]
[222.10221863 115.21995544]
[239.82984924 110.38517761]
[251.52317810 123.42247772]
[266.01934814 127.27747345]
[280.51553345 131.13246155]
[293.20324707 121.99158478]
[308.79437256 123.19633484]
[319.92721558 134.17785645]
[321.34518433 149.75102234]
[312.37878418 162.56265259]
[297.26168823 166.56347656]
[283.13168335 159.86445618]
[276.66055298 145.62863159]
[262.16436768 141.77365112]
[247.66819763 137.91865540]
[236.99649048 143.72557068]
[224.84834290 140.57025146]
[217.92060852 129.62530518]
[203.51525879 125.44370270]
[189.10990906 121.26208496]
[174.70455933 117.08047485]
[160.29920959 112.89886475]
[145.89385986 108.71725464]
[131.48851013 104.53564453]
[125.49137878 109.03947449]
[137.76458740 117.66318512]
[133.35556030 132.00056458]
[118.35742950 132.23779297]
[113.49712372 118.04713440]
[107.50000000 122.55096436]
[107.50000000 137.55096436]
[115.23729706 151.35113525]
[107.50000000 164.07839966]
[107.50000000 179.07839966]
[119.59458160 188.99078369]
[122.43720245 204.36782837]
[114.68566132 217.94897461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 135]
[5 134]
[7 132]
[8 131]
[14 24]
[15 23]
[16 22]
[17 21]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 84]
[32 83]
[33 82]
[36 80]
[37 79]
[38 78]
[39 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[50 71]
[51 70]
[52 69]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[96 125]
[97 124]
[98 123]
[99 122]
[100 121]
[101 120]
[102 119]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
