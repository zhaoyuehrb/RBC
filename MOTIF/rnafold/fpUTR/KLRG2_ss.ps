%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGCGAAGCUCCUCUGCACUGGGCCCAGGUGCGCUCCUCAGCGUCUCCGGGUGGCGGGGCGCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[74.26657104 345.91561890]
[62.15585327 336.21456909]
[58.09268570 321.23892212]
[63.63943863 306.74710083]
[76.66327667 298.31149292]
[77.33624268 283.32659912]
[78.00921631 268.34170532]
[69.99269867 259.01177979]
[70.63674164 246.32199097]
[80.14366913 237.29275513]
[81.48825836 222.35314941]
[82.83284760 207.41352844]
[84.17743683 192.47390747]
[85.52203369 177.53430176]
[78.95674133 164.16470337]
[87.89993286 151.11364746]
[89.24452209 136.17402649]
[90.58911133 121.23442078]
[91.93370056 106.29480743]
[89.40206909 98.33933258]
[93.68853760 90.72021484]
[95.70203400 75.85596466]
[97.71553040 60.99171829]
[99.72903442 46.12747192]
[97.62599945 42.00627899]
[96.99926758 37.83719635]
[97.68389893 34.08833313]
[99.38031006 31.12601852]
[101.69927979 29.17985916]
[104.21485901 28.32500648]
[109.48548126 14.28148365]
[109.60963440 4.81076813]
[115.32049561 -0.26499444]
[121.21587372 -14.05791092]
[127.11124420 -27.85082817]
[133.00662231 -41.64374542]
[138.90199280 -55.43666077]
[136.40788269 -71.64503479]
[149.36531067 -81.69676208]
[164.44477844 -75.25148773]
[166.13383484 -58.93955612]
[152.69491577 -49.54128647]
[146.79954529 -35.74836731]
[140.90415955 -21.95545197]
[135.00878906 -8.16253567]
[129.11341858 5.63038111]
[123.52900696 19.55210495]
[118.25838470 33.59563065]
[114.59327698 48.14097214]
[112.57978058 63.00521851]
[110.56628418 77.86946106]
[108.55278015 92.73371124]
[106.87331390 107.63939667]
[105.52872467 122.57901001]
[104.18413544 137.51861572]
[102.83954620 152.45823669]
[109.30866241 166.89642334]
[100.46164703 178.87889099]
[99.11705780 193.81851196]
[97.77246857 208.75811768]
[96.42787933 223.69773865]
[95.08328247 238.63734436]
[103.26586151 254.96150208]
[92.99411774 269.01467896]
[92.32114410 283.99957275]
[91.64817047 298.98446655]
[103.86341095 308.55355835]
[108.08879852 323.48425293]
[102.69957733 338.03540039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[7 64]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[16 56]
[17 55]
[18 54]
[19 53]
[21 52]
[22 51]
[23 50]
[24 49]
[30 48]
[31 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
