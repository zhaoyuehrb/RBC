%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAACCAAGGCUUGCUUCUGUGGGCAGCCUUCCAUCCCAUCUCCACCAUAUAAUAGCCGCCACCAUUCAGCAGAAUCCCAGCAGACUGUGCAGUGGGGCAAGGAUUUCAUGAGCAUCCUCCUCUAAACGCGUGUCAAGACAAAAG\
) } def
/len { sequence length } bind def

/coor [
[88.36252594 221.32322693]
[73.50324249 219.27340698]
[60.87162781 211.18376160]
[52.79426575 198.54429626]
[50.75889206 183.68302917]
[55.14039612 169.33721924]
[65.12983704 158.15055847]
[71.35177612 144.50184631]
[77.57371521 130.85313416]
[83.79565430 117.20441437]
[71.79184723 126.19932556]
[59.78803635 135.19424438]
[47.78422546 144.18916321]
[35.78041840 153.18408203]
[23.77660751 162.17900085]
[18.74181175 169.88356018]
[11.42356396 171.23384094]
[-0.76721680 179.97369385]
[-12.95799828 188.71353149]
[-25.14877892 197.45336914]
[-31.41695404 212.60731506]
[-47.70798111 214.48735046]
[-57.26304626 201.15945435]
[-50.25271606 186.33422852]
[-33.88862228 185.26258850]
[-21.69784164 176.52275085]
[-9.50706005 167.78291321]
[2.68372107 159.04306030]
[14.78168869 150.17518616]
[26.78549767 141.18026733]
[38.78930664 132.18534851]
[50.79311752 123.19043732]
[62.79692841 114.19551849]
[74.80073547 105.20059967]
[59.95401001 107.33945465]
[46.95290375 114.82084656]
[32.64508438 119.32487488]
[17.70283890 120.63990021]
[2.82826996 118.70413208]
[-11.27969933 113.60852814]
[-23.95816994 105.59251404]
[-34.61140442 95.03275299]
[-42.73883820 82.42542267]
[-47.95857620 68.36290741]
[-50.02536011 53.50597382]
[-48.84207153 38.55271912]
[-44.46430969 24.20576096]
[-37.09778214 11.13922977]
[-27.08861923 -0.03290833]
[-14.90713215 -8.78569984]
[-1.12569928 -14.70787144]
[13.60812092 -17.52115250]
[28.60201836 -17.09335518]
[43.15146637 -13.44457817]
[56.57281876 -6.74627113]
[68.23543549 2.68682790]
[77.59131622 14.41147995]
[84.20085907 27.87677002]
[87.75347900 42.44999313]
[88.08226013 57.44638824]
[85.16999817 72.16690063]
[87.91049957 86.91442871]
[92.57582855 72.65838623]
[97.24114990 58.40234375]
[96.94086456 49.20347214]
[102.15802765 43.89675140]
[107.12287140 29.74223709]
[112.08772278 15.58772182]
[117.05256653 1.43320680]
[122.01741028 -12.72130871]
[115.42189026 -26.83289337]
[120.65858459 -41.11685944]
[134.15246582 -47.31771851]
[139.11730957 -61.47223282]
[144.08215332 -75.62674713]
[149.04701233 -89.78126526]
[148.18557739 -96.44701385]
[150.51399231 -101.72474670]
[154.53105164 -104.42024994]
[160.08819580 -118.35288239]
[153.61877441 -132.77239990]
[159.31835938 -147.51316833]
[173.80546570 -153.82975769]
[188.48515320 -147.97465515]
[194.64822388 -133.42156982]
[188.63824463 -118.80461121]
[174.02082825 -112.79574585]
[168.46368408 -98.86311340]
[163.20152283 -84.81642151]
[158.23667908 -70.66190338]
[153.27183533 -56.50738907]
[148.30699158 -42.35287094]
[154.97077942 -29.08149338]
[150.13735962 -14.65607643]
[136.17192078 -7.75646257]
[131.20707703 6.39805269]
[126.24223328 20.55256844]
[121.27738953 34.70708466]
[116.31254578 48.86159897]
[111.49719238 63.06766891]
[106.83187103 77.32370758]
[102.16654205 91.57975006]
[113.66537476 77.08121490]
[132.76806641 69.63721466]
[147.74722290 70.42751312]
[162.72639465 71.21781921]
[177.70556641 72.00812531]
[192.68472290 72.79842377]
[201.61393738 60.21777725]
[215.93579102 54.48296356]
[231.08023071 57.42394257]
[242.21473694 68.10226440]
[245.78630066 83.11050415]
[240.65528870 97.65959930]
[228.45895386 107.10697937]
[213.08911133 108.43801880]
[199.45022583 101.22799683]
[191.89442444 87.77759552]
[176.91525269 86.98728943]
[161.93609619 86.19698334]
[146.95692444 85.40668488]
[131.97775269 84.61637878]
[128.48156738 91.25164032]
[121.48918915 104.52215576]
[117.99300385 111.15741730]
[127.11396027 123.06573486]
[136.23492432 134.97404480]
[151.65364075 137.18791199]
[160.73394775 149.39457703]
[158.52835083 164.08030701]
[167.64930725 175.98863220]
[182.99388123 181.77447510]
[185.38812256 197.99790955]
[172.36904907 207.96965027]
[157.32955933 201.43161011]
[155.74099731 185.10958862]
[146.62002563 173.20127869]
[131.86680603 171.50485229]
[122.44721222 159.55805969]
[124.32660675 144.09501648]
[115.20564270 132.18669128]
[106.08467865 120.27837372]
[108.37992859 135.10173035]
[110.67517853 149.92507935]
[112.97042084 164.74844360]
[119.55951691 178.22373962]
[119.89331818 193.22003174]
[113.91034698 206.97517395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 28]
[18 27]
[19 26]
[20 25]
[62 102]
[63 101]
[64 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[73 92]
[74 91]
[75 90]
[76 89]
[79 88]
[80 87]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[125 142]
[126 141]
[127 140]
[130 137]
[131 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
