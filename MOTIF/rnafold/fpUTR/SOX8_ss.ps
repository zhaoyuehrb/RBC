%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAGGGUCGGGGCCACCGCGCGGCGACCUCGGGUCCCGGAGCGACCGCAGGGCAGCCCCGGGCGCCGGCCCCGGUGCGCGUCUCCUGUGCGCGCCCCUCCGCGCGCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[83.60680389 225.92933655]
[79.20397186 240.26861572]
[74.80113220 254.60791016]
[78.99626160 270.46139526]
[67.17516327 281.82772827]
[51.49836349 277.01419067]
[48.09281158 260.97256470]
[60.46184921 250.20506287]
[64.86468506 235.86578369]
[69.26752472 221.52650452]
[73.28044891 207.07325745]
[76.90052032 192.51663208]
[80.52058411 177.96002197]
[84.14065552 163.40339661]
[87.76072693 148.84678650]
[91.38079071 134.29016113]
[72.16320801 118.29283905]
[69.14624786 94.96472168]
[81.95295715 77.02632141]
[76.02558136 63.24712753]
[70.09820557 49.46793365]
[64.17082214 35.68873978]
[58.24344635 21.90954590]
[52.31607056 8.13035202]
[39.75522995 -1.48920476]
[41.83352280 -16.23810196]
[35.90614319 -30.01729584]
[20.90921402 -33.53841019]
[10.97733021 -45.08012009]
[9.76044559 -60.07955933]
[17.51634026 -72.76750946]
[11.58896255 -86.54670715]
[5.66158438 -100.32589722]
[-0.26579356 -114.10509491]
[-14.67302036 -120.02704620]
[-20.48793411 -134.08555603]
[-14.75346756 -147.78414917]
[-20.68084526 -161.56333923]
[-26.60822296 -175.34252930]
[-32.53560257 -189.12171936]
[-38.46297836 -202.90092468]
[-51.02381897 -212.52047729]
[-48.94552612 -227.26937866]
[-54.87290192 -241.04856873]
[-69.28012848 -246.97052002]
[-75.09504700 -261.02902222]
[-69.36058044 -274.72763062]
[-75.28795624 -288.50680542]
[-88.74865723 -297.87387085]
[-87.09747314 -314.18966675]
[-72.03300476 -320.66992188]
[-59.05228043 -310.64831543]
[-61.50876236 -294.43420410]
[-55.58138275 -280.65499878]
[-41.69267654 -275.39767456]
[-35.48517990 -261.50805664]
[-41.09370804 -246.97593689]
[-35.16633224 -233.19674683]
[-23.02945709 -224.56277466]
[-24.68378448 -208.82829285]
[-18.75640678 -195.04910278]
[-12.82902908 -181.26991272]
[-6.90165138 -167.49070740]
[-0.97427309 -153.71151733]
[12.91443443 -148.45420837]
[19.12192917 -134.56457520]
[13.51340008 -120.03247070]
[19.44077873 -106.25327301]
[25.36815643 -92.47408295]
[31.29553413 -78.69488525]
[45.84065628 -75.60013580]
[55.89332962 -64.40157318]
[57.44240952 -49.25384521]
[49.68533707 -35.94467545]
[55.61271667 -22.16547966]
[67.74958801 -13.53150368]
[66.09526062 2.20297384]
[72.02264404 15.98216820]
[77.95001984 29.76136208]
[83.87739563 43.54055405]
[89.80477905 57.31975174]
[95.73215485 71.09894562]
[105.60507965 70.43466949]
[115.42382812 73.14462280]
[124.03704071 79.10868835]
[130.37144470 87.81552124]
[133.56388855 98.40268707]
[133.07475281 109.74098969]
[128.76821899 120.55470276]
[140.95104980 129.30561829]
[153.13388062 138.05654907]
[165.31671143 146.80746460]
[177.49954224 155.55838013]
[189.68238831 164.30929565]
[201.86521912 173.06021118]
[217.41879272 170.25636292]
[230.35162354 179.34027100]
[232.99089050 194.92262268]
[223.77075195 207.75869751]
[208.16136169 210.23306274]
[195.42349243 200.87773132]
[193.11428833 185.24305725]
[180.93145752 176.49212646]
[168.74862671 167.74121094]
[156.56579590 158.99029541]
[144.38296509 150.23937988]
[132.20013428 141.48846436]
[120.01729584 132.73753357]
[105.93740845 137.91023254]
[102.31733704 152.46684265]
[98.69727325 167.02346802]
[95.07720184 181.58007812]
[91.45713806 196.13670349]
[87.83706665 210.69331360]
[89.34179688 217.35377502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[11 114]
[12 113]
[13 112]
[14 111]
[15 110]
[16 109]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 77]
[26 75]
[27 74]
[31 70]
[32 69]
[33 68]
[34 67]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[43 58]
[44 57]
[47 54]
[48 53]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
