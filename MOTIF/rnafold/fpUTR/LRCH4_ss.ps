%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCAACUACGGCGGCUCCAAGGAGGGGGUGGGGGAAGGAGGGACGGCCGGUCCCGUCAGUCAGGCAGCGGGAGCCGCCGGGAGCGG\
) } def
/len { sequence length } bind def

/coor [
[62.23225403 458.26965332]
[51.51956558 446.65011597]
[52.24427795 430.86245728]
[63.97643661 420.27322388]
[64.50580597 405.28256226]
[53.73926926 399.15344238]
[46.63156509 388.91723633]
[44.62709808 376.54360962]
[48.18083954 364.44680786]
[56.65699005 355.01480103]
[68.44170380 350.13769531]
[70.02718353 335.22174072]
[71.61266327 320.30575562]
[73.19814301 305.38977051]
[74.78362274 290.47381592]
[76.36909485 275.55783081]
[77.95457458 260.64187622]
[79.54005432 245.72589111]
[81.12553406 230.80992126]
[82.71101379 215.89393616]
[68.56568909 209.21800232]
[57.51465988 198.11096191]
[50.88785934 183.88377380]
[49.49150467 168.22447205]
[53.51005554 152.99775696]
[62.48207855 140.02302551]
[75.35315704 130.85693359]
[90.59977722 126.60669708]
[91.65785980 111.64405823]
[85.71173859 98.98960114]
[93.37950134 87.29785919]
[94.43759155 72.33522034]
[95.49567413 57.37258530]
[96.28952789 42.39360809]
[96.81889343 27.40295219]
[97.34826660 12.41229630]
[97.87763977 -2.57836008]
[88.03651428 -9.70965576]
[83.00830078 -20.64064789]
[83.97743988 -32.51186752]
[90.57624817 -42.28150940]
[101.00993347 -47.50482559]
[102.59541321 -62.42079926]
[93.67294312 -75.75380707]
[98.67115021 -90.99839020]
[113.75585175 -96.46022034]
[127.35533905 -87.94943237]
[129.03726196 -71.99478912]
[117.51138306 -60.83531952]
[115.92590332 -45.91934586]
[128.26429749 -32.62110138]
[127.17069244 -14.19977188]
[112.86829376 -2.04898810]
[112.33892822 12.94166756]
[111.80955505 27.93232346]
[111.28018188 42.92298126]
[114.25685120 49.87232208]
[110.45830536 58.43067169]
[109.40022278 73.39330292]
[108.34214020 88.35594177]
[114.28826141 101.01039886]
[106.62049866 112.70214081]
[105.56240845 127.66477966]
[118.87670898 133.25625610]
[129.77534485 142.69721985]
[137.18608093 155.04106140]
[140.38539124 169.05651855]
[139.06901550 183.35040283]
[133.38090515 196.50616455]
[123.89758301 207.22422791]
[111.56974792 214.45036316]
[97.62698364 217.47941589]
[96.04150391 232.39538574]
[94.45603180 247.31137085]
[92.87055206 262.22732544]
[91.28507233 277.14331055]
[89.69959259 292.05929565]
[88.11411285 306.97525024]
[86.52863312 321.89123535]
[84.94315338 336.80722046]
[83.35768127 351.72317505]
[97.09776306 363.26315308]
[101.29168701 380.55062866]
[94.48606110 396.81909180]
[79.49645996 405.81192017]
[78.96709442 420.80258179]
[89.92307281 432.19302368]
[89.53233337 447.99249268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 86]
[5 85]
[11 81]
[12 80]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[19 73]
[20 72]
[28 63]
[29 62]
[31 60]
[32 59]
[33 58]
[34 56]
[35 55]
[36 54]
[37 53]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
