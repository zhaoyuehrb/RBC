%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGCUCCAUUCAAGCCUACAAAUUGCAUCACCCUCCUCCUCUGCCCAGACCUGGGGGCUCCAACACCUUUCGCUAGGUCUGGCUCUGGCCUCUGAGCGAACCUUCCGUACAGU\
) } def
/len { sequence length } bind def

/coor [
[106.16448975 162.14564514]
[97.20905304 162.38824463]
[88.31105042 161.34696960]
[79.65358734 159.04324341]
[71.41483307 155.52449036]
[62.99702454 167.93983459]
[54.57921982 180.35516357]
[59.02707672 195.34684753]
[52.75048447 209.66950989]
[38.71305466 216.56040955]
[23.54283142 212.76588440]
[14.40273285 200.07760620]
[15.60843372 184.48657227]
[26.59063721 173.35440063]
[42.16388321 171.93736267]
[50.58169174 159.52203369]
[58.99949646 147.10668945]
[53.79338074 142.01225281]
[49.21585846 136.34628296]
[45.32920837 130.18586731]
[42.18630219 123.61478424]
[39.82989502 116.72245026]
[38.29204941 109.60262299]
[37.59367752 102.35216522]
[37.74428558 95.06970215]
[38.74182510 87.85431671]
[40.57272339 80.80415344]
[43.21207047 74.01514435]
[46.62396622 67.57962036]
[50.76199341 61.58515549]
[55.56985474 56.11328506]
[60.98214722 51.23844910]
[66.92523956 47.02696991]
[73.31828308 43.53614044]
[80.07430267 40.81344604]
[87.10139465 38.89592743]
[94.30396271 37.80967331]
[101.58402252 37.56945801]
[108.84252930 38.17855072]
[115.98073578 39.62866974]
[121.53280640 25.69401741]
[113.41818237 12.59978294]
[114.55650330 -2.58434129]
[124.30223846 -14.05101395]
[138.75822449 -17.53850365]
[144.31028748 -31.47315407]
[149.86236572 -45.40780640]
[150.14981079 -54.67440414]
[155.75807190 -59.64130402]
[161.68545532 -73.42050171]
[167.61282349 -87.19969177]
[173.54020691 -100.97888947]
[179.46759033 -114.75807953]
[185.39495850 -128.53727722]
[191.32234192 -142.31646729]
[197.24972534 -156.09565735]
[195.59539795 -171.83013916]
[207.73226929 -180.46411133]
[213.65963745 -194.24331665]
[203.60533142 -205.72694397]
[199.53755188 -220.43801880]
[202.26396179 -235.45565796]
[211.24320984 -247.79809570]
[224.69248962 -255.01472473]
[239.94142151 -255.67268372]
[253.96232605 -249.64132690]
[263.97131348 -238.11819458]
[267.98114014 -223.39120483]
[265.19561768 -208.38442993]
[256.16781616 -196.07745361]
[242.69024658 -188.91383362]
[227.43884277 -188.31593323]
[221.51145935 -174.53674316]
[223.58975220 -159.78784180]
[211.02891541 -150.16828918]
[205.10153198 -136.38908386]
[199.17416382 -122.60989380]
[193.24678040 -108.83070374]
[187.31939697 -95.05150604]
[181.39202881 -81.27231598]
[175.46464539 -67.49311829]
[169.53726196 -53.71392441]
[163.79701233 -39.85573196]
[158.24494934 -25.92108154]
[152.69287109 -11.98643112]
[160.78950500 0.48684114]
[159.97924805 15.51373291]
[150.36354065 27.32015991]
[135.46746826 31.24608994]
[129.91539001 45.18074036]
[151.42491150 64.56610870]
[161.87893677 91.56916046]
[159.03004456 120.38470459]
[143.49067688 144.81788635]
[152.56829834 156.75927734]
[161.64590454 168.70066833]
[176.15702820 175.00448608]
[177.69963074 189.81898499]
[186.77723694 201.76039124]
[195.85485840 213.70178223]
[211.48197937 214.27362061]
[223.05076599 224.79490662]
[225.09877014 240.29779053]
[216.65901184 253.46231079]
[201.71647644 258.07257080]
[187.32655334 251.95173645]
[180.28375244 237.98989868]
[183.91346741 222.77938843]
[174.83584595 210.83799744]
[165.75823975 198.89660645]
[151.89640808 193.44692993]
[149.70451355 177.77828979]
[140.62689209 165.83689880]
[131.54928589 153.89549255]
[123.51310730 157.85511780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[40 90]
[41 89]
[45 85]
[46 84]
[47 83]
[49 82]
[50 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[58 73]
[59 72]
[94 114]
[95 113]
[96 112]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
