%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAACCAAACAAAGAGAAGCAGAGUGGAUCCUGUGCUAAUAUUGGGAAAACCAGGCAACAGGACUCAUUUGGGGCCUUUAUUGUGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[74.91880798 446.95883179]
[59.78380966 447.41766357]
[45.32062149 442.93493652]
[33.09809875 433.99688721]
[24.44205475 421.57305908]
[20.29142952 407.01107788]
[21.09645081 391.89053345]
[26.76979828 377.85159302]
[36.69606781 366.41711426]
[49.79853439 358.82736206]
[64.65593719 355.90567017]
[66.67660522 341.04238892]
[68.69728088 326.17910767]
[70.71794891 311.31585693]
[72.48730469 296.42056274]
[74.00482941 281.49752808]
[75.52235413 266.57449341]
[77.03987885 251.65144348]
[64.27119446 243.94261169]
[56.08207703 231.40275574]
[54.14164734 216.48982239]
[58.88788986 202.15478516]
[69.43026733 191.25775146]
[83.71624756 185.99732971]
[85.23377228 171.07427979]
[86.75129700 156.15124512]
[88.26882172 141.22821045]
[89.78634644 126.30516815]
[91.30387115 111.38212585]
[85.74954987 98.55087280]
[93.77308655 87.10034943]
[95.29061127 72.17730713]
[96.80813599 57.25427246]
[98.32566071 42.33123016]
[99.84318542 27.40819168]
[101.36071014 12.48515129]
[102.62597656 -2.46139026]
[103.63862610 -17.42716980]
[104.65126801 -32.39294815]
[102.48818970 -36.08558273]
[101.60798645 -39.90113068]
[101.90352631 -43.44596863]
[103.15744019 -46.39595413]
[105.07202148 -48.52478790]
[107.30587769 -49.72132492]
[110.81987762 -64.30390930]
[114.33386993 -78.88649750]
[107.22326660 -93.26769257]
[114.16373444 -107.73176575]
[129.83114624 -111.18312073]
[142.20680237 -100.97417450]
[141.79714966 -84.93634796]
[128.91645813 -75.37249756]
[125.40246582 -60.78991318]
[121.88846588 -46.20732880]
[119.61705017 -31.38030243]
[118.60440063 -16.41452408]
[117.59175873 -1.44874406]
[120.33776093 5.58130646]
[116.28375244 14.00267601]
[114.76622772 28.92571640]
[113.24870300 43.84875488]
[111.73117828 58.77179718]
[110.21365356 73.69483185]
[108.69612885 88.61787415]
[114.25045013 101.44912720]
[106.22691345 112.89965057]
[104.70938873 127.82269287]
[103.19186401 142.74572754]
[101.67433929 157.66876221]
[100.15681458 172.59181213]
[98.63928986 187.51484680]
[111.57392120 195.54333496]
[119.70693207 208.33947754]
[121.47039795 223.33648682]
[116.56774139 237.55354309]
[106.02200317 248.18824768]
[91.96291351 253.16897583]
[90.44538879 268.09201050]
[88.92786407 283.01504517]
[87.41033936 297.93807983]
[89.68615723 307.00314331]
[85.58122253 313.33651733]
[83.56055450 328.19979858]
[81.53987885 343.06304932]
[79.51921082 357.92633057]
[93.05737305 364.70843506]
[103.65808105 375.52062988]
[110.17144775 389.19012451]
[111.89095306 404.23413086]
[108.63006592 419.02078247]
[100.74252319 431.94616699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 86]
[12 85]
[13 84]
[14 83]
[15 81]
[16 80]
[17 79]
[18 78]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[39 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
