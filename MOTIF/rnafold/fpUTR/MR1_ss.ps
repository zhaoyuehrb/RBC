%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUCUUCUGUAGGCCUUUCUCUUGCCUUCUUUUAUUCACAACUGAUGACACUGCAUAUCUUCCCCUGUUCUUAUUGGGAGAAGGCCUUGUGUGUCACCAAGAGGUUCUCAGAAGGGACCUGUCAGUUUUUGGUUAAAAGAACCCGGAAAGAGAAGGACU\
) } def
/len { sequence length } bind def

/coor [
[38.76922226 626.19744873]
[32.96421814 640.14300537]
[23.46436501 651.88732910]
[11.03977776 660.47839355]
[-3.30234122 665.21972656]
[-18.39933968 665.72698975]
[-33.02737045 661.95904541]
[-46.00061035 654.22137451]
[-56.26736832 643.14117432]
[-62.99536896 629.61676025]
[-65.63920593 614.74438477]
[-63.98454666 599.72979736]
[-58.16553497 585.79003906]
[-48.65389252 574.05529785]
[-36.22068024 565.47668457]
[-21.87380409 560.74975586]
[-6.77630424 560.25769043]
[-3.03468728 545.73181152]
[0.70692992 531.20599365]
[4.44854689 516.68011475]
[8.19016457 502.15426636]
[11.93178177 487.62841797]
[15.67339897 473.10256958]
[19.41501617 458.57672119]
[23.15663338 444.05087280]
[18.83861351 429.79592896]
[29.77366829 418.36196899]
[33.51528549 403.83612061]
[36.83283997 389.20758057]
[39.72352219 374.48876953]
[42.61420822 359.76992798]
[45.50489044 345.05111694]
[48.39557648 330.33227539]
[51.28625870 315.61343384]
[54.17694473 300.89462280]
[57.06762695 286.17578125]
[51.92806244 272.19601440]
[62.17979050 260.14559937]
[65.07047272 245.42675781]
[67.96115875 230.70793152]
[61.37986755 214.46237183]
[73.54120636 200.66580200]
[76.14592743 185.89369202]
[78.75064850 171.12156677]
[81.35536957 156.34945679]
[83.96009827 141.57734680]
[86.56481934 126.80522156]
[89.16954041 112.03310394]
[67.74572754 80.16488647]
[63.16583633 65.88116455]
[58.58594513 51.59744644]
[54.00605392 37.31372833]
[49.42616653 23.03001022]
[43.79920578 15.77065372]
[44.89886475 8.42471504]
[40.59681320 -5.94512749]
[36.29476547 -20.31497002]
[20.76219749 -28.31093216]
[15.89035034 -44.73639297]
[24.21726608 -59.32251740]
[19.63737488 -73.60623932]
[15.05748558 -87.88995361]
[10.47759533 -102.17367554]
[5.89770555 -116.45738983]
[1.17953420 -130.69602966]
[-3.67647481 -144.88825989]
[-8.53248405 -159.08047485]
[-23.61873627 -161.96154785]
[-35.23278046 -172.01190186]
[-40.25050354 -186.52803040]
[-37.32215500 -201.60517883]
[-27.23545265 -213.18766785]
[-12.70366383 -218.15985107]
[2.36422968 -215.18426514]
[13.91504192 -205.06130981]
[18.84166145 -190.51400757]
[15.81885433 -175.45550537]
[5.65973854 -163.93647766]
[10.51574707 -149.74426270]
[15.37175655 -135.55204773]
[20.53798866 -130.21517944]
[20.18142319 -121.03728485]
[24.76131439 -106.75356293]
[29.34120369 -92.46984863]
[33.92109299 -78.18612671]
[38.50098419 -63.90240860]
[50.69574356 -59.65346146]
[58.31790924 -48.98856735]
[58.39143753 -35.68519974]
[50.66460800 -24.61701775]
[54.96665573 -10.24717617]
[59.26870728 4.12266684]
[63.70988464 18.45012093]
[68.28977203 32.73383713]
[72.86966705 47.01755905]
[77.44955444 61.30127716]
[82.02944183 75.58499146]
[88.73168945 78.95098877]
[87.85962677 63.97636032]
[100.39205933 55.73390579]
[113.79640198 62.46618652]
[114.66814423 77.44083405]
[102.13617706 85.68297577]
[108.83842468 89.04896545]
[123.03064728 84.19296265]
[137.22286987 79.33695221]
[151.41508484 74.48094177]
[165.60731506 69.62493134]
[179.79953003 64.76892090]
[193.99176025 59.91291428]
[202.31523132 46.19798279]
[218.24530029 44.29740906]
[229.56179810 55.66915131]
[227.58366394 71.58978271]
[213.82835388 79.84635925]
[198.84776306 74.10513306]
[184.65554810 78.96114349]
[170.46331787 83.81715393]
[156.27110291 88.67316437]
[142.07887268 93.52917480]
[127.88665771 98.38518524]
[113.69443512 103.24118805]
[103.94165802 114.63783264]
[101.33693695 129.40994263]
[98.73220825 144.18206787]
[96.12748718 158.95417786]
[93.52276611 173.72628784]
[90.91804504 188.49841309]
[88.31332397 203.27052307]
[95.06971741 214.29524231]
[92.56347656 226.57084656]
[82.67998505 233.59861755]
[79.78930664 248.31744385]
[76.89862061 263.03628540]
[81.83142853 278.06884766]
[71.78646088 289.06646729]
[68.89577484 303.78530884]
[66.00508881 318.50411987]
[63.11440659 333.22296143]
[60.22372055 347.94180298]
[57.33303833 362.66061401]
[54.44235229 377.37945557]
[51.55167007 392.09826660]
[53.28007507 397.12811279]
[52.91013336 401.83700562]
[50.92528152 405.46960449]
[48.04113388 407.57772827]
[44.29951859 422.10357666]
[48.34991074 437.39755249]
[37.68248367 447.79251099]
[33.94086456 462.31835938]
[30.19924736 476.84420776]
[26.45763016 491.37005615]
[22.71601295 505.89590454]
[18.97439575 520.42175293]
[15.23277950 534.94757080]
[11.49116230 549.47344971]
[7.74954510 563.99926758]
[20.73054886 571.72393799]
[31.00843430 582.79382324]
[37.75001907 596.31146240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 158]
[18 157]
[19 156]
[20 155]
[21 154]
[22 153]
[23 152]
[24 151]
[25 150]
[27 148]
[28 147]
[29 143]
[30 142]
[31 141]
[32 140]
[33 139]
[34 138]
[35 137]
[36 136]
[38 134]
[39 133]
[40 132]
[42 129]
[43 128]
[44 127]
[45 126]
[46 125]
[47 124]
[48 123]
[49 97]
[50 96]
[51 95]
[52 94]
[53 93]
[55 92]
[56 91]
[57 90]
[60 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 80]
[66 79]
[67 78]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
