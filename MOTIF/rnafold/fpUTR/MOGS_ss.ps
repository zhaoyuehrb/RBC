%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGCGGGAGGCGGAGGCGGAGGCGCAGGCGCUGGCUGGCAGGUGUCGCUAACCGGACGGUGGUCGCCAGGGCGAGAGGCGGGAGCCGGAGAGGUGAGGCAGGACCCGGGCUCCACUGCCGCCUCUCCGAGCUCUUGUGACGCGGACCUCAGUGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[53.15840530 338.34231567]
[39.59600449 340.14733887]
[34.79709244 354.35894775]
[29.99818230 368.57058716]
[25.19927025 382.78222656]
[20.40035820 396.99386597]
[24.15410805 412.95761108]
[12.02225876 423.99166870]
[-3.51498294 418.74511719]
[-6.47423458 402.61517334]
[6.18872786 392.19494629]
[10.98763943 377.98330688]
[15.78655148 363.77166748]
[20.58546257 349.56005859]
[25.38437462 335.34841919]
[14.42609406 323.50207520]
[10.90388012 307.65759277]
[15.86826611 292.10571289]
[28.05837822 281.10681152]
[44.22055817 277.72372437]
[48.74636841 263.42279053]
[53.27217484 249.12184143]
[57.79798508 234.82089233]
[62.04903030 220.43588257]
[66.02375031 205.97207642]
[69.99847412 191.50827026]
[73.97319794 177.04447937]
[77.67014313 162.50718689]
[81.08794403 147.90176392]
[84.50574493 133.29632568]
[70.68859100 122.12596893]
[63.73227692 105.77664185]
[65.26506042 88.07518768]
[52.37151337 80.40991211]
[36.55540085 80.00851440]
[29.56932831 66.85388947]
[16.67578316 59.18861008]
[3.78223968 51.52333069]
[-9.11130428 43.85804749]
[-22.00484848 36.19276810]
[-31.02655220 34.48363495]
[-35.06995010 28.25515366]
[-47.81430435 20.34430695]
[-60.55865479 12.43345833]
[-74.87351227 18.12476158]
[-89.62236786 14.33997059]
[-99.20123291 2.73353004]
[-100.09824371 -12.11009979]
[-112.84259796 -20.02094841]
[-125.58695221 -27.93179703]
[-138.33129883 -35.84264374]
[-152.64973450 -29.86251259]
[-167.74082947 -33.47340012]
[-177.80174255 -45.28684998]
[-178.96386719 -60.76034546]
[-170.78031921 -73.94401550]
[-156.39784241 -79.76847076]
[-141.34681702 -75.99408722]
[-131.41464233 -64.07218933]
[-130.42045593 -48.58699417]
[-117.67610168 -40.67614746]
[-104.93174744 -32.76530075]
[-92.18740082 -24.85445023]
[-78.48702240 -30.63698769]
[-63.83540344 -27.20275307]
[-53.89924240 -15.66472244]
[-52.64780426 -0.31089288]
[-39.90345383 7.59995508]
[-27.15910339 15.51080322]
[-14.33956814 23.29922485]
[-1.44602418 30.96450424]
[11.44752026 38.62978363]
[24.34106445 46.29506683]
[37.23460770 53.96034622]
[52.12849045 53.81347275]
[60.03679276 67.51636505]
[72.93033600 75.18164825]
[81.42936707 68.31642151]
[91.57193756 64.25527954]
[102.46041870 63.35762405]
[113.13114166 65.70291138]
[122.63973236 71.08357239]
[130.14465332 79.02340698]
[143.94721985 73.15068817]
[157.74980164 67.27796173]
[171.55238342 61.40524292]
[185.35496521 55.53252411]
[199.15753174 49.65980148]
[212.96011353 43.78708267]
[226.76269531 37.91436386]
[240.50839233 31.90971184]
[254.19593811 25.77368355]
[267.88348389 19.63765335]
[281.57104492 13.50162411]
[295.25860596 7.36559391]
[308.94616699 1.22956455]
[322.63372803 -4.90646505]
[336.32125854 -11.04249477]
[350.00881958 -17.17852402]
[354.23175049 -22.36330414]
[359.63385010 -24.30908394]
[364.34017944 -23.27622604]
[378.25271606 -28.88348389]
[392.16525269 -34.49073792]
[406.07778931 -40.09799576]
[419.99032593 -45.70524979]
[420.49258423 -60.92588425]
[427.14807129 -74.62349701]
[438.80361938 -84.42489624]
[453.43991089 -88.63193512]
[468.52108765 -86.51570892]
[481.43420410 -78.44287872]
[489.94204712 -65.81210327]
[492.57055664 -50.81174088]
[488.86434937 -36.04069901]
[479.46548462 -24.05814552]
[466.00244141 -16.94013405]
[450.80773926 -15.91989994]
[436.51394653 -21.17420769]
[425.59756470 -31.79271507]
[411.68502808 -26.18545914]
[397.77249146 -20.57820320]
[383.85995483 -14.97094631]
[369.94741821 -9.36369038]
[356.14486694 -3.49096990]
[342.45730591 2.64505982]
[328.76974487 8.78108883]
[315.08218384 14.91711903]
[301.39462280 21.05314827]
[287.70709229 27.18917847]
[274.01953125 33.32520676]
[260.33197021 39.46123886]
[246.64442444 45.59726715]
[241.80462646 51.22926712]
[232.63540649 51.71694183]
[218.83283997 57.58966064]
[205.03025818 63.46237946]
[191.22767639 69.33509827]
[177.42510986 75.20782471]
[163.62252808 81.08054352]
[149.81994629 86.95326233]
[136.01736450 92.82598114]
[135.57141113 109.13189697]
[128.10775757 123.63623047]
[115.09885406 133.47747803]
[99.11117554 136.71412659]
[95.69337463 151.31956482]
[92.27557373 165.92498779]
[93.83895111 172.42658997]
[92.11152649 177.90242004]
[88.43700409 181.01919556]
[84.46228027 195.48300171]
[80.48755646 209.94680786]
[76.51283264 224.41059875]
[77.82603455 230.96731567]
[75.89014435 236.37295532]
[72.09893036 239.34671021]
[67.57312012 253.64764404]
[63.04731369 267.94860840]
[58.52150345 282.24954224]
[68.49878693 292.08953857]
[73.23089600 305.20925903]
[71.84516144 319.02066040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[20 160]
[21 159]
[22 158]
[23 157]
[24 154]
[25 153]
[26 152]
[27 151]
[28 148]
[29 147]
[30 146]
[33 77]
[34 76]
[36 74]
[37 73]
[38 72]
[39 71]
[40 70]
[42 69]
[43 68]
[44 67]
[48 63]
[49 62]
[50 61]
[51 60]
[83 142]
[84 141]
[85 140]
[86 139]
[87 138]
[88 137]
[89 136]
[90 135]
[91 133]
[92 132]
[93 131]
[94 130]
[95 129]
[96 128]
[97 127]
[98 126]
[99 125]
[102 124]
[103 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
