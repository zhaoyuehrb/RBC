%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCCACCUCCUCCAGAAGCCCCGCCCACUCCCGAGCCCCGAGAGCUCCGCGCACCUGGGCGCCAUCCGCCCUGGCUCCGCUGCACGAGCUCCACGCCCGUACCCCGGCGUCACGCUCAGCCCGCGGUGCUCGCACACCUGAGACUCAUCUCGCUUCGACCCCGCCGCCGCCGCCGCCCGGCAUCCUGAGCACGGAGACAGUCUCCAGCUGCCGUUC\
) } def
/len { sequence length } bind def

/coor [
[340.12338257 356.16348267]
[329.19876099 366.44223022]
[316.16574097 373.86785889]
[301.75332642 378.02505493]
[286.76770020 378.68124390]
[272.04705811 375.79971313]
[258.41485596 369.54168701]
[246.63360596 360.25717163]
[237.36228943 348.46554565]
[231.11952209 334.82632446]
[228.25450134 320.10247803]
[228.92747498 305.11758423]
[233.10078430 290.70983887]
[240.54101562 277.68511963]
[250.83200073 266.77203369]
[263.39807129 258.58096313]
[277.53634644 253.57008362]
[292.45602417 252.01971436]
[307.32135010 254.01625061]
[294.90185547 245.60458374]
[282.48236084 237.19291687]
[267.60568237 236.46197510]
[260.51852417 222.31692505]
[248.09901428 213.90525818]
[235.67951965 205.49359131]
[223.26002502 197.08192444]
[209.34040833 202.31477356]
[194.83703613 198.30029297]
[185.36782837 186.37605286]
[184.72828674 170.98458862]
[172.30879211 162.57292175]
[168.80128479 162.87348938]
[164.97381592 161.49380493]
[161.61599731 158.30186462]
[159.54663086 153.52259827]
[147.50051880 144.58441162]
[135.45440674 135.64622498]
[123.40830231 126.70803070]
[110.75361633 133.84710693]
[96.29902649 135.32095337]
[82.46389771 130.88287354]
[71.56390381 121.27571106]
[65.42347717 108.10746765]
[65.07036591 93.58222198]
[51.22248840 87.81713104]
[37.37461090 82.05204010]
[23.52673149 76.28694916]
[9.67885399 70.52185822]
[0.55964082 70.11353302]
[-4.32536745 64.57346344]
[-18.08912086 58.61032486]
[-33.82784271 60.22378540]
[-42.43027115 48.06452942]
[-56.19402313 42.10138702]
[-69.95777893 36.13824463]
[-83.96533966 30.77276993]
[-98.19075775 26.01490211]
[-113.73252106 28.97536469]
[-123.34837341 17.60062790]
[-137.57379150 12.84275818]
[-151.79922485 8.08488846]
[-166.02464294 3.32701921]
[-180.25006104 -1.43085015]
[-195.19064331 4.41370249]
[-209.00263977 -3.74766898]
[-211.09069824 -19.65425873]
[-199.85301208 -31.10389137]
[-183.91020203 -29.31339073]
[-175.49220276 -15.65627384]
[-161.26676941 -10.89840412]
[-147.04135132 -6.14053535]
[-132.81591797 -1.38266587]
[-118.59049988 3.37520337]
[-104.06623840 0.07442489]
[-93.43289185 11.78947735]
[-79.20746613 16.54734612]
[-84.95182800 2.69085622]
[-79.33869171 -11.21930885]
[-65.58614349 -17.20825958]
[-51.57871628 -11.84244823]
[-45.34705734 1.80183244]
[-50.46385956 15.90212822]
[-63.99463654 22.37449074]
[-50.23088074 28.33763123]
[-36.46712875 34.30077362]
[-21.71288300 32.26078796]
[-12.12597942 44.84656906]
[1.63777494 50.80971146]
[15.44394588 56.67398071]
[29.29182434 62.43907166]
[43.13970184 68.20416260]
[56.98757935 73.96925354]
[70.83545685 79.73434448]
[77.82874298 72.25648499]
[86.66468811 67.08439636]
[84.09529114 52.30609894]
[81.52589417 37.52779770]
[78.95649719 22.74949455]
[76.38710022 7.97119331]
[62.39794922 1.25678241]
[55.05676651 -12.41386604]
[57.18638229 -27.78410912]
[67.96791840 -38.94377518]
[83.25565338 -41.60174179]
[97.17113495 -34.73596954]
[104.36359406 -20.98649025]
[102.06735992 -5.64025354]
[91.16540527 5.40179586]
[93.73480225 20.18009758]
[96.30419922 34.95840073]
[98.87359619 49.73670197]
[101.44299316 64.51499939]
[117.94064331 69.35035706]
[130.23426819 81.36785889]
[135.44306946 97.75143433]
[132.34649658 114.66191864]
[144.39259338 123.60010529]
[156.43870544 132.53829956]
[168.48481750 141.47648621]
[180.72045898 150.15342712]
[193.13995361 158.56507874]
[207.66992188 153.44786072]
[222.25651550 157.81648254]
[231.36598206 169.79486084]
[231.67167664 184.66242981]
[244.09118652 193.07409668]
[256.51068115 201.48576355]
[268.93017578 209.89743042]
[284.69515991 211.23002625]
[290.89401245 224.77342224]
[303.31350708 233.18508911]
[315.73300171 241.59674072]
[325.70144653 242.37545776]
[331.70394897 248.92822266]
[346.17883301 252.86245728]
[360.65371704 256.79666138]
[369.75814819 250.85908508]
[380.40802002 250.90792847]
[389.09194946 256.68588257]
[393.07916260 266.08627319]
[407.43521118 270.43408203]
[421.79125977 274.78192139]
[436.17813110 279.02667236]
[450.59509277 283.16815186]
[465.01202393 287.30960083]
[479.42898560 291.45104980]
[493.84591675 295.59249878]
[505.48342896 290.03991699]
[517.40338135 293.78189087]
[523.38226318 304.29330444]
[537.73834229 308.64114380]
[552.09436035 312.98898315]
[566.45043945 317.33679199]
[580.89672852 321.37475586]
[595.42651367 325.10092163]
[609.95635986 328.82711792]
[624.48614502 332.55328369]
[632.24688721 321.86666870]
[643.14990234 314.46972656]
[655.88635254 311.22424316]
[668.93609619 312.49520874]
[680.74932861 318.10986328]
[689.93029785 327.38085938]
[695.40252686 339.19033813]
[696.53497314 352.12469482]
[710.95190430 356.26614380]
[725.36883545 360.40759277]
[739.78582764 364.54904175]
[751.42327881 358.99645996]
[763.34326172 362.73843384]
[769.32214355 373.24984741]
[783.67822266 377.59768677]
[799.51550293 373.34179688]
[810.92706299 385.11923218]
[806.17370605 400.81436157]
[790.14520264 404.28140259]
[779.33038330 391.95373535]
[764.97430420 387.60589600]
[748.12231445 392.51156616]
[735.64434814 378.96600342]
[721.22741699 374.82452393]
[706.81048584 370.68307495]
[692.39349365 366.54162598]
[681.51007080 379.47140503]
[666.01782227 386.36297607]
[649.01629639 385.78454590]
[633.93035889 377.80416870]
[623.82000732 363.98580933]
[620.76000977 347.08309937]
[606.23016357 343.35693359]
[591.70037842 339.63073730]
[577.17053223 335.90457153]
[573.97033691 337.37136841]
[569.90179443 337.36450195]
[565.66363525 335.49322510]
[562.10260010 331.69287109]
[547.74652100 327.34503174]
[533.39050293 322.99719238]
[519.03442383 318.64935303]
[502.18243408 323.55502319]
[489.70446777 310.00946045]
[475.28753662 305.86798096]
[460.87057495 301.72653198]
[446.45364380 297.58508301]
[432.03668213 293.44363403]
[424.74435425 294.61734009]
[417.44342041 289.13796997]
[403.08737183 284.79016113]
[388.73132324 280.44232178]
[370.26934814 286.20205688]
[356.71948242 271.27154541]
[342.24459839 267.33731079]
[327.76974487 263.40310669]
[338.97521973 273.37493896]
[347.52542114 285.69943237]
[352.94213867 299.68728638]
[354.92233276 314.55599976]
[353.35522461 329.47390747]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 125]
[30 121]
[31 120]
[35 119]
[36 118]
[37 117]
[38 116]
[44 93]
[45 92]
[46 91]
[47 90]
[48 89]
[50 88]
[51 87]
[53 85]
[54 84]
[55 83]
[56 76]
[57 75]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[134 213]
[135 212]
[136 211]
[140 209]
[141 208]
[142 207]
[143 205]
[144 204]
[145 203]
[146 202]
[147 201]
[150 199]
[151 198]
[152 197]
[153 196]
[154 192]
[155 191]
[156 190]
[157 189]
[165 183]
[166 182]
[167 181]
[168 180]
[171 178]
[172 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
