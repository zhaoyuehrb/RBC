%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGGACCGUUUGUAGUUAGGAUCCGCUGUGGCGUCCUGAGUGGAGUUUGGGACCCCAGGGAGGGAGGGUGUGGGCGUUCGGGUCCAGAGGAGCUGUUUAGUAUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[187.10188293 121.90559387]
[172.35499573 119.16162109]
[157.57075500 116.62660980]
[142.75213623 114.30106354]
[127.93350220 111.97551727]
[113.11486816 109.64996338]
[97.70348358 116.11978912]
[84.71203613 105.60353851]
[69.83352661 103.69827271]
[54.95502090 101.79300690]
[38.22492218 109.32152557]
[24.63370895 98.31951141]
[9.70724487 96.83605194]
[-4.79047251 103.17061615]
[-16.69015312 94.21255493]
[-31.61661720 92.72909546]
[-46.11433411 99.06366730]
[-58.01401520 90.10560608]
[-72.94048309 88.62214661]
[-87.86694336 87.13868713]
[-102.79341125 85.65522766]
[-117.71987152 84.17176819]
[-132.64633179 82.68830872]
[-147.57279968 81.20484924]
[-162.51876831 79.93276215]
[-177.48123169 78.87229919]
[-190.49253845 88.25768280]
[-205.90332031 83.79813385]
[-211.89172363 68.91464233]
[-203.86398315 55.02453995]
[-187.97828674 52.78313065]
[-176.42076111 63.90982819]
[-161.45829773 64.97029114]
[-154.46163940 62.26447296]
[-146.08934021 66.27838135]
[-131.16287231 67.76184082]
[-116.23641205 69.24530029]
[-101.30995178 70.72875977]
[-86.38348389 72.21221924]
[-71.45702362 73.69567871]
[-56.53055573 75.17913818]
[-43.10047913 68.73846436]
[-30.13315773 77.80263519]
[-15.20669270 79.28609467]
[-1.77661669 72.84541321]
[11.19070435 81.90958405]
[26.11716843 83.39304352]
[35.75854874 75.93677521]
[48.29126740 77.14666748]
[56.86028671 86.91449738]
[71.73879242 88.81977081]
[86.61730194 90.72503662]
[96.33171844 84.13603973]
[107.95255280 85.79160309]
[115.44041443 94.83133698]
[130.25904846 97.15688324]
[145.07768250 99.48242950]
[159.89631653 101.80798340]
[169.00987244 100.03322601]
[175.09896851 104.41474152]
[189.84585571 107.15870667]
[197.37649536 96.46955109]
[208.37873840 89.49169159]
[221.16549683 87.25253296]
[233.79226685 90.05609131]
[244.35273743 97.44226074]
[251.26669312 108.26193237]
[253.51635742 120.85559082]
[268.08438110 124.42947388]
[282.65240479 128.00335693]
[297.22042847 131.57722473]
[311.78845215 135.15110779]
[326.40560913 138.51847839]
[341.06893921 141.67866516]
[355.73226929 144.83885193]
[370.39556885 147.99903870]
[385.05889893 151.15924072]
[399.76550293 154.11160278]
[414.51239014 156.85557556]
[429.25927734 159.59954834]
[444.00616455 162.34350586]
[453.92810059 150.61958313]
[468.38815308 145.44244385]
[483.49661255 148.20472717]
[495.18936157 158.16337585]
[500.32116699 172.63957214]
[497.51153564 187.73930359]
[487.51626587 199.40078735]
[473.02407837 204.48718262]
[457.93322754 201.63024902]
[446.30310059 191.59848022]
[441.26217651 177.09039307]
[426.51528931 174.34643555]
[411.76840210 171.60246277]
[397.02151489 168.85848999]
[389.76397705 170.75659180]
[381.89871216 165.82255554]
[367.23538208 162.66236877]
[352.57205200 159.50218201]
[337.90875244 156.34199524]
[323.24542236 153.18180847]
[315.93704224 154.87376404]
[308.21456909 149.71913147]
[293.64654541 146.14524841]
[279.07852173 142.57138062]
[264.51049805 138.99749756]
[249.94247437 135.42361450]
[238.61018372 148.22334290]
[222.30006409 153.63172913]
[205.39291382 150.10304260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 58]
[4 57]
[5 56]
[6 55]
[8 52]
[9 51]
[10 50]
[12 47]
[13 46]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 33]
[26 32]
[68 107]
[69 106]
[70 105]
[71 104]
[72 103]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 95]
[79 94]
[80 93]
[81 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
