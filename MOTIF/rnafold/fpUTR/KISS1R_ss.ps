%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:05:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGAGCCCAGCACAGCUGCCCUCUGGACCCUGCGGACCCCAGCCGAGCCCCUUCCUGAGUUCCACAGGCGCAGCCCCCGGGCGGUCGGGCGGAGGGGUCCCCGGGGCGGUGCCAGGGCGCAAUCCUGGAGGGCGGCCGGGAGGAGGAGGUGCGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[107.24641418 461.12060547]
[106.95554352 446.12344360]
[106.66467285 431.12625122]
[106.37380219 416.12908936]
[98.39115906 403.55422974]
[105.85939789 389.60662842]
[105.56852722 374.60943604]
[103.24829102 371.89300537]
[102.15468597 367.90057373]
[102.88065338 363.23330688]
[105.72243500 358.73764038]
[106.30406189 343.74893188]
[106.88569641 328.76019287]
[107.46732330 313.77148438]
[102.61112976 305.11523438]
[106.15793610 294.50964355]
[103.55321503 279.73751831]
[100.94849396 264.96542358]
[98.34376526 250.19329834]
[95.73904419 235.42118835]
[93.13432312 220.64906311]
[90.52960205 205.87695312]
[87.92487335 191.10482788]
[85.32015228 176.33271790]
[82.71543121 161.56060791]
[79.96759796 146.81443787]
[77.07691193 132.09561157]
[74.18623352 117.37677765]
[69.05593109 103.28138733]
[61.80924225 90.14801025]
[54.56254959 77.01464081]
[47.31586075 63.88126755]
[40.06917191 50.74789429]
[26.62767982 42.40302658]
[27.25343132 27.52157211]
[20.00674248 14.38819790]
[12.76005268 1.25482440]
[5.51336384 -11.87854958]
[-1.73332512 -25.01192284]
[-8.98001385 -38.14529419]
[-16.22670364 -51.27867126]
[-33.93333435 -60.84610367]
[-32.84235764 -80.12278748]
[-40.59284973 -92.96528625]
[-48.34334183 -105.80779266]
[-63.42337418 -109.71039581]
[-71.10052490 -122.84493256]
[-67.28705597 -137.19738770]
[-75.03755188 -150.03988647]
[-82.78804016 -162.88240051]
[-90.66268921 -175.64913940]
[-98.66075134 -188.33894348]
[-106.65882111 -201.02873230]
[-126.42473602 -204.36676025]
[-137.26390076 -220.86772156]
[-132.62214661 -239.74476624]
[-141.34452820 -251.94804382]
[-150.06690979 -264.15133667]
[-164.38629150 -270.87930298]
[-165.49241638 -285.73278809]
[-174.21478271 -297.93606567]
[-182.93716431 -310.13934326]
[-198.46313477 -314.17965698]
[-204.85266113 -328.89541626]
[-197.20425415 -342.99795532]
[-181.38511658 -345.66900635]
[-169.53033447 -334.85958862]
[-170.73388672 -318.86172485]
[-162.01150513 -306.65844727]
[-153.28912354 -294.45516968]
[-139.59362793 -288.60003662]
[-137.86363220 -272.87371826]
[-129.14125061 -260.67044067]
[-120.41886902 -248.46714783]
[-110.12890625 -249.57514954]
[-100.23876190 -246.26158142]
[-92.57510376 -239.06712341]
[-88.58302307 -229.25564575]
[-89.05378723 -218.59246826]
[-93.96902466 -209.02680969]
[-85.97095490 -196.33700562]
[-77.97289276 -183.64721680]
[-71.71514893 -179.64561462]
[-69.94553375 -170.63288879]
[-62.19504547 -157.79039001]
[-54.44455338 -144.94787598]
[-39.96880722 -141.63302612]
[-31.92576027 -128.71929932]
[-35.50083542 -113.55828094]
[-27.75034714 -100.71578217]
[-19.99985695 -87.87327576]
[-9.84182167 -86.30527496]
[-2.07896280 -79.23723602]
[0.53978431 -68.84333038]
[-3.09332967 -58.52536011]
[4.15335941 -45.39198685]
[11.40004826 -32.25860977]
[18.64673805 -19.12523842]
[25.89342690 -5.99186468]
[33.14011383 7.14150906]
[40.38680267 20.27488136]
[53.30996704 27.68036270]
[53.20254517 43.50120544]
[60.44923401 56.63457870]
[67.69592285 69.76795197]
[74.94261169 82.90132141]
[82.18930054 96.03469849]
[89.88403320 85.97657776]
[101.66164398 83.74889374]
[111.33622742 89.60549927]
[125.93190002 86.14626312]
[140.52757263 82.68702698]
[155.12324524 79.22778320]
[166.67375183 67.58656311]
[182.45942688 72.03004456]
[186.24133301 87.98714447]
[174.12895203 99.04257965]
[158.58248901 93.82345581]
[143.98681641 97.28269958]
[129.39114380 100.74193573]
[114.79546356 104.20117188]
[109.81958008 113.05509186]
[99.92464447 117.29113770]
[88.90505981 114.48609161]
[91.79574585 129.20492554]
[94.68643188 143.92375183]
[99.43257904 151.78727722]
[97.48754883 158.95588684]
[100.09226990 173.72799683]
[102.69699097 188.50010681]
[105.30171967 203.27223206]
[107.90644073 218.04434204]
[110.51116180 232.81646729]
[113.11588287 247.58857727]
[115.72060394 262.36068726]
[118.32533264 277.13281250]
[120.93005371 291.90493774]
[127.81059265 278.57608032]
[139.64767456 269.36285400]
[154.25772095 265.96484375]
[168.94561768 269.00881958]
[181.00187683 277.93331909]
[188.20248413 291.09201050]
[189.21916199 306.05752563]
[183.86434937 320.06915283]
[173.12583923 330.54220581]
[158.98458862 335.54467773]
[144.04920959 334.15380859]
[131.07484436 326.62612915]
[122.45603943 314.35311890]
[121.87441254 329.34182739]
[121.29277802 344.33056641]
[120.71115112 359.31927490]
[120.56571198 374.31857300]
[120.85658264 389.31576538]
[128.86003113 402.96328735]
[121.37097931 415.83819580]
[121.66184998 430.83538818]
[121.95272064 445.83258057]
[122.24359131 460.82974243]
[124.80745697 480.04110718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 160]
[2 159]
[3 158]
[4 157]
[6 155]
[7 154]
[11 153]
[12 152]
[13 151]
[14 150]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[26 126]
[27 125]
[28 124]
[29 107]
[30 106]
[31 105]
[32 104]
[33 103]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[43 91]
[44 90]
[45 89]
[48 86]
[49 85]
[50 84]
[51 82]
[52 81]
[53 80]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
