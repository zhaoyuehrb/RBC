%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCUUCCAGCCCAGACACCAGCCAGCCAGUGGCGUUCCUGGCUCCUCGGGAUUUUCCUUUUCCUCCGAAGCUGCUGAUUCAUCCCCAGGCUGGAGUCAGGCUCAGCUGUGGGGCUGGGAGC\
) } def
/len { sequence length } bind def

/coor [
[74.44194031 402.04547119]
[58.09013748 400.80023193]
[51.23753738 385.90142822]
[60.93350220 372.67568970]
[62.07249832 357.71899414]
[63.21149826 342.76229858]
[64.35049438 327.80563354]
[65.48948669 312.84893799]
[66.62848663 297.89224243]
[67.76748657 282.93554688]
[68.90647888 267.97885132]
[70.04547882 253.02215576]
[71.18447113 238.06546021]
[72.32347107 223.10876465]
[70.21310425 220.14981079]
[69.49663544 215.98686218]
[70.73969269 211.31797791]
[74.15957642 207.07373047]
[76.43099213 192.24670410]
[78.70240784 177.41967773]
[76.58110046 170.24990845]
[81.22376251 162.24772644]
[83.87006378 147.48300171]
[86.51635742 132.71827698]
[76.85220337 126.76703644]
[69.56907654 118.06248474]
[65.41612244 107.50000000]
[50.41612244 107.50000000]
[35.41612244 107.50000000]
[19.57699013 113.54634094]
[9.38223553 100.00000000]
[19.57699013 86.45365906]
[35.41612244 92.50000000]
[50.41612244 92.50000000]
[65.41612244 92.50000000]
[70.93688965 79.81015015]
[80.90222168 70.20789337]
[93.78814697 65.16169739]
[107.62403107 65.44325256]
[113.88666534 51.81316376]
[120.14930725 38.18307114]
[126.41194153 24.55297852]
[132.67457581 10.92288685]
[138.93721008 -2.70720530]
[145.19984436 -16.33729744]
[151.46247864 -29.96738815]
[157.72511292 -43.59748077]
[159.80853271 -58.45208740]
[157.53710938 -73.27911377]
[155.26570129 -88.10614014]
[152.99427795 -102.93316650]
[150.72285461 -117.76018524]
[136.02194214 -121.73548889]
[124.21298981 -131.35153198]
[117.34196472 -144.94230652]
[116.59931946 -160.15310669]
[122.11371613 -174.34857178]
[132.92976379 -185.06925964]
[147.17350769 -190.45773315]
[162.37712097 -189.58042908]
[175.90652466 -182.58932495]
[185.41761780 -170.69567871]
[189.26258850 -155.96014404]
[186.77525330 -140.93572998]
[178.38655090 -128.22550964]
[165.54988098 -120.03160858]
[167.82130432 -105.20458221]
[170.09271240 -90.37755585]
[172.36413574 -75.55052948]
[174.63555908 -60.72350693]
[188.26564026 -54.46086884]
[200.99531555 -62.39533234]
[213.72497559 -70.32978821]
[226.45463562 -78.26425171]
[227.39746094 -95.09759521]
[238.04963684 -107.95175171]
[254.09379578 -111.92489624]
[269.20779419 -105.65391541]
[281.73236084 -113.90830231]
[288.59078979 -128.80441284]
[304.94305420 -130.04327393]
[313.96740723 -116.35045624]
[306.38031006 -101.81195068]
[289.98675537 -101.38372803]
[277.46218872 -93.12933350]
[278.08361816 -79.73007202]
[271.92785645 -67.69017792]
[260.52011108 -60.22929764]
[246.80548096 -59.40233231]
[234.38909912 -65.53458405]
[221.65943909 -57.60012817]
[208.92976379 -49.66566849]
[196.20010376 -41.73120499]
[171.35520935 -37.33484650]
[165.09257507 -23.70475388]
[158.82994080 -10.07466221]
[152.56730652 3.55542970]
[146.30467224 17.18552208]
[140.04203796 30.81561279]
[133.77938843 44.44570541]
[127.51676178 58.07579803]
[121.25412750 71.70588684]
[132.10235596 85.10930634]
[135.32844543 102.04825592]
[130.16639709 118.50088501]
[117.84186554 130.56080627]
[101.28108215 135.36457825]
[98.63478851 150.12930298]
[95.98848724 164.89402771]
[93.52943420 179.69108582]
[91.25801849 194.51811218]
[88.98660278 209.34513855]
[87.28016663 224.24775696]
[86.14116669 239.20445251]
[85.00217438 254.16114807]
[83.86317444 269.11782837]
[82.72417450 284.07452393]
[81.58518219 299.03121948]
[80.44618225 313.98791504]
[79.30718994 328.94461060]
[78.16819000 343.90130615]
[77.02919006 358.85800171]
[75.89019775 373.81469727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[11 116]
[12 115]
[13 114]
[14 113]
[18 112]
[19 111]
[20 110]
[22 109]
[23 108]
[24 107]
[27 35]
[28 34]
[29 33]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 94]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[71 93]
[72 92]
[73 91]
[74 90]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
