%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGUAGAGUAUUAGCUACAGAAACCUUUCCAUUGCCAUACUGAGAAACUGCAGCAGGCAGUGUGCCUACAGGUCUACAAAGAAACUUCAGAUCAUCUUCUUGAGGGAAAGAAGCUGAAGUGCUACAUAAG\
) } def
/len { sequence length } bind def

/coor [
[71.86121368 241.00332642]
[68.99768066 225.84405518]
[74.80562592 211.55169678]
[87.43175507 202.68690491]
[86.71802521 187.70390320]
[86.00429535 172.72088623]
[85.29056549 157.73788452]
[70.84889984 153.68345642]
[62.44128799 166.10569763]
[54.03367233 178.52793884]
[53.40411377 194.91499329]
[38.77350616 202.32292175]
[25.19256592 193.13107300]
[26.63219833 176.79524231]
[41.61143494 170.12031555]
[50.01904678 157.69808960]
[58.42666245 145.27584839]
[53.79047012 139.38044739]
[38.94315338 141.51519775]
[44.51808548 127.58964539]
[39.88189316 121.69425201]
[25.82764626 126.93621063]
[11.77340126 132.17817688]
[1.75515151 145.16149902]
[-14.45960808 142.70922852]
[-20.19052315 127.34405518]
[-9.54211903 114.87234497]
[6.53143835 118.12393188]
[20.58568382 112.88196564]
[34.63993073 107.64000702]
[36.95117950 92.81913757]
[25.16038322 83.54675293]
[13.36958790 74.27436829]
[1.57879102 65.00198364]
[-10.21200562 55.72959900]
[-22.00280190 46.45721436]
[-33.79359818 37.18482971]
[-46.95362854 40.31524658]
[-59.32166672 35.33781433]
[-66.43318939 24.29231644]
[-65.86223602 11.36325455]
[-77.42903137 1.81290197]
[-88.99582672 -7.73745060]
[-103.98754883 -3.73394775]
[-118.45717621 -9.33836365]
[-126.84084320 -22.39568520]
[-125.91487122 -37.88510895]
[-116.03530121 -49.85063171]
[-101.00103760 -53.69126511]
[-86.59305573 -47.93021393]
[-78.35152435 -34.78271103]
[-79.44547272 -19.30424690]
[-67.87867737 -9.75389385]
[-56.31188583 -0.20354125]
[-39.70144272 -2.53868484]
[-26.24778175 8.03295612]
[-24.52121353 25.39403152]
[-12.73041725 34.66641617]
[-0.93962061 43.93880081]
[10.85117626 53.21118546]
[22.64197159 62.48357010]
[34.43276978 71.75595856]
[46.22356415 81.02834320]
[80.07362366 56.11586380]
[114.57218933 63.42862701]
[117.05963898 48.63631058]
[119.54708862 33.84399414]
[113.31232452 18.67627525]
[123.54343414 5.86001539]
[139.71553040 8.57948589]
[145.19213867 24.03712845]
[134.33940125 36.33144760]
[131.85195923 51.12376022]
[129.36450195 65.91607666]
[138.63926697 54.12714767]
[142.92346191 39.75197220]
[154.20162964 29.86243439]
[169.01329041 27.49293137]
[182.81381226 33.37049484]
[191.36877441 45.69171906]
[192.05328369 60.67609406]
[184.65730286 73.72597504]
[171.45013428 80.83728790]
[156.48359680 79.82787323]
[142.19676208 84.39804077]
[156.92568970 87.23681641]
[171.65463257 90.07558441]
[186.38356018 92.91435242]
[201.11248779 95.75312042]
[215.84141541 98.59188843]
[230.57034302 101.43065643]
[224.96929932 87.51561737]
[232.14311218 74.34230042]
[246.87092590 71.49778748]
[258.43435669 81.05223083]
[258.41790771 96.05222321]
[246.83293152 105.58143616]
[261.12069702 110.14873505]
[275.40844727 114.71602631]
[289.69619751 119.28332520]
[303.98394775 123.85062408]
[318.27169800 128.41792297]
[332.20248413 120.95411682]
[347.30636597 125.60688019]
[354.62246704 139.61581421]
[349.81027222 154.66966248]
[335.72479248 161.83724976]
[320.72265625 156.86616516]
[313.70437622 142.70567322]
[299.41662598 138.13836670]
[285.12887573 133.57107544]
[270.84112549 129.00378418]
[256.55337524 124.43647766]
[242.26564026 119.86918640]
[227.73158264 116.15958405]
[213.00265503 113.32081604]
[198.27371216 110.48204803]
[183.54478455 107.64328003]
[168.81585693 104.80451202]
[154.08692932 101.96574402]
[139.35800171 99.12697601]
[134.53643799 133.61714172]
[100.27357483 157.02415466]
[100.98730469 172.00715637]
[101.70103455 186.99017334]
[102.41476440 201.97319031]
[115.82637024 209.59764099]
[122.96658325 223.27319336]
[121.55699921 238.63603210]
[112.04740143 250.78392029]
[97.47227478 255.84049988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 126]
[5 125]
[6 124]
[7 123]
[8 17]
[9 16]
[10 15]
[21 30]
[22 29]
[23 28]
[31 63]
[32 62]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[41 54]
[42 53]
[43 52]
[65 74]
[66 73]
[67 72]
[85 121]
[86 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
