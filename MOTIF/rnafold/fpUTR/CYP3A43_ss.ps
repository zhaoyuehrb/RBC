%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCUGGGCAGAGAAACAAAGCUCUAUAUGCACAGCCCAGCAAAGAGCAGCACACAGCUGAAAGAAAAACUCAGAAGACAGAGCUGAAAAAGAAAACUGGUG\
) } def
/len { sequence length } bind def

/coor [
[133.52127075 164.89010620]
[133.06822205 149.89694214]
[132.61517334 134.90379333]
[91.09833527 140.93542480]
[66.70483398 113.72646332]
[51.95053101 116.43029022]
[37.19623184 119.13411713]
[22.44193459 121.83793640]
[7.68763590 124.54176331]
[-7.06666279 127.24559021]
[-21.31844330 131.92391968]
[-34.80476379 138.49043274]
[-48.29108810 145.05694580]
[-61.77740860 151.62345886]
[-64.34947205 166.92588806]
[-75.44841003 177.76992798]
[-90.80644989 179.98583984]
[-104.51811218 172.72154236]
[-111.31098175 158.77032471]
[-108.57307434 143.49671936]
[-97.35715485 132.77371216]
[-81.97597504 130.72453308]
[-68.34392548 138.13714600]
[-54.85760117 131.57063293]
[-41.37128067 125.00411224]
[-27.88495827 118.43759918]
[-42.13197327 113.74477386]
[-51.74544144 102.23037720]
[-53.81980896 87.37450409]
[-47.72813034 73.66715240]
[-35.31153107 65.25121307]
[-20.32278633 64.67028809]
[-7.29205513 72.09996033]
[-0.15771951 85.29470062]
[-1.07604516 100.26656342]
[-9.77048779 112.49129486]
[4.98381042 109.78746796]
[19.73810959 107.08364105]
[34.49240875 104.37981415]
[49.24670792 101.67598724]
[64.00100708 98.97216797]
[64.67343903 87.46884918]
[69.06604004 76.32686615]
[77.00073242 66.75828552]
[87.90357971 59.89233398]
[100.84157562 56.64645767]
[114.60112762 57.61304092]
[127.80178070 62.97518539]
[139.03451538 72.46219635]
[141.73834229 57.70789719]
[144.44216919 42.95359802]
[147.14599609 28.19930077]
[139.25251770 14.23245811]
[145.38414001 -0.59261727]
[160.83718872 -4.90339804]
[173.75741577 4.60697889]
[174.23353577 20.64296532]
[161.90029907 30.90312576]
[159.19647217 45.65742493]
[156.49264526 60.41172409]
[153.78881836 75.16602325]
[158.23377991 81.20690155]
[167.68020630 69.55507660]
[172.16609192 55.24155426]
[185.08851624 47.62505722]
[199.78379822 50.63315582]
[208.67405701 62.71467590]
[207.17489624 77.63957214]
[196.05937195 87.71156311]
[181.05830383 87.73643494]
[167.12371826 93.28867340]
[171.56867981 99.32955170]
[186.45932007 101.13760376]
[201.34994507 102.94565582]
[216.24058533 104.75370789]
[226.00540161 92.81001282]
[240.68438721 88.06333923]
[255.59353638 92.02832794]
[265.97537231 103.43976593]
[268.51708984 118.65631104]
[262.40768433 132.82240295]
[249.59657288 141.41772461]
[234.17178345 141.69950867]
[221.05529785 133.57785034]
[214.43252563 119.64434052]
[199.54190063 117.83628845]
[184.65126038 116.02823639]
[169.76063538 114.22019196]
[164.22256470 119.27783203]
[176.42349243 128.00349426]
[188.62442017 136.72915649]
[202.23767090 143.02832031]
[207.38340759 157.11808777]
[201.03381348 170.70788574]
[186.92506409 175.80133057]
[173.35890198 169.40138245]
[168.31777954 155.27416992]
[160.73208618 142.33363342]
[153.14640808 129.39311218]
[147.60833740 134.45074463]
[148.06137085 149.44390869]
[148.51441956 164.43705750]
[151.28590393 183.61956787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[5 41]
[6 40]
[7 39]
[8 38]
[9 37]
[10 36]
[11 26]
[12 25]
[13 24]
[14 23]
[49 61]
[50 60]
[51 59]
[52 58]
[72 88]
[73 87]
[74 86]
[75 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
