%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGAGGCGGGGAGGGCCCCGGACUCCGACGGCGGCUCGGACGCCGACUCGGAGGUGGGUCCGGGGAGCCCGACUCGGACCGCGGAGGUGAGCGGGAGCUGAGGCUGAGGAGAGGGGAGCUUGGGGGGCGCCUGCUGCCAAGGGCAGCGGAGGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[119.96897888 172.16346741]
[133.51286316 178.60830688]
[126.44190979 165.37950134]
[119.37095642 152.15068054]
[112.30000305 138.92185974]
[93.84766388 140.35281372]
[76.66011810 133.48806763]
[64.27076721 119.73886871]
[59.22660828 101.93176270]
[44.36806870 99.87657166]
[29.50952911 97.82138824]
[14.65098858 95.76620483]
[2.13016868 105.03263855]
[-12.90922737 102.73672485]
[-21.66619492 90.74292755]
[-36.52473450 88.68774414]
[-51.38327408 86.63256073]
[-66.24181366 84.57737732]
[-81.13784027 82.81431580]
[-96.06561279 81.34405518]
[-110.99338531 79.87380219]
[-125.92115784 78.40354156]
[-140.84892273 76.93328094]
[-155.77670288 75.46302795]
[-170.70446777 73.99276733]
[-185.68640137 73.25675201]
[-200.68640137 73.25675201]
[-215.68640137 73.25675201]
[-230.68640137 73.25675201]
[-245.68640137 73.25675201]
[-260.68350220 73.55126190]
[-275.67193604 74.14015961]
[-290.66036987 74.72905731]
[-305.64880371 75.31795502]
[-320.63723755 75.90685272]
[-330.06713867 88.38126373]
[-345.32073975 91.82539368]
[-359.19573975 84.61302185]
[-365.14080811 70.14961243]
[-360.34884644 55.26434326]
[-347.08248901 46.98558426]
[-331.60571289 49.22231293]
[-321.22613525 60.91841507]
[-306.23770142 60.32951736]
[-291.24926758 59.74061966]
[-276.26083374 59.15172195]
[-261.27239990 58.56282425]
[-257.40005493 55.68750000]
[-251.66833496 55.24924469]
[-245.68640137 58.25675583]
[-230.68640137 58.25675583]
[-215.68640137 58.25675583]
[-200.68640137 58.25675583]
[-185.68640137 58.25675583]
[-194.03878784 45.79732132]
[-189.69781494 31.43919373]
[-175.84156799 25.69424629]
[-162.61448669 32.76847076]
[-159.70040894 47.48268509]
[-169.23420715 59.06499863]
[-154.30644226 60.53525543]
[-139.37866211 62.00551224]
[-124.45089722 63.47576904]
[-109.52312469 64.94602966]
[-94.59535217 66.41628265]
[-79.66758728 67.88654327]
[-75.43780518 65.56889343]
[-69.70008850 65.92008209]
[-64.18663025 69.71883392]
[-49.32809067 71.77401733]
[-34.46955109 73.82920074]
[-19.61100960 75.88439178]
[-7.92721939 66.71789551]
[7.17073011 68.59047699]
[16.70617485 80.90766144]
[31.56471443 82.96285248]
[46.42325592 85.01803589]
[61.28179550 87.07321930]
[71.21429443 71.05895233]
[87.28177643 61.21278763]
[106.05985260 59.63319016]
[110.97430420 45.46110153]
[115.88875580 31.28900909]
[120.80320740 17.11691856]
[111.82058716 4.46416712]
[112.02426147 -11.05157089]
[121.33590698 -23.46417809]
[136.17501831 -28.00075531]
[150.83564758 -22.91689301]
[159.68048096 -10.16744137]
[159.30850220 5.34517479]
[149.86274719 17.65603828]
[134.97529602 22.03137207]
[130.06085205 36.20346069]
[125.14639282 50.37555313]
[120.23194122 64.54764557]
[125.24289703 67.92201233]
[129.70094299 71.99901581]
[133.50842285 76.68933868]
[136.58193970 81.89025879]
[151.01876831 77.81864929]
[162.20059204 66.62591553]
[176.55024719 70.61802673]
[190.98707581 66.54642487]
[205.42390442 62.47481537]
[219.86073303 58.40320587]
[234.29756165 54.33160019]
[237.40225220 39.34429169]
[247.12522888 27.52387047]
[261.23220825 21.58658600]
[276.48153687 22.89678383]
[289.36901855 31.15338898]
[296.93319702 44.45909500]
[297.43588257 59.75634384]
[290.76156616 73.52994537]
[278.44396973 82.61482239]
[263.31353760 84.92333984]
[248.84719849 79.92501831]
[238.36917114 68.76843262]
[223.93234253 72.84003448]
[209.49551392 76.91164398]
[195.05868530 80.98324585]
[180.62185669 85.05485535]
[170.47264099 95.95635986]
[155.09037781 92.25547791]
[140.65354919 96.32708740]
[140.32212830 106.35034180]
[137.55677795 115.99028015]
[132.52442932 124.66500854]
[125.52882385 131.85090637]
[132.59977722 145.07972717]
[139.67073059 158.30854797]
[146.74168396 171.53736877]
[155.19726562 183.92698669]
[164.93899536 195.33308411]
[174.68070984 206.73916626]
[184.42243958 218.14526367]
[194.16415405 229.55134583]
[203.90586853 240.95744324]
[213.64759827 252.36352539]
[228.53196716 260.48092651]
[224.85220337 277.03070068]
[207.93052673 278.07620239]
[202.24150085 262.10525513]
[192.49978638 250.69915771]
[182.75807190 239.29307556]
[173.01634216 227.88697815]
[163.27462769 216.48089600]
[153.53289795 205.07479858]
[143.79118347 193.66871643]
[144.85621643 208.63085938]
[138.95730591 222.42225647]
[127.40184784 231.98632812]
[112.75087738 235.20335388]
[98.25152588 231.36033630]
[87.11729431 221.30903625]
[81.81587219 207.27709961]
[83.52223206 192.37448120]
[91.85818481 179.90403748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[5 130]
[9 78]
[10 77]
[11 76]
[12 75]
[15 72]
[16 71]
[17 70]
[18 69]
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[81 96]
[82 95]
[83 94]
[84 93]
[100 126]
[101 125]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
