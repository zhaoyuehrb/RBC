%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGAUAAAGACUCAAGUCUGGGGACCUCCUGGUCACUCAGGCAGCAGCCCCUUCUUUCUUGCCCCAGUCUCCAGUUCUCCAGUGUUCACAGGUGAGCCUACCAACAGCCACUGCUC\
) } def
/len { sequence length } bind def

/coor [
[262.91888428 294.31054688]
[255.13433838 292.02648926]
[248.00617981 288.12905884]
[241.86486816 282.79336548]
[236.99623108 276.26135254]
[233.62829590 268.83078003]
[231.92048645 260.84170532]
[231.95617676 252.66084290]
[233.73855591 244.66477966]
[237.19033813 237.22261047]
[226.16871643 227.04794312]
[215.14710999 216.87326050]
[204.12550354 206.69857788]
[189.29936218 207.54800415]
[177.97694397 197.38644409]
[177.18652344 181.82968140]
[166.16490173 171.65499878]
[151.56492615 168.70710754]
[146.67321777 153.66111755]
[135.65161133 143.48643494]
[124.62999725 133.31176758]
[113.60839081 123.13708496]
[102.58677673 112.96240997]
[88.61672974 107.50000000]
[73.61672974 107.50000000]
[58.61673355 107.50000000]
[43.61673355 107.50000000]
[29.69293022 116.16370392]
[15.35749531 108.19957733]
[15.35749531 91.80042267]
[29.69293022 83.83629608]
[43.61673355 92.50000000]
[58.61673355 92.50000000]
[73.61672974 92.50000000]
[88.61672974 92.50000000]
[91.71582794 85.67024231]
[76.80952454 83.99625397]
[73.79546356 69.30219269]
[86.83903503 61.89509964]
[97.91400909 72.01071930]
[101.01309967 65.18095398]
[91.13542938 53.89239502]
[81.25775909 42.60383224]
[65.56872559 37.83033371]
[62.12224960 21.79743385]
[74.46376801 10.99840927]
[89.89738464 16.54236984]
[92.54631805 32.72616196]
[102.42398834 44.01472473]
[112.30165863 55.30328751]
[109.04521179 40.66103363]
[120.42721558 30.89117813]
[134.54522705 25.82348251]
[149.54220581 26.12454033]
[163.44546509 31.75475502]
[174.42620850 41.97353363]
[181.04002380 55.43672180]
[182.41696167 70.37339020]
[178.37590027 84.81879425]
[169.44837952 96.87281799]
[156.80873108 104.94989014]
[142.11953735 107.98757172]
[127.31182861 105.58587646]
[112.76145172 101.94079590]
[123.78306580 112.11547089]
[134.80467224 122.29015350]
[145.82629395 132.46482849]
[156.84790039 142.63951111]
[172.23622131 146.31515503]
[176.33958435 160.63339233]
[187.36119080 170.80805969]
[202.93142700 170.35475159]
[213.96397400 180.83033752]
[214.30017090 195.67697144]
[225.32179260 205.85165405]
[236.34339905 216.02632141]
[247.36500549 226.20100403]
[269.51147461 219.08610535]
[291.56762695 226.11230469]
[305.38229370 244.54525757]
[305.93017578 267.46081543]
[319.24044800 274.37719727]
[332.55075073 281.29357910]
[345.86102295 288.20999146]
[359.17129517 295.12637329]
[370.83105469 285.41421509]
[385.28195190 280.91818237]
[400.31265259 282.29357910]
[413.63555908 289.29986572]
[423.23495483 300.84182739]
[427.67196655 315.14071655]
[426.30023193 330.00839233]
[439.61050415 336.92477417]
[452.92077637 343.84115601]
[466.23107910 350.75756836]
[482.58114624 349.48995972]
[491.62951660 363.16690063]
[484.06799316 377.71871948]
[467.67523193 378.17575073]
[459.31466675 364.06784058]
[446.00439453 357.15145874]
[432.69412231 350.23507690]
[419.38381958 343.31866455]
[408.00604248 352.98690796]
[393.75488281 357.57492065]
[378.79244995 356.35388184]
[365.40136719 349.47885132]
[355.63638306 337.96975708]
[351.00933838 323.56027222]
[352.25491333 308.43664551]
[338.94464111 301.52026367]
[325.63436890 294.60388184]
[312.32406616 287.68746948]
[299.01379395 280.77108765]
[293.34030151 286.49020386]
[286.56793213 290.87365723]
[279.00573730 293.71560669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 77]
[11 76]
[12 75]
[13 74]
[16 71]
[17 70]
[19 68]
[20 67]
[21 66]
[22 65]
[23 64]
[24 35]
[25 34]
[26 33]
[27 32]
[41 50]
[42 49]
[43 48]
[81 114]
[82 113]
[83 112]
[84 111]
[85 110]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
