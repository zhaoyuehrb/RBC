%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAUUUCUGGAGGUGGUGUAUCAAAAUUUACUCUGCGAGACUCUGCUGAACUGGCUGCAUCAGGGAGAAAUUUCAUCUCCCAGAAGGGUGUUGCUCAUCGUUUCUUCCCGGAAACAUCUGCAGAGACUAGCUUUUCAGGCUAAGGUAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[103.16750336 224.37773132]
[101.97637939 239.63681030]
[93.82062531 252.58834839]
[80.57437897 260.25616455]
[65.28151703 260.87823486]
[51.45623398 254.31166077]
[42.27547836 242.06533813]
[39.84892273 226.95339966]
[44.73417282 212.44847107]
[55.80862808 201.88368225]
[70.52746582 197.68672180]
[73.52784729 182.98985291]
[76.52823639 168.29299927]
[79.52861786 153.59613037]
[67.44685364 144.70620728]
[54.30807877 151.94309998]
[41.16930389 159.17999268]
[28.03052711 166.41687012]
[19.67563629 179.85214233]
[4.79465246 179.21528625]
[-8.34412193 186.45217896]
[-21.48289680 193.68907166]
[-23.28161049 209.10154724]
[-33.82075882 220.49040222]
[-49.04782104 223.47639465]
[-63.10768509 216.91134644]
[-70.59404755 203.31965637]
[-68.62824249 187.92759705]
[-57.96616745 176.65374756]
[-42.70760727 173.83311462]
[-28.71978760 180.55029297]
[-15.58101368 173.31341553]
[-2.44223857 166.07652283]
[4.97287893 153.15888977]
[20.79363632 153.27810669]
[33.93241119 146.04121399]
[47.07118607 138.80432129]
[60.20996094 131.56742859]
[53.43872452 109.89427185]
[56.99096298 88.93081665]
[68.82592773 73.03163910]
[85.31943512 64.91776276]
[102.26187134 65.23377991]
[106.43513489 50.82600784]
[110.60839844 36.41823959]
[114.78165436 22.01046562]
[118.95491791 7.60269451]
[123.12818146 -6.80507708]
[119.53581238 -22.21304512]
[130.50857544 -32.28516769]
[134.68183899 -46.69293976]
[122.33353424 -57.32104492]
[117.78822327 -74.51330566]
[124.23822784 -92.67834473]
[141.00347900 -104.94115448]
[139.79647827 -119.89250946]
[138.58947754 -134.84387207]
[129.76681519 -147.97669983]
[136.45489502 -161.28529358]
[135.24790955 -176.23666382]
[134.04090881 -191.18801880]
[132.83390808 -206.13937378]
[131.62690735 -221.09072876]
[117.49367523 -238.44288635]
[127.23680878 -257.74685669]
[124.83063507 -272.55261230]
[122.42446899 -287.35836792]
[120.01829529 -302.16412354]
[117.61212921 -316.96987915]
[115.20596313 -331.77563477]
[101.67794037 -339.61953735]
[96.40547943 -354.34146118]
[101.87807465 -368.99017334]
[115.51172638 -376.64898682]
[130.86904907 -373.70166016]
[140.69877625 -361.53982544]
[140.35961914 -345.90591431]
[130.01171875 -334.18179321]
[132.41787720 -319.37603760]
[134.82405090 -304.57028198]
[137.23022461 -289.76452637]
[139.63638306 -274.95877075]
[142.04255676 -260.15301514]
[149.38308716 -256.96365356]
[154.90522766 -251.04069519]
[157.63630676 -243.31709290]
[157.05149841 -235.05111694]
[153.17292786 -227.62156677]
[146.57826233 -222.29772949]
[147.78526306 -207.34637451]
[148.99226379 -192.39501953]
[150.19926453 -177.44364929]
[151.40626526 -162.49229431]
[160.14259338 -150.42889404]
[153.54083252 -136.05087280]
[154.74783325 -121.09951019]
[155.95483398 -106.14815521]
[162.16979980 -101.95003510]
[170.56623840 -114.37982178]
[182.99589539 -105.98316956]
[174.59973145 -93.55379486]
[180.81469727 -89.35567474]
[195.13549805 -93.81822205]
[209.45631409 -98.28076172]
[223.77713013 -102.74330902]
[238.09794617 -107.20585632]
[252.41876221 -111.66840363]
[263.13461304 -124.08219147]
[279.19030762 -120.74350739]
[284.06912231 -105.08689880]
[272.75213623 -93.21854401]
[256.88131714 -97.34758759]
[242.56048584 -92.88504028]
[228.23966980 -88.42250061]
[213.91886902 -83.95995331]
[199.59805298 -79.49740601]
[185.27723694 -75.03485870]
[173.14682007 -48.58597565]
[149.08961487 -42.51967621]
[144.91635132 -28.11190605]
[148.80722046 -13.73447800]
[137.53594971 -2.63181496]
[133.36268616 11.77595711]
[129.18942261 26.18372917]
[125.01616669 40.59149933]
[120.84290314 54.99927139]
[116.66964722 69.40704346]
[136.43025208 83.10585785]
[144.53620911 109.18788910]
[133.85905457 137.85913086]
[144.24992371 148.67716980]
[154.64079285 159.49520874]
[165.03166199 170.31324768]
[175.42251587 181.13128662]
[185.81338501 191.94931030]
[201.14617920 199.18409729]
[198.43867493 215.92045593]
[181.60687256 217.95184326]
[174.99534607 202.34017944]
[164.60447693 191.52214050]
[154.21362305 180.70410156]
[143.82275391 169.88607788]
[133.43188477 159.06803894]
[123.04102325 148.25000000]
[115.83713531 150.33662415]
[120.01039886 164.74440002]
[128.43162537 177.15740967]
[119.22844696 189.00230408]
[105.11935425 183.90979004]
[105.60262299 168.91766357]
[101.42936707 154.50988770]
[94.22547913 156.59652710]
[91.22509003 171.29338074]
[88.22470856 185.99023438]
[85.22431946 200.68710327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 155]
[12 154]
[13 153]
[14 152]
[15 38]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[22 31]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
[48 122]
[50 120]
[51 119]
[55 97]
[56 96]
[57 95]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[130 144]
[131 143]
[132 142]
[133 141]
[134 140]
[135 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
