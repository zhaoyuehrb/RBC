%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACGGUCUCCACCGCCCACUUCUGGUCCCUUCACAGAAUCAGCGACCACACUACCGCCGGGCCCGGAGGACCCCGCCCUCCACCAGCCGCCGCUGUCGUCCACC\
) } def
/len { sequence length } bind def

/coor [
[-5.29573822 116.53138733]
[-12.81171131 112.35443878]
[-18.68053246 106.11690521]
[-22.36282730 98.42234802]
[-23.52940750 90.00674438]
[-37.94968033 85.87688446]
[-52.36995697 81.74703217]
[-66.79022980 77.61717224]
[-76.96934509 90.89694214]
[-91.40303802 99.28863525]
[-107.90773773 101.55471039]
[-123.99868774 97.38190460]
[-137.26402283 87.42422485]
[-145.72628784 73.20062256]
[-148.13716125 56.86333084]
[-162.77494812 53.58688354]
[-177.41273499 50.31043625]
[-187.12182617 60.21958160]
[-200.36579895 63.96773148]
[-213.61666870 60.66871262]
[-223.40011597 51.29883957]
[-227.20640564 38.41134262]
[-241.74169922 34.70659256]
[-256.27700806 31.00184441]
[-270.81228638 27.29709625]
[-285.34759521 23.59234810]
[-296.56494141 34.18360138]
[-311.73184204 37.00650787]
[-326.00857544 31.16029358]
[-334.83950806 18.51046181]
[-335.40670776 3.09352899]
[-327.52917480 -10.17101860]
[-313.72064209 -17.05051231]
[-298.38729858 -15.34972954]
[-286.42202759 -5.61138439]
[-281.64285278 9.05705166]
[-267.10754395 12.76179981]
[-252.57225037 16.46654892]
[-238.03694153 20.17129707]
[-223.50164795 23.87604523]
[-211.29086304 13.01375294]
[-194.85243225 11.49808693]
[-180.57847595 20.11519623]
[-174.13629150 35.67264557]
[-159.49850464 38.94909286]
[-144.86071777 42.22554016]
[-137.84149170 30.78457642]
[-127.59228516 22.08193398]
[-115.12212372 16.99315643]
[-101.66456604 16.03707695]
[-88.55566406 19.32294655]
[-77.10131073 26.53817558]
[-68.44715881 36.97800064]
[-63.46405029 49.61431503]
[-62.66037369 63.19689941]
[-48.24010086 67.32675934]
[-33.81982422 71.45661163]
[-19.39955139 75.58647156]
[-1.71720850 62.78884888]
[20.00843620 66.78473663]
[32.26800537 85.47531891]
[47.18887329 87.01404572]
[62.10974503 88.55276489]
[77.03060913 90.09149170]
[88.97626495 77.54451752]
[106.20899200 75.76738739]
[120.46383667 85.61241150]
[134.75665283 81.06101227]
[149.04948425 76.50960541]
[163.34230042 71.95819855]
[177.63511658 67.40679169]
[183.41033936 52.87473297]
[197.19990540 45.50032043]
[212.49279785 48.76552582]
[222.06817627 61.12862015]
[221.40484619 76.75212860]
[210.81600952 88.25910950]
[195.30139160 90.21631622]
[182.18652344 81.69961548]
[167.89370728 86.25102234]
[153.60087585 90.80242157]
[139.30805969 95.35382843]
[125.01524353 99.90523529]
[124.84678650 102.89975739]
[124.32115173 105.85259247]
[123.44589996 108.72129822]
[135.29011536 117.92534637]
[147.13433838 127.12938690]
[158.97856140 136.33343506]
[175.28907776 138.03611755]
[181.72174072 153.12098694]
[171.65917969 166.06999207]
[155.45289612 163.56231689]
[149.77452087 148.17764282]
[137.93029785 138.97360229]
[126.08608246 129.76956177]
[114.24185944 120.56552124]
[98.68566895 124.98086548]
[83.67869568 118.95748901]
[75.49188995 105.01235962]
[60.57101822 103.47364044]
[45.65015030 101.93491364]
[30.72928238 100.39618683]
[26.25797272 107.94027710]
[19.73209381 113.74720001]
[11.78202629 117.28381348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 58]
[6 57]
[7 56]
[8 55]
[15 46]
[16 45]
[17 44]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[61 103]
[62 102]
[63 101]
[64 100]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
