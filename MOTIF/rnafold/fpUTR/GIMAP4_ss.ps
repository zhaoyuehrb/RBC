%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCUCAACAUCCUGGCUUAGUAUUGUGUGCAAAAUCAGAGAGGGGUGCAAGAUCCUGAUUUUUCAGGAGUUCAAGCGACA\
) } def
/len { sequence length } bind def

/coor [
[107.94908142 342.22341919]
[107.38146210 327.23416138]
[106.81384277 312.24490356]
[98.60046387 299.81954956]
[105.81000519 285.73645020]
[105.24237823 270.74719238]
[95.07904053 256.57379150]
[103.47827911 240.31884766]
[102.34384155 225.36180115]
[101.20941162 210.40475464]
[97.47019958 203.80961609]
[100.32601929 194.86212158]
[99.75839996 179.87286377]
[99.19077301 164.88360596]
[98.62315369 149.89434814]
[98.05552673 134.90509033]
[97.48790741 119.91584015]
[88.20103455 131.69522095]
[73.21973419 130.94653320]
[65.15355682 118.29991913]
[70.79170227 104.39987183]
[85.38869476 100.94589233]
[72.03650665 94.11074829]
[58.68431854 87.27561188]
[45.33213425 80.44046783]
[28.47782707 78.60507965]
[25.57575035 61.90136337]
[40.82330704 54.48865128]
[52.16727448 67.08828735]
[65.51946259 73.92342377]
[78.87164307 80.75856018]
[92.22383118 87.59370422]
[106.62347412 83.39247894]
[114.20527649 70.44966888]
[121.78707123 57.50686264]
[129.36886597 44.56405258]
[136.95066833 31.62124252]
[144.53247070 18.67843437]
[152.11427307 5.73562384]
[159.69607544 -7.20718575]
[161.40620422 -16.44238472]
[167.81761169 -20.48854446]
[175.88375854 -33.13517761]
[168.22723389 -46.38795471]
[167.61816406 -61.68133926]
[174.19653320 -75.50102234]
[186.45065308 -84.67134857]
[201.56465149 -87.08503723]
[216.06541443 -82.18743896]
[226.62078857 -71.10399628]
[230.80520630 -56.38159180]
[227.65715027 -41.40333176]
[217.89999390 -29.61111069]
[203.77586365 -23.71469307]
[188.53039551 -25.06903267]
[180.46424866 -12.42240047]
[172.63888550 0.37461302]
[165.05708313 13.31742287]
[157.47528076 26.26023293]
[149.89347839 39.20304108]
[142.31167603 52.14585114]
[134.72988892 65.08866119]
[127.14808655 78.03147125]
[119.56628418 90.97428131]
[112.47716522 119.34821320]
[113.04478455 134.33747864]
[113.61241150 149.32672119]
[114.18003082 164.31597900]
[114.74765015 179.30523682]
[115.31527710 194.29449463]
[116.16645050 209.27032471]
[117.30088806 224.22737122]
[118.43531799 239.18440247]
[127.78620148 248.30398560]
[128.29252625 260.95123291]
[120.23163605 270.17959595]
[120.79925537 285.16882324]
[129.05323792 298.66632080]
[121.80309296 311.67727661]
[122.37071991 326.66653442]
[122.93833923 341.65579224]
[125.85634613 360.81655884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[5 77]
[6 76]
[8 73]
[9 72]
[10 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[22 32]
[23 31]
[24 30]
[25 29]
[33 64]
[34 63]
[35 62]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[42 56]
[43 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
