%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGAUCCUAGGGCGCCCCUGACCUUUGAGCCGGCUCGGGUUCCGGCUCUGGCGCGUGCACACUCGCCUCGCCGUUCGGGACCAGCCAGAUCGCGGCGGCCUCGCGGGCGGUUUGGUCGGUGAGGUCUUGGCCGCGCGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[161.62322998 152.60346985]
[152.69662476 164.65817261]
[139.74229431 172.22024536]
[124.85630035 174.06613159]
[110.44729614 169.89710999]
[98.84674072 160.38780212]
[91.93167877 147.07682800]
[90.82099915 132.11801147]
[95.69573975 117.92951965]
[86.56431580 129.82981873]
[77.43289185 141.73011780]
[68.30147552 153.63041687]
[59.17005157 165.53071594]
[54.32468414 181.77752686]
[37.37147522 181.61907959]
[32.83061600 165.28454590]
[47.26975250 156.39929199]
[56.40117264 144.49899292]
[65.53259277 132.59869385]
[74.66401672 120.69840240]
[83.79544067 108.79809570]
[80.84989929 101.90071869]
[67.13101959 107.96638489]
[53.26263809 113.68197632]
[47.37145615 99.88726807]
[61.09042358 93.82151031]
[74.95882416 88.10597229]
[72.01328278 81.20859528]
[57.10243988 79.57559204]
[42.19159698 77.94258881]
[27.28075027 76.30958557]
[12.36990547 74.67658234]
[-2.54094005 73.04357910]
[-17.45178413 71.41057587]
[-27.78487587 82.98670959]
[-42.95590973 86.24544525]
[-57.13131332 79.93374634]
[-64.86035156 66.47857666]
[-63.17105484 51.05372620]
[-52.71299362 39.59037018]
[-37.50750351 36.49639893]
[-23.40140533 42.96150589]
[-15.81878185 56.49972916]
[-0.90793687 58.13273239]
[14.00290775 59.76573563]
[28.91375351 61.39873886]
[43.82460022 63.03174210]
[58.73544312 64.66474152]
[73.64628601 66.29774475]
[90.62295532 69.22262573]
[101.55491638 78.49053955]
[104.66770172 90.08692169]
[117.49137878 82.30532074]
[130.31506348 74.52371979]
[143.13873291 66.74211884]
[155.96241760 58.96052170]
[168.78608704 51.17892456]
[181.60977173 43.39732361]
[185.47581482 28.30787468]
[198.59169006 20.59890556]
[212.95335388 24.37757301]
[225.77703857 16.59597397]
[227.46545410 3.18757057]
[236.45515442 -6.64031124]
[249.27917480 -9.43107796]
[261.18081665 -4.38001251]
[274.17120361 -11.88001251]
[287.16156006 -19.38001251]
[300.15194702 -26.88001251]
[313.14233398 -34.38001251]
[326.13272095 -41.88001251]
[339.12310791 -49.38001251]
[352.11346436 -56.88001251]
[365.10385132 -64.38001251]
[350.28869629 -66.72762299]
[338.54193115 -76.05572510]
[332.89904785 -89.95384216]
[334.81817627 -104.83055878]
[343.80346680 -116.84159851]
[357.53295898 -122.88317108]
[372.45886230 -121.39408112]
[384.72415161 -112.75912476]
[391.15939331 -99.20966339]
[390.10159302 -84.24700165]
[381.82293701 -71.73658752]
[396.12869263 -76.24716949]
[410.43444824 -80.75775909]
[424.74020386 -85.26834869]
[439.04595947 -89.77893066]
[453.35171509 -94.28952026]
[467.65747070 -98.80010986]
[481.96322632 -103.31069183]
[496.26898193 -107.82128143]
[510.57473755 -112.33187103]
[522.64929199 -126.18814087]
[539.61138916 -121.81552124]
[553.81536865 -126.63711548]
[568.01934814 -131.45870972]
[578.41931152 -144.13829041]
[594.55395508 -141.20478821]
[599.82531738 -125.67594147]
[588.81066895 -113.52649689]
[572.84094238 -117.25475311]
[558.63696289 -112.43316650]
[544.43298340 -107.61157227]
[538.76953125 -96.86911774]
[526.91485596 -92.76277924]
[515.08532715 -98.02611542]
[500.77957153 -93.51552582]
[486.47381592 -89.00494385]
[472.16806030 -84.49435425]
[457.86230469 -79.98376465]
[443.55654907 -75.47318268]
[429.25079346 -70.96259308]
[414.94503784 -66.45200348]
[400.63928223 -61.94141769]
[386.33352661 -57.43083191]
[372.60385132 -51.38963318]
[359.61346436 -43.88963318]
[346.62310791 -36.38963318]
[333.63272095 -28.88963127]
[320.64233398 -21.38963127]
[307.65194702 -13.88963127]
[294.66156006 -6.38963127]
[281.67120361 1.11036861]
[268.68081665 8.61036873]
[265.05554199 24.99778175]
[250.43124390 33.89928818]
[233.55862427 29.41965103]
[220.73495483 37.20125198]
[217.45520020 51.68499374]
[204.56101990 59.75931931]
[189.39137268 56.22100449]
[176.56768799 64.00260162]
[163.74401855 71.78420258]
[150.92033386 79.56580353]
[138.09666443 87.34739685]
[125.27297974 95.12899780]
[112.44930267 102.91059875]
[127.08155823 99.60953522]
[141.83074951 102.34111023]
[154.31036377 110.66333008]
[162.50111389 123.22961426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[52 139]
[53 138]
[54 137]
[55 136]
[56 135]
[57 134]
[58 133]
[61 130]
[62 129]
[66 126]
[67 125]
[68 124]
[69 123]
[70 122]
[71 121]
[72 120]
[73 119]
[74 118]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
