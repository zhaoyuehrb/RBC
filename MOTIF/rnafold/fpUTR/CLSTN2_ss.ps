%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGCGCGGCUGCUGCCGGCGAGCUAGCGGCGCAGCGGCGGGAACCCGAGGCCGAGCGCCGCGGCGGCAGCGCUAGAAGCGCACCCAUCGGGCACGGCGAGGCGGCCCACGGUGCGGCAGGCACCGGGAGGCGAGAGCCGGCGCGGACAGUAGGCGGCGGCUGCAGCUCGUUGGCGGCUGCUGCGAGG\
) } def
/len { sequence length } bind def

/coor [
[122.19163513 490.87423706]
[106.85143280 490.11666870]
[93.95392609 481.77700806]
[86.96846771 468.09860229]
[87.77411652 452.76086426]
[96.15415192 439.88955688]
[109.85439301 432.94699097]
[110.59426117 417.96527100]
[111.33412170 402.98352051]
[112.07398987 388.00177002]
[112.81385803 373.02001953]
[113.55371857 358.03829956]
[106.45360565 344.94488525]
[114.86216736 331.54312134]
[115.60203552 316.56140137]
[116.34190369 301.57965088]
[117.08176422 286.59790039]
[117.82163239 271.61614990]
[118.56150055 256.63442993]
[119.30136108 241.65267944]
[120.04122925 226.67094421]
[120.78109741 211.68919373]
[121.52095795 196.70745850]
[122.26082611 181.72570801]
[123.00069427 166.74397278]
[123.74055481 151.76222229]
[124.48042297 136.78048706]
[76.76779175 136.93298340]
[57.33605957 94.01170349]
[42.34873962 94.62833405]
[27.36141968 95.24496460]
[12.37410069 95.86159515]
[-2.61321998 96.47822571]
[-17.60054016 97.09485626]
[-32.58786011 97.71148682]
[-49.09326935 109.26507568]
[-65.82901764 99.59961700]
[-80.78794861 100.70885468]
[-91.08494568 112.39686584]
[-106.27123260 113.30869293]
[-117.35050201 103.42004395]
[-132.30943298 104.52928162]
[-147.26837158 105.63851166]
[-160.51336670 115.30815125]
[-175.39849854 108.42591858]
[-176.61119080 92.07167053]
[-162.90394592 83.06925201]
[-148.37759399 90.67958069]
[-133.41867065 89.57035065]
[-118.45973969 88.46111298]
[-108.96014404 77.04650116]
[-93.80546570 75.70848846]
[-81.89718628 85.74992371]
[-66.93825531 84.64069366]
[-60.97571945 76.31682587]
[-51.20756149 72.57909393]
[-40.78226852 74.89134979]
[-33.20449066 82.72416687]
[-18.21717072 82.10753632]
[-3.22985101 81.49090576]
[11.75746918 80.87427521]
[26.74478912 80.25764465]
[41.73210907 79.64101410]
[56.71942902 79.02438354]
[63.60611343 65.69870758]
[55.43997955 53.11640930]
[41.43683624 45.75280762]
[40.99819565 30.86466217]
[32.83205795 18.28236389]
[17.63251686 14.87477303]
[9.53013325 1.99820399]
[12.87242126 -12.47123623]
[4.70628500 -25.05353355]
[-3.45985174 -37.63582993]
[-11.62598801 -50.21812820]
[-19.79212570 -62.80042648]
[-33.48688126 -72.79492188]
[-27.67406082 -88.72123718]
[-10.76100540 -87.54442596]
[-7.20982742 -70.96656036]
[0.95630932 -58.38426590]
[9.12244606 -45.80196762]
[17.28858185 -33.21966934]
[25.45471954 -20.63737297]
[40.03108597 -17.79746056]
[48.49195099 -5.15355158]
[45.41435623 10.11622810]
[53.58049393 22.69852638]
[66.99953461 29.16215706]
[68.02227783 44.95027161]
[76.18841553 57.53256989]
[90.89717865 54.59109116]
[93.59633636 39.83594131]
[96.29549408 25.08078766]
[98.99465179 10.32563400]
[97.45938110 1.30346227]
[101.86145782 -4.64914131]
[104.80293274 -19.35790443]
[95.82862091 -32.36702728]
[98.76379395 -47.89636230]
[111.86707306 -56.73263550]
[127.36450958 -53.63343811]
[136.06175232 -40.43746948]
[132.79887390 -24.97366714]
[119.51169586 -16.41642761]
[116.57022095 -1.70766425]
[113.74980164 13.02479172]
[111.05064392 27.77994537]
[108.35148621 42.53509903]
[105.65232849 57.29025269]
[122.30941772 62.50239182]
[135.72747803 74.00688171]
[146.54989624 63.62058258]
[157.37231445 53.23427963]
[168.19473267 42.84798050]
[179.01715088 32.46167755]
[189.83956909 22.07537460]
[191.60563660 6.12982464]
[205.24983215 -2.30909657]
[220.30551147 3.23222923]
[225.22323608 18.50297165]
[216.23054504 31.78872299]
[200.22587585 32.89779282]
[189.40345764 43.28409576]
[178.58103943 53.67039490]
[167.75862122 64.05670166]
[156.93620300 74.44300079]
[146.11378479 84.82929993]
[148.18370056 92.03800964]
[162.60118103 87.89839935]
[166.74057007 102.31594086]
[152.32353210 106.45542145]
[154.39344788 113.66413116]
[169.07751465 116.72647095]
[174.06687927 115.08040619]
[178.71986389 115.48371887]
[182.30889893 117.46175385]
[184.40213013 120.31905365]
[198.91728210 124.10195160]
[213.43244934 127.88484955]
[227.94760132 131.66773987]
[242.46275330 135.45063782]
[257.76815796 131.44374084]
[268.13275146 142.14068604]
[282.64788818 145.92358398]
[297.16305542 149.70648193]
[308.43722534 139.17573547]
[323.61907959 136.43446350]
[337.86416626 142.35740662]
[346.62692261 155.05456543]
[347.11114502 170.47433472]
[339.16238403 183.69630432]
[325.31701660 190.50140381]
[309.99307251 188.71815491]
[298.08035278 178.91557312]
[293.38015747 164.22163391]
[278.86499023 160.43873596]
[264.34985352 156.65583801]
[250.08267212 160.93331909]
[238.67985535 149.96578979]
[224.16470337 146.18290710]
[209.64955139 142.40000916]
[195.13439941 138.61711121]
[180.61923218 134.83421326]
[166.01518250 131.41055298]
[151.33110046 128.34820557]
[139.46215820 137.52035522]
[138.72230530 152.50209045]
[137.98243713 167.48384094]
[137.24256897 182.46557617]
[136.50270081 197.44732666]
[135.76283264 212.42906189]
[135.02296448 227.41079712]
[134.28311157 242.39254761]
[133.54324341 257.37429810]
[132.80337524 272.35601807]
[132.06350708 287.33776855]
[131.32363892 302.31951904]
[130.58378601 317.30126953]
[129.84391785 332.28298950]
[136.89111328 346.44799805]
[128.53546143 358.77816772]
[127.79560089 373.75988770]
[127.05573273 388.74163818]
[126.31586456 403.72338867]
[125.57600403 418.70510864]
[124.83613586 433.68685913]
[137.78567505 441.94549561]
[144.85675049 455.57986450]
[144.14726257 470.92233276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 187]
[8 186]
[9 185]
[10 184]
[11 183]
[12 182]
[14 180]
[15 179]
[16 178]
[17 177]
[18 176]
[19 175]
[20 174]
[21 173]
[22 172]
[23 171]
[24 170]
[25 169]
[26 168]
[27 167]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[37 54]
[38 53]
[41 50]
[42 49]
[43 48]
[65 91]
[66 90]
[68 88]
[69 87]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[92 110]
[93 109]
[94 108]
[95 107]
[97 106]
[98 105]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
[133 166]
[134 165]
[138 164]
[139 163]
[140 162]
[141 161]
[142 160]
[144 158]
[145 157]
[146 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
