%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGGCGCGACUUCCGGGGCGGCGGUUGCAUCAGAUUCUAGGAAGUGUCUGUAGCCGCAGCUGCGGGUCCGGGAUUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[108.83713531 305.77648926]
[118.18131256 292.73556519]
[117.07352448 277.77651978]
[115.96573639 262.81747437]
[114.85794830 247.85844421]
[113.75016022 232.89939880]
[111.54063416 218.06303406]
[108.24143982 203.43034363]
[103.58694458 197.45539856]
[105.10128784 188.19624329]
[102.34504700 173.45164490]
[99.58880615 158.70706177]
[96.02290344 155.20426941]
[94.77934265 149.34358215]
[97.21598816 142.77423096]
[95.55619812 127.86634064]
[93.89640808 112.95845795]
[85.76401520 101.58498383]
[91.19570923 88.70133209]
[89.53591919 73.79344940]
[87.87612915 58.88556290]
[78.65931702 46.02628708]
[84.94079590 32.52101898]
[83.28100586 17.61313248]
[81.62121582 2.70524478]
[79.96142578 -12.20264244]
[78.30163574 -27.11052895]
[76.64184570 -42.01841736]
[74.98205566 -56.92630386]
[73.32225800 -71.83419037]
[71.66246796 -86.74208069]
[68.25017548 -91.32706451]
[67.22447205 -96.26982880]
[68.28481293 -100.53327942]
[70.73918915 -103.37882233]
[70.73918915 -118.37882233]
[70.73918915 -133.37881470]
[63.00188446 -147.17900085]
[70.73918915 -159.90626526]
[70.73918915 -174.90626526]
[62.07548523 -188.83006287]
[70.03961182 -203.16549683]
[86.43875885 -203.16549683]
[94.40288544 -188.83006287]
[85.73918915 -174.90626526]
[85.73918915 -159.90626526]
[93.47648621 -147.17900085]
[85.73918915 -133.37881470]
[85.73918915 -118.37882233]
[85.73918915 -103.37882233]
[86.57035828 -88.40187073]
[88.23014832 -73.49398041]
[89.88993835 -58.58609390]
[91.54972839 -43.67820740]
[93.20951843 -28.77031898]
[94.86930847 -13.86243248]
[96.52909851 1.04545450]
[98.18888855 15.95334148]
[99.84867859 30.86122894]
[108.94677734 42.65419006]
[102.78401184 57.22577286]
[104.44380188 72.13365936]
[106.10359192 87.04154205]
[114.23598480 98.41501617]
[108.80429077 111.29866791]
[110.46408081 126.20655060]
[112.12387085 141.11444092]
[114.33339691 155.95080566]
[117.08964539 170.69540405]
[119.84588623 185.44000244]
[122.87412262 200.13114929]
[126.17331696 214.76382446]
[129.66950989 218.21745300]
[131.52706909 222.23873901]
[131.78286743 226.18315125]
[130.69953918 229.49745178]
[128.70919800 231.79161072]
[129.81698608 246.75065613]
[130.92477417 261.70968628]
[132.03256226 276.66873169]
[133.14035034 291.62777710]
[144.30355835 303.15002441]
[142.11241150 319.04272461]
[128.24777222 327.11437988]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 72]
[8 71]
[10 70]
[11 69]
[12 68]
[15 67]
[16 66]
[17 65]
[19 63]
[20 62]
[21 61]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[29 53]
[30 52]
[31 51]
[35 50]
[36 49]
[37 48]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
