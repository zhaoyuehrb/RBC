%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGAGGGUUCUGUGCUCAAAUGUUUCUAUUAUUCUGUUCAAGGUAAAAUUCCUGCAUUCCUGCAAAG\
) } def
/len { sequence length } bind def

/coor [
[116.89583588 177.39958191]
[112.32375336 163.11337280]
[99.00624084 156.54225159]
[94.16598511 142.11912537]
[101.14867401 128.19505310]
[96.57659149 113.90883636]
[86.35766602 104.36602020]
[89.13719177 90.66325378]
[84.56510925 76.37703705]
[79.99301910 62.09081650]
[64.92780304 59.89979935]
[52.35905457 51.41961288]
[44.74975204 38.37665558]
[43.56289673 23.38491249]
[48.98049545 9.42213917]
[59.87806320 -0.76159823]
[55.30597687 -15.04781628]
[50.73389053 -29.33403397]
[46.16180420 -43.62025070]
[31.13733673 -42.45314407]
[16.24879646 -44.78297424]
[2.29910398 -50.48409653]
[-9.95945358 -59.24905396]
[-19.86578560 -70.60516357]
[-26.88565826 -83.94001007]
[-30.64049721 -98.53446198]
[-30.92780876 -113.60144806]
[-27.73209953 -128.32843018]
[-21.22570801 -141.92121887]
[-11.75951862 -153.64674377]
[0.15597099 -162.87266541]
[13.87817287 -169.10147095]
[28.66706657 -171.99720764]
[43.72510529 -171.40374756]
[58.24022675 -167.35307312]
[71.42964935 -160.06364441]
[82.58208466 -149.92855835]
[91.09609985 -137.49440002]
[96.51253510 -123.43172455]
[98.53929901 -108.49890900]
[97.06708527 -93.50126648]
[92.17528534 -79.24759674]
[84.12771606 -66.50659180]
[73.35836792 -55.96534348]
[60.44802094 -48.19233704]
[65.02011108 -33.90612030]
[69.59219360 -19.61990356]
[74.16428375 -5.33368492]
[88.94964600 -3.36937881]
[101.46740723 4.85345507]
[109.20533752 17.74862862]
[110.58271790 32.78601456]
[105.27303314 46.98792267]
[94.27923584 57.51873016]
[98.85132599 71.80494690]
[103.42340851 86.09116364]
[113.64233398 95.63397980]
[110.86280823 109.33674622]
[115.43489075 123.62296295]
[129.20446777 130.90559387]
[133.63769531 145.45898438]
[126.60997009 158.54127502]
[131.18205261 172.82749939]
[145.95993042 177.55972290]
[155.10678101 190.09425354]
[155.10545349 205.61132812]
[145.95646667 218.14431763]
[131.17778015 222.87400818]
[116.45210266 217.98175049]
[107.44176483 205.34872437]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[16 48]
[17 47]
[18 46]
[19 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
