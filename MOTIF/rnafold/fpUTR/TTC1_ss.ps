%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUUAGUCGUCAUCGACGGAAGUGCACCUGACUGAGCGGAAGUAGGAGCUCUCAGAGGCUAAGAAGGUGGAGACCGGAGAAGCUGUGAGGUUCUUUAGCGUCACCUCCCUCACUGGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[6.45882893 267.05816650]
[-2.72276068 278.91979980]
[-11.90435028 290.78143311]
[-7.05970287 303.75451660]
[-9.26990986 317.31512451]
[-17.84661674 327.90954590]
[-30.44750595 332.81564331]
[-43.71515274 330.84182739]
[-53.19428253 342.46704102]
[-62.67341232 354.09228516]
[-72.15254211 365.71752930]
[-74.23707581 381.98364258]
[-89.46856689 388.06097412]
[-102.17816162 377.69766235]
[-99.29132080 361.55459595]
[-83.77777863 356.23840332]
[-74.29864502 344.61315918]
[-64.81951904 332.98791504]
[-55.34038544 321.36270142]
[-60.05013657 305.69180298]
[-54.47421265 290.13192749]
[-40.60834503 280.83483887]
[-23.76598740 281.59985352]
[-14.58439636 269.73822021]
[-5.40280724 257.87658691]
[3.16621614 245.56512451]
[11.10067654 232.83546448]
[11.97871971 225.41020203]
[19.40083885 219.88740540]
[27.65522957 207.36282349]
[35.58968735 194.63316345]
[43.19912720 181.70657349]
[50.80856323 168.77999878]
[46.83820343 154.47015381]
[54.37110901 141.25236511]
[69.40751648 137.18490601]
[77.01695251 124.25832367]
[84.62638855 111.33174133]
[81.09626007 97.27883148]
[88.44673157 84.79216766]
[102.44702911 81.05882263]
[110.05646515 68.13224030]
[110.38945007 52.31453705]
[123.51372528 45.27162933]
[131.12316895 32.34505081]
[138.40269470 19.22985268]
[145.34764099 5.93445110]
[152.29258728 -7.36094904]
[159.23754883 -20.65634918]
[166.18249512 -33.95175171]
[173.12744141 -47.24715042]
[174.35432434 -56.41688156]
[180.42045593 -60.78808975]
[187.69998169 -73.90328979]
[194.97950745 -87.01848602]
[202.25904846 -100.13368988]
[199.46661377 -112.80225372]
[205.89073181 -123.60704041]
[217.58164978 -126.98067474]
[225.19110107 -139.90725708]
[232.80053711 -152.83383179]
[240.40997314 -165.76040649]
[232.00859070 -178.45600891]
[229.96084595 -193.47911072]
[234.61981201 -207.84275818]
[245.01048279 -218.71450806]
[259.03317261 -223.97503662]
[273.88778687 -222.63108826]
[281.49722290 -235.55766296]
[289.10665894 -248.48423767]
[288.70401001 -264.87844849]
[302.83956909 -273.19213867]
[316.97192383 -264.87292480]
[316.56286621 -248.47888184]
[302.03323364 -240.87480164]
[294.42379761 -227.94822693]
[286.81436157 -215.02165222]
[295.19842529 -202.68579102]
[297.40414429 -187.87214661]
[292.94107056 -173.51101685]
[282.64328003 -162.46675110]
[268.51409912 -156.96646118]
[253.33654785 -158.15097046]
[245.72711182 -145.22439575]
[238.11767578 -132.29782104]
[230.50823975 -119.37123871]
[231.35720825 -101.89169312]
[215.37423706 -92.85415649]
[208.09471130 -79.73896027]
[200.81518555 -66.62375641]
[193.53564453 -53.50856018]
[186.42283630 -40.30220032]
[179.47789001 -27.00679970]
[172.53294373 -13.71140003]
[165.58799744 -0.41599956]
[158.64303589 12.87940121]
[151.69808960 26.17480087]
[152.28889465 31.01921654]
[149.76171875 36.27037811]
[144.04974365 39.95448685]
[136.44030762 52.88106918]
[136.65161133 67.77417755]
[122.98304749 75.74167633]
[115.37361145 88.66825867]
[118.90373993 102.72116852]
[111.55326843 115.20783234]
[97.55297089 118.94117737]
[89.94353485 131.86776733]
[82.33409882 144.79434204]
[86.07492828 159.91531372]
[78.17373657 172.91630554]
[63.73514175 176.38943481]
[56.12570572 189.31600952]
[48.51626968 202.24259949]
[48.06711578 209.02474976]
[44.70222092 213.78277588]
[40.17980576 215.61721802]
[31.92541504 228.14178467]
[23.83033943 240.76992798]
[15.89587975 253.49958801]
[15.92666626 258.10559082]
[14.56208992 262.04492188]
[12.20464039 264.94696045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[8 19]
[9 18]
[10 17]
[11 16]
[26 120]
[27 119]
[29 118]
[30 117]
[31 114]
[32 113]
[33 112]
[36 109]
[37 108]
[38 107]
[41 104]
[42 103]
[44 101]
[45 100]
[46 97]
[47 96]
[48 95]
[49 94]
[50 93]
[51 92]
[53 91]
[54 90]
[55 89]
[56 88]
[59 86]
[60 85]
[61 84]
[62 83]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
