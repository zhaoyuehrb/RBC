%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAGCCACUGGGCAGCCCGGGGCACUCCUGCAGCGUCCCCUGGCCCUCUCCAGGGCAGGGGAAGGUUGGGCAGUCCUGGGCGGCCAGCACCCCGGCGUGCAUGUCUCCUGAGCAGCUGCCCAUCGGGCCUCUGCUGGCCUGGGGGCUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[83.51051331 305.94738770]
[80.75012970 290.76898193]
[86.65512085 276.51644897]
[99.34123993 267.73773193]
[98.72940826 252.75021362]
[98.11757660 237.76271057]
[97.50575256 222.77519226]
[89.25576019 210.37409973]
[96.42373657 196.26982117]
[95.81190491 181.28230286]
[95.20007324 166.29478455]
[94.58824921 151.30726624]
[93.97641754 136.31974792]
[93.36458588 121.33222961]
[72.29429626 96.31012726]
[98.76657867 66.46238708]
[85.12210083 60.23116302]
[71.47761536 53.99993896]
[57.83313751 47.76871109]
[44.18865967 41.53748703]
[30.54417801 35.30626297]
[16.89969826 29.07503700]
[3.25521803 22.84381104]
[-10.38926220 16.61258698]
[-25.04206848 21.89775276]
[-38.79074478 15.38403416]
[-43.73904419 1.38225102]
[-57.38352585 -4.84897423]
[-71.02800751 -11.08019924]
[-86.79527283 -9.77490234]
[-95.15821838 -22.10009766]
[-108.80269623 -28.33132362]
[-118.98472595 -22.05652618]
[-130.81208801 -21.51012802]
[-141.31373596 -26.71270370]
[-147.90818787 -36.25527954]
[-149.03771973 -47.67877579]
[-162.41668701 -54.46135330]
[-175.79565430 -61.24393463]
[-189.17460632 -68.02651215]
[-202.55357361 -74.80908966]
[-215.93254089 -81.59166718]
[-229.31149292 -88.37424469]
[-238.44123840 -89.47708130]
[-242.89208984 -95.43407440]
[-256.12991333 -102.48815155]
[-269.36773682 -109.54222870]
[-282.60556030 -116.59631348]
[-298.96789551 -115.49838257]
[-307.87393188 -129.26844788]
[-300.16186523 -143.74104309]
[-283.76522827 -144.02801514]
[-275.55148315 -129.83413696]
[-262.31365967 -122.78005219]
[-249.07583618 -115.72597504]
[-235.83801270 -108.67189789]
[-222.52891541 -101.75321198]
[-209.14996338 -94.97063446]
[-195.77099609 -88.18804932]
[-182.39202881 -81.40547180]
[-169.01307678 -74.62289429]
[-155.63410950 -67.84031677]
[-142.25514221 -61.05773926]
[-125.28642273 -67.80890656]
[-108.45781708 -59.93359375]
[-102.57147217 -41.97580338]
[-88.92699432 -35.74457932]
[-74.13566589 -37.49557495]
[-64.79677582 -24.72467995]
[-51.15229797 -18.49345398]
[-37.50782013 -12.26222897]
[-23.68553162 -17.69177246]
[-9.75932217 -11.56679440]
[-4.15803671 2.96810675]
[9.48644352 9.19933224]
[23.13092232 15.43055725]
[36.77540207 21.66178131]
[50.41988373 27.89300728]
[64.06436157 34.12423325]
[77.70883942 40.35545731]
[91.35332489 46.58668137]
[104.99780273 52.81790924]
[119.65500641 49.62942886]
[129.47792053 38.29318619]
[139.30082703 26.95694160]
[138.35792542 11.40867233]
[148.48123169 0.05204026]
[163.30995178 -0.75105929]
[173.13285828 -12.08730316]
[182.95576477 -23.42354584]
[192.77868652 -34.75978851]
[191.40136719 -50.50394821]
[201.62411499 -62.55678940]
[217.38195801 -63.76757050]
[229.32603455 -53.41796494]
[230.37014771 -37.64820099]
[219.89483643 -25.81420898]
[204.11492920 -24.93687820]
[194.29200745 -13.60063553]
[184.46910095 -2.26439190]
[174.64619446 9.07185173]
[175.96160889 23.86391830]
[166.16127014 35.50041199]
[150.63706970 36.77985382]
[140.81416321 48.11609650]
[130.99125671 59.45233917]
[132.88308716 66.70981598]
[145.51841736 58.62598419]
[157.11111450 68.14487457]
[151.64042664 82.11167908]
[136.66676331 81.22476959]
[138.55859375 88.48224640]
[152.66557312 93.58058167]
[166.77255249 98.67892456]
[180.87954712 103.77725983]
[194.98652649 108.87560272]
[209.15979004 102.41368103]
[223.39364624 107.78507996]
[229.46675110 121.33694458]
[243.57373047 126.43527985]
[257.68072510 131.53361511]
[271.78768921 136.63195801]
[288.73895264 136.32913208]
[293.72250366 152.53408813]
[279.53042603 161.80886841]
[266.68936157 150.73893738]
[252.58236694 145.64060974]
[238.47538757 140.54226685]
[224.36840820 135.44392395]
[211.03466797 141.98204041]
[196.65556335 137.01255798]
[189.88818359 122.98258209]
[175.78120422 117.88424683]
[161.67422485 112.78590393]
[147.56723022 107.68756104]
[133.46025085 102.58922577]
[122.54455566 116.52162933]
[108.35210419 120.72040558]
[108.96393585 135.70791626]
[109.57576752 150.69543457]
[110.18759155 165.68295288]
[110.79942322 180.67047119]
[111.41124725 195.65798950]
[119.70500183 209.13108826]
[112.49327087 222.16336060]
[113.10509491 237.15087891]
[113.71692657 252.13839722]
[114.32875061 267.12591553]
[127.68820190 274.84140015]
[134.73526001 288.56518555]
[133.22125244 303.91806030]
[123.62926483 316.00100708]
[109.02008820 320.95837402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 148]
[5 147]
[6 146]
[7 145]
[9 143]
[10 142]
[11 141]
[12 140]
[13 139]
[14 138]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[27 71]
[28 70]
[29 69]
[31 67]
[32 66]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 56]
[46 55]
[47 54]
[48 53]
[83 106]
[84 105]
[85 104]
[88 101]
[89 100]
[90 99]
[91 98]
[112 136]
[113 135]
[114 134]
[115 133]
[116 132]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
