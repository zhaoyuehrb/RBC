%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAAAUAAGGAAGUCCUCUCCUCUGUGUGCAUGGCUGCUCUUGCUACAUAAGACCUGGAACACAGGACUGCUGUCUGCCCUCUCUGCUCGCCCUGCCUAGCUUGAGGAUCUGUCACCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[68.54532623 116.42427826]
[63.76802826 130.64318848]
[58.99072647 144.86210632]
[54.21342850 159.08100891]
[57.99144363 175.03903198]
[45.87638092 186.09152222]
[30.33118248 180.86860657]
[27.34741211 164.74319458]
[39.99451828 154.30371094]
[44.77181625 140.08479309]
[49.54911804 125.86589050]
[54.32641602 111.64698029]
[65.92558289 96.80870056]
[80.68598938 90.99090576]
[94.02537537 94.09519958]
[94.02537537 79.09519958]
[94.02537537 64.09519958]
[94.02537537 49.09520340]
[94.02537537 34.09520340]
[94.02537537 19.09520340]
[82.25531769 11.80352783]
[75.70235443 -0.26982394]
[75.99694824 -13.89510155]
[82.95385742 -25.48768044]
[94.64926910 -32.05112457]
[95.02323151 -47.04646301]
[95.39719391 -62.04180145]
[87.36423492 -69.57861328]
[84.91692352 -80.09162903]
[88.64009857 -89.98756409]
[97.05136871 -96.02233124]
[98.17232513 -110.98039246]
[99.29327393 -125.93844604]
[92.60889435 -140.27824402]
[101.27567291 -152.39170837]
[102.39662170 -167.34977722]
[103.51757812 -182.30783081]
[95.12656403 -198.64179993]
[105.44237518 -212.78059387]
[106.19006348 -227.76194763]
[90.42477417 -237.12280273]
[81.54306030 -253.06692505]
[81.87899017 -271.23092651]
[91.25712585 -286.69219971]
[107.06298065 -295.30310059]
[106.68901825 -310.29846191]
[96.71336365 -325.71575928]
[105.57014465 -340.81143188]
[104.82245636 -355.79278564]
[104.07476807 -370.77413940]
[92.63881683 -381.35037231]
[92.09397125 -396.55426025]
[102.24726868 -407.39151001]
[101.49958038 -422.37286377]
[93.08401489 -435.77020264]
[100.17729950 -448.86734009]
[99.42961121 -463.84869385]
[98.68192291 -478.83004761]
[97.93423462 -493.81140137]
[87.05138397 -505.59881592]
[89.62413025 -521.43420410]
[103.67888641 -529.17004395]
[118.43404388 -522.87207031]
[122.57070923 -507.37149048]
[112.91558838 -494.55908203]
[113.66327667 -479.57772827]
[114.41096497 -464.59637451]
[115.15865326 -449.61502075]
[123.52073669 -437.28924561]
[116.48093414 -423.12054443]
[117.22862244 -408.13919067]
[128.41050720 -398.36672974]
[129.38218689 -383.18417358]
[119.05612183 -371.52182007]
[119.80381012 -356.54046631]
[120.55149841 -341.55911255]
[129.34367371 -333.15139771]
[130.02757263 -320.60250854]
[121.68435669 -310.67242432]
[122.05831909 -295.67706299]
[133.24832153 -291.46624756]
[142.35881042 -283.66998291]
[148.28265381 -273.20443726]
[150.28935242 -261.31185913]
[148.11500549 -249.41334534]
[141.99676514 -238.93888855]
[132.64720154 -231.15554810]
[121.17141724 -227.01425171]
[120.42372894 -212.03289795]
[128.33508301 -202.79153442]
[127.76610565 -190.23690796]
[118.47563171 -181.18687439]
[117.35468292 -166.22882080]
[116.23372650 -151.27076721]
[122.99828339 -138.00086975]
[114.25132751 -124.81749725]
[113.13037872 -109.85943604]
[112.00942993 -94.90138245]
[121.71958923 -78.25489044]
[110.39253235 -61.66783905]
[110.01856995 -46.67250061]
[109.64460754 -31.67716408]
[122.96613312 -22.17128754]
[128.08564758 -6.45316410]
[122.81338501 9.38890076]
[109.02537537 19.09520340]
[109.02537537 34.09520340]
[109.02537537 49.09520340]
[109.02537537 64.09519958]
[109.02537537 79.09519958]
[109.02537537 94.09519958]
[112.18062592 108.75959778]
[118.34992981 122.43218231]
[124.51923370 136.10476685]
[139.38865662 141.45974731]
[146.04071045 155.79591370]
[140.52882385 170.60789490]
[126.12312317 177.10800171]
[111.37024689 171.43981934]
[105.02281189 156.96620178]
[110.84664917 142.27407837]
[104.67733765 128.60148621]
[98.50803375 114.92890167]
[91.01735687 115.30274963]
[84.17447662 128.65097046]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[15 111]
[16 110]
[17 109]
[18 108]
[19 107]
[20 106]
[25 102]
[26 101]
[27 100]
[31 98]
[32 97]
[33 96]
[35 94]
[36 93]
[37 92]
[39 89]
[40 88]
[45 80]
[46 79]
[48 76]
[49 75]
[50 74]
[53 71]
[54 70]
[56 68]
[57 67]
[58 66]
[59 65]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
