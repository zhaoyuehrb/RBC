%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCGAAAACGCAACCGGGUGAGGGAGCGCUUCCGCCCGGAGAGAGCUGGCCGGGAUGAGGCGCCGGCUUUCCCGGGUCUUCUCCAGCUGCCACCGCUUUACUGCAAAACUGACGGGCGCAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[77.35022736 299.89837646]
[62.49902344 302.77880859]
[47.48483276 300.92697144]
[33.77859116 294.52432251]
[22.72309685 284.19808960]
[15.40145588 270.95993042]
[12.53096676 256.10678101]
[14.39285088 241.09384155]
[20.80469894 227.39190674]
[31.13834572 216.34332275]
[44.38140488 209.03056335]
[59.23645401 206.17002869]
[61.07261276 191.28282166]
[51.73506165 179.73529053]
[53.38511658 164.61140442]
[65.56054688 154.89561462]
[67.39671326 140.00842285]
[69.23287201 125.12122345]
[87.95821381 90.19575500]
[83.25299072 75.95283508]
[78.54776001 61.70991135]
[73.75359344 56.91167831]
[72.39038086 51.25708008]
[73.97977448 46.65127182]
[69.97908020 32.19462967]
[58.84137344 20.95799065]
[62.90387344 6.62811422]
[58.90318298 -7.82852697]
[54.90249252 -22.28516769]
[38.21736908 -24.05782890]
[23.50336266 -32.04600143]
[12.97409153 -45.01624298]
[8.20149994 -60.98802185]
[9.88122845 -77.53610229]
[17.73135948 -92.15882111]
[30.53928375 -102.65625763]
[25.83405876 -116.89917755]
[21.12883186 -131.14210510]
[16.42360687 -145.38502502]
[11.71837997 -159.62794495]
[7.01315403 -173.87086487]
[1.29153800 -181.12951660]
[2.37188220 -188.52142334]
[-1.98238790 -202.87551880]
[-6.33665800 -217.22962952]
[-10.69092846 -231.58374023]
[-15.04519844 -245.93783569]
[-19.39946938 -260.29193115]
[-23.75373840 -274.64605713]
[-28.10800934 -289.00015259]
[-32.46228027 -303.35424805]
[-38.00403595 -310.75112915]
[-36.74261093 -318.11428833]
[-40.74330139 -332.57092285]
[-55.32143021 -337.88674927]
[-63.96289062 -350.77490234]
[-63.34486389 -366.27966309]
[-53.70499420 -378.43911743]
[-38.75001144 -382.57772827]
[-24.23040390 -377.10409546]
[-15.72926521 -364.12295532]
[-16.51545143 -348.62579346]
[-26.28666115 -336.57162476]
[-22.28596878 -322.11499023]
[-18.10817337 -307.70852661]
[-13.75390339 -293.35443115]
[-9.39963341 -279.00030518]
[-5.04536343 -264.64620972]
[-0.69109333 -250.29211426]
[3.66317677 -235.93800354]
[8.01744652 -221.58389282]
[12.37171745 -207.22979736]
[16.72598648 -192.87568665]
[21.25607681 -178.57609558]
[25.96130180 -164.33317566]
[30.66652870 -150.09025574]
[35.37175369 -135.84733582]
[40.07698059 -121.60440826]
[44.78220749 -107.36148071]
[58.14970016 -107.22026825]
[70.83557129 -102.93174744]
[81.58351898 -94.90563202]
[89.32448578 -83.92249298]
[93.28303528 -71.05788422]
[93.05496979 -57.57703781]
[88.64859772 -44.81038666]
[80.48526001 -34.02230453]
[69.35913086 -26.28586006]
[73.35982513 -11.82921791]
[77.36051178 2.62742281]
[88.21206665 12.83002567]
[84.43572235 28.19393921]
[88.43641663 42.65058136]
[92.79068756 57.00468445]
[97.49591064 71.24760437]
[102.20113373 85.49053192]
[113.06484222 95.83364105]
[127.52148438 99.83432770]
[141.14732361 91.82733154]
[156.42283630 95.88126373]
[164.28532410 109.59099579]
[160.07011414 124.82279205]
[146.27803040 132.53988647]
[131.09164429 128.16387939]
[123.52079010 114.29096985]
[109.06414795 110.29027557]
[102.82813263 114.45705414]
[113.59699249 124.89887238]
[125.83280182 133.57556152]
[125.62456512 148.57412720]
[113.15258789 156.90777588]
[99.21595001 151.36068726]
[95.88200378 136.73565674]
[90.35608673 122.79061127]
[84.12006378 126.95738983]
[82.28390503 141.84457397]
[80.44774628 156.73176575]
[89.89755249 169.11477661]
[87.82334900 184.18635559]
[75.95980835 193.11898804]
[74.12364960 208.00617981]
[87.83845520 214.39047241]
[98.90777588 224.70188904]
[106.24715424 237.93022156]
[109.13755035 252.77949524]
[107.29578400 267.79492188]
[100.90230560 281.50546265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 121]
[13 120]
[16 117]
[17 116]
[18 115]
[19 96]
[20 95]
[21 94]
[24 93]
[25 92]
[27 90]
[28 89]
[29 88]
[36 79]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[53 64]
[54 63]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
