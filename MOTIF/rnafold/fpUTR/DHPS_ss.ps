%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCACGUUCCCUACUUCCUGUGCUCUUGCGGAGACGCGCGCGUCGGGGUUUAACGCGUUUCUGGGCCGCCGUAAGCCCGGCCUAGGGGCAGCUUUGACUCGAGAGCCGGCUAUAGGCGC\
) } def
/len { sequence length } bind def

/coor [
[68.34705353 388.23687744]
[61.04328156 401.92755127]
[47.07254791 408.68020630]
[31.80688286 405.89828491]
[21.11624146 394.65151978]
[19.11139870 379.26449585]
[26.56325340 365.65386963]
[40.60641861 359.05316162]
[43.29563141 344.29620361]
[36.65127182 334.09912109]
[38.85403824 321.72036743]
[49.25261307 313.95913696]
[52.32089615 299.27630615]
[55.38917542 284.59347534]
[58.45745850 269.91064453]
[48.57192612 260.84036255]
[44.45481873 247.95745850]
[47.29332733 234.62278748]
[56.44512177 224.37149048]
[69.57979584 219.97573853]
[73.02510834 205.37678528]
[76.47042084 190.77781677]
[74.92618561 183.45849609]
[80.19696808 175.84967041]
[84.01703644 161.34425354]
[87.83709717 146.83883667]
[91.65716553 132.33341980]
[95.47723389 117.82800293]
[87.59041595 105.06877136]
[72.90757751 102.00048828]
[58.22474289 98.93220520]
[43.54190826 95.86392975]
[28.14033508 101.49629974]
[15.73709202 90.76821899]
[19.09157181 74.71582031]
[34.75297165 69.85243225]
[46.61018753 81.18109131]
[61.29302216 84.24937439]
[75.97586060 87.31764984]
[90.65869141 90.38593292]
[104.47964478 84.55658722]
[112.53009033 71.89995575]
[113.40804291 56.10312653]
[126.76726532 49.51674271]
[134.81770325 36.86011124]
[142.86814880 24.20347786]
[150.91859436 11.54684448]
[158.96903992 -1.10978913]
[167.01948547 -13.76642227]
[175.06993103 -26.42305565]
[183.12036133 -39.07968903]
[191.17080688 -51.73632431]
[176.23716736 -50.32689667]
[164.53091431 -59.70579147]
[162.64936829 -74.58731842]
[171.65292358 -86.58465576]
[186.46740723 -88.93643951]
[198.74380493 -80.31726074]
[201.56367493 -65.58574677]
[211.46595764 -76.85272980]
[221.36824036 -88.11970520]
[231.27052307 -99.38668823]
[241.17280579 -110.65366364]
[251.07508850 -121.92064667]
[260.97735596 -133.18762207]
[270.87963867 -144.45460510]
[280.78192139 -155.72158813]
[290.68420410 -166.98855591]
[300.58648682 -178.25553894]
[310.48876953 -189.52252197]
[306.14767456 -204.32652283]
[310.52127075 -219.12095642]
[322.21398926 -229.18496704]
[337.49468994 -231.30715942]
[351.48736572 -224.81036377]
[359.72702026 -211.76768494]
[359.58441162 -196.34097290]
[351.10501099 -183.45286560]
[336.99459839 -177.21588135]
[321.75576782 -179.62023926]
[311.85348511 -168.35325623]
[301.95120239 -157.08627319]
[292.04891968 -145.81930542]
[282.14663696 -134.55232239]
[272.24435425 -123.28533936]
[262.34207153 -112.01836395]
[252.43978882 -100.75138092]
[242.53750610 -89.48440552]
[232.63522339 -78.21743011]
[222.73294067 -66.95044708]
[212.83065796 -55.68346786]
[203.82743835 -43.68587875]
[195.77700806 -31.02924728]
[187.72656250 -18.37261391]
[179.67611694 -5.71597958]
[171.62567139 6.94065380]
[163.57522583 19.59728813]
[155.52478027 32.25392151]
[147.47434998 44.91055298]
[139.42390442 57.56718826]
[139.12176514 72.45872498]
[125.18672180 79.95039368]
[117.13627625 92.60703278]
[109.98265076 121.64807129]
[106.16258240 136.15348816]
[102.34251404 150.65890503]
[98.52245331 165.16432190]
[94.70238495 179.66973877]
[91.06938934 194.22312927]
[87.62407684 208.82209778]
[84.17875671 223.42106628]
[95.36723328 236.03038025]
[96.86450958 252.65518188]
[88.28088379 266.77792358]
[73.14028931 272.97891235]
[70.07201385 287.66174316]
[67.00373077 302.34460449]
[63.93544769 317.02743530]
[70.11954498 334.31356812]
[58.05259705 346.98541260]
[55.36338806 361.74240112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 121]
[9 120]
[12 118]
[13 117]
[14 116]
[15 115]
[20 111]
[21 110]
[22 109]
[24 108]
[25 107]
[26 106]
[27 105]
[28 104]
[29 40]
[30 39]
[31 38]
[32 37]
[41 103]
[42 102]
[44 100]
[45 99]
[46 98]
[47 97]
[48 96]
[49 95]
[50 94]
[51 93]
[52 92]
[59 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
