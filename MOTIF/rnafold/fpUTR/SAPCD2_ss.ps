%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAUUCAAAAGUAGUCGCUAUUGUCGCCGUGGGCUGAGCUCGCCGGGCCGGCCCCUCCGUGGGGCCGCGCUGGGACGCACGCGGGUGGACGAGGGGACCGAUCCCGGGCGCCC\
) } def
/len { sequence length } bind def

/coor [
[87.96036530 116.18885040]
[75.17602539 124.03491211]
[62.39168549 131.88098145]
[49.60734940 139.72703552]
[53.10141754 154.43243408]
[51.88077545 169.47746277]
[46.07751083 183.38969421]
[36.27156067 194.81153870]
[23.43280983 202.63259888]
[8.82513714 206.09768677]
[-6.11797619 204.87969971]
[-19.93412590 199.11045837]
[-31.27510262 189.36657715]
[-44.05944061 197.21264648]
[-56.84378052 205.05870056]
[-69.62812042 212.90476990]
[-82.41245270 220.75082397]
[-92.74931335 234.18904114]
[-108.52388763 227.97622681]
[-106.92070770 211.09825134]
[-90.25852203 207.96649170]
[-77.47418213 200.12042236]
[-64.68984222 192.27436829]
[-51.90550232 184.42829895]
[-39.12116623 176.58224487]
[-42.67383194 162.05848694]
[-41.56190872 147.12751770]
[-35.88173676 133.25251770]
[-26.17794609 121.79705811]
[-13.39125919 113.89115906]
[1.23270142 110.31977081]
[16.26475143 111.44487000]
[30.23181534 117.16881561]
[41.76128769 126.94269562]
[54.54562378 119.09663391]
[67.32996368 111.25057220]
[80.11430359 103.40451050]
[80.38405609 91.27624512]
[87.82624054 80.76743317]
[100.57019806 75.95182037]
[114.55704498 79.24847412]
[118.14678192 64.68434906]
[111.57455444 45.71943665]
[125.28190613 32.19115448]
[128.08471680 17.45533943]
[130.68943787 2.68322229]
[133.09561157 -12.12253189]
[127.67220306 -26.98514557]
[137.35090637 -38.30645370]
[139.75708008 -53.11220551]
[142.16323853 -67.91796112]
[144.37042236 -82.75468445]
[146.37821960 -97.61969757]
[148.38601685 -112.48471832]
[150.39381409 -127.34973907]
[152.40161133 -142.21475220]
[154.40940857 -157.07977295]
[156.41720581 -171.94479370]
[147.87638855 -185.52543640]
[153.30487061 -200.62216187]
[168.53837585 -205.65405273]
[181.89106750 -196.76106262]
[183.11990356 -180.76515198]
[171.28222656 -169.93699646]
[169.27442932 -155.07197571]
[167.26663208 -140.20695496]
[165.25883484 -125.34194183]
[163.25103760 -110.47692108]
[161.24324036 -95.61190033]
[159.23544312 -80.74688721]
[161.48785400 -73.60401917]
[156.96899414 -65.51178741]
[154.56283569 -50.70603561]
[152.15666199 -35.90028381]
[157.75216675 -22.09667587]
[147.90135193 -9.71636200]
[145.49519348 5.08939171]
[147.55502319 12.29015255]
[142.82052612 20.25814438]
[140.01771545 34.99396133]
[146.58616638 43.02845383]
[147.59840393 53.57897186]
[142.46788025 63.10547638]
[132.71090698 68.27408600]
[129.12117004 82.83821106]
[133.67974854 97.12874603]
[145.03993225 106.92395782]
[156.40013123 116.71916199]
[167.76031494 126.51437378]
[179.12049866 136.30958557]
[194.66642761 135.32872009]
[206.04772949 145.42428589]
[206.88702393 160.25099182]
[218.24720764 170.04620361]
[226.91044617 173.34054565]
[229.77633667 180.26011658]
[240.86946106 190.35679626]
[251.96257019 200.45347595]
[267.73565674 199.46084595]
[279.53540039 209.97473145]
[280.36120605 225.75743103]
[269.72314453 237.44535828]
[253.93258667 238.10424805]
[242.35780334 227.34321594]
[241.86589050 211.54658508]
[230.77278137 201.44990540]
[219.67967224 191.35324097]
[208.45201111 181.40638733]
[197.09181213 171.61119080]
[182.30300903 172.96270752]
[170.64262390 163.19081116]
[169.32528687 147.66976929]
[157.96510315 137.87455750]
[146.60491943 128.07936096]
[135.24473572 118.28414154]
[123.88454437 108.48893738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 37]
[2 36]
[3 35]
[4 34]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[41 85]
[42 84]
[44 80]
[45 79]
[46 77]
[47 76]
[49 74]
[50 73]
[51 72]
[52 70]
[53 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[93 109]
[94 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
