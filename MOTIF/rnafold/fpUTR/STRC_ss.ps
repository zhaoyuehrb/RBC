%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGCCCUCACCUGGCUAUCCCACACAGGUGAGAAUAACCAGAACUCACCUCCGGUACCAGUGUUCACUUGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[89.54622650 145.10162354]
[82.07039642 142.68450928]
[75.11093903 139.03808594]
[68.86827850 134.26737976]
[63.52219772 128.50979614]
[59.22667313 121.93111420]
[56.10540771 114.72083282]
[54.24829865 107.08659363]
[53.70882416 99.24826050]
[38.94836044 96.57829285]
[24.18789864 93.90832520]
[9.42743492 91.23835754]
[-5.33302832 88.56838989]
[-20.09349060 85.89842224]
[-34.85395432 83.22845459]
[-49.61441803 80.55848694]
[-58.97556686 92.66746521]
[-72.89659882 99.02854919]
[-88.17857361 98.18000031]
[-101.30978394 90.31681061]
[-109.27279663 77.24588776]
[-110.23775482 61.97082901]
[-103.98292542 48.00173187]
[-91.94561768 38.54859543]
[-76.89191437 35.78367615]
[-62.28105927 40.34233856]
[-51.47050858 51.17702866]
[-46.94445038 65.79801941]
[-32.18398666 68.46798706]
[-17.42352295 71.13795471]
[-2.66305971 73.80792999]
[12.09740353 76.47789764]
[26.85786629 79.14786530]
[41.61832809 81.81783295]
[56.37879181 84.48780060]
[64.77137756 69.96032715]
[77.79029083 59.37775421]
[93.72585297 54.12982178]
[110.48535919 54.90570831]
[125.86789703 61.60351562]
[136.15348816 50.68533325]
[146.43907166 39.76715088]
[150.27011108 24.41678619]
[164.62908936 20.45838547]
[174.91467285 9.54020309]
[172.90826416 -5.96812630]
[181.38330078 -19.10995293]
[196.33816528 -23.68010712]
[210.71159363 -17.52070236]
[217.71691895 -3.54002118]
[214.04643250 11.66068649]
[201.43322754 20.90411186]
[185.83285522 19.82579041]
[175.54727173 30.74397278]
[172.45191956 45.31339645]
[157.35725403 50.05273819]
[147.07167053 60.97092056]
[136.78607178 71.88909912]
[146.06866455 95.40481567]
[141.61396790 120.29077911]
[153.85354614 128.96215820]
[166.09310913 137.63354492]
[178.50267029 146.05986023]
[191.07731628 154.23777771]
[207.47317505 154.56610107]
[215.14871216 169.05810547]
[206.20797729 182.80566406]
[189.84844971 181.66647339]
[182.89939880 166.81242371]
[170.32475281 158.63450623]
[162.79792786 157.60075378]
[157.42173767 149.87312317]
[145.18215942 141.20173645]
[132.94258118 132.53034973]
[126.96756744 137.63227844]
[120.21588898 141.65040588]
[112.88199615 144.46900940]
[105.17710876 146.00691223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[16 28]
[40 58]
[41 57]
[42 56]
[44 54]
[45 53]
[60 74]
[61 73]
[62 72]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
