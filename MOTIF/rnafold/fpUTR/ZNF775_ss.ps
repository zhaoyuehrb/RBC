%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGGGCCGGGAGCCCGGUGCCCAAGUCGCCCUCGGGGUGGCAGUUCCCGUUAACCUUAGCCACAAAGUCAAAGAUGGCAGGAAAGGGACACAGCCGGCGCUGAUGCUGGGAGGCCUCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[106.87993622 182.20884705]
[104.27521515 167.43673706]
[101.67049408 152.66461182]
[99.06577301 137.89250183]
[88.82759857 136.22004700]
[79.42629242 131.83451843]
[68.95273590 142.57252502]
[58.47918701 153.31053162]
[48.00563431 164.04853821]
[37.80304337 175.04431152]
[27.87775421 186.29103088]
[17.95246696 197.53775024]
[15.23516560 213.71020508]
[-0.22174279 219.18888855]
[-12.51751518 208.33779907]
[-9.00331497 192.31961060]
[6.70574951 187.61245728]
[16.63103676 176.36573792]
[26.55632401 165.11901855]
[27.14282799 160.27816772]
[30.84848595 155.78771973]
[37.26763153 153.57498169]
[47.74118423 142.83697510]
[58.21473694 132.09896851]
[68.68828583 121.36096954]
[64.95255280 114.43576050]
[62.72717285 106.88845062]
[62.10803604 99.04428101]
[47.48411560 95.70646667]
[32.86019897 92.36865234]
[18.23627853 89.03083801]
[3.61235976 85.69302368]
[-11.01155853 82.35520935]
[-25.63547707 79.01739502]
[-42.42292786 81.38760376]
[-49.34773254 65.91235352]
[-36.39423752 54.97419739]
[-22.29766273 64.39347839]
[-7.67374468 67.73129272]
[6.95017385 71.06910706]
[21.57409286 74.40692139]
[36.19800949 77.74473572]
[50.82192993 81.08255005]
[65.44584656 84.42036438]
[81.87225342 66.71187592]
[105.65992737 62.52094269]
[110.79022980 48.42555618]
[115.74441528 34.26730347]
[120.52171326 20.04839516]
[125.29901886 5.82948399]
[130.07630920 -8.38942623]
[121.47477722 -17.63187599]
[117.68351746 -29.59882164]
[119.37418365 -41.96432495]
[126.15921783 -52.35280609]
[136.67842102 -58.79541779]
[148.87124634 -60.10308456]
[154.35136414 -74.06619263]
[159.83148193 -88.02929688]
[159.20829773 -94.79045868]
[161.77726746 -100.01505280]
[165.94851685 -102.54063416]
[172.11782837 -116.21321869]
[178.28713989 -129.88580322]
[184.45643616 -143.55839539]
[174.60607910 -155.21743774]
[170.79820251 -169.99792480]
[173.78886414 -184.96517944]
[182.98425293 -197.14744568]
[196.55862427 -204.12591553]
[211.81678772 -204.51502991]
[225.72920227 -198.23750305]
[235.53356934 -186.53976440]
[239.28321838 -171.74438477]
[236.23364258 -156.78903198]
[226.99034119 -144.64306641]
[213.38859558 -137.71810913]
[198.12902832 -137.38908386]
[191.95971680 -123.71649933]
[185.79042053 -110.04391479]
[179.62110901 -96.37132263]
[173.79458618 -82.54917908]
[168.31446838 -68.58607483]
[162.83435059 -54.62297058]
[173.01625061 -40.30076981]
[172.64237976 -22.57628822]
[161.67448425 -8.45002079]
[144.29522705 -3.61212635]
[139.51792908 10.60678387]
[134.74063110 24.82569313]
[129.96333313 39.04460526]
[130.82482910 46.46844101]
[124.88562012 53.55585480]
[119.75531769 67.65124512]
[131.66638184 79.16841125]
[137.52682495 94.66593933]
[136.21687317 111.18267059]
[149.39019775 118.35648346]
[162.56352234 125.53029633]
[175.73684692 132.70410156]
[188.91017151 139.87791443]
[203.99642944 135.16830444]
[217.95523071 142.57960510]
[222.50508118 157.71481323]
[214.94660950 171.59448242]
[199.76414490 175.98405457]
[185.96516418 168.27926636]
[181.73635864 153.05123901]
[168.56303406 145.87742615]
[155.38970947 138.70361328]
[142.21638489 131.52980042]
[129.04307556 124.35599518]
[124.60743713 128.83033752]
[119.49192810 132.50813293]
[113.83789062 135.28778076]
[116.44261169 150.05989075]
[119.04733276 164.83201599]
[121.65205383 179.60412598]
[135.65721130 186.28507996]
[143.03106689 199.93812561]
[140.93820190 215.31341553]
[130.18338013 226.49882507]
[114.90204620 229.19334412]
[100.97018433 222.36085510]
[93.74488068 208.62861633]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 118]
[2 117]
[3 116]
[4 115]
[6 25]
[7 24]
[8 23]
[9 22]
[10 19]
[11 18]
[12 17]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[46 94]
[47 93]
[48 91]
[49 90]
[50 89]
[51 88]
[57 84]
[58 83]
[59 82]
[62 81]
[63 80]
[64 79]
[65 78]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
