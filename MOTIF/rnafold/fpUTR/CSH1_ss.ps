%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCAUAAAUGUACACAGAAACAGGUGGGGUCAAGCAGGGAGAGAGAACUGGCCAGGGUAUAAAAAGGGCCCACAAGAGACCGGCUCUAGGAUCCCAAGGCCCAACUCCCCGAACCACUCAGGGUCCUGUGGACAGCUCACCUAGUGGCA\
) } def
/len { sequence length } bind def

/coor [
[15.04302120 452.34201050]
[-0.74103749 453.36590576]
[-5.34660196 467.64135742]
[-9.95216656 481.91680908]
[-14.55773067 496.19229126]
[-10.58763885 512.10363770]
[-22.56859779 523.30133057]
[-38.17562485 518.26617432]
[-41.35354614 502.17788696]
[-28.83319092 491.58673096]
[-24.22762680 477.31124878]
[-19.62206268 463.03579712]
[-15.01649857 448.76034546]
[-26.06781197 440.05789185]
[-33.49168015 428.07489014]
[-36.37514496 414.24603271]
[-34.35031509 400.23541260]
[-27.64120293 387.73608398]
[-17.03910446 378.26553345]
[-3.80934548 372.98150635]
[10.45972347 372.54046631]
[15.36127377 358.36392212]
[20.11508942 344.13711548]
[24.72065353 329.86166382]
[29.32621765 315.58621216]
[33.93178177 301.31076050]
[38.53734589 287.03527832]
[43.14291000 272.75982666]
[47.74847412 258.48437500]
[52.05606079 244.11618042]
[56.06380081 229.66149902]
[60.07154083 215.20680237]
[54.38025665 204.48689270]
[57.64894867 192.38174438]
[68.64465332 185.55911255]
[72.95223999 171.19093323]
[77.25982666 156.82273865]
[81.56741333 142.45455933]
[85.87499237 128.08638000]
[90.18257904 113.71819305]
[84.30006409 106.63802338]
[82.97048950 97.43280792]
[86.68473816 88.80162048]
[94.43981934 83.32810974]
[94.75187683 68.33135223]
[95.06393433 53.33460236]
[83.46697998 45.81729889]
[77.16381073 33.64014435]
[77.71305847 20.04790878]
[84.86330414 8.60301971]
[96.64714813 2.25186968]
[97.27112579 -12.73514652]
[97.89509583 -27.72216225]
[98.51907349 -42.70917892]
[89.59729767 -58.78343201]
[99.49137878 -73.24396515]
[99.80343628 -88.24072266]
[100.11548615 -103.23747253]
[97.15037537 -111.94723511]
[100.59326935 -118.54209137]
[101.21724701 -133.52911377]
[89.77919006 -141.28604126]
[83.73071289 -153.59169006]
[84.56261444 -167.16955566]
[91.94940948 -178.46322632]
[103.86283112 -184.56785583]
[104.79845428 -199.53863525]
[105.73408508 -214.50942993]
[106.66971588 -229.48022461]
[107.60533905 -244.45101929]
[108.54096985 -259.42181396]
[95.42567444 -267.31152344]
[87.48911285 -280.39852905]
[86.55503845 -295.67550659]
[92.83809662 -309.63192749]
[104.89449310 -319.06069946]
[119.95375061 -321.79519653]
[134.55535889 -317.20700073]
[145.34397888 -306.35046387]
[149.84046936 -291.72036743]
[147.01156616 -276.67855835]
[137.50732422 -264.68154907]
[123.51176453 -258.48617554]
[122.57613373 -243.51538086]
[121.64050293 -228.54460144]
[120.70487976 -213.57380676]
[119.76924896 -198.60301208]
[118.83361816 -183.63221741]
[131.80009460 -173.61344910]
[136.30749512 -157.68707275]
[130.39732361 -142.04893494]
[116.20426178 -132.90513611]
[115.58028412 -117.91811371]
[115.11224365 -102.92542267]
[114.80018616 -87.92866516]
[114.48812866 -72.93191528]
[122.65161133 -63.95054626]
[122.47517395 -51.41308975]
[113.50609589 -42.08520126]
[112.88211823 -27.09818459]
[112.25814056 -12.11116886]
[111.63416290 2.87584710]
[124.80625916 12.62269497]
[129.64401245 28.45185089]
[124.06044769 44.20956039]
[110.06068420 53.64665985]
[109.74862671 68.64340973]
[109.43657684 83.64016724]
[119.18422699 95.04118347]
[134.04727173 97.06352234]
[148.91032410 99.08585358]
[158.24937439 86.89250946]
[172.44004822 81.01712036]
[187.66513062 83.04013062]
[199.82914734 92.41735840]
[205.66001892 106.62638092]
[203.58930969 121.84504700]
[194.17399597 133.97959900]
[179.94676208 139.76591492]
[164.73466492 137.64750671]
[152.62968445 128.19419861]
[146.88798523 113.94890594]
[132.02493286 111.92656708]
[117.16188812 109.90423584]
[104.55076599 118.02577209]
[100.24317932 132.39396667]
[95.93559265 146.76214600]
[91.62800598 161.13032532]
[87.32042694 175.49850464]
[83.01284027 189.86669922]
[87.68642426 207.64695740]
[74.52622986 219.21453857]
[70.51848602 233.66923523]
[66.51074982 248.12391663]
[67.81476593 254.71232605]
[65.84752655 260.13092041]
[62.02393723 263.08993530]
[57.41837311 277.36538696]
[52.81280899 291.64083862]
[48.20724106 305.91632080]
[43.60167694 320.19177246]
[38.99611282 334.46722412]
[34.39054871 348.74270630]
[34.72956848 357.93710327]
[29.53783226 363.26547241]
[24.63628197 377.44201660]
[36.71491241 388.00814819]
[43.80900192 402.36004639]
[44.86320496 418.29626465]
[39.74615860 433.38476562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[21 146]
[22 145]
[23 143]
[24 142]
[25 141]
[26 140]
[27 139]
[28 138]
[29 137]
[30 134]
[31 133]
[32 132]
[35 130]
[36 129]
[37 128]
[38 127]
[39 126]
[40 125]
[44 108]
[45 107]
[46 106]
[51 102]
[52 101]
[53 100]
[54 99]
[56 96]
[57 95]
[58 94]
[60 93]
[61 92]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
