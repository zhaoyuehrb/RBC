%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGGGCGGCGUAGCCGGCCUGUCUGGGCCGCCUCGUGGGGAGGGAGGGGGCGCCCGGCCGCCCGGCGGCGACCCCGGGGCCUGGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[41.24169540 412.03378296]
[33.31000137 425.37048340]
[19.04074287 431.46704102]
[3.92074108 427.97918701]
[-6.23605442 416.24804688]
[-7.52414942 400.78454590]
[0.55175549 387.53466797]
[14.88630962 381.59326172]
[18.25794601 366.97711182]
[13.57942104 352.83636475]
[24.22067070 341.12847900]
[27.59230804 326.51232910]
[30.96394348 311.89617920]
[34.33557892 297.27999878]
[32.49827576 292.68173218]
[33.67030334 286.87228394]
[38.42764282 281.84167480]
[42.73831177 267.47439575]
[47.04897690 253.10714722]
[51.12642670 238.67196655]
[54.96959305 224.17265320]
[58.81275940 209.67333984]
[62.65592575 195.17402649]
[66.49909210 180.67471313]
[58.63819885 172.10189819]
[55.95016861 160.66104126]
[59.23797607 149.25183105]
[67.77439880 140.82571411]
[79.45896149 137.62248230]
[84.23260498 123.40234375]
[89.00625610 109.18220520]
[86.42076874 95.44150543]
[96.77361298 86.04415131]
[101.54725647 71.82401276]
[106.32089996 57.60387421]
[111.09454346 43.38373566]
[110.11381531 36.52972794]
[112.51032257 31.10937119]
[116.66497803 28.41517830]
[122.34908295 14.53386021]
[120.41825867 -1.16908491]
[132.40138245 -10.01519966]
[138.08549500 -23.89651871]
[143.76959229 -37.77783585]
[141.83876038 -53.48078156]
[153.82189941 -62.32689667]
[159.50599670 -76.20821381]
[153.64273071 -90.63942719]
[159.60496521 -104.63608551]
[173.39906311 -110.13687897]
[179.08316040 -124.01819611]
[184.76725769 -137.89952087]
[182.02597046 -154.06791687]
[194.82841492 -164.31631470]
[210.00453186 -158.10202026]
[211.94244385 -141.81777954]
[198.64857483 -132.21540833]
[192.96447754 -118.33409882]
[187.28038025 -104.45277405]
[193.25489807 -90.85716248]
[187.68815613 -76.69856262]
[173.38731384 -70.52411652]
[167.70321655 -56.64279556]
[170.04060364 -41.93273544]
[157.65090942 -32.09373474]
[151.96681213 -18.21241760]
[146.28271484 -4.33109903]
[148.62010193 10.37896156]
[136.23039246 20.21796036]
[130.54629517 34.09927750]
[125.31468201 48.15737915]
[120.54103851 62.37751770]
[115.76739502 76.59765625]
[110.99374390 90.81779480]
[113.57923126 104.55849457]
[103.22638702 113.95584869]
[98.45274353 128.17599487]
[93.67910004 142.39613342]
[102.79247284 158.83152771]
[97.28307343 176.47000122]
[80.99840546 184.51788330]
[77.15524292 199.01719666]
[73.31207275 213.51651001]
[69.46891022 228.01582336]
[65.62574005 242.51513672]
[66.44935608 251.80938721]
[61.41623688 257.41781616]
[57.10557175 271.78506470]
[52.79490280 286.15234375]
[48.95173645 300.65164185]
[45.58010101 315.26779175]
[42.20846558 329.88397217]
[38.83683014 344.50012207]
[43.27419281 359.68630981]
[32.87410355 370.34872437]
[29.50246811 384.96490479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 96]
[9 95]
[11 93]
[12 92]
[13 91]
[14 90]
[17 89]
[18 88]
[19 87]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[29 78]
[30 77]
[31 76]
[33 74]
[34 73]
[35 72]
[36 71]
[39 70]
[40 69]
[42 67]
[43 66]
[44 65]
[46 63]
[47 62]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
