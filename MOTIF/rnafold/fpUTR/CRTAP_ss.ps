%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUGGCGUCCCCGCCCCGAAAGCACUGGGCCCGCCGCGUCGCACCGUCCUCUUUCCUUUCCUUCUCCCUCCCCUUUUCCCUUCCUUCGUCCCUUCCUUCCUUCCUUUCGCCGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[131.40213013 104.40283203]
[137.95693970 90.91073608]
[124.31246185 97.14196777]
[110.66797638 103.37319183]
[97.10553741 109.78101349]
[83.62742615 116.36435699]
[70.14930725 122.94770813]
[56.67119598 129.53105164]
[43.19308090 136.11439514]
[37.97101974 150.78981018]
[24.20851135 157.27426147]
[10.24992752 152.20538330]
[-3.22818732 158.78872681]
[-16.70630264 165.37207031]
[-29.91786957 172.47520447]
[-42.84285736 180.08734131]
[-45.24629593 195.53912354]
[-57.05360413 205.79199219]
[-72.68974304 206.00486755]
[-84.77178955 196.07722473]
[-87.59498596 180.69660950]
[-79.82630157 167.12525940]
[-65.13386536 161.77116394]
[-50.45500183 167.16235352]
[-37.53001404 159.55021667]
[-36.30845261 156.12022400]
[-33.29468536 153.14752197]
[-28.74020004 151.50074768]
[-23.28964615 151.89395142]
[-9.81153202 145.31060791]
[3.66658235 138.72726440]
[8.24971771 124.60173798]
[21.82465935 117.73329163]
[36.60973740 122.63627625]
[50.08784866 116.05293274]
[63.56596375 109.46958923]
[77.04408264 102.88624573]
[90.52219391 96.30290222]
[95.88433838 90.14381409]
[104.43675232 89.72870636]
[118.08123016 83.49748230]
[131.72570801 77.26625824]
[117.59297943 72.23973846]
[104.20945740 65.46617126]
[91.79007721 57.05433655]
[80.53429413 47.13932800]
[70.62287903 35.88038254]
[62.21500778 23.45831871]
[55.44570923 10.07263088]
[50.42370224 -4.06170464]
[47.22963715 -18.71769142]
[45.91481018 -33.65995407]
[46.50033569 -48.64852142]
[48.97681427 -63.44267654]
[53.30447006 -77.80483246]
[59.41380310 -91.50431824]
[67.20670319 -104.32113647]
[76.55799866 -116.04943848]
[87.31752777 -126.50087738]
[99.31248474 -135.50759888]
[112.35023499 -142.92495728]
[126.22138977 -148.63381958]
[140.70317078 -152.54251099]
[155.56301880 -154.58827209]
[170.56227112 -154.73822021]
[185.46003723 -152.98995972]
[200.01707458 -149.37156677]
[213.99958801 -143.94116211]
[227.18301392 -136.78594971]
[239.35563660 -128.02082825]
[250.32197571 -117.78659821]
[259.90588379 -106.24758911]
[267.95346069 -93.58913422]
[274.33544922 -80.01452637]
[278.94937134 -65.74176025]
[281.72113037 -51.00007248]
[282.60620117 -36.02620697]
[281.59036255 -21.06064606]
[278.68994141 -6.34373093]
[273.95153809 7.88818169]
[267.45120239 21.40652847]
[259.29336548 33.99420547]
[249.60900879 45.44905472]
[238.55371094 55.58710861]
[226.30497742 64.24555969]
[213.05955505 71.28533936]
[199.03013611 76.59340668]
[184.44204712 80.08449554]
[169.52482605 81.70276642]
[181.35563660 90.92404175]
[193.18643188 100.14531708]
[205.01724243 109.36659241]
[216.84805298 118.58786774]
[229.10656738 109.76144409]
[243.35566711 104.74748230]
[258.44024658 103.95242310]
[273.13745117 107.44073486]
[286.25588989 114.92962646]
[296.73208618 125.81201172]
[303.71676636 139.20570374]
[306.64370728 154.02493286]
[305.27566528 169.06837463]
[299.72354126 183.11653137]
[290.43737793 195.03056335]
[278.17001343 203.84466553]
[263.91589355 208.84431458]
[248.83052063 209.62422180]
[234.13681030 206.12113953]
[221.02590942 198.61907959]
[210.56066895 187.72616577]
[203.58944702 174.32546997]
[200.67738342 159.50329590]
[202.06053162 144.46124268]
[207.62678528 130.41868591]
[195.79597473 121.19740295]
[183.96516418 111.97612762]
[172.13435364 102.75485229]
[160.30354309 93.53357697]
[163.55612183 108.17668915]
[153.50257874 119.30889893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[12 31]
[13 30]
[14 29]
[15 25]
[16 24]
[89 118]
[90 117]
[91 116]
[92 115]
[93 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
