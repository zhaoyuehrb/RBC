%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUUCCUGCCUGUCAGAUGCCUCAUUCCCACCUGUGAUGCUCAGAGAGAAACCAUGAGCCCUGAAAAACACCAUAUUGUUUUGUG\
) } def
/len { sequence length } bind def

/coor [
[221.58074951 200.38285828]
[209.57263184 191.39370728]
[197.56449890 182.40454102]
[185.55638123 173.41537476]
[173.08634949 181.64845276]
[158.52464294 185.12487793]
[143.62426758 183.40631104]
[130.18583679 176.68098450]
[119.83990479 165.74334717]
[113.84919739 151.90023804]
[112.95445251 136.81477356]
[117.28294373 122.30651093]
[105.27481842 113.31734467]
[91.41597748 111.46691132]
[85.73601532 98.69077301]
[73.72789764 89.70160675]
[58.04349518 87.62550354]
[52.49158096 73.80430603]
[40.48346329 64.81513977]
[31.52160263 62.08678055]
[28.21483421 55.28457642]
[16.53521156 45.87254333]
[0.93490791 43.23794556]
[-4.12015867 29.22739410]
[-15.79978180 19.81535912]
[-27.47940445 10.40332413]
[-39.15902710 0.99128872]
[-54.10204315 5.17290497]
[-68.63733673 -0.25892997]
[-77.17579651 -13.21556473]
[-76.43420410 -28.71490860]
[-66.69771576 -40.79714966]
[-51.71022034 -44.81641388]
[-37.23470688 -39.22721863]
[-28.83730507 -26.17872238]
[-29.74699211 -10.68833447]
[-18.06736946 -1.27629924]
[-6.38774633 8.13573551]
[5.29187679 17.54777145]
[20.05677605 19.50915718]
[25.94724655 34.19292068]
[37.62686920 43.60495377]
[49.47262573 52.80702209]
[61.48074722 61.79618454]
[76.30624390 63.22932816]
[82.71705627 77.69348907]
[94.72518158 86.68265533]
[108.58402252 88.53308868]
[114.26398468 101.30922699]
[126.27210236 110.29839325]
[138.97320557 102.05779266]
[153.69967651 98.66622162]
[168.66983032 100.51421356]
[182.07919312 107.35956573]
[192.31814575 118.35890961]
[198.16502380 132.17152405]
[198.93191528 147.12281799]
[194.54554749 161.40725708]
[206.55366516 170.39642334]
[218.56178284 179.38558960]
[230.56990051 188.37474060]
[243.24478149 182.17251587]
[257.28887939 182.08688354]
[269.91806030 188.07701111]
[278.65368652 198.90328979]
[281.80920410 212.38339233]
[278.81542969 225.83210754]
[290.49502563 235.24414062]
[302.17465210 244.65617371]
[313.85427856 254.06820679]
[325.53390503 263.48025513]
[337.21353149 272.89227295]
[352.89849854 270.95388794]
[365.30853271 280.73992920]
[367.08099365 296.44451904]
[357.16427612 308.75039673]
[341.44183350 310.35668945]
[329.24148560 300.31045532]
[327.80148315 284.57189941]
[316.12188721 275.15985107]
[304.44226074 265.74783325]
[292.76263428 256.33578491]
[281.08300781 246.92375183]
[269.40338135 237.51171875]
[254.59027100 243.69961548]
[238.57731628 241.62561035]
[225.68161011 231.75483704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[12 50]
[13 49]
[15 47]
[16 46]
[18 44]
[19 43]
[21 42]
[22 41]
[24 39]
[25 38]
[26 37]
[27 36]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
