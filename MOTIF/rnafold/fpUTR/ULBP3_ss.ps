%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGCAUGCGAGGGCCGAAGUGAUUCAUACGCUGGUCUCCACAUCGACUGCGCCUUGUGUCCCGGGCGCUCCUGGUCUACA\
) } def
/len { sequence length } bind def

/coor [
[89.11367798 321.10449219]
[90.77085876 305.55499268]
[102.07116699 294.74584961]
[100.92292786 279.78988647]
[99.77468872 264.83389282]
[87.69145203 258.83273315]
[80.14525604 247.51774597]
[79.23387146 233.83845520]
[85.30818939 221.42640686]
[96.85006714 213.63098145]
[96.27552795 198.64199829]
[95.70098114 183.65299988]
[87.48187256 171.23143005]
[94.68491364 157.14501953]
[94.11036682 142.15603638]
[93.53582764 127.16703796]
[82.45517731 121.72585297]
[74.80296326 112.03922272]
[72.07450104 100.00000000]
[74.80296326 87.96077728]
[82.45517731 78.27414703]
[93.53582764 72.83296204]
[94.11036682 57.84396744]
[94.68491364 42.85497284]
[87.48187256 28.76856995]
[95.70098114 16.34699631]
[96.27552795 1.35800385]
[84.19009399 -11.11804199]
[84.72795105 -28.14501762]
[97.08232117 -39.38327026]
[97.08232117 -54.38327026]
[97.08232117 -69.38327026]
[93.88870239 -78.22137451]
[97.38064575 -84.95506287]
[97.95519257 -99.94405365]
[98.52973175 -114.93304443]
[99.10427094 -129.92204285]
[86.82644653 -139.41069031]
[82.50308990 -154.31332397]
[87.79662323 -168.89955139]
[100.67157745 -177.56068420]
[116.17726135 -176.96633911]
[128.35144043 -167.34504700]
[132.51287842 -152.39639282]
[127.06141663 -137.86845398]
[114.09326172 -129.34750366]
[113.51872253 -114.35850525]
[112.94418335 -99.36951447]
[112.36964417 -84.38051605]
[112.08232117 -69.38327026]
[112.08232117 -54.38327026]
[112.08232117 -39.38327026]
[122.47533417 -31.51897049]
[126.42339325 -18.89255524]
[122.23954010 -6.13569450]
[111.26451874 1.93254483]
[110.68997955 16.92153740]
[117.93411255 29.93582916]
[109.67390442 43.42951584]
[109.09936523 58.41850662]
[108.52481842 73.40750122]
[122.55984497 83.54135895]
[127.92549896 100.00000000]
[122.55984497 116.45864105]
[108.52481842 126.59249878]
[109.09936523 141.58149719]
[109.67390442 156.57048035]
[117.93411255 170.06416321]
[110.68997955 183.07846069]
[111.26451874 198.06745911]
[111.83905792 213.05644226]
[125.94547272 222.16416931]
[131.87382507 237.69790649]
[127.50944519 253.57083130]
[114.73067474 263.68563843]
[115.87891388 278.64163208]
[117.02715302 293.59762573]
[129.84503174 302.55508423]
[133.85641479 317.66940308]
[127.16724396 331.80407715]
[112.93594360 338.28515625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[5 75]
[10 71]
[11 70]
[12 69]
[14 67]
[15 66]
[16 65]
[22 61]
[23 60]
[24 59]
[26 57]
[27 56]
[30 52]
[31 51]
[32 50]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
