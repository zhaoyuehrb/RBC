%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCAUAACGACCAGAAGACGCUGCAGCCACUAGGGAGGAGAGCAAAGUAAUCAGAACCUCCCAAGG\
) } def
/len { sequence length } bind def

/coor [
[88.22561646 134.32975769]
[80.53212738 147.20648193]
[72.83863831 160.08322144]
[65.14514923 172.95994568]
[62.21174240 189.65820312]
[45.35401917 191.46195984]
[38.95406342 175.76239014]
[52.26841354 165.26646423]
[59.96190643 152.38972473]
[67.65539551 139.51300049]
[75.34888458 126.63626862]
[70.10337830 120.57572174]
[66.31609344 113.51158142]
[64.17176056 105.78841400]
[63.77497101 97.78291321]
[49.31552887 93.79235840]
[34.85608292 89.80180359]
[21.23586273 97.81835938]
[5.95751381 93.77513885]
[-1.91458845 80.07092285]
[2.28993464 64.83617401]
[16.07661438 57.10940170]
[31.26605797 61.47476196]
[38.84663773 75.34236145]
[53.30607986 79.33291626]
[67.76552582 83.32346344]
[74.78349304 73.89835358]
[84.44501495 67.20959473]
[95.73723602 63.95839691]
[107.47634888 64.48560333]
[118.43167114 68.73593903]
[127.45472717 76.26382446]
[133.59957886 86.28007507]
[148.35852051 83.60172272]
[160.55537415 73.52465057]
[174.45967102 78.86506653]
[189.21861267 76.18671417]
[203.97755432 73.50836182]
[218.73649597 70.83000946]
[233.49543762 68.15164948]
[248.25437927 65.47329712]
[250.26698303 50.47981262]
[256.81613159 36.84296036]
[267.26025391 25.89874649]
[280.57608032 18.71937180]
[295.45913696 16.00819588]
[310.45126343 18.03083611]
[324.08370972 24.58913231]
[335.02093506 35.04056931]
[342.19137573 48.36122131]
[344.89257812 63.24607086]
[342.85989380 78.23684692]
[336.29248047 91.86490631]
[325.83370972 102.79511261]
[312.50823975 109.95664215]
[297.62158203 112.64786530]
[282.63217163 110.60514069]
[269.00851440 104.02857971]
[258.08532715 93.56249237]
[250.93273926 80.23224640]
[236.17379761 82.91059875]
[221.41485596 85.58895111]
[206.65589905 88.26730347]
[191.89695740 90.94565582]
[177.13801575 93.62400818]
[165.99682617 103.50951385]
[151.03688049 98.36067200]
[136.27793884 101.03902435]
[128.83000183 122.04538727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[15 26]
[16 25]
[17 24]
[33 68]
[34 67]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
