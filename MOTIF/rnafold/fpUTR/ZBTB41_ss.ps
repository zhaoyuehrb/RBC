%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAGUUUUCCUUUAUAAAUCACUUAAGACACUUAUGAAGUUUCUUGUUCUGAAAUUGCUGUACUGCA\
) } def
/len { sequence length } bind def

/coor [
[82.83346558 249.18220520]
[74.35238647 249.38101196]
[65.95117950 248.17352295]
[57.86152649 245.59165955]
[50.30674362 241.70526123]
[43.49563599 236.62019348]
[37.61668777 230.47549438]
[32.83288956 223.43951416]
[29.27718353 215.70535278]
[27.04878616 207.48558044]
[26.21042442 199.00630188]
[26.78655815 190.50103760]
[28.76267815 182.20423889]
[32.08566284 174.34481812]
[36.66521072 167.13990784]
[42.37628937 160.78872681]
[49.06254578 155.46723938]
[56.54059982 151.32310486]
[64.60505676 148.47172546]
[73.03417206 146.99298096]
[81.59590149 146.92892456]
[84.93371582 132.30500793]
[88.27153015 117.68109131]
[79.17951202 104.08474731]
[82.46038818 88.06098175]
[96.16445923 79.13216400]
[98.84281158 64.37322235]
[101.52116394 49.61427689]
[104.19951630 34.85533142]
[106.87786865 20.09638786]
[101.72902679 5.13644171]
[111.61453247 -6.00474930]
[114.29288483 -20.76369286]
[116.97123718 -35.52263641]
[119.64958954 -50.28158188]
[116.52860260 -66.94578552]
[131.67759705 -74.55791473]
[143.18589783 -62.10820389]
[134.40853882 -47.60322571]
[131.73017883 -32.84428406]
[129.05181885 -18.08534050]
[126.37347412 -3.32639575]
[131.71388245 10.57789230]
[121.63681793 22.77474213]
[118.95845795 37.53368378]
[116.28010559 52.29262924]
[113.60175323 67.05157471]
[110.92340088 81.81051636]
[119.42482758 91.46453857]
[120.78616333 104.25598907]
[114.50701904 115.48303986]
[102.89544678 121.01890564]
[99.55763245 135.64282227]
[96.21981812 150.26673889]
[117.22068787 165.59283447]
[128.03569031 189.15914917]
[125.97246552 214.93702698]
[111.62364197 236.36819458]
[119.88709259 248.88679504]
[128.15054321 261.40539551]
[143.68194580 264.32962036]
[152.52745056 277.42669678]
[149.43916321 292.92630005]
[136.24932861 301.63284302]
[120.78323364 298.38085938]
[112.21663666 285.09970093]
[115.63195038 269.66885376]
[107.36849213 257.15026855]
[99.10504150 244.63165283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[21 54]
[22 53]
[23 52]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
[34 40]
[35 39]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
