%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCCCGUCGCACGAGCGCUCCCUGCGAGUGGCGCAGGUAACAGACCGCAGGGGCAAGACAGCCGGCGCGGGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[81.89034271 288.45590210]
[71.93139648 276.88946533]
[67.98547363 262.14523315]
[70.83603668 247.15068054]
[79.91710663 234.88296509]
[93.42562866 227.77784729]
[92.84400177 212.78913879]
[92.26236725 197.80041504]
[91.68074036 182.81169128]
[88.18367767 176.07618713]
[91.37858582 167.23287964]
[91.37858582 152.23287964]
[91.37858582 137.23287964]
[88.14532471 130.36685181]
[91.68074036 121.65407562]
[92.26236725 106.66535950]
[89.34375000 98.90660095]
[93.16836548 91.10997772]
[94.33074951 76.15508270]
[93.74912262 61.16636658]
[91.43134308 46.34651566]
[86.90834808 38.10309601]
[89.32263947 30.90812302]
[87.58124542 16.00954819]
[85.83985901 1.11097229]
[84.09846497 -13.78760338]
[82.35707092 -28.68617821]
[80.61567688 -43.58475494]
[78.87428284 -58.48332977]
[74.67433167 -66.89593506]
[77.36579895 -73.99187469]
[76.20341492 -88.94676971]
[61.74021912 -93.62485504]
[50.17143250 -103.48546600]
[43.26121902 -117.02494049]
[42.06332397 -132.17860413]
[46.76042557 -146.63563538]
[56.63624954 -158.19143677]
[70.18479919 -165.08383179]
[85.34002686 -166.26179504]
[99.79086304 -161.54566956]
[111.33366394 -151.65466309]
[118.20823669 -138.09704590]
[119.36625671 -122.94029236]
[114.63113403 -108.49566650]
[104.72494507 -96.96588898]
[91.15830994 -90.10916138]
[92.32069397 -75.15426636]
[93.77285767 -60.22472382]
[95.51425171 -45.32614899]
[97.25564575 -30.42757225]
[98.99703979 -15.52899647]
[100.73843384 -0.63042140]
[102.47982788 14.26815414]
[104.22122192 29.16672897]
[106.25119019 44.02873611]
[108.56896973 58.84858322]
[119.51369476 48.59123993]
[134.51312256 48.72165680]
[145.27784729 59.16775131]
[145.85871887 74.15650177]
[135.93475342 85.40437317]
[120.99040222 86.69525146]
[109.28564453 77.31747437]
[108.12326050 92.27236176]
[107.25109100 107.24698639]
[106.66945648 122.23571014]
[106.37858582 137.23287964]
[106.37858582 152.23287964]
[106.37858582 167.23287964]
[106.66945648 182.23007202]
[107.25109100 197.21878052]
[107.83271790 212.20750427]
[108.41435242 227.19622803]
[122.43284607 233.23315430]
[132.43725586 244.76026917]
[136.44122314 259.48886108]
[133.64971924 274.49453735]
[124.61703491 286.79791260]
[111.13659668 293.95614624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 74]
[7 73]
[8 72]
[9 71]
[11 70]
[12 69]
[13 68]
[15 67]
[16 66]
[18 65]
[19 64]
[20 57]
[21 56]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[31 48]
[32 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
