%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAAACUUAGUGGCCACUCCCAGCUCGACAACCACUGCCACCCCCCAAGCUCGGCUUGUCACCUGCCCUAGGAGACGCAGCCGCCGGACCCUGCCCAGGGCACCCACGCCUCGGCGACCACC\
) } def
/len { sequence length } bind def

/coor [
[95.60856628 238.87759399]
[80.95501709 242.08279419]
[66.01065826 240.79196167]
[52.12375259 235.12152100]
[40.54714584 225.58306885]
[32.32525635 213.03712463]
[28.19984818 198.61558533]
[28.54310608 183.61950684]
[33.32406235 169.40182495]
[42.11138916 157.24523926]
[54.11230850 148.24645996]
[68.23937988 143.21829224]
[80.18426514 134.14527893]
[65.35180664 136.38090515]
[50.51934052 138.61654663]
[35.68687820 140.85217285]
[20.85441780 143.08781433]
[19.17565727 158.08261108]
[13.67225361 172.13163757]
[4.71943855 184.27697754]
[-7.07237005 193.69056702]
[-20.89918709 199.73056030]
[-35.81827927 201.98515320]
[-50.81243515 200.30059814]
[-64.85932922 194.79177856]
[-77.00122070 185.83427429]
[-86.41025543 174.03881836]
[-92.44490814 160.20967102]
[-94.69373322 145.28971863]
[-93.00339508 130.29621887]
[-87.48914337 116.25144958]
[-78.52695465 104.11301422]
[-66.72787476 94.70853424]
[-52.89640045 88.67922211]
[-37.97557068 86.43615723]
[-22.98272133 88.13228607]
[-8.94008541 93.65196228]
[3.19488525 102.61883545]
[12.59480953 114.42153931]
[18.61878395 128.25534058]
[33.45124435 126.01971436]
[48.28370667 123.78408051]
[63.11616898 121.54844666]
[77.94863129 119.31281281]
[72.34911346 104.22433472]
[75.64166260 89.23641968]
[85.99261475 78.94432831]
[99.53692627 76.05640411]
[103.95825195 61.72280884]
[96.65651703 53.68382263]
[93.43245697 43.39862442]
[94.81759644 32.79137039]
[100.48777771 23.81655693]
[109.33568573 18.09887886]
[119.68648529 16.63925743]
[125.16659546 2.67615151]
[130.64671326 -11.28695488]
[136.12683105 -25.25006104]
[141.60694885 -39.21316528]
[146.91256714 -53.24350357]
[152.04286194 -67.33889771]
[157.17317200 -81.43428040]
[162.30346680 -95.52967072]
[159.75273132 -111.14390564]
[171.37638855 -120.45731354]
[176.50669861 -134.55270386]
[181.63699341 -148.64810181]
[186.76730347 -162.74348450]
[186.50289917 -179.69537354]
[202.71910095 -184.64218140]
[211.96168518 -170.42912292]
[200.86268616 -157.61318970]
[195.73239136 -143.51779175]
[190.60208130 -129.42240906]
[185.47178650 -115.32701111]
[188.38948059 -100.72097778]
[176.39886475 -90.39936829]
[171.26855469 -76.30397797]
[166.13825989 -62.20859146]
[161.00794983 -48.11320496]
[161.68411255 -40.67019272]
[155.57005310 -33.73305130]
[150.08993530 -19.76994514]
[144.60981750 -5.80683947]
[139.12969971 8.15626717]
[133.64958191 22.11937332]
[142.79273987 39.21430206]
[136.48333740 57.86294937]
[118.29184723 66.14413452]
[113.87052155 80.47772980]
[121.66579437 87.48416901]
[125.97727203 97.53446960]
[125.66045380 108.92111206]
[120.39516449 119.53284454]
[110.81217957 127.24599457]
[122.99124908 136.00215149]
[135.17031860 144.75830078]
[147.34939575 153.51446533]
[160.25392151 152.21479797]
[170.23704529 159.84889221]
[172.23101807 171.84957886]
[184.18801880 180.90664673]
[196.14500427 189.96369934]
[208.10198975 199.02076721]
[223.72167969 196.61225891]
[236.41996765 206.02122498]
[238.66320801 221.66551208]
[229.12051392 234.26362610]
[213.45338440 236.34133911]
[200.95687866 226.66596985]
[199.04492188 210.97775269]
[187.08793640 201.92070007]
[175.13095093 192.86363220]
[163.17396545 183.80656433]
[145.71214294 182.62068176]
[138.59323120 165.69352722]
[126.41416168 156.93737793]
[114.23509216 148.18121338]
[102.05602264 139.42506409]
[108.54624176 152.94827271]
[118.82636261 163.87159729]
[125.39900208 177.35493469]
[127.67118835 192.18183899]
[125.43793488 207.01466370]
[118.90071106 220.51521301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 44]
[14 43]
[15 42]
[16 41]
[17 40]
[48 90]
[49 89]
[55 86]
[56 85]
[57 84]
[58 83]
[59 82]
[60 80]
[61 79]
[62 78]
[63 77]
[65 75]
[66 74]
[67 73]
[68 72]
[95 119]
[96 118]
[97 117]
[98 116]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
