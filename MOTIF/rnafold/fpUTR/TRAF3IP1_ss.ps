%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGUCCUGGCAGGACCGGGCGGCGGCGGCGGCGGGGCCGGCGGCGGCCAGGGACCCGGGCUUAGGCUCGGCCAGGCCGGCUGAGGGGCGCGGGCGGCCAGCGGGCGGCGGACGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[-41.07324982 280.88357544]
[-50.51305771 292.54074097]
[-59.95286179 304.19793701]
[-58.49250793 319.70617676]
[-68.23187256 331.39373779]
[-83.02559662 332.69039917]
[-92.46540070 344.34759521]
[-101.90521240 356.00479126]
[-111.34501648 367.66195679]
[-120.78482056 379.31915283]
[-120.54460907 395.36041260]
[-133.02740479 405.43807983]
[-148.65748596 401.82141113]
[-155.44479370 387.28485107]
[-148.18266296 372.97955322]
[-132.44201660 369.87936401]
[-123.00220490 358.22216797]
[-113.56240082 346.56497192]
[-104.12259674 334.90777588]
[-94.68278503 323.25057983]
[-96.49025726 308.51055908]
[-87.08301544 296.55404663]
[-71.61005402 294.75814819]
[-62.17024612 283.10095215]
[-52.73043823 271.44375610]
[-53.66693115 259.30612183]
[-45.79091644 249.50157166]
[-32.93989182 247.68568420]
[-23.19816971 236.27958679]
[-13.45644855 224.87350464]
[-3.71472788 213.46740723]
[6.02699280 202.06132507]
[15.76871395 190.65522766]
[25.51043510 179.24914551]
[23.44612312 162.61479187]
[34.21664810 149.33551025]
[51.58872604 147.86532593]
[61.02853394 136.20812988]
[70.46833801 124.55094910]
[79.90814209 112.89376068]
[76.16294098 98.68606567]
[81.44700623 84.97608185]
[93.75877380 76.95702362]
[108.43466949 77.66643524]
[117.87447357 66.00924683]
[127.16088104 54.22949219]
[136.29229736 42.32919312]
[145.42372131 30.42889214]
[154.55514526 18.52859306]
[151.85855103 10.33809757]
[152.68670654 1.85033321]
[156.82263184 -5.49897671]
[163.49635315 -10.49774361]
[171.52723694 -12.35724258]
[179.53236389 -10.83584213]
[189.85768127 -21.71645737]
[200.18299866 -32.59707260]
[210.50833130 -43.47768784]
[214.39529419 -58.81398392]
[228.76861572 -62.72001648]
[239.09393311 -73.60063171]
[249.41925049 -84.48124695]
[259.74456787 -95.36186218]
[261.00637817 -100.68390656]
[263.94769287 -104.53646851]
[267.69186401 -106.51822662]
[271.33276367 -106.65057373]
[282.47991943 -116.68753052]
[293.62710571 -126.72449493]
[304.77426147 -136.76144409]
[315.92144775 -146.79841614]
[327.06860352 -156.83537292]
[338.21578979 -166.87232971]
[340.48794556 -182.75366211]
[354.39355469 -190.75451660]
[369.26541138 -184.73730469]
[373.69512939 -169.31793213]
[364.28457642 -156.32481384]
[348.25274658 -155.72515869]
[337.10556030 -145.68820190]
[325.95840454 -135.65124512]
[314.81121826 -125.61428070]
[303.66406250 -115.57731628]
[292.51687622 -105.54035950]
[281.36972046 -95.50340271]
[270.62518311 -85.03654480]
[260.29986572 -74.15592957]
[249.97454834 -63.27531433]
[239.64923096 -52.39469910]
[236.50079346 -37.83665466]
[221.38894653 -33.15237045]
[211.06361389 -22.27175331]
[200.73829651 -11.39113903]
[190.41297913 -0.51052308]
[187.75845337 20.92271996]
[166.45544434 27.66001511]
[157.32402039 39.56031418]
[148.19259644 51.46061325]
[139.06118774 63.36091614]
[137.46597290 70.67293549]
[129.53166199 75.44905090]
[120.09185791 87.10623932]
[123.83705902 101.31393433]
[118.55299377 115.02391815]
[106.24122620 123.04297638]
[91.56533051 122.33356476]
[82.12552643 133.99075317]
[72.68572235 145.64794922]
[63.24591446 157.30513000]
[66.18850708 170.52432251]
[61.01857758 182.82978821]
[49.84950638 189.77442932]
[36.91652298 188.99085999]
[27.17480278 200.39695740]
[17.43308258 211.80303955]
[7.69136190 223.20913696]
[-2.05035901 234.61521912]
[-11.79207993 246.02131653]
[-21.53380013 257.42739868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[34 113]
[37 109]
[38 108]
[39 107]
[40 106]
[44 102]
[45 101]
[46 99]
[47 98]
[48 97]
[49 96]
[55 94]
[56 93]
[57 92]
[58 91]
[60 89]
[61 88]
[62 87]
[63 86]
[67 85]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
