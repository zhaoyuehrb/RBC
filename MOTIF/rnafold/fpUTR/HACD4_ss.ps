%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCGCGCCCAGCCGCGGGGCCGCCCCUGCCUCCUCCCCGGUACUCCUUCCUGGACCGCGCUGGAAGCCCUGGCGGCGGCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[41.85429764 199.24850464]
[38.66789627 200.64883423]
[35.63576508 200.69793701]
[25.22465324 211.49649048]
[14.81354046 222.29504395]
[4.40242767 233.09359741]
[-6.00868511 243.89215088]
[-5.46948004 259.68722534]
[-16.31792641 271.18014526]
[-32.11783218 271.55230713]
[-43.49539566 260.58297729]
[-43.70050812 244.77999878]
[-32.61148071 233.51905823]
[-16.80723763 233.48103333]
[-6.39612436 222.68247986]
[4.01498842 211.88392639]
[14.42610168 201.08537292]
[24.83721352 190.28681946]
[34.43230820 178.75711060]
[43.16019440 166.55776978]
[51.88807678 154.35842896]
[60.61595917 142.15907288]
[69.34384155 129.95973206]
[78.07173157 117.76038361]
[86.79961395 105.56104279]
[88.35047913 91.66548157]
[101.00104523 85.71107483]
[109.72892761 73.51173401]
[118.45681000 61.31238556]
[127.18469238 49.11303711]
[135.91258240 36.91369247]
[127.36179352 23.42948723]
[124.59884644 7.74232912]
[128.01168823 -7.77724838]
[137.05726624 -20.79528618]
[150.34767151 -29.36539078]
[165.86305237 -32.21973801]
[181.25854492 -28.95654869]
[189.53506470 -41.46651840]
[197.81158447 -53.97648239]
[206.08810425 -66.48645020]
[214.36460876 -78.99642181]
[209.77455139 -97.18203735]
[219.55986023 -112.81517792]
[237.31042480 -116.50603485]
[244.65170288 -129.58677673]
[251.99296570 -142.66751099]
[249.05404663 -158.43908691]
[259.66088867 -170.47544861]
[275.67684937 -169.54336548]
[284.81582642 -156.35781860]
[280.06719971 -141.03364563]
[265.07369995 -135.32624817]
[257.73242188 -122.24550629]
[250.39117432 -109.16476440]
[255.88098145 -98.85118103]
[255.59780884 -87.04951477]
[249.49549866 -76.80247498]
[239.04347229 -70.81035614]
[226.87458801 -70.71990204]
[218.59806824 -58.20993423]
[210.32154846 -45.69996643]
[202.04502869 -33.19000244]
[193.76852417 -20.68003273]
[202.11161804 -9.24715519]
[206.02214050 4.38655138]
[205.00314331 18.56350327]
[199.15829468 31.55265427]
[189.18180847 41.76086426]
[176.27597046 47.92828751]
[162.00637817 49.28384781]
[148.11192322 45.64157486]
[139.38403320 57.84092331]
[130.65615845 70.04026794]
[121.92826843 82.23961639]
[113.20038605 94.43895721]
[111.64952087 108.33451843]
[98.99895477 114.28892517]
[90.27107239 126.48826599]
[81.54319000 138.68762207]
[72.81530762 150.88696289]
[64.08742523 163.08630371]
[55.35953903 175.28565979]
[46.63165665 187.48500061]
[46.37944794 192.38117981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[19 84]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
