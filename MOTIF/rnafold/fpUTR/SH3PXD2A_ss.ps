%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGAGUCCGGGCAGCGUUCGGCGCGCCGGGCCGGGGUGGCGGGCGGCCCCGGGACCCCGGCAGCUGGAGAAGGAGCCGGAGCCCGGCCGGGAUGAGAAGGUGACGCCGCCGGGGGCGCCACUCGCUUUGUGGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[90.07782745 103.84719086]
[76.33416748 97.83787537]
[62.59051514 91.82855225]
[48.84685516 85.81923676]
[35.10319901 79.80992126]
[22.77680588 83.78310394]
[11.42542171 78.43301392]
[6.94215775 67.14352417]
[-6.66420603 60.82950592]
[-20.27056885 54.51548386]
[-33.87693405 48.20146179]
[-47.48329544 41.88743973]
[-59.21316910 52.82835007]
[-74.20169830 58.43247223]
[-90.15542603 57.87371063]
[-104.64521790 51.26657867]
[-115.47609711 39.64428711]
[-121.01977539 24.79726982]
[-120.45934296 8.99741077]
[-134.20300293 2.98809195]
[-147.94665527 -3.02122664]
[-161.69030762 -9.03054523]
[-175.43397522 -15.03986359]
[-189.17762756 -21.04918289]
[-201.50401306 -17.07599831]
[-212.85540771 -22.42608833]
[-217.33866882 -33.71557617]
[-230.94503784 -40.02959442]
[-244.55139160 -46.34361649]
[-258.15774536 -52.65763855]
[-271.76412964 -58.97166061]
[-285.37048340 -65.28568268]
[-299.18023682 -71.14151764]
[-313.17794800 -76.53263855]
[-327.17565918 -81.92375183]
[-341.17337036 -87.31487274]
[-355.17108154 -92.70598602]
[-369.16879272 -98.09710693]
[-383.16650391 -103.48822021]
[-396.11590576 -94.93881226]
[-411.61587524 -95.66730499]
[-423.70632935 -105.39356995]
[-427.73828125 -120.37767029]
[-422.16131592 -134.85789490]
[-409.11990356 -143.26632690]
[-393.62875366 -142.36973572]
[-381.64453125 -132.51287842]
[-377.77536011 -117.48593140]
[-363.77764893 -112.09481049]
[-349.77996826 -106.70369720]
[-335.78225708 -101.31257629]
[-321.78454590 -95.92146301]
[-307.78683472 -90.53034973]
[-293.78912354 -85.13922882]
[-290.37377930 -86.28530121]
[-286.22357178 -85.78310394]
[-282.14328003 -83.30139160]
[-279.05645752 -78.89204407]
[-265.45010376 -72.57802582]
[-251.84373474 -66.26399994]
[-238.23738098 -59.94998169]
[-224.63101196 -53.63595963]
[-211.02464294 -47.32193756]
[-193.69445801 -49.85617828]
[-183.16830444 -34.79283905]
[-169.42465210 -28.78351974]
[-155.68099976 -22.77420235]
[-141.93733215 -16.76488304]
[-128.19367981 -10.75556469]
[-114.45002747 -4.74624538]
[-104.68003082 -14.87746334]
[-92.00593567 -21.06659508]
[-77.94928741 -22.54782486]
[-64.20542145 -19.12189865]
[-52.43902588 -11.18265152]
[-44.08247375 0.32815206]
[-40.16148758 14.03249836]
[-41.16927719 28.28107643]
[-27.56291199 34.59509659]
[-13.95654869 40.90911865]
[-0.35018459 47.22314072]
[13.25617886 53.53716278]
[30.58636665 51.00292206]
[41.11251831 66.06626129]
[54.85617447 72.07557678]
[68.59983063 78.08489990]
[82.34349060 84.09421539]
[96.08714294 90.10353851]
[110.25717926 95.02391052]
[124.76747131 98.82543182]
[139.27775574 102.62694550]
[148.25419617 94.68619537]
[159.83943176 92.12821198]
[171.09416199 95.48230743]
[179.22074890 103.79281616]
[182.25851440 114.88757324]
[196.58505249 119.33170319]
[210.91159058 123.77584076]
[224.77265930 116.66889954]
[239.23849487 121.37996674]
[245.92846680 134.63816833]
[260.25500488 139.08230591]
[274.58154297 143.52644348]
[288.90808105 147.97058105]
[304.38101196 144.66931152]
[314.24450684 155.83000183]
[328.57104492 160.27413940]
[342.89758301 164.71827698]
[357.22412109 169.16241455]
[371.09014893 161.57896423]
[386.23352051 166.10153198]
[393.66995239 180.04696655]
[388.98751831 195.14167786]
[374.96426392 202.43025208]
[359.91989136 197.58850098]
[352.77996826 183.48895264]
[338.45343018 179.04481506]
[324.12689209 174.60067749]
[309.80035400 170.15653992]
[295.35214233 173.77568054]
[284.46392822 162.29710388]
[270.13739014 157.85298157]
[255.81086731 153.40884399]
[241.48432922 148.96470642]
[228.46540833 156.10916138]
[213.87295532 151.80625916]
[206.46746826 138.10237122]
[192.14093018 133.65824890]
[177.81439209 129.21411133]
[162.23742676 138.71795654]
[144.33261108 133.81303406]
[135.47624207 117.13723755]
[120.96595001 113.33571625]
[106.45565796 109.53419495]
[113.57772827 122.73556519]
[110.73161316 137.46307373]
[99.20368958 147.06031799]
[84.20424652 147.18959045]
[72.51261139 137.79248047]
[69.41307068 123.11621094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[5 84]
[8 82]
[9 81]
[10 80]
[11 79]
[12 78]
[19 70]
[20 69]
[21 68]
[22 67]
[23 66]
[24 65]
[27 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[39 48]
[89 134]
[90 133]
[91 132]
[96 129]
[97 128]
[98 127]
[101 124]
[102 123]
[103 122]
[104 121]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
