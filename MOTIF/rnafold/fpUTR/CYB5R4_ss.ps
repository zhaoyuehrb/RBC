%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCGCCUCACCCCUGGCGACCCCGGAAGUGGGUCGGGGGCUUGGCCUCUGCCCGGCCACAGAGCCGGAGCUGGAGGUGCUGUCCCGUCUGGCGGCGAUCCCCGGGCAGGGCCCGGGGCCGGGGUUUGAAG\
) } def
/len { sequence length } bind def

/coor [
[105.60947418 275.36511230]
[90.65042114 274.25759888]
[77.84320068 266.44894409]
[70.00744629 253.65827942]
[68.86801147 238.70320129]
[60.51605225 251.16291809]
[52.16409302 263.62265015]
[43.81213760 276.08236694]
[49.28757095 290.60131836]
[45.15082550 305.55679321]
[32.99255371 315.19818115]
[17.48786926 315.81811523]
[4.59863377 307.17825317]
[-0.71897697 292.60079956]
[3.57976675 277.69104004]
[15.84191036 268.18212891]
[31.35240936 267.73040771]
[39.70436478 255.27069092]
[48.05632401 242.81095886]
[56.40827942 230.35124207]
[63.07569122 216.91450500]
[67.94618225 202.72724915]
[72.81667328 188.53999329]
[77.68717194 174.35273743]
[82.55766296 160.16548157]
[87.42815399 145.97822571]
[92.29864502 131.79095459]
[73.51822662 115.54830170]
[72.34291840 92.30644989]
[87.26096344 76.52861786]
[84.09609222 61.86630249]
[73.62125397 50.00930405]
[78.49903107 35.93604279]
[75.33415985 21.27372551]
[64.85932922 9.41672611]
[69.73709869 -4.65653133]
[66.57223511 -19.31885147]
[63.40736389 -33.98117065]
[60.24249268 -48.64348984]
[57.07762527 -63.30580902]
[43.50867081 -66.91098785]
[32.88104248 -75.98339081]
[27.24516296 -88.69723511]
[27.65570259 -102.53179932]
[33.97469330 -114.77114868]
[44.90987778 -123.03731537]
[42.09219742 -137.77029419]
[39.27451706 -152.50328064]
[36.45683670 -167.23625183]
[33.63915634 -181.96923828]
[30.82147598 -196.70220947]
[27.82999229 -211.40089417]
[24.66512299 -226.06320190]
[21.32730865 -240.68711853]
[17.81701660 -255.27059937]
[14.30672359 -269.85409546]
[10.79643059 -284.43756104]
[7.28613710 -299.02102661]
[-6.32324219 -307.05596924]
[-10.18400002 -322.38146973]
[-2.00561786 -335.90512085]
[13.35981560 -339.60363770]
[26.79626083 -331.28274536]
[30.33211517 -315.87905884]
[21.86961555 -302.53134155]
[25.37990952 -287.94784546]
[28.89020157 -273.36437988]
[32.40049362 -258.78088379]
[35.91078949 -244.19741821]
[40.57908630 -238.37504578]
[39.32744217 -229.22807312]
[42.49231339 -214.56575012]
[47.02178955 -208.63475037]
[45.55445480 -199.51989746]
[48.37213516 -184.78691101]
[51.18981552 -170.05393982]
[54.00749588 -155.32095337]
[56.82517624 -140.58798218]
[59.64285660 -125.85499573]
[74.99365997 -120.95133209]
[85.85978699 -108.92449951]
[89.22429657 -92.97334290]
[84.08261871 -77.40473175]
[71.73994446 -66.47068024]
[74.90481567 -51.80835724]
[78.06967926 -37.14603806]
[81.23455048 -22.48372078]
[84.39942169 -7.82140112]
[94.64788055 2.98685074]
[89.99648285 18.10885620]
[93.16135406 32.77117538]
[103.40981293 43.57942581]
[98.75840759 58.70143127]
[101.92327881 73.36375427]
[109.93259430 74.28839874]
[117.54240417 77.63858032]
[124.01508331 83.25059509]
[128.67785645 90.73622894]
[130.99089050 99.50779724]
[130.60610962 108.82366180]
[127.41024017 117.85090637]
[140.68574524 124.83381653]
[153.96124268 131.81672668]
[167.23674011 138.79963684]
[180.51225281 145.78254700]
[193.78775024 152.76545715]
[207.06324768 159.74838257]
[220.33874512 166.73129272]
[237.17164612 168.75361633]
[239.88815308 185.48852539]
[224.55926514 192.73155212]
[213.35583496 180.00679016]
[200.08033752 173.02388000]
[186.80484009 166.04096985]
[173.52932739 159.05805969]
[160.25382996 152.07514954]
[146.97833252 145.09223938]
[133.70283508 138.10931396]
[120.42733002 131.12640381]
[106.48590088 136.66145325]
[101.61540985 150.84870911]
[96.74491882 165.03596497]
[91.87442780 179.22322083]
[87.00393677 193.41049194]
[82.13344574 207.59774780]
[77.26294708 221.78500366]
[89.86299133 213.64627075]
[104.78822327 212.15051270]
[118.75273895 217.62702942]
[128.68211365 228.87014771]
[132.39031982 243.40455627]
[129.06095886 258.03039551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[21 126]
[22 125]
[23 124]
[24 123]
[25 122]
[26 121]
[27 120]
[30 94]
[31 93]
[33 91]
[34 90]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[46 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
