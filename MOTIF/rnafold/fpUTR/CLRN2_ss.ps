%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAAGAGCUGACCUUGGAGCAGAGCAUUGCCGAGUAUCUGAAAGAUGUCAAUGACCCUCGCUGCUGCUCGGAGACCUUGGGGAUGACCUGCACCCACUAGC\
) } def
/len { sequence length } bind def

/coor [
[4.27777386 574.21813965]
[-3.47710109 587.65838623]
[-17.66460228 593.94287109]
[-32.82934570 590.65496826]
[-43.14017868 579.05902100]
[-44.63237762 563.61389160]
[-36.73215866 550.25848389]
[-22.47731590 544.12829590]
[-19.29899788 529.46887207]
[-16.12067986 514.80950928]
[-12.94236088 500.15008545]
[-22.41223717 492.25292969]
[-27.59479141 480.98410034]
[-27.42521286 468.50900269]
[-21.87384224 457.25460815]
[-11.96411037 449.43728638]
[0.41557533 446.62658691]
[4.48167753 432.18820190]
[0.48409814 417.84008789]
[11.67256451 406.65399170]
[15.73866653 392.21560669]
[19.80476952 377.77722168]
[23.87087059 363.33886719]
[16.38675499 350.51217651]
[20.30467987 335.81167603]
[33.80922318 328.04861450]
[37.87532425 313.61026001]
[41.94142532 299.17187500]
[46.00753021 284.73348999]
[42.00994873 270.38537598]
[53.19841385 259.19927979]
[57.26451874 244.76087952]
[61.33061981 230.32250977]
[65.39672089 215.88412476]
[69.46282196 201.44573975]
[60.61807251 187.23269653]
[64.79153442 170.67469788]
[79.89844513 162.01815796]
[83.52233887 147.46249390]
[87.14623260 132.90682983]
[90.77012634 118.35116577]
[94.39402771 103.79549408]
[87.57798004 105.03393555]
[80.26911163 103.48619843]
[73.34680939 99.06000519]
[67.69464111 91.90959930]
[64.13600159 82.43072510]
[63.37260818 71.23970032]
[63.83005142 56.24667358]
[64.28749084 41.25365067]
[58.72699738 25.23749542]
[72.57794189 15.46059322]
[85.80707550 26.06371880]
[79.28051758 41.71109390]
[78.82307434 56.70411682]
[78.36563110 71.69713593]
[85.23876190 74.69882202]
[91.24234009 60.95266342]
[104.98841095 66.95645905]
[98.98501587 80.70219421]
[105.85813904 83.70388031]
[116.54531097 73.17846680]
[120.38644409 57.23551559]
[136.18850708 52.85068512]
[147.69569397 64.53472137]
[143.07040405 80.26808167]
[127.07072449 83.86563873]
[116.38356018 94.39105225]
[108.94969177 107.41939545]
[105.32579803 121.97505951]
[101.70189667 136.53071594]
[98.07800293 151.08639526]
[94.45410919 165.64205933]
[102.72406769 176.40199280]
[103.22400665 189.76786804]
[95.99546051 200.78828430]
[83.90120697 205.51184082]
[79.83509827 219.95022583]
[75.76899719 234.38861084]
[71.70289612 248.82698059]
[67.63679504 263.26538086]
[71.34353638 278.64620972]
[60.44590759 288.79959106]
[56.37980652 303.23797607]
[52.31370544 317.67636108]
[48.24760056 332.11471558]
[55.71635437 345.78424072]
[51.38706589 360.36889648]
[38.30924988 367.40496826]
[34.24314880 381.84332275]
[30.17704582 396.28170776]
[26.11094475 410.72009277]
[29.81768799 426.10095215]
[18.92005730 436.25430298]
[14.85395527 450.69268799]
[26.47314453 464.42495728]
[27.64508629 482.21975708]
[18.09468651 497.09634399]
[1.71704853 503.32839966]
[-1.46126974 517.98779297]
[-4.63958788 532.64721680]
[-7.81790590 547.30664062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 102]
[9 101]
[10 100]
[11 99]
[17 95]
[18 94]
[20 92]
[21 91]
[22 90]
[23 89]
[26 86]
[27 85]
[28 84]
[29 83]
[31 81]
[32 80]
[33 79]
[34 78]
[35 77]
[38 73]
[39 72]
[40 71]
[41 70]
[42 69]
[48 56]
[49 55]
[50 54]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
