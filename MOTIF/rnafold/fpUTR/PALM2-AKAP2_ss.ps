%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGAGGCUGAGCCCGGGCGAGCCCGCCGUGCGCACAGCUCUGCCCGCCGCCCCUGGAGCGGAUCCCCAGCCGUCCCUGGGCGUUCUCCCGGGUUCUAGCAAAGCCCCCCGGGGUGCCCAUCAGUUUCCUUGGGUGACUACAGCGUGUGUUUUUUCUUUCCUCUUUCCCCUGCCUGUGUGCCCUUCUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[231.32273865 215.12919617]
[230.18762207 207.58805847]
[230.62461853 199.96319580]
[232.61975098 192.57934570]
[220.05523682 184.38587952]
[207.49070740 176.19241333]
[194.92619324 167.99896240]
[182.36166382 159.80549622]
[169.79714966 151.61203003]
[157.23263550 143.41857910]
[144.66810608 135.22511292]
[131.90730286 127.34084320]
[118.95780182 119.77046967]
[100.44584656 127.38742065]
[81.69577026 120.37705994]
[68.99954224 128.36492920]
[56.30332565 136.35278320]
[43.60710144 144.34065247]
[30.91088104 152.32852173]
[18.28009224 160.41944885]
[5.71557045 168.61291504]
[-6.84895086 176.80636597]
[-19.41347313 184.99983215]
[-27.89834213 204.66709900]
[-48.52704239 204.96813965]
[-60.67663193 213.76515198]
[-72.82622528 222.56216431]
[-82.10950470 236.74867249]
[-98.31147003 231.75540161]
[-97.99848175 214.80435181]
[-81.62323761 210.41258240]
[-69.47364807 201.61557007]
[-57.32405472 192.81855774]
[-57.36593628 183.91348267]
[-53.23478317 175.86940002]
[-45.74812698 170.55589294]
[-36.51853561 169.27301025]
[-27.60693359 172.43530273]
[-15.04241180 164.24185181]
[-2.47789073 156.04838562]
[10.08663082 147.85491943]
[13.97805691 141.55827332]
[22.92301750 139.63229370]
[35.61923981 131.64443970]
[48.31546021 123.65657043]
[61.01168060 115.66870880]
[73.70790100 107.68083954]
[72.60985565 99.77706909]
[73.83641052 91.89221954]
[61.27188492 83.69876099]
[48.70736313 75.50529480]
[36.14284515 67.31183624]
[23.57832146 59.11837387]
[10.80914211 61.00697327]
[0.50950509 53.91161728]
[-2.10175896 42.09053802]
[-14.53125095 33.69364929]
[-30.29780960 32.37979507]
[-36.51276016 18.84378433]
[-48.94225311 10.44689560]
[-61.37174606 2.05000758]
[-73.80123901 -6.34688044]
[-88.33983612 -0.92390025]
[-103.28030396 -5.11461782]
[-112.87772369 -17.30761719]
[-113.44168854 -32.81444168]
[-104.75534058 -45.67239761]
[-90.15876770 -50.93734360]
[-75.26464081 -46.58479691]
[-65.80006409 -34.28840256]
[-65.40435028 -18.77637291]
[-52.97485733 -10.37948418]
[-40.54536438 -1.98259652]
[-28.11587334 6.41429138]
[-13.23835564 7.12754202]
[-6.13436317 21.26415634]
[6.29512882 29.66104507]
[23.83535767 29.94552422]
[31.77178383 46.55385590]
[44.33630371 54.74731445]
[56.90082550 62.94077682]
[69.46534729 71.13423920]
[82.02986908 79.32769775]
[85.13894653 76.99089813]
[88.54765320 75.11801147]
[92.18727112 73.74679565]
[95.98439789 72.90489960]
[97.93220520 58.03189850]
[99.88001251 43.15890121]
[101.82781982 28.28590393]
[103.77562714 13.41290665]
[105.72342682 -1.46009064]
[107.67123413 -16.33308792]
[96.76148224 -29.99848366]
[99.05763245 -46.99263000]
[112.65676117 -56.87557602]
[114.36222076 -71.77830505]
[105.54734039 -85.18268585]
[110.66806793 -100.38655853]
[125.79622650 -105.72681427]
[139.32678223 -97.10686493]
[140.88026428 -81.13920593]
[129.26495361 -70.07284546]
[127.55949402 -55.17011642]
[136.91328430 -46.29525757]
[139.48129272 -33.46091843]
[134.10496521 -21.31413460]
[122.54423523 -14.38528252]
[120.59642792 0.48771527]
[118.64862061 15.36071301]
[116.70081329 30.23370934]
[114.75301361 45.10670853]
[112.80520630 59.97970581]
[110.85739899 74.85269928]
[124.59497833 87.94359589]
[126.52817535 106.82097626]
[139.47767639 114.39134979]
[144.72776794 114.41648865]
[149.00891113 116.27556610]
[151.78298950 119.28863525]
[152.86157227 122.66059113]
[165.42608643 130.85404968]
[177.99061584 139.04751587]
[190.55513000 147.24096680]
[203.11965942 155.43443298]
[215.68417358 163.62789917]
[228.24870300 171.82135010]
[240.81321716 180.01481628]
[261.72924805 169.63356018]
[284.57879639 173.81951904]
[300.29211426 190.76412964]
[302.72012329 213.62377930]
[316.44638062 219.67274475]
[330.17263794 225.72171021]
[343.89886475 231.77066040]
[353.02917480 232.37026978]
[357.79806519 238.03141785]
[371.42404175 244.30299377]
[380.54336548 245.05113220]
[385.21948242 250.78915405]
[398.74157715 257.28167725]
[412.26367188 263.77423096]
[425.78576660 270.26675415]
[434.89169312 271.16323853]
[439.47381592 276.97662354]
[452.88842773 283.68838501]
[462.55184937 272.12487793]
[474.62191772 263.10208130]
[488.44763184 257.10659790]
[503.28344727 254.46176147]
[518.32928467 255.31019592]
[532.77374268 259.60614014]
[545.83776855 267.11791992]
[556.81695557 277.44042969]
[565.11914062 290.01702881]
[570.29663086 304.16943359]
[572.07012939 319.13442993]
[570.34411621 334.10498047]
[565.21160889 348.27374268]
[556.94940186 360.87661743]
[546.00305176 371.23394775]
[532.96289062 378.78717041]
[518.53216553 383.12896729]
[503.48910522 384.02514648]
[488.64498901 381.42739868]
[474.80029297 375.47586060]
[462.70166016 366.49142456]
[453.00155640 354.95864868]
[446.22311401 341.49948120]
[442.73187256 326.83975220]
[442.71609497 311.77001953]
[446.17663574 297.10299683]
[432.76202393 290.39123535]
[419.29321289 283.78884888]
[405.77114868 277.29632568]
[392.24905396 270.80377197]
[378.72695923 264.31124878]
[365.15246582 257.92898560]
[351.52648926 251.65739441]
[337.84991455 245.49691772]
[324.12365723 239.44795227]
[310.39739990 233.39900208]
[296.67114258 227.35003662]
[291.72998047 232.99488831]
[285.72671509 237.51258850]
[278.91397095 240.70716858]
[271.57974243 242.43850708]
[264.03503418 242.62841797]
[256.60076904 241.26420593]
[249.59417725 238.39936829]
[243.31510925 234.15150452]
[238.03340149 228.69755554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 128]
[5 127]
[6 126]
[7 125]
[8 124]
[9 123]
[10 122]
[11 121]
[12 117]
[13 116]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 41]
[21 40]
[22 39]
[23 38]
[25 33]
[26 32]
[27 31]
[49 83]
[50 82]
[51 81]
[52 80]
[53 79]
[56 77]
[57 76]
[59 74]
[60 73]
[61 72]
[62 71]
[87 114]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[93 108]
[96 104]
[97 103]
[132 183]
[133 182]
[134 181]
[135 180]
[137 179]
[138 178]
[140 177]
[141 176]
[142 175]
[143 174]
[145 173]
[146 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
