%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGAAAUCGGAAAGUUGGCGGGGCUGCGGGAGCUGAGCCUAGAGUCCGGCUGUUGGCUAGAGUGGGCGCGGAUCUGGUGUGGGGAAGGCGGCGGGACUCAGGCCUGCCUGCGAAGCAUUGUCCUACAUA\
) } def
/len { sequence length } bind def

/coor [
[67.73091125 430.53292847]
[60.35820770 443.72894287]
[49.42231750 454.16436768]
[35.89564133 460.91125488]
[20.98096848 463.36968994]
[6.00449991 461.32107544]
[-7.70206785 454.94760132]
[-18.91995430 444.81594849]
[-26.65167427 431.82702637]
[-30.20972824 417.13580322]
[-29.27773666 402.04864502]
[-23.93857002 387.90704346]
[-14.66698456 375.96847534]
[-2.28740358 367.29452515]
[12.09939003 362.65646362]
[27.21413040 362.46670532]
[31.44011879 348.07431030]
[26.35798073 331.32083130]
[39.67343521 318.66702271]
[43.55572128 304.17813110]
[47.43800735 289.68923950]
[51.32029343 275.20037842]
[55.20257950 260.71148682]
[51.02298355 246.41531372]
[62.06838608 235.08793640]
[65.95067596 220.59904480]
[69.83296204 206.11015320]
[73.36934662 191.53298950]
[76.55782318 176.87577820]
[79.74629974 162.21858215]
[82.93478394 147.56137085]
[86.12326050 132.90417480]
[89.13710022 118.21006775]
[91.97586823 103.48114014]
[90.40045929 100.74556732]
[89.82784271 97.35591888]
[90.50949097 93.69873047]
[92.54427338 90.25039673]
[95.84878540 87.51674652]
[100.07477570 73.12435150]
[104.30076599 58.73195648]
[108.52674866 44.33956146]
[107.94575500 35.12364197]
[113.02835083 29.65716362]
[117.59564972 15.36941433]
[122.16294861 1.08166432]
[126.73023987 -13.20608521]
[131.29754639 -27.49383545]
[135.86483765 -41.78158569]
[132.69689941 -57.28238297]
[143.94209290 -67.04941559]
[148.50938416 -81.33716583]
[153.07667542 -95.62491608]
[157.64398193 -109.91266632]
[162.21127319 -124.20041656]
[166.77857971 -138.48815918]
[159.79121399 -152.40989685]
[164.62663269 -166.83464050]
[177.94194031 -173.41023254]
[182.50924683 -187.69798279]
[175.90872192 -194.08186340]
[171.81022644 -202.25015259]
[170.64904785 -211.27078247]
[172.52711487 -220.12506104]
[177.20478821 -227.82272339]
[184.13098145 -233.51268005]
[192.50798035 -236.57704163]
[201.38325500 -236.69822693]
[207.61447144 -250.34271240]
[213.84570312 -263.98718262]
[220.07691956 -277.63165283]
[213.19305420 -291.67254639]
[216.99516296 -306.84088135]
[229.68803406 -315.97460938]
[245.27845764 -314.76110840]
[256.40512085 -303.77331543]
[257.81436157 -288.19937134]
[248.84077454 -275.39279175]
[233.72140503 -271.40045166]
[227.49017334 -257.75595093]
[221.25895691 -244.11148071]
[215.02772522 -230.46699524]
[224.42129517 -211.49754333]
[216.87402344 -191.42425537]
[196.79699707 -183.13067627]
[192.22969055 -168.84292603]
[199.26181030 -155.76298523]
[194.83345032 -141.20811462]
[181.06632996 -133.92086792]
[176.49902344 -119.63311768]
[171.93173218 -105.34536743]
[167.36442566 -91.05761719]
[162.79713440 -76.76986694]
[158.22982788 -62.48212051]
[161.72445679 -48.00327682]
[150.15258789 -37.21428680]
[145.58529663 -22.92653847]
[141.01799011 -8.63878822]
[136.45069885 5.64896154]
[131.88339233 19.93671227]
[127.31610107 34.22446060]
[122.91914368 48.56554794]
[118.69316101 62.95794296]
[114.46717072 77.35034180]
[110.24118042 91.74272919]
[106.70479584 106.31990814]
[103.86602783 121.04883575]
[105.32042694 130.16780090]
[100.78046417 136.09265137]
[97.59198761 150.74986267]
[94.40350342 165.40705872]
[91.21502686 180.06427002]
[88.02654266 194.72146606]
[89.71250916 201.27772522]
[88.02016449 206.83186340]
[84.32184601 209.99244690]
[80.43955994 224.48133850]
[76.55727386 238.97021484]
[80.45918274 254.30271912]
[69.69146729 264.59375000]
[65.80918121 279.08264160]
[61.92689514 293.57153320]
[58.04460907 308.06042480]
[54.16232300 322.54931641]
[59.94032288 334.15197754]
[56.33962250 346.18435669]
[45.83251190 352.30032349]
[41.60652542 366.69271851]
[54.21926498 375.02398682]
[63.81468201 386.70385742]
[69.53955841 400.69375610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 128]
[17 127]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[25 118]
[26 117]
[27 116]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[33 107]
[34 106]
[39 105]
[40 104]
[41 103]
[42 102]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[51 94]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[59 86]
[60 85]
[68 82]
[69 81]
[70 80]
[71 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
