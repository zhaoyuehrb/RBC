%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGAGGGAGGCAGGGAAUCUGGCUUGAUUGGCGUGCUGAGACGCACCUGGCGCAACCCUCCCUUCUGAAUCGAAGUUCAAGUCCCGCGGACACUGCAACC\
) } def
/len { sequence length } bind def

/coor [
[49.92853165 261.65515137]
[55.97487259 245.81600952]
[55.97487259 230.81600952]
[55.97487259 215.81600952]
[55.97487259 200.81600952]
[48.23757172 188.08872986]
[55.97487259 174.28855896]
[55.97487259 159.28855896]
[87.95768738 96.96161652]
[77.03557587 86.68020630]
[66.11345673 76.39879608]
[55.19134521 66.11738586]
[44.26922989 55.83597183]
[28.91740227 52.01079941]
[24.95351219 37.65333557]
[14.03139877 27.37192345]
[3.10928416 17.09051132]
[-7.81282997 6.80910015]
[-19.94917488 11.73596478]
[-33.00001907 11.64750957]
[-44.98160934 6.59322834]
[-54.08650589 -2.62531185]
[-58.95622253 -14.58137131]
[-58.88384247 -27.44377899]
[-53.91641235 -39.25737762]
[-64.19782257 -50.17949295]
[-74.47924042 -61.10160828]
[-86.89091492 -56.91650391]
[-99.91260529 -57.79278946]
[-111.56716919 -63.56127930]
[-120.09885406 -73.31274414]
[-124.23780060 -85.54101562]
[-123.38893890 -98.37558746]
[-117.71728516 -109.86770630]
[-127.32047272 -121.39067078]
[-136.92366028 -132.91363525]
[-146.52685547 -144.43659973]
[-162.28700256 -145.61708069]
[-172.53289795 -157.65023804]
[-171.18585205 -173.39701843]
[-159.04504395 -183.51513672]
[-143.31338501 -182.00167847]
[-133.32420349 -169.75456238]
[-135.00389099 -154.03979492]
[-125.40070343 -142.51683044]
[-115.79750824 -130.99386597]
[-106.19432068 -119.47089386]
[-89.49573517 -123.04988861]
[-73.16976166 -117.74673462]
[-61.64453125 -104.90717316]
[-58.09239578 -87.93345642]
[-63.55712128 -71.38301849]
[-53.27571106 -60.46090317]
[-42.99430084 -49.53878784]
[-26.54227448 -54.11948776]
[-9.92589283 -49.81174088]
[2.35354447 -37.69148636]
[6.92404652 -20.96320534]
[2.46858120 -4.11301422]
[13.39069557 6.16839695]
[24.31280899 16.44980812]
[35.23492432 26.73122025]
[49.80553055 29.82099533]
[54.55064392 44.91385651]
[65.47275543 55.19527054]
[76.39487457 65.47667694]
[87.31698608 75.75809479]
[98.23909760 86.03950500]
[112.55991364 90.50205231]
[127.38914490 88.24507904]
[142.21836853 85.98811340]
[157.04760742 83.73114777]
[171.87683105 81.47418213]
[184.33854675 70.81407166]
[199.70909119 76.53055573]
[202.17658997 92.74300385]
[189.20266724 102.77344513]
[174.13380432 96.30341339]
[159.30458069 98.56037903]
[144.47534180 100.81734467]
[129.64611816 103.07431030]
[114.81687927 105.33128357]
[112.91223145 112.58540344]
[107.19829559 134.34777832]
[119.00605011 143.59855652]
[130.81379700 152.84934998]
[142.62155151 162.10012817]
[158.81875610 167.10884094]
[158.48960876 184.05960083]
[142.11018372 188.43574524]
[133.37077332 173.90788269]
[121.56301880 164.65710449]
[109.75526428 155.40631104]
[97.94751740 146.15553284]
[91.20435333 149.43878174]
[70.97486877 159.28855896]
[70.97486877 174.28855896]
[78.71217346 188.08872986]
[70.97486877 200.81600952]
[70.97486877 215.81600952]
[70.97486877 230.81600952]
[70.97486877 245.81600952]
[77.02120972 261.65515137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[7 97]
[8 96]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[15 62]
[16 61]
[17 60]
[18 59]
[25 54]
[26 53]
[27 52]
[34 47]
[35 46]
[36 45]
[37 44]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
[84 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
