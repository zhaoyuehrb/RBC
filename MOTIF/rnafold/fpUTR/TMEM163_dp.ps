%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:11 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TMEM163)
} def

/sequence { (\
CGCACUUCUGACUCGAGUCCCCGCCGCGCUUGUCGUCGCCGCCGCCGGGAUCCGCAGCCCCGCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.017432660 ubox
1 15 0.011260572 ubox
1 62 0.022586715 ubox
1 64 0.929444931 ubox
2 9 0.013473963 ubox
2 14 0.011337636 ubox
2 24 0.003306225 ubox
2 42 0.004476982 ubox
2 55 0.007019654 ubox
2 58 0.011125115 ubox
2 61 0.023736893 ubox
2 63 0.984173678 ubox
2 65 0.094307266 ubox
3 10 0.028633597 ubox
3 23 0.003315233 ubox
3 41 0.004483770 ubox
3 54 0.006868789 ubox
3 57 0.010389538 ubox
3 62 0.982869101 ubox
3 64 0.094287716 ubox
4 9 0.024716760 ubox
4 18 0.014708507 ubox
5 17 0.017975755 ubox
5 57 0.007332292 ubox
6 16 0.016658166 ubox
6 17 0.014380652 ubox
6 56 0.006564505 ubox
6 57 0.003453527 ubox
7 15 0.014347052 ubox
7 16 0.035429530 ubox
8 15 0.037556437 ubox
8 17 0.010565245 ubox
8 57 0.980508811 ubox
9 15 0.004912586 ubox
9 16 0.011563037 ubox
9 38 0.008042545 ubox
9 56 0.984003390 ubox
9 62 0.019206682 ubox
9 64 0.003380258 ubox
10 14 0.007634576 ubox
10 19 0.017882556 ubox
10 37 0.010800719 ubox
10 52 0.004334206 ubox
10 55 0.982630258 ubox
10 61 0.032521203 ubox
10 63 0.004623484 ubox
11 18 0.018139690 ubox
11 36 0.010804788 ubox
11 51 0.003800430 ubox
12 17 0.018184688 ubox
12 35 0.010786918 ubox
12 57 0.118539568 ubox
13 56 0.119119326 ubox
14 32 0.010807265 ubox
14 54 0.954423801 ubox
15 31 0.010968018 ubox
15 52 0.210130880 ubox
15 53 0.956678769 ubox
16 30 0.011002949 ubox
16 51 0.182896192 ubox
17 29 0.011001963 ubox
17 51 0.956363492 ubox
18 28 0.010609132 ubox
18 49 0.003304014 ubox
18 50 0.997696100 ubox
19 48 0.004215182 ubox
19 49 0.998742624 ubox
20 47 0.004225385 ubox
20 48 0.998065866 ubox
20 49 0.046352100 ubox
21 47 0.996813824 ubox
21 48 0.059303998 ubox
22 41 0.005045674 ubox
22 44 0.069090907 ubox
22 47 0.069852980 ubox
23 40 0.004844050 ubox
23 42 0.060836551 ubox
23 43 0.060813233 ubox
23 45 0.993289006 ubox
23 46 0.063262693 ubox
24 41 0.070546037 ubox
24 44 0.993459982 ubox
25 38 0.008950398 ubox
25 41 0.114428340 ubox
25 44 0.058671082 ubox
26 36 0.004319481 ubox
26 37 0.008816875 ubox
26 39 0.093948705 ubox
26 40 0.109903244 ubox
26 42 0.986407649 ubox
26 43 0.061465806 ubox
26 45 0.010334043 ubox
26 63 0.003632980 ubox
27 35 0.009239406 ubox
27 38 0.101875639 ubox
27 41 0.987446127 ubox
27 44 0.010383169 ubox
27 62 0.003633113 ubox
28 34 0.009100127 ubox
28 36 0.034325944 ubox
28 37 0.100322118 ubox
28 39 0.647987485 ubox
28 40 0.749636204 ubox
28 42 0.049992024 ubox
28 43 0.008909374 ubox
28 61 0.003329748 ubox
29 35 0.095141133 ubox
29 38 0.909871888 ubox
29 41 0.050198283 ubox
30 57 0.004176264 ubox
31 38 0.265084853 ubox
31 56 0.004745902 ubox
32 37 0.305019125 ubox
32 39 0.172683127 ubox
32 40 0.005429777 ubox
32 42 0.003506976 ubox
32 55 0.005128646 ubox
33 38 0.163255358 ubox
33 54 0.004674983 ubox
34 41 0.003904945 ubox
35 40 0.004771635 ubox
35 51 0.004665326 ubox
36 50 0.005011077 ubox
37 49 0.005034253 ubox
39 48 0.005274401 ubox
40 47 0.005280620 ubox
41 46 0.005036283 ubox
41 65 0.007895594 ubox
42 64 0.005661584 ubox
43 64 0.012457183 ubox
44 63 0.014312677 ubox
44 65 0.008290727 ubox
45 62 0.013827664 ubox
45 64 0.008309162 ubox
46 62 0.009239502 ubox
47 60 0.013494123 ubox
47 61 0.009998777 ubox
48 59 0.013526112 ubox
48 60 0.009967648 ubox
49 58 0.013541545 ubox
49 59 0.009918602 ubox
53 62 0.003667505 ubox
53 64 0.084275072 ubox
54 61 0.004738366 ubox
54 63 0.091711593 ubox
54 65 0.037932010 ubox
55 62 0.091699320 ubox
55 64 0.038205902 ubox
57 63 0.040328736 ubox
57 65 0.027683839 ubox
58 62 0.040208270 ubox
58 64 0.028260089 ubox
1 64 0.9500000 lbox
2 63 0.9500000 lbox
3 62 0.9500000 lbox
8 57 0.9500000 lbox
9 56 0.9500000 lbox
10 55 0.9500000 lbox
14 54 0.9500000 lbox
15 53 0.9500000 lbox
17 51 0.9500000 lbox
18 50 0.9500000 lbox
19 49 0.9500000 lbox
20 48 0.9500000 lbox
21 47 0.9500000 lbox
23 45 0.9500000 lbox
24 44 0.9500000 lbox
26 42 0.9500000 lbox
27 41 0.9500000 lbox
28 39 0.9500000 lbox
29 38 0.9500000 lbox
showpage
end
%%EOF
