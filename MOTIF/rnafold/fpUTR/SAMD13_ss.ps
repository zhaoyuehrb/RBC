%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGUCCUGCCCAGAUCUUGUCCCUUCUAGUACUGGCCUUCCCCAUUCCUGGGGGCCCCCGCCCCUCCGACCCCCGCCGACCGGCGCUGGACUACAACUCCCGGCGUGCCGCGCGCGUCCGGCCGGCUGCACCGGGGCUUUGCGCGUGGCGGCCGCCGAGCUCCGCGCGGGGCAAACCUCCCGGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[243.18487549 115.82386780]
[235.10514832 109.78125000]
[228.55027771 102.08855438]
[223.85054016 93.12163544]
[221.24536133 83.32083130]
[206.24983215 82.95462036]
[191.25430298 82.58840942]
[176.25877380 82.22219086]
[163.34640503 89.64646149]
[149.73924255 81.57455444]
[134.74371338 81.20833588]
[100.38944244 141.95518494]
[89.65414429 152.43151855]
[78.91884613 162.90783691]
[68.18354797 173.38417053]
[67.82471466 188.95686340]
[56.78836060 199.42842102]
[41.94438171 198.99037170]
[31.20908546 209.46669006]
[35.08055115 224.32963562]
[30.98639297 239.13279724]
[20.02791977 249.89418030]
[5.15290689 253.71903992]
[-9.63734341 249.57850647]
[-20.36432838 238.58634949]
[-24.14254189 223.69943237]
[-19.95566368 208.92222595]
[-8.92994308 198.22975159]
[5.96875620 194.49821472]
[20.73275948 198.73139954]
[31.46805573 188.25506592]
[31.39252663 173.40481567]
[42.13040543 162.62741089]
[57.70722198 162.64888000]
[68.44252014 152.17254639]
[79.17781830 141.69622803]
[89.91310883 131.21989441]
[88.39759064 123.87461090]
[73.95385742 127.92167664]
[59.51013184 131.96875000]
[47.31326675 140.70008850]
[33.34467316 135.23397827]
[30.31309509 120.54352570]
[40.97668839 109.99422455]
[55.63448334 113.18465424]
[70.50051117 111.18434906]
[85.36653900 109.18404388]
[83.85101318 101.83876038]
[69.84584808 96.46704102]
[55.54959869 102.65210724]
[41.42289352 97.00491333]
[35.61448288 83.33750916]
[21.60931969 77.96578979]
[7.60415459 72.59406281]
[-6.40100956 67.22234344]
[-20.40617371 61.85062790]
[-34.41133881 56.47890472]
[-50.51427841 59.58169556]
[-61.04688263 47.01203537]
[-55.17410660 31.70051956]
[-38.93736267 29.39831924]
[-29.03961754 42.47374344]
[-15.03445339 47.84546280]
[-1.02928960 53.21718216]
[12.97587490 58.58890152]
[26.98103905 63.96062088]
[40.98620224 69.33234406]
[54.44456863 63.05476379]
[68.72431946 68.30294037]
[75.21756744 82.46187592]
[89.22273254 87.83359528]
[94.19263458 82.21665192]
[80.43708038 76.23462677]
[81.87581635 61.30378342]
[96.52052307 58.05839920]
[104.13244629 70.98276520]
[109.10234833 65.36582184]
[102.06507111 52.11906433]
[95.02778625 38.87230301]
[80.84433746 30.64054680]
[81.15209961 14.24428749]
[95.63446808 6.55059242]
[109.39323425 15.47407532]
[108.27454376 31.83502197]
[115.31182861 45.08178329]
[122.34911346 58.32854462]
[135.10992432 66.21280670]
[150.10545349 66.57902527]
[164.09040833 59.18094635]
[176.62498474 67.22666931]
[191.62051392 67.59288025]
[206.61604309 67.95909119]
[221.61157227 68.32530212]
[228.18341064 52.22026062]
[240.28355408 39.77936935]
[256.12765503 32.79476929]
[273.39511108 32.25711441]
[289.56893921 38.21517181]
[302.30267334 49.77302170]
[315.60626221 42.84378433]
[328.90985107 35.91454697]
[338.42794800 20.15925026]
[355.91235352 21.58649063]
[369.10137939 14.44163036]
[382.29043579 7.29676867]
[395.47949219 0.15190753]
[401.54592896 -6.69789839]
[408.94186401 -6.99992418]
[422.24545288 -13.92916107]
[435.54907227 -20.85839844]
[448.85266113 -27.78763580]
[462.15625000 -34.71687317]
[475.45983887 -41.64611053]
[488.76342773 -48.57534790]
[502.06704712 -55.50458145]
[515.37060547 -62.43381882]
[528.67425537 -69.36306000]
[541.97784424 -76.29229736]
[541.58154297 -91.51084900]
[547.80676270 -105.33596039]
[559.36987305 -115.04749298]
[573.94305420 -118.76024628]
[588.62243652 -115.78970337]
[600.50720215 -106.77757263]
[613.81079102 -113.70681000]
[627.11437988 -120.63603973]
[640.41796875 -127.56527710]
[646.59075928 -142.37326050]
[662.05572510 -146.64106750]
[674.94946289 -137.09481812]
[675.38104248 -121.05756378]
[663.01928711 -110.83172607]
[647.34722900 -114.26168060]
[634.04364014 -107.33245087]
[620.73999023 -100.40321350]
[607.43640137 -93.47397614]
[608.00866699 -78.56967926]
[602.02844238 -64.83846283]
[590.63275146 -55.02523804]
[576.04693604 -51.11697769]
[561.15014648 -53.94060898]
[548.90704346 -62.98869705]
[535.60345459 -56.05945969]
[522.29986572 -49.13022232]
[508.99627686 -42.20098877]
[495.69268799 -35.27175140]
[482.38906860 -28.34251213]
[469.08547974 -21.41327667]
[455.78189087 -14.48403931]
[442.47830200 -7.55480194]
[429.17471313 -0.62556481]
[415.87109375 6.30367231]
[402.62432861 13.34095478]
[389.43530273 20.48581505]
[376.24624634 27.63067627]
[363.05718994 34.77553940]
[359.30569458 46.28565598]
[348.36328125 52.34287262]
[335.83911133 49.21814346]
[322.53549194 56.14738083]
[309.23190308 63.07661819]
[311.24972534 80.77160645]
[306.24478149 97.86356354]
[295.00109863 111.67528534]
[302.46582031 124.68596649]
[309.93057251 137.69664001]
[317.39529419 150.70732117]
[324.86001587 163.71800232]
[332.32473755 176.72868347]
[345.90356445 184.84820557]
[345.52609253 199.73802185]
[352.99081421 212.74870300]
[360.45556641 225.75938416]
[375.87902832 228.33831787]
[385.99700928 240.26141357]
[386.03213501 255.89895630]
[375.96780396 267.86737061]
[360.55606079 270.51556396]
[347.07391357 262.59310913]
[341.88717651 247.84074402]
[347.44488525 233.22412109]
[339.98016357 220.21343994]
[332.51541138 207.20275879]
[319.47055054 200.01385498]
[319.31405640 184.19342041]
[311.84933472 171.18273926]
[304.38461304 158.17205811]
[296.91989136 145.16137695]
[289.45513916 132.15069580]
[281.99041748 119.14001465]
[272.28076172 121.61581421]
[262.24676514 121.88391113]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 93]
[6 92]
[7 91]
[8 90]
[10 88]
[11 87]
[12 37]
[13 36]
[14 35]
[15 34]
[18 31]
[19 30]
[48 71]
[49 70]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[57 62]
[77 86]
[78 85]
[79 84]
[99 161]
[100 160]
[101 159]
[103 156]
[104 155]
[105 154]
[106 153]
[108 152]
[109 151]
[110 150]
[111 149]
[112 148]
[113 147]
[114 146]
[115 145]
[116 144]
[117 143]
[118 142]
[124 136]
[125 135]
[126 134]
[127 133]
[164 190]
[165 189]
[166 188]
[167 187]
[168 186]
[169 185]
[171 183]
[172 182]
[173 181]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
