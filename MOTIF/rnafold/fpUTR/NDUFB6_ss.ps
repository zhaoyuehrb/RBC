%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUAACCGCGCGCGGCGCUCGGCGUUCCCGCAAGGUCGCUUUGCAGAGCGGGAGCGCGCUUAAGUAACUAGUCCGUAGUUCGAGGGUGCGCCGUGUCCUUUUGCGUUGGUACCAGCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[167.21075439 321.00863647]
[154.36917114 329.33645630]
[139.12733459 330.73104858]
[124.98769379 324.87194824]
[115.19944000 313.10552979]
[112.01183319 298.13565063]
[116.15737152 283.40222168]
[126.68344116 272.29095459]
[141.17121887 267.35510254]
[143.42460632 252.52531433]
[145.67799377 237.69554138]
[143.98513794 222.79136658]
[138.46327209 208.84472656]
[132.94140625 194.89807129]
[127.41954041 180.95143127]
[121.89767456 167.00477600]
[116.37580109 153.05813599]
[110.85393524 139.11149597]
[105.33206940 125.16484070]
[99.81019592 111.21819305]
[94.60574341 111.99710846]
[88.88450623 110.20301819]
[83.93495941 105.62851715]
[81.08789062 98.69993591]
[68.03513336 91.30902863]
[54.98237610 83.91812134]
[41.92961884 76.52720642]
[28.87686348 69.13629913]
[15.82410717 61.74538803]
[2.77135062 54.35447693]
[-10.28140545 46.96356964]
[-23.33416176 39.57265854]
[-36.38691711 32.18174744]
[-50.46083069 38.44522476]
[-65.35021210 35.25778961]
[-75.38895416 24.04673958]
[-76.88334656 9.25130844]
[-89.93610382 1.86039782]
[-105.09825897 6.31960440]
[-118.93245697 -1.32176447]
[-123.23110962 -16.53022003]
[-115.44390869 -30.28285599]
[-100.19084930 -34.42047501]
[-86.52131653 -26.48830414]
[-82.54518890 -11.19235802]
[-69.49243164 -3.80144835]
[-56.03618622 -10.13132477]
[-41.25808334 -7.29024220]
[-30.86508942 3.83805609]
[-28.99600792 19.12899208]
[-15.94325161 26.51990318]
[-2.89049554 33.91081238]
[10.16226101 41.30172348]
[23.21501732 48.69263077]
[36.26777267 56.08354187]
[49.32052994 63.47445297]
[62.37328720 70.86536407]
[75.42604065 78.25627136]
[88.47879791 85.64718628]
[103.09670258 82.28311920]
[111.60573578 69.93013000]
[120.11476898 57.57714462]
[128.62380981 45.22415543]
[123.06682587 32.54122162]
[124.51999664 18.88000298]
[132.49359131 7.82605219]
[144.80082703 2.22684264]
[158.15658569 3.45860291]
[166.97337341 -8.67665195]
[175.79014587 -20.81190681]
[184.60693359 -32.94716263]
[193.42370605 -45.08241653]
[192.34428406 -61.08911514]
[204.28256226 -71.80626678]
[220.08050537 -69.01258087]
[227.61927795 -54.85114288]
[221.11579895 -40.18539429]
[205.55895996 -36.26563644]
[196.74218750 -24.13038254]
[187.92539978 -11.99512863]
[179.10862732 0.14012666]
[170.29185486 12.27538204]
[175.86720276 27.66067505]
[171.16522217 43.50765228]
[157.83671570 53.56169891]
[140.97679138 53.73318863]
[132.46775818 66.08618164]
[123.95872498 78.43917084]
[115.44969177 90.79215240]
[113.75684357 105.69632721]
[119.27871704 119.64297485]
[124.80058289 133.58961487]
[130.32244873 147.53627014]
[135.84431458 161.48291016]
[141.36618042 175.42956543]
[146.88806152 189.37620544]
[152.40992737 203.32286072]
[157.93179321 217.26950073]
[154.27824402 202.72125244]
[159.69981384 188.73530579]
[172.20439148 180.45065308]
[187.19731140 180.91140747]
[199.16958618 189.94824219]
[203.72213745 204.24070740]
[199.18215942 218.53715515]
[187.21749878 227.58465576]
[196.03427124 239.71990967]
[204.85105896 251.85517883]
[213.66783142 263.99041748]
[222.48461914 276.12567139]
[237.67790222 282.29788208]
[239.66094971 298.57669067]
[226.39375305 308.21585083]
[211.52447510 301.29943848]
[210.34934998 284.94247437]
[201.53257751 272.80722046]
[192.71580505 260.67193604]
[183.89901733 248.53669739]
[175.08224487 236.40144348]
[160.50776672 239.94892883]
[158.25437927 254.77870178]
[156.00099182 269.60848999]
[168.36871338 278.62503052]
[175.11917114 292.36148071]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 122]
[10 121]
[11 120]
[12 98]
[13 97]
[14 96]
[15 95]
[16 94]
[17 93]
[18 92]
[19 91]
[20 90]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[37 46]
[38 45]
[60 89]
[61 88]
[62 87]
[63 86]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
