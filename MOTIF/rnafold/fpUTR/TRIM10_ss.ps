%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGUGUGACCCAGCCCUUCCCCCGUGGCCAAGCAGAGAGAGUGGCCUUGAGGAAGCCAUAGCAGCAGGACCAGC\
) } def
/len { sequence length } bind def

/coor [
[87.34016418 269.54757690]
[72.30412292 271.21270752]
[57.48985291 268.14797974]
[44.34870529 260.65362549]
[34.16811371 249.46385193]
[27.94547272 235.67494202]
[26.29040909 220.63780212]
[29.36507225 205.82557678]
[36.86823654 192.68946838]
[48.06481552 182.51637268]
[61.85788727 176.30296326]
[76.89614868 174.65798950]
[79.93495941 159.96902466]
[74.93648529 145.93817139]
[85.30908966 133.99163818]
[88.34790039 119.30268097]
[77.49526215 98.62099457]
[90.79182434 79.41907501]
[89.56918335 64.46898651]
[88.34654236 49.51889801]
[87.12390900 34.56880951]
[85.90126801 19.61872101]
[76.48480225 10.53674030]
[75.92080688 -2.12856030]
[83.96323395 -11.39954567]
[83.35140228 -26.38706207]
[75.05765533 -39.86015701]
[82.26938629 -52.89242935]
[81.65755463 -67.87994385]
[81.04573059 -82.86746216]
[80.43389893 -97.85498047]
[79.82206726 -112.84249878]
[65.96367645 -119.33892822]
[56.72096634 -131.53855896]
[54.21783829 -146.63798523]
[59.02949524 -161.16749573]
[70.05025482 -171.78829956]
[84.74762726 -176.05981445]
[99.74426270 -173.00048828]
[111.59403992 -163.31330872]
[117.57397461 -149.22434998]
[116.30992126 -133.97113037]
[108.09234619 -121.05873108]
[94.80958557 -113.45433044]
[95.42141724 -98.46681213]
[96.03324127 -83.47929382]
[96.64507294 -68.49177551]
[97.25690460 -53.50426102]
[105.50688934 -41.10317230]
[98.33892059 -26.99889183]
[98.95074463 -12.01137447]
[109.15975952 2.11170816]
[100.85135651 18.39608192]
[102.07399750 33.34616852]
[103.29663086 48.29625702]
[104.51927185 63.24634552]
[105.74191284 78.19643402]
[112.03282166 80.93232727]
[117.20982361 85.43336487]
[120.79366302 91.28286743]
[122.45258331 97.93933868]
[122.03301239 104.78657532]
[119.57378387 111.19070435]
[115.30256653 116.55887604]
[109.61474609 120.39415741]
[103.03686523 122.34149933]
[99.99804688 137.03045654]
[104.77916718 152.11195374]
[94.62392426 163.00782776]
[91.58510590 177.69679260]
[104.73628998 185.17353821]
[114.93186188 196.34963989]
[121.17298126 210.13020325]
[122.84819031 225.16511536]
[119.79338837 239.98144531]
[112.30783081 253.12760925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 70]
[13 69]
[15 67]
[16 66]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[25 51]
[26 50]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
