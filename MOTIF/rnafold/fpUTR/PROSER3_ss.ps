%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGACGGAGAUGCGCGCGGGGCCUGUUGGGUGAAGGAGCAGAGCGGCCGGAAGCGCGGAGGGAGCCGCGGG\
) } def
/len { sequence length } bind def

/coor [
[83.19660187 354.14605713]
[72.56732178 342.45016479]
[73.40498352 326.66809082]
[85.21260834 316.16305542]
[85.84922028 301.17657471]
[82.89754486 294.15139771]
[86.84431458 285.57150269]
[88.11640167 270.62554932]
[89.38848877 255.67958069]
[74.78456116 247.71336365]
[64.97961426 234.20777893]
[61.90809631 217.74841309]
[66.20982361 201.51100159]
[77.09742737 188.64872742]
[92.50000000 181.67993164]
[92.50000000 166.67993164]
[92.50000000 151.67993164]
[92.50000000 136.67993164]
[92.50000000 121.67993927]
[79.25312042 109.78961945]
[78.49764252 92.00510406]
[90.68843079 79.03421021]
[89.41634369 64.08824921]
[88.14425659 49.14228439]
[86.87216187 34.19632339]
[82.92539978 25.61642456]
[85.87707520 18.59125519]
[85.24045563 3.60477090]
[84.60383606 -11.38171387]
[73.24659729 -22.04242897]
[72.81446838 -37.24992371]
[83.04782104 -48.01161957]
[82.41120148 -62.99810410]
[70.60357666 -73.50312805]
[69.76592255 -89.28520203]
[80.39519501 -100.98110199]
[96.18524170 -101.65185547]
[107.76811218 -90.89951324]
[108.27188110 -75.10325623]
[97.39768219 -63.63471985]
[98.03430176 -48.64823532]
[109.14344788 -38.79315948]
[110.00255585 -23.60380363]
[99.59032440 -12.01833153]
[100.22694397 2.96815276]
[100.86355591 17.95463753]
[101.81813049 32.92423248]
[103.09021759 47.87019730]
[104.36230469 62.81615829]
[105.63439178 77.76212311]
[115.80799103 83.37541199]
[121.92615509 93.25363159]
[122.41929626 104.86259460]
[117.16091156 115.22409058]
[107.50000000 121.67993927]
[107.50000000 136.67993164]
[107.50000000 151.67993164]
[107.50000000 166.67993164]
[107.50000000 181.67993164]
[120.07038116 186.69602966]
[130.09992981 195.73518372]
[136.36114502 207.66079712]
[138.09819031 220.98492432]
[135.11816406 234.05390930]
[127.81219482 245.25358582]
[117.10427856 253.20867920]
[104.33445740 256.95166016]
[103.06236267 271.89764404]
[101.79027557 286.84359741]
[100.83570862 301.81320190]
[100.19908905 316.79968262]
[111.07328796 328.26821899]
[110.56951141 344.06448364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 71]
[5 70]
[7 69]
[8 68]
[9 67]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[22 50]
[23 49]
[24 48]
[25 47]
[27 46]
[28 45]
[29 44]
[32 41]
[33 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
