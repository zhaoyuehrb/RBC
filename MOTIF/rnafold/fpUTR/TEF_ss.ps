%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGGCGCCUGCGCAGUAGCUGCCCGUGUCGGCAGCUGCAGCGGGUCGCACGGCUCCGGCCCAUCUCGGGGGGCGGGCGGGGGAGGCGAGGUGCGCGAGCCGAGUCCGGGGCACG\
) } def
/len { sequence length } bind def

/coor [
[158.27845764 233.09951782]
[173.15078735 235.05380249]
[166.90290833 221.41693115]
[160.65502930 207.78007507]
[148.31964111 199.43217468]
[149.60569763 183.66333008]
[143.35781860 170.02645874]
[137.10993958 156.38960266]
[130.86207581 142.75273132]
[124.61419678 129.11587524]
[118.36632538 115.47900391]
[97.22133636 121.41543579]
[82.67356873 108.20431519]
[67.68573761 108.80831146]
[52.69790268 109.41230011]
[39.22047043 117.69899750]
[26.19197083 110.48044586]
[11.20413685 111.08444214]
[-3.78369856 111.68843079]
[-18.77153397 112.29241943]
[-33.75936890 112.89640808]
[-48.74720383 113.50039673]
[-63.73503876 114.10438538]
[-78.72286987 114.70837402]
[-93.71070862 115.31236267]
[-104.24141693 127.09708405]
[-120.02527618 127.90038300]
[-131.69801331 117.24566650]
[-132.33438110 101.45420074]
[-121.55685425 89.89476776]
[-105.75953674 89.42538452]
[-94.31469727 100.32452393]
[-79.32686615 99.72053528]
[-64.33902740 99.11654663]
[-49.35119247 98.51255798]
[-34.36335754 97.90856934]
[-19.37552261 97.30458069]
[-4.38768768 96.70059204]
[10.60014725 96.09660339]
[25.58798218 95.49261475]
[37.99338150 87.24911499]
[52.09391403 94.42446136]
[67.08174896 93.82047272]
[82.06958008 93.21648407]
[87.46499634 83.92725372]
[97.50909424 78.54919434]
[109.53145599 79.28011322]
[119.91981506 86.57903290]
[127.59353638 73.69051361]
[135.26725769 60.80199051]
[130.10513306 49.92036438]
[130.89122009 38.02303696]
[137.30892944 28.11782265]
[147.63291931 22.65145874]
[159.19126892 22.90560532]
[167.54573059 10.44756413]
[175.90020752 -2.01047683]
[184.25468445 -14.46851826]
[185.51478577 -30.23946381]
[199.02954102 -36.50051880]
[207.38400269 -48.95855713]
[215.73847961 -61.41659927]
[224.09295654 -73.87464142]
[225.35305786 -89.64558411]
[238.86781311 -95.90663910]
[247.22227478 -108.36468506]
[255.57675171 -120.82272339]
[256.13629150 -137.21232605]
[270.73513794 -144.68267822]
[284.35522461 -135.54893494]
[282.98538208 -119.20709229]
[268.03479004 -112.46825409]
[259.68032837 -100.01020813]
[251.32585144 -87.55216980]
[250.66331482 -72.67230225]
[236.55099487 -65.52017212]
[228.19651794 -53.06212616]
[219.84205627 -40.60408783]
[211.48757935 -28.14604568]
[210.82504272 -13.26618290]
[196.71272278 -6.11404562]
[188.35824585 6.34399557]
[180.00378418 18.80203629]
[171.64930725 31.26007843]
[176.32623291 48.85954285]
[166.60046387 64.62738037]
[148.15577698 68.47571564]
[140.48205566 81.36423492]
[132.80833435 94.25275421]
[132.00318909 109.23113251]
[138.25106812 122.86799622]
[144.49893188 136.50486755]
[150.74681091 150.14172363]
[156.99467468 163.77859497]
[163.24255371 177.41545105]
[176.02484131 186.73875427]
[174.29190063 201.53219604]
[180.53976440 215.16906738]
[186.78764343 228.80592346]
[193.93617249 241.99298096]
[201.95315552 254.67083740]
[209.97015381 267.34869385]
[225.46310425 268.21353149]
[237.46751404 278.04580688]
[241.36744690 293.06481934]
[235.66329956 307.49542236]
[222.54841614 315.78875732]
[207.06575012 314.75588989]
[195.16870117 304.79397583]
[191.43193054 289.73355103]
[197.29229736 275.36566162]
[189.27531433 262.68783569]
[181.25833130 250.00997925]
[174.77925110 263.53851318]
[160.22674561 267.17504883]
[148.14535522 258.28460693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[6 95]
[7 94]
[8 93]
[9 92]
[10 91]
[11 90]
[13 44]
[14 43]
[15 42]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[48 89]
[49 88]
[50 87]
[55 84]
[56 83]
[57 82]
[58 81]
[60 79]
[61 78]
[62 77]
[63 76]
[65 74]
[66 73]
[67 72]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
