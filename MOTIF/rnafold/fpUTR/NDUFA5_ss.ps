%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGAACUCUUAUGAAAACAAAGGACCUGCCAAUUCAGCUGCAGGGAGUGUUGCUACUGAUGGAACAAAACCAAACCACUUGGAAUUAACGCACAAUUUAAAGAG\
) } def
/len { sequence length } bind def

/coor [
[86.69549561 285.45388794]
[76.66381836 297.44967651]
[61.25937271 300.13986206]
[47.75566864 292.25418091]
[42.52873611 277.51602173]
[48.04658127 262.88430786]
[61.70383835 255.26765442]
[64.35719299 240.50419617]
[67.01055145 225.74073792]
[69.66390228 210.97727966]
[72.31725311 196.21382141]
[70.37144470 188.95741272]
[75.27420044 181.05497742]
[78.36387634 166.37663269]
[81.45355988 151.69828796]
[84.54323578 137.01994324]
[79.11368561 134.25126648]
[74.16620636 130.69206238]
[69.81498718 126.42446136]
[66.16044617 121.54697418]
[63.28694916 116.17217255]
[61.26080322 110.42410278]
[60.12878036 104.43544769]
[59.91700745 98.34441376]
[60.63037109 92.29159546]
[62.25240707 86.41668701]
[49.33675003 78.78871918]
[36.42109680 71.16075134]
[23.50544357 63.53278351]
[10.58978939 55.90481949]
[-2.74700522 63.52226257]
[-18.10564804 63.43472290]
[-31.35474205 55.66573715]
[-38.93034363 42.30513000]
[-38.79466248 26.94683838]
[-30.98418617 13.72216225]
[-17.59989929 6.18847466]
[-2.24210763 6.37229919]
[10.95802116 14.22418880]
[18.44971848 27.63202286]
[18.21775627 42.98916245]
[31.13340950 50.61713028]
[44.04906464 58.24509811]
[56.96471786 65.87306213]
[69.88037109 73.50102997]
[88.41445160 61.59215927]
[110.44231415 61.26570892]
[129.32115173 72.62012482]
[142.00508118 64.61277008]
[154.68902588 56.60542297]
[167.37297058 48.59807205]
[180.05690002 40.59072113]
[192.74084473 32.58337021]
[193.87571716 17.22048378]
[203.72401428 5.60737085]
[218.34915161 2.06202769]
[232.09301758 7.74041128]
[244.77696228 -0.26693916]
[257.46090698 -8.27429008]
[270.14483643 -16.28164101]
[282.70874023 -24.47606659]
[295.14981079 -32.85576630]
[307.59091187 -41.23546982]
[305.35031128 -56.33323669]
[309.89050293 -70.90545654]
[320.30996704 -82.05879974]
[334.53994751 -87.57877350]
[349.75509644 -86.36936951]
[362.93438721 -78.67072296]
[371.46105957 -66.01140594]
[373.64218140 -50.90493774]
[369.04464722 -36.35071182]
[358.58132935 -25.23848152]
[344.32971191 -19.77459145]
[329.11947632 -21.04389954]
[315.97061157 -28.79438400]
[303.52951050 -20.41468239]
[291.08843994 -12.03498077]
[287.23727417 -5.58438778]
[278.15219116 -3.59770036]
[265.46823120 4.40965033]
[252.78430176 12.41700077]
[240.10037231 20.42435074]
[239.31604004 35.27436447]
[229.82554626 46.95317459]
[215.10585022 50.84980011]
[200.74819946 45.26731110]
[188.06425476 53.27466202]
[175.38032532 61.28201294]
[162.69638062 69.28936005]
[150.01243591 77.29671478]
[137.32849121 85.30406189]
[140.11067200 100.72186279]
[136.77554321 116.02957153]
[127.83173370 128.89259338]
[114.64328766 137.34918213]
[99.22158813 140.10961914]
[96.13190460 154.78796387]
[93.04222870 169.46630859]
[89.95254517 184.14465332]
[87.08071136 198.86717224]
[84.42736053 213.63063049]
[81.77400970 228.39408875]
[79.12065125 243.15754700]
[76.46730042 257.92102051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 105]
[8 104]
[9 103]
[10 102]
[11 101]
[13 100]
[14 99]
[15 98]
[16 97]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[53 87]
[57 83]
[58 82]
[59 81]
[60 80]
[61 78]
[62 77]
[63 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
