%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUUCCGGGUUUGGUGCGGCCUUUGUCUCUCGCUGCAGUCAGAGCUCCAGGUCUGGUUCUUCUCCUAAAGGCCCAGGCUGUGUGGCCCCGUGUCCUGCAGGUAUUGGGAGAUCCACAGCUAAGACACCGGGACCUCCUGGAAGCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[208.55204773 663.98974609]
[207.30517578 649.04168701]
[206.05830383 634.09356689]
[204.81143188 619.14550781]
[203.56454468 604.19738770]
[202.31767273 589.24932861]
[201.07080078 574.30120850]
[199.82392883 559.35314941]
[198.57705688 544.40509033]
[197.33018494 529.45697021]
[195.46257019 514.57366943]
[192.97744751 499.78100586]
[190.49232483 484.98828125]
[188.00720215 470.19558716]
[185.52209473 455.40286255]
[183.03697205 440.61016846]
[180.55184937 425.81744385]
[166.02200317 411.20901489]
[173.56878662 391.19790649]
[170.16580200 376.58898926]
[166.76283264 361.98010254]
[151.21633911 357.68377686]
[139.87928772 346.07977295]
[135.90023804 330.25582886]
[140.45199585 314.48950195]
[152.38812256 303.09179688]
[148.68196106 288.55685425]
[144.97579956 274.02194214]
[141.26963806 259.48699951]
[137.56347656 244.95205688]
[133.85731506 230.41711426]
[130.15115356 215.88218689]
[126.44499969 201.34724426]
[122.13741302 186.97906494]
[117.23586273 172.80250549]
[112.33431244 158.62594604]
[107.43276215 144.44938660]
[102.53121185 130.27282715]
[97.62965393 116.09627533]
[84.67942047 105.47617340]
[87.96344757 89.05331421]
[82.76802826 74.98179626]
[65.30181885 67.77550507]
[58.69881439 50.41181564]
[66.68566895 33.99208069]
[60.90939331 20.14886284]
[55.13312149 6.30564594]
[42.67827606 -3.45075631]
[44.91780472 -18.17603302]
[39.14153290 -32.01924896]
[33.22156906 -45.80163193]
[27.15855598 -59.52168655]
[21.09554291 -73.24173737]
[15.03253078 -86.96179199]
[8.96951675 -100.68184662]
[2.90650415 -114.40190125]
[-3.15650916 -128.12194824]
[-15.81162930 -137.61714172]
[-13.87892532 -152.38581848]
[-19.94193840 -166.10586548]
[-26.00495148 -179.82592773]
[-32.06796646 -193.54597473]
[-46.89538574 -199.01618958]
[-53.43597031 -213.40354919]
[-47.80930710 -228.17230225]
[-33.35359192 -234.56040955]
[-18.64514923 -228.77792358]
[-12.41023445 -214.25547791]
[-18.34791183 -199.60899353]
[-12.28489780 -185.88893127]
[-6.22188473 -172.16888428]
[-0.15887164 -158.44883728]
[12.06258106 -149.93499756]
[10.56354427 -134.18496704]
[16.62655830 -120.46491241]
[22.68957138 -106.74485779]
[28.75258446 -93.02480316]
[34.81559753 -79.30475616]
[40.87860870 -65.58470154]
[46.94162369 -51.86464691]
[52.55831146 -46.98627853]
[52.98474884 -37.79552460]
[58.76102448 -23.95230484]
[70.80271149 -15.18606281]
[68.97634125 0.52937353]
[74.75260925 14.37259102]
[80.52888489 28.21580887]
[91.84275818 30.18727112]
[100.87471771 37.47366333]
[105.28520203 48.33742905]
[103.85949707 60.09652328]
[96.83955383 69.78637695]
[102.03496552 83.85789490]
[112.33149719 89.38667297]
[116.26514435 100.39176941]
[111.80621338 111.19472504]
[116.70776367 125.37127686]
[121.60931396 139.54783630]
[126.51086426 153.72439575]
[131.41241455 167.90095520]
[136.31396484 182.07751465]
[139.81669617 184.88685608]
[141.98516846 188.33195496]
[142.78483582 191.90161133]
[142.35530090 195.12799072]
[140.97993469 197.64108276]
[144.68609619 212.17602539]
[148.39225769 226.71095276]
[152.09841919 241.24589539]
[155.80458069 255.78083801]
[159.51074219 270.31576538]
[163.21690369 284.85070801]
[166.92306519 299.38565063]
[180.60066223 302.47906494]
[191.55007935 311.13360596]
[197.66047668 323.60791016]
[197.78547668 337.43151855]
[191.95782471 349.89416504]
[181.37171936 358.57711792]
[184.77470398 373.18603516]
[188.17767334 387.79492188]
[196.87963867 391.71484375]
[202.68550110 399.11499023]
[204.37150574 408.22799683]
[201.67892456 416.95132446]
[195.34455872 423.33233643]
[197.82968140 438.12503052]
[200.31480408 452.91775513]
[202.79991150 467.71044922]
[205.28503418 482.50317383]
[207.77015686 497.29586792]
[210.25526428 512.08856201]
[213.24415588 515.43939209]
[214.81188965 519.19616699]
[215.00910950 522.84899902]
[214.05099487 525.95959473]
[212.27825928 528.21008301]
[213.52514648 543.15820312]
[214.77201843 558.10626221]
[216.01889038 573.05438232]
[217.26576233 588.00244141]
[218.51263428 602.95056152]
[219.75950623 617.89862061]
[221.00639343 632.84674072]
[222.25326538 647.79479980]
[223.50013733 662.74285889]
[234.77001953 674.16082764]
[232.72679138 690.07324219]
[218.93782043 698.27349854]
[203.98085022 692.47100830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 146]
[2 145]
[3 144]
[4 143]
[5 142]
[6 141]
[7 140]
[8 139]
[9 138]
[10 137]
[11 132]
[12 131]
[13 130]
[14 129]
[15 128]
[16 127]
[17 126]
[19 121]
[20 120]
[21 119]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 108]
[32 107]
[33 106]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[41 93]
[42 92]
[45 87]
[46 86]
[47 85]
[49 83]
[50 82]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
