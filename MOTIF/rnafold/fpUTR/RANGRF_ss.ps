%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAAUCUUAAAGGAUCCGGGAGCUAAGCCAGACCCGGGUGGCGGUGGCAGCUGCGAAACCCAGGGAGCCGAUGCCACGUGACCCAAUGUGGACUUCUUUUAAACCUUUCUAAUGCCCAUAACCCAGCCUCAGACCC\
) } def
/len { sequence length } bind def

/coor [
[100.50287628 335.20410156]
[97.82059479 350.14297485]
[89.91957092 363.10205078]
[77.86833191 372.32876587]
[63.29672241 376.57525635]
[48.17543030 375.26721191]
[34.54948807 368.58157349]
[24.26168633 357.42245483]
[18.70337105 343.29907227]
[18.62625694 328.12152100]
[24.04077148 313.94241333]
[34.21464920 302.67932129]
[47.77195740 295.85556030]
[62.87917709 294.39395142]
[66.89773560 279.94226074]
[65.64857483 272.59332275]
[71.17385101 265.21133423]
[75.51798248 250.85415649]
[71.79819489 236.43151855]
[83.20056152 225.46353149]
[87.54469299 211.10635376]
[91.88882446 196.74919128]
[90.80606842 189.37391663]
[96.49676514 182.11865234]
[101.16424561 167.86332703]
[105.83173370 153.60798645]
[105.66222382 138.60894775]
[100.67376709 124.46273804]
[95.68531036 110.31652069]
[90.53731537 96.22758484]
[85.23043823 82.19772339]
[79.92356110 68.16786194]
[65.97560120 66.61904144]
[54.12198257 59.23129654]
[46.65910721 47.50338745]
[45.00349045 33.76811981]
[49.42321014 20.72842407]
[58.99645233 10.92543983]
[54.00799561 -3.22077179]
[49.01953888 -17.36698341]
[44.03108215 -31.51319504]
[32.14474487 -41.95472717]
[35.20901489 -56.53071594]
[30.22055817 -70.67692566]
[25.23210144 -84.82314301]
[19.37889290 -91.94792938]
[20.29469872 -99.34579468]
[15.62721252 -113.60112762]
[10.95972633 -127.85646057]
[6.29224014 -142.11180115]
[1.62475455 -156.36712646]
[-12.99587631 -161.21928406]
[-21.85242653 -173.60536194]
[-21.71895218 -188.65348816]
[-12.85620975 -200.59457397]
[-17.52369499 -214.84991455]
[-32.65998459 -216.81346130]
[-45.44066620 -225.15713501]
[-53.32812500 -238.22430420]
[-54.75630569 -253.42045593]
[-49.44163513 -267.72839355]
[-38.43935013 -278.30725098]
[-23.93395805 -283.05661011]
[-8.80552006 -281.03347778]
[3.94220519 -272.63952637]
[11.77814579 -259.54141235]
[13.14647102 -244.33975220]
[7.77549887 -230.05285645]
[-3.26836061 -219.51739502]
[1.39912510 -205.26206970]
[15.60801029 -200.87509155]
[24.61564636 -188.81994629]
[24.79972458 -173.59432983]
[15.88008976 -161.03462219]
[20.54757500 -146.77928162]
[25.21506119 -132.52394104]
[29.88254738 -118.26861572]
[34.55003357 -104.01327515]
[39.37831116 -89.81159973]
[44.36676788 -75.66538239]
[49.35522461 -61.51917267]
[60.88475418 -52.08947372]
[58.17729187 -36.50165176]
[63.16574860 -22.35544014]
[68.15420532 -8.20922852]
[73.14266205 5.93698311]
[89.05881500 8.49339771]
[101.60152435 18.76794243]
[107.30676270 34.04472351]
[104.53781128 50.21025085]
[93.95342255 62.86098480]
[99.26029968 76.89084625]
[104.56717682 90.92070770]
[110.18334198 96.80471039]
[109.83152771 105.32806396]
[114.81998444 119.47428131]
[119.80844116 133.62048340]
[123.54265594 119.09273529]
[130.06880188 105.58683777]
[139.13050842 93.63336182]
[150.37178040 83.70189667]
[163.35099792 76.18260956]
[177.55828857 71.37088013]
[192.43553162 69.45573425]
[207.39826965 70.51242065]
[221.85868835 74.49941254]
[235.24873352 81.26009369]
[247.04237366 90.52886963]
[256.77627563 101.94161987]
[264.06808472 115.04999542]
[268.63134766 129.33903503]
[270.28674316 144.24740601]
[268.96929932 159.18943787]
[264.73074341 173.57814026]
[257.73757935 186.84825134]
[248.26455688 198.47845459]
[236.68379211 208.01187134]
[223.45025635 215.07397461]
[209.08380127 219.38734436]
[194.14883423 220.78253174]
[179.23204041 219.20471191]
[164.91944885 214.71588135]
[151.77331543 207.49237061]
[140.31007385 197.81796265]
[130.98005676 186.07272339]
[124.14979553 172.71803284]
[120.08706665 158.27548218]
[115.41958618 172.53080750]
[110.75209808 186.78614807]
[106.24600220 201.09330750]
[101.90187073 215.45048523]
[97.55773926 229.80766296]
[100.96680450 245.25723267]
[89.87516022 255.19828796]
[85.53102875 269.55545044]
[81.34941864 283.96081543]
[77.33086395 298.41250610]
[89.51499939 307.46298218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 137]
[15 136]
[17 135]
[18 134]
[20 132]
[21 131]
[22 130]
[24 129]
[25 128]
[26 127]
[27 97]
[28 96]
[29 95]
[30 93]
[31 92]
[32 91]
[38 86]
[39 85]
[40 84]
[41 83]
[43 81]
[44 80]
[45 79]
[47 78]
[48 77]
[49 76]
[50 75]
[51 74]
[55 70]
[56 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
