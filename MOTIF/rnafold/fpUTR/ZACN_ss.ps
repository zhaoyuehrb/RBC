%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUGCUCAGCUGCCAGAGAAGUGACUGGAAUAGAGGUUGUAGCUUAGGCACCGCUGCUCCCUCCAGUCCCUCCGUGCAGCCG\
) } def
/len { sequence length } bind def

/coor [
[81.42726135 298.53836060]
[69.15679932 307.61572266]
[54.16136932 310.46173096]
[39.41832733 306.51135254]
[27.85491943 296.54891968]
[21.76706505 282.55245972]
[22.36351204 267.30099487]
[29.52583694 253.82272339]
[41.83195114 244.79374695]
[56.83847427 242.00680542]
[60.72075653 227.51791382]
[64.60304260 213.02902222]
[68.48532867 198.54013062]
[72.36761475 184.05125427]
[63.34288025 169.99291992]
[67.23903656 153.40412903]
[82.15260315 144.48985291]
[85.49041748 129.86593628]
[88.82823181 115.24201965]
[82.98989105 108.23308563]
[81.11493683 99.30582428]
[83.64023590 90.54031372]
[89.97739410 83.97891998]
[98.64983368 81.15047455]
[103.60402679 66.99222565]
[108.55821228 52.83397293]
[113.51239777 38.67572403]
[118.46658325 24.51747322]
[123.42076874 10.35922432]
[128.37495422 -3.79902601]
[127.23040771 -8.03740311]
[127.41362000 -12.04468727]
[128.70210266 -15.44699860]
[130.77835083 -17.97583389]
[133.27059937 -19.48921967]
[135.79722595 -19.97870636]
[143.29722595 -32.96908951]
[139.42883301 -48.05793381]
[147.21995544 -61.12518692]
[161.62870789 -64.72012329]
[169.12870789 -77.71050262]
[176.62870789 -90.70088959]
[184.12870789 -103.69126892]
[191.62870789 -116.68164825]
[184.46823120 -130.34661865]
[185.85507202 -145.71151733]
[195.34666443 -157.87347412]
[209.91427612 -162.95164490]
[224.90946960 -159.32562256]
[235.54728699 -148.15242004]
[238.43327332 -132.99740601]
[232.64649963 -118.69646454]
[220.03352356 -109.81298828]
[204.61907959 -109.18164825]
[197.11907959 -96.19126892]
[189.61907959 -83.20088959]
[182.11907959 -70.21050262]
[174.61907959 -57.22012711]
[178.71014404 -42.94431305]
[171.28913879 -29.66338158]
[156.28761292 -25.46908760]
[148.78761292 -12.47870731]
[142.53320312 1.15515983]
[137.57901001 15.31340981]
[132.62483215 29.47166061]
[127.67064667 43.62990952]
[122.71646118 57.78815842]
[117.76227570 71.94641113]
[112.80809021 86.10466003]
[118.15924072 105.23159027]
[103.45214844 118.57983398]
[100.11433411 133.20375061]
[96.77651978 147.82766724]
[105.27689362 158.46394348]
[106.00828552 171.86357117]
[98.92603302 183.03056335]
[86.85650635 187.93353271]
[82.97422028 202.42242432]
[79.09193420 216.91131592]
[75.20964813 231.40019226]
[71.32736206 245.88908386]
[82.92990875 255.80592346]
[89.07283783 269.77828979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[17 73]
[18 72]
[19 71]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[36 62]
[37 61]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
