%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAGAAUACGGAAAGCGGGAGGGACAAAUUGCCAAUGUUUGGAGUCUGGUUUCCAGGUUGCCGUUUUUGGGGGCUCUGGGUGUGGCGGUUGCCGUAGCUGAAAUUGGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[151.97109985 255.04959106]
[164.19255066 246.35267639]
[179.02316284 248.60255432]
[171.75489807 235.48110962]
[164.48663330 222.35966492]
[157.21836853 209.23822021]
[149.95010376 196.11677551]
[132.15560913 192.23887634]
[122.57164764 176.38218689]
[127.57788086 158.21549988]
[119.62156677 145.49948120]
[111.66525269 132.78346252]
[103.70893860 120.06745148]
[87.79928589 118.83473206]
[76.21733856 105.78001404]
[76.98412323 86.84764862]
[62.74316025 82.13649750]
[48.50219727 77.42534637]
[34.26123047 72.71419525]
[18.72927475 75.72566223]
[9.07613945 64.38254547]
[-5.16482496 59.67139435]
[-19.40578842 54.96024323]
[-30.03436661 63.84980392]
[-43.56626129 66.27448273]
[-56.41542435 61.70127106]
[-65.23091888 51.43726349]
[-67.77072906 38.25836182]
[-81.88123322 33.16977692]
[-95.99173737 28.08119392]
[-110.10224152 22.99261093]
[-124.21274567 17.90402794]
[-137.64027405 25.91874313]
[-153.06979370 23.37630653]
[-163.21595764 11.47717571]
[-163.28805542 -4.16024208]
[-153.25205994 -16.15243530]
[-137.84664917 -18.83705902]
[-124.34577942 -10.94651413]
[-119.12416840 3.79352450]
[-105.01366425 8.88210773]
[-90.90316010 13.97069073]
[-76.79265594 19.05927277]
[-62.68214798 24.14785576]
[-49.46622467 14.51017761]
[-32.94429398 14.60356140]
[-19.57310677 24.58786774]
[-14.69463825 40.71928024]
[-0.45367408 45.43043137]
[13.78728962 50.14158249]
[28.30063820 46.79314804]
[38.97238159 58.47323227]
[53.21334457 63.18438339]
[67.45430756 67.89553833]
[81.69527435 72.60668182]
[95.73679352 67.33071899]
[103.35177612 54.40740967]
[110.96676636 41.48410034]
[118.58175659 28.56078911]
[126.02404022 15.53725624]
[133.29229736 2.41580963]
[140.56056213 -10.70563698]
[140.47914124 -26.52663422]
[153.41445923 -33.91086578]
[160.68272400 -47.03231049]
[167.95098877 -60.15375900]
[167.11909485 -76.53179169]
[181.03205872 -85.21287537]
[195.37742615 -77.26665497]
[195.39790344 -60.86751938]
[181.07243347 -52.88549423]
[173.80416870 -39.76404953]
[166.53590393 -26.64260292]
[167.13720703 -11.76013947]
[153.68200684 -3.43737364]
[146.41374207 9.68407249]
[139.14547729 22.80551910]
[138.65066528 30.27684402]
[131.50506592 36.17577744]
[123.89007568 49.09908676]
[116.27509308 62.02239609]
[108.66010284 74.94570923]
[122.40117645 93.03814697]
[116.42495728 112.11113739]
[124.38127136 124.82715607]
[132.33758545 137.54316711]
[140.29389954 150.25918579]
[152.32887268 150.64082336]
[162.54981995 156.77487183]
[168.42753601 167.00639343]
[168.57469177 178.68441772]
[163.07156372 188.84851074]
[170.33981323 201.96995544]
[177.60807800 215.09140015]
[184.87634277 228.21284485]
[192.14460754 241.33430481]
[200.43661499 253.83399963]
[209.69947815 265.63229370]
[218.96234131 277.43054199]
[228.22521973 289.22882080]
[237.48808289 301.02709961]
[246.75096130 312.82537842]
[262.46994019 314.46524048]
[272.36035156 326.79223633]
[270.55441284 342.49301147]
[258.12350464 352.25253296]
[242.44271851 350.28070068]
[232.81515503 337.74731445]
[234.95268250 322.08825684]
[225.68981934 310.28997803]
[216.42694092 298.49169922]
[207.16407776 286.69342041]
[197.90119934 274.89514160]
[188.63833618 263.09686279]
[184.94487000 277.63504028]
[172.18043518 285.51345825]
[157.52912903 282.29794312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[10 87]
[11 86]
[12 85]
[13 84]
[16 55]
[17 54]
[18 53]
[19 52]
[21 50]
[22 49]
[23 48]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[56 82]
[57 81]
[58 80]
[59 79]
[60 77]
[61 76]
[62 75]
[64 73]
[65 72]
[66 71]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
