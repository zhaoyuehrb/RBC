%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGGCUUCCGUAGGAAGGCGCCGGCCGUGGAGGCGCCACGUCCCUUGCGGCGGCGGGAGAGAAAUCGCUUGGACUUCGGGGCGGCCUCGGACGGCC\
) } def
/len { sequence length } bind def

/coor [
[41.69672012 196.68540955]
[30.09663391 202.96243286]
[17.19998360 201.37680054]
[6.76474571 212.15203857]
[2.72229147 227.44808960]
[-11.68993378 231.20800781]
[-22.12517166 241.98324585]
[-32.56040955 252.75848389]
[-42.99564743 263.53372192]
[-53.43088913 274.30895996]
[-60.10651016 289.89334106]
[-76.92982483 287.79278564]
[-79.56851959 271.04544067]
[-64.20613098 263.87371826]
[-53.77088928 253.09849548]
[-43.33565140 242.32325745]
[-32.90041351 231.54800415]
[-22.46517372 220.77276611]
[-19.16911888 206.24743652]
[-4.01049423 201.71679688]
[6.42474365 190.94155884]
[5.38643265 174.24121094]
[16.90737915 161.64839172]
[34.30422592 161.18263245]
[44.38874054 150.07846069]
[54.47325134 138.97428894]
[64.55776978 127.87011719]
[74.64228058 116.76594543]
[84.72679138 105.66178131]
[87.76775360 89.24366760]
[103.66220093 84.12817383]
[113.38562775 72.70648193]
[123.10905457 61.28479385]
[132.83247375 49.86310577]
[142.55590820 38.44141769]
[143.21347046 33.70439148]
[145.24110413 29.89190865]
[148.13850403 27.33943748]
[151.34646606 26.16812706]
[154.32832336 26.28543091]
[165.43249512 16.20091820]
[176.53666687 6.11640501]
[187.64082336 -3.96810842]
[198.74499512 -14.05262184]
[209.84916687 -24.13713455]
[204.78482056 -38.44195938]
[205.58088684 -53.55517578]
[212.08496094 -67.17540741]
[223.27781677 -77.24056244]
[237.43304443 -82.24002838]
[252.38320923 -81.44132233]
[265.85180664 -74.99725342]
[276.95599365 -85.08176422]
[287.89709473 -95.34295654]
[298.67233276 -105.77819824]
[309.44757080 -116.21343231]
[320.22280884 -126.64867401]
[317.90811157 -141.99214172]
[325.08401489 -155.75025940]
[338.99124146 -162.63278198]
[354.28216553 -159.99320984]
[365.07711792 -148.84652710]
[367.22521973 -133.47886658]
[359.90048218 -119.79938507]
[345.91943359 -113.06814575]
[330.65805054 -115.87343597]
[319.88281250 -105.43819427]
[309.10757446 -95.00296021]
[298.33233643 -84.56771851]
[295.66784668 -77.52175140]
[287.04049683 -73.97759247]
[275.93630981 -63.89308167]
[281.05731201 -49.86793900]
[280.41677856 -34.91016006]
[274.08117676 -21.30041504]
[262.98776245 -11.12575626]
[248.80593872 -5.95959187]
[233.68611145 -6.61842299]
[219.93368530 -13.03296566]
[208.82951355 -2.94845200]
[197.72534180 7.13606167]
[186.62117004 17.22057533]
[175.51699829 27.30508804]
[164.41282654 37.38960266]
[153.97760010 48.16484070]
[144.25416565 59.58653259]
[134.53074646 71.00821686]
[124.80731964 82.42990875]
[115.08389282 93.85160065]
[115.29100800 105.61353302]
[107.52281189 114.44762421]
[95.83096313 115.74629211]
[85.74645233 126.85046387]
[75.66193390 137.95463562]
[65.57742310 149.05880737]
[55.49290848 160.16297913]
[45.40839767 171.26713562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 21]
[4 20]
[6 18]
[7 17]
[8 16]
[9 15]
[10 14]
[24 97]
[25 96]
[26 95]
[27 94]
[28 93]
[29 92]
[31 89]
[32 88]
[33 87]
[34 86]
[35 85]
[40 84]
[41 83]
[42 82]
[43 81]
[44 80]
[45 79]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
