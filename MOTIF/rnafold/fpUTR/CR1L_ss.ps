%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUGUGAGUUUGGGGAUUGUUGUGUCCACUAACCGGACUCAGAAGGGACUUCCCUGCUCGGCUGGCUUUCGGUUUCUCUGCUCACCUCCGGAUAAAUCACGGGGUCUCCCGCGCCGCUC\
) } def
/len { sequence length } bind def

/coor [
[134.48193359 180.14904785]
[119.98023224 183.98316956]
[105.09844971 182.10368347]
[92.00534821 174.78448486]
[82.60901642 163.09222412]
[78.27881622 148.73083496]
[79.64501953 133.79594421]
[65.24276733 137.98822021]
[50.84052277 142.18051147]
[36.43827438 146.37278748]
[22.03602600 150.56507874]
[7.63377857 154.75735474]
[-6.76846933 158.94964600]
[-21.17071724 163.14192200]
[-35.57296753 167.33421326]
[-49.67567825 172.44435120]
[-63.42043304 178.45115662]
[-77.16518402 184.45796204]
[-90.90994263 190.46476746]
[-96.44078827 205.26968384]
[-110.85479736 211.75132751]
[-125.60040283 206.06425476]
[-131.92929077 191.58251953]
[-126.08664703 176.89787292]
[-111.53881073 170.72244263]
[-96.91674805 176.72001648]
[-83.17199707 170.71321106]
[-69.42723846 164.70640564]
[-55.68248749 158.69958496]
[-68.11406708 150.30580139]
[-69.56515503 135.37614441]
[-58.98266602 124.74549103]
[-44.04658508 126.12877655]
[-35.59642410 138.52210999]
[-39.76525116 152.93196106]
[-25.36300278 148.73968506]
[-10.96075439 144.54739380]
[3.44149423 140.35511780]
[17.84374237 136.16282654]
[32.24599075 131.97053528]
[46.64823914 127.77825928]
[61.05048752 123.58597565]
[75.45273590 119.39369202]
[78.36740875 112.48321533]
[84.19675446 98.66226196]
[87.11142731 91.75178528]
[80.06177521 78.51160431]
[73.01212311 65.27142334]
[65.96247101 52.03123856]
[51.77134323 43.81273270]
[52.06378937 27.41619301]
[66.53897095 19.70897484]
[80.30606079 28.61960411]
[79.20265961 44.98158646]
[86.25230408 58.22177124]
[93.30195618 71.46195221]
[100.35160828 84.70213318]
[114.01788330 90.88540649]
[128.61685181 87.44009399]
[140.27090454 76.73992157]
[154.43507385 81.34706116]
[169.03402710 77.90174866]
[183.63299561 74.45642853]
[191.96612549 61.29600906]
[206.82063293 58.00993729]
[219.31573486 66.03540039]
[233.91470337 62.59008789]
[248.51365662 59.14477158]
[263.11264038 55.69945526]
[277.71160889 52.25413895]
[292.31054688 48.80882263]
[305.34515381 35.88002396]
[321.93740845 41.43730927]
[336.44281006 37.61724472]
[350.94824219 33.79717636]
[365.45364380 29.97710991]
[379.95907593 26.15704155]
[391.33374023 15.16035366]
[405.61184692 19.40126801]
[420.11724854 15.58120155]
[434.62268066 11.76113510]
[449.12808228 7.94106817]
[454.62530518 -6.56962442]
[467.62026978 -15.04966259]
[483.11611938 -14.23829842]
[495.15438843 -4.44751740]
[499.10614014 10.55792427]
[493.45184326 25.00812912]
[480.36566162 33.34669876]
[464.87951660 32.36727905]
[452.94815063 22.44648361]
[438.44274902 26.26655006]
[423.93731689 30.08661842]
[409.43191528 33.90668488]
[399.09475708 44.63013840]
[383.77914429 40.66245651]
[369.27371216 44.48252487]
[354.76831055 48.30259323]
[340.26287842 52.12265778]
[325.75747681 55.94272614]
[319.33859253 66.28323364]
[307.19335938 69.53570557]
[295.75588989 63.40778732]
[281.15692139 66.85310364]
[266.55795288 70.29842377]
[251.95898438 73.74373627]
[237.36001587 77.18905640]
[222.76104736 80.63436890]
[215.17248535 93.39952850]
[200.41613770 97.10153198]
[187.07832336 89.05539703]
[172.47935486 92.50070953]
[157.88038635 95.94602966]
[147.27055359 106.39976501]
[132.06216431 102.03905487]
[117.46320343 105.48437500]
[132.18074036 108.38159943]
[144.74018860 116.58283997]
[153.31121826 128.89289856]
[156.64476013 143.51779175]
[154.25498962 158.32620239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 43]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[15 35]
[16 29]
[17 28]
[18 27]
[19 26]
[46 57]
[47 56]
[48 55]
[49 54]
[58 116]
[59 115]
[61 113]
[62 112]
[63 111]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[71 103]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[79 94]
[80 93]
[81 92]
[82 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
