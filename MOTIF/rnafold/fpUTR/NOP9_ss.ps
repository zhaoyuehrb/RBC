%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUUCUAAACUUUGUCUGGAUAAGGCGCACGCUUGGCGACGUCGAAGGUCCGUCCGCAGUUAAGGAAGCUUUUGCAGCCGGACAGGUCGCGAAGCACAC\
) } def
/len { sequence length } bind def

/coor [
[23.60373878 172.48036194]
[11.36078453 181.14697266]
[-0.88216931 189.81358337]
[-13.12512302 198.48019409]
[-25.36807632 207.14678955]
[-37.19771194 216.36958313]
[-48.58878708 226.12886047]
[-59.97986221 235.88812256]
[-71.37093353 245.64739990]
[-76.81682587 260.50180054]
[-91.51600647 262.90664673]
[-102.90708160 272.66592407]
[-111.00153351 287.56277466]
[-127.55697632 283.90850830]
[-128.62852478 266.98846436]
[-112.66635132 261.27484131]
[-101.27528381 251.51556396]
[-96.64415741 237.35922241]
[-81.13021088 234.25633240]
[-69.73913574 224.49705505]
[-58.34806061 214.73777771]
[-46.95698929 204.97850037]
[-46.37127304 201.33322144]
[-43.88061905 197.82421875]
[-39.58689880 195.39659119]
[-34.03468323 194.90383911]
[-21.79173088 186.23722839]
[-9.54877663 177.57063293]
[2.69417691 168.90402222]
[14.93713093 160.23741150]
[16.59755707 140.98034668]
[31.94888687 128.75195312]
[51.67974472 131.52210999]
[63.07081604 121.76283264]
[74.46189117 112.00355530]
[85.85296631 102.24428558]
[90.68058014 89.12232208]
[104.38776398 86.36464691]
[115.77883148 76.60536957]
[127.16990662 66.84609222]
[138.56097412 57.08681870]
[149.95205688 47.32754517]
[147.63523865 38.22647095]
[148.50073242 28.91935921]
[152.41888428 20.48148918]
[158.90905762 13.87775993]
[167.19842529 9.85235310]
[176.31393433 8.84494495]
[185.19647217 10.94284916]
[192.82400513 15.87430382]
[205.57727051 7.97782135]
[218.33052063 0.08133887]
[231.08378601 -7.81514359]
[243.83703613 -15.71162605]
[245.10577393 -31.06403542]
[255.05493164 -42.59086227]
[269.71041870 -46.00858688]
[283.40426636 -40.21061325]
[296.15753174 -48.10709763]
[308.91076660 -56.00357819]
[321.66403198 -63.90006256]
[325.27050781 -69.77684784]
[330.55044556 -72.41909027]
[335.45449829 -71.86198425]
[348.66967773 -78.95838928]
[361.88485718 -86.05479431]
[370.05316162 -100.27488708]
[386.45062256 -100.04039001]
[394.20895386 -85.59254456]
[385.34704590 -71.79404449]
[368.98126221 -72.83961487]
[355.76608276 -65.74320984]
[342.55090332 -58.64680481]
[329.56051636 -51.14680481]
[316.80725098 -43.25032043]
[304.05401611 -35.35383987]
[291.30075073 -27.45735741]
[290.38699341 -12.61474705]
[280.79507446 -1.01910782]
[266.04196167 2.74906063]
[251.73352051 -2.95836902]
[238.98025513 4.93811369]
[226.22700500 12.83459568]
[213.47375488 20.73107910]
[200.72048950 28.62756157]
[198.18034363 49.57385254]
[181.04801941 62.35001373]
[159.71133423 58.71862030]
[148.32025146 68.47789001]
[136.92918396 78.23716736]
[125.53810883 87.99644470]
[114.14703369 97.75571442]
[109.31941986 110.87767792]
[95.61223602 113.63535309]
[84.22116852 123.39463043]
[72.83009338 133.15390015]
[61.43901825 142.91317749]
[63.33482742 153.71972656]
[60.50164413 164.23457336]
[53.53839111 172.50068665]
[43.80586624 177.00997925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[6 22]
[7 21]
[8 20]
[9 19]
[11 17]
[12 16]
[33 97]
[34 96]
[35 95]
[36 94]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[58 77]
[59 76]
[60 75]
[61 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
