%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCCUUGAGCCUCGACUCUGGGUGAGCCCUCUGGGUCUUAGAUUUGAGAUGCAAUUUUCAAACUUGAAGAUCACGGUGAGCAGAGAGAUCUCUGAGCUACUGCCAAUCCUAAUGUCCCUUGUAUUGAGCGUUGACUGUGUUGACAAUGAAAAGCCAGAAGAGCCUCAAGGAGGAAAGAGGUCAAUAGCCAA\
) } def
/len { sequence length } bind def

/coor [
[58.36765289 328.24893188]
[68.24942017 315.61050415]
[67.76864624 300.61819458]
[67.28787231 285.62591553]
[66.80709839 270.63360596]
[66.32632446 255.64132690]
[64.00672913 252.97023010]
[62.87215042 249.03854370]
[63.50288773 244.41848755]
[66.20033264 239.92060852]
[66.44075012 224.92254639]
[66.68116760 209.92446899]
[63.64116669 203.17768860]
[67.04755402 194.68844604]
[67.52832794 179.69615173]
[68.00910187 164.70385742]
[68.48987579 149.71156311]
[55.24691391 142.66712952]
[43.08345795 151.44496155]
[30.92000198 160.22279358]
[18.75654411 169.00062561]
[6.59308815 177.77845764]
[-0.81205797 196.51875305]
[-20.10662270 197.67143250]
[-31.98248672 206.83460999]
[-43.85835266 215.99778748]
[-49.58969116 231.36280823]
[-65.80451965 233.81462097]
[-75.82241058 220.83102417]
[-69.33781433 205.76841736]
[-53.02153015 204.12193298]
[-41.14566803 194.95874023]
[-29.26980209 185.79556274]
[-28.87729645 175.56962585]
[-22.78771591 167.07337952]
[-12.81959915 163.25920105]
[-2.18474317 165.61500549]
[9.97871304 156.83717346]
[22.14216995 148.05934143]
[34.30562592 139.28150940]
[46.46908188 130.50367737]
[43.60170364 115.78028870]
[29.03316116 112.20851135]
[14.46461868 108.63674164]
[-0.10392323 105.06496429]
[-15.34954262 109.29363251]
[-25.86833572 98.74829102]
[-40.43687820 95.17651367]
[-55.00542068 91.60474396]
[-69.57395935 88.03296661]
[-84.14250183 84.46118927]
[-98.71104431 80.88941956]
[-113.27958679 77.31764221]
[-126.66288757 85.72376251]
[-142.05151367 82.12297058]
[-150.31567383 68.65154266]
[-146.55238342 53.30184937]
[-132.99433899 45.18058395]
[-117.68527985 49.10594940]
[-109.70781708 62.74909973]
[-95.13927460 66.32087708]
[-80.57073212 69.89264679]
[-66.00218964 73.46442413]
[-51.43364334 77.03620148]
[-36.86510468 80.60797882]
[-22.29656029 84.17974854]
[-8.09298134 79.69560242]
[3.46785188 90.49642181]
[18.03639412 94.06819916]
[32.60493469 97.63996887]
[47.17347717 101.21174622]
[60.34174347 72.95881653]
[85.16117096 59.47144318]
[82.53014374 44.70398712]
[79.89911652 29.93653297]
[65.37363434 20.19889069]
[62.43649292 3.30244493]
[72.42288971 -10.22242260]
[69.55551147 -24.94581032]
[66.68813324 -39.66919708]
[63.82075500 -54.39258575]
[60.95337296 -69.11597443]
[46.27368546 -78.61955261]
[43.06610489 -95.46675110]
[52.83444595 -109.14994049]
[49.73145294 -123.82547760]
[46.62845612 -138.50102234]
[43.52546310 -153.17655945]
[40.42246628 -167.85209656]
[29.06579971 -179.68247986]
[33.89213943 -195.35534668]
[49.93656158 -198.74777222]
[60.69393921 -186.36993408]
[55.09800339 -170.95509338]
[58.20100021 -156.27955627]
[61.30399323 -141.60401917]
[64.40699005 -126.92847443]
[67.50998688 -112.25293732]
[79.19205475 -106.79903412]
[85.69354248 -95.44104767]
[84.44398499 -82.21815491]
[75.67675781 -71.98335266]
[78.54414368 -57.25996399]
[81.41152191 -42.53657532]
[84.27890015 -27.81318855]
[87.14627838 -13.08980179]
[98.73943329 -7.44936132]
[105.05803680 4.01136923]
[103.59671021 17.21253967]
[94.66657257 27.30550766]
[97.29759979 42.07295990]
[99.92862701 56.84041595]
[106.90934753 57.39699936]
[113.70817566 59.07518005]
[120.14611053 61.83078384]
[126.05366516 65.59125519]
[131.27529907 70.25759888]
[135.67356873 75.70697021]
[139.13265991 81.79589081]
[141.56152344 88.36406708]
[142.89619446 95.23858643]
[157.86537170 96.19963837]
[172.83456421 97.16069031]
[187.80374146 98.12174225]
[195.55517578 90.46894836]
[206.02467346 88.39514160]
[215.70115662 92.34927368]
[221.47402954 100.79899597]
[236.40470886 102.23934174]
[251.33540344 103.67968750]
[266.26608276 105.12003326]
[281.19677734 106.56037903]
[293.32458496 96.78520203]
[308.44589233 98.45861053]
[317.69030762 110.08086395]
[332.62097168 111.52120972]
[344.74877930 101.74604034]
[359.87011719 103.41944885]
[369.11450195 115.04169464]
[384.04519653 116.48204041]
[398.97589111 117.92238617]
[407.83102417 115.62954712]
[414.13366699 119.50734711]
[429.03933716 121.18681335]
[443.94503784 122.86627960]
[453.00076294 110.46107483]
[467.05236816 104.26039124]
[482.31997681 105.93219757]
[494.69674683 115.02677155]
[500.85336304 129.09773254]
[499.13369751 144.36004639]
[490.00036621 156.70823669]
[475.91018677 162.82070923]
[460.65335083 161.05322266]
[448.33383179 151.88124084]
[442.26556396 137.77197266]
[427.35989380 136.09249878]
[412.45419312 134.41302490]
[397.53552246 132.85307312]
[382.60485840 131.41273499]
[367.67416382 129.97238159]
[356.37854004 139.61315918]
[341.21618652 138.36514282]
[331.18063354 126.45189667]
[316.24993896 125.01155090]
[304.95434570 134.65232849]
[289.79199219 133.40431213]
[279.75643921 121.49106598]
[264.82574463 120.05072021]
[249.89505005 118.61037445]
[234.96437073 117.17002869]
[220.03367615 115.72968292]
[203.08323669 125.01901245]
[186.84268188 113.09092712]
[171.87350464 112.12987518]
[156.90432739 111.16882324]
[141.93515015 110.20776367]
[136.25053406 127.63005066]
[123.30873108 141.96076965]
[104.76063538 150.19497681]
[83.48217010 150.19233704]
[83.00139618 165.18463135]
[82.52062225 180.17692566]
[82.03984833 195.16921997]
[81.67923737 210.16488647]
[81.43881989 225.16296387]
[81.19840240 240.16102600]
[81.31861877 255.16055298]
[81.79939270 270.15283203]
[82.28016663 285.14514160]
[82.76094055 300.13742065]
[83.24171448 315.12973022]
[93.91291809 327.10906982]
[91.05857086 342.89614868]
[76.86827850 350.38049316]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 192]
[3 191]
[4 190]
[5 189]
[6 188]
[10 187]
[11 186]
[12 185]
[14 184]
[15 183]
[16 182]
[17 181]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[24 33]
[25 32]
[26 31]
[42 71]
[43 70]
[44 69]
[45 68]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[73 112]
[74 111]
[75 110]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[121 177]
[122 176]
[123 175]
[124 174]
[128 172]
[129 171]
[130 170]
[131 169]
[132 168]
[135 165]
[136 164]
[139 161]
[140 160]
[141 159]
[143 158]
[144 157]
[145 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
