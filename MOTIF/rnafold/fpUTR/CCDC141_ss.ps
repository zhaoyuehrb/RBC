%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGUGAGCUGAGCUCUUUCCCUGAAUGAAUCCAAGUAACCCUGGCCUUCUGAAAUGACCAGCAGACACACAACUGUCCAGAGGCUGCCCAAAGUAUAAACUCUGGUUCUAAAGUACC\
) } def
/len { sequence length } bind def

/coor [
[170.67646790 141.92358398]
[168.61015320 133.54629517]
[154.55276489 128.31275940]
[140.49537659 123.07923126]
[126.43799591 117.84570312]
[112.38060760 112.61217499]
[94.27309418 116.71971893]
[82.48668671 102.37278748]
[68.17268372 97.88843536]
[53.85868454 93.40408325]
[39.54468536 88.91973114]
[30.07079315 94.57849121]
[19.27076721 94.02783203]
[10.77644444 87.69886017]
[7.30766487 77.92438507]
[-6.74972391 72.69085693]
[-20.87496758 67.64333344]
[-35.06560516 62.78269958]
[-49.25624466 57.92206573]
[-63.44688416 53.06143188]
[-73.06684875 58.46813583]
[-83.84857941 57.63257980]
[-92.17287445 51.08159637]
[-95.38243103 41.21895981]
[-109.29676819 35.61618423]
[-123.21111298 30.01340485]
[-131.85472107 36.63423920]
[-142.40255737 38.98436737]
[-152.88020325 36.69410706]
[-161.35575867 30.25590515]
[-166.29612732 20.92043304]
[-166.84403992 10.45411015]
[-180.27149963 3.76803517]
[-193.69894409 -2.91804004]
[-207.39631653 4.37315989]
[-222.75868225 2.18741465]
[-233.87889099 -8.63481236]
[-236.48100281 -23.93215370]
[-229.56443787 -37.82247162]
[-215.78877258 -44.96464920]
[-200.45103455 -42.61238098]
[-189.44888306 -31.67015839]
[-187.01286316 -16.34548950]
[-173.58541870 -9.65941429]
[-160.15797424 -2.97333884]
[-142.34574890 -10.58937740]
[-124.31992340 -2.71149755]
[-117.60833740 16.09906387]
[-103.69399261 21.70184135]
[-89.77965546 27.30461693]
[-70.98599243 23.08336067]
[-58.58625031 38.87079239]
[-44.39561081 43.73142624]
[-30.20497322 48.59206009]
[-16.01433372 53.45269775]
[-8.57350445 52.63306808]
[-1.51619446 58.63346863]
[12.54119396 63.86699677]
[31.21687889 59.15111923]
[44.02903748 74.60573578]
[58.34303665 79.09008789]
[72.65703583 83.57444000]
[86.97103882 88.05879211]
[95.63668060 82.87377167]
[105.72690582 83.28028107]
[113.94734955 89.14561462]
[117.61413574 98.55478668]
[131.67152405 103.78831482]
[145.72891235 109.02184296]
[159.78630066 114.25537872]
[173.84368896 119.48890686]
[195.46931458 113.87825775]
[209.11125183 130.61991882]
[223.64196777 134.34260559]
[238.17268372 138.06527710]
[255.31791687 126.10858154]
[275.49047852 130.36137390]
[286.05160522 147.73205566]
[300.89376831 149.90240479]
[315.73593140 152.07275391]
[330.57809448 154.24310303]
[345.42022705 156.41345215]
[360.26239014 158.58380127]
[375.21536255 159.77055359]
[390.21408081 159.96855164]
[405.21276855 160.16654968]
[416.35833740 148.96154785]
[432.16256714 149.00306702]
[443.24908447 160.26647949]
[443.04049683 176.06938171]
[431.66049194 187.03622437]
[415.86065674 186.66053772]
[405.01477051 175.16523743]
[390.01608276 174.96723938]
[375.01739502 174.76925659]
[382.84454346 187.56517029]
[377.97518921 201.75283813]
[363.93991089 207.04536438]
[350.91506958 199.60539246]
[348.34439087 184.82731628]
[358.09204102 173.42596436]
[343.24987793 171.25561523]
[328.40774536 169.08526611]
[313.56558228 166.91490173]
[298.72341919 164.74455261]
[283.88125610 162.57420349]
[278.29132080 170.42097473]
[270.13934326 175.66452026]
[260.56619263 177.51948547]
[250.93084717 175.67834473]
[242.61755371 170.36143494]
[236.83699036 162.29156494]
[234.45001221 152.59599304]
[219.91929626 148.87330627]
[205.38858032 145.15063477]
[199.41468811 150.70002747]
[191.61930847 153.39675903]
[183.30409241 152.70951843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[8 63]
[9 62]
[10 61]
[11 60]
[15 58]
[16 57]
[17 55]
[18 54]
[19 53]
[20 52]
[24 50]
[25 49]
[26 48]
[32 45]
[33 44]
[34 43]
[73 115]
[74 114]
[75 113]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
