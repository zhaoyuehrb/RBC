%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGGCGCCGCGCGUGGGCGGGGCGUCGGCGGCAGCAGGGCGGCUGAGGUGGCCGCUGGAGCUCAGGCGGCGGGCGCGGCUGGG\
) } def
/len { sequence length } bind def

/coor [
[80.96985626 358.01068115]
[65.79830170 356.34133911]
[52.85805893 348.24734497]
[44.71841812 335.33575439]
[42.99551392 320.17019653]
[48.03142929 305.76177979]
[58.82627869 294.97131348]
[73.23674011 289.94128418]
[74.87730408 275.03125000]
[76.51787567 260.12124634]
[78.15844727 245.21122742]
[79.79901123 230.30120850]
[81.43958282 215.39120483]
[83.08014679 200.48118591]
[76.78126526 186.98402405]
[85.98148346 174.11288452]
[87.62205505 159.20286560]
[79.65427399 143.68147278]
[90.36898804 128.84179688]
[91.46392059 113.88180542]
[83.72816467 99.10749054]
[93.03340149 85.26786804]
[93.58123016 70.27787781]
[94.12905884 55.28788376]
[94.67688751 40.29788971]
[87.44876099 26.22434425]
[95.64572906 13.78814507]
[96.19355774 -1.20184767]
[96.74138641 -16.19184113]
[97.28921509 -31.18183327]
[97.83705139 -46.17182541]
[98.38488007 -61.16181946]
[98.93270874 -76.15180969]
[99.48053741 -91.14180756]
[85.03101349 -104.76744080]
[84.87977600 -124.33222961]
[98.69364929 -137.76771545]
[97.59872437 -152.72770691]
[96.50379181 -167.68768311]
[85.35049438 -179.21954346]
[87.55530548 -195.11036682]
[101.42687988 -203.17008972]
[116.32412720 -197.21597290]
[120.81916046 -181.81550598]
[111.46377563 -168.78262329]
[112.55870819 -153.82263184]
[113.65363312 -138.86265564]
[123.29492950 -134.29159546]
[130.12275696 -125.98569489]
[132.78227234 -115.48303223]
[130.69900513 -104.76744080]
[124.20124054 -95.89378357]
[114.47053528 -90.59397125]
[113.92269897 -75.60398102]
[113.37487030 -60.61398697]
[112.82704163 -45.62399673]
[112.27921295 -30.63400269]
[111.73137665 -15.64400959]
[111.18354797 -0.65401733]
[110.63571930 14.33597565]
[117.90303040 27.33733749]
[109.66688538 40.84572220]
[109.11904907 55.83571625]
[108.57122040 70.82570648]
[108.02339172 85.81569672]
[115.49205780 94.94378662]
[114.84611511 106.72026825]
[106.42390442 114.97673798]
[105.32897949 129.93672180]
[113.22087097 140.33282471]
[111.85605621 152.90719604]
[102.53206635 160.84342957]
[100.89150238 175.75344849]
[107.07304382 190.31707764]
[97.99016571 202.12174988]
[96.34959412 217.03176880]
[94.70903015 231.94178772]
[93.06845856 246.85179138]
[91.42788696 261.76181030]
[89.78732300 276.67181396]
[88.14675140 291.58184814]
[101.11877441 299.62481689]
[109.30919647 312.50424194]
[111.09180450 327.66290283]
[106.11267090 342.09103394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 76]
[14 75]
[16 73]
[17 72]
[19 69]
[20 68]
[22 65]
[23 64]
[24 63]
[25 62]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[37 47]
[38 46]
[39 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
