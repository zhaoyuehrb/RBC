%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGGCCGGCCCCUAGCGAUCUGAACCCAAACUAAAUUUCCCAGCAAGCAGCGCGCCGGCCUGGGAAAAGGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[152.49552917 265.36254883]
[162.83961487 254.22395325]
[156.55970764 240.60180664]
[150.27981567 226.97966003]
[137.92485046 218.66076660]
[139.17384338 202.88894653]
[132.89395142 189.26679993]
[126.61405182 175.64465332]
[120.33415222 162.02250671]
[114.05426025 148.40036011]
[107.77436066 134.77819824]
[101.49446869 121.15605927]
[85.97351837 115.90818024]
[78.82333374 101.16657257]
[84.31100464 85.72878265]
[77.50114441 72.36368561]
[70.63608551 65.93054962]
[70.69795990 58.33749771]
[64.41806030 44.71535110]
[49.33551025 41.58121109]
[39.10999680 30.29882431]
[37.50764465 15.33565426]
[44.93456650 2.45237756]
[38.65467072 -11.16977024]
[32.37477112 -24.79191780]
[17.35382843 -22.99569893]
[2.51339149 -25.93110847]
[-10.69262218 -33.31056595]
[-20.97042274 -44.41110611]
[-27.31309319 -58.14521408]
[-29.09924889 -73.16735840]
[-26.15389442 -88.00582123]
[-18.76559067 -101.20689392]
[-7.65816450 -111.47724915]
[6.08018970 -117.81071472]
[21.10352707 -119.58680725]
[35.94001770 -116.63150787]
[49.13613129 -109.23435974]
[59.39904404 -98.12005615]
[65.72330475 -84.37746429]
[67.48932648 -69.35293579]
[64.52408600 -54.51843262]
[57.11809921 -41.32727814]
[45.99692154 -31.07181358]
[52.27681732 -17.44966698]
[58.55671310 -3.82751870]
[73.17663574 -1.10797489]
[83.51406860 9.82826614]
[85.45232391 24.93113136]
[78.04020691 38.43545532]
[84.32010651 52.05760193]
[90.86624146 65.55382538]
[97.67610168 78.91892242]
[110.25539398 81.43553925]
[119.08255768 90.74429321]
[120.92803192 103.43941498]
[115.11661530 114.87615967]
[121.39650726 128.49830627]
[127.67640686 142.12045288]
[133.95629883 155.74259949]
[140.23619080 169.36474609]
[146.51609802 182.98689270]
[152.79598999 196.60905457]
[165.60014343 205.90228271]
[163.90196228 220.69976807]
[170.18185425 234.32191467]
[176.46176147 247.94406128]
[191.64955139 247.31230164]
[205.92129517 252.54545593]
[217.10063171 262.84548950]
[223.48281860 276.64175415]
[224.09458923 291.83035278]
[218.84266663 306.09521484]
[208.52792358 317.26098633]
[194.72329712 323.62500000]
[179.53388977 324.21679688]
[165.27597046 318.94610596]
[154.12376404 308.61669922]
[147.77790833 294.80371094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[6 63]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[12 57]
[15 53]
[16 52]
[18 51]
[19 50]
[23 46]
[24 45]
[25 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
