%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAGCAGCCGCUGGGAGACAGACGGCAACCAGGUUGCCCCUCUUUGCUCCAGCUAGAAAGACUUGAGUUAGACAAGCAGCAGCACACGCCUCCCUACCUC\
) } def
/len { sequence length } bind def

/coor [
[82.60240173 125.39933014]
[91.04766083 113.00265503]
[77.69296265 119.83289337]
[64.33826447 126.66312408]
[63.19691849 140.49601746]
[55.39439011 151.84342957]
[43.08273697 157.76638794]
[29.56401825 156.79627991]
[18.40486145 149.29745483]
[4.84808016 155.71723938]
[-8.70870113 162.13702393]
[-22.26548195 168.55680847]
[-35.72278595 175.18258667]
[-49.07748413 182.01283264]
[-62.43218231 188.84306335]
[-68.71479797 203.60478210]
[-84.21104431 207.75759888]
[-97.03352356 198.11584473]
[-97.34593201 182.07582092]
[-84.90860748 171.94209290]
[-69.26241302 175.48835754]
[-55.90771484 168.65812683]
[-42.55302048 161.82789612]
[-37.95316315 155.87886047]
[-28.68527031 155.00003052]
[-15.12848949 148.58024597]
[-1.57170773 142.16046143]
[11.98507404 135.74066162]
[14.45529842 119.59130859]
[26.13804245 107.93628693]
[42.61975098 105.45524597]
[57.50803375 113.30842590]
[70.86273193 106.47819519]
[84.21743011 99.64796448]
[94.57864380 88.80152130]
[100.79094696 75.14841461]
[107.00325012 61.49531174]
[113.21555328 47.84220505]
[119.42785645 34.18909836]
[111.94889832 20.72167778]
[113.81227112 5.60939121]
[124.09537506 -5.37795162]
[138.70164490 -8.16992378]
[144.91394043 -21.82303047]
[151.12625122 -35.47613525]
[147.33074951 -47.91958237]
[152.91809082 -59.22003555]
[164.35487366 -63.47647476]
[170.98066711 -76.93377686]
[177.60644531 -90.39108276]
[184.23222351 -103.84838867]
[183.38647461 -119.64697266]
[195.94989014 -127.64757538]
[202.57566833 -141.10488892]
[208.99545288 -154.66166687]
[215.20776367 -168.31477356]
[213.08859253 -184.57641602]
[226.27465820 -194.32626343]
[241.20127869 -187.53450012]
[242.51321411 -171.18791199]
[228.86087036 -162.10246277]
[222.64855957 -148.44935608]
[222.74504089 -140.93002319]
[216.03297424 -134.47909546]
[209.40719604 -121.02179718]
[210.72686768 -106.18576813]
[197.68952942 -97.22260284]
[191.06375122 -83.76530457]
[184.43795776 -70.30799866]
[177.81217957 -56.85069275]
[179.98359680 -39.51037979]
[164.77935791 -29.26383209]
[158.56704712 -15.61072731]
[152.35475159 -1.95762146]
[159.84542847 10.88868713]
[158.31726074 25.85961533]
[148.14779663 37.19254303]
[133.08096313 40.40140152]
[126.86865997 54.05450821]
[120.65635681 67.70761108]
[114.44405365 81.36071777]
[108.23175049 95.01382446]
[115.64672852 96.58013153]
[122.26200104 102.55458069]
[134.42408752 111.33430481]
[150.78459167 112.45953369]
[157.74632263 127.30764008]
[148.14765930 140.60417175]
[131.86288452 138.67079163]
[125.64437103 123.49639893]
[113.48227692 114.71667480]
[119.94629669 128.25242615]
[129.81234741 139.55113220]
[134.07052612 153.93403625]
[131.94561768 168.78277588]
[123.82447815 181.39414978]
[111.18553162 189.47233582]
[96.32965088 191.54669189]
[81.96131897 187.23959351]
[70.69625092 177.33514404]
[64.58521271 163.63641357]
[64.74069977 148.63722229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[9 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[15 21]
[35 82]
[36 81]
[37 80]
[38 79]
[39 78]
[43 74]
[44 73]
[45 72]
[48 70]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[55 62]
[56 61]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
