%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[96.09596252 143.84710693]
[87.68805695 142.26376343]
[79.74523163 139.08393860]
[72.56752014 134.42773438]
[66.42604828 128.47103882]
[61.55282593 121.43886566]
[58.13192368 113.59684753]
[43.28459930 115.73156738]
[28.43727875 117.86628723]
[13.58995819 120.00101471]
[-1.25736392 122.13573456]
[-16.06894684 124.50575256]
[-30.84106445 127.11048126]
[-43.08801270 137.12660217]
[-56.96549606 131.71691895]
[-71.73760986 134.32164001]
[-76.32823181 148.92250061]
[-87.18654633 159.70932007]
[-101.81740570 164.20336914]
[-116.85874176 161.37196350]
[-128.85415649 151.86573792]
[-135.04721069 137.86914062]
[-134.01477051 122.59848785]
[-125.99407959 109.56287384]
[-112.82824707 101.75778198]
[-97.54267883 100.97676849]
[-83.64988708 107.39929962]
[-74.34233856 119.54953003]
[-59.57021713 116.94480133]
[-48.37987137 107.11498260]
[-33.44578552 112.33836365]
[-18.67366982 109.73364258]
[-12.52062988 105.39261627]
[-3.39208651 107.28841400]
[11.45523548 105.15369415]
[26.30255699 103.01896667]
[41.14987946 100.88424683]
[55.99720001 98.74952698]
[61.73706436 78.23401642]
[76.43804932 62.81607056]
[96.65720367 56.10654068]
[98.08304596 41.17446136]
[99.50888062 26.24238205]
[100.93472290 11.31030369]
[93.28906250 0.77384269]
[94.89888000 -11.73788548]
[104.33979034 -19.48332024]
[106.23867798 -34.36264038]
[96.37095642 -46.70782852]
[98.20580292 -62.40524673]
[110.65462494 -72.14189148]
[126.33176422 -70.14118958]
[135.93624878 -57.59011841]
[133.76991272 -41.93500519]
[121.11799622 -32.46375656]
[119.21910858 -17.58443260]
[126.90457916 -1.89587557]
[115.86680603 12.73614407]
[114.44096375 27.66822243]
[113.01512146 42.60030365]
[111.58927917 57.53237915]
[128.29586792 66.27828979]
[139.80998230 81.21236420]
[154.26760864 77.21525574]
[168.72525024 73.21814728]
[179.96464539 62.08322525]
[194.29351807 66.14927673]
[208.75114441 62.15217209]
[222.40638733 52.10374069]
[235.84225464 62.44363785]
[229.62586975 78.21680450]
[212.74826050 76.60980225]
[198.29061890 80.60691071]
[188.08532715 91.45593262]
[172.72235107 87.67578125]
[158.26472473 91.67288971]
[143.80708313 95.66999054]
[143.31945801 107.82528687]
[139.52354431 119.38297272]
[132.70925903 129.46040344]
[141.98164368 141.25119019]
[151.25402832 153.04199219]
[160.52641296 164.83277893]
[169.79879761 176.62358093]
[179.07118225 188.41438293]
[188.34356689 200.20516968]
[203.76081848 205.79447937]
[206.36216736 221.98599243]
[193.47155762 232.12327576]
[178.34976196 225.77795410]
[176.55276489 209.47755432]
[167.28038025 197.68676758]
[158.00799561 185.89596558]
[148.73561096 174.10516357]
[139.46322632 162.31437683]
[130.19084167 150.52357483]
[120.91845703 138.73278809]
[113.03102112 142.04762268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 32]
[13 31]
[15 29]
[16 28]
[41 61]
[42 60]
[43 59]
[44 58]
[47 56]
[48 55]
[63 77]
[64 76]
[65 75]
[67 73]
[68 72]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
