%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUCCAGGCCUGGGGGAGGGAGGAGGCCUUGGAGAAGGAGGAGGGAAAAAGGGGCUGUGGGAUUUAGUGGCUGGGCUGCACCCCCUGGGGGGGCAGCAGAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[75.74974823 109.49198151]
[74.22852325 96.25789642]
[60.63390350 89.91862488]
[47.03928757 83.57934570]
[33.44466782 77.24007416]
[19.85005188 70.90080261]
[6.25543547 64.56152344]
[-13.60269070 67.36277008]
[-24.26583481 51.34308243]
[-38.20604706 45.80498886]
[-52.14625931 40.26689911]
[-66.08647156 34.72880554]
[-80.02668762 29.19071388]
[-87.79293823 41.26280975]
[-97.67244720 51.67058563]
[-109.31700134 60.04954910]
[-122.31662750 66.10668182]
[-136.21400452 69.63066101]
[-150.52055359 70.49927521]
[-164.73362732 68.68360901]
[-178.35417175 64.24903107]
[-190.90423584 57.35286331]
[-201.94372559 48.23874283]
[-211.08590698 37.22806931]
[-218.01086426 24.70864868]
[-222.47676086 11.12102604]
[-224.32823181 -3.05699754]
[-223.50184631 -17.32718086]
[-220.02822876 -31.18834305]
[-233.62284851 -37.52761841]
[-247.21746826 -43.86688995]
[-260.81207275 -50.20616531]
[-277.09277344 -48.23863602]
[-286.71929932 -61.51500702]
[-279.78872681 -76.37767792]
[-263.43063354 -77.53721619]
[-254.47280884 -63.80078125]
[-240.87818909 -57.46150970]
[-227.28356934 -51.12223434]
[-213.68896484 -44.78295898]
[-204.36309814 -57.40556335]
[-192.64636230 -67.85496521]
[-179.03370667 -75.68679047]
[-164.10078430 -80.56729126]
[-148.47956848 -82.28758240]
[-132.83168030 -80.77258301]
[-117.82028961 -76.08427429]
[-104.08207703 -68.41917419]
[-92.20018768 -58.10010529]
[-82.67948914 -45.56259537]
[-75.92511749 -31.33650208]
[-72.22525024 -16.02360725]
[-71.73880005 -0.27217555]
[-74.48859406 15.25050068]
[-60.54838181 20.78859329]
[-46.60816574 26.32668495]
[-32.66795349 31.86477852]
[-18.72774124 37.40287018]
[-9.56812668 32.46137619]
[1.01176679 33.48264694]
[9.39977455 40.36574173]
[12.59470940 50.96690750]
[26.18932533 57.30618286]
[39.78394318 63.64545822]
[53.37855911 69.98473358]
[66.97317505 76.32400513]
[80.56779480 82.66327667]
[94.56446838 74.53182983]
[110.66129303 76.24059296]
[122.63887787 87.12934113]
[125.86941528 102.99096680]
[139.64265442 108.93215942]
[153.41589355 114.87335968]
[167.18914795 120.81455231]
[181.72686768 115.22060394]
[195.61026001 121.44203186]
[200.85363770 135.33599854]
[214.62687683 141.27720642]
[228.40013123 147.21839905]
[242.17337036 153.15959167]
[255.94660950 159.10078430]
[265.22384644 159.65200806]
[270.03005981 165.42030334]
[283.62469482 171.75956726]
[297.21929932 178.09884644]
[310.81390381 184.43812561]
[327.09460449 182.47059631]
[336.72113037 195.74696350]
[329.79055786 210.60963440]
[313.43246460 211.76916504]
[304.47463989 198.03273010]
[290.88003540 191.69346619]
[277.28540039 185.35418701]
[263.69079590 179.01490784]
[250.00541687 172.87402344]
[236.23217773 166.93283081]
[222.45892334 160.99163818]
[208.68568420 155.05044556]
[194.91244507 149.10923767]
[181.20809937 154.82997131]
[167.15544128 149.00096130]
[161.24794006 134.58779907]
[147.47470093 128.64660645]
[133.70146179 122.70540619]
[119.92822266 116.76420593]
[109.03072357 124.42578125]
[95.77018738 125.69593811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[29 40]
[30 39]
[31 38]
[32 37]
[71 105]
[72 104]
[73 103]
[74 102]
[77 99]
[78 98]
[79 97]
[80 96]
[81 95]
[83 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
