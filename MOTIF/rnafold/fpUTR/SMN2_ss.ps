%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAAAUGUGGGAGGGCGAUAACCACUCGUAGAAAGCGUGAGAAGUUACUACAAGCGGUCCUCCCGGCCACCGUACUGUUCCGCUCCCAGAAGCCCCGGGCGGCGGAAGUCGUCACUCUUAAGAAGGGACGGGGCCCCACGCUGCGCACCCGCGGGUUUGCU\
) } def
/len { sequence length } bind def

/coor [
[69.89077759 225.40158081]
[58.99192047 213.95648193]
[59.46169662 198.15917969]
[71.02139282 187.38192749]
[71.30871582 172.38468933]
[71.59603882 157.38743591]
[71.88336182 142.39018250]
[72.17068481 127.39294434]
[78.68364716 119.01460266]
[85.93320465 111.35855103]
[93.86333466 104.47595978]
[78.93208313 105.91046906]
[64.00083923 107.34497833]
[49.06958771 108.77948761]
[34.13834000 110.21398926]
[19.20709038 111.64849854]
[29.84409332 122.22461700]
[30.06443214 137.22299194]
[19.74269485 148.10700989]
[4.75371122 148.68179321]
[-6.37123013 138.62019348]
[-7.30013990 123.64898682]
[2.49626541 112.28903961]
[-12.50098228 112.00171661]
[-27.49822998 111.71439362]
[-41.44407654 119.18593597]
[-54.02080917 111.20626831]
[-69.01805878 110.91894531]
[-82.96390533 118.39048004]
[-95.54063416 110.41081238]
[-110.53787994 110.12348938]
[-125.53512573 109.83616638]
[-140.53237915 109.54884338]
[-150.37719727 117.92912292]
[-162.89117432 117.35424042]
[-171.36437988 108.68022156]
[-186.35337830 108.10568237]
[-201.34236145 107.53114319]
[-211.71072388 119.23717499]
[-227.18536377 121.48873138]
[-240.45964050 113.22267914]
[-245.26585388 98.34201050]
[-239.33464050 83.87290955]
[-225.46655273 76.64725494]
[-210.20967102 80.07677460]
[-200.76782227 92.54215240]
[-185.77883911 93.11669159]
[-170.78984070 93.69123077]
[-155.75901794 84.67210388]
[-140.24505615 94.55159760]
[-125.24780273 94.83892059]
[-110.25055695 95.12624359]
[-95.25331116 95.41356659]
[-82.38016510 87.92147064]
[-68.73073578 95.92169189]
[-53.73348618 96.20901489]
[-40.86034012 88.71692657]
[-27.21090698 96.71714783]
[-12.21365929 97.00447083]
[2.78358865 97.29179382]
[17.77258110 96.71725464]
[32.70383072 95.28274536]
[47.63507843 93.84823608]
[62.56632614 92.41372681]
[77.49757385 90.97921753]
[92.42882538 89.54470825]
[105.93444061 83.01796722]
[116.33592987 72.21014404]
[126.73741150 61.40232086]
[137.13890076 50.59449768]
[140.85870361 42.19953918]
[147.84465027 39.68167877]
[158.45124817 29.07507706]
[169.05786133 18.46847534]
[179.66445923 7.86187410]
[173.94508362 2.98403192]
[169.79650879 -4.45871687]
[168.18658447 -13.88790035]
[169.86134338 -24.39448738]
[175.23988342 -34.82291412]
[182.15194702 -48.13543701]
[189.06401062 -61.44796371]
[195.97607422 -74.76049042]
[202.88813782 -88.07301331]
[209.80021667 -101.38554382]
[216.71228027 -114.69806671]
[223.49652100 -128.07618713]
[230.15231323 -141.51867676]
[236.80812073 -154.96115112]
[228.79026794 -168.14135742]
[229.19384766 -183.56344604]
[237.89002991 -196.30627441]
[252.10392761 -202.30366516]
[267.29992676 -199.64186096]
[278.62902832 -189.17024231]
[282.47619629 -174.23027039]
[277.61376953 -159.58921814]
[265.59332275 -149.91900635]
[250.25059509 -148.30535889]
[243.59480286 -134.86286926]
[236.93899536 -121.42038727]
[236.78846741 -113.99607849]
[230.02479553 -107.78600311]
[223.11273193 -94.47348022]
[216.20066833 -81.16094971]
[209.28860474 -67.84842682]
[202.37654114 -54.53590012]
[195.46447754 -41.22337341]
[188.55241394 -27.91084671]
[192.44662476 -21.50107956]
[204.89489746 -29.87009811]
[215.12590027 -40.83943939]
[228.88378906 -34.86278152]
[227.84881592 -19.89853096]
[213.39877319 -15.87292671]
[200.23504639 -8.68154335]
[204.12925720 -2.27177548]
[219.12925720 -2.27177548]
[234.12925720 -2.27177548]
[249.12925720 -2.27177548]
[264.12924194 -2.27177548]
[279.96838379 -8.31811523]
[290.16314697 5.22822428]
[279.96838379 18.77456474]
[264.12924194 12.72822475]
[249.12925720 12.72822475]
[234.12925720 12.72822475]
[219.12925720 12.72822475]
[204.12925720 12.72822475]
[190.27105713 18.46847534]
[179.66445923 29.07507706]
[169.05786133 39.68167877]
[158.45124817 50.28828049]
[147.94673157 60.99598694]
[137.54524231 71.80381012]
[127.14375305 82.61163330]
[116.74226379 93.41945648]
[130.55702209 87.57543945]
[144.18933105 93.83323669]
[148.76382446 108.11868286]
[141.30224609 121.13117981]
[126.66249847 124.39886475]
[114.37608337 115.79469299]
[122.28693390 128.53904724]
[130.19778442 141.28340149]
[138.10862732 154.02774048]
[146.01948547 166.77209473]
[160.72363281 174.03294373]
[161.51748657 190.41285706]
[147.58438110 199.06159973]
[133.25752258 191.08207703]
[133.27513123 174.68293762]
[125.36428070 161.93859863]
[117.45343018 149.19424438]
[109.54257965 136.44989014]
[101.63173676 123.70554352]
[87.16793060 127.68026733]
[86.88060760 142.67750549]
[86.59328461 157.67475891]
[86.30596161 172.67201233]
[86.01863861 187.66925049]
[97.15705872 198.88136292]
[97.02140808 214.68505859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 161]
[5 160]
[6 159]
[7 158]
[8 157]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[23 60]
[24 59]
[25 58]
[27 56]
[28 55]
[30 53]
[31 52]
[32 51]
[33 50]
[36 48]
[37 47]
[38 46]
[67 137]
[68 136]
[69 135]
[70 134]
[72 133]
[73 132]
[74 131]
[75 130]
[80 109]
[81 108]
[82 107]
[83 106]
[84 105]
[85 104]
[86 103]
[87 101]
[88 100]
[89 99]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
[143 156]
[144 155]
[145 154]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
