%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAAACAGCACAUCCGGUGUGGUCGACGGGUCCUCCAAGAGUUUGGGGCGCGGACUGGAGUACCUUGCGUGCAGUU\
) } def
/len { sequence length } bind def

/coor [
[108.04694366 203.91404724]
[112.28729248 189.08087158]
[123.88899231 178.91209412]
[121.57121277 164.09225464]
[119.25342560 149.27239990]
[116.93564606 134.45254517]
[114.61786652 119.63270569]
[95.91600800 121.81665802]
[83.13471222 110.58950806]
[68.36259460 113.19422913]
[56.11564636 123.21035767]
[42.23816299 117.80066681]
[27.46604538 120.40539551]
[12.69392967 123.01011658]
[-2.07818651 125.61483765]
[-12.42090511 137.87892151]
[-28.45333481 137.29516602]
[-37.87676620 124.31139374]
[-33.46235275 108.88762665]
[-18.59644890 102.85567474]
[-4.68290901 110.84272003]
[10.08920670 108.23799896]
[24.86132431 105.63327789]
[39.63343811 103.02855682]
[50.82378769 93.19873047]
[65.75787354 98.42211151]
[80.52999115 95.81739044]
[84.55789185 86.02517700]
[93.34167480 79.30542755]
[104.78115082 77.85842896]
[115.83038330 82.54483032]
[123.30865479 92.52794647]
[133.81192017 81.81900024]
[144.31517029 71.11005402]
[154.81843567 60.40110779]
[158.95767212 45.13096237]
[173.39341736 41.46237564]
[183.89666748 30.75342941]
[194.39993286 20.04448318]
[204.90319824 9.33553696]
[215.40644836 -1.37340891]
[216.81056213 -6.95732403]
[220.02331543 -10.89584827]
[224.03131104 -12.76009464]
[227.80638123 -12.62574005]
[239.48185730 -22.04292297]
[251.15731812 -31.46010399]
[262.83279419 -40.87728500]
[274.50827026 -50.29446793]
[277.63900757 -66.02908325]
[291.95834351 -73.26344299]
[306.48171997 -66.44797516]
[310.06805420 -50.81090927]
[299.96621704 -38.34767532]
[283.92544556 -38.61899567]
[272.24996948 -29.20181274]
[260.57449341 -19.78462982]
[248.89903259 -10.36744881]
[237.22355652 -0.95026666]
[226.11540222 9.12985134]
[215.61213684 19.83879662]
[205.10888672 30.54774284]
[194.60562134 41.25669098]
[184.10235596 51.96563721]
[180.71438599 66.46980286]
[165.52738953 70.90436554]
[155.02412415 81.61331177]
[144.52085876 92.32225800]
[134.01760864 103.03120422]
[129.43771362 117.31492615]
[131.75549316 132.13476562]
[134.07327271 146.95462036]
[136.39105225 161.77445984]
[138.70883179 176.59431458]
[152.86132812 182.73521423]
[161.42814636 195.56538391]
[161.67564392 210.99076843]
[153.52485657 224.08917236]
[139.57666016 230.68093872]
[124.28189087 228.66268921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 74]
[4 73]
[5 72]
[6 71]
[7 70]
[9 27]
[10 26]
[12 24]
[13 23]
[14 22]
[15 21]
[32 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
