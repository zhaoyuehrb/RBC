%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCUCCGGGUCAGGGCAGCCACACUGCACGCAGGCUGGGCCGACUGGGGAGCUCAUAGGCCAGGCUCUGACACCCAGGCAGGGCCUAGGGUGGGACG\
) } def
/len { sequence length } bind def

/coor [
[106.75430298 156.00186157]
[105.34268188 141.06843567]
[103.93105316 126.13500977]
[91.39875031 122.50094604]
[83.24378967 113.86498260]
[80.89405060 103.41439819]
[66.25530243 100.14225006]
[51.61655045 96.87010193]
[36.46089172 101.41064453]
[25.72797394 91.08332062]
[11.08922195 87.81116486]
[-3.54952931 84.53901672]
[-18.18828011 81.26686859]
[-27.43215370 82.45372772]
[-33.23202896 77.65518951]
[-47.76077652 73.92483521]
[-65.27383423 79.33605194]
[-77.41781616 66.77526093]
[-92.05656433 63.50311279]
[-106.69532013 60.23096085]
[-121.33406830 56.95881271]
[-135.97282410 53.68666458]
[-145.39509583 65.69431305]
[-159.09796143 72.41695404]
[-174.36073303 72.51979828]
[-188.15296936 65.98242950]
[-197.73620605 54.10284805]
[-201.20767212 39.23975372]
[-197.87812805 24.34422112]
[-188.40864563 12.37377167]
[-174.67939758 5.70514631]
[-159.41633606 5.66240501]
[-145.64996338 12.25403500]
[-136.11358643 24.17126274]
[-132.70066833 39.04791260]
[-118.06192017 42.32006454]
[-103.42317200 45.59221268]
[-88.78441620 48.86436081]
[-74.14566803 52.13650894]
[-63.65438080 45.89130402]
[-51.34219742 48.62796783]
[-44.03042984 59.39609146]
[-29.50168037 63.12643814]
[-14.91613197 66.62812042]
[-0.27738059 69.90026855]
[14.36137104 73.17241669]
[29.00012207 76.44456482]
[43.10871887 71.66997528]
[54.88869858 82.23134613]
[69.52745056 85.50349426]
[84.16620636 88.77564240]
[106.17993164 77.93009186]
[126.36312866 98.13520813]
[141.24484253 96.25521088]
[156.12657166 94.37521362]
[171.00828552 92.49521637]
[179.30363464 88.24727631]
[186.38607788 90.79749298]
[201.31950378 89.38586426]
[216.25292969 87.97424316]
[231.18637085 86.56261444]
[246.11979675 85.15099335]
[261.05322266 83.73936462]
[271.11166382 71.84544373]
[286.27639771 70.62658691]
[297.55346680 80.28907776]
[312.48687744 78.87745667]
[320.91156006 74.89217377]
[327.91040039 77.66359711]
[342.88079834 76.72174072]
[357.85119629 75.77987671]
[369.49655151 64.74511719]
[385.36398315 67.11235046]
[393.28140259 81.06562805]
[387.17523193 95.90119934]
[371.72958374 100.23847961]
[358.79306030 90.75028229]
[343.82266235 91.69213867]
[328.85226440 92.63399506]
[313.89849854 93.81088257]
[298.96508789 95.22251129]
[289.69833374 106.82695770]
[274.57382202 108.47127533]
[262.46484375 98.67279816]
[247.53141785 100.08441925]
[232.59799194 101.49604797]
[217.66456604 102.90766907]
[202.73112488 104.31929779]
[187.79769897 105.73091888]
[172.88829041 107.37693024]
[158.00656128 109.25693512]
[143.12484741 111.13693237]
[128.24313354 113.01692963]
[118.86448669 124.72338867]
[120.27610779 139.65681458]
[121.68773651 154.59024048]
[131.62333679 167.63693237]
[125.04363251 182.65823364]
[108.71726990 184.20152283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 96]
[2 95]
[3 94]
[6 51]
[7 50]
[8 49]
[10 47]
[11 46]
[12 45]
[13 44]
[15 43]
[16 42]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[53 93]
[54 92]
[55 91]
[56 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[66 81]
[67 80]
[69 79]
[70 78]
[71 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
