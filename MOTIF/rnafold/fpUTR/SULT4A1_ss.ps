%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCGCCGCGCGCCGGUGGGGCGCGAGCGUGUGCGGGGCGCGGGCGCGGGCGCGGGCGCGGGCGCGUGCGGGCUGCGAGCCGGGAGGCGGCGGCGGCGACGGCGACGGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[96.78056335 233.52723694]
[96.37784576 218.53265381]
[95.97512817 203.53805542]
[95.57241058 188.54345703]
[95.16968536 173.54887390]
[94.76696777 158.55427551]
[94.36425018 143.55967712]
[93.96152496 128.56509399]
[93.55880737 113.57049561]
[85.71274567 100.78615570]
[72.52568817 93.63762665]
[59.33863068 86.48909760]
[46.15156937 79.34056854]
[32.96451187 72.19203949]
[19.77745438 65.04350281]
[3.95785379 65.26892090]
[-3.54380941 52.40135574]
[-16.73086739 45.25282288]
[-29.91792679 38.10429382]
[-46.52269745 43.40604782]
[-61.56024551 35.27597427]
[-66.03746033 19.12650299]
[-79.41168976 12.33459473]
[-92.78591156 5.54268694]
[-106.16014099 -1.24922097]
[-121.01959229 3.42351794]
[-134.48620605 -3.65496349]
[-138.84938049 -17.84997559]
[-152.22360229 -24.64188194]
[-165.59783936 -31.43379021]
[-178.97206116 -38.22570038]
[-194.77990723 -37.57563782]
[-202.62434387 -50.23716354]
[-215.99856567 -57.02907181]
[-229.37278748 -63.82098007]
[-242.74702454 -70.61288452]
[-259.60717773 -72.39373779]
[-262.56329346 -89.08798218]
[-247.33978271 -96.54998779]
[-235.95510864 -83.98711395]
[-222.58088684 -77.19520569]
[-209.20666504 -70.40329742]
[-195.83242798 -63.61138916]
[-180.98120117 -64.74725342]
[-172.18016052 -51.59992599]
[-158.80592346 -44.80801773]
[-145.43170166 -38.01610947]
[-132.05746460 -31.22420311]
[-118.02183533 -36.07564926]
[-104.36170959 -29.37821007]
[-99.36823273 -14.62344933]
[-85.99400330 -7.83154154]
[-72.61978149 -1.03963363]
[-59.24554825 5.75227404]
[-47.60026550 0.06253341]
[-34.61724091 2.19090915]
[-25.12011909 11.57563305]
[-22.76939583 24.91723442]
[-9.58233738 32.06576538]
[3.60472131 39.21429825]
[18.48109436 38.47756577]
[26.92598534 51.85644531]
[40.11304474 59.00497818]
[53.30010223 66.15351105]
[66.48715973 73.30204010]
[79.67421722 80.45056915]
[92.86127472 87.59909821]
[107.51653290 90.79652405]
[122.48274994 89.79035950]
[137.44895935 88.78419495]
[149.23182678 74.08113861]
[167.69444275 72.54907227]
[181.26870728 84.68801880]
[196.15934753 82.87997437]
[211.04998779 81.07192230]
[225.94061279 79.26387024]
[240.83125305 77.45581818]
[249.45539856 67.75044250]
[261.98489380 66.61464691]
[271.57873535 74.11591339]
[286.51257324 72.70829773]
[301.44638062 71.30068207]
[316.38018799 69.89306641]
[327.67620850 58.50099945]
[343.60968018 60.37292862]
[351.95779419 74.07287598]
[346.31658936 89.09141541]
[331.01351929 93.90760040]
[317.78778076 84.82687378]
[302.85397339 86.23448944]
[287.92016602 87.64210510]
[272.98635864 89.04972076]
[259.32943726 99.98103333]
[242.63929749 92.34645081]
[227.74865723 94.15450287]
[212.85803223 95.96255493]
[197.96739197 97.77060699]
[183.07676697 99.57865143]
[178.06980896 109.99933624]
[168.52128601 116.72920990]
[156.78373718 117.96633148]
[145.81997681 113.28018188]
[138.45512390 103.75041199]
[123.48891449 104.75657654]
[108.52269745 105.76274109]
[109.10359955 109.27336884]
[108.55339813 113.16777802]
[108.95612335 128.16236877]
[109.35884094 143.15696716]
[109.76155853 158.15155029]
[110.16428375 173.14614868]
[110.56700134 188.14074707]
[110.96971893 203.13533020]
[111.37243652 218.12992859]
[111.77516174 233.12452698]
[114.48223877 252.31622314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 115]
[2 114]
[3 113]
[4 112]
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[17 60]
[18 59]
[19 58]
[22 54]
[23 53]
[24 52]
[25 51]
[28 48]
[29 47]
[30 46]
[31 45]
[33 43]
[34 42]
[35 41]
[36 40]
[68 105]
[69 104]
[70 103]
[73 98]
[74 97]
[75 96]
[76 95]
[77 94]
[80 92]
[81 91]
[82 90]
[83 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
