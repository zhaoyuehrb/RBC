%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUCCGGCCAGUGAUUGGCUGGAGGUUUGUUAACUAUUCAUGAGGGGGCGGGCCGAGCGGGGCGGCCUUUGUUAAGCAGCGAGGGCGCGACCGCGGGUACUCUGCUGCCGGCUUCUCGGAGCGGCGCUGGGCGACCAGAGCAGGGUCGAG\
) } def
/len { sequence length } bind def

/coor [
[92.71736908 157.23986816]
[72.23278046 150.58084106]
[63.36655807 162.68002319]
[60.79501343 171.50926208]
[54.19401932 174.93310547]
[45.08283997 186.84890747]
[35.97166443 198.76470947]
[26.86048698 210.68051147]
[17.74930763 222.59632874]
[8.63813019 234.51213074]
[-0.47304717 246.42793274]
[-9.58422470 258.34375000]
[-18.69540215 270.25955200]
[-18.00811195 286.28787231]
[-30.20513535 296.70959473]
[-45.92995834 293.53005981]
[-53.11984634 279.18832397]
[-46.25932693 264.68615723]
[-30.61120987 261.14837646]
[-21.50003052 249.23255920]
[-12.38885307 237.31675720]
[-3.27767563 225.40095520]
[5.83350229 213.48513794]
[14.94468021 201.56933594]
[24.05585861 189.65353394]
[33.16703415 177.73773193]
[42.27821350 165.82191467]
[51.26737976 153.81379700]
[60.13359451 141.71461487]
[55.04125214 136.16836548]
[50.71445847 130.00625610]
[47.22688293 123.33319855]
[44.63791656 116.26282501]
[42.99164200 108.91554260]
[42.31608963 101.41644287]
[42.62276459 93.89322662]
[43.90644455 86.47399139]
[46.14527130 79.28507996]
[49.30112076 72.44889069]
[53.32026291 66.08184052]
[58.13425064 60.29233551]
[63.66111755 55.17896271]
[69.80675507 50.82879257]
[76.46651459 47.31589508]
[83.52700043 44.70009232]
[90.86798096 43.02591705]
[98.36445618 42.32188797]
[99.89179993 27.39984894]
[93.59989166 12.88356781]
[102.59290314 1.01028013]
[104.12024689 -13.91175747]
[105.64759827 -28.83379555]
[107.17494202 -43.75583267]
[108.70228577 -58.67787170]
[109.77236938 -73.63965607]
[110.38420105 -88.62717438]
[110.99603271 -103.61468506]
[102.82659912 -113.64660645]
[103.68019104 -126.15338135]
[112.55043793 -134.43341064]
[113.46785736 -149.40531921]
[114.38528442 -164.37724304]
[115.30271149 -179.34916687]
[106.69821167 -195.59779358]
[116.87883759 -209.86038208]
[117.49066925 -224.84790039]
[118.10249329 -239.83541870]
[115.31304169 -248.59825134]
[118.88275909 -255.12150574]
[119.80018616 -270.09341431]
[120.71761322 -285.06533813]
[121.63504028 -300.03726196]
[122.55245972 -315.00918579]
[123.46988678 -329.98110962]
[124.38731384 -344.95300293]
[125.30473328 -359.92492676]
[117.50885773 -374.35256958]
[126.33485413 -388.17404175]
[142.70329285 -387.17105103]
[149.77574158 -372.37536621]
[140.27665710 -359.00750732]
[139.35922241 -344.03558350]
[138.44180298 -329.06365967]
[137.52438354 -314.09176636]
[136.60694885 -299.11984253]
[135.68952942 -284.14791870]
[134.77210999 -269.17599487]
[133.85467529 -254.20408630]
[133.09001160 -239.22358704]
[132.47817993 -224.23606873]
[131.86636353 -209.24855042]
[139.84739685 -200.10836792]
[139.42308044 -187.57968140]
[130.27462769 -178.43173218]
[129.35720825 -163.45982361]
[128.43977356 -148.48789978]
[127.52235413 -133.51597595]
[136.19779968 -118.29090881]
[125.98354340 -103.00286102]
[125.37171936 -88.01534271]
[124.75988770 -73.02782440]
[126.92267609 -70.17131805]
[127.77598572 -66.10612488]
[126.75843048 -61.47500610]
[123.62432098 -57.15052795]
[122.09697723 -42.22848892]
[120.56963348 -27.30645180]
[119.04228973 -12.38441277]
[117.51494598 2.53762484]
[123.91609955 15.98658180]
[114.81384277 28.92719269]
[113.28649139 43.84923172]
[131.12278748 51.41181564]
[145.45063782 64.45172882]
[154.65484619 81.49897766]
[157.69784546 100.63183594]
[154.23658752 119.69347382]
[144.66125488 136.53506470]
[154.93838501 147.46121216]
[165.21551514 158.38735962]
[175.49264526 169.31350708]
[185.76976013 180.23965454]
[200.68132019 176.83482361]
[215.19917297 181.32135010]
[225.45393372 192.39863586]
[228.76504517 207.02369690]
[224.34091187 221.24665833]
[234.61804199 232.17280579]
[249.70904541 236.92384338]
[252.79310608 251.49565125]
[263.07022095 262.42181396]
[273.34735107 273.34796143]
[283.62448120 284.27410889]
[299.47497559 288.48046875]
[303.49563599 304.37908936]
[291.55035400 315.61483765]
[275.92739868 310.62933350]
[272.69833374 294.55120850]
[262.42120361 283.62506104]
[252.14408875 272.69891357]
[241.86695862 261.77279663]
[227.51104736 257.80325317]
[223.69189453 242.44993591]
[213.41477966 231.52378845]
[198.94784546 235.06973267]
[184.55267334 230.87031555]
[174.12333679 219.95724487]
[170.53315735 205.19216919]
[174.84361267 190.51678467]
[164.56649780 179.59063721]
[154.28936768 168.66448975]
[144.01223755 157.73834229]
[133.73512268 146.81219482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[47 112]
[48 111]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 101]
[56 100]
[57 99]
[60 97]
[61 96]
[62 95]
[63 94]
[65 91]
[66 90]
[67 89]
[69 88]
[70 87]
[71 86]
[72 85]
[73 84]
[74 83]
[75 82]
[76 81]
[118 153]
[119 152]
[120 151]
[121 150]
[122 149]
[127 144]
[128 143]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
