%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCAAGGAUGAGUCAAGCUGCGGGUGAUCCAAACAAACACUGUCACUCUUUAAAAGCUGCGCUCCCGAGGUUGGACCUACAAGGAGGCAGGCAAGACAGCAAGGCAUAGAGACAACAUAGAGCUAAGUAAAGCCAGUGGAA\
) } def
/len { sequence length } bind def

/coor [
[178.59996033 350.91308594]
[167.28106689 346.24176025]
[156.92137146 339.70672607]
[147.82501221 331.49832153]
[140.25930786 321.85607910]
[134.44686890 311.06161499]
[130.55908203 299.43057251]
[128.71104431 287.30322266]
[128.95814514 275.03463745]
[131.29443359 262.98422241]
[135.65269470 251.50518799]
[141.90646362 240.93424988]
[149.87367249 231.58171082]
[159.32186890 223.72236633]
[152.10704041 210.57147217]
[144.89221191 197.42056274]
[130.56530762 193.51216125]
[123.06110382 180.27806091]
[127.25774384 165.27719116]
[120.04291534 152.12628174]
[112.82807922 138.97538757]
[105.61325073 125.82448578]
[78.74948883 121.42070770]
[66.79834747 93.06012726]
[51.81262589 92.40583801]
[36.82690048 91.75154877]
[21.84117889 91.09725952]
[6.85545540 90.44296265]
[-8.13026810 89.78867340]
[-23.11599159 89.13438416]
[-29.87330818 102.78204346]
[-41.60157013 112.49635315]
[-56.26878357 116.59424591]
[-71.33376312 114.36574554]
[-84.18641663 106.19694519]
[-92.59993744 93.50315094]
[-95.11663055 78.48361969]
[-91.30047607 63.74059677]
[-81.81262970 51.82838821]
[-68.29692841 44.81085587]
[-53.09505081 43.90383530]
[-38.84080505 49.26446915]
[-28.00383186 59.96399689]
[-22.46170044 74.14865875]
[-7.47597742 74.80294800]
[7.50974607 75.45724487]
[22.49547005 76.11153412]
[37.48119354 76.76582336]
[52.46691513 77.42011261]
[67.45263672 78.07440186]
[52.48699951 77.05967712]
[40.67737961 67.81127930]
[36.10485458 53.52520370]
[40.34956741 39.13832092]
[51.94465637 29.62234116]
[66.88318634 28.26572800]
[80.00280762 35.53728485]
[86.76973724 48.92416763]
[84.84537506 63.80055618]
[87.12722778 48.97513199]
[89.40907288 34.14971161]
[91.69092560 19.32428932]
[89.89609528 10.28885269]
[94.18766785 4.20176649]
[96.79238892 -10.57034969]
[99.39710999 -25.34246635]
[102.00183105 -40.11458206]
[90.54769897 -55.13031006]
[93.57627106 -73.45003510]
[108.72692871 -83.62641144]
[110.68482208 -98.49808502]
[112.64271545 -113.36975861]
[114.60060883 -128.24143982]
[110.67341614 -144.73426819]
[125.43454742 -153.07365417]
[137.53431702 -141.19796753]
[129.47227478 -126.28353882]
[127.51438904 -111.41186523]
[125.55649567 -96.54019165]
[123.59860229 -81.66852570]
[132.40049744 -74.27172852]
[136.54922485 -63.42018127]
[134.89291382 -51.79970551]
[127.73226166 -42.34751892]
[116.77394867 -37.50986099]
[114.16922760 -22.73774338]
[111.56450653 -7.96562719]
[108.95978546 6.80648947]
[106.51634979 21.60614014]
[104.23449707 36.43156052]
[101.95264435 51.25698471]
[99.67079926 66.08240509]
[110.57263947 68.89899445]
[119.61145782 74.99446106]
[125.88134766 83.47227478]
[128.85150146 93.21656799]
[128.40620422 103.03600311]
[124.83312225 111.80854034]
[118.76415253 118.60965729]
[125.97898102 131.76055908]
[133.19381714 144.91145325]
[140.40864563 158.06236267]
[155.31509399 162.58291626]
[162.44462585 176.02256775]
[158.04310608 190.20573425]
[165.25793457 203.35664368]
[172.47277832 216.50753784]
[189.91407776 211.70150757]
[207.99403381 211.40788269]
[225.56471252 215.64079285]
[241.51161194 224.12712097]
[254.82435608 236.32412720]
[264.66079712 251.45408630]
[270.40020752 268.55398560]
[271.68240356 286.53671265]
[268.43051147 304.26022339]
[260.85540771 320.60012817]
[249.44210815 334.52084351]
[258.57354736 346.42114258]
[267.70495605 358.32144165]
[281.21746826 358.54010010]
[291.96563721 366.40643311]
[296.13592529 378.85043335]
[292.41055298 391.23120117]
[301.28021240 403.32788086]
[310.14984131 415.42456055]
[325.80636597 417.58074951]
[335.28582764 430.22650146]
[332.96423340 445.85934448]
[320.21896362 455.20455933]
[304.61154175 452.71783447]
[295.40158081 439.87445068]
[298.05319214 424.29418945]
[289.18353271 412.19754028]
[280.31390381 400.10086060]
[263.62921143 398.28118896]
[253.18852234 384.71289062]
[255.80465698 367.45288086]
[246.67323303 355.55258179]
[237.54180908 343.65228271]
[226.61587524 349.13916016]
[214.91076660 352.68359375]
[202.76896667 354.18060303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 107]
[15 106]
[16 105]
[19 102]
[20 101]
[21 100]
[22 99]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[59 92]
[60 91]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
[67 85]
[70 80]
[71 79]
[72 78]
[73 77]
[118 140]
[119 139]
[120 138]
[124 135]
[125 134]
[126 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
