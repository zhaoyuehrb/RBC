%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGCCUUCUGUGCAGUCGCGGCCCGGGCGGACGGUGGCUGGCUGCUCCGCAGCGCUCGGCUGGCUGCAGCGGCACCGCGGGUUGCGCGGCCGGGGAUGCUCCAGCGGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[89.12440491 361.14999390]
[89.12440491 346.14999390]
[89.12440491 331.14999390]
[85.93441010 324.36944580]
[89.33488464 315.74166870]
[89.74460602 300.74728394]
[90.15432739 285.75286865]
[90.56404877 270.75845337]
[83.17727661 257.82461548]
[91.28864288 244.24092102]
[91.69836426 229.24652100]
[92.10808563 214.25212097]
[82.90870667 199.37597656]
[92.50000000 183.73094177]
[92.50000000 168.73094177]
[92.50000000 153.73094177]
[84.76270294 141.00367737]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[89.33646393 34.07907104]
[92.71047974 27.38817787]
[93.12020111 12.39377499]
[85.76273346 -1.61259139]
[93.84478760 -14.12377167]
[94.25450897 -29.11817551]
[94.66423798 -44.11257935]
[95.07395935 -59.10698318]
[82.94382477 -68.60256195]
[78.77957916 -83.24880219]
[83.97659302 -97.37165833]
[96.34512329 -105.62740326]
[96.75485229 -120.62181091]
[97.16457367 -135.61621094]
[97.57429504 -150.61061096]
[89.53741455 -158.19107056]
[87.12493134 -168.74539185]
[90.91255188 -178.65121460]
[99.39012909 -184.64765930]
[100.61807251 -199.59730530]
[101.84601593 -214.54696655]
[103.07395935 -229.49661255]
[104.30190277 -244.44627380]
[105.52984619 -259.39593506]
[102.97026825 -265.73092651]
[103.94910431 -271.50384521]
[107.25504303 -275.12103271]
[109.29754639 -289.98129272]
[111.34004211 -304.84158325]
[113.38254547 -319.70187378]
[115.42504120 -334.56216431]
[103.63672638 -344.51400757]
[99.12197876 -359.26599121]
[103.32144165 -374.11077881]
[114.89508057 -384.31149292]
[130.14979553 -386.61309814]
[144.21784973 -380.28115845]
[152.61018372 -367.33621216]
[152.64883423 -351.90887451]
[144.32148743 -338.92202759]
[130.28532410 -332.51968384]
[128.24282837 -317.65939331]
[126.20033264 -302.79910278]
[124.15782928 -287.93881226]
[122.11533356 -273.07852173]
[120.47949982 -258.16796875]
[119.25155640 -243.21832275]
[118.02361298 -228.26867676]
[116.79566956 -213.31901550]
[115.56772614 -198.36936951]
[114.33978271 -183.41970825]
[123.94670105 -166.73158264]
[112.56869507 -150.20089722]
[112.15897369 -135.20648193]
[111.74925232 -120.21208954]
[111.33953094 -105.21768188]
[123.23876953 -96.29882050]
[127.65679169 -81.91323853]
[122.69893646 -67.51625061]
[110.06835938 -58.69725800]
[109.65863800 -43.70285797]
[109.24891663 -28.70845222]
[108.83919525 -13.71404934]
[116.22596741 -0.78018373]
[108.11460114 12.80349636]
[107.70487976 27.79789925]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[115.23729706 141.00367737]
[107.50000000 153.73094177]
[107.50000000 168.73094177]
[107.50000000 183.73094177]
[116.09676361 193.46502686]
[115.71111298 206.04324341]
[107.10248566 214.66183472]
[106.69276428 229.65623474]
[106.28304291 244.65065002]
[113.64051056 258.65701294]
[105.55845642 271.16818237]
[105.14872742 286.16259766]
[104.73900604 301.15698242]
[104.32928467 316.15139771]
[104.12440491 331.14999390]
[104.12440491 346.14999390]
[104.12440491 361.14999390]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 111]
[6 110]
[7 109]
[8 108]
[10 106]
[11 105]
[12 104]
[14 101]
[15 100]
[16 99]
[18 97]
[19 96]
[21 94]
[22 93]
[23 92]
[24 91]
[26 90]
[27 89]
[29 87]
[30 86]
[31 85]
[32 84]
[36 80]
[37 79]
[38 78]
[39 77]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[51 69]
[52 68]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
