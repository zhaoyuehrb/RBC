%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAGAACCCGGCAGUAGGAGACUUAGAAUCGAAUCUCUUCUCCCUCCCGCCUCCUGUUUUUGGCUUUUUGAGAAACCUUAUCAUCCAACACA\
) } def
/len { sequence length } bind def

/coor [
[98.37924194 161.89656067]
[86.36857605 160.39863586]
[74.87879944 156.59272766]
[64.34897614 150.62425232]
[55.18146515 142.72131348]
[47.72658920 133.18586731]
[42.26921463 122.38230896]
[39.01788330 110.72345734]
[38.09683609 98.65483856]
[39.54126740 86.63762665]
[43.29598618 75.13101959]
[30.38996315 67.48677063]
[17.48393822 59.84252167]
[3.25748706 68.07753754]
[-13.08731174 68.07394409]
[-27.14887619 59.92610550]
[-35.18728638 45.90902328]
[-35.11883545 29.84393501]
[-48.27308273 22.63520813]
[-61.42733383 15.42648220]
[-74.58158112 8.21775627]
[-87.73583221 1.00902975]
[-100.26502228 6.27241850]
[-113.33337402 3.33680558]
[-122.14611816 -6.48803568]
[-123.60522461 -19.40825844]
[-136.51124573 -27.05250740]
[-149.41726685 -34.69675827]
[-164.66357422 -30.53431511]
[-178.34599304 -38.44422913]
[-182.34701538 -53.73368073]
[-174.29289246 -67.33171844]
[-158.96199036 -71.17086029]
[-145.44985962 -62.97341537]
[-141.77302551 -47.60277939]
[-128.86700439 -39.95853043]
[-115.96097565 -32.31428146]
[-99.96743011 -37.20891571]
[-85.04164124 -28.94504356]
[-80.52710724 -12.14521885]
[-67.37285614 -4.93649292]
[-54.21860504 2.27223349]
[-41.06435776 9.48095989]
[-27.91010857 16.68968582]
[-16.63099480 8.79985619]
[-2.98034954 6.57169342]
[10.34987164 10.50309944]
[20.70548820 19.87148857]
[25.99855423 32.86581802]
[25.12818909 46.93649673]
[38.03421402 54.58074570]
[50.94023514 62.22499847]
[64.09706879 49.55407715]
[80.37851715 41.27344131]
[98.36760712 38.10374451]
[116.49877167 40.32084274]
[133.19404602 47.73178482]
[147.00047302 59.69160080]
[156.71646118 75.15943146]
[161.49645996 92.78913116]
[160.92445374 111.04637909]
[175.25099182 115.49051666]
[189.57752991 119.93464661]
[203.90406799 124.37878418]
[213.75578308 114.29487610]
[226.94355774 109.50408936]
[240.83804321 110.90018463]
[252.69548035 118.14944458]
[260.19961548 129.76809692]
[261.91394043 143.42564392]
[276.08398438 148.34602356]
[290.25402832 153.26638794]
[304.42407227 158.18676758]
[320.41937256 154.56979370]
[331.34918213 166.79563904]
[325.96984863 182.28739929]
[309.81515503 185.10848999]
[299.50369263 172.35679626]
[285.33364868 167.43643188]
[271.16360474 162.51605225]
[256.99359131 157.59568787]
[245.12478638 168.42266846]
[229.33694458 171.86340332]
[213.86180115 166.90007019]
[202.89529419 154.78031921]
[199.45993042 138.70532227]
[185.13339233 134.26118469]
[170.80685425 129.81704712]
[156.48031616 125.37291718]
[150.46502686 135.87606812]
[142.52133179 145.00830078]
[132.95280457 152.42065430]
[122.12504578 157.82986450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 52]
[12 51]
[13 50]
[18 44]
[19 43]
[20 42]
[21 41]
[22 40]
[26 37]
[27 36]
[28 35]
[61 89]
[62 88]
[63 87]
[64 86]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
