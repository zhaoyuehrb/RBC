%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGCGUUCGCCCCGCCUCAAAGGAAGAAGAGUCCACCUUGCGACCGUAUCCGCUAGCGCGGCCUGGGAUGCGCUUGGGCUCCCUGUUCGUUCCCAC\
) } def
/len { sequence length } bind def

/coor [
[45.12920380 248.11328125]
[33.84679794 255.55976868]
[20.82730675 259.11145020]
[7.37241364 258.42807007]
[-5.17729425 253.59208679]
[-14.81910896 265.08276367]
[-24.46092224 276.57342529]
[-21.56748390 291.94097900]
[-29.27408600 305.54769897]
[-43.94190598 310.96887207]
[-58.64524841 305.64477539]
[-66.44164276 292.08932495]
[-63.64987183 276.70297241]
[-51.58812714 266.75067139]
[-35.95158768 266.93161011]
[-26.30977440 255.44094849]
[-16.66796112 243.95027161]
[-24.66596603 229.52809143]
[-26.59233856 213.11305237]
[-22.13112450 197.16117859]
[-11.92417240 184.06976318]
[2.52106380 175.81704712]
[19.05410576 173.66333008]
[35.20158005 177.95860291]
[44.09519958 165.87954712]
[52.98881912 153.80049133]
[61.88243866 141.72143555]
[70.58329010 129.50279236]
[79.08918762 117.14765167]
[87.59508514 104.79250336]
[95.30024719 91.92275238]
[102.17364502 78.59021759]
[109.04704285 65.25769043]
[115.92044067 51.92515564]
[122.79383850 38.59262466]
[129.66723633 25.26009178]
[136.54063416 11.92755985]
[130.96426392 -0.45347318]
[133.55805969 -13.58287144]
[143.13935852 -22.64418030]
[156.00529480 -24.44762230]
[163.29824829 -37.55536270]
[170.59120178 -50.66310501]
[177.88415527 -63.77084351]
[177.83251953 -79.59196472]
[190.78170776 -86.95183563]
[198.07466125 -100.05957794]
[190.30606079 -113.23516846]
[190.17628479 -128.42990112]
[197.62002563 -141.56219482]
[210.55107117 -149.15455627]
[225.44589233 -149.25433350]
[232.73883057 -162.36207581]
[240.03178406 -175.46981812]
[247.32473755 -188.57754517]
[246.52368164 -204.95712280]
[260.45297241 -213.61199951]
[274.78335571 -205.63879395]
[274.77294922 -189.23963928]
[260.43246460 -181.28460693]
[253.13952637 -168.17686462]
[245.84657288 -155.06912231]
[238.55361938 -141.96138000]
[246.32177734 -129.25227356]
[246.68792725 -114.26154327]
[239.45361328 -101.01272583]
[226.47383118 -93.11196136]
[211.18240356 -92.76662445]
[203.88945007 -79.65888214]
[204.46272278 -64.77531433]
[190.99189758 -56.47789383]
[183.69894409 -43.37015152]
[176.40599060 -30.26241112]
[169.11303711 -17.15467072]
[174.43528748 -1.28937256]
[166.56045532 13.85509682]
[149.87316895 18.80095863]
[142.99977112 32.13349152]
[136.12637329 45.46602249]
[129.25297546 58.79855347]
[122.37957764 72.13108826]
[115.50617981 85.46361542]
[108.63278198 98.79615021]
[109.43288422 101.95205688]
[109.01169586 105.48404694]
[107.22283936 108.90455627]
[104.11614990 111.67787170]
[99.95023346 113.29840088]
[91.44433594 125.65354919]
[82.93843842 138.00869751]
[80.58338165 147.02967834]
[73.96149445 150.61505127]
[65.06787109 162.69410706]
[56.17425537 174.77316284]
[47.28063583 186.85221863]
[54.95488739 198.12039185]
[58.72708130 211.19747925]
[58.23495102 224.77581787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 17]
[6 16]
[7 15]
[24 95]
[25 94]
[26 93]
[27 92]
[28 90]
[29 89]
[30 88]
[31 83]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[41 74]
[42 73]
[43 72]
[44 71]
[46 69]
[47 68]
[52 63]
[53 62]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
