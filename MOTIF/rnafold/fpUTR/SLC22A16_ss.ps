%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGGCGCGCUACCCGCAGUCCCCGGAGCUCGGCUAACUCGGCGCCCAGUGCACGGCCGCACC\
) } def
/len { sequence length } bind def

/coor [
[138.66955566 171.45402527]
[140.32418823 160.26910400]
[130.74148560 148.72909546]
[121.15879059 137.18908691]
[111.57608795 125.64907837]
[101.99338531 114.10906982]
[88.27147675 108.05025482]
[73.28748322 108.74300385]
[58.30348969 109.43576050]
[43.31949234 110.12850952]
[28.35549736 111.16717529]
[13.41948605 112.55120087]
[-1.51652694 113.93522644]
[-12.83053589 125.30944061]
[-28.76102829 123.41234589]
[-37.08749390 109.69923401]
[-31.42258072 94.68962097]
[-16.11192513 89.89761353]
[-2.90055227 98.99921417]
[12.03546047 97.61518860]
[26.97147369 96.23116302]
[33.56278229 92.34499359]
[42.62674332 95.14451599]
[57.61073685 94.45175934]
[72.59473419 93.75901031]
[87.57872772 93.06626129]
[99.11873627 83.48355865]
[102.55299377 68.88198853]
[105.98725128 54.28041458]
[109.42150879 39.67884445]
[111.83644867 24.87451744]
[113.22047424 9.93850517]
[114.60449982 -4.99750710]
[110.04540253 -21.32695770]
[124.47460938 -30.22832489]
[137.02250671 -18.82716179]
[129.54051208 -3.61348176]
[128.15649414 11.32253075]
[126.77246094 26.25854301]
[129.05346680 29.37027740]
[129.72837830 33.85117722]
[128.11889648 38.82217789]
[124.02307892 43.11310196]
[120.58882141 57.71467209]
[117.15456390 72.31624603]
[113.72030640 86.91781616]
[113.53339386 104.52636719]
[123.11609650 116.06637573]
[132.69880676 127.60638428]
[142.28150940 139.14639282]
[151.86419678 150.68640137]
[170.94316101 156.42279053]
[174.17477417 175.27359009]
[184.78137207 185.88018799]
[195.38796997 196.48678589]
[205.99458313 207.09338379]
[221.79687500 206.84275818]
[233.08972168 217.89929199]
[233.17327881 233.70336914]
[221.99795532 244.87869263]
[206.19389343 244.79513550]
[195.13734436 233.50228882]
[195.38796997 217.69999695]
[184.78137207 207.09338379]
[174.17477417 196.48678589]
[163.56817627 185.88018799]
[152.97100830 186.77624512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 51]
[3 50]
[4 49]
[5 48]
[6 47]
[7 26]
[8 25]
[9 24]
[10 23]
[11 21]
[12 20]
[13 19]
[27 46]
[28 45]
[29 44]
[30 43]
[31 39]
[32 38]
[33 37]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
