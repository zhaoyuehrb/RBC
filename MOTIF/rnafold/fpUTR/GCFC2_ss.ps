%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:18:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGCAGGCGGGACGGGCGCGCGCACUCGGCGGCCAGGCGCGGCGGGAGCGCGCCCUAGGGGGCGGGCACUGAAGCUGCGGCUUGCGGUUCAGCGGGUUCUAGGGCGCCGGGCGCUCGGGCCUCGGCC\
) } def
/len { sequence length } bind def

/coor [
[19.11063194 530.72631836]
[14.09764385 545.31646729]
[1.97824836 554.86236572]
[-13.38030052 556.31787109]
[-27.07714462 549.21856689]
[-34.74167252 535.82983398]
[-33.92815781 520.42395020]
[-24.89619446 507.91683960]
[-10.52784634 502.29956055]
[-7.66767311 487.57476807]
[-4.80749989 472.84997559]
[-9.97602749 458.88088989]
[0.25070560 446.80923462]
[3.11087871 432.08444214]
[1.36937225 428.91058350]
[1.13853133 424.71215820]
[2.89313936 420.23712158]
[6.74246311 416.42098999]
[10.65369606 401.93988037]
[14.56492996 387.45880127]
[10.41391087 373.15429688]
[21.48193169 361.84902954]
[25.39316559 347.36791992]
[21.24214554 333.06344604]
[32.31016541 321.75814819]
[36.22140121 307.27703857]
[32.07038116 292.97256470]
[43.13840103 281.66726685]
[47.04963684 267.18618774]
[50.96086884 252.70507812]
[54.87210464 238.22398376]
[58.78333664 223.74287415]
[62.69456863 209.26177979]
[66.60580444 194.78068542]
[62.45478439 180.47619629]
[73.52280426 169.17091370]
[77.43403625 154.68980408]
[81.17135620 140.16285706]
[84.73421478 125.59212494]
[88.29708099 111.02140045]
[80.56308746 84.62957764]
[77.70291138 69.90479279]
[74.84273529 55.18000031]
[71.98256683 40.45521164]
[69.12239075 25.73042297]
[66.26222229 11.00563431]
[52.33935547 -3.48118854]
[59.17501068 -21.50637054]
[55.61214828 -36.07709503]
[44.81840515 -47.64453506]
[49.31124115 -61.84536743]
[45.74837875 -76.41609192]
[34.95463562 -87.98352814]
[39.44747162 -102.18436432]
[35.88460922 -116.75508881]
[32.32174683 -131.32580566]
[28.75888634 -145.89654541]
[25.19602394 -160.46726990]
[13.47302341 -171.93475342]
[17.80422020 -187.75160217]
[33.73405075 -191.64678955]
[44.87527084 -179.61329651]
[39.76675034 -164.03012085]
[43.32961273 -149.45939636]
[46.89247131 -134.88867188]
[50.45533371 -120.31794739]
[54.01819611 -105.74722290]
[64.55709839 -95.22198486]
[60.31910324 -79.97895050]
[63.88196564 -65.40822601]
[74.42087555 -54.88298798]
[70.18287659 -39.63995743]
[73.74573517 -25.06923294]
[83.02348328 -20.50535393]
[88.32179260 -11.37033081]
[87.64906311 -0.61017096]
[80.98700714 8.14546108]
[83.84718323 22.87025070]
[86.70735168 37.59503937]
[89.56752777 52.31982803]
[92.42770386 67.04461670]
[95.28787231 81.76940918]
[108.24817657 89.32126617]
[122.46890259 84.54937744]
[136.68963623 79.77749634]
[150.91035461 75.00560760]
[165.13108826 70.23371887]
[179.35180664 65.46183014]
[186.16612244 51.20207214]
[201.09535217 46.01618958]
[215.28227234 52.98087692]
[220.31002808 67.96411133]
[213.19573975 82.07659912]
[198.16018677 86.94566345]
[184.12370300 79.68256378]
[169.90296936 84.45444489]
[155.68225098 89.22633362]
[141.46151733 93.99822235]
[127.24079132 98.77011108]
[113.02005768 103.54199219]
[102.86780548 114.58425903]
[99.30493927 129.15498352]
[95.74208069 143.72570801]
[96.74427032 152.90742493]
[91.91513824 158.60104370]
[88.00390625 173.08213806]
[91.87516785 188.42240906]
[81.08690643 198.69190979]
[77.17566681 213.17300415]
[73.26443481 227.65411377]
[69.35320282 242.13520813]
[65.44197083 256.61630249]
[61.53073502 271.09741211]
[57.61950302 285.57852173]
[61.49076462 300.91879272]
[50.70249939 311.18829346]
[46.79126740 325.66937256]
[50.66252899 341.00964355]
[39.87426376 351.27914429]
[35.96303177 365.76025391]
[39.83429337 381.10052490]
[29.04603004 391.37002563]
[25.13479614 405.85113525]
[21.22356224 420.33221436]
[17.83566856 434.94461060]
[14.97549438 449.66940308]
[19.93944359 464.69171143]
[9.91728878 475.71014404]
[7.05711603 490.43493652]
[4.19694281 505.15972900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 130]
[10 129]
[11 128]
[13 126]
[14 125]
[18 124]
[19 123]
[20 122]
[22 120]
[23 119]
[25 117]
[26 116]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[33 109]
[34 108]
[36 106]
[37 105]
[38 103]
[39 102]
[40 101]
[41 82]
[42 81]
[43 80]
[44 79]
[45 78]
[46 77]
[48 73]
[49 72]
[51 70]
[52 69]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[83 100]
[84 99]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
