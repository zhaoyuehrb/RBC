%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGAGGCUGAGAAGUAAAGAUCAGGAACAAGGAGGAGGAGGAGCUUCCCAGACGUGUAGAGCUUAUGAAGUUUAGGAAGCAGCUUCCCAGACAUGUAGAGCUUAUGGAGAGGUGAGGGAGCCAAUCUCAGCCACAUUCAGCUUCCUGGAGAGA\
) } def
/len { sequence length } bind def

/coor [
[164.23680115 368.92803955]
[161.83062744 354.12228394]
[159.42445374 339.31652832]
[157.01829529 324.51077271]
[154.61212158 309.70504761]
[137.24711609 293.51461792]
[145.25137329 270.42660522]
[140.78883362 256.10580444]
[136.32629395 241.78497314]
[131.86373901 227.46417236]
[127.40119171 213.14335632]
[122.93865204 198.82254028]
[118.47610474 184.50172424]
[114.01355743 170.18090820]
[105.54521179 171.35118103]
[96.99773407 171.50332642]
[88.49310303 170.63520813]
[80.15266418 168.75917053]
[72.09542847 165.90200806]
[64.43636322 162.10449219]
[57.28475189 157.42079163]
[50.74265289 151.91777039]
[44.90341187 145.67391968]
[39.85034561 138.77833557]
[35.65555954 131.32943726]
[32.37890625 123.43347931]
[30.06714439 115.20316315]
[28.75325966 106.75590515]
[28.45599747 98.21224976]
[29.17960167 89.69409943]
[30.91374779 81.32300568]
[33.63368988 73.21841431]
[37.30061722 65.49597931]
[41.86220551 58.26587677]
[47.25336456 51.63128281]
[53.39717102 45.68686676]
[44.87619781 33.34210587]
[37.38141251 28.01832962]
[36.31087494 20.66186333]
[28.04021835 8.14802074]
[19.76956367 -4.36582184]
[11.49890614 -16.87966347]
[-3.72849131 -20.16053391]
[-11.93784809 -32.96916962]
[-8.71619797 -47.46594620]
[-16.98685455 -59.97978973]
[-25.25751114 -72.49362946]
[-33.52816772 -85.00746918]
[-41.79882431 -97.52131653]
[-50.06948090 -110.03515625]
[-64.13346863 -117.28186798]
[-64.69610596 -132.16583252]
[-72.96675873 -144.67968750]
[-81.23741913 -157.19352722]
[-89.50807190 -169.70736694]
[-104.24417877 -166.15446472]
[-119.30639648 -167.85896301]
[-132.87590027 -174.61503601]
[-143.31410217 -185.60684204]
[-149.36053467 -199.50706482]
[-150.28506470 -214.63720703]
[-145.97605896 -229.17021179]
[-136.95384216 -241.35115051]
[-124.30788422 -249.70912170]
[-109.56526184 -253.23486328]
[-94.50620270 -251.50260925]
[-80.94918060 -244.72154236]
[-70.53125000 -233.71052551]
[-64.51044464 -219.79916382]
[-63.61379242 -204.66735840]
[-67.94957733 -190.14231873]
[-76.99423218 -177.97802734]
[-68.72357941 -165.46418762]
[-60.45291901 -152.95033264]
[-52.18226242 -140.43649292]
[-38.70984650 -134.08485413]
[-37.55563736 -118.30580902]
[-29.28498077 -105.79196930]
[-21.01432610 -93.27812958]
[-12.74366856 -80.76428986]
[-4.47301245 -68.25044250]
[3.79764366 -55.73660278]
[18.39715958 -53.01819992]
[26.96304703 -40.44520569]
[24.01274872 -25.15032005]
[32.28340530 -12.63647842]
[40.55406189 -0.12263595]
[48.82471848 12.39120579]
[57.22095871 24.82113647]
[65.74192810 37.16589355]
[87.96086121 29.45356560]
[111.48004913 29.36042976]
[133.75936890 36.89654541]
[152.39257812 51.24799728]
[164.38421631 42.23686218]
[176.37586975 33.22572708]
[188.36750793 24.21459389]
[189.02615356 8.59088802]
[199.61154175 -2.91926527]
[215.12556458 -4.88112259]
[228.24299622 3.63164496]
[232.77015686 18.59956932]
[226.56948853 32.95525360]
[212.56874084 39.92038345]
[197.37863159 36.20623398]
[185.38699341 45.21736908]
[173.39535522 54.22850418]
[161.40371704 63.23963547]
[164.73554993 69.48690796]
[167.43377686 76.03282166]
[169.47200012 82.81332397]
[170.83024597 89.76203918]
[171.49525452 96.81095886]
[186.46788025 97.71663666]
[201.44050598 98.62231445]
[213.10250854 87.95584869]
[228.88716125 88.74324799]
[239.42973328 100.51735687]
[238.47549438 116.29281616]
[226.59057617 126.71031189]
[210.82609558 125.58934021]
[200.53483582 113.59494781]
[185.56221008 112.68927002]
[170.58956909 111.78359222]
[162.86769104 134.19639587]
[148.24792480 152.85714722]
[128.33436584 165.71836853]
[132.79692078 180.03918457]
[137.25946045 194.36000061]
[141.72201538 208.68080139]
[146.18455505 223.00161743]
[150.64709473 237.32243347]
[155.10964966 251.64324951]
[159.57218933 265.96405029]
[165.93716431 267.25256348]
[171.63880920 270.27566528]
[176.21894836 274.76437378]
[179.31694031 280.33303833]
[180.69808960 286.51242065]
[180.27124023 292.78924561]
[178.09445190 298.64871216]
[174.36836243 303.61688232]
[169.41787720 307.29885864]
[171.82405090 322.10461426]
[174.23020935 336.91036987]
[176.63638306 351.71612549]
[179.04255676 366.52188110]
[193.23143005 372.57821655]
[201.87464905 385.35705566]
[202.21418762 400.78067017]
[194.14169312 413.92749023]
[180.23309326 420.60235596]
[164.92654419 418.67541504]
[153.10632324 408.76147461]
[148.54421997 394.02407837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 143]
[7 134]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[36 90]
[37 89]
[39 88]
[40 87]
[41 86]
[42 85]
[45 82]
[46 81]
[47 80]
[48 79]
[49 78]
[50 77]
[52 75]
[53 74]
[54 73]
[55 72]
[94 108]
[95 107]
[96 106]
[97 105]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
