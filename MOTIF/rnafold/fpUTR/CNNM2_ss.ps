%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGGGGUUCCUCAGCUGGCUGAGGUGGAGUCAGUGUCAGUCAGGGAGGCGAACUGCUGAGCACUGGCCGCGGACGCUCCGUUGCAGUCUCGCCCAGGGGCCGGUACCUGCGCUCGCGCCGCCGGGUUGAAAGGAUGAAGCCGCAGCUGGAGCAGCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[105.94308472 211.00357056]
[91.02471161 216.90455627]
[77.18195343 208.79545593]
[75.03379059 192.89686584]
[86.22811127 181.40484619]
[87.37635040 166.44885254]
[88.52458954 151.49287415]
[89.67282867 136.53688049]
[90.82106781 121.58089447]
[76.96225739 115.84039307]
[63.10467911 110.10038757]
[53.34112930 121.48780060]
[43.57757568 132.87519836]
[33.81402206 144.26261902]
[24.05047035 155.65002441]
[14.28691769 167.03742981]
[11.80100632 183.24707031]
[-3.57603002 188.94607544]
[-16.02561378 178.27182007]
[-12.74068260 162.20504761]
[2.89951062 157.27388000]
[12.66306305 145.88647461]
[22.42661476 134.49905396]
[32.19016647 123.11165619]
[41.95372009 111.72424316]
[51.71727371 100.33683777]
[49.79927063 93.08623505]
[35.29799652 96.92200470]
[31.46247101 82.42066193]
[45.96326065 78.58502960]
[44.04525757 71.33441925]
[29.92815590 66.26416779]
[15.81105614 61.19391632]
[1.69395518 56.12366104]
[-12.42314529 51.05340958]
[-26.54024696 45.98315430]
[-40.65734863 40.91290283]
[-54.82236099 35.97809219]
[-69.03399658 31.17918205]
[-83.24562073 26.38027000]
[-97.45725250 21.58135986]
[-106.63689423 21.79701424]
[-111.89360809 16.55202103]
[-126.01071167 11.48176765]
[-140.12780762 6.41151428]
[-152.30154419 15.88800240]
[-167.66815186 17.25575638]
[-181.32421875 10.07833099]
[-188.91213989 -3.35398364]
[-188.01063538 -18.75498390]
[-178.90736389 -31.21026802]
[-164.50715637 -36.74539948]
[-149.40507507 -33.59413910]
[-138.42012024 -22.76203918]
[-135.05755615 -7.70558643]
[-120.94046021 -2.63533330]
[-106.82335663 2.43491983]
[-92.65834045 7.36972857]
[-78.44670868 12.16864014]
[-64.23508453 16.96755219]
[-50.02345276 21.76646233]
[-42.64566422 20.92307854]
[-35.58709335 26.79580116]
[-21.46999359 31.86605453]
[-7.35289240 36.93630981]
[6.76420832 42.00656128]
[20.88130951 47.07681656]
[34.99840927 52.14706802]
[49.11550903 57.21731949]
[82.68713379 50.20114899]
[107.83694458 61.83126068]
[116.98971558 81.37831879]
[110.95836639 96.68090820]
[125.34338379 92.42985535]
[132.93251038 78.82681274]
[147.58151245 74.72056580]
[160.50317383 82.03946686]
[174.88818359 77.78842163]
[189.27319336 73.53737640]
[203.65821838 69.28633118]
[218.04322815 65.03528595]
[232.38687134 60.64665985]
[246.68780518 56.12084961]
[260.98876953 51.59503937]
[275.28970337 47.06923294]
[289.59063721 42.54342270]
[300.41317749 31.00291252]
[314.88180542 34.53954697]
[329.18276978 30.01373672]
[340.00527954 18.47322655]
[354.47393799 22.00986099]
[368.77487183 17.48405266]
[383.07583618 12.95824337]
[397.33276367 8.29566860]
[411.54440308 3.49675751]
[416.35037231 -12.69725990]
[429.71862793 -22.74989510]
[446.27850342 -22.86956024]
[459.52258301 -13.20669174]
[473.63970947 -18.27694511]
[484.01226807 -30.22352028]
[498.60574341 -27.24366951]
[512.72283936 -32.31392288]
[526.83996582 -37.38417435]
[540.95703125 -42.45442963]
[555.07415771 -47.52468109]
[557.95080566 -56.59128952]
[564.59881592 -63.19996643]
[573.41876221 -65.94064331]
[582.36987305 -64.31288147]
[589.44219971 -58.81192780]
[603.82720947 -63.06297302]
[618.21221924 -67.31401825]
[629.10986328 -79.56856537]
[645.11462402 -75.99366760]
[649.76220703 -60.26686859]
[638.27154541 -48.56655502]
[622.46331787 -52.92900467]
[608.07824707 -48.67795944]
[593.69323730 -44.42691422]
[580.91314697 -28.25280380]
[560.14440918 -33.40758133]
[546.02728271 -28.33732796]
[531.91021729 -23.26707458]
[517.79309082 -18.19682121]
[503.67599487 -13.12656879]
[494.31317139 -1.54265249]
[478.70996094 -4.15984440]
[464.59286499 0.91040862]
[462.05364990 14.04367161]
[453.27728271 24.28167915]
[440.48233032 28.87148094]
[426.98580933 26.50924492]
[416.34332275 17.70838737]
[402.13168335 22.50729942]
[396.77545166 27.65064049]
[387.60162354 27.25918961]
[373.30068970 31.78499794]
[358.99975586 36.31080627]
[349.20010376 47.52760315]
[333.70855713 44.31468201]
[319.40762329 48.84049225]
[309.60800171 60.05728531]
[294.11645508 56.84436798]
[279.81552124 61.37017822]
[265.51455688 65.89598846]
[251.21362305 70.42179871]
[236.91267395 74.94760132]
[231.45890808 79.98740387]
[222.29426575 79.42030334]
[207.90925598 83.67134857]
[193.52424622 87.92239380]
[179.13923645 92.17343903]
[164.75421143 96.42448425]
[157.88655090 109.59151459]
[143.35865784 114.10759735]
[129.59442139 106.81487274]
[115.20941162 111.06591797]
[105.77705383 122.72913361]
[104.62881470 137.68511963]
[103.48057556 152.64111328]
[102.33233643 167.59709167]
[101.18409729 182.55308533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 163]
[6 162]
[7 161]
[8 160]
[9 159]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 61]
[39 60]
[40 59]
[41 58]
[43 57]
[44 56]
[45 55]
[73 158]
[74 157]
[77 154]
[78 153]
[79 152]
[80 151]
[81 150]
[82 148]
[83 147]
[84 146]
[85 145]
[86 144]
[88 142]
[89 141]
[91 139]
[92 138]
[93 137]
[94 135]
[95 134]
[99 129]
[100 128]
[102 126]
[103 125]
[104 124]
[105 123]
[106 122]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
