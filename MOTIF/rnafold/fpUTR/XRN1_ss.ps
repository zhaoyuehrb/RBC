%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGUCGGCCGGGCGGUGUGUUGUCAUCCGCGGAGCGACGACCGGAGGCUGCGGCGGAGCCCCGGCGGGGCGUUUGGUUUCGGUUUGGCCCUGACUGGGAUUAGUGUUGACGAUCGAA\
) } def
/len { sequence length } bind def

/coor [
[147.45437622 217.07548523]
[149.13775635 207.29264832]
[154.36199951 198.78327942]
[146.80491638 185.82601929]
[139.24781799 172.86875916]
[131.69073486 159.91151428]
[123.79425812 147.15824890]
[115.56388092 134.61788940]
[107.33350372 122.07751465]
[99.10312653 109.53713989]
[96.77962494 111.61491394]
[93.71828461 113.09858704]
[90.06835938 113.79823303]
[76.30676270 119.76634979]
[62.54516602 125.73446655]
[48.78356934 131.70259094]
[42.05276489 138.06707764]
[34.57904816 137.64128113]
[20.66470909 143.24406433]
[6.75036716 148.84683228]
[-2.92961645 162.08428955]
[-19.20223999 160.05113220]
[-25.32762527 144.83889771]
[-15.00449848 132.09664917]
[1.14759076 134.93249512]
[15.06193161 129.32972717]
[28.97627258 123.72694397]
[42.81544876 117.94099426]
[56.57704544 111.97286987]
[70.33863831 106.00475311]
[84.10024261 100.03663635]
[92.16436768 87.38871765]
[91.76841736 72.39394379]
[91.37246704 57.39916992]
[83.27358246 43.80804825]
[90.67222595 30.88097000]
[90.27626801 15.88619804]
[89.88031769 0.89142466]
[86.49055481 -7.72947454]
[89.67709351 -14.50322151]
[89.67709351 -29.50322151]
[89.67709351 -44.50322342]
[89.67709351 -59.50322342]
[89.67709351 -74.50321960]
[89.67709351 -89.50321960]
[89.67709351 -104.50321960]
[81.93979645 -118.30339050]
[89.67709351 -131.03067017]
[89.67709351 -146.03067017]
[89.67709351 -161.03067017]
[81.93979645 -174.83084106]
[89.67709351 -187.55810547]
[89.67709351 -202.55810547]
[81.93979645 -216.35827637]
[89.67709351 -229.08555603]
[89.67709351 -244.08555603]
[89.67709351 -259.08554077]
[81.01339722 -273.00936890]
[88.97752380 -287.34478760]
[105.37667084 -287.34478760]
[113.34079742 -273.00936890]
[104.67709351 -259.08554077]
[104.67709351 -244.08555603]
[104.67709351 -229.08555603]
[112.41439819 -216.35827637]
[104.67709351 -202.55810547]
[104.67709351 -187.55810547]
[112.41439819 -174.83084106]
[104.67709351 -161.03067017]
[104.67709351 -146.03067017]
[104.67709351 -131.03067017]
[112.41439819 -118.30339050]
[104.67709351 -104.50321960]
[104.67709351 -89.50321960]
[104.67709351 -74.50321960]
[104.67709351 -59.50322342]
[104.67709351 -44.50322342]
[104.67709351 -29.50322151]
[104.67709351 -14.50322151]
[104.87509155 0.49547157]
[105.27104187 15.49024487]
[105.66699982 30.48501778]
[113.73756409 43.00361252]
[106.36724091 57.00321960]
[106.76319122 71.99799347]
[107.15914154 86.99276733]
[111.64349365 101.30676270]
[119.87387085 113.84713745]
[128.10424805 126.38750458]
[136.33462524 138.92787170]
[142.23591614 142.33869934]
[145.01617432 147.47726440]
[144.64799500 152.35443115]
[152.20507812 165.31167603]
[159.76216125 178.26893616]
[167.31924438 191.22619629]
[187.87275696 195.03077698]
[199.01550293 212.37602234]
[194.07017517 232.09460449]
[202.95091248 244.18313599]
[211.83163452 256.27166748]
[220.71237183 268.36019897]
[228.41502380 273.50601196]
[229.66296387 280.88708496]
[238.22151184 293.20584106]
[253.28105164 299.69750977]
[254.91987610 316.01458740]
[241.45208740 325.37142944]
[226.73219299 318.14254761]
[225.90275574 301.76437378]
[217.34422302 289.44561768]
[208.62382507 277.24093628]
[199.74310303 265.15240479]
[190.86236572 253.06385803]
[181.98164368 240.97532654]
[172.47012329 242.50837708]
[163.01184082 240.38935852]
[154.96713257 234.87857056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 94]
[6 93]
[7 90]
[8 89]
[9 88]
[10 87]
[13 31]
[14 30]
[15 29]
[16 28]
[18 27]
[19 26]
[20 25]
[32 86]
[33 85]
[34 84]
[36 82]
[37 81]
[38 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[48 71]
[49 70]
[50 69]
[52 67]
[53 66]
[55 64]
[56 63]
[57 62]
[99 115]
[100 114]
[101 113]
[102 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
