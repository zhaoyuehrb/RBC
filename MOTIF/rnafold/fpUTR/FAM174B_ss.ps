%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUCCGGGCGCCGCAGCUUCCUGCCAAGCACCGCGCAGCCGCCUCCGCCGCAGGAUCCCCCGGUGCAGGCCUCCGUGCUGGUGCGGAUCCUGGAGCUCAGCCGCGCGCGCCCUGCCCGAUCCUGUGCCGACCCACCGCACU\
) } def
/len { sequence length } bind def

/coor [
[230.14205933 414.96646118]
[218.22409058 403.06445312]
[210.51226807 388.07037354]
[207.75630188 371.41802979]
[210.23141479 354.70367432]
[217.71084595 339.53280640]
[229.48661804 327.36602783]
[222.22569275 314.24053955]
[214.96475220 301.11502075]
[207.70382690 287.98953247]
[200.44288635 274.86401367]
[193.18196106 261.73852539]
[185.77728271 248.69355774]
[178.22976685 235.73072815]
[170.68226624 222.76789856]
[157.59182739 215.66229248]
[157.33450317 199.84317017]
[149.78698730 186.88034058]
[142.23948669 173.91751099]
[134.12986755 161.29870605]
[125.47380829 149.04829407]
[116.81775665 136.79788208]
[101.46820068 140.43222046]
[85.89546967 137.92074585]
[72.46667480 129.64518738]
[63.22304153 116.86344910]
[59.56962967 101.51842499]
[62.06176376 85.94258881]
[70.32064056 72.50352478]
[61.39756393 60.44621658]
[52.47448349 48.38890839]
[43.55140686 36.33160019]
[34.62833023 24.27429008]
[25.57334900 12.31572342]
[16.38755608 0.45734197]
[7.20176458 -11.40104008]
[-1.98402774 -23.25942230]
[-17.15273857 -21.29537964]
[-31.17531967 -27.14892769]
[-40.32440948 -39.15561295]
[-42.22254562 -54.03018951]
[-36.45928955 -67.76519775]
[-45.64508438 -79.62358093]
[-54.83087540 -91.48196411]
[-64.01667023 -103.34034729]
[-78.58449554 -109.51197815]
[-80.26170349 -124.31185150]
[-89.44750214 -136.17022705]
[-98.63329315 -148.02861023]
[-107.81908417 -159.88699341]
[-117.00487518 -171.74537659]
[-123.08325195 -174.65045166]
[-126.25040436 -179.48643494]
[-126.31998444 -184.33242798]
[-134.97604370 -196.58283997]
[-150.08665466 -202.95475769]
[-151.85494995 -219.25830078]
[-138.46185303 -228.72175598]
[-123.68504333 -221.60995483]
[-122.72562408 -205.23889160]
[-114.06957245 -192.98847961]
[-105.14649200 -180.93116760]
[-95.96070099 -169.07278442]
[-86.77490997 -157.21440125]
[-77.58911896 -145.35601807]
[-68.40332794 -133.49763489]
[-54.49252701 -128.17419434]
[-52.15828705 -112.52613831]
[-42.97249222 -100.66775513]
[-33.78670120 -88.80937195]
[-24.60090828 -76.95098877]
[-9.86130428 -79.09799957]
[4.06660223 -73.54197693]
[13.40516567 -61.68206024]
[15.56771564 -46.64144135]
[9.87435436 -32.44521332]
[19.06014633 -20.58683205]
[28.24593925 -8.72844982]
[37.43173218 3.12993169]
[44.06581879 6.51783371]
[46.68563843 15.35121250]
[55.60871506 27.40852165]
[64.53179169 39.46582794]
[73.45487213 51.52313614]
[82.37795258 63.58044815]
[95.88750458 59.75067902]
[109.89244080 60.76914215]
[122.70577240 66.51316071]
[132.78408813 76.29084015]
[138.91339111 88.92440033]
[140.35537720 102.89207458]
[136.93635559 116.51139069]
[129.06817627 128.14181519]
[137.72422791 140.39224243]
[146.38027954 152.64265442]
[150.55513000 154.37431335]
[153.61257935 157.09970093]
[155.37455750 160.32904053]
[155.84643555 163.56597900]
[155.20231628 166.36999512]
[162.74983215 179.33282471]
[170.29734802 192.29565430]
[183.92762756 200.32846069]
[183.64509583 215.22038269]
[191.19261169 228.18321228]
[198.74012756 241.14604187]
[205.81822205 247.04457092]
[206.30746460 254.47758484]
[213.56838989 267.60308838]
[220.82933044 280.72857666]
[228.09025574 293.85409546]
[235.35119629 306.97961426]
[242.61212158 320.10510254]
[255.54226685 316.90820312]
[268.85122681 316.93313599]
[281.74893188 320.17333984]
[293.47097778 326.43148804]
[303.32388306 335.33166504]
[310.72607422 346.34170532]
[315.24240112 358.80517578]
[316.60949707 371.98049927]
[314.75128174 385.08493042]
[309.78302002 397.34130859]
[302.00442505 408.02392578]
[291.88134766 416.50158691]
[298.26205444 430.07678223]
[304.64279175 443.65200806]
[311.02352905 457.22720337]
[326.33023071 459.15289307]
[338.15127563 469.06585693]
[342.71459961 483.80285645]
[338.56405640 498.66140747]
[327.02407837 508.90020752]
[311.77703857 511.25204468]
[297.68820190 504.96652222]
[289.25326538 492.04925537]
[289.16378784 476.62216187]
[297.44830322 463.60794067]
[291.06756592 450.03271484]
[284.68685913 436.45751953]
[278.30612183 422.88229370]
[261.70065308 425.36404419]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 106]
[14 105]
[15 104]
[17 102]
[18 101]
[19 100]
[20 95]
[21 94]
[22 93]
[29 85]
[30 84]
[31 83]
[32 82]
[33 81]
[34 79]
[35 78]
[36 77]
[37 76]
[42 71]
[43 70]
[44 69]
[45 68]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[54 61]
[55 60]
[125 141]
[126 140]
[127 139]
[128 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
