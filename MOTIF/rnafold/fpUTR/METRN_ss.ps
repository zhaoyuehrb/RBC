%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:02:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCGCCGGGGCCGGGCGGCCGGCGCCCCCGGCUGCUCCCGCCGCCGCCCGGACCCGCGCCCCGCCGGGGCAGCGGUGGUGAGAGCCCCGACUCCCCGGACGCCGCCCGCCGUGCC\
) } def
/len { sequence length } bind def

/coor [
[96.14645386 218.75231934]
[95.74714661 203.75764465]
[87.14691162 195.13737488]
[86.76557159 182.56385803]
[95.35984802 172.83416748]
[95.35984802 157.83416748]
[87.62254333 145.10690308]
[95.35984802 131.30673218]
[95.35984802 116.30673218]
[85.94074249 104.63280487]
[71.27969360 101.46206665]
[56.61864090 98.29132080]
[41.91668320 95.31602478]
[27.17642212 92.53669739]
[12.43615913 89.75736237]
[-2.30410242 86.97803497]
[-17.04436493 84.19869995]
[-31.78462601 81.41937256]
[-46.52488708 78.64003754]
[-61.26514816 75.86071014]
[-76.00540924 73.08137512]
[-85.15023041 74.57443237]
[-91.09877777 70.02687073]
[-105.75982666 66.85613251]
[-120.42088318 63.68539047]
[-135.31335449 61.89258957]
[-150.30804443 61.49328232]
[-165.30271912 61.09397507]
[-181.29719543 66.71652222]
[-191.12773132 52.90359497]
[-180.57597351 39.63344574]
[-164.90341187 46.09928894]
[-149.90873718 46.49859619]
[-134.91404724 46.89790344]
[-144.58580017 35.43242264]
[-144.84837341 20.43472099]
[-135.58387756 8.63771629]
[-120.95144653 5.33743668]
[-107.51999664 12.01547623]
[-101.31931305 25.67386246]
[-105.13307190 40.18093872]
[-117.25014496 49.02433777]
[-102.58908844 52.19507980]
[-87.92803955 55.36581802]
[-73.22608185 58.34111786]
[-58.48582077 61.12044907]
[-43.74555588 63.89978027]
[-29.00529480 66.67910767]
[-14.26503372 69.45844269]
[0.47522855 72.23777008]
[15.21549034 75.01710510]
[29.95575142 77.79643250]
[44.69601440 80.57576752]
[51.94468307 78.69897461]
[59.78938293 83.63027191]
[74.45043182 86.80101013]
[89.11148071 89.97175598]
[104.09022522 89.17341614]
[118.33118439 84.46227264]
[132.57215881 79.75112152]
[136.96507263 69.62461090]
[146.06037903 63.76925659]
[156.65464783 63.95512009]
[165.17544556 69.87379456]
[179.64695740 65.92725372]
[194.06466675 61.78842926]
[208.42599487 57.45804977]
[222.78732300 53.12767029]
[237.14865112 48.79729080]
[251.50997925 44.46691132]
[265.87130737 40.13653183]
[273.29754639 34.59505844]
[280.67285156 35.88751984]
[295.14437866 31.94098282]
[309.56207275 27.80215645]
[323.92340088 23.47177696]
[338.28472900 19.14139748]
[345.71096802 13.59992504]
[353.08627319 14.89238548]
[367.55780029 10.94584656]
[382.02932739 6.99930811]
[393.18310547 -5.02254200]
[409.10885620 -1.11069608]
[413.42352295 14.71067429]
[401.68853760 26.16589928]
[385.97586060 21.47082710]
[371.50433350 25.41736412]
[357.03280640 29.36390305]
[342.61511230 33.50272751]
[328.25378418 37.83310699]
[313.89245605 42.16348648]
[308.32571411 47.17116547]
[299.09091187 46.41249847]
[284.61938477 50.35903931]
[270.20169067 54.49786377]
[255.84036255 58.82824326]
[241.47903442 63.15862274]
[227.11770630 67.48899841]
[212.75637817 71.81938171]
[198.39505005 76.14975739]
[192.82829285 81.15744019]
[183.59350586 80.39877319]
[169.12197876 84.34531403]
[156.70402527 99.06802368]
[137.28330994 93.99208069]
[123.04233551 98.70323181]
[108.80137634 103.41438293]
[111.11381531 109.12491608]
[110.35984802 116.30673218]
[110.35984802 131.30673218]
[118.09714508 145.10690308]
[110.35984802 157.83416748]
[110.35984802 172.83416748]
[119.95024109 188.48391724]
[110.74182892 203.35833740]
[111.14113617 218.35301208]
[113.84384918 237.54533386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[5 113]
[6 112]
[8 110]
[9 109]
[10 57]
[11 56]
[12 55]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[23 44]
[24 43]
[25 42]
[26 34]
[27 33]
[28 32]
[58 107]
[59 106]
[60 105]
[64 103]
[65 102]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[73 94]
[74 93]
[75 91]
[76 90]
[77 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
