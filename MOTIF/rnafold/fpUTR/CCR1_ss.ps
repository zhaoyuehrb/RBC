%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAACCCAGAAAGCCCCAGAAACAAAGACUUCACGGACAAAGUCCCUUGGAACCAGAGAGAAGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[50.17634583 211.94387817]
[48.38852692 226.97990417]
[41.81314087 240.61965942]
[31.16342735 251.38360596]
[17.59459496 258.10412598]
[2.57848620 260.05224609]
[-12.25606346 257.01666260]
[-25.29991341 249.32662964]
[-35.13816452 237.81629944]
[-40.70363617 223.73423767]
[-41.39262772 208.60797119]
[-37.13040161 194.07827759]
[-28.37929535 181.72122192]
[-16.08856010 172.87721252]
[-1.59140551 168.50556946]
[13.53962803 169.08052063]
[27.66323662 174.53967285]
[37.30504990 163.04899597]
[46.94686508 151.55833435]
[37.49182892 139.56799316]
[30.69987869 125.89189148]
[26.86037445 111.11270905]
[26.13689613 95.86007690]
[28.56026649 80.78382111]
[34.02724075 66.52625275]
[42.30490112 53.69478989]
[53.04059219 42.83610153]
[65.77693176 34.41281509]
[79.97130585 28.78379059]
[95.01898193 26.18884659]
[110.27886200 26.73853683]
[125.10082245 30.40944290]
[138.85339355 37.04516983]
[147.98481750 25.14487076]
[157.11624146 13.24456978]
[166.24766541 1.34427011]
[168.07859802 -16.83038902]
[184.28784180 -23.19202423]
[192.89147949 -35.47930527]
[201.49513245 -47.76658630]
[210.09877014 -60.05386734]
[214.23085022 -76.49655914]
[231.17483521 -77.07775116]
[236.42387390 -60.95684052]
[222.38606262 -51.45021820]
[213.78240967 -39.16293716]
[205.17875671 -26.87565804]
[196.57511902 -14.58837795]
[198.33959961 -2.42323995]
[191.00285339 7.94008017]
[178.14796448 10.47569180]
[169.01654053 22.37599182]
[159.88511658 34.27629089]
[150.75369263 46.17658997]
[160.38415527 57.26065826]
[167.63580322 70.02841949]
[172.22296143 83.97689819]
[173.96495056 98.55660248]
[172.79312134 113.19316101]
[168.75363159 127.30998993]
[162.00563049 140.35095215]
[152.81494141 151.80230713]
[141.54364014 161.21293640]
[128.63574219 168.21209717]
[114.59976196 172.52409363]
[99.98862457 173.97903442]
[85.37792969 172.51959229]
[71.34327698 168.20329285]
[58.43753052 161.20014954]
[48.79571915 172.69081116]
[39.15390396 184.18148804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 71]
[18 70]
[19 69]
[33 54]
[34 53]
[35 52]
[36 51]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
