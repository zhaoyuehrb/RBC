%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUGGGCCGGUGGGCGGGGGCCGGCAGGUGCUCCGCAGCCGUCUGUGCCACCCAGAGCCGGCGGGCCGCUAGGUCCCCGGAGACCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[87.60643768 223.96817017]
[80.13101959 209.37193298]
[89.26004028 195.74868774]
[89.76665497 180.75723267]
[82.46362305 167.77590942]
[90.66259766 154.24493408]
[91.16921234 139.25347900]
[91.67581940 124.26204681]
[73.82491302 111.00142670]
[71.89000702 86.61087799]
[57.25014877 83.34367371]
[42.61029434 80.07646942]
[27.97043800 76.80927277]
[16.55267143 83.09310150]
[4.32659769 79.92807007]
[-2.17744994 69.57624054]
[-16.69860649 65.81645966]
[-31.21976280 62.05666733]
[-45.74092102 58.29687881]
[-60.26207733 54.53709030]
[-74.78323364 50.77730560]
[-89.36582184 47.26330566]
[-104.00567627 43.99610519]
[-118.64553070 40.72890091]
[-134.12210083 46.15179825]
[-146.37864685 35.25643158]
[-142.80670166 19.25102234]
[-127.08075714 14.60056019]
[-115.37832642 26.08904457]
[-100.73847198 29.35624695]
[-86.09861755 32.62345123]
[-78.73381042 30.97365952]
[-71.02344513 36.25614548]
[-56.50228882 40.01593399]
[-41.98113251 43.77572250]
[-27.45997620 47.53551102]
[-12.93881893 51.29529953]
[1.58233798 55.05508804]
[18.10211182 49.40228271]
[31.23764038 62.16941452]
[45.87749863 65.43661499]
[60.51735306 68.70381927]
[75.15721130 71.97102356]
[88.14759064 64.47102356]
[92.63803864 50.15893555]
[97.12848663 35.84684753]
[101.61892700 21.53475761]
[93.04640961 8.45630360]
[94.93747711 -7.06651497]
[106.39922333 -17.70429802]
[122.01976013 -18.43420792]
[134.42355347 -8.91160679]
[137.75390625 6.36722660]
[130.43833923 20.18809319]
[115.93102264 26.02520370]
[111.44057465 40.33729172]
[106.95012665 54.64937973]
[102.45967865 68.96147156]
[118.69631958 78.63146210]
[125.07455444 94.59580231]
[140.02110291 95.86106873]
[154.96763611 97.12633514]
[169.91418457 98.39160156]
[178.93949890 95.96301270]
[185.34130859 99.96038818]
[200.23658752 101.72973633]
[215.13186646 103.49909210]
[230.02714539 105.26844025]
[244.92242432 107.03778839]
[259.77096558 100.07698059]
[273.06689453 109.67646790]
[271.13250732 125.96112823]
[255.95773315 132.17869568]
[243.15307617 121.93307495]
[228.25779724 120.16371918]
[213.36251831 118.39437103]
[198.46723938 116.62502289]
[183.57196045 114.85566711]
[168.64891052 113.33814240]
[153.70237732 112.07287598]
[138.75582886 110.80760956]
[123.80928802 109.54235077]
[120.98230743 114.75403595]
[117.03423309 119.17742157]
[112.17603302 122.57615662]
[106.66726685 124.76865387]
[106.16065216 139.76010132]
[105.65403748 154.75154114]
[112.92083740 168.80516052]
[104.75809479 181.26385498]
[104.25148773 196.25529480]
[112.43997955 210.46376038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[6 88]
[7 87]
[8 86]
[10 43]
[11 42]
[12 41]
[13 40]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 31]
[23 30]
[24 29]
[44 58]
[45 57]
[46 56]
[47 55]
[60 82]
[61 81]
[62 80]
[63 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
