%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUUGUGGCUGUGGAGCGGAAGUGGGUCUCAACCACUAUAAAUCCUCUCUGUGCCCGUCCGGAGCUGGUGAGGACAGCCUGCCAGAGUCUGGUCUCUGGACACU\
) } def
/len { sequence length } bind def

/coor [
[110.73578644 171.31343079]
[96.77732086 176.80534363]
[81.78414154 176.35287476]
[68.18224335 170.02923584]
[58.17249680 158.85762024]
[53.37452316 144.64567566]
[54.56467819 129.69296265]
[61.55037689 116.41893005]
[73.20129395 106.97138977]
[87.63483429 102.87881470]
[73.86159515 96.93762207]
[60.08835220 90.99642181]
[47.73256683 95.03604126]
[36.32915115 89.68506622]
[31.83753204 78.34892273]
[18.24291611 72.00965118]
[4.64829874 65.67037201]
[-8.94631767 59.33110046]
[-22.54093552 52.99182892]
[-38.31806183 54.17199707]
[-46.58296585 41.78084564]
[-60.17758179 35.44157028]
[-73.77220154 29.10229683]
[-87.79148102 23.76753616]
[-102.16132355 19.46548653]
[-116.53116608 15.16343880]
[-130.90101624 10.86139011]
[-145.27085876 6.55934191]
[-158.23556519 15.30292511]
[-173.78189087 13.61593819]
[-184.56932068 2.29492593]
[-185.50436401 -13.31467724]
[-176.14552307 -25.84249306]
[-160.91175842 -29.37327003]
[-146.99598694 -22.23988342]
[-140.96881104 -7.81050110]
[-126.59896088 -3.50845242]
[-112.22911835 0.79359603]
[-97.85927582 5.09564447]
[-83.48943329 9.39769268]
[-87.34596252 -5.09807205]
[-78.65801239 -17.32588959]
[-63.70050430 -18.45415497]
[-53.27657700 -7.66796970]
[-54.91497040 7.24228382]
[-67.43292236 15.50767994]
[-53.83830643 21.84695435]
[-40.24369049 28.18622780]
[-25.43894005 26.55262947]
[-16.20166016 39.39720917]
[-2.60704422 45.73648453]
[10.98757267 52.07575989]
[24.58218956 58.41503143]
[38.17680740 64.75430298]
[55.47491074 62.22230148]
[66.02954865 77.22318268]
[79.80278778 83.16437531]
[93.57603455 89.10557556]
[102.81459808 87.75305176]
[110.40052032 93.09304810]
[125.37513733 93.96522522]
[140.34976196 94.83739471]
[155.32438660 95.70957184]
[170.29901123 96.58174133]
[185.27363586 97.45391083]
[200.24824524 98.32608795]
[215.22286987 99.19825745]
[230.19749451 98.32608795]
[244.96961975 95.72135925]
[259.74172974 93.11663818]
[274.51385498 90.51191711]
[289.28594971 87.90719604]
[297.33987427 83.26980591]
[304.52514648 85.44808197]
[319.36676025 83.27410889]
[334.20840454 81.10012817]
[346.72952271 70.50989532]
[362.06787109 76.31227875]
[364.44464111 92.53827667]
[351.41479492 102.49597931]
[336.38238525 95.94174957]
[321.54074097 98.11573029]
[306.69912720 100.28971100]
[291.89068604 102.67931366]
[277.11856079 105.28403473]
[262.34646606 107.88875580]
[247.57434082 110.49347687]
[232.80221558 113.09820557]
[244.92503357 121.93208313]
[249.75221252 136.13414001]
[245.52360535 150.52575684]
[233.78111267 159.85923767]
[218.80647278 160.73123169]
[206.06001282 152.82377625]
[200.18955994 139.02023315]
[203.33570862 124.35388947]
[214.35070801 114.17288208]
[199.37608337 113.30070496]
[184.40145874 112.42853546]
[169.42683411 111.55636597]
[154.45220947 110.68418884]
[139.47758484 109.81201935]
[124.50296783 108.93984222]
[109.52834320 108.06767273]
[120.58836365 118.20059204]
[126.76091003 131.87171936]
[127.04722595 146.86898804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 58]
[11 57]
[12 56]
[15 54]
[16 53]
[17 52]
[18 51]
[19 50]
[21 48]
[22 47]
[23 46]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[60 104]
[61 103]
[62 102]
[63 101]
[64 100]
[65 99]
[66 98]
[67 97]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
