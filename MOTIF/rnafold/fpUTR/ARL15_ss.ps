%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCUGGCUUUUUCAGGAGCUGCUCGCUCGCAGCCAGAGACGCUGCUUUUUUUUUCCGGGUUCGGAGCCGUUCCGGAUGCUUUAGGCUGCCGG\
) } def
/len { sequence length } bind def

/coor [
[90.22257996 109.04965210]
[75.38836670 111.27360535]
[60.55414581 113.49756622]
[48.05365753 123.19541168]
[34.31988907 117.43061829]
[19.48567009 119.65457153]
[4.65145111 121.87852478]
[-10.18276691 124.10248566]
[-25.01698494 126.32643890]
[-39.85120392 128.55038452]
[-42.73923111 137.55790710]
[-48.46607208 145.03091431]
[-56.33860397 150.11386108]
[-65.42032623 152.23748779]
[-74.64273071 151.18249512]
[-82.93101501 147.10177612]
[-89.32933807 140.49908447]
[-93.11103058 132.16705322]
[-108.10897827 131.91903687]
[-123.10692596 131.67103577]
[-138.10487366 131.42301941]
[-150.58842468 141.49977112]
[-166.21823120 137.88197327]
[-173.00447083 123.34489441]
[-165.74130249 109.04013824]
[-150.00041199 105.94109344]
[-137.85687256 116.42507172]
[-122.85891724 116.67308044]
[-107.86096954 116.92108917]
[-92.86302185 117.16909790]
[-79.46063995 100.90339661]
[-58.17539978 99.29244995]
[-42.07515717 113.71617126]
[-27.24094009 111.49221802]
[-12.40672112 109.26826477]
[2.42749643 107.04431152]
[17.26171494 104.82035828]
[32.09593201 102.59639740]
[43.53538132 93.05762482]
[58.33019257 98.66334534]
[73.16441345 96.43939209]
[87.99862671 94.21543884]
[102.65342712 91.01593781]
[117.06473541 86.85489655]
[128.17695618 75.59304810]
[142.55107117 79.49610901]
[156.96238708 75.33506012]
[171.37368774 71.17401886]
[185.78498840 67.01297760]
[187.54074097 51.94005203]
[194.91366577 38.72328568]
[206.75306702 29.36152649]
[221.23545837 25.25693703]
[236.14549255 27.00503159]
[249.21472168 34.30849838]
[258.46679688 46.02721786]
[272.87811279 41.86617279]
[287.28939819 37.70513153]
[301.70071411 33.54408646]
[316.11203003 29.38304329]
[330.52331543 25.22200012]
[337.51980591 14.23248482]
[349.75869751 11.13749218]
[360.43276978 17.08804703]
[374.97378540 13.40576458]
[386.34469604 1.58907712]
[402.19656372 5.79036474]
[406.22232056 21.68770218]
[394.28060913 32.92727280]
[378.65606689 27.94676781]
[364.11505127 31.62905121]
[352.34042358 44.52609634]
[334.68435669 39.63330460]
[320.27307129 43.79434967]
[305.86175537 47.95539093]
[291.45043945 52.11643600]
[277.03915405 56.27747726]
[262.62783813 60.43852234]
[261.04614258 75.28532410]
[253.88131714 88.43106842]
[242.19779968 97.85764313]
[227.75643921 102.10434723]
[212.74906921 100.49417877]
[199.46591187 93.24153900]
[189.94602966 81.42427826]
[175.53472900 85.58532715]
[161.12342834 89.74636841]
[146.71211243 93.90740967]
[136.63069153 104.87163544]
[121.22577667 101.26620483]
[106.81447601 105.42724609]
[105.06650543 108.19396210]
[102.19357300 110.32560730]
[98.45370483 111.37362671]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[18 30]
[19 29]
[20 28]
[21 27]
[43 91]
[44 90]
[46 88]
[47 87]
[48 86]
[49 85]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[61 73]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
