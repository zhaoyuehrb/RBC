%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCAUCUCCAUGGUUACGCGGCGGUGGCUGCGAGCGCCCAACUGCUCCGACCGUCGCGGUGAGGGCCCCAGGACAGAAGCAGACAGACACGGCUCCUGCUGUCGAUUCCGAUCCAGCCAGA\
) } def
/len { sequence length } bind def

/coor [
[123.29533386 246.00610352]
[115.62702942 259.10424805]
[103.74252319 268.54473877]
[89.24908447 273.05081177]
[74.10684204 272.01309204]
[60.36365509 265.57186890]
[49.87818146 254.59829712]
[44.06848907 240.57646179]
[43.72029114 225.40269470]
[48.88068390 211.12913513]
[58.85176468 199.68614197]
[72.28502655 192.62130737]
[87.36373138 190.89007568]
[91.12351990 176.36891174]
[94.88330841 161.84776306]
[98.64309692 147.32659912]
[102.40287781 132.80545044]
[85.39216614 126.76107788]
[75.33235168 113.42353058]
[60.72060776 116.81424713]
[46.10886383 120.20497131]
[31.49712372 123.59568787]
[16.88538170 126.98641205]
[2.27363896 130.37713623]
[-9.33134937 141.96403503]
[-25.09600449 137.44654846]
[-28.80299950 121.47187042]
[-16.63889694 110.47338867]
[-1.11708212 115.76538849]
[13.49466038 112.37467194]
[28.10640144 108.98394775]
[42.71814346 105.59322357]
[57.32988739 102.20250702]
[71.94162750 98.81178284]
[72.74052429 93.24685669]
[74.63184357 87.95256042]
[77.53980255 83.14107513]
[81.34784698 79.00520325]
[74.74193573 65.53813934]
[68.13602448 52.07107162]
[61.53011322 38.60400391]
[46.02540970 28.76854515]
[47.75860977 11.35443401]
[40.81365967 -1.94096661]
[33.86870956 -15.23636723]
[26.92376137 -28.53176689]
[19.97881126 -41.82716751]
[4.63043165 -42.39533997]
[-8.36902905 -50.57516861]
[-15.52278137 -64.16632080]
[-14.90650177 -79.51284027]
[-6.68596697 -92.48660278]
[6.92754126 -99.59771729]
[22.27205658 -98.93333435]
[35.21998215 -90.67217255]
[42.28839111 -77.03644562]
[41.57591629 -61.69408417]
[33.27421188 -48.77211761]
[40.21916199 -35.47671890]
[47.16411209 -22.18131638]
[54.10906219 -8.88591576]
[61.05400848 4.40948439]
[72.55905914 8.37092495]
[78.42768097 19.48721504]
[74.99718475 31.99808884]
[81.60309601 45.46515656]
[88.20900726 58.93222427]
[94.81491852 72.39929199]
[107.07608795 71.82964325]
[118.81922913 76.62729645]
[127.73491669 86.22036743]
[131.91764832 99.06398773]
[130.26495361 112.88425446]
[145.22164917 114.02324677]
[160.17834473 115.16224670]
[173.17855835 103.53898621]
[190.23204041 104.83138275]
[200.90383911 117.76261139]
[215.88458252 118.52234650]
[230.86532593 119.28208160]
[239.80867004 109.11972809]
[252.79141235 106.04470825]
[264.98068237 110.96972656]
[271.97229004 121.87181091]
[286.92898560 123.01081085]
[301.88568115 124.14981079]
[316.84237671 125.28880310]
[331.79907227 126.42780304]
[340.70947266 123.93910980]
[347.11865234 127.78982544]
[362.04168701 129.30734253]
[373.12680054 118.27763367]
[388.71252441 117.00527191]
[401.43978882 126.09102631]
[405.29916382 141.24487305]
[398.46835327 155.31164551]
[384.17266846 161.64944458]
[369.16210938 157.26573181]
[360.52416992 144.23039246]
[345.60113525 142.71286011]
[330.66006470 141.38449097]
[315.70336914 140.24549866]
[300.74667358 139.10650635]
[285.78997803 137.96749878]
[270.83328247 136.82850647]
[258.61328125 148.30786133]
[241.53317261 147.43537903]
[230.10559082 134.26283264]
[215.12484741 133.50309753]
[200.14410400 132.74336243]
[191.83117676 142.67477417]
[179.11734009 146.02035522]
[166.62712097 141.32975769]
[159.03933716 130.11894226]
[144.08264160 128.97994995]
[129.12596130 127.84095001]
[116.92404175 136.56523132]
[113.16425323 151.08639526]
[109.40446472 165.60754395]
[105.64467621 180.12870789]
[101.88488770 194.64985657]
[114.22872925 203.48127747]
[122.54547882 216.17758179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[38 68]
[39 67]
[40 66]
[41 65]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[73 116]
[74 115]
[75 114]
[78 110]
[79 109]
[80 108]
[84 105]
[85 104]
[86 103]
[87 102]
[88 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
