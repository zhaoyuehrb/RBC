%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:47:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUGGACCAGCCAGCAGCCUCUAAGAGCUCCUAGACGGCCUUUGGCUUUGGCUGGCACAGGGGUGAAGGAGAGCCAGCGGCAUUGAGUAACCAGGCGA\
) } def
/len { sequence length } bind def

/coor [
[142.03295898 139.72004700]
[140.06773376 133.54623413]
[139.84416199 127.03811646]
[126.27175903 120.65142822]
[112.69934845 114.26473999]
[99.03124237 119.07400513]
[85.92073059 112.90467072]
[80.91396332 99.30767059]
[67.34155273 92.92098236]
[53.76914978 86.53428650]
[40.19674301 80.14759827]
[26.62433624 73.76091003]
[13.05193043 67.37422180]
[-0.52047509 60.98753357]
[-14.09288120 54.60084152]
[-23.37303734 53.74262619]
[-27.98646355 47.79444504]
[-41.35155869 40.98458862]
[-54.71665955 34.17473221]
[-68.08175659 27.36487389]
[-78.43336487 31.38294601]
[-89.04857635 28.98711205]
[-96.36605835 21.23482704]
[-98.07298279 10.93681526]
[-110.98410797 3.30119419]
[-123.89524078 -4.33442736]
[-133.05345154 -6.06217432]
[-137.08662415 -12.41811752]
[-149.75154114 -20.45551872]
[-162.41645813 -28.49292183]
[-177.26635742 -23.59244156]
[-191.77278137 -29.43177032]
[-199.08624268 -43.25375748]
[-195.75354004 -58.53208160]
[-183.34829712 -68.05278778]
[-167.72787476 -67.32048035]
[-156.26774597 -56.68094635]
[-154.37905884 -41.15784073]
[-141.71414185 -33.12043762]
[-129.04922485 -25.08303642]
[-116.25962067 -17.24555779]
[-103.34848785 -9.60993671]
[-90.43736267 -1.97431505]
[-71.25971222 -3.37071776]
[-61.27190018 13.99977684]
[-47.90679932 20.80963326]
[-34.54170227 27.61949158]
[-21.17660522 34.42934799]
[-7.70619154 41.02843475]
[5.86621428 47.41512680]
[19.43861961 53.80181503]
[33.01102448 60.18850327]
[46.58343124 66.57519531]
[60.15583801 72.96188354]
[73.72824097 79.34857178]
[87.30065155 85.73526001]
[100.96875763 80.92599487]
[114.07926941 87.09532928]
[119.08603668 100.69232941]
[132.65844727 107.07901764]
[146.23085022 113.46571350]
[170.59843445 107.68526459]
[186.05313110 126.57264709]
[200.78744507 129.38336182]
[215.52174377 132.19409180]
[224.64564514 120.00737762]
[238.10113525 113.01905060]
[253.19473267 112.56767273]
[266.93109131 118.68923187]
[276.60748291 130.12062073]
[280.34555054 144.55989075]
[295.07986450 147.37060547]
[310.08541870 142.35624695]
[321.13742065 152.34135437]
[335.87173462 155.15206909]
[350.60604858 157.96279907]
[367.29757690 154.99151611]
[374.77343750 170.20820618]
[362.22091675 181.60430908]
[347.79531860 172.69709778]
[333.06100464 169.88638306]
[318.32669067 167.07566833]
[304.37503052 172.29106140]
[292.26913452 162.10491943]
[277.53482056 159.29418945]
[268.74380493 171.34341431]
[255.53875732 178.40992737]
[240.51351929 179.04492188]
[226.64601135 173.06892395]
[216.70797729 161.61804199]
[212.71102905 146.92839050]
[197.97671509 144.11767578]
[183.24241638 141.30696106]
[179.51710510 146.28266907]
[174.55886841 150.08554077]
[168.72640991 152.41804504]
[162.44775391 153.08982849]
[156.18893433 152.03314209]
[150.41931152 149.30918884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[17 48]
[18 47]
[19 46]
[20 45]
[24 43]
[25 42]
[26 41]
[28 40]
[29 39]
[30 38]
[63 93]
[64 92]
[65 91]
[71 85]
[72 84]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
