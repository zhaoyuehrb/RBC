%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAAUCCAGACGCUAAGGAAAAUCCCUAAGCAGAGAUUUUCUGUUGGAUGCUAAAAGCAAGGAAUAAAAGUUGAAAAUUUGGAAA\
) } def
/len { sequence length } bind def

/coor [
[90.80941772 256.26519775]
[75.38330841 254.58752441]
[63.91208649 244.13807678]
[60.80667496 228.93492126]
[67.26116943 214.82395935]
[80.79368591 207.23115540]
[82.41546631 192.31909180]
[84.03725433 177.40702820]
[85.65904236 162.49494934]
[87.28082275 147.58288574]
[88.90261078 132.67080688]
[73.70227051 122.33749390]
[65.96421814 105.66564941]
[50.98621368 104.85356903]
[36.00821304 104.04148102]
[21.80939102 111.02030945]
[9.51967430 102.60531616]
[-5.45832682 101.79322815]
[-20.43632698 100.98114777]
[-32.03142929 111.72029114]
[-47.82070541 111.03155518]
[-58.43665695 99.32356262]
[-57.58102798 83.54245758]
[-45.76145172 73.05088043]
[-29.99026871 74.07330322]
[-19.62424469 86.00314331]
[-4.64624310 86.81523132]
[10.33175850 87.62731171]
[23.45925331 80.59040070]
[36.82029724 89.06348419]
[51.79829788 89.87556458]
[66.77629852 90.68764496]
[74.55441284 76.69643402]
[87.80948639 67.72113037]
[103.68847656 65.69359589]
[118.77355194 71.05025482]
[129.47546387 60.53983307]
[140.17739868 50.02941513]
[150.87931824 39.51899338]
[161.58123779 29.00857544]
[172.28315735 18.49815750]
[176.33798218 10.04807949]
[183.56629944 7.81018972]
[194.64070129 -2.30701208]
[205.71508789 -12.42421436]
[216.78948975 -22.54141617]
[215.19935608 -37.86387253]
[222.84707642 -51.03071594]
[236.61857605 -57.09781265]
[251.14801025 -53.93022919]
[262.22241211 -64.04743195]
[273.29678345 -74.16463470]
[284.37118530 -84.28183746]
[291.98696899 -99.42898560]
[308.65042114 -96.30397797]
[310.26043701 -79.42665100]
[294.48840332 -73.20744324]
[283.41400146 -63.09024048]
[272.33959961 -52.97303772]
[261.26519775 -42.85583496]
[263.11001587 -28.10000038]
[255.82608032 -14.93154240]
[242.02339172 -8.50199413]
[226.90669250 -11.46702194]
[215.83229065 -1.34981942]
[204.75790405 8.76738262]
[193.68350220 18.88458443]
[182.79356384 29.20007706]
[172.09164429 39.71049500]
[161.38972473 50.22091293]
[150.68780518 60.73133469]
[139.98588562 71.24175262]
[129.28396606 81.75217438]
[133.66459656 92.43500519]
[134.27554321 103.96495056]
[131.04841614 115.05091095]
[124.34456635 124.45150757]
[114.91467285 131.11408997]
[103.81468201 134.29260254]
[102.19289398 149.20466614]
[100.57110596 164.11674500]
[98.94932556 179.02880859]
[97.32753754 193.94087219]
[95.70574951 208.85295105]
[107.28965759 219.17732239]
[110.55980682 234.34590149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 84]
[7 83]
[8 82]
[9 81]
[10 80]
[11 79]
[13 32]
[14 31]
[15 30]
[17 28]
[18 27]
[19 26]
[36 73]
[37 72]
[38 71]
[39 70]
[40 69]
[41 68]
[43 67]
[44 66]
[45 65]
[46 64]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
