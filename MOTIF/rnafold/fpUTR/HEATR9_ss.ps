%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGGAAGCUUCUACCUCCAGAAGUCCAGACACCUCCCCUGUACCUCUCGUACCACAGAGGACAGGUCUCCUCCAGCUGUGCCCCCACUCCCCUAAAAGCCUUGUAUUCCCCCCUGCAGGUUCCCUCUGGCCCCACCAGGAGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[121.76511383 155.17340088]
[108.02909088 149.14665222]
[99.36212158 136.90417480]
[89.80076599 148.46188354]
[80.23940277 160.01957703]
[70.67804718 171.57727051]
[69.17723083 178.12617493]
[65.16658020 182.26963806]
[60.46620941 183.40780640]
[50.42924881 194.55497742]
[40.39229202 205.70214844]
[30.35533142 216.84931946]
[20.31837273 227.99649048]
[10.28141308 239.14366150]
[11.35873127 254.91119385]
[0.90836293 266.76721191]
[-14.86967373 267.67776489]
[-26.61454964 257.10263062]
[-27.35823822 241.31585693]
[-16.65952110 229.68344116]
[-0.86575902 229.10670471]
[9.17119980 217.95953369]
[19.20815849 206.81236267]
[29.24511909 195.66519165]
[39.28207779 184.51800537]
[49.31903458 173.37083435]
[59.12034607 162.01591492]
[68.68170166 150.45822144]
[78.24306488 138.90051270]
[87.80442810 127.34281921]
[86.94239807 119.89252472]
[73.01045990 125.45140076]
[59.45320129 131.87017822]
[46.33797455 124.59070587]
[44.61382294 109.69012451]
[55.72013092 99.60796356]
[70.38512421 102.76129913]
[85.21833801 104.99192810]
[84.35630798 97.54163361]
[72.40836334 88.47264862]
[60.46041489 79.40366364]
[48.51246262 70.33467865]
[36.56451416 61.26568985]
[27.77425957 58.54321671]
[24.46396065 51.87953568]
[12.70855808 42.56232071]
[0.95315659 33.24510193]
[-10.80224514 23.92788506]
[-22.55764771 14.61066914]
[-37.46633530 18.91306496]
[-52.04510880 13.59902668]
[-60.68812943 0.71190858]
[-60.07197952 -14.79292870]
[-50.43358231 -26.95355988]
[-35.47909927 -31.09397125]
[-20.95883179 -25.62209320]
[-12.45611954 -12.64197350]
[-13.24043083 2.85526729]
[-1.48502862 12.17248440]
[10.27037334 21.48970032]
[22.02577591 30.80691719]
[33.78117752 40.12413406]
[45.63350296 49.31774139]
[57.58145142 58.38672638]
[69.52939606 67.45571136]
[81.47734833 76.52469635]
[93.42530060 85.59368896]
[108.15960693 88.40440369]
[122.60704803 84.37060547]
[137.05448914 80.33681488]
[151.50192261 76.30301666]
[165.94935608 72.26921844]
[180.39680481 68.23542023]
[194.51000977 63.15435028]
[208.21319580 57.05330276]
[221.91636658 50.95225143]
[235.61955261 44.85120392]
[235.67857361 23.62982559]
[250.12226868 5.33000851]
[274.80578613 -0.69564927]
[280.61853027 -14.52359676]
[286.43124390 -28.35154343]
[283.84020996 -44.54470444]
[296.73724365 -54.67378998]
[311.85501099 -48.31886292]
[313.64163208 -32.01733017]
[300.25918579 -22.53881073]
[294.44647217 -8.71086311]
[288.63372803 5.11708450]
[292.97833252 11.23054314]
[304.70895386 1.88215065]
[316.43960571 -7.46624184]
[326.48645020 -18.60450363]
[340.54415894 -13.37184334]
[340.86288452 1.62476981]
[327.03997803 7.44995880]
[314.35375977 15.45370960]
[301.66757202 23.45746040]
[306.01217651 29.57091904]
[320.98257446 28.62906075]
[335.95297241 27.68720245]
[350.92337036 26.74534416]
[365.89376831 25.80348778]
[374.32687378 22.12065125]
[381.18695068 25.00200653]
[396.17376709 24.37387085]
[411.16061401 23.74573708]
[419.63516235 10.74719906]
[434.14352417 5.24383020]
[449.10693359 9.35178661]
[458.77169800 21.49147606]
[459.42147827 36.99494171]
[450.80645752 49.90077972]
[436.23925781 55.24643707]
[421.32125854 50.97639847]
[411.78875732 38.73257828]
[396.80191040 39.36071396]
[381.81506348 39.98884964]
[366.83563232 40.77388763]
[351.86523438 41.71574783]
[336.89483643 42.65760422]
[321.92443848 43.59946060]
[306.95401001 44.54132080]
[298.56512451 61.33184052]
[284.15463257 71.86821747]
[267.42263794 74.47653198]
[252.23220825 69.39665222]
[241.72061157 58.55438232]
[228.01742554 64.65543365]
[214.31423950 70.75648499]
[200.61105347 76.85753632]
[214.46363831 82.61130524]
[221.53276062 95.84110260]
[218.61669922 110.55492401]
[207.03619385 120.08863831]
[192.03622437 120.12426758]
[180.41055298 110.64566803]
[177.42463684 95.94586182]
[184.43060303 82.68286133]
[169.98315430 86.71665955]
[155.53572083 90.75045013]
[141.08828735 94.78424835]
[126.64083862 98.81804657]
[112.19340515 102.85184479]
[126.78445435 99.37317657]
[141.08195496 103.90985870]
[150.99795532 115.16477203]
[153.69725037 129.91989136]
[148.40808105 143.95645142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[68 144]
[69 143]
[70 142]
[71 141]
[72 140]
[73 139]
[74 131]
[75 130]
[76 129]
[77 128]
[80 89]
[81 88]
[82 87]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[105 118]
[106 117]
[107 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
