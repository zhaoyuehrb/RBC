%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUCCCGGCCUGCGGGCCGCUUCCCACCACAGACCCCGCCCCGCGCCCUACCCAUCACGCGUCCCCGGUCCGGCUCCGGCGCUCACCUACCCCCGGCAGGCGCCGCCCCCGUGCCGUCCCUCCCGGAAGCGCCGGCGGAGCGUCCUCGC\
) } def
/len { sequence length } bind def

/coor [
[116.69808197 134.96223450]
[113.63968658 149.64714050]
[115.26884460 164.55841064]
[101.59081268 170.71563721]
[91.50820923 159.60972595]
[98.95478821 146.58874512]
[102.01318359 131.90383911]
[105.07157898 117.21894836]
[97.72913361 115.68975067]
[88.81298065 127.75218201]
[79.89683533 139.81460571]
[70.98068237 151.87704468]
[62.06452942 163.93946838]
[60.75510406 180.28625488]
[45.82952499 187.08032227]
[32.64195251 177.33250427]
[34.75862885 161.07052612]
[50.00209808 155.02333069]
[58.91825104 142.96089172]
[67.83440399 130.89846802]
[76.75054932 118.83602905]
[85.66670227 106.77359772]
[72.87441254 114.60668945]
[58.20388031 117.73325348]
[43.32944489 115.79646301]
[29.94872665 109.01734161]
[19.58886528 98.16961670]
[13.43223095 84.49131775]
[12.18147755 69.54355621]
[15.97935486 55.03231049]
[24.39241219 42.61375809]
[36.46046829 33.70521927]
[50.80619431 29.32342720]
[65.79232025 29.96847343]
[79.70847321 35.56674194]
[90.96641541 45.47929764]
[98.28127289 58.57482910]
[100.81819916 73.35874176]
[98.28681946 88.14612579]
[106.18330383 75.39286804]
[114.07978058 62.63961029]
[121.97626495 49.88635635]
[129.87274170 37.13309860]
[127.68618774 24.38074112]
[134.57559204 13.90660954]
[146.37072754 11.05404949]
[154.52738953 -1.53438973]
[162.68405151 -14.12282944]
[170.84071350 -26.71126747]
[158.11456299 -18.77117538]
[143.64083862 -14.83273983]
[128.64610291 -15.22971916]
[114.40103912 -19.92847061]
[102.11283875 -28.53080750]
[92.82284546 -40.30773544]
[87.31832886 -54.26124191]
[86.06575775 -69.20885468]
[89.17127228 -83.88385773]
[96.37171173 -97.04264069]
[107.05687714 -107.57009125]
[120.32128143 -114.57407379]
[135.04083252 -117.46103668]
[149.96817017 -115.98634338]
[163.83828735 -110.27494812]
[175.47576904 -100.81087494]
[183.89443970 -88.39611816]
[188.38085938 -74.08277130]
[188.55482483 -59.08377838]
[184.39999390 -44.66665649]
[194.27571106 -55.95693588]
[204.15141296 -67.24721527]
[214.02711487 -78.53749847]
[217.28912354 -94.01876831]
[231.49226379 -98.50431824]
[241.36796570 -109.79459381]
[251.24368286 -121.08487701]
[247.95291138 -136.13403320]
[254.08291626 -150.07234192]
[267.09100342 -157.63893127]
[281.88323975 -156.11318970]
[291.75894165 -167.40347290]
[301.63467407 -178.69374084]
[311.51037598 -189.98402405]
[321.38607788 -201.27430725]
[331.26177979 -212.56459045]
[341.13748169 -223.85487366]
[340.26715088 -239.40736389]
[350.44335938 -250.71662903]
[365.27563477 -251.45053101]
[375.15136719 -262.74081421]
[372.57403564 -278.16455078]
[380.55838013 -291.61013794]
[395.33444214 -296.72900391]
[409.92535400 -291.10418701]
[417.44180298 -277.39151001]
[414.33471680 -262.06570435]
[402.07116699 -252.36315918]
[386.44161987 -252.86509705]
[376.56591797 -241.57481384]
[377.81231689 -226.77677917]
[367.95776367 -215.18614197]
[352.42776489 -213.97915649]
[342.55206299 -202.68888855]
[332.67636108 -191.39860535]
[322.80065918 -180.10832214]
[312.92492676 -168.81803894]
[303.04922485 -157.52775574]
[293.17352295 -146.23748779]
[296.65411377 -131.77983093]
[290.88580322 -117.88053131]
[277.88717651 -109.95027161]
[262.53396606 -111.20916748]
[252.65824890 -99.91889191]
[242.78254700 -88.62860870]
[240.22691345 -73.95488739]
[225.31739807 -68.66178894]
[215.44169617 -57.37150955]
[205.56597900 -46.08123016]
[195.69027710 -34.79095078]
[198.89927673 -20.13822556]
[212.58990479 -14.00905132]
[226.28053284 -7.87987709]
[241.72198486 -12.23198986]
[254.66761780 -2.75621819]
[255.18663025 13.27843761]
[242.88088989 23.57155991]
[227.19030762 20.22714806]
[220.15135193 5.81074810]
[206.46072388 -0.31842557]
[192.77009583 -6.44759941]
[186.95442200 -12.03672695]
[183.42915344 -18.55460167]
[175.27249146 -5.96616316]
[167.11582947 6.62227583]
[158.95916748 19.21071625]
[159.03337097 36.73324585]
[142.62600708 45.02957916]
[134.72952271 57.78283691]
[126.83303833 70.53609467]
[118.93655396 83.28935242]
[111.04007721 96.04261017]
[128.65258789 101.03411865]
[141.71794128 118.44728088]
[145.07719421 133.06628418]
[148.43644714 147.68530273]
[159.99835205 159.31520081]
[155.44692993 175.07009888]
[139.46430969 178.74269104]
[128.49203491 166.55494690]
[133.81744385 151.04455566]
[130.45819092 136.42555237]
[127.09893036 121.80654144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[39 141]
[40 140]
[41 139]
[42 138]
[43 137]
[46 135]
[47 134]
[48 133]
[49 132]
[69 119]
[70 118]
[71 117]
[72 116]
[74 114]
[75 113]
[76 112]
[80 108]
[81 107]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[89 99]
[90 98]
[120 130]
[121 129]
[122 128]
[143 152]
[144 151]
[145 150]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
