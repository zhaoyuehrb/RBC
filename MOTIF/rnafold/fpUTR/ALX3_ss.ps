%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGUCCCUCCCCCUUGGCGGGCGCUCACAGGCGGCGCGGGCAGCGCGAGCCCCGGAGCCCCGGAGGCCUGUGCGCCCUGAGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[12.43262100 182.00135803]
[-3.23455024 179.09695435]
[-16.05172539 169.72787476]
[-29.12945175 177.07450867]
[-33.49996185 192.02563477]
[-46.86729050 199.28987122]
[-61.09397888 195.03112793]
[-74.17170715 202.37776184]
[-87.24943542 209.72439575]
[-95.49154663 223.22914124]
[-110.37734222 222.71690369]
[-123.45507050 230.06353760]
[-129.15632629 245.05937195]
[-144.47853088 249.81430054]
[-157.66783142 240.68072510]
[-158.60649109 224.66514587]
[-146.57447815 214.05335999]
[-130.80171204 216.98580933]
[-117.72397614 209.63917542]
[-110.41726685 196.65991211]
[-94.59606934 196.64666748]
[-81.51834106 189.30003357]
[-68.44061279 181.95339966]
[-64.67639160 167.58795166]
[-51.51837158 159.95111084]
[-36.47608948 163.99678040]
[-23.39836121 156.65014648]
[-24.94599915 142.74732971]
[-21.02562904 129.27380371]
[-12.20589638 118.30370331]
[0.18768784 111.53913879]
[14.27187824 110.04615021]
[27.89184189 114.08683014]
[38.95083618 123.07403564]
[52.27968979 116.19351196]
[65.60854340 109.31298065]
[78.93739319 102.43245697]
[83.50566101 86.67758179]
[97.94686127 78.89704132]
[113.61700439 83.74800110]
[126.69472504 76.40136719]
[139.77246094 69.05473328]
[152.85018921 61.70809555]
[158.96665955 54.61846161]
[166.52163696 54.34227753]
[179.85049438 47.46175003]
[193.17935181 40.58122253]
[206.50819397 33.70069504]
[219.83705139 26.82016945]
[228.55064392 13.61471558]
[243.40908813 14.65198231]
[256.73794556 7.77145481]
[270.06680298 0.89092720]
[283.27212524 -6.22376251]
[296.34985352 -13.57039833]
[309.42758179 -20.91703415]
[322.50531006 -28.26367188]
[330.40148926 -42.63664627]
[346.80044556 -42.71428299]
[354.83236694 -28.41671181]
[346.23468018 -14.45204926]
[329.85195923 -15.18594456]
[316.77423096 -7.83930826]
[303.69650269 -0.49267200]
[290.61877441 6.85396433]
[286.23248291 13.01142311]
[276.94732666 14.21978092]
[263.61846924 21.10030746]
[250.28961182 27.98083496]
[242.52938843 40.69414902]
[226.71757507 40.14902496]
[213.38873291 47.02955246]
[200.05987549 53.91007996]
[186.73101807 60.79060745]
[173.40216064 67.67113495]
[160.19682312 74.78582001]
[147.11909485 82.13246155]
[134.04136658 89.47909546]
[120.96363831 96.82572937]
[118.96871948 109.47299957]
[110.05666351 118.66584015]
[97.47733307 121.05198669]
[85.81792450 115.76130676]
[72.48906708 122.64183807]
[59.16021729 129.52236938]
[45.83136368 136.40289307]
[46.43841171 152.55647278]
[40.01269531 167.32652283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 27]
[4 26]
[7 23]
[8 22]
[9 21]
[11 19]
[12 18]
[34 86]
[35 85]
[36 84]
[37 83]
[40 79]
[41 78]
[42 77]
[43 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[51 69]
[52 68]
[53 67]
[54 65]
[55 64]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
