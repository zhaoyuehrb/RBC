%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCGGAAGCAGAGCCACAGCGCGUCGCGGCAGCCCCCAAGGAAGACCAGCCUGCCUCUGGUCGGUUCCUGGCGCUCUGCGUUUCGUGACCUUGUCCAGUAGAAGGCUAUUUAAUUUUCACAACUGCUUGAAUUUUGACAUACAAG\
) } def
/len { sequence length } bind def

/coor [
[191.42050171 417.28735352]
[187.39820862 402.76434326]
[186.83418274 387.70516968]
[189.75885010 372.92196655]
[196.01445007 359.21197510]
[205.26367188 347.31454468]
[217.00767517 337.87130737]
[230.61314392 331.39147949]
[227.45295715 316.72814941]
[224.29277039 302.06484985]
[221.13258362 287.40151978]
[217.97239685 272.73818970]
[214.81221008 258.07485962]
[209.36738586 244.09794617]
[201.77566528 231.16094971]
[194.18394470 218.22396851]
[186.59220886 205.28697205]
[177.80120850 193.13302612]
[167.89109802 181.87294006]
[157.98097229 170.61285400]
[148.07084656 159.35278320]
[137.80728149 148.41389465]
[127.20068359 137.80728149]
[116.59408569 127.20068359]
[105.98748016 116.59408569]
[87.79333496 112.73620605]
[83.16675568 94.72218323]
[72.11955261 84.57530212]
[61.07234955 74.42841339]
[50.02514648 64.28152466]
[38.97794724 54.13463593]
[30.47810555 50.60029984]
[27.80686378 43.65320969]
[16.97752190 33.27412796]
[6.14818048 22.89504433]
[-9.16867733 18.93216133]
[-13.00346947 4.53967524]
[-23.83281136 -5.83940792]
[-30.25959015 -7.81546783]
[-34.10047531 -12.12201118]
[-34.88967133 -16.89626694]
[-45.26875305 -27.72560883]
[-55.64783859 -38.55495071]
[-66.02692413 -49.38429260]
[-76.40600586 -60.21363449]
[-87.01260376 -70.82023621]
[-97.84194946 -81.19931793]
[-108.67128754 -91.57839966]
[-119.50062561 -101.95748138]
[-130.32997131 -112.33657074]
[-141.15931702 -122.71565247]
[-156.68432617 -120.84264374]
[-169.75279236 -129.43037415]
[-174.19419861 -144.42398071]
[-167.91142273 -158.74392700]
[-153.87103271 -165.62878418]
[-138.70245361 -161.82772827]
[-129.56781006 -149.13549805]
[-130.78022766 -133.54499817]
[-119.95088959 -123.16590881]
[-109.12154388 -112.78682709]
[-98.29220581 -102.40774536]
[-87.46286011 -92.02865601]
[-76.63352203 -81.64957428]
[-71.85926819 -80.86038208]
[-67.55271912 -77.01949310]
[-65.57666016 -70.59272003]
[-55.19757843 -59.76337433]
[-44.81849670 -48.93403244]
[-34.43941116 -38.10469055]
[-24.06032944 -27.27535057]
[-13.45372772 -16.66874886]
[-2.62438679 -6.28966618]
[11.91788387 -3.06916308]
[16.52726364 12.06570339]
[27.35660553 22.44478607]
[38.18594742 32.82387161]
[49.12483215 43.08743286]
[60.17203522 53.23432159]
[71.21923828 63.38121033]
[82.26644135 73.52809906]
[93.31364441 83.67498779]
[103.29216003 82.66866302]
[112.20666504 87.26379395]
[117.17599487 95.97524261]
[116.59408569 105.98748016]
[127.20068359 116.59408569]
[137.80728149 127.20068359]
[148.41389465 137.80728149]
[153.59272766 139.18540955]
[157.31472778 142.14712524]
[159.21693420 145.85295105]
[159.33093262 149.44265747]
[169.24105835 160.70274353]
[179.15116882 171.96282959]
[189.06129456 183.22291565]
[188.91671753 168.22360229]
[196.77595520 155.44735718]
[210.22872925 148.81237793]
[225.14935303 150.35348511]
[236.96197510 159.59803772]
[242.04391479 173.71093750]
[238.83662415 188.36404419]
[228.32374573 199.06353760]
[213.72933960 202.52812195]
[199.52920532 197.69525146]
[207.12092590 210.63223267]
[214.71266174 223.56922913]
[222.30438232 236.50621033]
[223.05010986 221.52476501]
[229.06301880 207.78266907]
[239.56065369 197.06820679]
[253.17695618 190.77563477]
[268.14001465 189.72380066]
[282.50274658 194.04957581]
[294.39608765 203.19006348]
[302.27236938 215.95581055]
[305.10665894 230.68559265]
[302.53015137 245.46266174]
[294.87808228 258.36404419]
[283.14624023 267.71093750]
[268.86129761 272.28698730]
[253.88212585 271.49670410]
[240.15797424 265.44299316]
[229.47554016 254.91465759]
[232.63572693 269.57800293]
[235.79591370 284.24130249]
[238.95610046 298.90463257]
[242.11628723 313.56796265]
[245.27647400 328.23129272]
[260.34320068 328.53176880]
[274.93438721 332.29934692]
[288.26309204 339.33087158]
[299.61053467 349.24713135]
[308.36477661 361.51333618]
[314.05374146 375.46798706]
[316.37054443 390.35855103]
[315.19033813 405.38198853]
[310.57669067 419.72811890]
[302.77847290 432.62326050]
[292.21618652 443.37197876]
[279.45947266 451.39462280]
[265.19625854 456.25851440]
[250.19577026 457.70141602]
[235.26693726 455.64547729]
[221.21487427 450.20153809]
[208.79739380 441.66323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 130]
[9 129]
[10 128]
[11 127]
[12 126]
[13 125]
[14 109]
[15 108]
[16 107]
[17 106]
[18 96]
[19 95]
[20 94]
[21 93]
[22 89]
[23 88]
[24 87]
[25 86]
[27 82]
[28 81]
[29 80]
[30 79]
[31 78]
[33 77]
[34 76]
[35 75]
[37 73]
[38 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
