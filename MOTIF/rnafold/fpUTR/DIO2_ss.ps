%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUCCUUUUAAUUUAGUUUUUUUUCCCCUUCUCCCCCAACCCCCAACCUUCCCCCUUACCUCCCCCACCCCCUUUAUCACCACCCCCCUUUUAAAUAAGAGGGUGAAGGGGAACCAGAGCGCACAAGGGAACUGACUCAGGAGGCAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[-27.16091156 294.46560669]
[-35.92874146 306.63629150]
[-44.69657135 318.80694580]
[-34.92265701 330.28448486]
[-28.18013573 343.76788330]
[-24.86101341 358.47320557]
[-25.15825844 373.54553223]
[-29.05458832 388.10858154]
[-36.32347870 401.31564331]
[-46.54232407 412.39892578]
[-59.11701202 420.71398926]
[-73.31646729 425.77746582]
[-88.31515503 427.29498291]
[-103.24107361 425.17825317]
[-117.22644043 419.55038452]
[-129.45817566 410.73855591]
[-139.22512817 399.25509644]
[-145.95947266 385.76760864]
[-149.26968384 371.06027222]
[-148.96330261 355.98812866]
[-145.05813599 341.42745972]
[-137.78125000 328.22479248]
[-127.55567932 317.14773560]
[-114.97595215 308.84027100]
[-100.77342987 303.78540039]
[-85.77382660 302.27700806]
[-70.84919739 304.40277100]
[-56.86724091 310.03912354]
[-48.09941101 297.86843872]
[-39.33157730 285.69778442]
[-30.68674088 273.43945312]
[-22.16576958 261.09469604]
[-13.64479733 248.74993896]
[-5.12382650 236.40518188]
[3.39714479 224.06040955]
[11.91811562 211.71565247]
[8.98904133 197.15695190]
[17.45466232 184.51622009]
[32.74504089 181.54264832]
[41.26601028 169.19789124]
[39.39913177 157.20991516]
[46.44605255 146.84445190]
[59.06352997 143.99311829]
[67.83135986 131.82244873]
[58.89715958 118.92209625]
[54.90613937 103.74610901]
[56.33828354 88.11959839]
[63.02135086 73.92186737]
[74.15161133 62.86039352]
[88.39050293 56.26547241]
[104.02558899 54.93023300]
[119.17655182 59.01525497]
[127.69751740 46.67049408]
[136.21849060 34.32573700]
[144.73945618 21.98097992]
[153.26043701 9.63622189]
[144.45352173 -3.78332829]
[141.46612549 -19.51508713]
[144.72506714 -35.15356064]
[153.70428467 -48.31899643]
[167.00962830 -57.01950455]
[182.59510803 -59.95242310]
[198.07762146 -56.69926453]
[206.34828186 -69.21310425]
[214.61892700 -81.72694397]
[206.90617371 -93.60616302]
[204.32206726 -107.48770905]
[207.22564697 -121.26163483]
[215.14445496 -132.84716797]
[226.85093689 -140.50709534]
[240.55270386 -143.10818481]
[254.16691589 -140.28877258]
[262.68789673 -152.63352966]
[271.20886230 -164.97830200]
[279.72982788 -177.32305908]
[288.25079346 -189.66781616]
[296.77178955 -202.01257324]
[305.29275513 -214.35733032]
[313.81372070 -226.70208740]
[299.32467651 -222.82041931]
[284.99407959 -227.25148010]
[275.22473145 -238.63391113]
[273.01800537 -253.47070312]
[279.05194092 -267.20358276]
[291.47268677 -275.61340332]
[306.46423340 -276.11645508]
[319.42077637 -268.55816650]
[326.36169434 -255.26065063]
[325.15505981 -240.31068420]
[335.76165771 -250.91728210]
[346.36825562 -261.52389526]
[356.97488403 -272.13049316]
[367.58148193 -282.73709106]
[378.18807983 -293.34368896]
[388.79467773 -303.95028687]
[392.51412964 -319.92205811]
[408.28228760 -324.42724609]
[419.87823486 -312.83129883]
[415.37304688 -297.06314087]
[399.40127563 -293.34368896]
[388.79467773 -282.73709106]
[378.18807983 -272.13049316]
[367.58148193 -261.52389526]
[356.97488403 -250.91728210]
[346.36825562 -240.31068420]
[335.76165771 -229.70407104]
[326.15847778 -218.18110657]
[317.63751221 -205.83634949]
[309.11654663 -193.49159241]
[300.59555054 -181.14683533]
[292.07458496 -168.80207825]
[283.55361938 -156.45732117]
[275.03265381 -144.11256409]
[266.51168823 -131.76780701]
[274.67941284 -118.06396484]
[276.07205200 -102.11328125]
[270.36141968 -87.09278107]
[258.63928223 -76.01632690]
[243.20895386 -71.12989044]
[227.13278198 -73.45629120]
[218.86212158 -60.94244766]
[210.59146118 -48.42860794]
[218.89749146 -37.08094025]
[222.83061218 -23.54828644]
[221.89692688 -9.45664215]
[216.18859863 3.49353838]
[206.37519836 13.73253250]
[193.62519836 20.01161385]
[179.46688843 21.55532455]
[165.60519409 18.15719223]
[157.08421326 30.50195122]
[148.56324768 42.84671021]
[140.04228210 55.19146729]
[131.52130127 67.53622437]
[140.01336670 78.87135315]
[144.58517456 92.27652740]
[144.78880310 106.43840027]
[140.60429382 119.96948242]
[132.44165039 131.54408264]
[121.10056305 140.02818298]
[107.69218445 144.59057617]
[93.53016663 144.78427124]
[80.00202942 140.59027100]
[71.23419952 152.76094055]
[69.83535767 171.09527588]
[53.61076736 177.71887207]
[45.08979797 190.06362915]
[47.73150253 205.41481018]
[38.91416931 217.81277466]
[24.26287460 220.23663330]
[15.74190235 232.58139038]
[7.22093153 244.92614746]
[-1.30003965 257.27090454]
[-9.82101059 269.61566162]
[-18.34198189 281.96041870]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[31 155]
[32 154]
[33 153]
[34 152]
[35 151]
[36 150]
[39 147]
[40 146]
[43 144]
[44 143]
[52 134]
[53 133]
[54 132]
[55 131]
[56 130]
[63 122]
[64 121]
[65 120]
[72 114]
[73 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
