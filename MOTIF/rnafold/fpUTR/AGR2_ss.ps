%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACUUGGGGAAAGGAAGGUUCGUUUCUGAGUUAGCAACAAGUAAAUGCAGCACUAGUGGGUGGGAUUGAGGUAUGCCCUGGUGCAUAAAUAGAGACUCAGCUGUGCUGGCACACUCAGAAGCUUGGACCGCAUCCUAGCCGCCGACUCACACAAGGCAGGUGGGUGAGGAAAUCCAGAGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[250.45188904 402.87002563]
[236.05111694 394.83041382]
[225.25071716 382.33181763]
[219.36601257 366.86953735]
[219.12284851 350.30145264]
[224.56803894 334.62469482]
[235.06170654 321.73495483]
[227.20286560 308.95846558]
[219.34402466 296.18197632]
[211.48518372 283.40548706]
[203.51986694 270.69509888]
[195.44863892 258.05172729]
[180.89405823 255.10221863]
[172.52856445 242.39500427]
[175.72096252 227.14881897]
[167.64971924 214.50543213]
[159.57849121 201.86204529]
[151.50724792 189.21867371]
[133.74383545 181.60928345]
[133.10249329 161.47406006]
[124.61328125 149.10743713]
[116.12407684 136.74081421]
[107.63487244 124.37419128]
[99.14566040 112.00756836]
[90.45099640 99.78452301]
[81.55329895 87.70847321]
[72.65560913 75.63242340]
[63.75790787 63.55637360]
[54.86021423 51.48032379]
[45.96251678 39.40427017]
[37.06481934 27.32822037]
[28.16712379 15.25217056]
[19.26942825 3.17611957]
[10.37173271 -8.89993095]
[-5.00309038 -11.40044785]
[-13.85459137 -23.77403259]
[-11.37598038 -38.41616440]
[-20.27367783 -50.49221802]
[-19.56677055 -35.50888443]
[-25.34155273 -21.66504288]
[-36.48642349 -11.62552834]
[-50.85608292 -7.32286501]
[-65.68447876 -9.58528233]
[-78.11727142 -17.97728348]
[-85.76124573 -30.88347244]
[-87.14498901 -45.81951141]
[-82.00214386 -59.91032791]
[-71.32266998 -70.44355774]
[-57.16228104 -75.39162445]
[-42.24673843 -73.80207825]
[-29.44824028 -65.98191833]
[-35.76226044 -79.58827972]
[-42.07628250 -93.19464111]
[-48.39030457 -106.80100250]
[-54.70432663 -120.40737152]
[-61.01834488 -134.01373291]
[-76.10870361 -137.11006165]
[-86.36247253 -148.36677551]
[-88.00232697 -163.32588196]
[-80.60771942 -176.22773743]
[-86.92173767 -189.83410645]
[-93.23576355 -203.44046021]
[-99.54978180 -217.04682922]
[-105.86380768 -230.65319824]
[-122.49557495 -233.67959595]
[-133.93811035 -245.89665222]
[-135.83226013 -262.36077881]
[-127.62908173 -276.56945801]
[-134.16958618 -290.06842041]
[-140.71008301 -303.56738281]
[-155.85006714 -306.41110229]
[-166.29049683 -317.49493408]
[-168.18009949 -332.42453003]
[-161.00210571 -345.44815063]
[-167.54260254 -358.94711304]
[-174.08311462 -372.44607544]
[-180.62361145 -385.94503784]
[-195.63377380 -390.89181519]
[-202.67495728 -405.04092407]
[-197.56974792 -419.99792480]
[-183.34698486 -426.88912964]
[-168.44477844 -421.62606812]
[-161.70433044 -407.33126831]
[-167.12464905 -392.48553467]
[-160.58415222 -378.98657227]
[-154.04365540 -365.48760986]
[-147.50315857 -351.98864746]
[-132.83366394 -349.55053711]
[-122.28799438 -338.81497192]
[-120.05987549 -323.75213623]
[-127.21112823 -310.10787964]
[-120.67062378 -296.60891724]
[-114.13012695 -283.10995483]
[-100.81593323 -281.98385620]
[-89.71057892 -274.36068726]
[-83.77954102 -262.14614868]
[-84.67057037 -248.48852539]
[-92.25743866 -236.96720886]
[-85.94342041 -223.36085510]
[-79.62940216 -209.75448608]
[-73.31537628 -196.14811707]
[-67.00135803 -182.54176331]
[-52.37466431 -179.85887146]
[-42.00984573 -168.94857788]
[-40.03374100 -153.85061646]
[-47.41198349 -140.32775879]
[-41.09796143 -126.72138977]
[-34.78393936 -113.11502838]
[-28.46991920 -99.50866699]
[-22.15589714 -85.90229797]
[-15.84187603 -72.29593658]
[-8.19762611 -59.38991165]
[0.70007008 -47.31386185]
[15.41916084 -45.34308243]
[24.61471748 -33.22299957]
[22.44778252 -17.79762650]
[31.34547997 -5.72157669]
[40.24317551 6.35447407]
[49.14087296 18.43052483]
[58.03856659 30.50657654]
[66.93626404 42.58262634]
[75.83396149 54.65867615]
[84.73165894 66.73472595]
[93.62934875 78.81077576]
[102.52704620 90.88683319]
[107.42130280 92.83258820]
[110.86859131 97.38979340]
[111.51228333 103.51836395]
[120.00149536 115.88498688]
[128.49069214 128.25161743]
[136.97990417 140.61824036]
[145.46911621 152.98486328]
[156.28448486 154.35678101]
[164.38539124 161.31990051]
[167.24572754 171.38369751]
[164.15063477 181.14743042]
[172.22187805 193.79081726]
[180.29310608 206.43420410]
[188.36433411 219.07759094]
[203.53781128 222.59944153]
[211.54309082 235.53660583]
[208.09202576 249.98049927]
[216.16325378 262.62387085]
[223.43354797 268.18743896]
[224.26167297 275.54666138]
[232.12051392 288.32315063]
[239.97935486 301.09963989]
[247.83819580 313.87612915]
[261.06427002 310.54071045]
[274.67733765 311.06964111]
[287.57281494 315.41052246]
[298.70709229 323.20199585]
[307.18188477 333.80389404]
[312.31671143 346.34979248]
[313.70358276 359.81774902]
[311.23937988 373.11370850]
[305.13348389 385.16015625]
[295.88989258 394.98364258]
[303.31741333 408.01562500]
[310.74493408 421.04757690]
[318.17245483 434.07952881]
[325.59997559 447.11148071]
[343.44064331 456.46826172]
[342.54312134 475.77206421]
[350.40194702 488.54855347]
[358.26080322 501.32504272]
[366.11962891 514.10150146]
[373.97845459 526.87799072]
[389.40838623 530.29748535]
[397.83047485 543.67077637]
[394.24804688 559.06365967]
[380.78649902 567.34387207]
[365.43231201 563.59893799]
[357.29489136 550.05059814]
[361.20196533 534.73687744]
[353.34313965 521.96038818]
[345.48431396 509.18386841]
[337.62545776 496.40737915]
[329.76663208 483.63088989]
[319.63037109 482.15893555]
[311.82086182 475.19668579]
[309.08679199 464.87030029]
[312.56802368 454.53900146]
[305.14050293 441.50704956]
[297.71298218 428.47509766]
[290.28546143 415.44314575]
[282.85794067 402.41119385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 148]
[8 147]
[9 146]
[10 145]
[11 143]
[12 142]
[15 139]
[16 138]
[17 137]
[18 136]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[31 119]
[32 118]
[33 117]
[34 116]
[37 113]
[38 112]
[51 111]
[52 110]
[53 109]
[54 108]
[55 107]
[56 106]
[60 102]
[61 101]
[62 100]
[63 99]
[64 98]
[68 93]
[69 92]
[70 91]
[74 87]
[75 86]
[76 85]
[77 84]
[158 187]
[159 186]
[160 185]
[161 184]
[162 183]
[164 179]
[165 178]
[166 177]
[167 176]
[168 175]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
