%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUCCGGCUGCAGCCGCGGGAGGUCCGGACACUGGCGGCCAUGGAACUCACCGGUAAUAGAGGACACAUCUCUUAACUGGGUUGCUCUAAGAACUGAUGUCUAAACCGUCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[35.18339539 320.95538330]
[31.42717171 325.84271240]
[26.53209877 329.53466797]
[20.86160851 331.77896118]
[14.83096695 332.42999268]
[8.87685871 331.45816040]
[0.19092463 343.68740845]
[-8.49500942 355.91665649]
[-17.18094444 368.14590454]
[-18.18032074 384.51458740]
[-32.97445297 391.59030151]
[-46.34440231 382.09417725]
[-44.53631592 365.79501343]
[-29.41019249 359.45999146]
[-20.72425842 347.23074341]
[-12.03832531 335.00149536]
[-3.35239077 322.77224731]
[-4.99517250 298.47201538]
[16.87571526 286.34024048]
[22.75521469 272.54052734]
[28.63471222 258.74084473]
[34.51421356 244.94114685]
[40.20791626 231.06376648]
[45.71480179 217.11120605]
[51.22169113 203.15863037]
[45.07453537 189.64019775]
[50.46054077 175.41186523]
[64.68159485 169.05581665]
[70.18848419 155.10324097]
[75.69536591 141.15068054]
[81.20225525 127.19810486]
[86.70913696 113.24553680]
[82.09482574 105.61211395]
[81.52648926 96.71053314]
[85.13256836 88.55226898]
[92.09819794 82.98081207]
[100.84938049 81.25514221]
[107.46112061 67.79093170]
[114.07286835 54.32672882]
[105.97602844 39.54759979]
[108.21328735 23.01187134]
[119.71608734 11.15311813]
[135.84976196 8.46746922]
[142.09762573 -5.16939545]
[148.34550476 -18.80625916]
[154.59336853 -32.44312286]
[144.93795776 -44.21318436]
[141.36489868 -58.94818115]
[144.53083801 -73.71290588]
[153.75546265 -85.59008026]
[167.16680908 -92.25679016]
[182.08097839 -92.43869781]
[188.32885742 -106.07556152]
[194.57673645 -119.71242523]
[200.82460022 -133.34928894]
[207.07247925 -146.98616028]
[200.93688965 -159.06417847]
[202.89149475 -172.27204895]
[211.99206543 -181.77302551]
[224.71987915 -184.22021484]
[231.33161926 -197.68441772]
[237.94335938 -211.14862061]
[244.55509949 -224.61283875]
[251.16685486 -238.07704163]
[247.36613464 -253.66337585]
[257.29589844 -266.26416016]
[273.33886719 -266.21313477]
[283.18826294 -253.54942322]
[279.28845215 -237.98757935]
[264.63104248 -231.46530151]
[258.01931763 -218.00108337]
[251.40756226 -204.53688049]
[244.79582214 -191.07267761]
[238.18408203 -177.60847473]
[244.30647278 -162.00823975]
[237.16889954 -146.47502136]
[220.70935059 -140.73828125]
[214.46147156 -127.10141754]
[208.21359253 -113.46455383]
[201.96572876 -99.82769012]
[195.71784973 -86.19082642]
[205.31924438 -74.77685547]
[209.02803040 -60.26636887]
[206.05671692 -45.52417374]
[196.94212341 -33.48489380]
[183.44937134 -26.56877327]
[168.23023987 -26.19525146]
[161.98236084 -12.55838585]
[155.73449707 1.07847834]
[149.48661804 14.71534252]
[157.11727905 25.75816536]
[158.27114868 39.24032593]
[152.53657532 51.61641693]
[141.32762146 59.57813644]
[127.53707123 60.93847275]
[120.92533112 74.40267944]
[114.31358337 87.86688232]
[117.16228485 107.58599091]
[100.66171265 118.75241852]
[95.15482330 132.70498657]
[89.64794159 146.65756226]
[84.14105225 160.61013794]
[78.63417053 174.56269836]
[84.68070984 188.91809082]
[78.89718628 202.98953247]
[65.17426300 208.66551208]
[59.66737366 222.61808777]
[54.16048813 236.57066345]
[53.90341187 245.83555603]
[48.31390381 250.82064819]
[42.43440628 264.62033081]
[36.55490494 278.42004395]
[30.67540741 292.21972656]
[34.70993042 297.09472656]
[37.28845978 302.83758545]
[38.24100494 309.02709961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[19 113]
[20 112]
[21 111]
[22 110]
[23 108]
[24 107]
[25 106]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[37 97]
[38 96]
[39 95]
[43 90]
[44 89]
[45 88]
[46 87]
[52 81]
[53 80]
[54 79]
[55 78]
[56 77]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
