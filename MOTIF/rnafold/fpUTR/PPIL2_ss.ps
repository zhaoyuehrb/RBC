%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCCGGGGCGCGCCGCGGAACCCGGAAGUGGUCACGGAACUCGGCUGCGGCUCCAUGGUCUGAGUUGUCAGCCGUUGUUUUUUCGUGCUCGCUAGUCGCCGCCGCCGCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[73.94364929 398.03329468]
[58.47689056 396.78466797]
[46.71987534 386.65786743]
[43.19342041 371.54681396]
[49.25351334 357.26205444]
[62.56992722 349.29632568]
[63.77692413 334.34497070]
[64.98392487 319.39361572]
[66.19092560 304.44226074]
[67.39791870 289.49087524]
[68.60491943 274.53952026]
[69.81192017 259.58816528]
[67.17934418 252.57650757]
[71.25732422 244.25338745]
[72.86530304 229.33981323]
[66.53693390 215.85646057]
[75.70900726 202.96522522]
[77.31698608 188.05166626]
[78.92496490 173.13810730]
[80.53293610 158.22453308]
[78.74454498 155.90544128]
[77.83020782 152.69279480]
[78.15302277 148.94039917]
[79.93170929 145.13314819]
[83.19741821 141.82934570]
[86.39484406 127.17408752]
[89.59226227 112.51882935]
[84.04889679 96.74356079]
[95.33206177 84.40345001]
[98.13486481 69.66763306]
[100.93767548 54.93181610]
[103.74047852 40.19600296]
[106.54328918 25.46018600]
[101.52087402 10.45732117]
[111.50003815 -0.60005057]
[114.30284882 -15.33586693]
[117.10565186 -30.07168198]
[119.90846252 -44.80749893]
[122.71126556 -59.54331589]
[125.51407623 -74.27912903]
[127.72125244 -89.11585236]
[129.32923889 -104.02941895]
[121.47127533 -120.61555481]
[132.21824646 -134.41801453]
[133.42524719 -149.36936951]
[134.63224792 -164.32072449]
[135.83924866 -179.27209473]
[137.04624939 -194.22344971]
[138.25325012 -209.17480469]
[139.25941467 -224.14102173]
[140.06455994 -239.11940002]
[140.86970520 -254.09777832]
[141.67485046 -269.07614136]
[142.48001099 -284.05453491]
[143.28515625 -299.03289795]
[131.15481567 -308.70938110]
[127.06131744 -323.67678833]
[132.57870483 -338.17980957]
[145.58541870 -346.64178467]
[161.08012390 -345.80886841]
[173.10478210 -336.00137329]
[177.03567505 -320.99044800]
[171.36128235 -306.54812622]
[158.26353455 -298.22775269]
[157.45838928 -283.24938965]
[156.65322876 -268.27099609]
[155.84808350 -253.29263306]
[155.04293823 -238.31425476]
[154.23777771 -223.33587646]
[157.05766296 -216.39741516]
[153.20460510 -207.96780396]
[151.99760437 -193.01644897]
[150.79060364 -178.06509399]
[149.58360291 -163.11373901]
[148.37661743 -148.16236877]
[147.16961670 -133.21101379]
[154.79899597 -123.71873474]
[153.83152771 -111.17511749]
[144.24279785 -102.42144012]
[142.63482666 -87.50787354]
[144.66639709 -84.47510529]
[145.25326538 -80.26991272]
[143.84382629 -75.61943054]
[140.24989319 -71.47632599]
[137.44708252 -56.74050903]
[134.64427185 -42.00469208]
[131.84147644 -27.26887512]
[129.03866577 -12.53306007]
[126.23585510 2.20275617]
[131.45874023 16.15161514]
[121.27910614 28.26299286]
[118.47629547 42.99880981]
[115.67349243 57.73462296]
[112.87068176 72.47044373]
[110.06787872 87.20625305]
[116.05334473 97.29222107]
[113.70738983 108.78347778]
[104.24752045 115.71625519]
[101.05009460 130.37150574]
[97.85267639 145.02676392]
[95.44650269 159.83251953]
[93.83852386 174.74607849]
[92.23055267 189.65963745]
[90.62257385 204.57321167]
[96.83592987 219.12329102]
[87.77886963 230.94779968]
[86.17089081 245.86135864]
[84.76327515 260.79516602]
[83.55628204 275.74652100]
[82.34928131 290.69787598]
[81.14228058 305.64923096]
[79.93527985 320.60061646]
[78.72828674 335.55197144]
[77.52128601 350.50332642]
[89.38746643 360.50198364]
[93.07764435 375.57388306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 114]
[7 113]
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[14 107]
[15 106]
[17 104]
[18 103]
[19 102]
[20 101]
[25 100]
[26 99]
[27 98]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[41 80]
[42 79]
[44 76]
[45 75]
[46 74]
[47 73]
[48 72]
[49 71]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
