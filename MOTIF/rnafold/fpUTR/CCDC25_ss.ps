%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGCACGGAGGAGUUCCGGGGGCCAGGCGGCCGCCGCGAGUCUGGUAUCCUGAGCUUCGUGAGUUGAGCGCUGCUGCUCCGCGGUGGAGUCACCGCACCGCUCCCGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[14.50756264 492.72824097]
[11.75358582 507.63433838]
[4.06483698 520.69799805]
[-7.63022947 530.34173584]
[-21.91937828 535.40093994]
[-37.07712555 535.26483154]
[-51.27309799 529.94970703]
[-62.79306412 520.09753418]
[-70.24592590 506.89785767]
[-72.73172760 491.94473267]
[-69.95028687 477.04373169]
[-62.23747635 463.99429321]
[-50.52465820 454.37213135]
[-36.22620773 449.33923340]
[-21.06873894 449.50329590]
[-15.80917549 435.45562744]
[-10.54961205 421.40795898]
[-5.29004908 407.36029053]
[-0.03048562 393.31262207]
[5.22907782 379.26495361]
[10.48864079 365.21728516]
[15.74820423 351.16961670]
[21.00776863 337.12194824]
[26.26733017 323.07427979]
[31.52689362 309.02661133]
[23.17128372 296.72531128]
[23.66724205 281.68478394]
[33.03403091 269.67990112]
[47.84479141 265.44345093]
[53.10435486 251.39578247]
[58.36391830 237.34811401]
[63.62348175 223.30044556]
[67.90352631 208.92402649]
[71.18373871 194.28707886]
[74.46395874 179.65013123]
[77.74417114 165.01318359]
[81.02439117 150.37625122]
[84.30460358 135.73930359]
[87.58482361 121.10235596]
[90.86503601 106.46540833]
[93.94326782 91.78465271]
[96.81893158 77.06288147]
[99.69458771 62.34111023]
[97.85099792 55.75752640]
[99.46564484 50.12573624]
[103.15557098 46.89754105]
[106.83785248 32.35653687]
[110.52013397 17.81553459]
[114.20241547 3.27453017]
[104.97636414 -11.50981426]
[109.14781189 -28.08391953]
[123.69035339 -36.40541840]
[126.97057343 -51.04236221]
[122.43837738 -66.20052338]
[132.77162170 -76.92774963]
[136.05183411 -91.56468964]
[139.33206177 -106.20163727]
[142.61227417 -120.83858490]
[145.89248657 -135.47552490]
[143.45620728 -152.25352478]
[158.90408325 -159.23919678]
[169.89314270 -146.32885742]
[160.52943420 -132.19531250]
[157.24922180 -117.55836487]
[153.96899414 -102.92142487]
[150.68878174 -88.28447723]
[147.40856934 -73.64752960]
[152.17538452 -59.53630447]
[141.60751343 -47.76214600]
[138.32730103 -33.12520218]
[146.71772766 -23.24075699]
[147.85700989 -10.12932968]
[141.09960938 1.39140737]
[128.74342346 6.95681238]
[125.06114197 21.49781609]
[121.37886047 36.03882217]
[117.69657898 50.57982254]
[114.41635895 65.21676636]
[111.54070282 79.93854523]
[108.66503906 94.66031647]
[110.34658051 102.66713715]
[105.50198364 109.74562073]
[102.22177124 124.38256836]
[98.94155121 139.01951599]
[95.66133881 153.65646362]
[92.38111877 168.29341125]
[89.10089874 182.93035889]
[85.82068634 197.56730652]
[82.54046631 212.20423889]
[96.69742584 207.24636841]
[109.54808044 214.98333740]
[111.79051971 229.81477356]
[101.80155945 241.00497437]
[86.81168365 240.45394897]
[77.67115021 228.55999756]
[72.41158295 242.60766602]
[67.15202332 256.65533447]
[61.89245987 270.70300293]
[70.27904510 283.62475586]
[69.45838928 298.82934570]
[59.95448303 310.49725342]
[45.57456207 314.28616333]
[40.31499863 328.33383179]
[35.05543518 342.38150024]
[29.79587364 356.42916870]
[24.53631020 370.47683716]
[19.27674675 384.52450562]
[14.01718330 398.57217407]
[8.75761986 412.61984253]
[3.49805641 426.66751099]
[-1.76150703 440.71517944]
[-7.02107048 454.76284790]
[4.51703215 464.59384155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 112]
[16 111]
[17 110]
[18 109]
[19 108]
[20 107]
[21 106]
[22 105]
[23 104]
[24 103]
[25 102]
[29 98]
[30 97]
[31 96]
[32 95]
[33 89]
[34 88]
[35 87]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 80]
[42 79]
[43 78]
[46 77]
[47 76]
[48 75]
[49 74]
[52 70]
[53 69]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
