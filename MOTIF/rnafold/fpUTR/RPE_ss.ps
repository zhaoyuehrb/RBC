%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGAGAAGGGGCGGGGCCAAAACUGCGCGCCCAAUCGGGGUGACGCUCUAGCCUUGCCGGGGACUCGUGGGUAACUUGCUUUUGGGAGCCAGCGGU\
) } def
/len { sequence length } bind def

/coor [
[75.18854523 192.46205139]
[60.67628860 188.66807556]
[48.11119461 180.47549438]
[38.78546906 168.72683716]
[33.65817642 154.63035583]
[33.25660706 139.63572693]
[37.62206268 125.28502655]
[46.30559921 113.05406952]
[58.41418839 104.20070648]
[72.70258331 99.63542175]
[87.70070648 99.82759857]
[75.97323608 90.47525024]
[64.24576569 81.12290192]
[52.51829147 71.77055359]
[40.79081726 62.41820908]
[29.06334686 53.06586075]
[17.33587456 43.71351242]
[5.60840225 34.36116791]
[-5.20679092 40.27853394]
[-17.36199379 42.11466217]
[-29.37375069 39.66983795]
[-39.78447342 33.26531219]
[-47.33931351 23.70134163]
[-51.13739777 12.15723896]
[-50.73920441 0.04599827]
[-46.21728897 -11.15866470]
[-56.99253082 -21.59390259]
[-67.76776886 -32.02914047]
[-78.70887756 -42.29033661]
[-89.81304932 -52.37484741]
[-100.91722107 -62.45936203]
[-112.02139282 -72.54387665]
[-123.12555695 -82.62838745]
[-139.15469360 -83.29655457]
[-148.50961304 -96.32978058]
[-144.01403809 -111.73007965]
[-129.11657715 -117.68367004]
[-115.24529266 -109.62345886]
[-113.04104614 -93.73255920]
[-101.93687439 -83.64804840]
[-90.83270264 -73.56352997]
[-79.72853851 -63.47901917]
[-68.62436676 -53.39450455]
[-61.42216492 -51.18693542]
[-57.33253098 -42.80438232]
[-46.55728912 -32.36914444]
[-35.78205109 -21.93390465]
[-18.83936691 -27.74004173]
[-1.17880476 -24.29718208]
[12.46781349 -12.44326591]
[18.40200233 4.71894550]
[14.96074963 22.63369560]
[26.68822098 31.98604202]
[38.41569519 41.33839035]
[50.14316559 50.69073486]
[61.87063980 60.04308319]
[73.59811401 69.39543152]
[85.32558441 78.74777985]
[97.05305481 88.10012054]
[104.89779663 88.80569458]
[110.66899109 94.12749481]
[125.47671509 96.52149200]
[138.20590210 87.54343414]
[153.18894958 90.18222809]
[161.66970825 102.37289429]
[176.47743225 104.76689148]
[191.28515625 107.16088867]
[206.09288025 109.55489349]
[220.95103455 104.11927032]
[232.28028870 113.78866577]
[247.08801270 116.18266296]
[261.89575195 118.57666016]
[276.70346069 120.97066498]
[291.51119995 123.36466217]
[308.11230469 119.92375183]
[316.01437378 134.92352295]
[303.78829956 146.66914368]
[289.11718750 138.17239380]
[274.30947876 135.77839661]
[259.50173950 133.38438416]
[244.69401550 130.99038696]
[229.88629150 128.59638977]
[216.08729553 134.20324707]
[203.69888306 124.36261749]
[188.89115906 121.96862030]
[174.08343506 119.57462311]
[159.27571106 117.18061829]
[147.38560486 126.07788086]
[132.33436584 123.86096954]
[123.08271790 111.32922363]
[108.27499390 108.93521881]
[118.50086975 119.90934753]
[124.72719574 133.55606079]
[126.31365967 148.47192383]
[123.09709167 163.12300110]
[115.40830231 176.00253296]
[104.03800201 185.78599548]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 59]
[12 58]
[13 57]
[14 56]
[15 55]
[16 54]
[17 53]
[18 52]
[26 47]
[27 46]
[28 45]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[61 91]
[62 90]
[65 87]
[66 86]
[67 85]
[68 84]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
