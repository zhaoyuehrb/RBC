%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCUCCGGUCGGAGACAAUCGCGCUGAGCGGGCGCCGCAGCGGGAGCGGGAGCCGGAGCUGCGAGGCGCGGCGCAGAGCUGGGGCUGCGCGGGGCCGGGCGAGCGGGACCAGGCGGGAGCCAUGGACCGCUAGGGCCCGGCCUAGCCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[75.81233215 118.62590027]
[62.04358292 124.57749939]
[48.27483368 130.52909851]
[34.50608444 136.48071289]
[20.73733521 142.43231201]
[6.96858692 148.38391113]
[-6.80016184 154.33551025]
[-16.39761353 166.91325378]
[-31.15014267 164.86090088]
[-44.91889191 170.81250000]
[-30.58268738 175.22534180]
[-20.79737854 186.59405518]
[-18.56791496 201.42745972]
[-24.57893562 215.17036438]
[-36.98453140 223.60250854]
[-51.97509766 224.13449097]
[-64.94720459 216.60293579]
[-71.91728973 203.32069397]
[-70.74491882 188.36657715]
[-61.78903961 176.33201599]
[-76.41295624 179.66983032]
[-88.14542389 190.28396606]
[-102.27530670 185.57273865]
[-116.89922333 188.91055298]
[-131.52314758 192.24836731]
[-146.14706421 195.58618164]
[-151.32023621 199.85807800]
[-157.01705933 200.70231628]
[-161.43528748 198.74896240]
[-176.18318176 201.48751831]
[-190.93107605 204.22605896]
[-205.67897034 206.96461487]
[-220.14801025 215.80107117]
[-232.64457703 204.34365845]
[-225.09431458 189.16374207]
[-208.41751099 192.21672058]
[-193.66963196 189.47816467]
[-178.92173767 186.73962402]
[-164.17384338 184.00106812]
[-149.48487854 180.96226501]
[-134.86096191 177.62445068]
[-120.23703766 174.28663635]
[-105.61312103 170.94882202]
[-94.92665863 160.57342529]
[-79.75077057 165.04591370]
[-65.12685394 161.70809937]
[-50.87049484 157.04374695]
[-37.10174561 151.09214783]
[-28.48912621 138.94010925]
[-12.75176334 140.56675720]
[1.01698554 134.61515808]
[14.78573418 128.66355896]
[28.55448341 122.71195984]
[42.32323074 116.76035309]
[56.09197998 110.80875397]
[69.86073303 104.85715485]
[69.99131012 94.39230347]
[73.64868927 84.58650208]
[80.40301514 76.59218597]
[73.89476013 63.07765198]
[67.38650513 49.56311798]
[60.87825012 36.04858398]
[54.36999512 22.53405190]
[47.86173630 9.01951885]
[35.54183197 -2.62763786]
[43.32332230 -17.69033051]
[59.95149231 -14.38271046]
[61.37627029 2.51126266]
[67.88452911 16.02579498]
[74.39278412 29.54032898]
[80.90103912 43.05486298]
[87.40929413 56.56939316]
[93.91754913 70.08393097]
[101.62569427 69.51517487]
[109.22962952 70.90048981]
[116.24195099 74.15108490]
[122.21316528 79.05858612]
[126.76052094 85.30842590]
[129.59252930 92.50000000]
[144.59252930 92.50000000]
[153.23428345 89.35544586]
[159.89772034 92.65612030]
[174.89460754 92.96209717]
[189.89147949 93.26807404]
[204.88836670 93.57405090]
[219.88523865 93.88002777]
[234.88211060 94.18600464]
[226.82629395 81.53279877]
[231.49783325 67.27879333]
[245.48033142 61.84832001]
[258.54800415 69.21282959]
[261.14410400 83.98646545]
[251.36933899 95.36519623]
[266.25711060 97.19660950]
[281.14489746 99.02803040]
[296.03265381 100.85944366]
[310.92044067 102.69085693]
[325.80822754 104.52227020]
[340.69601440 106.35368347]
[355.58377075 108.18510437]
[370.47155762 110.01651764]
[388.59317017 101.27731323]
[403.58007812 113.43966675]
[418.53018188 114.66230774]
[433.48025513 115.88494873]
[448.43035889 117.10758972]
[463.38043213 118.33022308]
[473.73724365 110.57678223]
[486.19879150 111.93979645]
[494.11010742 121.14038849]
[509.03216553 122.66773224]
[523.95416260 124.19507599]
[538.89105225 125.57014465]
[553.84112549 126.79278564]
[568.79119873 128.01542664]
[583.37487793 120.51546478]
[597.01342773 129.62156677]
[595.67675781 145.96614075]
[580.73986816 152.73530579]
[567.56854248 142.96551514]
[552.61846924 141.74287415]
[537.66839600 140.52023315]
[530.70349121 143.12525940]
[522.42681885 139.11711121]
[507.50482178 137.58976746]
[492.58276367 136.06242371]
[477.01651001 144.10964966]
[462.15780640 133.28031921]
[447.20773315 132.05767822]
[432.25762939 130.83503723]
[417.30752563 129.61239624]
[402.35745239 128.38975525]
[395.13464355 135.72131348]
[384.84667969 137.88041687]
[374.87631226 133.90838623]
[368.64013672 124.90429688]
[353.75234985 123.07287598]
[338.86459351 121.24146271]
[323.97680664 119.41004944]
[309.08901978 117.57863617]
[294.20126343 115.74722290]
[279.31347656 113.91580200]
[264.42568970 112.08438873]
[249.53791809 110.25297546]
[234.57614136 109.18288422]
[219.57925415 108.87690735]
[204.58238220 108.57093048]
[189.58551025 108.26495361]
[174.58862305 107.95897675]
[159.59175110 107.65299988]
[144.59252930 107.50000000]
[129.59252930 107.50000000]
[116.64988708 125.58805847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 50]
[9 48]
[10 47]
[20 46]
[21 45]
[23 43]
[24 42]
[25 41]
[26 40]
[29 39]
[30 38]
[31 37]
[32 36]
[59 73]
[60 72]
[61 71]
[62 70]
[63 69]
[64 68]
[79 152]
[80 151]
[82 150]
[83 149]
[84 148]
[85 147]
[86 146]
[87 145]
[93 144]
[94 143]
[95 142]
[96 141]
[97 140]
[98 139]
[99 138]
[100 137]
[101 136]
[103 132]
[104 131]
[105 130]
[106 129]
[107 128]
[110 126]
[111 125]
[112 124]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
