%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:39 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MKS1)
} def

/sequence { (\
CCGAUCCAGCGUCUCCGUUGCCAGGAAAACAGAGCGGCGCGCUUUCCGGCGCAGUCGCGGCGCGUCGCAGCUGUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 25 0.940622185 ubox
2 11 0.041232098 ubox
2 20 0.004378498 ubox
2 24 0.944612417 ubox
2 67 0.009531697 ubox
3 10 0.041674537 ubox
3 13 0.053638574 ubox
3 19 0.004499729 ubox
3 66 0.009909996 ubox
3 75 0.039359410 ubox
4 12 0.053545374 ubox
4 18 0.004343942 ubox
4 65 0.009872880 ubox
4 74 0.037657191 ubox
5 11 0.051939194 ubox
5 17 0.004189409 ubox
5 25 0.024517261 ubox
5 26 0.193808717 ubox
5 64 0.009737630 ubox
5 73 0.014011101 ubox
6 24 0.037881681 ubox
6 25 0.207129653 ubox
7 20 0.961102789 ubox
7 24 0.199790294 ubox
7 73 0.129832703 ubox
8 14 0.004094000 ubox
8 19 0.968246575 ubox
8 72 0.131161391 ubox
9 13 0.004544169 ubox
9 18 0.969900463 ubox
9 21 0.175017286 ubox
9 63 0.010185680 ubox
9 71 0.131334205 ubox
10 17 0.970347441 ubox
10 20 0.175197708 ubox
10 62 0.010192050 ubox
10 70 0.131173085 ubox
11 16 0.941026318 ubox
11 18 0.006237409 ubox
11 19 0.165250254 ubox
11 21 0.009309325 ubox
11 30 0.064772771 ubox
11 35 0.003482082 ubox
11 61 0.010196177 ubox
11 68 0.006156826 ubox
12 17 0.004040832 ubox
12 20 0.009089435 ubox
12 25 0.004809316 ubox
12 26 0.006101698 ubox
12 29 0.063166473 ubox
12 33 0.029513017 ubox
12 60 0.010182307 ubox
12 67 0.005298716 ubox
13 24 0.006155541 ubox
13 25 0.006421615 ubox
13 32 0.031541406 ubox
13 34 0.011712868 ubox
13 59 0.010121206 ubox
14 23 0.006106495 ubox
14 24 0.005533210 ubox
14 26 0.147126051 ubox
14 31 0.025999630 ubox
14 33 0.043436033 ubox
15 24 0.004016221 ubox
15 25 0.154107865 ubox
15 32 0.045420863 ubox
16 24 0.154117643 ubox
16 64 0.009889648 ubox
17 30 0.054796967 ubox
17 63 0.009961683 ubox
18 26 0.003617189 ubox
18 27 0.007517874 ubox
18 29 0.054874293 ubox
18 62 0.007011763 ubox
19 25 0.003752742 ubox
19 26 0.007818197 ubox
19 27 0.003335428 ubox
19 28 0.054726153 ubox
19 62 0.007066368 ubox
20 61 0.010011014 ubox
21 60 0.010014976 ubox
22 59 0.010008568 ubox
22 73 0.007503167 ubox
23 72 0.007549015 ubox
24 71 0.007541092 ubox
24 75 0.007397304 ubox
25 74 0.003836678 ubox
25 75 0.013285147 ubox
26 74 0.012744805 ubox
29 74 0.932273602 ubox
30 73 0.987277158 ubox
31 72 0.987337106 ubox
32 71 0.985298178 ubox
32 75 0.005205275 ubox
33 72 0.003896705 ubox
33 74 0.005233157 ubox
34 58 0.015478576 ubox
34 68 0.998843955 ubox
34 71 0.003430081 ubox
35 57 0.015511429 ubox
35 67 0.999784566 ubox
35 70 0.003225744 ubox
36 56 0.015528713 ubox
36 66 0.999744025 ubox
37 55 0.015523469 ubox
37 65 0.999533902 ubox
38 54 0.015518803 ubox
38 64 0.999847132 ubox
39 52 0.015501449 ubox
39 63 0.999855538 ubox
40 51 0.015552367 ubox
40 62 0.999853243 ubox
41 50 0.015592648 ubox
41 61 0.999834643 ubox
42 49 0.015646824 ubox
42 60 0.998842344 ubox
43 48 0.014471995 ubox
43 59 0.971411004 ubox
43 60 0.014601032 ubox
44 48 0.003257625 ubox
44 59 0.107258655 ubox
44 60 0.005392660 ubox
45 59 0.051471935 ubox
45 60 0.014034907 ubox
46 59 0.098954465 ubox
46 60 0.038283122 ubox
47 57 0.963460819 ubox
47 59 0.056266780 ubox
48 56 0.965631141 ubox
48 58 0.044170434 ubox
48 61 0.005390141 ubox
49 55 0.962377013 ubox
49 58 0.236478734 ubox
50 54 0.956736648 ubox
50 57 0.240042788 ubox
50 59 0.082071397 ubox
51 56 0.224581990 ubox
51 58 0.092820642 ubox
52 57 0.092705782 ubox
60 68 0.004413993 ubox
61 67 0.004419206 ubox
62 66 0.004134532 ubox
1 25 0.9500000 lbox
2 24 0.9500000 lbox
7 20 0.9500000 lbox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
29 74 0.9500000 lbox
30 73 0.9500000 lbox
31 72 0.9500000 lbox
32 71 0.9500000 lbox
34 68 0.9500000 lbox
35 67 0.9500000 lbox
36 66 0.9500000 lbox
37 65 0.9500000 lbox
38 64 0.9500000 lbox
39 63 0.9500000 lbox
40 62 0.9500000 lbox
41 61 0.9500000 lbox
42 60 0.9500000 lbox
43 59 0.9500000 lbox
47 57 0.9500000 lbox
48 56 0.9500000 lbox
49 55 0.9500000 lbox
50 54 0.9500000 lbox
showpage
end
%%EOF
