%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUCGGCGCUCCCGGGGUGCCUGCUCGGCGCUCCGCCGGCCGCCCUGCGUACGCUCGCAAGGCGCUCGCAGACUCCGGAGUCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[53.67530441 415.64117432]
[38.39871216 414.05331421]
[25.97215080 405.02688599]
[19.73830414 390.98999023]
[21.37404442 375.71844482]
[30.43936539 363.32022095]
[44.49574280 357.13040161]
[46.04650116 342.21078491]
[47.59725952 327.29116821]
[49.14801788 312.37155151]
[50.44102478 297.42736816]
[51.47589111 282.46313477]
[52.51075745 267.49887085]
[53.54562378 252.53460693]
[50.80765152 245.49476624]
[54.88326645 237.07453918]
[56.43402481 222.15492249]
[57.98478699 207.23530579]
[59.53554535 192.31567383]
[61.08630371 177.39605713]
[58.68212509 173.04219055]
[59.14328384 167.10342407]
[63.29364395 161.51321411]
[65.87003326 146.73612976]
[68.44641876 131.95904541]
[71.02280426 117.18196106]
[66.43682098 102.90019989]
[55.73907471 92.38553619]
[45.04132843 81.87087250]
[34.34357834 71.35620117]
[23.64583015 60.84154129]
[12.94808197 50.32687378]
[-2.58647084 43.53614426]
[-0.36151746 26.72882843]
[16.40489197 24.21409988]
[23.46274567 39.62912750]
[34.16049576 50.14379120]
[44.85824203 60.65845490]
[55.55599213 71.17311859]
[66.25373840 81.68778229]
[76.95149231 92.20245361]
[89.31835938 80.82852936]
[104.41983795 80.94493866]
[113.15261841 68.74909973]
[121.88539886 56.55325699]
[130.61817932 44.35741806]
[132.36157227 28.63256073]
[146.06207275 22.78911781]
[154.79484558 10.59327507]
[163.52763367 -1.60256600]
[172.26040649 -13.79840755]
[169.43341064 -29.34780121]
[178.49806213 -42.29413605]
[194.07647705 -44.95658112]
[206.92625427 -35.75555420]
[209.42384338 -20.14986420]
[200.08747864 -7.39808655]
[184.45625305 -5.06562710]
[175.72346497 7.13021421]
[166.99069214 19.32605553]
[158.25790405 31.52189636]
[157.13912964 46.37442780]
[142.81402588 53.09019852]
[134.08123779 65.28604126]
[125.34845734 77.48188019]
[116.61567688 89.67771912]
[120.57427216 102.72273254]
[114.98777771 116.03150940]
[101.48686218 123.09124756]
[85.79988861 119.75834656]
[83.22350311 134.53543091]
[80.64711761 149.31251526]
[78.07073212 164.08959961]
[76.00592804 178.94680786]
[74.45516968 193.86643982]
[72.90441132 208.78605652]
[71.35365295 223.70567322]
[69.80288696 238.62530518]
[68.50988770 253.56947327]
[67.47501373 268.53372192]
[66.44014740 283.49798584]
[65.40528107 298.46224976]
[67.97408295 307.45736694]
[64.06764221 313.92230225]
[62.51688385 328.84191895]
[60.96612167 343.76156616]
[59.41536331 358.68118286]
[71.89826965 367.62951660]
[78.21999359 381.62704468]
[76.68002319 396.90853882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 87]
[8 86]
[9 85]
[10 84]
[11 82]
[12 81]
[13 80]
[14 79]
[16 78]
[17 77]
[18 76]
[19 75]
[20 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[32 36]
[43 66]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
