%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGCCCGGGAGGGUAUAAGUGCGGCCCGCGCCCCUCCGAGCGGCGCGCUGGGUUCCGGAGCG\
) } def
/len { sequence length } bind def

/coor [
[76.88952637 137.33677673]
[65.90541840 127.12161255]
[64.92063904 112.15397644]
[74.47164917 100.58772278]
[89.35565948 98.72383118]
[79.96288300 87.02871704]
[70.57010651 75.33359528]
[51.95325851 74.25234222]
[39.95071030 60.38677216]
[41.49554062 42.42350006]
[31.01787186 31.68951607]
[20.54020119 20.95553207]
[10.06253147 10.22154713]
[-0.41513947 -0.51243687]
[-10.89280987 -11.24642086]
[-15.54885292 -12.13262367]
[-19.29866219 -14.26439190]
[-21.85893822 -17.19725990]
[-23.12313461 -20.44064903]
[-23.16074181 -23.52078056]
[-22.19580841 -26.03835869]
[-29.80020523 -38.96790314]
[-37.40460205 -51.89744949]
[-45.00900269 -64.82699585]
[-52.61339951 -77.75653839]
[-65.85496521 -88.34413910]
[-59.34676361 -103.99916077]
[-42.50189590 -102.07904053]
[-39.68385315 -85.36093903]
[-32.07945633 -72.43138885]
[-24.47505951 -59.50184631]
[-16.87066078 -46.57230377]
[-9.26626301 -33.64275742]
[-0.15882555 -21.72409248]
[10.31884480 -10.99010754]
[20.79651451 -0.25612295]
[31.27418518 10.47786140]
[41.75185776 21.21184540]
[52.22952652 31.94582939]
[63.82306671 29.58059692]
[75.18206787 33.30684662]
[83.28584290 42.26105499]
[85.91656494 54.17303848]
[82.26522064 65.94081879]
[91.65799713 77.63593292]
[101.05077362 89.33105469]
[112.03480530 99.54628754]
[124.37956238 108.06726074]
[140.13217163 109.53897858]
[146.21122742 123.13656616]
[158.55598450 131.65753174]
[170.90074158 140.17851257]
[183.24549866 148.69947815]
[199.71556091 152.72109985]
[200.41047668 169.66079712]
[184.32516479 175.01792908]
[174.72451782 161.04423523]
[162.37976074 152.52326965]
[150.03500366 144.00228882]
[137.69024658 135.48132324]
[122.82062531 134.61907959]
[115.85858917 120.41201782]
[103.51383209 111.89104462]
[102.73307800 126.87071228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 46]
[6 45]
[7 44]
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[47 63]
[48 62]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
