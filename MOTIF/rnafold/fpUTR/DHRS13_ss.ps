%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCUCCGCCUUCGGAGGCUGACGCGCCCGGGCGCCGUUCCAGGCCUGUGCAGGGCGGAUCGGCAGCCGCCUGGCGGCGAUCCAGGGCGGUGCGGGGCCUGGGCGGGAGCCGGGAGGCGCGGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[76.55003357 676.93188477]
[79.21281433 657.73400879]
[79.58093262 642.73852539]
[79.94905090 627.74304199]
[70.71362305 612.87384033]
[80.30130005 597.20996094]
[80.30130005 582.20996094]
[80.30130005 567.20996094]
[80.30130005 552.20996094]
[80.11722565 537.21112061]
[79.74910736 522.21563721]
[79.38098907 507.22015381]
[79.01287079 492.22467041]
[68.48822784 484.68542480]
[64.19465637 472.26501465]
[67.92549133 459.46063232]
[78.52436066 451.04748535]
[78.52436066 436.04748535]
[78.52436066 421.04748535]
[78.52436066 406.04748535]
[68.80567169 399.84017944]
[63.27584839 389.58349609]
[63.43436050 377.81158447]
[69.35838318 367.49844360]
[79.65379333 361.30636597]
[80.38980865 346.32443237]
[81.12582397 331.34249878]
[81.86183929 316.36056519]
[82.59785461 301.37863159]
[83.33386993 286.39669800]
[84.06988525 271.41479492]
[84.80590057 256.43286133]
[85.54191589 241.45091248]
[78.43843079 228.35932922]
[86.84355927 214.95542908]
[87.57957458 199.97349548]
[88.31558990 184.99156189]
[89.05160522 170.00962830]
[81.94812012 156.91804504]
[90.35324097 143.51414490]
[91.08925629 128.53221130]
[73.35464478 117.81566620]
[65.92252350 96.94602966]
[73.83798218 74.72707367]
[64.32208252 63.13191223]
[54.80618286 51.53675842]
[45.29028320 39.94160080]
[29.52967262 36.94448853]
[22.17408180 22.68703842]
[28.86609268 8.10634804]
[44.47216797 4.38747311]
[57.02066040 14.38321781]
[56.88544083 30.42570114]
[66.40133667 42.02085876]
[75.91723633 53.61601639]
[85.43313599 65.21117401]
[100.14492035 62.28481674]
[104.49918365 47.93070984]
[108.85345459 33.57660675]
[113.20772552 19.22250175]
[117.56199646 4.86839628]
[121.91626740 -9.48570824]
[114.21598816 -20.61327553]
[114.36271667 -33.94930267]
[122.07686615 -44.58854675]
[134.33685303 -48.74801254]
[139.04206848 -62.99093628]
[143.74729919 -77.23385620]
[139.88851929 -93.17254639]
[151.94744873 -104.28624725]
[167.51889038 -99.14212799]
[170.58428955 -83.03202820]
[157.99021912 -72.52863312]
[153.28500366 -58.28570938]
[148.57977295 -44.04278564]
[156.78031921 -29.41450500]
[151.81495667 -13.04454899]
[136.27037048 -5.13143826]
[131.91610718 9.22266674]
[127.56183624 23.57677078]
[123.20756531 37.93087769]
[118.85329437 52.28498077]
[114.49902344 66.63908386]
[126.07276917 76.21073151]
[132.49378967 89.28762054]
[132.95869446 103.39765930]
[127.75350952 116.03482819]
[118.13948822 125.10421753]
[106.07118988 129.26821899]
[105.33517456 144.25015259]
[112.38600922 158.41336060]
[104.03353119 170.74565125]
[103.29751587 185.72758484]
[102.56150055 200.70950317]
[101.82548523 215.69143677]
[108.87632751 229.85464478]
[100.52384949 242.18693542]
[99.78783417 257.16885376]
[99.05181885 272.15078735]
[98.31580353 287.13272095]
[97.57978821 302.11465454]
[96.84377289 317.09658813]
[96.10775757 332.07852173]
[95.37174225 347.06045532]
[94.63572693 362.04238892]
[107.87581635 375.47653198]
[107.21389008 394.01025391]
[93.52436066 406.04748535]
[93.52436066 421.04748535]
[93.52436066 436.04748535]
[93.52436066 451.04748535]
[106.10254669 463.13220215]
[106.10216522 480.23864746]
[94.00835419 491.85656738]
[94.37647247 506.85205078]
[94.74459076 521.84753418]
[95.11270905 536.84301758]
[98.48088074 545.45001221]
[95.30130005 552.20996094]
[95.30130005 567.20996094]
[95.30130005 582.20996094]
[95.30130005 597.20996094]
[103.88808441 606.92651367]
[103.51967621 619.48590088]
[94.94453430 628.11114502]
[94.57641602 643.10662842]
[94.20829773 658.10211182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[6 122]
[7 121]
[8 120]
[9 119]
[10 117]
[11 116]
[12 115]
[13 114]
[17 111]
[18 110]
[19 109]
[20 108]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[35 95]
[36 94]
[37 93]
[38 92]
[40 90]
[41 89]
[44 56]
[45 55]
[46 54]
[47 53]
[57 83]
[58 82]
[59 81]
[60 80]
[61 79]
[62 78]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
