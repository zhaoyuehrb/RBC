%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAACUCUUGAGACCGGGAGCCCAGCUGCCCACCCUCUGGACAUUCACCCAGCCAGGUGGUCUCGUCACCUCAGAGGCUCCGCCAGACUCCUGCCCAGGCCAGGACUGAGGCAAGCCUCAAGGCACUUCUAGGACCUGCCUCUUCUCACCAAG\
) } def
/len { sequence length } bind def

/coor [
[105.89129639 210.02992249]
[104.07164001 195.14070129]
[102.25197601 180.25148010]
[100.43231964 165.36225891]
[98.61266327 150.47303772]
[87.27416229 148.86210632]
[76.59033966 144.73745728]
[67.11083221 138.31129456]
[59.32330704 129.91419983]
[53.62839890 119.97816467]
[50.31907654 109.01435852]
[35.32601166 109.47032166]
[20.33294106 109.92629242]
[5.33987379 110.38226318]
[-9.65319443 110.83822632]
[-24.64626312 111.29419708]
[-38.95835114 115.78464508]
[-51.52459335 123.97546387]
[-64.09083557 132.16629028]
[-76.57342529 140.48403931]
[-88.97108459 148.92785645]
[-101.36874390 157.37167358]
[-111.05633545 171.28521729]
[-127.10793304 165.82786560]
[-126.30738068 148.89283752]
[-109.81256104 144.97401428]
[-97.41490173 136.53019714]
[-85.01724243 128.08638000]
[-81.23699188 121.68408966]
[-72.28165436 119.60004425]
[-59.71541595 111.40921783]
[-47.14917374 103.21839905]
[-49.27021790 88.36911774]
[-63.62707520 84.02394104]
[-77.98394012 79.67876434]
[-93.22013855 88.21655273]
[-109.60346222 83.22010040]
[-117.17792511 68.23428345]
[-131.61990356 64.18096924]
[-146.06187439 60.12765121]
[-160.50384521 56.07433701]
[-172.59352112 65.80158234]
[-188.09342957 66.53132629]
[-201.04353333 57.98296356]
[-206.46426392 43.44351959]
[-202.27120972 28.50370407]
[-190.07672119 18.90818405]
[-174.56980896 18.34663010]
[-161.71321106 27.03497124]
[-156.45053101 41.63236237]
[-142.00856018 45.68567657]
[-127.56658173 49.73899460]
[-113.12461090 53.79230881]
[-102.85163879 45.95808029]
[-89.74599457 45.48233032]
[-78.60559845 52.76429367]
[-73.63875580 65.32189941]
[-59.28189850 69.66707611]
[-44.92503738 74.01226044]
[-25.10223007 96.30112457]
[-10.10916233 95.84516144]
[4.88390636 95.38919067]
[19.87697411 94.93322754]
[34.87004089 94.47725677]
[49.86310959 94.02128601]
[52.23335266 83.63539886]
[56.72985458 73.97795105]
[63.15245438 65.47882843]
[71.21526337 58.51636887]
[80.55938721 53.40048218]
[90.76886749 50.35889816]
[101.38926697 49.52701187]
[111.94781494 50.94184875]
[121.97453308 54.54042816]
[131.02308655 60.16257095]
[141.89497375 49.82806778]
[152.76687622 39.49356461]
[163.63876343 29.15905952]
[174.51065063 18.82455635]
[185.38255310 8.49005222]
[186.50006104 -4.39815617]
[195.81750488 -12.78327560]
[207.94871521 -12.55486774]
[219.02781677 -22.66690826]
[230.10693359 -32.77894974]
[226.92620850 -47.73990631]
[231.63003540 -62.18881226]
[242.85992432 -72.27622986]
[257.53302002 -75.36753845]
[271.68801880 -70.73052216]
[282.76712036 -80.84256744]
[293.84622192 -90.95460510]
[304.92532349 -101.06665039]
[315.90139771 -111.29044342]
[326.77328491 -121.62494659]
[330.89614868 -137.49737549]
[346.77340698 -141.60166931]
[358.07186890 -129.71568298]
[353.16867065 -114.06670380]
[337.10778809 -110.75305939]
[326.23590088 -100.41854858]
[323.53878784 -93.48996735]
[315.03738403 -89.98754120]
[303.95825195 -79.87549591]
[292.87915039 -69.76345825]
[281.80004883 -59.65141678]
[285.12854004 -45.13291931]
[280.71362305 -30.80237389]
[269.64532471 -20.53793526]
[254.82803345 -17.16967964]
[240.21896362 -21.69984245]
[229.13986206 -11.58780098]
[218.06076050 -1.47576046]
[213.69279480 15.49506378]
[195.71705627 19.36194420]
[184.84515381 29.69644737]
[173.97326660 40.03095245]
[163.10137939 50.36545563]
[152.22947693 60.69995880]
[141.35758972 71.03446198]
[150.39878845 96.93171692]
[144.56597900 123.73450470]
[156.61125183 132.67381287]
[168.65653992 141.61311340]
[180.70182800 150.55241394]
[192.74710083 159.49172974]
[208.17985535 157.37802124]
[220.26814270 166.61534119]
[222.18814087 181.34114075]
[234.23341370 190.28044128]
[250.55587769 194.86450195]
[250.66946411 211.81806946]
[234.40989685 216.62043762]
[225.29411316 202.32572937]
[213.24882507 193.38641357]
[198.59823608 195.81449890]
[186.25526428 186.92036438]
[183.80780029 171.53700256]
[171.76251221 162.59770203]
[159.71723938 153.65840149]
[147.67195129 144.71908569]
[135.62666321 135.77978516]
[125.39362335 143.64190674]
[113.50188446 148.65338135]
[115.32154083 163.54260254]
[117.14119720 178.43182373]
[118.96085358 193.32104492]
[120.78051758 208.21026611]
[133.98825073 216.58222961]
[138.67527771 231.50086975]
[132.62850952 245.92205811]
[118.70307159 253.03654480]
[103.47411346 249.48510742]
[94.13227844 236.94459534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 148]
[2 147]
[3 146]
[4 145]
[5 144]
[11 65]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 32]
[18 31]
[19 30]
[20 28]
[21 27]
[22 26]
[33 59]
[34 58]
[35 57]
[38 53]
[39 52]
[40 51]
[41 50]
[75 120]
[76 119]
[77 118]
[78 117]
[79 116]
[80 115]
[83 113]
[84 112]
[85 111]
[90 106]
[91 105]
[92 104]
[93 103]
[94 101]
[95 100]
[122 142]
[123 141]
[124 140]
[125 139]
[126 138]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
