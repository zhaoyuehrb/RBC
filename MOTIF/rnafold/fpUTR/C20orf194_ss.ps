%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCCUGCCGCCCCGCCCGGCCGCAGCUAGCGUGGAGCCGCCCUGCGGGCAACUGAGACCCUCGCAGCUGCACCGUCCUCCUCCGCCGCCAGUCGUCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[95.94395447 109.44183350]
[83.02829742 117.06980133]
[70.11264038 124.69776917]
[57.19699097 132.32572937]
[48.28567886 150.28723145]
[29.04691887 150.03836060]
[16.60583305 158.41806030]
[4.16474819 166.79776001]
[-8.27633762 175.17747498]
[-15.39986134 189.30424500]
[-30.27835083 189.99693298]
[-42.71943665 198.37664795]
[-55.16052246 206.75634766]
[-57.93996048 222.31430054]
[-70.95404816 231.28141785]
[-86.48175812 228.33764648]
[-95.31077576 215.22947693]
[-92.20299530 199.73376465]
[-79.00222015 191.04382324]
[-63.54022217 194.31526184]
[-51.09913635 185.93556213]
[-38.65805054 177.55584717]
[-32.42439651 164.02844238]
[-16.65603828 162.73638916]
[-4.21495342 154.35668945]
[8.22613144 145.97697449]
[20.66721725 137.59727478]
[21.76138306 127.24006653]
[28.58532524 119.08114624]
[39.01143646 116.04902649]
[49.56902313 119.41007996]
[62.48467636 111.78211212]
[75.40032959 104.15414429]
[88.31598663 96.52617645]
[98.27561951 85.30986023]
[104.32247162 71.58267975]
[110.36932373 57.85549545]
[116.41616821 44.12831116]
[107.96029663 35.21687317]
[103.08406067 23.97947502]
[102.35592651 11.78642750]
[105.84011841 0.11564322]
[113.09175873 -9.62649441]
[123.21347809 -16.27460670]
[134.96644592 -19.04370499]
[146.92196655 -17.62181473]
[154.16384888 -30.75783920]
[161.40573120 -43.89386368]
[168.64761353 -57.02988815]
[175.69406128 -70.27178192]
[182.54348755 -83.61663818]
[189.39292908 -96.96149445]
[188.81094360 -112.77199554]
[201.50613403 -120.56182098]
[208.35557556 -133.90667725]
[215.20501709 -147.25154114]
[214.62303162 -163.06204224]
[227.31822205 -170.85186768]
[234.16766357 -184.19671631]
[236.02110291 -201.04905701]
[252.72792053 -203.93322754]
[260.12429810 -188.67774963]
[247.51251221 -177.34729004]
[240.66308594 -164.00242615]
[241.73498535 -149.14643860]
[228.54986572 -140.40209961]
[221.70043945 -127.05724335]
[214.85099792 -113.71238708]
[215.92289734 -98.85639954]
[202.73779297 -90.11205292]
[195.88835144 -76.76719666]
[189.03890991 -63.42234421]
[188.78060913 -55.91402054]
[181.78364563 -49.78800583]
[174.54176331 -36.65198135]
[167.29988098 -23.51595688]
[160.05799866 -10.37993240]
[170.11068726 4.47961903]
[171.38446045 22.45846176]
[163.45419312 38.73680115]
[148.37344360 48.90884781]
[130.14335632 50.17515945]
[124.09650421 63.90234375]
[118.04965210 77.62953186]
[112.00279999 91.35671234]
[113.77690125 106.25142670]
[122.87889862 118.17424774]
[137.40287781 124.44837952]
[138.97575378 139.25970459]
[148.07775879 151.18252563]
[163.44610596 149.83442688]
[177.09298706 157.02929688]
[184.66371155 170.47131348]
[183.74250793 185.87113953]
[174.62332153 198.31477356]
[160.21604919 203.83148193]
[145.11801147 200.66091919]
[134.14691162 189.81477356]
[130.80361938 174.75404358]
[136.15493774 160.28451538]
[127.05294037 148.36170959]
[113.18000031 142.94036865]
[110.95608521 127.27625275]
[101.85408020 115.35343170]
[99.24315643 113.71450806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[4 31]
[6 27]
[7 26]
[8 25]
[9 24]
[11 22]
[12 21]
[13 20]
[35 85]
[36 84]
[37 83]
[38 82]
[46 77]
[47 76]
[48 75]
[49 74]
[50 72]
[51 71]
[52 70]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
[86 104]
[87 103]
[89 101]
[90 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
