%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCGCUCUGCCUUCCUCGGCCAUCGAUGCCUCGGGGCUCGUGGCGUCGGGCCUGGCGGGCUCCCCGUUGGGCGGGGGCGGCGGUCCGAGCGGCUGCGGCAGCGGAAGCGGGUCCGGGUCGCGCAGGGCGGGGGCGGCGCAGCGGGCGGAGGCGGCCGUGGGCCGCCUGGGCAGAAUGUCACG\
) } def
/len { sequence length } bind def

/coor [
[288.51074219 392.30416870]
[280.11111450 379.87652588]
[271.71151733 367.44888306]
[258.17413330 361.23690796]
[256.85681152 345.47064209]
[248.45718384 333.04299927]
[240.05755615 320.61535645]
[231.65794373 308.18771362]
[218.12055969 301.97573853]
[216.80323792 286.20947266]
[208.40361023 273.78182983]
[200.00399780 261.35418701]
[191.60437012 248.92654419]
[178.06698608 242.71456909]
[176.74967957 226.94828796]
[168.35005188 214.52064514]
[159.95042419 202.09300232]
[151.55081177 189.66535950]
[143.15118408 177.23771667]
[134.75155640 164.81007385]
[121.21418762 158.59809875]
[119.89686584 142.83183289]
[111.49724579 130.40419006]
[86.50684357 132.99562073]
[64.78771210 116.27262115]
[50.37269592 120.42078400]
[35.95767975 124.56894684]
[21.54265976 128.71710205]
[7.12764120 132.86526489]
[-7.28737688 137.01342773]
[-21.70239639 141.16159058]
[-36.11741257 145.30975342]
[-47.23969269 156.56166077]
[-61.61032104 152.64576721]
[-76.02533722 156.79393005]
[-85.01692200 170.08041382]
[-101.02149963 171.19081116]
[-111.76173401 159.27330017]
[-108.99863434 143.46998596]
[-94.85180664 135.90380859]
[-80.17350006 142.37890625]
[-65.75848389 138.23074341]
[-55.66726303 127.27553558]
[-40.26557541 130.89472961]
[-25.85055733 126.74657440]
[-11.43553829 122.59841156]
[2.97947979 118.45024872]
[17.39449883 114.30208588]
[31.80951691 110.15393066]
[46.22453308 106.00576782]
[60.63955307 101.85760498]
[62.79719543 87.01359558]
[50.15964508 78.93322754]
[37.52209854 70.85285950]
[24.88455009 62.77248764]
[12.24700069 54.69211578]
[-0.39054736 46.61174774]
[-13.02809525 38.53137970]
[-25.66564369 30.45100784]
[-38.30319214 22.37063980]
[-50.94074249 14.29026890]
[-67.54237366 10.85192680]
[-68.83419037 -6.05273342]
[-52.94778061 -11.97374249]
[-42.86037064 1.65272105]
[-30.22282219 9.73309040]
[-17.58527374 17.81345940]
[-4.94772625 25.89382935]
[7.68982220 33.97419739]
[20.32736969 42.05456924]
[32.96492004 50.13493729]
[45.60246658 58.21530914]
[58.24001694 66.29567719]
[70.87756348 74.37604523]
[76.74521637 70.53854370]
[83.01750946 67.94416046]
[89.44479370 66.60915375]
[95.78543854 66.50166321]
[101.81474304 67.54529572]
[106.08515167 53.16601944]
[110.35556030 38.78674316]
[114.62596130 24.40746498]
[118.89636993 10.02818680]
[122.92198944 -4.42153311]
[126.70166016 -18.93752670]
[122.69136047 -34.24203873]
[133.38598633 -44.60900879]
[137.16566467 -59.12500381]
[131.31872559 -70.63855743]
[134.78172302 -82.66175842]
[145.16964722 -88.88787079]
[149.19526672 -103.33759308]
[141.68823242 -116.98611450]
[145.97662354 -131.58283997]
[159.03466797 -138.65553284]
[163.06028748 -153.10525513]
[167.08590698 -167.55497742]
[171.11151123 -182.00469971]
[166.50244141 -197.74281311]
[178.02166748 -209.41497803]
[193.81921387 -205.01387024]
[197.64390564 -189.06695557]
[185.56123352 -177.97908020]
[181.53561401 -163.52935791]
[177.50999451 -149.07963562]
[173.48437500 -134.62991333]
[181.00442505 -121.82427216]
[177.12771606 -107.11285400]
[163.64498901 -99.31197357]
[159.61936951 -84.86225128]
[164.91001892 -68.13997650]
[151.68165588 -55.34533310]
[147.90199280 -40.82933807]
[152.18263245 -26.56310844]
[141.21765137 -15.15785599]
[137.43798828 -0.64186203]
[139.05200195 3.87510538]
[137.82940674 9.45455933]
[133.27565002 14.29859257]
[129.00523376 28.67786980]
[124.73483276 43.05714798]
[120.46443176 57.43642807]
[116.19402313 71.81570435]
[126.80844116 81.61771393]
[132.12649536 95.05137634]
[131.09754944 109.46271515]
[123.92488861 122.00456238]
[132.32450867 134.43220520]
[146.46269226 141.53309631]
[147.17921448 156.41044617]
[155.57882690 168.83808899]
[163.97845459 181.26573181]
[172.37806702 193.69338989]
[180.77769470 206.12103271]
[189.17732239 218.54867554]
[203.31549072 225.64955139]
[204.03201294 240.52691650]
[212.43164062 252.95455933]
[220.83126831 265.38220215]
[229.23088074 277.80984497]
[243.36906433 284.91073608]
[244.08558655 299.78808594]
[252.48519897 312.21572876]
[260.88482666 324.64337158]
[269.28445435 337.07101440]
[283.42263794 344.17190552]
[284.13916016 359.04928589]
[292.53875732 371.47692871]
[300.93838501 383.90457153]
[325.59494019 382.97741699]
[343.31854248 408.07382202]
[354.57864380 417.98394775]
[365.83871460 427.89407349]
[377.09878540 437.80419922]
[388.35888672 447.71432495]
[399.61895752 457.62445068]
[410.87905884 467.53454590]
[422.13912964 477.44467163]
[438.02380371 483.37036133]
[436.72698975 500.27465820]
[420.12435913 503.70809937]
[412.22900391 488.70477295]
[400.96893311 478.79464722]
[389.70886230 468.88452148]
[378.44876099 458.97439575]
[367.18869019 449.06427002]
[355.92858887 439.15414429]
[344.66851807 429.24404907]
[333.40841675 419.33392334]
[320.83938599 427.52166748]
[308.27145386 435.70867920]
[312.78543091 450.01336670]
[317.29937744 464.31805420]
[321.81332397 478.62274170]
[332.34588623 491.90814209]
[322.49539185 505.70684814]
[306.50906372 500.06115723]
[307.50863647 483.13671875]
[302.99468994 468.83203125]
[298.48071289 454.52731323]
[293.96676636 440.22262573]
[284.27340698 431.20465088]
[279.11813354 420.08551025]
[278.62313843 408.81970215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[5 145]
[6 144]
[7 143]
[8 142]
[10 140]
[11 139]
[12 138]
[13 137]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[34 42]
[35 41]
[52 74]
[53 73]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[61 65]
[79 123]
[80 122]
[81 121]
[82 120]
[83 119]
[84 116]
[85 115]
[87 113]
[88 112]
[91 110]
[92 109]
[95 106]
[96 105]
[97 104]
[98 103]
[151 169]
[152 168]
[153 167]
[154 166]
[155 165]
[156 164]
[157 163]
[158 162]
[171 181]
[172 180]
[173 179]
[174 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
