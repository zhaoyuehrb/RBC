%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGAGAGUGAGGAGGGGGGAGGCCACAGCCCGCGGAGGCAAGGCGGGUGCAGGGCUUCUGGGGACGGAGGGAGGUGCCAGAAGUUGAGCCCUGAGGCCCUGCUGGCCCCUGGGCGCAGGCCCAGCUCAGGCCCCCAGGG\
) } def
/len { sequence length } bind def

/coor [
[109.21707916 269.21121216]
[98.95755768 280.31228638]
[85.88091278 287.89465332]
[71.14989471 291.28414917]
[56.07439041 290.17938232]
[41.99489975 284.67852783]
[30.16335678 275.27075195]
[21.63181877 262.79260254]
[17.15890121 248.35362244]
[17.14233589 233.23770142]
[21.58359337 218.78894043]
[30.08776283 206.29211426]
[41.89865494 196.85844421]
[55.96605682 191.32675171]
[71.03910828 190.18891907]
[74.35363770 175.55970764]
[77.66817474 160.93049622]
[80.98271179 146.30128479]
[84.29724884 131.67207336]
[71.44433594 112.42951202]
[74.18444824 92.31201172]
[87.51814270 81.00560760]
[83.87850952 66.45387268]
[80.23886871 51.90213394]
[76.59923553 37.35039520]
[72.95959473 22.79866028]
[68.54844666 24.15478325]
[63.47782135 24.30863380]
[58.07307434 23.05931282]
[43.28202057 20.56437111]
[28.49096489 18.06943130]
[13.69991112 15.57449150]
[-1.09114230 13.07955074]
[-15.88219643 10.58461094]
[-26.18906784 22.06380653]
[-41.07191467 26.12636566]
[-55.78167725 21.47593880]
[-65.62451935 9.59646130]
[-67.45963287 -5.72136927]
[-60.70143127 -19.58968735]
[-47.50643539 -27.58316612]
[-32.08512497 -27.15111160]
[-19.35837746 -18.43139458]
[-13.38725567 -4.20644331]
[1.40379798 -1.71150303]
[16.19485092 0.78343731]
[30.98590469 3.27837753]
[45.77695847 5.77331781]
[60.56801224 8.26825809]
[73.21139526 0.19702296]
[77.17433167 -14.27001476]
[81.13726044 -28.73705292]
[85.10018921 -43.20409012]
[89.06311798 -57.67112732]
[93.02605438 -72.13816833]
[96.98898315 -86.60520172]
[100.95191193 -101.07224274]
[104.91484833 -115.53927612]
[108.87777710 -130.00631714]
[105.06133270 -145.36032104]
[115.88620758 -155.59121704]
[119.84913635 -170.05825806]
[123.81206512 -184.52529907]
[127.28936768 -199.11666870]
[130.27716064 -213.81610107]
[133.26495361 -228.51551819]
[121.68132782 -240.78788757]
[119.68502045 -257.37829590]
[127.86294556 -271.76016235]
[142.83828735 -278.39352417]
[145.49784851 -293.15588379]
[136.27630615 -305.99093628]
[138.91387939 -321.57357788]
[151.84571838 -330.65890503]
[167.39959717 -327.85671997]
[176.34768677 -314.82955933]
[173.38124084 -299.30618286]
[160.26019287 -290.49630737]
[157.60063171 -275.73397827]
[167.72119141 -266.95855713]
[172.20063782 -254.21934509]
[169.76071167 -240.82748413]
[160.93667603 -230.32046509]
[147.96437073 -225.52774048]
[144.97657776 -210.82830811]
[141.98880005 -196.12889099]
[143.68696594 -192.95176697]
[143.88208008 -188.77581787]
[142.11360168 -184.33958435]
[138.27909851 -180.56236267]
[134.31617737 -166.09532166]
[130.35324097 -151.62828064]
[134.45314026 -137.30906677]
[123.34481049 -126.04338837]
[119.38188171 -111.57634735]
[115.41895294 -97.10930634]
[111.45602417 -82.64227295]
[107.49308777 -68.17523193]
[103.53015900 -53.70819473]
[99.56723022 -39.24115753]
[95.60429382 -24.77412033]
[91.64136505 -10.30708408]
[87.67843628 4.15995407]
[87.51132965 19.15902328]
[91.15097046 33.71075821]
[94.79060364 48.26249695]
[98.43024445 62.81423187]
[102.06987762 77.36596680]
[124.02096558 83.68127441]
[133.91377258 109.97758484]
[146.90415955 117.47758484]
[159.89453125 124.97758484]
[172.88491821 132.47758484]
[185.87530518 139.97758484]
[198.86567688 147.47758484]
[215.25588989 146.93649292]
[223.68869019 161.00135803]
[215.48910522 175.20343018]
[199.09219360 174.93286133]
[191.36567688 160.46797180]
[178.37530518 152.96797180]
[165.38491821 145.46797180]
[152.39453125 137.96797180]
[139.40415955 130.46797180]
[126.41377258 122.96796417]
[119.54194641 125.97262573]
[131.61793518 134.87040710]
[129.95010376 149.77740479]
[116.20632172 155.78642273]
[104.13053131 146.88836670]
[105.79828644 131.98194885]
[98.92646027 134.98660278]
[95.61192322 149.61581421]
[92.29738617 164.24502563]
[88.98284912 178.87423706]
[85.66831970 193.50344849]
[98.77899170 201.02685547]
[109.08840942 212.08160400]
[115.67987061 225.68469238]
[117.96726227 240.62655640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[22 108]
[23 107]
[24 106]
[25 105]
[26 104]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[50 103]
[51 102]
[52 101]
[53 100]
[54 99]
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[61 92]
[62 91]
[63 90]
[64 86]
[65 85]
[66 84]
[70 79]
[71 78]
[110 125]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
