%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGCGCUGUCAGAACCGGAUUGGGCCGCGGCGGGGACGGAAGCGGCCCCUGGGCCCGAGGGGCUGGAGCCGGGCCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[109.27896118 316.65756226]
[115.32530212 300.81842041]
[115.32530212 285.81842041]
[104.33030701 270.08975220]
[114.03578186 252.60830688]
[112.92799377 237.64926147]
[111.82020569 222.69023132]
[109.88521576 207.81555176]
[107.12897491 193.07095337]
[104.37273407 178.32635498]
[99.94219971 172.18350220]
[101.79764557 162.98663330]
[99.58811951 148.15025330]
[97.37859344 133.31388855]
[95.16906738 118.47750854]
[83.58877563 109.76872253]
[81.45444489 95.43725586]
[89.99455261 83.73201752]
[87.78502655 68.89563751]
[84.20564270 64.43988037]
[82.99799347 59.53839111]
[83.90007782 55.23866272]
[86.24761963 52.30437469]
[85.69335175 37.31462097]
[85.13907623 22.32486343]
[84.58480835 7.33510780]
[84.03053284 -7.65464830]
[83.47625732 -22.64440346]
[82.92198944 -37.63415909]
[79.40821075 -46.33349228]
[82.63455963 -53.18587112]
[82.63455963 -68.18587494]
[82.63455963 -83.18587494]
[79.44463348 -92.00910187]
[82.92198944 -98.73757935]
[83.47625732 -113.72734070]
[84.03053284 -128.71708679]
[75.76713562 -138.82435608]
[76.68002319 -151.44258118]
[85.71663666 -159.70889282]
[86.82442474 -174.66792297]
[79.21269226 -189.19354248]
[88.21377563 -202.90165710]
[104.56814575 -201.69053650]
[111.45181274 -186.80607605]
[101.78346252 -173.56013489]
[100.67567444 -158.60110474]
[109.19284058 -143.37660217]
[99.02028656 -128.16282654]
[98.46601868 -113.17306519]
[97.91174316 -98.18331146]
[97.63455963 -83.18587494]
[97.63455963 -68.18587494]
[97.63455963 -53.18587112]
[97.91174316 -38.18843079]
[98.46601868 -23.19867706]
[99.02028656 -8.20892048]
[99.57456207 6.78083515]
[100.12882996 21.77059174]
[100.68310547 36.76034546]
[101.23738098 51.75010300]
[102.62140656 66.68611908]
[104.83093262 81.52249146]
[116.41122437 90.23127747]
[118.54555511 104.56274414]
[110.00544739 116.26798248]
[112.21497345 131.10435486]
[114.42449951 145.94073486]
[116.63401794 160.77709961]
[119.11733246 175.57011414]
[121.87357330 190.31471252]
[124.62981415 205.05931091]
[128.37139893 209.37977600]
[129.75933838 214.23327637]
[129.01676941 218.56340027]
[126.77924347 221.58244324]
[127.88703156 236.54147339]
[128.99482727 251.50051880]
[137.85449219 258.31967163]
[141.29531860 268.72293091]
[138.36996460 279.05151367]
[130.32530212 285.81842041]
[130.32530212 300.81842041]
[136.37164307 316.65756226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[5 78]
[6 77]
[7 76]
[8 72]
[9 71]
[10 70]
[12 69]
[13 68]
[14 67]
[15 66]
[18 63]
[19 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[29 55]
[31 54]
[32 53]
[33 52]
[35 51]
[36 50]
[37 49]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
