%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCACCAAAGCGCGCCGGAAAUGCGAGGUCAACUGCGCGCCGCUGGCGCUGAGGGGAGGAAGUUUGCUGUCGAGCGGCCUGGGUUCCGUGGGCAAGGCCGUGGGAGGCAGCGUUGGCUGCUUCGACACACUGAGGGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[106.52139282 284.12460327]
[105.87161255 269.13870239]
[105.22183228 254.15278625]
[104.57205200 239.16685486]
[96.29067993 226.78669739]
[103.42291260 212.66432190]
[102.77313232 197.67839050]
[89.91426086 186.89117432]
[88.77768707 169.80778503]
[100.54808807 156.91448975]
[99.57379913 141.94616699]
[73.07701874 129.12913513]
[62.76470947 103.31662750]
[48.08132935 106.38230133]
[33.39794922 109.44797516]
[18.71457100 112.51364899]
[4.03119087 115.57931519]
[-10.65218925 118.64498901]
[-25.33556938 121.71066284]
[-31.77169037 135.70646667]
[-45.05955887 143.14192200]
[-60.00102997 141.34846497]
[-70.89103699 131.22196960]
[-85.57441711 134.28764343]
[-100.25779724 137.35331726]
[-114.94117737 140.41899109]
[-129.59048462 143.64355469]
[-144.20401001 147.02661133]
[-153.88299561 159.82101440]
[-169.92384338 160.08679199]
[-180.02139282 147.62007141]
[-176.42965698 131.98423767]
[-161.90390015 125.17378998]
[-147.58706665 132.41310120]
[-132.97354126 129.03002930]
[-127.12313080 124.42304993]
[-118.00685120 125.73561859]
[-103.32347107 122.66994476]
[-88.64009094 119.60427094]
[-73.95671082 116.53859711]
[-68.02835846 102.90068054]
[-55.05272675 95.27854919]
[-39.89980316 96.77597809]
[-28.40124321 107.02728271]
[-13.71786213 103.96160889]
[0.96551752 100.89594269]
[15.64889717 97.83026886]
[30.33227730 94.76459503]
[45.01565552 91.69892120]
[59.69903564 88.63324738]
[66.29082489 75.15925598]
[59.69903564 61.68527222]
[53.10724640 48.21128845]
[40.09257126 39.21524429]
[41.44969177 24.38259315]
[34.85789871 10.90860653]
[21.84322548 1.91256213]
[23.20034409 -12.92008781]
[16.60855293 -26.39407349]
[1.96083343 -32.93806839]
[-1.91590893 -48.50567627]
[7.95223093 -61.15476227]
[23.99526024 -61.18202972]
[33.90634155 -48.56655884]
[30.08253860 -32.98586273]
[36.67432785 -19.51187706]
[49.21751404 -11.47958279]
[48.33188629 4.31681633]
[54.92367554 17.79080200]
[67.46686554 25.82309723]
[66.58123016 41.61949539]
[73.17302704 55.09348297]
[79.76481628 68.56746674]
[98.00115967 65.37144470]
[114.10604858 71.28833771]
[123.69242859 59.75138474]
[133.27880859 48.21442795]
[142.86518860 36.67747498]
[152.45155334 25.14051819]
[162.03793335 13.60356236]
[171.62431335 2.06660628]
[171.22608948 -10.87380219]
[179.50981140 -20.29450035]
[191.59515381 -21.47552681]
[201.42922974 -32.80209351]
[211.26329041 -44.12865448]
[221.09736633 -55.45521927]
[226.91595459 -71.37942505]
[243.82858276 -70.19648743]
[247.37374878 -53.61733627]
[232.42393494 -45.62115097]
[222.58985901 -34.29458618]
[212.75578308 -22.96802139]
[202.92172241 -11.64145756]
[200.55564880 5.71539736]
[183.16127014 11.65298462]
[173.57489014 23.18993950]
[163.98851013 34.72689438]
[154.40213013 46.26385117]
[144.81576538 57.80080795]
[135.22938538 69.33776093]
[125.64300537 80.87471771]
[132.92974854 87.25743103]
[138.44491577 96.23553467]
[141.31489563 107.26231384]
[155.85169983 110.96118164]
[170.38848877 114.66004181]
[184.92527771 118.35890198]
[199.46208191 122.05776215]
[213.99887085 125.75662231]
[228.53567505 129.45549011]
[243.07246399 133.15434265]
[258.70269775 128.19166565]
[270.63156128 139.44483948]
[266.58767700 155.33758545]
[250.73104858 159.52078247]
[239.37361145 147.69114685]
[224.83680725 143.99227905]
[210.30001831 140.29342651]
[195.76321411 136.59455872]
[181.22642517 132.89569092]
[166.68962097 129.19683838]
[152.15283203 125.49797058]
[137.61604309 121.79911041]
[131.84756470 126.59230042]
[145.91812134 131.79032898]
[148.45187378 146.57478333]
[136.91508484 156.16136169]
[122.84443665 150.96360779]
[120.31060028 136.17868042]
[114.54212189 140.97186279]
[115.51641846 155.94020081]
[126.62602234 163.63345337]
[131.18716431 176.14631653]
[127.73685455 188.80784607]
[117.75905609 197.02861023]
[118.40883636 212.01454163]
[126.73667908 225.46658325]
[119.55796814 238.51707458]
[120.20774841 253.50299072]
[120.85752869 268.48892212]
[121.50731659 283.47482300]
[128.23411560 299.03717041]
[115.14211273 309.80917358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 139]
[6 137]
[7 136]
[10 132]
[11 131]
[13 50]
[14 49]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[23 40]
[24 39]
[25 38]
[26 37]
[27 35]
[28 34]
[51 73]
[52 72]
[53 71]
[55 69]
[56 68]
[58 66]
[59 65]
[75 102]
[76 101]
[77 100]
[78 99]
[79 98]
[80 97]
[81 96]
[84 94]
[85 93]
[86 92]
[87 91]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
