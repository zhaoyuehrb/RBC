%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAGAGCACGCGGCGCUGGCCGCCGGCACUCGCGCCCUGAGGCUGCGGCCCCGGAGCGCCCGGCGGCGGUUUCGGCGCGCGGCCGGGCUGGCGAUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[34.40055084 451.14135742]
[20.84748650 457.74270630]
[6.10829592 460.90808105]
[-8.96010685 460.45349121]
[-23.48166275 456.40530396]
[-36.61211014 448.99890137]
[-47.58805847 438.66485596]
[-55.77138519 426.00402832]
[-60.68631744 411.75247192]
[-62.04711151 396.73876953]
[-59.77465057 381.83575439]
[-54.00105286 367.90994263]
[-45.06198502 355.77087402]
[-33.47715759 346.12435913]
[-19.92009735 339.53121948]
[-5.17898893 336.37478638]
[9.88913536 336.83853149]
[13.91711330 322.38946533]
[17.94509125 307.94039917]
[21.97307014 293.49133301]
[26.00104713 279.04226685]
[30.02902603 264.59320068]
[34.05700302 250.14414978]
[38.08498001 235.69509888]
[36.47034454 231.03744507]
[37.88683701 225.31430054]
[42.81709290 220.50921631]
[47.71013260 206.32971191]
[52.60317612 192.15022278]
[57.49621582 177.97071838]
[56.16347504 174.53434753]
[56.53668213 170.25613403]
[59.00364304 165.99761963]
[63.52751160 162.76426697]
[69.68370056 149.08576965]
[75.83989716 135.40727234]
[81.99608612 121.72876740]
[88.15227509 108.05027008]
[86.93799591 94.12126923]
[98.16921997 85.79353333]
[104.32541656 72.11503601]
[110.48160553 58.43653870]
[116.63780212 44.75804138]
[122.79399109 31.07954407]
[128.95018005 17.40104675]
[135.10636902 3.72254872]
[141.26257324 -9.95594883]
[147.41876221 -23.63444710]
[153.57495117 -37.31294632]
[152.18307495 -53.07280731]
[164.46215820 -61.50331497]
[170.61834717 -75.18181610]
[176.77453613 -88.86031342]
[172.92817688 -101.28594971]
[178.46658325 -112.60819244]
[189.88287354 -116.91366577]
[196.44938660 -130.39997864]
[194.75535583 -146.71139526]
[208.19139099 -156.11378479]
[222.93566895 -148.93476868]
[223.82054138 -132.55950928]
[209.93571472 -123.83347321]
[203.36920166 -110.34714508]
[205.61557007 -93.01498413]
[190.45303345 -82.70411682]
[184.29684448 -69.02561951]
[178.14065552 -55.34712601]
[179.97285461 -40.56563950]
[167.25344849 -31.15675163]
[161.09725952 -17.47825432]
[154.94107056 -3.79975700]
[148.78486633 9.87874031]
[142.62867737 23.55723763]
[136.47248840 37.23573685]
[130.31629944 50.91423416]
[124.16010284 64.59272766]
[118.00391388 78.27123260]
[111.84772491 91.94972992]
[113.06200409 105.87873077]
[101.83078003 114.20646667]
[95.67458344 127.88496399]
[89.51839447 141.56346130]
[83.36219788 155.24195862]
[77.20600891 168.92045593]
[71.67571259 182.86376953]
[66.78267670 197.04325867]
[61.88962936 211.22276306]
[56.99658966 225.40225220]
[52.53404236 239.72306824]
[48.50606537 254.17213440]
[44.47808838 268.62118530]
[40.45011139 283.07025146]
[36.42213058 297.51931763]
[32.39415359 311.96838379]
[28.36617470 326.41744995]
[24.33819771 340.86651611]
[37.47313309 348.26495361]
[48.45534515 358.59231567]
[56.64634323 371.24816895]
[61.56991577 385.49673462]
[62.93981171 400.50964355]
[60.67638779 415.41400146]
[54.91123199 429.34335327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[27 88]
[28 87]
[29 86]
[30 85]
[34 84]
[35 83]
[36 82]
[37 81]
[38 80]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[51 67]
[52 66]
[53 65]
[56 63]
[57 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
