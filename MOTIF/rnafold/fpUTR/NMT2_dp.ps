%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:52 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (NMT2)
} def

/sequence { (\
AGCAGUACGGCGGGAGGCACUAGAGGGAGCUGCGGCCGCUCCGGCCCGGCCCCGAGCACCGCCUCCCCAGCCAGCGCCGCCGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 11 0.045401113 ubox
2 71 0.004954296 ubox
2 75 0.070331303 ubox
2 77 0.238692382 ubox
2 80 0.397429050 ubox
2 83 0.296520875 ubox
3 10 0.045410179 ubox
3 70 0.004958844 ubox
3 74 0.070667734 ubox
3 76 0.238512271 ubox
3 79 0.397943845 ubox
3 82 0.296373068 ubox
5 11 0.005984159 ubox
5 71 0.005622067 ubox
5 75 0.277774838 ubox
5 77 0.377767405 ubox
5 80 0.231721657 ubox
5 83 0.106879647 ubox
6 10 0.005604127 ubox
6 70 0.005541040 ubox
6 74 0.273682185 ubox
6 76 0.369453741 ubox
6 79 0.161864124 ubox
6 82 0.101448444 ubox
8 76 0.056948377 ubox
8 79 0.281995421 ubox
8 82 0.215231554 ubox
8 84 0.016849954 ubox
9 68 0.006367300 ubox
9 72 0.921115174 ubox
9 75 0.025678179 ubox
9 78 0.308705274 ubox
9 81 0.221601363 ubox
10 67 0.004703957 ubox
10 71 0.922603804 ubox
10 75 0.035772841 ubox
10 77 0.308856985 ubox
10 80 0.221618182 ubox
10 83 0.009466168 ubox
11 70 0.918720116 ubox
11 74 0.036066126 ubox
11 76 0.308698793 ubox
11 79 0.221448105 ubox
11 82 0.009560980 ubox
12 66 0.003889974 ubox
12 67 0.955727791 ubox
12 68 0.222051007 ubox
12 72 0.004041211 ubox
12 75 0.133986362 ubox
12 78 0.101188374 ubox
12 81 0.008814695 ubox
13 66 0.981861023 ubox
13 67 0.182433745 ubox
13 68 0.005797315 ubox
13 77 0.048710491 ubox
13 80 0.008588339 ubox
14 65 0.991181682 ubox
14 66 0.129249881 ubox
14 67 0.004787732 ubox
15 64 0.999387792 ubox
16 63 0.999590850 ubox
16 72 0.025042956 ubox
16 78 0.008716100 ubox
17 62 0.999591863 ubox
17 71 0.025079153 ubox
17 75 0.008592122 ubox
17 77 0.008732210 ubox
18 61 0.997893320 ubox
18 70 0.024838768 ubox
18 74 0.008601243 ubox
18 76 0.008737879 ubox
20 56 0.160673898 ubox
20 70 0.006567440 ubox
20 74 0.008641280 ubox
21 55 0.152434786 ubox
21 69 0.008876569 ubox
21 73 0.008338155 ubox
23 65 0.003556933 ubox
24 64 0.003552026 ubox
25 52 0.004613720 ubox
25 53 0.992066924 ubox
25 60 0.003285166 ubox
25 63 0.003312329 ubox
25 67 0.026276259 ubox
26 51 0.004557648 ubox
26 52 0.992486954 ubox
26 53 0.119059117 ubox
26 59 0.003238708 ubox
26 66 0.026340226 ubox
27 51 0.992378096 ubox
27 52 0.118988092 ubox
27 65 0.026363208 ubox
28 64 0.026377772 ubox
29 50 0.999516102 ubox
29 57 0.004714360 ubox
29 63 0.026068489 ubox
30 49 0.999628356 ubox
30 56 0.004719199 ubox
31 48 0.998812298 ubox
31 55 0.004285185 ubox
32 47 0.998675035 ubox
32 53 0.003852778 ubox
32 62 0.026268214 ubox
33 48 0.005099442 ubox
33 61 0.026384409 ubox
34 46 0.999498450 ubox
34 47 0.004787213 ubox
34 51 0.004661980 ubox
34 60 0.026385185 ubox
35 45 0.999629667 ubox
35 46 0.003451866 ubox
35 50 0.004713776 ubox
35 59 0.026371203 ubox
36 44 0.999635481 ubox
36 49 0.004756516 ubox
37 43 0.999540432 ubox
37 48 0.004742792 ubox
38 42 0.935070354 ubox
38 45 0.003613464 ubox
38 57 0.026373752 ubox
39 44 0.003967961 ubox
39 56 0.026385821 ubox
40 55 0.026377041 ubox
41 54 0.026119592 ubox
42 54 0.003356968 ubox
43 51 0.022673631 ubox
43 52 0.012599719 ubox
43 53 0.004620100 ubox
44 50 0.023146361 ubox
44 51 0.011718435 ubox
44 52 0.004562048 ubox
45 49 0.023407680 ubox
54 60 0.038331328 ubox
54 65 0.008818143 ubox
55 64 0.008832740 ubox
56 62 0.003853621 ubox
56 63 0.008193415 ubox
57 61 0.004958228 ubox
70 77 0.194296330 ubox
70 80 0.005092835 ubox
70 83 0.010518422 ubox
71 76 0.194284605 ubox
71 79 0.005116093 ubox
71 82 0.010517098 ubox
74 80 0.057990431 ubox
74 83 0.677101719 ubox
75 79 0.057715492 ubox
75 82 0.677872482 ubox
75 84 0.337924250 ubox
76 81 0.645489206 ubox
76 83 0.379503075 ubox
77 82 0.378542913 ubox
78 84 0.032350481 ubox
79 83 0.032365217 ubox
9 72 0.9500000 lbox
10 71 0.9500000 lbox
11 70 0.9500000 lbox
12 67 0.9500000 lbox
13 66 0.9500000 lbox
14 65 0.9500000 lbox
15 64 0.9500000 lbox
16 63 0.9500000 lbox
17 62 0.9500000 lbox
18 61 0.9500000 lbox
25 53 0.9500000 lbox
26 52 0.9500000 lbox
27 51 0.9500000 lbox
29 50 0.9500000 lbox
30 49 0.9500000 lbox
31 48 0.9500000 lbox
32 47 0.9500000 lbox
34 46 0.9500000 lbox
35 45 0.9500000 lbox
36 44 0.9500000 lbox
37 43 0.9500000 lbox
38 42 0.9500000 lbox
74 83 0.9500000 lbox
75 82 0.9500000 lbox
76 81 0.9500000 lbox
showpage
end
%%EOF
