%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCGCAGCCAGAGCCAGAGCCGGAGCCGCAGCCGGAACCGGAGCCGGAGCCGCGGGGCAGGAGGCGGCGCCCGCGGGCGGCCGGGCCCGGC\
) } def
/len { sequence length } bind def

/coor [
[107.99030304 115.81227112]
[97.95565033 117.59811401]
[88.59762573 113.55945587]
[74.99126434 119.87347412]
[65.73014832 132.70088196]
[50.92845917 131.03979492]
[37.32209396 137.35382080]
[32.08528900 149.28533936]
[20.45987511 154.21292114]
[9.00098991 149.95884705]
[-4.80875826 155.81468201]
[-8.39967346 166.35116577]
[-17.09140778 172.94435120]
[-27.76224899 173.53770447]
[-36.74968719 168.17614746]
[-50.91972351 173.09651184]
[-61.23119736 185.84820557]
[-77.38587189 183.02711487]
[-82.76519775 167.53535461]
[-71.83538818 155.30950928]
[-55.84009552 158.92648315]
[-41.67005920 154.00610352]
[-30.37110329 138.46441650]
[-10.66459751 142.00492859]
[3.14515114 136.14909363]
[12.81374264 121.60827637]
[31.00807381 123.74745178]
[44.61443710 117.43343353]
[52.90233231 105.05764771]
[68.67723846 106.26711273]
[82.28360748 99.95308685]
[92.00969696 84.18772888]
[110.47123718 85.70923615]
[123.62548828 78.50050354]
[136.77973938 71.29177856]
[149.93399048 64.08305359]
[163.08824158 56.87432861]
[167.61570740 41.96997452]
[181.05867004 34.84668732]
[195.23979187 39.25478745]
[208.39404297 32.04606247]
[221.54829407 24.83733559]
[225.48817444 19.12105751]
[230.94253540 16.76599884]
[235.83078003 17.62006950]
[249.43714905 11.30604744]
[263.04351807 4.99202585]
[276.64987183 -1.32199550]
[279.88671875 -11.97259521]
[288.35327148 -18.85252571]
[298.99832153 -19.80211830]
[308.15991211 -14.74386406]
[322.15762329 -20.13498116]
[336.15533447 -25.52609825]
[350.15304565 -30.91721344]
[364.15075684 -36.30833054]
[378.14843750 -41.69944763]
[392.14614868 -47.09056473]
[406.05181885 -52.71482849]
[419.86157227 -58.57066727]
[423.22644043 -73.71851349]
[434.87463379 -83.97031403]
[450.32717896 -85.38404846]
[463.64224243 -77.41609192]
[469.69995117 -63.13029861]
[466.17095947 -48.01984406]
[454.41223145 -37.89500427]
[438.94528198 -36.64899063]
[425.71740723 -44.76091766]
[411.90768433 -38.90507889]
[406.87768555 -33.28227234]
[397.53729248 -33.09285355]
[383.53958130 -27.70173836]
[369.54187012 -22.31062126]
[355.54415894 -16.91950417]
[341.54644775 -11.52838802]
[327.54873657 -6.13727188]
[313.55102539 -0.74615520]
[302.77770996 15.16440868]
[282.96389771 12.28436852]
[269.35754395 18.59838867]
[255.75117493 24.91241074]
[242.14480591 31.22643280]
[228.75701904 37.99158478]
[215.60276794 45.20030975]
[202.44851685 52.40903854]
[198.53346252 66.73411560]
[185.29588318 74.23217773]
[170.29696655 70.02857971]
[157.14271545 77.23730469]
[143.98846436 84.44602966]
[130.83421326 91.65475464]
[117.67996979 98.86347961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[6 28]
[7 27]
[10 25]
[11 24]
[15 22]
[16 21]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[40 86]
[41 85]
[42 84]
[45 83]
[46 82]
[47 81]
[48 80]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 73]
[58 72]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
