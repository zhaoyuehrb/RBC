%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAUUUUUUUCUAACUAUAGCAAGCAAGAAGUGGCAGGGCGCGCACCGGCUGUCGCCAAGUGCUGUUCAACUCAGGGAGCCGGGGCUUCGCUCCGUCCCUCCCCCGGCUUCCAGAGCUUUUUGGGGUUGGAGGGUGGGAGGCCAGGGGCGUUCUCACAGCUGUGUGUCCUCUUUCCCAUCCUGCGCAGA\
) } def
/len { sequence length } bind def

/coor [
[49.67336273 231.36738586]
[37.75621414 236.73742676]
[24.75488663 237.73068237]
[12.22188473 234.25039673]
[3.28639555 246.29850769]
[-5.64909410 258.34661865]
[-14.58458328 270.39471436]
[-23.52007294 282.44284058]
[-32.45556259 294.49096680]
[-41.39105225 306.53906250]
[-50.32654190 318.58718872]
[-52.33263779 334.28070068]
[-66.12892151 339.89422607]
[-75.06441498 351.94232178]
[-68.88190460 366.00192261]
[-70.57344055 381.26739502]
[-79.68400574 393.63238525]
[-93.76290894 399.77078247]
[-109.02299500 398.03140259]
[-121.35936737 388.88214111]
[-127.45362091 374.78405762]
[-125.66641998 359.52951050]
[-116.47850800 347.22186279]
[-102.36140442 341.17184448]
[-87.11252594 343.00683594]
[-78.17703247 330.95874023]
[-76.81006622 316.12698364]
[-62.37465668 309.65170288]
[-53.43916702 297.60357666]
[-44.50367737 285.55545044]
[-35.56818771 273.50735474]
[-26.63269615 261.45922852]
[-17.69720650 249.41113281]
[-8.76171780 237.36300659]
[0.17377204 225.31489563]
[-8.11343002 210.60691833]
[-9.14930916 193.70132446]
[-2.67769527 177.98933411]
[10.04673576 166.64389038]
[26.50140190 161.97888184]
[43.39583206 164.97737122]
[51.93233490 152.64334106]
[60.46883774 140.30932617]
[69.00534058 127.97529602]
[63.60691452 113.98040771]
[48.99876022 110.57426453]
[34.39060593 107.16811371]
[19.78244972 103.76197052]
[2.29920554 109.51905060]
[-10.03958321 97.04984283]
[-24.70151329 93.88317108]
[-39.36344147 90.71649933]
[-54.80243683 96.24546051]
[-67.13346100 85.43445587]
[-63.67140961 69.40490723]
[-47.97774887 64.64665222]
[-36.19676971 76.05456543]
[-21.53483963 79.22124481]
[-6.87290955 82.38791656]
[3.47020531 76.09580231]
[15.71936703 78.62551880]
[23.18859482 89.15381622]
[37.79674911 92.55995941]
[52.40490341 95.96611023]
[67.01306152 99.37225342]
[72.48703766 94.24530792]
[61.30017090 84.25261688]
[50.11330032 74.25991821]
[35.63681412 70.33164978]
[29.02814484 56.86593246]
[34.77723694 43.01140594]
[48.97814941 38.18086243]
[61.98274612 45.65618515]
[64.95571136 60.35848236]
[74.19535828 72.17494965]
[83.43499756 83.99142456]
[88.90898132 78.86447906]
[86.46554565 64.06483459]
[84.02211761 49.26518250]
[81.57868195 34.46553040]
[79.13525391 19.66588211]
[65.65161133 4.69490862]
[73.20188904 -13.09611130]
[70.27553558 -27.80788994]
[67.34918213 -42.51966858]
[64.42282867 -57.23144913]
[61.49647141 -71.94322968]
[58.57011795 -86.65500641]
[49.54989624 -101.01021576]
[60.84704971 -113.65184021]
[76.12199402 -106.29573059]
[73.28189850 -89.58135986]
[76.20825195 -74.86958313]
[79.13460541 -60.15780258]
[82.06095886 -45.44602585]
[84.98731995 -30.73424530]
[87.91367340 -16.02246666]
[96.90200043 -11.12092495]
[101.80384064 -1.88321376]
[100.78236389 8.74528313]
[93.93490601 17.22245026]
[96.37833405 32.02209854]
[98.82176971 46.82175064]
[101.26519775 61.62139893]
[103.70863342 76.42105103]
[118.06273651 80.77532196]
[128.31661987 69.82736206]
[138.57051086 58.87939835]
[148.82438660 47.93143463]
[159.07827759 36.98347473]
[169.33215332 26.03551483]
[172.92248535 17.61834908]
[179.84449768 14.99405289]
[190.27613831 4.21532869]
[200.70777893 -6.56339550]
[211.13941956 -17.34211922]
[221.57106018 -28.12084389]
[225.02868652 -44.15134048]
[240.72103882 -48.91392517]
[252.50517273 -37.50925827]
[248.25857544 -21.66948509]
[232.34979248 -17.68920517]
[221.91815186 -6.91048050]
[211.48651123 3.86824393]
[201.05487061 14.64696789]
[190.62322998 25.42569160]
[180.28012085 36.28939819]
[170.02622986 47.23735809]
[159.77235413 58.18532181]
[149.51846313 69.13328552]
[139.26458740 80.08124542]
[129.01069641 91.02920532]
[131.57511902 105.80837250]
[144.91786194 112.66192627]
[158.26060486 119.51548767]
[171.60334778 126.36904144]
[184.94609070 133.22259521]
[198.28883362 140.07615662]
[211.63157654 146.92971802]
[224.97431946 153.78327942]
[238.31704712 160.63684082]
[251.65979004 167.49038696]
[265.00253296 174.34394836]
[275.16799927 170.41792297]
[285.59945679 172.69670105]
[292.89483643 180.18940735]
[294.81185913 190.24626160]
[307.92321777 197.53271484]
[321.03457642 204.81916809]
[334.14593506 212.10560608]
[347.25729370 219.39205933]
[360.36865234 226.67851257]
[364.74121094 226.44812012]
[368.56961060 227.52203369]
[371.50872803 229.56639099]
[373.35842896 232.16917419]
[374.07650757 234.89468384]
[386.68322754 243.02305603]
[399.28994751 251.15142822]
[415.68698120 251.41522217]
[423.41946411 265.87692261]
[414.53289795 279.65954590]
[398.16903687 278.58474731]
[391.16156006 263.75814819]
[378.55484009 255.62979126]
[365.94812012 247.50140381]
[353.08218384 239.78987122]
[339.97082520 232.50341797]
[326.85946655 225.21696472]
[313.74813843 217.93051147]
[300.63677979 210.64405823]
[287.52542114 203.35762024]
[268.27758789 205.10363770]
[258.14898682 187.68669128]
[244.80624390 180.83312988]
[231.46350098 173.97956848]
[218.12075806 167.12602234]
[204.77801514 160.27246094]
[191.43527222 153.41889954]
[178.09252930 146.56533813]
[164.74978638 139.71179199]
[151.40704346 132.85823059]
[138.06430054 126.00466919]
[124.72156525 119.15110779]
[81.33936310 136.51179504]
[72.80286407 148.84582520]
[64.26635742 161.17984009]
[55.72985840 173.51387024]
[63.07063675 184.52168274]
[66.22126007 197.33917236]
[64.82702637 210.43220520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 35]
[5 34]
[6 33]
[7 32]
[8 31]
[9 30]
[10 29]
[11 28]
[13 26]
[14 25]
[41 188]
[42 187]
[43 186]
[44 185]
[45 65]
[46 64]
[47 63]
[48 62]
[50 59]
[51 58]
[52 57]
[77 105]
[78 104]
[79 103]
[80 102]
[81 101]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
[88 92]
[106 132]
[107 131]
[108 130]
[109 129]
[110 128]
[111 127]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
[133 184]
[134 183]
[135 182]
[136 181]
[137 180]
[138 179]
[139 178]
[140 177]
[141 176]
[142 175]
[143 174]
[147 172]
[148 171]
[149 170]
[150 169]
[151 168]
[152 167]
[157 166]
[158 165]
[159 164]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
