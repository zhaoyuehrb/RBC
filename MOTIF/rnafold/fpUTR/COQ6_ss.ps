%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUUCCUUUCCCGGGGGCAGUCUCUUUUCUCUCCUCACCUGACGGCUCCCCUCCGCGCCUCCGGGGGCUCCCUCAGGCCUCCCCACGGUCAUUUCAGCUGGACAGAGGCAGCAGCGACAGUGACAGCGAUAGUGGCAGCAGCGGUGGCAGCGAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[103.87583923 114.85096741]
[100.08846283 129.36495972]
[96.30108643 143.87893677]
[104.50786591 157.38539124]
[100.67932129 172.71894836]
[87.08685303 180.78247070]
[71.79463959 176.79202271]
[63.87527466 163.11506653]
[68.02717590 147.86589050]
[81.78710175 140.09156799]
[85.57447815 125.57758331]
[89.36184692 111.06359100]
[83.34573364 102.14522552]
[84.44242859 90.48741913]
[70.08832550 94.84168243]
[55.73421860 99.19595337]
[41.38011551 103.55022430]
[27.02601051 107.90449524]
[12.67190456 112.25876617]
[1.71198308 123.66887665]
[-12.71327686 119.95927429]
[-27.06738091 124.31354523]
[-41.42148590 128.66781616]
[-41.70026016 143.79321289]
[-46.64131165 158.09150696]
[-55.76056290 170.16189575]
[-68.16460419 178.82185364]
[-82.63821411 183.22297668]
[-97.76341248 182.93406677]
[-112.05839539 177.98342896]
[-124.12267303 168.85609436]
[-132.77432251 156.44625854]
[-137.16574097 141.96969604]
[-136.86669922 126.84469604]
[-131.90649414 112.55303955]
[-122.77107239 100.49487305]
[-110.35543060 91.85153961]
[-95.87593842 87.46982574]
[-80.75113678 87.77900696]
[-66.46280670 92.74879456]
[-54.41076660 101.89228821]
[-45.77575684 114.31371307]
[-31.42165184 109.95944214]
[-17.06754684 105.60517120]
[-7.13432646 94.50650787]
[8.31763458 97.90466309]
[22.67173958 93.55039215]
[37.02584457 89.19612122]
[51.37995148 84.84185028]
[65.73405457 80.48757935]
[80.08815765 76.13330841]
[93.58438110 69.58717346]
[105.89040375 61.01035309]
[118.19642639 52.43353271]
[130.41764832 43.73631287]
[142.55290222 34.91953659]
[154.68817139 26.10275650]
[166.73628235 17.16726685]
[178.69609070 8.11392879]
[190.65589905 -0.93941069]
[196.98916626 -15.43769646]
[211.80677795 -16.95020676]
[223.76658630 -26.00354576]
[228.68104553 -40.17563629]
[224.89366150 -54.68962479]
[221.10629272 -69.20361328]
[217.31892395 -83.71759796]
[213.53153992 -98.23158264]
[209.74417114 -112.74556732]
[205.95680237 -127.25955200]
[192.19686890 -135.03387451]
[188.04496765 -150.28305054]
[195.96434021 -163.96000671]
[211.25654602 -167.95045471]
[224.84901428 -159.88693237]
[228.67756653 -144.55339050]
[220.47077942 -131.04693604]
[224.25816345 -116.53294373]
[228.04553223 -102.01895905]
[231.83290100 -87.50496674]
[235.62028503 -72.99098206]
[239.40765381 -58.47699738]
[243.19502258 -43.96300888]
[249.70245361 -40.23428726]
[252.77311707 -54.91662216]
[267.68572998 -56.53330994]
[273.83154297 -42.85013962]
[262.71731567 -32.77683640]
[269.22473145 -29.04811287]
[283.66156006 -33.11972046]
[298.09838867 -37.19132614]
[312.53521729 -41.26293182]
[326.97204590 -45.33454132]
[341.40887451 -49.40614700]
[346.86386108 -63.81271744]
[359.60696411 -72.14738464]
[374.63656616 -71.38925934]
[386.19940186 -62.03838348]
[400.63623047 -66.10999298]
[415.07305908 -70.18159485]
[429.50988770 -74.25320435]
[442.01696777 -87.73547363]
[458.83990479 -82.81810760]
[473.19400024 -87.17237854]
[476.76715088 -102.04449463]
[487.23547363 -113.05860138]
[501.71505737 -117.32570648]
[516.28887939 -113.79587555]
[527.06652832 -103.51441956]
[541.42059326 -107.86869049]
[552.22991943 -120.20120239]
[568.25994873 -116.74136353]
[573.02038574 -101.04835510]
[561.61407471 -89.26580048]
[545.77490234 -93.51457977]
[531.42077637 -89.16031647]
[528.17156982 -74.62386322]
[518.01495361 -63.59213638]
[503.60494995 -59.09568024]
[488.78173828 -62.43767548]
[477.54827881 -72.81826782]
[463.19418335 -68.46399689]
[457.19329834 -57.92347336]
[445.22937012 -54.19808960]
[433.58151245 -59.81637573]
[419.14468384 -55.74477005]
[404.70785522 -51.67316437]
[390.27102661 -47.60155487]
[385.29791260 -33.58706284]
[372.87918091 -25.08769989]
[357.65902710 -25.53591728]
[345.48049927 -34.96931839]
[331.04367065 -30.89771080]
[316.60684204 -26.82610512]
[302.17001343 -22.75449753]
[287.73318481 -18.68289185]
[273.29635620 -14.61128426]
[267.57296753 -10.14875889]
[261.23498535 -7.21434402]
[254.66322327 -5.85197258]
[248.22622681 -6.01553917]
[242.26000977 -7.57669210]
[237.05050659 -10.33701706]
[232.81993103 -14.04373646]
[220.86012268 -4.99039745]
[215.38229370 8.86033249]
[199.70924377 11.02039909]
[187.74942017 20.07373810]
[175.78961182 29.12707710]
[172.33660889 35.70571899]
[163.50494385 38.23801041]
[151.36968994 47.05479050]
[139.23443604 55.87157059]
[135.65292358 62.38114929]
[126.77324677 64.73955536]
[114.46722412 73.31637573]
[102.16120148 81.89319611]
[112.69300842 87.93295288]
[116.75277710 98.85491943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[21 44]
[22 43]
[23 42]
[52 157]
[53 156]
[54 155]
[55 153]
[56 152]
[57 151]
[58 149]
[59 148]
[60 147]
[62 145]
[63 144]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[89 137]
[90 136]
[91 135]
[92 134]
[93 133]
[94 132]
[98 128]
[99 127]
[100 126]
[101 125]
[103 122]
[104 121]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
