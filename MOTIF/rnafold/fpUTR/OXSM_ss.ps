%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGCGUGUGCGCGUGCGCUCGAGAGCGUCAUCGCCCCCGACUGUGGAGAAGUGUCCGGGGUAGCCCCGUUACAGGAAUGUGUUUCUGAUCAUCUGAAUCUUAAUC\
) } def
/len { sequence length } bind def

/coor [
[102.89887238 130.78625488]
[95.77986908 143.98927307]
[88.66086578 157.19229126]
[81.54185486 170.39530945]
[74.42285156 183.59834290]
[67.30384827 196.80136108]
[68.32140350 213.16889954]
[54.50776672 222.00720215]
[40.07321548 214.22415161]
[39.86677933 197.82630920]
[54.10082626 189.68235779]
[61.21982956 176.47932434]
[68.33883667 163.27630615]
[75.45783997 150.07328796]
[82.57685089 136.87026978]
[89.69585419 123.66724396]
[80.73847198 111.63539886]
[66.04836273 114.66866302]
[51.35825348 117.70192719]
[36.66814423 120.73519135]
[21.97803688 123.76845551]
[10.09384346 135.06880188]
[-5.55591679 130.16809082]
[-8.87211227 114.10773468]
[3.55667400 103.40926361]
[18.94477272 109.07834625]
[33.63488388 106.04508209]
[48.32499313 103.01181793]
[63.01510239 99.97855377]
[77.70520782 96.94528961]
[81.54927826 90.50532532]
[68.66947937 82.81697845]
[76.35803986 69.93730164]
[89.23741913 77.62539673]
[93.08148193 71.18543243]
[88.77943420 56.81558990]
[84.47738647 42.44574738]
[80.17533875 28.07590675]
[75.87329102 13.70606327]
[64.50310516 2.70472574]
[68.26513672 -11.70695019]
[63.96308517 -26.07679176]
[59.66103745 -40.44663620]
[44.62597656 -43.31115723]
[32.65151978 -52.84378433]
[26.48930931 -66.85398865]
[27.55537796 -82.12232208]
[35.60474777 -95.14024353]
[48.78773880 -102.91632080]
[64.07498932 -103.66367340]
[77.95360565 -97.21056366]
[87.23438263 -85.03986359]
[89.78466034 -69.94832611]
[85.01840973 -55.40385818]
[74.03088379 -44.74868393]
[78.33293152 -30.37884140]
[82.63497925 -16.00899887]
[93.69744873 -6.03548813]
[90.24313354 9.40401459]
[94.54518127 23.77385712]
[98.84722900 38.14369965]
[103.14927673 52.51354218]
[107.45132446 66.88338470]
[103.25170135 52.48327637]
[106.49657440 37.83845520]
[116.38582611 26.56003571]
[130.48097229 21.42904663]
[145.30642700 23.71068573]
[157.20654297 32.84235001]
[163.24699402 46.57234955]
[161.93832397 61.51515579]
[153.60322571 73.98616791]
[140.29696655 80.91029358]
[125.30178070 80.58052063]
[140.29542542 81.01679230]
[155.28909302 81.45305634]
[170.28274536 81.88932800]
[185.27639771 82.32559967]
[200.27005005 82.76187134]
[214.43994141 74.50680542]
[228.53767395 82.88450623]
[228.06071472 99.27671814]
[213.49971008 106.82053375]
[199.83378601 97.75552368]
[184.84011841 97.31925201]
[169.84646606 96.88298798]
[154.85281372 96.44671631]
[139.85916138 96.01044464]
[124.86550903 95.57417297]
[137.81451416 103.14537811]
[150.76353455 110.71658325]
[165.69674683 112.13036346]
[179.55471802 117.87117004]
[191.11303711 127.43177795]
[199.35050964 139.96748352]
[203.53932190 154.37074280]
[203.30940247 169.36898804]
[198.68104553 183.63706970]
[190.06320190 195.91439819]
[178.21723938 205.11621094]
[164.18981934 210.42953491]
[149.22027588 211.38490295]
[134.63121033 207.89791870]
[121.71159363 200.27665710]
[111.60291290 189.19448853]
[105.19828796 175.63053894]
[103.06357574 160.78579712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[41 57]
[42 56]
[43 55]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
