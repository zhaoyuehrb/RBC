%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUGGACUCGGGGGCAGCGGGCCUGCUCUGAGCCCUCACCCUGGACUUGUCUCCUCUGUUCAGUUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[97.38754272 339.65817261]
[89.89099884 326.43432617]
[88.03059387 311.34765625]
[92.09004211 296.69879150]
[101.45030212 284.72155762]
[114.68400574 277.24243164]
[112.82861328 262.35760498]
[110.97322083 247.47280884]
[109.11783600 232.58799744]
[107.26244354 217.70318604]
[105.40705872 202.81837463]
[93.53198242 193.90107727]
[91.43831635 178.83219910]
[100.87212372 166.43699646]
[99.01673126 151.55218506]
[97.16133881 136.66737366]
[95.30595398 121.78256226]
[93.45056152 106.89775848]
[89.92545319 102.59427643]
[89.23424530 96.58428955]
[92.10949707 90.71347809]
[91.48961639 75.72628784]
[90.86974335 60.73910141]
[90.24987030 45.75191498]
[89.62999725 30.76472855]
[88.70051575 15.79355431]
[87.46182251 0.84478724]
[74.38433075 -4.54361486]
[64.99639130 -15.03355694]
[61.12347794 -28.49825478]
[63.48072052 -42.24144363]
[71.54167938 -53.53727722]
[83.65453339 -60.17097092]
[83.03466034 -75.15815735]
[82.41478729 -90.14533997]
[73.18308258 -103.69922638]
[80.54799652 -118.35153198]
[96.93313599 -119.02922821]
[105.48287201 -105.03515625]
[97.40196991 -90.76522064]
[98.02184296 -75.77803040]
[98.64172363 -60.79084396]
[113.03731537 -53.75103378]
[122.03889465 -40.38132477]
[123.15929413 -24.20958710]
[116.00590515 -9.55934811]
[102.41059113 -0.39390293]
[103.64928436 14.55486488]
[107.44971466 21.14872360]
[104.61717987 30.14485359]
[105.23705292 45.13204193]
[105.85693359 60.11922836]
[106.47680664 75.10641479]
[107.09667969 90.09359741]
[108.33537292 105.04236603]
[110.19075775 119.92717743]
[112.04615021 134.81198120]
[113.90154266 149.69679260]
[115.75692749 164.58160400]
[127.94490051 174.28166199]
[129.61448669 189.40339661]
[120.29186249 200.96299744]
[122.14725494 215.84779358]
[124.00263977 230.73260498]
[125.85803223 245.61741638]
[127.71342468 260.50222778]
[129.56881714 275.38702393]
[144.23358154 279.38864136]
[156.24766541 288.70156860]
[163.77897644 301.90563965]
[165.67906189 316.98736572]
[161.65815735 331.64685059]
[152.32945251 343.64865112]
[139.11547852 351.16259766]
[124.03127289 353.04284668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 48]
[27 47]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
