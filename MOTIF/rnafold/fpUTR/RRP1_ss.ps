%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGGCCAGGAGGAGGCGGGCGCAGGAGGCGCGUGCUCAGUGUGCUGGGUACCAGGCGACUCCGGGACAGGGGGUCUCGGCCGUCGGCGUC\
) } def
/len { sequence length } bind def

/coor [
[100.57189941 241.33056641]
[99.07045746 226.40589905]
[97.56902313 211.48123169]
[96.06758881 196.55656433]
[94.56615448 181.63189697]
[92.81554413 166.73440552]
[90.81623840 151.86824036]
[88.81693268 137.00207520]
[86.81762695 122.13591766]
[82.39908600 105.43598938]
[89.95108032 95.33563995]
[81.46186829 82.96901703]
[72.97266388 70.60239410]
[64.48345947 58.23577499]
[50.92707825 57.28265381]
[40.58731842 48.76860809]
[37.15288162 36.02511215]
[41.67775345 23.83550072]
[33.60651779 11.19211578]
[14.54575062 12.03212547]
[-1.71929872 -0.26053602]
[-6.73196268 -21.37053490]
[-21.05850029 -25.81466866]
[-35.38503647 -30.25880241]
[-49.71157455 -34.70293808]
[-64.52011108 -28.53149414]
[-78.50812531 -36.38739014]
[-80.94519806 -52.24425888]
[-69.96182251 -63.93806076]
[-53.98350525 -62.49831772]
[-45.26744080 -49.02947235]
[-30.94090462 -44.58533859]
[-16.61436653 -40.14120483]
[-2.28782916 -35.69707108]
[9.00352955 -45.57154465]
[6.50858927 -60.36259842]
[4.01364899 -75.15365601]
[1.51870871 -89.94470978]
[-0.97623158 -104.73576355]
[-3.47117186 -119.52681732]
[-5.96611214 -134.31787109]
[-8.46105289 -149.10891724]
[-19.32000923 -161.39773560]
[-13.85122204 -176.85815430]
[2.31948924 -179.58581543]
[12.55708313 -166.77473450]
[6.33000135 -151.60386658]
[8.82494164 -136.81280518]
[11.31988239 -122.02175140]
[13.81482220 -107.23069763]
[16.30976295 -92.43964386]
[18.80470276 -77.64859009]
[21.29964256 -62.85754013]
[23.79458427 -48.06648636]
[41.78215408 -42.34002304]
[52.97885513 -28.21086311]
[54.30565643 -11.08356571]
[46.24990082 3.12088037]
[54.32113647 15.76426411]
[70.80320740 18.60896301]
[80.39766693 32.71630478]
[76.85008240 49.74656677]
[85.33928680 62.11318970]
[93.82849884 74.47981262]
[102.31770325 86.84643555]
[114.96108246 94.91767120]
[129.75213623 97.41261292]
[144.54319763 99.90755463]
[159.33424377 102.40249634]
[174.12530518 104.89743042]
[187.97914124 96.80727386]
[202.88943481 102.72865295]
[207.41827393 118.11920929]
[198.09153748 131.17260742]
[182.06387329 131.87541199]
[171.63035583 119.68848419]
[156.83930969 117.19355011]
[142.04824829 114.69860840]
[127.25720215 112.20366669]
[112.46614838 109.70872498]
[101.68379211 120.13661194]
[103.68309784 135.00277710]
[105.68239594 149.86894226]
[107.68170166 164.73509216]
[112.00441742 173.01718140]
[109.49082184 180.13046265]
[110.99225616 195.05513000]
[112.49369049 209.97979736]
[113.99512482 224.90446472]
[115.49656677 239.82913208]
[125.51046753 252.81581116]
[119.02125549 267.87643433]
[102.70446777 269.51791382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 86]
[6 84]
[7 83]
[8 82]
[9 81]
[11 65]
[12 64]
[13 63]
[14 62]
[18 59]
[19 58]
[22 34]
[23 33]
[24 32]
[25 31]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[66 80]
[67 79]
[68 78]
[69 77]
[70 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
