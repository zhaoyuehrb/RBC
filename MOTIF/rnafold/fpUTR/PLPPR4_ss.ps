%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCAUUGCAGCAACAGCUUGGAGGAGGGAGCUGGACGUCGUCUCUCGCCAGAAAAACGGGGAGCAGGAGCCAGACUAGGGGAGGAAGAGGACUGGCCCGCUCAGGGAAUAGCUGGGUUGCUGCAAAAAGGGGCGGGGAGAAGGCGGGGGCGCUGC\
) } def
/len { sequence length } bind def

/coor [
[6.58889341 379.08807373]
[3.91945124 394.21319580]
[-5.96720600 405.96688843]
[-20.41161728 411.18750000]
[-35.52830887 408.47064209]
[-47.25096512 398.54721069]
[-52.42625427 384.08648682]
[-49.66204453 368.97839355]
[-39.70189667 357.28689575]
[-25.22504234 352.15695190]
[-22.57168770 337.39349365]
[-19.91833496 322.63003540]
[-17.26498032 307.86657715]
[-14.61162567 293.10311890]
[-18.01616478 291.29995728]
[-21.16836166 289.08502197]
[-24.01867867 286.49313354]
[-37.00905991 293.99313354]
[-49.99944305 301.49313354]
[-62.98982239 308.99313354]
[-75.98020172 316.49313354]
[-88.97058105 323.99313354]
[-90.45857239 339.43869019]
[-100.76624298 351.03747559]
[-115.93009186 354.32946777]
[-130.11930847 348.04888916]
[-137.87783813 334.61071777]
[-136.22239685 319.18218994]
[-125.78949738 307.69592285]
[-110.59082794 304.56860352]
[-96.47058105 311.00274658]
[-83.48020172 303.50274658]
[-70.48982239 296.00274658]
[-57.49944305 288.50274658]
[-44.50905991 281.00274658]
[-31.51867867 273.50274658]
[-29.98897934 251.77920532]
[-14.35323620 236.31785583]
[7.80928230 235.00683594]
[15.69093704 222.24441528]
[23.57259178 209.48197937]
[31.45424652 196.71955872]
[31.55859566 181.82531738]
[45.39292145 174.14924622]
[53.27457809 161.38682556]
[61.15623093 148.62440491]
[69.03788757 135.86196899]
[76.91954041 123.09954834]
[84.80119324 110.33712006]
[82.36381531 87.10573578]
[107.21632385 75.73712158]
[110.16085052 61.02896500]
[113.10536957 46.32081223]
[116.04988861 31.61265755]
[102.70033264 24.56501389]
[91.88848114 14.05187225]
[84.48459625 0.93137175]
[81.08126068 -13.72896957]
[81.94596863 -28.73910713]
[87.00009918 -42.88307571]
[95.82601929 -55.01748657]
[107.70152283 -64.16397095]
[121.65898895 -69.58803558]
[136.56416321 -70.85807800]
[139.50868225 -85.56623077]
[142.45320129 -100.27438354]
[145.39772034 -114.98253632]
[144.01109314 -124.06623077]
[148.54844666 -129.95089722]
[151.78298950 -144.59800720]
[150.57609558 -153.70732117]
[155.22883606 -159.50120544]
[158.75212097 -174.08154297]
[162.27540588 -188.66189575]
[165.79870605 -203.24223328]
[169.32199097 -217.82258606]
[165.04263306 -233.05404663]
[175.55291748 -243.60786438]
[179.07621765 -258.18820190]
[167.23229980 -267.81549072]
[160.74618530 -281.63189697]
[160.90571594 -296.89416504]
[167.67918396 -310.57199097]
[179.72174072 -319.94961548]
[194.64230347 -323.16510010]
[209.47840881 -319.57998657]
[221.28431702 -309.90615845]
[227.71597290 -296.06430054]
[227.49635315 -280.80276489]
[220.66906738 -267.15173340]
[208.58967590 -257.82162476]
[193.65655518 -254.66491699]
[190.13327026 -240.08457947]
[194.66464233 -225.89599609]
[183.90234375 -214.29928589]
[180.37904358 -199.71894836]
[176.85575867 -185.13859558]
[173.33245850 -170.55825806]
[169.80917358 -155.97792053]
[166.43009949 -141.36347961]
[163.19555664 -126.71636963]
[160.10588074 -112.03801727]
[157.16136169 -97.32986450]
[154.21684265 -82.62171173]
[151.27232361 -67.91355896]
[164.53985596 -61.00343704]
[175.33357239 -50.62427139]
[182.77278137 -37.61105347]
[186.24719238 -23.01416206]
[185.46688843 -8.01458645]
[180.48658752 6.17162466]
[171.70184326 18.39195442]
[159.81764221 27.65104866]
[145.79185486 33.19178391]
[130.75804138 34.55717850]
[127.81352234 49.26533127]
[124.86900330 63.97348785]
[121.92448425 78.68164062]
[129.42448425 91.67201996]
[143.63436890 96.47606659]
[157.84426880 101.28012085]
[173.39556885 98.37014771]
[182.97442627 109.77606201]
[197.18431091 114.58010864]
[211.23719788 107.34878540]
[226.26168823 112.25184631]
[233.34403992 126.38039398]
[228.28239441 141.35221863]
[214.07975769 148.28479004]
[199.16229248 143.06513977]
[192.38026428 128.79000854]
[178.17036438 123.98595428]
[163.63546753 127.23954010]
[153.04022217 115.49001312]
[138.83032227 110.68596649]
[124.62042999 105.88191986]
[112.36598206 118.01053619]
[97.56362152 118.21877289]
[89.68196869 130.98120117]
[81.80031586 143.74362183]
[73.91865540 156.50605774]
[66.03700256 169.26847839]
[58.15534973 182.03091431]
[57.48725128 197.83799744]
[44.21667099 204.60121155]
[36.33501816 217.36363220]
[28.45336342 230.12606812]
[20.57170868 242.88848877]
[27.06384468 252.88908386]
[29.37112808 264.52890015]
[27.20551300 276.13815308]
[20.91756058 286.06732178]
[11.44047737 292.92153931]
[0.15183263 295.75646973]
[-2.50152159 310.51995850]
[-5.15487576 325.28341675]
[-7.80822992 340.04687500]
[-10.46158409 354.81033325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 158]
[11 157]
[12 156]
[13 155]
[14 154]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[39 148]
[40 147]
[41 146]
[42 145]
[44 143]
[45 142]
[46 141]
[47 140]
[48 139]
[49 138]
[51 118]
[52 117]
[53 116]
[54 115]
[64 105]
[65 104]
[66 103]
[67 102]
[69 101]
[70 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[78 93]
[79 92]
[119 136]
[120 135]
[121 134]
[123 132]
[124 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
