%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCGGAAUGCUGCCCGAUGGCCCUGGGUCCUCGCUGUGGGGCAAUCCGGGCUUGCAGACGAGGUAAGGUCGAUUCCAUUUGGCCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[199.63928223 212.97785950]
[202.37327576 203.88870239]
[191.41073608 193.65040588]
[180.44819641 183.41210938]
[169.31245422 173.36247253]
[158.00675964 163.50440979]
[145.27593994 166.17019653]
[133.18040466 160.87756348]
[126.29792786 149.38163757]
[127.37631226 135.82991028]
[116.41377258 125.59161377]
[105.45123291 115.35331726]
[89.08452606 112.09514618]
[84.16971588 96.14744568]
[72.86401367 86.28938293]
[61.55832291 76.43132782]
[50.25262451 66.57327271]
[38.94692993 56.71522141]
[27.47457695 47.05162430]
[15.83890724 37.58530807]
[0.25104061 34.87809372]
[-4.73873091 20.84415627]
[-16.37440109 11.37783718]
[-28.01006889 1.91151774]
[-39.64574051 -7.55480146]
[-51.28141022 -17.02112007]
[-69.43975830 -19.41834831]
[-75.24269104 -35.88413239]
[-87.19476318 -44.94767761]
[-99.14684296 -54.01122284]
[-115.47632599 -55.52120972]
[-122.08665466 -70.52906036]
[-112.17769623 -83.59598541]
[-95.94293213 -81.27985382]
[-90.08329773 -65.96330261]
[-78.13121796 -56.89975357]
[-66.17914581 -47.83620834]
[-54.02186584 -49.14950180]
[-43.95866394 -41.51466751]
[-41.81509018 -28.65678978]
[-30.17942047 -19.19047165]
[-18.54375076 -9.72415161]
[-6.90808105 -0.25783247]
[4.72758818 9.20848656]
[19.48319435 11.23860359]
[25.30522537 25.94963646]
[36.94089508 35.41595459]
[44.26947021 37.23268127]
[48.80498505 45.40952682]
[60.11067963 55.26758194]
[71.41637421 65.12563324]
[82.72206879 74.98368835]
[94.02777100 84.84174347]
[105.80557251 84.77713776]
[114.54934692 92.66810608]
[115.68952942 104.39077759]
[126.65206909 114.62907410]
[137.61460876 124.86737061]
[154.97947693 123.89685822]
[167.49984741 135.48059082]
[167.86482239 152.19871521]
[179.17051697 162.05677795]
[187.88877869 165.43663025]
[190.68649292 172.44956970]
[201.64903259 182.68786621]
[212.61157227 192.92616272]
[234.03446960 190.14257812]
[250.68586731 203.47889709]
[252.59977722 224.45617676]
[265.14251709 232.68295288]
[277.68524170 240.90972900]
[290.22796631 249.13650513]
[302.77069092 257.36328125]
[315.31344604 265.59005737]
[330.73422241 262.12960815]
[344.04037476 270.65728760]
[347.33761597 286.11380005]
[338.66973877 299.32907104]
[323.17922974 302.46270752]
[310.05633545 293.65557861]
[307.08666992 278.13281250]
[294.54391479 269.90600586]
[282.00119019 261.67922974]
[269.45846558 253.45246887]
[256.91574097 245.22569275]
[244.37300110 236.99890137]
[236.53363037 241.77952576]
[227.49726868 243.64176941]
[218.31900024 242.33772278]
[210.08074951 237.99099731]
[203.76383972 231.08560181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 66]
[3 65]
[4 64]
[5 62]
[6 61]
[10 58]
[11 57]
[12 56]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[19 47]
[20 46]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[28 37]
[29 36]
[30 35]
[69 86]
[70 85]
[71 84]
[72 83]
[73 82]
[74 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
