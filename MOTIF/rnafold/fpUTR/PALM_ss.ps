%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAUAAACAGCAGCUUUGCGCGGGGCGAUGCCCGAGCCGGUGCCGCCGCCCCCGCGCCGCGCAGCCCCGGCCGCCAGGCCUUAGCCCGCCCCGGCCCCCGCCAGGCCGCGUCCCCCUCCCCUCCCCUCCCCCGCGCGCCACCCGCGCCCGCCCCCGCCCGGCACCGCGGACCCACCCGGACCUCGGCGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[102.90075684 206.59342957]
[87.95118713 207.82243347]
[73.76531982 202.94787598]
[62.72867966 192.78950500]
[56.69720078 179.05555725]
[56.68515778 164.05557251]
[62.69456863 150.31195068]
[73.71488190 140.13586426]
[87.89289856 135.23854065]
[102.84442139 136.44352722]
[116.05778503 143.55036926]
[108.66266632 130.50000000]
[102.97911072 131.56607056]
[97.19646454 131.58215332]
[91.50707245 130.54769897]
[86.10017395 128.49713135]
[81.15563965 125.49866486]
[76.83792877 121.65202332]
[73.29065704 117.08516693]
[59.10133743 121.94964600]
[44.91201401 126.81412506]
[30.72269249 131.67860413]
[16.53337097 136.54307556]
[2.34404802 141.40754700]
[-11.84527397 146.27203369]
[-26.03459740 151.13650513]
[-40.18427277 156.11512756]
[-54.29338837 161.20756531]
[-61.43173218 177.17127991]
[-77.58669281 182.92625427]
[-92.60675812 175.37416077]
[-106.63200378 180.69323730]
[-120.61394501 186.12510681]
[-134.55168152 191.66944885]
[-148.48941040 197.21377563]
[-160.97198486 208.68641663]
[-175.45179749 199.86759949]
[-170.98603821 183.51237488]
[-154.03373718 183.27604675]
[-140.09600830 177.73170471]
[-126.15827179 172.18737793]
[-121.09839630 166.78662109]
[-111.95107269 166.66798401]
[-97.92583466 161.34892273]
[-94.32963562 148.96762085]
[-84.10366821 140.79960632]
[-70.84510803 140.00515747]
[-59.38582230 147.09844971]
[-45.27671051 142.00601196]
[-40.04546738 136.77105713]
[-30.89907265 136.94718933]
[-16.70975113 132.08270264]
[-2.52042866 127.21823120]
[11.66889381 122.35375214]
[25.85821533 117.48927307]
[40.04753876 112.62480164]
[54.23686218 107.76032257]
[68.42618561 102.89584351]
[73.56322479 77.37593079]
[97.59004211 62.19135284]
[92.15816498 48.20941162]
[86.72628021 34.22746658]
[81.29440308 20.24552536]
[69.08484650 10.18385029]
[71.68814850 -4.48148680]
[66.25627136 -18.46342850]
[60.82439423 -32.44536972]
[44.55279160 -44.33007812]
[48.29384995 -63.29302216]
[42.41434860 -77.09271240]
[36.53485107 -90.89240265]
[22.14827156 -96.86434937]
[16.38220596 -110.94295502]
[22.16420174 -124.62155914]
[16.28470230 -138.42124939]
[10.40520382 -152.22093201]
[-4.56693745 -162.93025208]
[-1.78946006 -180.25230408]
[-7.89050961 -193.95549011]
[-13.99155903 -207.65867615]
[-29.19697571 -210.75300598]
[-39.65476227 -222.21661377]
[-41.34368896 -237.64151001]
[-33.61432648 -251.09648132]
[-19.43877220 -257.40783691]
[-4.26781750 -254.14874268]
[6.06499624 -242.57237244]
[7.58649158 -227.13006592]
[-0.28837749 -213.75971985]
[5.81267214 -200.05653381]
[11.91372204 -186.35336304]
[23.09749031 -181.72169495]
[28.28881645 -170.34419250]
[24.20489502 -158.10043335]
[30.08439445 -144.30075073]
[35.96389389 -130.50105286]
[49.83426285 -125.19554901]
[55.99349213 -111.28445435]
[50.33454132 -96.77190399]
[56.21404266 -82.97221375]
[62.09354019 -69.17252350]
[71.89257812 -66.21865845]
[78.58303833 -58.18559265]
[79.76477814 -47.57717133]
[74.80633545 -37.87724686]
[80.23821259 -23.89530754]
[85.67008972 -9.91336441]
[97.49111938 -0.85177082]
[95.27634430 14.81364822]
[100.70822906 28.79558945]
[106.14010620 42.77753067]
[111.57198334 56.75947189]
[113.50836182 41.88498306]
[115.44474030 27.01049423]
[117.38111877 12.13600540]
[113.38638306 -2.32228231]
[114.05445099 -17.30739784]
[119.31994629 -31.35284424]
[128.66757202 -43.08408356]
[141.18252563 -51.35305786]
[155.64004517 -55.35053253]
[170.62528992 -54.68529892]
[184.67173767 -49.42246246]
[196.40473938 -40.07706451]
[204.67608643 -27.56367683]
[208.67630005 -13.10690212]
[208.01390076 1.87846482]
[202.75372314 15.92590427]
[193.41055298 27.66068268]
[180.89872742 35.93439484]
[166.44290161 39.93732071]
[154.67778015 49.24226379]
[142.91265869 58.54720688]
[131.14753723 67.85214996]
[145.93344116 65.32678986]
[160.71932983 62.80143738]
[175.50521851 60.27608109]
[190.29110718 57.75072479]
[200.69953918 45.54236221]
[216.72860718 46.21220016]
[226.08216858 59.24639511]
[221.58499146 74.64623260]
[206.68690491 80.59826660]
[192.81646729 72.53661346]
[178.03057861 75.06197357]
[163.24467468 77.58732605]
[148.45878601 80.11268616]
[133.67289734 82.63803864]
[135.78907776 98.38044739]
[131.28654480 112.70025635]
[121.71304321 123.10488892]
[129.10815430 136.15525818]
[137.82688904 148.36114502]
[147.77374268 159.58880615]
[157.72058105 170.81646729]
[167.66741943 182.04412842]
[177.61425781 193.27178955]
[187.56109619 204.49945068]
[197.50793457 215.72711182]
[212.45059204 220.92590332]
[215.09887695 235.58319092]
[225.04573059 246.81085205]
[240.58303833 247.91969299]
[250.51060486 259.44781494]
[249.35775757 274.25344849]
[259.30459595 285.48110962]
[269.25143433 296.70877075]
[277.29586792 301.06478882]
[279.26629639 308.19836426]
[289.03097534 319.58480835]
[304.85275269 322.24005127]
[312.51525879 336.33493042]
[306.14044189 351.05706787]
[290.61853027 355.11288452]
[277.85659790 345.39114380]
[277.64450073 329.34948730]
[267.87985229 317.96304321]
[258.02377319 306.65560913]
[248.07693481 295.42794800]
[238.13008118 284.20028687]
[223.29345703 283.56011963]
[213.04600525 272.31536865]
[213.81806946 256.75769043]
[203.87121582 245.53002930]
[189.64002991 241.13430786]
[186.28027344 225.67395020]
[176.33343506 214.44628906]
[166.38659668 203.21862793]
[156.43975830 191.99096680]
[146.49291992 180.76330566]
[136.54608154 169.53564453]
[126.59923553 158.30798340]
[129.03706360 173.10855103]
[125.32952881 187.64314270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 152]
[12 151]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 49]
[28 48]
[31 44]
[32 43]
[33 41]
[34 40]
[35 39]
[60 112]
[61 111]
[62 110]
[63 109]
[65 107]
[66 106]
[67 105]
[69 101]
[70 100]
[71 99]
[74 96]
[75 95]
[76 94]
[78 91]
[79 90]
[80 89]
[134 148]
[135 147]
[136 146]
[137 145]
[138 144]
[153 192]
[154 191]
[155 190]
[156 189]
[157 188]
[158 187]
[159 186]
[161 184]
[162 183]
[165 180]
[166 179]
[167 178]
[169 177]
[170 176]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
