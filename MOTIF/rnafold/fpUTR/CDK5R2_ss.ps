%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGGGCUGACGCUGCAGCUGGCGCAGCUCAGGAUUAGAGCAGCGGAGCCGCCUAGCAGCCACCUUCCCCCGCCAGUCCGCGCGCCCGGGCCGGGGCUAGGCCCCCCACCGCCGGGUCCCCCGGGGCUGCAGUAGCAGCGGCGCCGCCCGCGGCUCCCGCUGGGGCCUGGGCGCCGGCCCCGCUCUGCAGG\
) } def
/len { sequence length } bind def

/coor [
[109.95928955 260.81396484]
[108.50414276 245.88470459]
[107.04898834 230.95545959]
[105.59384155 216.02619934]
[104.13869476 201.09695435]
[102.68354797 186.16770935]
[101.22840118 171.23844910]
[99.77325439 156.30920410]
[98.31810760 141.37994385]
[96.86296082 126.45069885]
[95.40780640 111.52144623]
[90.90597534 118.77095795]
[85.35832214 125.39414215]
[78.83432770 131.27969360]
[64.69335938 136.28297424]
[50.55238342 141.28627014]
[36.41141129 146.28955078]
[22.27043724 151.29283142]
[8.17043877 156.41046143]
[-5.88766146 161.64207458]
[-16.12270355 173.70666504]
[-30.74936104 170.89416504]
[-44.80746078 176.12577820]
[-58.86556244 181.35740662]
[-72.92366028 186.58901978]
[-86.85054779 192.16053772]
[-100.63800049 198.06867981]
[-110.27508545 210.61607361]
[-125.02106476 208.51719666]
[-138.80851746 214.42532349]
[-152.59597778 220.33346558]
[-166.38343811 226.24159241]
[-170.73075867 241.26274109]
[-183.74514771 249.93222046]
[-199.28158569 248.15657043]
[-210.00425720 236.77420044]
[-210.85023499 221.15951538]
[-201.42008972 208.68530273]
[-186.16642761 205.24148560]
[-172.29156494 212.45414734]
[-158.50411987 206.54600525]
[-144.71665955 200.63787842]
[-130.92919922 194.72973633]
[-122.27828979 182.60491943]
[-106.54614258 184.28121948]
[-92.75868225 178.37307739]
[-91.11577606 175.23809814]
[-87.86540222 172.74821472]
[-83.32975006 171.65357971]
[-78.15528107 172.53091431]
[-64.09717560 167.29930115]
[-50.03907776 162.06768799]
[-35.98097610 156.83607483]
[-26.75146484 145.14567566]
[-11.11927795 147.58396912]
[2.93882275 142.35235596]
[8.11853981 137.06546021]
[17.26715088 137.15187073]
[31.40812492 132.14857483]
[45.54909897 127.14529419]
[59.69007111 122.14200592]
[73.83104706 117.13871765]
[76.16021729 110.00955963]
[61.35164642 107.62081146]
[46.54307175 105.23206329]
[31.71216011 107.47796631]
[19.90338326 98.22849274]
[18.53145027 83.29136658]
[28.45779419 72.04557800]
[43.44968414 71.55234528]
[54.09365845 82.12115479]
[67.45611572 88.93619537]
[80.81857300 95.75123596]
[83.14774323 88.62207794]
[74.68839264 76.23501587]
[59.11291122 73.55545807]
[50.06248474 60.59917068]
[52.90656662 45.05289078]
[65.95781708 36.13995361]
[81.47315216 39.14823914]
[90.24761200 52.29299164]
[87.07545471 67.77565765]
[95.53480530 80.16271973]
[110.12318420 83.65258789]
[123.27246857 76.43479919]
[136.42173767 69.21701050]
[149.57101440 61.99922180]
[162.72030640 54.78143311]
[175.86958313 47.56364059]
[189.01885986 40.34585190]
[202.16813660 33.12806320]
[215.31741333 25.91027451]
[228.46669006 18.69248581]
[241.61596680 11.47469711]
[250.07533264 -0.91236538]
[252.01315308 -15.78666687]
[253.95097351 -30.66096878]
[255.88879395 -45.53527069]
[257.82659912 -60.40957260]
[253.87716675 -76.89708710]
[268.62704468 -85.25638580]
[280.74282837 -73.39703369]
[272.70092773 -58.47174835]
[270.76309204 -43.59744644]
[268.82525635 -28.72314644]
[266.88745117 -13.84884453]
[264.94961548 1.02545667]
[278.53915405 7.37723398]
[292.12744141 13.72846031]
[302.29608154 2.70126438]
[312.37509155 -8.40790367]
[322.36380005 -19.59831429]
[325.75061035 -28.09737587]
[332.60601807 -30.88738060]
[342.77465820 -41.91457748]
[352.94326782 -52.94177246]
[363.11190796 -63.96896744]
[373.28051758 -74.99616241]
[379.57305908 -90.73910522]
[396.44271851 -89.05056763]
[399.49014282 -72.37275696]
[384.30773926 -64.82753754]
[374.13909912 -53.80034256]
[363.97048950 -42.77314758]
[353.80184937 -31.74595070]
[343.63320923 -20.71875381]
[333.55422974 -9.60958672]
[323.56549072 1.58082497]
[321.45367432 8.67455578]
[313.32327271 12.86989021]
[303.15463257 23.89708519]
[305.54147339 31.00715446]
[319.75198364 26.20497894]
[333.98181152 21.46023941]
[338.75473022 35.68061447]
[324.54479980 40.48219681]
[310.31509399 45.22729111]
[312.70193481 52.33736038]
[327.46456909 54.99522781]
[342.22723389 57.65309143]
[356.98986816 60.31095505]
[371.75250244 62.96882248]
[386.51516724 65.62668610]
[403.68365479 58.98724747]
[416.64053345 70.81404114]
[431.44430542 73.23250580]
[446.24804688 75.65097046]
[461.05178833 78.06943512]
[476.19027710 71.76403046]
[489.05410767 81.93527985]
[486.41006470 98.11987305]
[470.97811890 103.66848755]
[458.63333130 92.87318420]
[443.82958984 90.45471954]
[429.02584839 88.03626251]
[414.22207642 85.61779785]
[404.21276855 92.42635345]
[391.85202026 90.52284241]
[383.85729980 80.38933563]
[369.09466553 77.73146820]
[354.33200073 75.07360077]
[339.56936646 72.41574097]
[324.80670166 69.75787354]
[310.04406738 67.10000610]
[261.77264404 56.95397949]
[248.83375549 24.62397575]
[235.68447876 31.84176445]
[222.53520203 39.05955505]
[209.38592529 46.27734375]
[196.23664856 53.49513245]
[183.08737183 60.71292114]
[169.93809509 67.93070984]
[156.78881836 75.14849854]
[143.63952637 82.36628723]
[130.49024963 89.58407593]
[117.34097290 96.80186462]
[110.33705902 110.06629944]
[111.79220581 124.99555206]
[113.24735260 139.92480469]
[114.70250702 154.85404968]
[116.15765381 169.78330994]
[117.61280060 184.71255493]
[119.06794739 199.64179993]
[120.52309418 214.57106018]
[121.97824097 229.50030518]
[123.43338776 244.42956543]
[124.88854218 259.35882568]
[137.88768005 268.05114746]
[142.20861816 283.07989502]
[135.81114197 297.34896851]
[121.71594238 304.12091064]
[106.57834625 300.19827271]
[97.54586029 287.43316650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 187]
[2 186]
[3 185]
[4 184]
[5 183]
[6 182]
[7 181]
[8 180]
[9 179]
[10 178]
[11 177]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 56]
[20 55]
[22 53]
[23 52]
[24 51]
[25 50]
[26 46]
[27 45]
[29 43]
[30 42]
[31 41]
[32 40]
[74 83]
[75 82]
[84 176]
[85 175]
[86 174]
[87 173]
[88 172]
[89 171]
[90 170]
[91 169]
[92 168]
[93 167]
[94 166]
[95 107]
[96 106]
[97 105]
[98 104]
[99 103]
[109 131]
[110 130]
[111 128]
[112 127]
[114 126]
[115 125]
[116 124]
[117 123]
[118 122]
[138 164]
[139 163]
[140 162]
[141 161]
[142 160]
[143 159]
[145 156]
[146 155]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
