%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCUCGGCGUUUCCGCCAUGCGCCUGCAGUGCUCCGCGCGCUCUUGACGUCCGGAGCCCCUGGAGUAGGCGCUUCCGGCCAUUCAUACUGCAGUCGGUCAGUGUUCGGUUGAAGGAUUCUGUGUGCUGUCGGACCCAGAGGGUGACGGCGCCGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[176.48091125 196.44268799]
[166.83909607 184.95202637]
[157.19728088 173.46134949]
[147.55546570 161.97068787]
[137.58352661 150.76530457]
[127.28990936 139.85470581]
[116.99628448 128.94410706]
[103.24949646 133.40771484]
[88.90019226 131.67694092]
[80.90212250 144.36674500]
[72.90406036 157.05653381]
[64.90599060 169.74633789]
[64.81113434 186.14520264]
[50.42987061 194.02627563]
[36.55641556 185.28218079]
[37.46258545 168.90809631]
[52.21619415 161.74827576]
[60.21426010 149.05847168]
[68.21232605 136.36868286]
[76.21039581 123.67887878]
[70.34111786 115.71577454]
[67.04801941 106.38759613]
[66.61711884 96.50459290]
[52.42489624 91.64858246]
[38.23267365 86.79257202]
[24.04045105 81.93656921]
[9.84822941 77.08055878]
[-4.34399319 72.22454834]
[-18.53621483 67.36853790]
[-32.72843933 62.51253128]
[-47.05589294 58.07135391]
[-61.50645447 54.04876328]
[-79.19950104 59.06867218]
[-91.01663971 46.12314224]
[-105.54248810 42.38152695]
[-120.06833649 38.63990784]
[-134.59419250 34.89829254]
[-149.12004089 31.15667343]
[-163.64588928 27.41505623]
[-178.93983459 31.46545029]
[-189.33479309 20.79802132]
[-203.86064148 17.05640411]
[-218.38648987 13.31478691]
[-231.00242615 22.55450630]
[-246.60246277 21.47160149]
[-257.82077026 10.57739067]
[-259.36038208 -4.98421669]
[-250.49433899 -17.86550331]
[-235.40893555 -21.98431969]
[-221.22703552 -15.39588833]
[-214.64488220 -1.21106291]
[-200.11903381 2.53055429]
[-185.59318542 6.27217150]
[-171.33821106 1.95415270]
[-159.90426636 12.88920784]
[-145.37841797 16.63082504]
[-130.85256958 20.37244225]
[-116.32672119 24.11405945]
[-101.80087280 27.85567665]
[-87.27502441 31.59729385]
[-76.67118835 25.71241379]
[-64.51538849 28.74689102]
[-57.48386765 39.59819794]
[-43.03330231 43.62078857]
[-39.76554108 42.17710876]
[-35.62717056 42.27448654]
[-31.36419868 44.30854416]
[-27.87242889 48.32030869]
[-13.68020630 53.17631531]
[0.51201570 58.03232574]
[14.70423794 62.88833618]
[28.89645958 67.74434662]
[43.08868408 72.60035706]
[57.28090668 77.45635986]
[71.47312927 82.31237030]
[79.21228027 73.64653015]
[89.44218445 68.13831329]
[100.93711090 66.44770813]
[112.31974792 68.77727509]
[120.80384827 56.40715027]
[129.28794861 44.03702545]
[137.77204895 31.66690063]
[146.25616455 19.29677582]
[141.82881165 8.20027447]
[143.31573486 -3.53282261]
[150.22923279 -12.98012733]
[160.74478149 -17.84549713]
[172.18118286 -17.01663017]
[181.13856506 -29.04847717]
[190.09593201 -41.08032608]
[199.05331421 -53.11217499]
[208.01069641 -65.14402008]
[216.96807861 -77.17587280]
[212.21669006 -91.94760132]
[217.08732605 -106.68043518]
[229.70710754 -115.70931244]
[245.22349548 -115.56243134]
[257.67010498 -106.29627228]
[262.26095581 -91.47386932]
[257.23080444 -76.79473877]
[244.51379395 -67.90329742]
[228.99992371 -68.21849060]
[220.04254150 -56.18664169]
[211.08515930 -44.15479660]
[202.12779236 -32.12294769]
[193.17041016 -20.09109879]
[184.21302795 -8.05925083]
[187.97694397 9.81931210]
[177.33619690 25.06095505]
[158.62628174 27.78087807]
[150.14218140 40.15100479]
[141.65808105 52.52112961]
[133.17398071 64.89125061]
[124.68987274 77.26138306]
[133.46444702 97.39894104]
[127.90689087 118.65047455]
[138.20051575 129.56108093]
[148.49414062 140.47167969]
[153.59123230 141.99035645]
[157.20703125 145.02949524]
[159.00817871 148.75660706]
[159.04614258 152.32887268]
[168.68795776 163.81953430]
[178.32975769 175.31021118]
[187.97157288 186.80087280]
[198.47483826 197.50981140]
[209.77638245 207.37263489]
[221.07791138 217.23545837]
[232.37945557 227.09828186]
[243.68099976 236.96110535]
[254.98252869 246.82392883]
[266.28405762 256.68673706]
[277.58560181 266.54956055]
[284.06594849 268.21578979]
[288.09518433 272.31109619]
[289.12457275 277.02059937]
[300.03518677 287.31423950]
[310.94577026 297.60784912]
[321.85638428 307.90148926]
[337.52661133 314.37301636]
[335.64593506 331.22232056]
[318.93447876 334.07949829]
[311.56277466 318.81210327]
[300.65216064 308.51846313]
[289.74154663 298.22485352]
[278.83093262 287.93121338]
[267.72277832 277.85110474]
[256.42123413 267.98828125]
[245.11970520 258.12545776]
[233.81817627 248.26263428]
[222.51663208 238.39982605]
[211.21508789 228.53700256]
[199.91355896 218.67417908]
[188.61201477 208.81135559]
[190.22056580 223.72485352]
[182.88621521 236.80947876]
[169.32496643 243.21981812]
[154.55870056 240.58206177]
[144.05557251 229.87298584]
[141.70500183 215.05830383]
[148.37744141 201.62406921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 118]
[6 117]
[7 116]
[9 20]
[10 19]
[11 18]
[12 17]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 64]
[32 63]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[39 55]
[41 53]
[42 52]
[43 51]
[79 114]
[80 113]
[81 112]
[82 111]
[83 110]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[126 154]
[127 153]
[128 152]
[129 151]
[130 150]
[131 149]
[132 148]
[133 147]
[136 146]
[137 145]
[138 144]
[139 143]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
