%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGUAAGCCAGGCGUGUUAAAGCCGGUCGGAACUGCUCCGGAGGGCACGGGCUCCGUAGGCACCAACUGCAAGGACCCCUCCCCCUGCGGGCGCUCCC\
) } def
/len { sequence length } bind def

/coor [
[121.30501556 127.85472107]
[107.07830811 134.34657288]
[91.44408417 134.00860596]
[84.75801086 147.43605042]
[78.07193756 160.86351013]
[79.62098694 177.18933105]
[66.10194397 186.47196960]
[51.42202759 179.16223145]
[50.68268204 162.77976990]
[64.64448547 154.17742920]
[71.33055878 140.74998474]
[78.01663208 127.32253265]
[73.36892700 122.81610870]
[69.62875366 117.53215027]
[55.33462143 122.07944489]
[41.04049301 126.62673187]
[36.28263474 141.39637756]
[23.73224258 150.52146912]
[8.21519279 150.49320984]
[-4.30188990 141.32249451]
[-9.00593281 126.53561401]
[-4.08813477 111.81845093]
[8.56050968 102.83004761]
[24.07633972 103.02662659]
[36.49320221 112.33260345]
[50.78733063 107.78531647]
[65.08145905 103.23802185]
[67.45776367 86.93125916]
[77.01992798 73.51027679]
[91.65645599 65.93866730]
[108.13538361 65.88835144]
[122.81787872 73.37044525]
[134.78814697 64.33092499]
[146.75839233 55.29140472]
[149.35568237 42.54171371]
[159.65763855 35.27253342]
[171.74180603 36.98715591]
[183.98475647 28.32054901]
[196.22772217 19.65394211]
[201.54067993 12.00533772]
[208.98381042 10.91581345]
[221.48785400 2.63033867]
[233.99188232 -5.65513611]
[241.22192383 -19.72769928]
[256.10522461 -20.30796623]
[268.60925293 -28.59344101]
[281.11328125 -36.87891769]
[293.61734009 -45.16439056]
[294.41268921 -60.54859161]
[304.00216675 -72.37633514]
[318.54544067 -76.24375153]
[332.41134644 -70.87023163]
[344.91537476 -79.15570831]
[357.41940308 -87.44118500]
[364.64944458 -101.51374817]
[379.53274536 -102.09401703]
[392.03680420 -110.37948608]
[404.54083252 -118.66496277]
[416.78378296 -127.33157349]
[428.75402832 -136.37109375]
[440.72430420 -145.41061401]
[452.69454956 -154.45013428]
[453.31619263 -170.07534790]
[463.87426758 -181.61054993]
[479.38360596 -183.60916138]
[492.52114868 -175.12750244]
[497.08377075 -160.17033386]
[490.91714478 -145.80000305]
[476.93292236 -138.80172729]
[461.73406982 -142.47987366]
[449.76382446 -133.44035339]
[437.79354858 -124.40083313]
[425.82330322 -115.36131287]
[424.27969360 -110.67330170]
[419.67251587 -106.98102570]
[412.82629395 -106.16092682]
[400.32226562 -97.87545013]
[387.81823730 -89.58998108]
[381.48254395 -76.11004639]
[365.70489502 -74.93714905]
[353.20086670 -66.65167236]
[340.69680786 -58.36619949]
[340.24060059 -43.50249100]
[331.01028442 -31.61696625]
[316.38021851 -27.39626122]
[301.90280151 -32.66035461]
[289.39877319 -24.37487984]
[276.89474487 -16.08940506]
[264.39068604 -7.80393124]
[258.05502319 5.67600012]
[242.27735901 6.84889984]
[229.77331543 15.13437462]
[217.26928711 23.41984940]
[204.89431763 31.89689445]
[192.65136719 40.56350327]
[180.40841675 49.23011017]
[174.04673767 65.50527954]
[155.79791260 67.26165771]
[143.82766724 76.30117798]
[131.85740662 85.34069824]
[135.06239319 100.64662170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[14 27]
[15 26]
[16 25]
[32 100]
[33 99]
[34 98]
[37 96]
[38 95]
[39 94]
[41 93]
[42 92]
[43 91]
[45 89]
[46 88]
[47 87]
[48 86]
[52 82]
[53 81]
[54 80]
[56 78]
[57 77]
[58 76]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
