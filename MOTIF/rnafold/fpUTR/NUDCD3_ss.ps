%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGCCCGUGGGGCAGCUGGGUCUGGGGAAAACAGCCCGGGGCCGCGGGGGCCGAACGAGCACGGACCGGAAGUUCCGCAGCCGCGCCGUCCGGCGGAGCCGUUGGCUGCGGACGCCGGAAGUGGCCAGUCGGCAGGUCUGAGGCGGCGCUGUGUGUGUGAAGCGUACCUAGGGCGGGAGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[96.85661316 160.79689026]
[84.51957703 152.26473999]
[79.10832977 138.27479553]
[82.49283600 123.66162109]
[93.50382233 113.47495270]
[81.09336853 121.89994812]
[68.68290710 130.32493591]
[56.27245331 138.74993896]
[49.20047379 152.90260315]
[34.32460785 153.64952087]
[21.91415215 162.07450867]
[14.84217072 176.22717285]
[-0.03369449 176.97409058]
[-12.44415092 185.39907837]
[-24.85460663 193.82408142]
[-28.04605484 206.33526611]
[-38.57361221 213.09458923]
[-50.48852158 210.93171692]
[-63.03876114 219.14703369]
[-75.58899689 227.36236572]
[-88.13923645 235.57768250]
[-100.68947601 243.79299927]
[-106.17019653 251.12719727]
[-113.52027130 252.03884888]
[-126.20674896 260.04217529]
[-138.89321899 268.04550171]
[-140.82363892 283.56347656]
[-152.31231689 294.17218018]
[-167.93464661 294.86248779]
[-180.31425476 285.30847168]
[-183.60588074 270.02124023]
[-176.25527954 256.21896362]
[-161.73321533 250.41865540]
[-146.89656067 255.35903931]
[-134.21008301 247.35571289]
[-121.52359772 239.35237122]
[-108.90480042 231.24276733]
[-96.35456085 223.02743530]
[-83.80432129 214.81211853]
[-71.25408173 206.59680176]
[-58.70384598 198.38146973]
[-51.66194153 182.31701660]
[-33.27960587 181.41362000]
[-20.86914825 172.98863220]
[-8.45869160 164.56362915]
[-2.27438998 151.01359558]
[13.48915482 149.66406250]
[25.89961052 141.23905945]
[32.08391190 127.68901825]
[47.84745789 126.33948517]
[60.25791168 117.91448975]
[72.66837311 109.48948669]
[85.07882690 101.06449127]
[92.10111237 87.80977631]
[92.10111237 72.80977631]
[92.10111237 57.80977631]
[78.42061615 51.13105392]
[69.03476715 39.22337723]
[65.76312256 24.48171425]
[69.20231628 9.84159946]
[78.61804962 -1.80543375]
[92.10111237 -8.18293190]
[92.10111237 -23.18293190]
[92.10111237 -38.18292999]
[81.53574371 -46.55696106]
[77.78366089 -59.30297470]
[82.00159454 -71.69698334]
[92.43479919 -79.27921295]
[92.68678284 -94.27709961]
[92.93877411 -109.27497864]
[93.19075775 -124.27286530]
[83.40222931 -131.06355286]
[78.16950226 -141.63250732]
[78.69278717 -153.29415894]
[84.72579956 -163.14724731]
[94.66597748 -168.79660034]
[95.42165375 -183.77755737]
[96.17733002 -198.75851440]
[96.93301392 -213.73945618]
[97.68869019 -228.72041321]
[98.44436646 -243.70137024]
[99.20004272 -258.68231201]
[99.95572662 -273.66326904]
[100.71140289 -288.64422607]
[100.96338654 -303.64212036]
[100.71140289 -318.63998413]
[92.74336243 -332.30822754]
[100.26576233 -345.16369629]
[100.01377869 -360.16159058]
[99.76178741 -375.15945435]
[99.50980377 -390.15734863]
[93.19822693 -405.89266968]
[106.57139587 -416.31353760]
[120.28708649 -406.34780884]
[114.50768280 -390.40933228]
[114.75967407 -375.41143799]
[115.01165771 -360.41357422]
[115.26364899 -345.41567993]
[123.21366119 -332.82019043]
[115.70928192 -318.89196777]
[115.96127319 -303.89410400]
[117.90258789 -301.84448242]
[119.14022827 -298.89443970]
[119.32415009 -295.31134033]
[118.20868683 -291.48519897]
[115.69235229 -287.88854980]
[114.93667603 -272.90759277]
[114.18099976 -257.92663574]
[113.42532349 -242.94569397]
[112.66963959 -227.96473694]
[111.91396332 -212.98377991]
[111.15828705 -198.00283813]
[110.40261078 -183.02188110]
[109.64692688 -168.04092407]
[122.71707916 -155.24504089]
[122.29751587 -136.63984680]
[108.18864441 -124.02087402]
[107.93665314 -109.02299500]
[107.68466949 -94.02510834]
[107.43267822 -79.02722931]
[119.62659454 -67.45869446]
[119.69214630 -50.31290436]
[107.10111237 -38.18292999]
[107.10111237 -23.18293190]
[107.10111237 -8.18293190]
[120.58417511 -1.80543375]
[129.99990845 9.84159946]
[133.43910217 24.48171425]
[130.16746521 39.22337723]
[120.78160858 51.13105392]
[107.10111237 57.80977631]
[107.10111237 72.80977631]
[107.10111237 87.80977631]
[124.63532257 101.39677429]
[136.90249634 110.02906799]
[156.46279907 105.52400208]
[172.79768372 116.65702820]
[175.66677856 135.90794373]
[188.35325623 143.91127014]
[201.03973389 151.91461182]
[213.72621155 159.91793823]
[229.52619934 160.73715210]
[236.16220093 174.07179260]
[248.84867859 182.07511902]
[261.53515625 190.07846069]
[274.27825928 187.99794006]
[284.68487549 194.94201660]
[287.46951294 206.72714233]
[300.01974487 214.94245911]
[312.56997681 223.15779114]
[325.12020874 231.37310791]
[337.67044067 239.58843994]
[351.34426880 232.59396362]
[366.68252563 233.38952637]
[379.55935669 241.76107788]
[386.51092529 255.45675659]
[385.66729736 270.79244995]
[377.25540161 283.64297485]
[363.53802490 290.55157471]
[348.20504761 289.65988159]
[335.38095093 281.20776367]
[328.51538086 267.46878052]
[329.45513916 252.13867188]
[316.90487671 243.92335510]
[304.35464478 235.70802307]
[291.80441284 227.49270630]
[279.25418091 219.27737427]
[261.71408081 219.25059509]
[253.53182983 202.76493835]
[240.84535217 194.76159668]
[228.15887451 186.75827026]
[213.26631165 186.51150513]
[205.72288513 172.60441589]
[193.03640747 164.60108948]
[180.34992981 156.59774780]
[167.66345215 148.59442139]
[158.59936523 153.48828125]
[148.24020386 154.17256165]
[138.45993042 150.45605469]
[131.05583191 142.94978333]
[127.41834259 132.96751404]
[128.27020264 122.29624176]
[116.00302887 113.66394806]
[126.84116364 124.03384399]
[129.97990417 138.70178223]
[124.33458710 152.59892273]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 53]
[6 52]
[7 51]
[8 50]
[10 48]
[11 47]
[13 45]
[14 44]
[15 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[24 36]
[25 35]
[26 34]
[54 133]
[55 132]
[56 131]
[62 125]
[63 124]
[64 123]
[68 120]
[69 119]
[70 118]
[71 117]
[76 114]
[77 113]
[78 112]
[79 111]
[80 110]
[81 109]
[82 108]
[83 107]
[84 106]
[85 101]
[86 100]
[88 98]
[89 97]
[90 96]
[91 95]
[134 183]
[135 182]
[138 176]
[139 175]
[140 174]
[141 173]
[143 171]
[144 170]
[145 169]
[148 167]
[149 166]
[150 165]
[151 164]
[152 163]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
