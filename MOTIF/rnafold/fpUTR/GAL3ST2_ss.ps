%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCUGCCCCACAGCCGCACCCUGCCUGUGCCUGCACCCUGGGGAGCCCAGAGCCGGCAGGGGCCGAGGCGGUGGGACCUCGGGGGAGCUCAAGCCUCGACUGUCCCCUCGCUGGAGGCCAGAGGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[192.69042969 224.20979309]
[186.72230530 213.91007996]
[183.91297913 202.32246399]
[184.50349426 190.39436340]
[188.45640564 179.10423279]
[176.66560364 169.83184814]
[161.87841797 168.04629517]
[155.81362915 153.43367004]
[144.02282715 144.16128540]
[132.23204041 134.88890076]
[120.44123840 125.61650848]
[104.80227661 132.41894531]
[87.86286163 130.44239807]
[74.21015930 120.22211456]
[67.54129028 104.52572632]
[69.66217804 87.60377502]
[57.44353485 78.90292358]
[45.22489548 70.20207214]
[33.00625610 61.50121689]
[17.61802101 63.91781235]
[5.35053015 54.91984940]
[3.14150858 40.23462677]
[-9.07713032 31.53377151]
[-21.29577065 22.83291817]
[-33.71800995 14.42530346]
[-46.33681107 6.31569147]
[-58.95561600 -1.79392076]
[-71.57441711 -9.90353298]
[-87.36695862 -10.85543823]
[-93.89072418 -24.24535179]
[-106.50952911 -32.35496521]
[-119.12833405 -40.46457672]
[-131.74713135 -48.57418823]
[-147.53967285 -49.52609253]
[-154.06344604 -62.91600800]
[-166.68223572 -71.02561951]
[-177.27999878 -68.07997894]
[-187.52236938 -71.43766785]
[-194.04629517 -79.73872375]
[-194.85325623 -90.04427338]
[-207.07189941 -98.74512482]
[-219.29054260 -107.44597626]
[-231.50918579 -116.14682770]
[-243.72781372 -124.84768677]
[-260.13720703 -129.11007690]
[-260.58398438 -146.05813599]
[-244.42192078 -151.17912292]
[-235.02696228 -137.06632996]
[-222.80831909 -128.36546326]
[-210.58969116 -119.66461945]
[-198.37104797 -110.96376038]
[-186.15240479 -102.26290894]
[-166.87608337 -101.94252014]
[-158.57263184 -83.64442444]
[-145.95382690 -75.53481293]
[-131.06385803 -75.16295624]
[-123.63751984 -61.19299316]
[-111.01871490 -53.08337784]
[-98.39991760 -44.97376633]
[-85.78111267 -36.86415482]
[-70.89115143 -36.49230194]
[-63.46480560 -22.52233696]
[-50.84600449 -14.41272354]
[-38.22719955 -6.30311155]
[-25.60839653 1.80650067]
[-20.74582481 1.65746510]
[-15.75752640 4.62888336]
[-12.59491634 10.61427879]
[-0.37627706 19.31513214]
[11.84236240 28.01598549]
[26.44241142 25.30044556]
[38.95779800 33.95029068]
[41.70711136 49.28257751]
[53.92575073 57.98342896]
[66.14438629 66.68428802]
[78.36302948 75.38513947]
[89.33455658 69.01132202]
[101.90483093 67.28269958]
[114.18956757 70.45839691]
[124.34729767 78.06237793]
[130.85536194 88.95480347]
[132.73822021 101.50289917]
[129.71362305 113.82571411]
[141.50442505 123.09809875]
[153.29521179 132.37048340]
[165.08601379 141.64286804]
[180.71656799 144.09164429]
[185.93798828 158.04104614]
[197.72879028 167.31343079]
[214.02517700 158.52592468]
[232.46897888 157.65089417]
[249.43177795 164.81712341]
[261.59524536 178.57566833]
[266.60034180 196.19267273]
[263.50466919 214.19248962]
[276.12347412 222.30210876]
[288.74224854 230.41171265]
[301.36105347 238.52133179]
[313.97985840 246.63093567]
[324.99356079 241.85562134]
[336.81988525 243.02413940]
[346.48797607 249.72528076]
[351.62646484 260.17291260]
[351.04458618 271.68063354]
[363.26321411 280.38150024]
[375.48184204 289.08233643]
[391.21121216 290.78460693]
[397.09045410 304.46978760]
[409.30911255 313.17062378]
[425.30480957 311.93887329]
[436.13513184 323.77459717]
[433.49194336 339.59838867]
[419.40292358 347.27166748]
[404.67593384 340.90808105]
[400.60824585 325.38928223]
[388.38961792 316.68841553]
[373.53421021 315.60848999]
[366.78100586 301.30099487]
[354.56234741 292.60012817]
[342.34371948 283.89929199]
[324.59063721 288.06417847]
[309.11206055 277.83764648]
[305.87026978 259.24975586]
[293.25146484 251.14013672]
[280.63265991 243.03051758]
[268.01385498 234.92089844]
[255.39505005 226.81129456]
[246.21676636 234.20733643]
[235.30087280 238.70664978]
[223.53811646 239.93017578]
[211.89173889 237.76666260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[8 86]
[9 85]
[10 84]
[11 83]
[16 76]
[17 75]
[18 74]
[19 73]
[22 70]
[23 69]
[24 68]
[25 65]
[26 64]
[27 63]
[28 62]
[30 60]
[31 59]
[32 58]
[33 57]
[35 55]
[36 54]
[40 52]
[41 51]
[42 50]
[43 49]
[44 48]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[104 120]
[105 119]
[106 118]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
