%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUGGACACGGUACACACAGACCAGAGCCUUGGCUCAAAGGCAAACAAAAGGAAAUGCCCGGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[97.56728363 171.14785767]
[94.96256256 156.37574768]
[92.35783386 141.60362244]
[89.75311279 126.83151245]
[77.65644836 117.96186066]
[62.78477097 119.91975403]
[47.91309738 121.87764740]
[33.04142761 123.83554077]
[28.41264343 135.83003235]
[19.08750534 144.57380676]
[6.96031046 148.37805176]
[-5.54304743 146.54853821]
[-15.95031166 139.51144409]
[-22.23169136 128.71618652]
[-37.21741486 129.37048340]
[-50.75006104 138.63328552]
[-65.41924286 131.30203247]
[-66.13455963 114.91849518]
[-52.16016006 106.33664703]
[-37.87170410 114.38475800]
[-22.88598251 113.73046112]
[-14.09425068 98.70994568]
[2.00124431 91.69565582]
[19.28775597 95.54838562]
[31.08353233 108.96386719]
[45.95520782 107.00597382]
[60.82687759 105.04808044]
[75.69855499 103.09019470]
[81.55896759 86.78100586]
[95.84207916 79.53627777]
[97.79997253 64.66460419]
[99.75785828 49.79293060]
[101.71575165 34.92125702]
[103.67364502 20.04958534]
[93.85497284 7.66535187]
[95.75206757 -8.02466297]
[108.23941803 -17.71185303]
[123.90850067 -15.64897919]
[133.46311951 -3.05990863]
[131.23471069 12.58648682]
[118.54531860 22.00747871]
[116.58742523 36.87915039]
[114.62953186 51.75082397]
[112.67163849 66.62249756]
[110.71374512 81.49417114]
[114.15275574 66.89371490]
[125.20135498 56.74835587]
[140.04145813 54.56404114]
[153.54473877 61.09561539]
[161.04483032 74.08594513]
[159.94990540 89.04592896]
[150.63835144 100.80580902]
[136.32797241 105.30169678]
[121.96374512 100.97974396]
[135.82194519 106.71999359]
[150.32545471 100.44116211]
[164.98983765 106.33448792]
[171.11497498 120.90357208]
[165.06694031 135.50482178]
[150.43391418 141.47560120]
[135.89741516 135.27352905]
[130.08169556 120.57818604]
[116.22349548 114.83793640]
[104.52523041 124.22678375]
[107.12995148 138.99890137]
[109.73467255 153.77101135]
[112.33940125 168.54313660]
[124.60347748 178.88584900]
[124.01972961 194.91828918]
[111.03595734 204.34172058]
[95.61219025 199.92730713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 28]
[6 27]
[7 26]
[8 25]
[14 21]
[15 20]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
