%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUAACAACAUAGGAACAGGUCACCCGCGUGUUACUCAAAACUGUAGGACGGCAGUGAGGGCUUUGCUAAUCCCAGAACAGAGGUGUAACCUGGCUGCAUAUCCAGCCUCGAGAAA\
) } def
/len { sequence length } bind def

/coor [
[32.64294815 258.98510742]
[17.65742493 258.32623291]
[3.00327802 255.12374878]
[-10.89095020 249.47128296]
[-23.61894035 241.53413391]
[-34.80847931 231.54443359]
[-44.13233948 219.79429626]
[-51.31785583 206.62734985]
[-56.15490341 192.42866516]
[-58.50202179 177.61343384]
[-58.29057312 162.61491394]
[-55.52674484 147.87174988]
[-50.29135895 133.81504822]
[-42.73751831 120.85589600]
[-33.08612442 109.37327576]
[-21.61942291 99.70297241]
[-8.67274189 92.12778473]
[5.37530851 86.86924744]
[20.11391068 84.08112335]
[35.11205292 83.84496307]
[49.93112946 86.16766357]
[64.13777924 90.98130035]
[77.31690979 98.14535522]
[65.11220551 89.42496490]
[52.90750504 80.70456696]
[40.70280075 71.98417664]
[26.04909897 76.73551178]
[11.57662582 72.00254822]
[2.77033353 59.79955292]
[2.83747888 44.92899323]
[-9.36722374 36.20860291]
[-21.57192612 27.48820877]
[-37.29854584 25.76077843]
[-43.15589523 12.06622791]
[-55.36059952 3.34583545]
[-67.56529999 -5.37455654]
[-79.77000427 -14.09494877]
[-94.44599915 -9.05562496]
[-109.27126312 -13.63723564]
[-118.54518127 -26.07806015]
[-118.70173645 -41.59434509]
[-109.68074036 -54.21976471]
[-94.95094299 -59.09958649]
[-80.17625427 -54.35741806]
[-71.03784180 -41.81672287]
[-71.04961395 -26.29965210]
[-58.84490967 -17.57925987]
[-46.64020538 -8.85886669]
[-34.43550491 -0.13847452]
[-19.58184624 0.96521592]
[-12.85153389 15.28350639]
[-0.64683115 24.00389862]
[11.55787086 32.72429276]
[25.60429382 27.84207916]
[40.00246429 32.21891785]
[49.16973877 44.37681580]
[49.42319489 59.77947617]
[61.62789536 68.49987030]
[73.83259583 77.22026062]
[86.03730011 85.94065094]
[100.61589050 82.41010284]
[107.47861481 69.07207489]
[114.34134674 55.73404694]
[113.77511597 39.92297745]
[126.47805786 32.14579773]
[133.34078979 18.80777168]
[132.00735474 2.46292472]
[145.64776611 -6.64045763]
[160.22990417 0.86240315]
[160.75294495 17.25320816]
[146.67881775 25.67050171]
[139.81608582 39.00852585]
[140.87318420 53.86557388]
[127.67937469 62.59677505]
[120.81664276 75.93480682]
[113.95391083 89.27282715]
[117.90215302 95.64945984]
[130.31935120 87.23440552]
[140.41175842 76.13739777]
[154.22770691 81.97856903]
[153.29885864 96.94978333]
[138.86630249 101.03820038]
[125.79863739 108.40271759]
[129.74687195 114.77934265]
[144.74557495 114.58135223]
[159.74426270 114.38335419]
[174.74296570 114.18536377]
[190.50090027 107.93048096]
[200.87358093 121.34107208]
[190.85852051 135.02079773]
[174.94094849 129.18405151]
[159.94226074 129.38204956]
[144.94357300 129.58004761]
[129.94487000 129.77803040]
[124.89735413 143.90327454]
[136.37387085 153.56193542]
[147.85037231 163.22059631]
[159.32688904 172.87925720]
[170.80340576 182.53790283]
[186.52609253 180.93402100]
[198.72488403 190.98216248]
[200.16244507 206.72093201]
[189.98590088 218.81280518]
[174.23281860 220.08389282]
[162.24920654 209.78007507]
[161.14474487 194.01441956]
[149.66822815 184.35575867]
[138.19172668 174.69711304]
[126.71520996 165.03845215]
[115.23869324 155.37979126]
[116.69792938 170.30863953]
[115.59223175 185.26783752]
[111.95391846 199.81990051]
[105.88939667 213.53929138]
[97.57601166 226.02479553]
[87.25688934 236.91128540]
[75.23378754 245.88040161]
[61.85831451 252.66984558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 60]
[24 59]
[25 58]
[26 57]
[30 53]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[37 46]
[61 76]
[62 75]
[63 74]
[65 72]
[66 71]
[84 94]
[85 93]
[86 92]
[87 91]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
