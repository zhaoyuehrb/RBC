%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGGCCCAGGAGGCACAACCAGGCGGCAGCGGAUACAAGGCCAGGCGGCGGCGGGCGGGCGGACCUGCGCCCUGAGCCUUUCUGCGCCCGCGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[113.04818726 213.87007141]
[98.54848480 208.60107422]
[89.21737671 196.31556702]
[88.03238678 180.93377686]
[95.37163544 167.36399841]
[108.89319611 159.93627930]
[109.82573700 144.96530151]
[110.75828552 129.99430847]
[111.69082642 115.02333069]
[101.19090271 117.25661469]
[92.22191620 113.47546387]
[79.38983917 121.24320984]
[78.22243500 136.71630859]
[68.15748596 148.52632141]
[53.06515503 152.13204956]
[38.74876404 146.14701843]
[30.71325302 132.87260437]
[32.04843903 117.41307831]
[42.24091721 105.71294403]
[57.37147141 102.27115631]
[71.62209320 108.41113281]
[84.45417023 100.64338684]
[89.78492737 86.76561737]
[105.23984528 82.90798187]
[118.07870483 94.03876495]
[125.64595032 81.08744049]
[133.21319580 68.13611603]
[140.78044128 55.18479156]
[136.99031067 40.07609558]
[144.84907532 27.04940605]
[159.27626038 23.52921295]
[166.84350586 10.57788754]
[174.41075134 -2.37343788]
[181.97799683 -15.32476330]
[189.54522705 -28.27608871]
[189.55210876 -33.85706329]
[191.60055542 -38.35031128]
[194.88500977 -41.13725281]
[198.46975708 -42.03425217]
[207.21086121 -54.22412109]
[215.95198059 -66.41399384]
[224.69309998 -78.60385895]
[233.43421936 -90.79373169]
[231.06840515 -106.18985748]
[240.10678101 -118.42759705]
[254.79920959 -120.58815765]
[263.54034424 -132.77803040]
[266.06521606 -141.74560547]
[272.74771118 -145.20535278]
[281.86370850 -157.11747742]
[290.97967529 -169.02960205]
[300.09567261 -180.94172668]
[302.89822388 -189.82644653]
[309.68508911 -193.07670593]
[319.16714478 -204.69955444]
[328.64916992 -216.32241821]
[338.13122559 -227.94526672]
[334.03948975 -242.91314697]
[339.55856323 -257.41552734]
[352.56625366 -265.87597656]
[368.06088257 -265.04125977]
[380.08438110 -255.23236084]
[384.01351929 -240.22097778]
[378.33746338 -225.77931213]
[365.23873901 -217.46047974]
[349.75408936 -218.46322632]
[340.27203369 -206.84036255]
[330.78997803 -195.21751404]
[321.30795288 -183.59465027]
[312.00781250 -171.82574463]
[302.89181519 -159.91362000]
[293.77581787 -148.00149536]
[284.65982056 -136.08937073]
[275.73019409 -124.03691101]
[266.98907471 -111.84703827]
[269.65643311 -97.23811340]
[260.96536255 -84.75133514]
[245.62408447 -82.05261230]
[236.88296509 -69.86274719]
[228.14184570 -57.67287445]
[219.40074158 -45.48300552]
[210.65962219 -33.29313660]
[202.49656677 -20.70884705]
[194.92932129 -7.75752068]
[187.36207581 5.19380474]
[179.79483032 18.14513016]
[172.22758484 31.09645653]
[176.24459839 45.39328384]
[168.75482178 58.63556671]
[153.73176575 62.75203323]
[146.16452026 75.70336151]
[138.59727478 88.65468597]
[131.03002930 101.60601044]
[126.66181183 115.95587921]
[125.72927094 130.92686462]
[124.79672241 145.89784241]
[123.86418152 160.86883545]
[136.35945129 169.91712952]
[141.95797729 184.29280090]
[138.87327576 199.40863037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 97]
[7 96]
[8 95]
[9 94]
[11 22]
[12 21]
[25 93]
[26 92]
[27 91]
[28 90]
[31 87]
[32 86]
[33 85]
[34 84]
[35 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[46 75]
[47 74]
[49 73]
[50 72]
[51 71]
[52 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
