%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUGCCCGGGCCCACUUUGAGCGCGCGGCUGCGCACUGAGCCGCCGGCCCUCCCGGAAGCGCAGAGCUCCGCUGGUGCCACGUCUAUCCCCUUACAUCCUCCUAGGACCCGGUCGGUAGUCGUCGCCCCAGCCCGCCGGGGGCGCAGCGCCCGAGCCGCGGCCCUCGAGACGGGACCGAGAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[106.99442291 830.22442627]
[93.79441833 819.58508301]
[100.36388397 803.95568848]
[100.86245728 788.96392822]
[101.36103058 773.97222900]
[101.85960388 758.98052979]
[102.35817719 743.98883057]
[92.01747131 727.66296387]
[102.88371277 710.69860840]
[102.88371277 695.69860840]
[102.88371277 680.69860840]
[95.14641571 667.97137451]
[102.88371277 654.17120361]
[102.88371277 639.17120361]
[102.88371277 624.17120361]
[92.20284271 613.85351562]
[91.98915863 598.64135742]
[102.88371277 587.50823975]
[102.88371277 572.50823975]
[102.88371277 557.50823975]
[102.88371277 542.50823975]
[102.88371277 527.50823975]
[102.88371277 512.50823975]
[95.14641571 499.78097534]
[102.88371277 485.98080444]
[102.88371277 470.98080444]
[102.75904846 455.98132324]
[102.50972748 440.98339844]
[102.26040649 425.98547363]
[102.01108551 410.98754883]
[101.76176453 395.98962402]
[101.51244354 380.99169922]
[88.93849182 369.83609009]
[88.30155182 352.70108032]
[100.48270416 340.15826416]
[99.98413086 325.16656494]
[91.82807159 312.70349121]
[99.10240936 298.65377808]
[98.60383606 283.66204834]
[98.10526276 268.67034912]
[89.94920349 256.20727539]
[97.22353363 242.15756226]
[96.72496033 227.16584778]
[96.22638702 212.17413330]
[88.07032776 199.71107483]
[95.34465790 185.66134644]
[94.84608459 170.66963196]
[94.34751129 155.67793274]
[93.84893799 140.68621826]
[93.35036469 125.69450378]
[86.22650146 123.74515533]
[79.69483948 119.79933929]
[74.31867981 114.04315186]
[70.60131836 106.82201385]
[68.94105530 98.62104797]
[69.59266663 90.03276062]
[72.63885498 81.71429443]
[60.03846359 73.57609558]
[47.43807602 65.43790436]
[38.51296616 63.40450287]
[34.69744492 57.05826187]
[22.23406601 48.71175385]
[6.28032112 50.40218735]
[-4.88529634 38.88226700]
[-2.69747996 22.98909378]
[11.16546535 14.91454697]
[26.06907272 20.85272980]
[30.58057213 36.24837494]
[43.04395294 44.59488297]
[55.57627106 52.83751678]
[68.17665863 60.97571182]
[80.77704620 69.11390686]
[94.87243652 63.98360062]
[99.29376221 49.65000916]
[103.71509552 35.31641769]
[108.13642120 20.98282623]
[112.55774689 6.64923382]
[109.23186493 -8.81844521]
[120.37684631 -18.69967079]
[124.79817963 -33.03326416]
[121.47229767 -48.50094223]
[132.61727905 -58.38216782]
[137.03860474 -72.71575928]
[141.45993042 -87.04935455]
[138.13404846 -102.51702881]
[149.27903748 -112.39825439]
[153.70036316 -126.73184967]
[158.12168884 -141.06544495]
[162.54301453 -155.39903259]
[166.96434021 -169.73262024]
[162.44557190 -187.57470703]
[175.74565125 -199.01113892]
[179.92813110 -213.41624451]
[171.01585388 -222.21284485]
[166.72135925 -233.89880371]
[167.80413818 -246.22918701]
[173.99685669 -256.86297607]
[184.06794739 -263.80758667]
[196.06600952 -265.79211426]
[200.72497559 -280.05023193]
[205.38394165 -294.30838013]
[210.04290771 -308.56649780]
[209.21519470 -325.50021362]
[225.25802612 -330.98330688]
[234.96791077 -317.08529663]
[224.30102539 -303.90753174]
[219.64205933 -289.64941406]
[214.98310852 -275.39129639]
[210.32414246 -261.13314819]
[221.33238220 -247.34317017]
[221.87823486 -229.54954529]
[211.55549622 -214.85372925]
[194.33323669 -209.23377991]
[190.15075684 -194.82867432]
[195.70585632 -184.06973267]
[192.32508850 -172.02577209]
[181.29794312 -165.31129456]
[176.87660217 -150.97770691]
[172.45527649 -136.64411926]
[168.03395081 -122.31051636]
[163.61262512 -107.97692871]
[167.25474548 -93.53448486]
[155.79351807 -82.62802124]
[151.37219238 -68.29443359]
[146.95086670 -53.96083832]
[150.59298706 -39.51839447]
[139.13177490 -28.61193466]
[134.71043396 -14.27834320]
[138.35256958 0.16410118]
[126.89134216 11.07056141]
[122.47000885 25.40415382]
[118.04868317 39.73774719]
[113.62735748 54.07133865]
[109.20603180 68.40493011]
[127.83876038 86.85465240]
[126.34534454 111.29283142]
[108.34207916 125.19593048]
[108.84065247 140.18763733]
[109.33922577 155.17935181]
[109.83779907 170.17106628]
[110.33637238 185.16278076]
[118.52809143 198.69815063]
[111.21810150 211.67556763]
[111.71667480 226.66726685]
[112.21524811 241.65898132]
[120.40696716 255.19436646]
[113.09696960 268.17178345]
[113.59554291 283.16348267]
[114.09411621 298.15518188]
[122.28583527 311.69058228]
[114.97584534 324.66796875]
[115.47441864 339.65969849]
[126.31148529 347.67706299]
[130.48559570 360.28994751]
[126.68365479 372.81665039]
[116.51036835 380.74237061]
[116.75968933 395.74029541]
[117.00901031 410.73822021]
[117.25833130 425.73614502]
[117.50765228 440.73406982]
[117.75697327 455.73199463]
[121.03366852 464.27926636]
[117.88371277 470.98080444]
[117.88371277 485.98080444]
[125.62100983 499.78097534]
[117.88371277 512.50823975]
[117.88371277 527.50823975]
[117.88371277 542.50823975]
[117.88371277 557.50823975]
[117.88371277 572.50823975]
[117.88371277 587.50823975]
[128.77825928 598.64135742]
[128.56459045 613.85351562]
[117.88371277 624.17120361]
[117.88371277 639.17120361]
[117.88371277 654.17120361]
[125.62100983 667.97137451]
[117.88371277 680.69860840]
[117.88371277 695.69860840]
[117.88371277 710.69860840]
[126.02307892 717.94976807]
[128.76135254 728.27380371]
[125.42543030 738.18884277]
[117.34989166 744.48736572]
[116.85131836 759.47912598]
[116.35274506 774.47082520]
[115.85417175 789.46252441]
[115.35559845 804.45422363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 188]
[4 187]
[5 186]
[6 185]
[7 184]
[9 180]
[10 179]
[11 178]
[13 176]
[14 175]
[15 174]
[18 171]
[19 170]
[20 169]
[21 168]
[22 167]
[23 166]
[25 164]
[26 163]
[27 161]
[28 160]
[29 159]
[30 158]
[31 157]
[32 156]
[35 152]
[36 151]
[38 149]
[39 148]
[40 147]
[42 145]
[43 144]
[44 143]
[46 141]
[47 140]
[48 139]
[49 138]
[50 137]
[57 72]
[58 71]
[59 70]
[61 69]
[62 68]
[73 134]
[74 133]
[75 132]
[76 131]
[77 130]
[79 128]
[80 127]
[82 125]
[83 124]
[84 123]
[86 121]
[87 120]
[88 119]
[89 118]
[90 117]
[92 114]
[93 113]
[99 109]
[100 108]
[101 107]
[102 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
