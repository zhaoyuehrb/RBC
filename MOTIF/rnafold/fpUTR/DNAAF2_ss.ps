%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAAACUCUGAGGCGGAUCCCCCAACCCAGUGUCAGACUGAUCGCCUUUGGCCCGAGGGCGAGGAGCCACAGGACAGU\
) } def
/len { sequence length } bind def

/coor [
[71.21528625 122.16297913]
[65.70619202 111.98717499]
[63.67641068 100.59519958]
[48.95078659 97.73933411]
[34.22516251 94.88346863]
[29.62508774 96.71484375]
[25.16506195 96.79466248]
[21.43126869 95.42177582]
[18.83071518 93.06906128]
[17.54697227 90.30021667]
[3.42987132 85.22996521]
[-10.68722916 80.15971375]
[-24.80433083 75.08946228]
[-38.92143250 70.01920319]
[-54.52466202 72.63639832]
[-63.88747025 61.05248260]
[-78.00457001 55.98222733]
[-92.21620178 51.18331909]
[-106.51715088 46.65750885]
[-117.79764557 57.08084106]
[-132.78204346 60.45180893]
[-147.43960571 55.86363602]
[-157.82752991 44.55052185]
[-161.15151978 29.55563164]
[-156.51742554 14.91251850]
[-145.17179871 4.56010675]
[-130.16656494 1.28314281]
[-115.53804779 5.96311331]
[-105.22125244 17.34112930]
[-101.99134064 32.35656357]
[-87.69039154 36.88237000]
[-80.17271423 35.87205887]
[-72.93431854 41.86512756]
[-58.81721878 46.93538284]
[-44.22373581 43.95553207]
[-33.85117722 55.90210724]
[-19.73407745 60.97235870]
[-5.61697626 66.04261017]
[8.50012493 71.11286163]
[22.61722565 76.18312073]
[37.08102798 80.15783691]
[51.80665207 83.01371002]
[66.53227997 85.86957550]
[77.81835938 71.22966766]
[94.84756470 64.03877258]
[113.21080017 66.15872192]
[128.15357971 77.04061890]
[135.80703735 93.86700439]
[150.79603577 94.44155121]
[165.78501892 95.01609039]
[179.87142944 87.81304932]
[192.29299927 96.03216553]
[207.28199768 96.60670471]
[222.27098083 97.18124390]
[237.25997925 97.75578308]
[252.25723267 98.04310608]
[267.25723267 98.04310608]
[276.26864624 85.41085052]
[290.99472046 80.51985168]
[305.77301025 85.25080872]
[314.92092896 97.78456879]
[314.92092896 113.30164337]
[305.77301025 125.83540344]
[290.99472046 130.56636047]
[276.26864624 125.67536926]
[267.25723267 113.04310608]
[252.25723267 113.04310608]
[245.39472961 116.27457428]
[236.68544006 112.74478149]
[221.69644165 112.17023468]
[206.70744324 111.59569550]
[191.71846008 111.02115631]
[178.70416260 118.26528931]
[165.21047974 110.00508118]
[150.22148132 109.43054199]
[135.23249817 108.85600281]
[130.66040039 119.48581696]
[122.97763062 128.13868713]
[112.96364594 133.93672180]
[101.63442230 136.29168701]
[90.13938141 134.96463013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[10 40]
[11 39]
[12 38]
[13 37]
[14 36]
[16 34]
[17 33]
[18 31]
[19 30]
[48 76]
[49 75]
[50 74]
[52 72]
[53 71]
[54 70]
[55 69]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
