%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCGCGGAAGCCCGGCCACCGCCCCCGACGCGACCCGCGCCGCGUCCGCGGCGGGGAGUUGUUGCUGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[80.98601532 268.69125366]
[70.17402649 279.98883057]
[54.62407684 281.64205933]
[41.67837906 272.87033081]
[37.44949722 257.81542969]
[43.93417358 243.58576965]
[58.07054520 236.90019226]
[61.70597076 222.34739685]
[65.34140015 207.79461670]
[68.97682190 193.24182129]
[72.61225128 178.68902588]
[68.19023132 164.46598816]
[79.04148865 152.95248413]
[82.67691040 138.39968872]
[86.31233978 123.84690094]
[79.03222656 117.78704834]
[74.24047089 109.61631012]
[72.50574493 100.30435181]
[58.03014374 96.37282562]
[43.55453873 92.44129944]
[27.84673691 97.15267181]
[16.09987640 85.70962524]
[20.39812088 69.88378143]
[36.31980515 65.95542145]
[47.48606491 77.96569824]
[61.96166611 81.89722443]
[76.43727112 85.82874298]
[80.51289368 80.60208130]
[85.72081757 76.50252533]
[91.75842285 73.76828003]
[98.27490997 72.55823517]
[104.89162445 72.94268036]
[111.22412109 74.89928436]
[116.90443420 78.31436920]
[129.00361633 69.44815063]
[141.10279846 60.58193588]
[153.20198059 51.71571732]
[165.30116272 42.84949875]
[177.21696472 33.73832321]
[188.94444275 24.38597488]
[194.90972900 9.73244381]
[209.68443298 7.84638405]
[221.41191101 -1.50596285]
[233.13937378 -10.85830975]
[244.86685181 -20.21065712]
[256.59432983 -29.56300354]
[268.32180786 -38.91535187]
[273.80612183 -54.37025452]
[289.97958374 -57.08164597]
[300.20428467 -44.26027679]
[293.96194458 -29.09567261]
[277.67413330 -27.18787956]
[265.94665527 -17.83553123]
[254.21919250 -8.48318481]
[242.49172974 0.86916244]
[230.76425171 10.22150898]
[219.03677368 19.57385635]
[213.91032410 33.55844498]
[198.29678345 36.11344910]
[186.56932068 45.46579361]
[183.21008301 52.28995514]
[174.16737366 54.94868088]
[162.06819153 63.81489944]
[149.96900940 72.68111420]
[137.86984253 81.54733276]
[125.77065277 90.41355133]
[122.82300568 115.33417511]
[100.86512756 127.48232269]
[97.22970581 142.03511047]
[93.59427643 156.58790588]
[97.75626373 171.85186768]
[87.16503906 182.32446289]
[83.52960968 196.87724304]
[79.89418793 211.43003845]
[76.25875854 225.98281860]
[72.62333679 240.53561401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[13 70]
[14 69]
[15 68]
[18 27]
[19 26]
[20 25]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 60]
[40 59]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
