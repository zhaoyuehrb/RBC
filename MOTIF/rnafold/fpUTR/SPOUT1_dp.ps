%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:07 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SPOUT1)
} def

/sequence { (\
AGUCUCAUUGGCAGAGGCGGGACCGACGGUGUGUGCGGAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 12 0.083436194 ubox
2 18 0.977271288 ubox
2 23 0.111992647 ubox
2 27 0.025639790 ubox
2 36 0.007652943 ubox
2 41 0.015010128 ubox
3 11 0.083430610 ubox
3 15 0.007680867 ubox
3 17 0.977990381 ubox
3 21 0.005368682 ubox
3 22 0.135810876 ubox
3 26 0.025723375 ubox
3 35 0.007405845 ubox
3 38 0.010230757 ubox
3 39 0.023480827 ubox
3 40 0.013813970 ubox
4 10 0.083650864 ubox
4 11 0.003383912 ubox
4 14 0.008262785 ubox
4 16 0.980103961 ubox
4 20 0.006787123 ubox
4 21 0.140068210 ubox
4 25 0.025681990 ubox
4 37 0.013052238 ubox
4 38 0.025630432 ubox
5 13 0.007975192 ubox
5 15 0.979973870 ubox
5 19 0.006329378 ubox
5 20 0.139495085 ubox
5 22 0.023340417 ubox
5 37 0.024830714 ubox
5 38 0.004652768 ubox
5 39 0.011354954 ubox
6 10 0.003676853 ubox
6 14 0.979469185 ubox
6 16 0.003316717 ubox
6 19 0.139047858 ubox
6 20 0.004448575 ubox
6 21 0.025043615 ubox
6 31 0.009937560 ubox
6 33 0.004142481 ubox
6 35 0.024426818 ubox
6 37 0.006786943 ubox
6 38 0.011745176 ubox
7 30 0.009980758 ubox
7 32 0.004097702 ubox
7 34 0.024296818 ubox
8 14 0.005068479 ubox
8 15 0.018827982 ubox
8 16 0.037079451 ubox
8 17 0.086362924 ubox
8 20 0.009981745 ubox
8 21 0.032560829 ubox
8 22 0.005560921 ubox
8 29 0.009968799 ubox
8 31 0.003870078 ubox
8 33 0.022768517 ubox
8 39 0.077154703 ubox
8 40 0.004505546 ubox
9 13 0.022104058 ubox
9 14 0.019156180 ubox
9 15 0.037657455 ubox
9 16 0.081912511 ubox
9 19 0.012152444 ubox
9 20 0.048178754 ubox
9 21 0.005051190 ubox
9 28 0.009947845 ubox
9 37 0.004490638 ubox
9 38 0.082834464 ubox
9 39 0.003930486 ubox
10 18 0.016637282 ubox
10 27 0.009960812 ubox
10 36 0.004675854 ubox
11 18 0.106625221 ubox
11 30 0.013838737 ubox
11 32 0.022089531 ubox
11 34 0.012069726 ubox
11 36 0.087741354 ubox
12 17 0.106772327 ubox
12 29 0.014155022 ubox
12 31 0.022616288 ubox
12 33 0.012249851 ubox
12 35 0.087785754 ubox
13 30 0.022403343 ubox
13 32 0.012203392 ubox
13 34 0.086196836 ubox
16 24 0.020588789 ubox
17 23 0.020542744 ubox
17 30 0.060672357 ubox
17 32 0.016649524 ubox
17 34 0.017214503 ubox
17 36 0.074474922 ubox
18 25 0.022328080 ubox
18 28 0.064129476 ubox
18 29 0.055201662 ubox
18 31 0.017104486 ubox
18 33 0.019682511 ubox
18 35 0.074552235 ubox
18 37 0.010917590 ubox
19 24 0.023719671 ubox
19 27 0.069593857 ubox
19 30 0.011074466 ubox
19 32 0.020013144 ubox
19 34 0.070153839 ubox
19 36 0.022348804 ubox
22 30 0.111666984 ubox
22 32 0.009261233 ubox
22 34 0.019007805 ubox
23 29 0.114262797 ubox
23 31 0.009187262 ubox
23 33 0.019431573 ubox
23 38 0.975407001 ubox
24 28 0.113469518 ubox
24 31 0.020548218 ubox
24 33 0.008640586 ubox
24 35 0.009540596 ubox
24 37 0.983881569 ubox
25 30 0.014634819 ubox
25 32 0.006857744 ubox
25 34 0.007456205 ubox
25 36 0.980763273 ubox
26 32 0.037846367 ubox
26 34 0.793173364 ubox
27 31 0.038085364 ubox
27 33 0.795339151 ubox
27 35 0.559240221 ubox
27 37 0.065111908 ubox
28 32 0.490786238 ubox
28 34 0.528514918 ubox
28 36 0.065470928 ubox
29 36 0.025875626 ubox
29 41 0.006845625 ubox
30 35 0.026162582 ubox
30 37 0.006563362 ubox
30 40 0.006921550 ubox
31 36 0.010775990 ubox
31 41 0.015360986 ubox
32 40 0.015547880 ubox
33 41 0.019851016 ubox
34 40 0.020083371 ubox
2 18 0.9500000 lbox
3 17 0.9500000 lbox
4 16 0.9500000 lbox
5 15 0.9500000 lbox
6 14 0.9500000 lbox
23 38 0.9500000 lbox
24 37 0.9500000 lbox
25 36 0.9500000 lbox
26 34 0.9500000 lbox
27 33 0.9500000 lbox
showpage
end
%%EOF
