%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGACAAAGGGCCUGGGCAAAUUCGCCGCCCGGCCUCCUAGCGCUCCGGGGAGGCCGCUGCGCCCCGGAGUGGAUCGCGCUGGAGGCGUGCGCCGGGCGAGAAGCCGCGGCCGCGGGAGCGCAGU\
) } def
/len { sequence length } bind def

/coor [
[125.03782654 155.31463623]
[116.46805573 158.44145203]
[107.52654266 160.24908447]
[98.41513824 160.69670105]
[89.33950806 159.77420044]
[80.50451660 157.50241089]
[72.10960388 153.93261719]
[64.34426117 149.14538574]
[57.38378143 143.24879456]
[51.38528061 136.37594604]
[46.48416519 128.68197632]
[32.48927307 134.08041382]
[18.49437904 139.47883606]
[4.49948788 144.87725830]
[-9.49540424 150.27568054]
[-16.46456528 156.34657288]
[-23.90056801 155.63023376]
[-38.02372742 160.68357849]
[-52.14688873 165.73692322]
[-66.27005005 170.79028320]
[-69.65063477 185.84269714]
[-80.64854431 196.66163635]
[-95.75439453 199.79481506]
[-110.14796448 194.24244690]
[-119.23631287 181.77627563]
[-120.11937714 166.37420654]
[-112.51538849 152.95097351]
[-98.85073853 145.78991699]
[-83.48577118 147.17605591]
[-71.32339478 156.66711426]
[-57.20023727 151.61376953]
[-43.07707596 146.56042480]
[-28.95391464 141.50708008]
[-14.89382935 136.28079224]
[-0.89893782 130.88237000]
[13.09595394 125.48394012]
[27.09084702 120.08551788]
[41.08573914 114.68708801]
[39.28295517 100.20299530]
[40.98884964 85.70717621]
[46.10484314 72.03729248]
[54.33529663 59.98330688]
[65.20459747 50.24177933]
[78.08462524 43.37564850]
[74.43992615 28.82517815]
[70.79521942 14.27470875]
[67.15052032 -0.27575967]
[63.50581741 -14.82622814]
[59.86111450 -29.37669754]
[56.21641159 -43.92716599]
[52.57170868 -58.47763443]
[48.92700577 -73.02810669]
[45.28230286 -87.57857513]
[34.59192657 -94.91750336]
[31.89761353 -107.19001770]
[38.12000275 -117.64035797]
[34.83348465 -132.27589417]
[23.32956886 -143.96315002]
[27.95927620 -159.69520569]
[43.95995712 -163.28828430]
[54.87148666 -151.04612732]
[49.46901703 -135.56240845]
[52.75553513 -120.92687988]
[65.32711029 -108.74733734]
[59.83277130 -91.22327423]
[63.47747421 -76.67280579]
[67.12217712 -62.12233734]
[70.76688385 -47.57186890]
[74.41158295 -33.02140045]
[78.05628967 -18.47093201]
[81.70098877 -3.92046237]
[85.34568787 10.63000679]
[88.99039459 25.18047523]
[92.63509369 39.73094559]
[114.79273224 41.11217499]
[134.97270203 50.36622620]
[150.47709656 66.25591278]
[159.23312378 86.65690613]
[160.07015991 108.84175873]
[174.52679443 112.84245300]
[188.98344421 116.84314728]
[203.44007874 120.84383392]
[217.89672852 124.84452820]
[225.71336365 117.31593323]
[235.89213562 113.79264832]
[246.52850342 114.86162567]
[255.66249084 120.25723267]
[261.63983154 128.92294312]
[263.41146851 139.21752930]
[277.53460693 144.27087402]
[291.65777588 149.32421875]
[305.78094482 154.37756348]
[315.02337646 154.33270264]
[320.18609619 159.73211670]
[334.18099976 165.13053894]
[348.17587280 170.52896118]
[362.17077637 175.92739868]
[376.23086548 181.15367126]
[390.35403442 186.20701599]
[404.47717285 191.26037598]
[419.53634644 185.72850037]
[433.17523193 194.17599487]
[434.93127441 210.12265015]
[423.45739746 221.33557129]
[407.55532837 219.21315002]
[399.42382812 205.38352966]
[385.30068970 200.33018494]
[371.17752075 195.27684021]
[363.74151611 195.99317932]
[356.77233887 189.92228699]
[342.77746582 184.52386475]
[328.78256226 179.12542725]
[314.78768921 173.72700500]
[300.72760010 168.50073242]
[286.60443115 163.44738770]
[272.48126221 158.39402771]
[258.35812378 153.34068298]
[241.54324341 162.99679565]
[222.71112061 157.24464417]
[213.89602661 139.30116272]
[199.43939209 135.30047607]
[184.98275757 131.29978943]
[170.52610779 127.29909515]
[156.06947327 123.29840088]
[151.94609070 131.43571472]
[146.65013123 138.86341858]
[140.30113220 145.41386414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[17 33]
[18 32]
[19 31]
[20 30]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[56 63]
[57 62]
[79 124]
[80 123]
[81 122]
[82 121]
[83 120]
[89 117]
[90 116]
[91 115]
[92 114]
[94 113]
[95 112]
[96 111]
[97 110]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
