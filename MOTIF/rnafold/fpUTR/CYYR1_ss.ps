%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCCAUAGCAAUCGCCAAAGCAAGGGGUUAGGAAAAGUUUCUUGGUCCCCUAGUCACUCUUUAGAAGGAAGAACCCGGGCUUGGGGAGGAGUCGGGGCCACCCCCGCCCCCUGCCCGCAGUCGUUGCCACCCGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[103.36289978 376.92892456]
[90.28415680 366.14086914]
[97.03007507 350.58679199]
[97.69828033 335.60168457]
[98.36647797 320.61657715]
[99.03468323 305.63146973]
[82.97525787 294.62542725]
[76.65412140 276.06103516]
[82.74786377 257.27130127]
[98.99331665 245.78617859]
[98.32511139 230.80107117]
[97.65691376 215.81596375]
[96.98870850 200.83085632]
[96.32050323 185.84573364]
[88.02392578 173.47576904]
[95.13879395 159.34463501]
[94.47058868 144.35952759]
[82.05508423 140.94290161]
[71.12860870 134.12893677]
[62.59782410 124.48302460]
[57.17058182 112.80556488]
[55.29723358 100.06552887]
[40.50617981 97.57058716]
[25.61130142 102.90473938]
[14.34825802 93.15829468]
[-0.44279611 90.66336060]
[-15.23384953 88.16841888]
[-30.02490425 85.67347717]
[-44.81595612 83.17853546]
[-59.63388824 80.84852600]
[-74.47685242 78.68373108]
[-89.31982422 76.51894379]
[-104.16278839 74.35414886]
[-119.00576019 72.18936157]
[-133.84872437 70.02456665]
[-148.69169617 67.85977173]
[-163.72006226 74.42330170]
[-176.75604248 64.47366333]
[-174.38932800 48.24620056]
[-159.05459595 42.43432999]
[-146.52690125 53.01680756]
[-131.68392944 55.18159866]
[-116.84096527 57.34638977]
[-101.99800110 59.51118469]
[-87.15502930 61.67597580]
[-72.31206512 63.84076691]
[-57.46909714 66.00556183]
[-50.33877563 63.84083939]
[-42.32101822 68.38748169]
[-27.52996254 70.88242340]
[-12.73890972 73.37736511]
[2.05214429 75.87230682]
[16.84319878 78.36724091]
[30.68012238 72.85464478]
[43.00112152 82.77953339]
[57.79217529 85.27447510]
[62.20443344 76.12875366]
[68.56690216 68.21475983]
[76.55128479 61.94084930]
[85.74559021 57.63074875]
[83.41558075 42.81282043]
[81.08557129 27.99489021]
[78.75556183 13.17695999]
[76.42555237 -1.64097023]
[64.35560608 -12.20960522]
[65.23691559 -28.22843170]
[78.39341736 -37.40917969]
[93.73255920 -32.70916367]
[99.48747253 -17.73383331]
[91.24347687 -3.97098088]
[93.57349396 10.84694958]
[95.90350342 25.66487885]
[98.23351288 40.48281097]
[100.56352234 55.30073929]
[112.32135010 57.02877808]
[123.20835876 61.79380417]
[132.45512390 69.25904846]
[139.40812683 78.89690399]
[153.63209534 74.13468933]
[167.85607910 69.37248230]
[182.08004761 64.61026764]
[196.30401611 59.84806061]
[203.40235901 45.98258591]
[217.89532471 41.35565186]
[231.07019043 48.20828247]
[245.29415894 43.44607162]
[259.51812744 38.68386078]
[273.74209595 33.92164993]
[284.37188721 22.20335197]
[298.89712524 25.49969673]
[313.12112427 20.73748589]
[315.98602295 17.23147774]
[319.48278809 15.08590221]
[323.08877563 14.33026981]
[326.32815552 14.81550789]
[328.82800293 16.24622726]
[343.41940308 12.76892471]
[358.01077271 9.29162312]
[369.54684448 -2.36388731]
[385.33801270 2.06004548]
[389.13967896 18.01245880]
[377.04098511 29.08287621]
[361.48806763 23.88300323]
[346.89669800 27.36030579]
[332.30529785 30.83760643]
[317.88333130 34.96145630]
[303.65936279 39.72366714]
[294.04696655 51.10134125]
[278.50430298 48.14562225]
[264.28033447 52.90783310]
[250.05636597 57.67004395]
[235.83239746 62.43225479]
[229.43946838 75.83621216]
[215.08218384 80.86840057]
[201.06622314 74.07202911]
[186.84225464 78.83424377]
[172.61828613 83.59645081]
[158.39431763 88.35866547]
[144.17034912 93.12087250]
[141.99942017 115.30978394]
[129.38171387 133.69059753]
[109.45569611 143.69131470]
[110.12390137 158.67642212]
[118.46827698 172.11822510]
[111.30561066 185.17753601]
[111.97381592 200.16264343]
[112.64202118 215.14775085]
[113.31021881 230.13287354]
[113.97842407 245.11798096]
[124.01197052 249.08508301]
[132.09669495 256.17160034]
[137.30680847 265.53164673]
[139.05735779 276.06103516]
[137.16970825 286.52764893]
[131.88949585 295.71545410]
[123.85493469 302.56585693]
[114.01979065 306.29968262]
[113.35159302 321.28479004]
[112.68338776 336.26989746]
[112.01518250 351.25500488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 140]
[4 139]
[5 138]
[6 137]
[10 129]
[11 128]
[12 127]
[13 126]
[14 125]
[16 123]
[17 122]
[22 56]
[23 55]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[78 119]
[79 118]
[80 117]
[81 116]
[82 115]
[85 112]
[86 111]
[87 110]
[88 109]
[90 107]
[91 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
