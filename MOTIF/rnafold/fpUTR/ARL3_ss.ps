%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCACUCUGGGGAAAGCGGAGCUGCACCCCGCCCCGUAUUGCUGCUCAGCUCCUCAGCUGUGCGUGCGAGGGACGUCGGGGGCGGCGCCGCAGCAGUUGCCCCUGGUAACGGGGGAGGCAGCAGGAGGAGGAGGAGGAGGAGGGACUCGGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[-119.51987457 574.41668701]
[-128.69013977 577.01409912]
[-138.11576843 576.06921387]
[-146.24804688 588.67340088]
[-154.38031006 601.27764893]
[-162.38764954 613.96154785]
[-170.26931763 626.72399902]
[-178.15097046 639.48638916]
[-186.03262329 652.24884033]
[-193.91427612 665.01129150]
[-188.83226013 679.79998779]
[-194.49343872 694.37689209]
[-208.22480774 701.85913086]
[-223.54280090 698.71380615]
[-233.21475220 686.42614746]
[-232.67385864 670.79791260]
[-222.17550659 659.20831299]
[-206.67669678 657.12963867]
[-198.79504395 644.36718750]
[-190.91339111 631.60473633]
[-183.03173828 618.84234619]
[-175.15008545 606.07989502]
[-174.30670166 598.69708252]
[-166.98452759 593.14538574]
[-158.85226440 580.54113770]
[-150.71998596 567.93695068]
[-156.76043701 548.45721436]
[-146.41400146 530.54504395]
[-125.95468140 525.91589355]
[-118.84291840 512.70898438]
[-111.73116302 499.50207520]
[-104.61940765 486.29513550]
[-97.50764465 473.08819580]
[-90.39588928 459.88128662]
[-94.90819550 445.73297119]
[-87.88400269 432.23797607]
[-73.01335907 427.60095215]
[-65.90160370 414.39404297]
[-67.38916779 396.93096924]
[-51.69768906 387.34176636]
[-44.84825134 373.99691772]
[-45.92015076 359.14093018]
[-32.73504639 350.39657593]
[-25.88560677 337.05172729]
[-26.95750618 322.19573975]
[-13.77239990 313.45138550]
[-6.92296124 300.10653687]
[-0.07352283 286.76168823]
[-5.90900993 271.01434326]
[1.57429445 255.60437012]
[18.20005798 250.24591064]
[24.78450203 236.76834106]
[31.36894798 223.29075623]
[37.95339203 209.81318665]
[44.53783798 196.33560181]
[51.12228394 182.85803223]
[48.94597244 165.46736145]
[64.24636078 155.26573181]
[70.56324005 141.66069031]
[76.88012695 128.05564880]
[83.19700623 114.45062256]
[89.51388550 100.84558105]
[93.03717804 86.26524353]
[93.62977600 71.27694702]
[90.83056641 62.52477264]
[94.38504791 55.99923706]
[95.27365875 41.02558136]
[96.16226959 26.05192375]
[84.34172821 16.17361259]
[80.64758301 1.40179300]
[86.29319000 -12.54779816]
[98.91919708 -20.40413094]
[99.80780792 -35.37778854]
[97.18206024 -44.18356323]
[100.86477661 -50.63759613]
[102.04904938 -65.59077454]
[103.23332214 -80.54395294]
[104.41759491 -95.49713135]
[105.60186768 -110.45030212]
[98.06451416 -125.01465607]
[107.13558960 -138.67655945]
[123.48354340 -137.38182068]
[130.29101562 -122.46235657]
[120.55504608 -109.26602936]
[119.37077332 -94.31285095]
[118.18650055 -79.35968018]
[117.00222778 -64.40650177]
[115.81795502 -49.45332336]
[114.78146362 -34.48917770]
[113.89285278 -19.51552200]
[125.50104523 -10.22101402]
[129.45716858 4.29839039]
[124.04183960 18.52960968]
[111.13592529 26.94053268]
[110.24731445 41.91418839]
[109.35870361 56.88784409]
[108.61806488 71.86955261]
[108.02546692 86.85784149]
[114.24600983 91.04769135]
[126.68709564 99.42739105]
[132.90763855 103.61724091]
[146.57441711 97.43507385]
[160.24119568 91.25290680]
[173.90797424 85.07073975]
[187.57475281 78.88857269]
[201.24153137 72.70639801]
[210.35705566 59.07412338]
[226.70071411 60.42211533]
[233.45953369 75.36368561]
[223.68061829 88.52822113]
[207.42369080 86.37317657]
[193.75691223 92.55534363]
[180.09013367 98.73751831]
[166.42335510 104.91968536]
[152.75657654 111.10185242]
[139.08981323 117.28401947]
[124.48576355 119.17065430]
[111.90691376 115.38564301]
[103.11892700 107.16246796]
[96.80204010 120.76750183]
[90.48516083 134.37254333]
[84.16828156 147.97756958]
[77.85139465 161.58261108]
[81.54480743 173.97694397]
[75.96217346 185.19610596]
[64.59986115 189.44247437]
[58.01541519 202.92004395]
[51.43096924 216.39762878]
[44.84652328 229.87519836]
[38.26208115 243.35278320]
[31.67763519 256.83035278]
[37.49974823 269.01132202]
[35.25893402 282.12722778]
[25.99819183 291.40823364]
[13.27133369 293.61111450]
[6.42189503 306.95599365]
[-0.42754358 320.30084229]
[0.15443833 336.11132812]
[-12.54075050 343.90115356]
[-19.39018822 357.24603271]
[-18.80820656 373.05651855]
[-31.50339508 380.84634399]
[-38.35283279 394.19122314]
[-35.15196609 406.72177124]
[-41.17347717 417.71163940]
[-52.69467545 421.50579834]
[-59.80643463 434.71273804]
[-55.49260330 449.68029785]
[-62.89307404 462.97271729]
[-77.18896484 466.99304199]
[-84.30072021 480.19998169]
[-91.41248322 493.40689087]
[-98.52423859 506.61383057]
[-105.63599396 519.82073975]
[-112.74775696 533.02764893]
[-107.32529449 541.21685791]
[-105.30010223 550.76812744]
[-106.91327667 560.33856201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 26]
[4 25]
[5 24]
[6 22]
[7 21]
[8 20]
[9 19]
[10 18]
[29 155]
[30 154]
[31 153]
[32 152]
[33 151]
[34 150]
[37 147]
[38 146]
[40 143]
[41 142]
[43 140]
[44 139]
[46 137]
[47 136]
[48 135]
[51 131]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[63 98]
[64 97]
[66 96]
[67 95]
[68 94]
[72 90]
[73 89]
[75 88]
[76 87]
[77 86]
[78 85]
[79 84]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
