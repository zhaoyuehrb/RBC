%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAAUGAGGUGAGAAGUACGUCCACUCUUCUGUCCAGCUUUUAACAAUCUAACUAAUGCCCUCUCCAGGGUCACCCUAGAAUCAGAUCUGCUCCCCAGCAUCUUCUGUUUCCUGGUGAGUGAUUCCUGCUACUUUGGAUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-8.49776459 149.10409546]
[-12.39622784 149.01327515]
[-23.55778694 159.03424072]
[-34.71934509 169.05519104]
[-33.26190948 184.39083862]
[-41.02332306 197.49099731]
[-54.84682846 203.43864441]
[-69.34829712 200.14541626]
[-80.50985718 210.16636658]
[-91.67141724 220.18733215]
[-102.72451782 230.32778931]
[-113.66787720 240.58657837]
[-124.61124420 250.84536743]
[-128.77209473 259.06036377]
[-135.90217590 261.20404053]
[-147.06373596 271.22497559]
[-147.66313171 287.01791382]
[-159.31088257 297.69992065]
[-175.09657288 296.93359375]
[-185.65484619 285.17355347]
[-184.72166443 269.39685059]
[-172.85066223 258.96350098]
[-157.08470154 260.06341553]
[-145.92314148 250.04246521]
[-134.87004089 239.90200806]
[-123.92667389 229.64321899]
[-112.98330688 219.38442993]
[-110.23464203 212.46501160]
[-101.69237518 209.02577209]
[-90.53081512 199.00480652]
[-79.36925507 188.98385620]
[-81.08626556 174.21260071]
[-73.68860626 161.10769653]
[-59.83077621 154.79786682]
[-44.74030304 157.89364624]
[-33.57874680 147.87268066]
[-22.41718674 137.85173035]
[-37.10000992 140.92007446]
[-52.08096695 140.16447449]
[-66.38054657 135.63435364]
[-79.06378174 127.62589264]
[-89.30140686 116.66271973]
[-96.42403412 103.46165466]
[-99.96595764 88.88582611]
[-99.69560242 73.88825989]
[-95.63063812 59.44955826]
[-88.03684998 46.51377869]
[-77.41075134 35.92671585]
[-64.44711304 28.38058281]
[-49.99354553 24.36878395]
[-34.99509048 24.15362358]
[-20.43239594 27.74916840]
[-7.25763083 34.92033005]
[3.66778994 45.19822693]
[11.62951851 57.91085434]
[16.10698700 72.22700500]
[16.80744171 87.21064758]
[13.68508244 101.88207245]
[6.94406271 115.28202057]
[-2.97208548 126.53191376]
[11.25333786 121.77404785]
[25.47876167 117.01617432]
[35.09461212 105.64144135]
[50.63637161 108.60189819]
[64.86179352 103.84403229]
[79.08721924 99.08616638]
[92.09353638 80.61785889]
[114.30661774 84.71928406]
[127.80107880 78.16951752]
[141.29554749 71.61975098]
[154.79000854 65.06997681]
[168.28446960 58.52021027]
[181.70768738 51.82564163]
[195.05810547 44.98703766]
[208.40850830 38.14843750]
[221.75892639 31.30983925]
[234.88169861 24.04396820]
[247.76315308 16.35839653]
[251.74182129 1.29825294]
[264.91494751 -6.31250811]
[279.24795532 -2.42664480]
[292.12942505 -10.11221600]
[305.01089478 -17.79778671]
[312.89761353 -31.51311493]
[327.79168701 -31.38969040]
[340.67315674 -39.07526398]
[353.55462646 -46.76083374]
[366.43606567 -54.44640350]
[370.38189697 -71.45337677]
[385.09878540 -80.20397949]
[401.27593994 -75.72747040]
[413.98907471 -83.68842316]
[426.70217896 -91.64937592]
[439.41528320 -99.61032867]
[446.61819458 -114.34294891]
[462.99487305 -115.20127106]
[471.69839478 -101.30232239]
[463.77532959 -86.94415283]
[447.37625122 -86.89720917]
[434.66311646 -78.93626404]
[421.95001221 -70.97531128]
[409.23690796 -63.01435852]
[408.12216187 -50.13527679]
[399.64950562 -40.11491013]
[386.75729370 -36.77705765]
[374.12164307 -41.56494522]
[361.24020386 -33.87937546]
[348.35873413 -26.19380379]
[335.47726440 -18.50823212]
[328.51193237 -5.34262705]
[312.69647217 -4.91632795]
[299.81500244 2.76924348]
[286.93353271 10.45481491]
[283.54565430 24.91364861]
[270.59152222 32.89141083]
[255.44873047 29.23985672]
[242.56727600 36.92542648]
[241.36010742 40.31119919]
[238.41159058 43.25946045]
[233.95579529 44.93909073]
[228.59751892 44.66025162]
[215.24711609 51.49885178]
[201.89669800 58.33745193]
[188.54627991 65.17605591]
[183.99403381 71.06760406]
[174.83424377 72.01467133]
[161.33978271 78.56444550]
[147.84530640 85.11421204]
[134.35084534 91.66397858]
[120.85638428 98.21374512]
[120.37292480 104.80870056]
[117.85638428 110.92378235]
[113.55791473 115.94874573]
[107.90646362 119.38214111]
[101.46600342 120.88134003]
[94.87924194 120.29673004]
[88.80350494 117.68666077]
[83.84508514 113.31158447]
[69.61966705 118.06945801]
[55.39424133 122.82732391]
[44.76089096 134.54237366]
[30.23663139 131.24159241]
[16.01120758 135.99946594]
[1.78578377 140.75733948]
[-0.86192727 144.92512512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[8 31]
[9 30]
[10 29]
[11 27]
[12 26]
[13 25]
[15 24]
[16 23]
[60 144]
[61 143]
[62 142]
[64 140]
[65 139]
[66 138]
[68 130]
[69 129]
[70 128]
[71 127]
[72 126]
[73 124]
[74 123]
[75 122]
[76 121]
[77 117]
[78 116]
[81 113]
[82 112]
[83 111]
[85 109]
[86 108]
[87 107]
[88 106]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
