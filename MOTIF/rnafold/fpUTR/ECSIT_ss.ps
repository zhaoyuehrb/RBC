%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUUGCUACCUCCCUGGAGCUCCCUGACCCGGACGCUCUCUGGGCCAAUAUGGCAGCGCCCAGCAACAAGACAGAGCUGGCCUGGAGUCCGCGGCUGGCCGCGUGAGUAGGUGAUUGUCUGACAAGCAGAGGC\
) } def
/len { sequence length } bind def

/coor [
[84.45171356 249.30412292]
[84.25102997 233.50111389]
[95.34321594 222.24327087]
[94.99417877 207.24732971]
[94.64514160 192.25138855]
[94.29611206 177.25544739]
[93.94707489 162.25950623]
[93.59803772 147.26358032]
[81.48266602 144.88186646]
[70.17848969 139.39369202]
[60.48143387 131.06198120]
[53.10483170 120.35319519]
[48.62759399 107.91194153]
[34.07315826 111.54077148]
[25.90636444 124.80506134]
[11.09440327 128.27787781]
[-1.50073636 120.41033936]
[-16.05517197 124.03916931]
[-30.60960770 127.66799927]
[-45.16404343 131.29682922]
[-59.71847916 134.92565918]
[-74.22970581 138.72358704]
[-88.69576263 142.69009399]
[-103.16181946 146.65660095]
[-109.52312469 160.94183350]
[-123.60112000 167.74948120]
[-138.74861145 163.86518860]
[-147.81340027 151.12300110]
[-146.51538086 135.53938293]
[-135.46745300 124.47244263]
[-119.88607788 123.14765930]
[-107.12833405 132.19055176]
[-92.66227722 128.22404480]
[-78.19622040 124.25752258]
[-72.52545929 119.41064453]
[-63.34730911 120.37121582]
[-48.79287338 116.74239349]
[-34.23843765 113.11356354]
[-19.68400002 109.48473358]
[-5.12956476 105.85590363]
[2.29770064 92.99622345]
[17.00627518 89.10874939]
[30.44432831 96.98633575]
[44.99876404 93.35750580]
[48.79669189 78.84628296]
[37.88608932 68.55265808]
[26.97548294 58.25903320]
[16.06487846 47.96540833]
[0.39466086 41.49388123]
[2.27532744 24.64456749]
[18.98678589 21.78738213]
[26.35850334 37.05480194]
[37.26910782 47.34842682]
[48.17971039 57.64205170]
[59.09031677 67.93567657]
[68.53826141 61.34964752]
[78.80754089 57.27167130]
[74.33858490 42.95285797]
[60.85465622 34.26014709]
[59.38722229 18.28434563]
[71.06197357 7.28072405]
[86.92304230 9.69031715]
[94.80316925 23.66469193]
[88.65739441 38.48390579]
[93.12635040 52.80271912]
[105.39511871 52.61093903]
[117.30680847 55.55559921]
[128.07304382 61.44180298]
[136.98127747 69.87998199]
[143.44190979 80.31164551]
[157.90795898 76.34513092]
[172.37402344 72.37861633]
[186.84007263 68.41210938]
[201.30612183 64.44559479]
[215.77218628 60.47908401]
[218.62351990 50.03280640]
[225.54005432 41.80706024]
[235.19479370 37.27416229]
[245.77920532 37.20794296]
[255.34191895 41.55248260]
[262.14846802 49.44493866]
[276.85595703 46.49718857]
[291.56347656 43.54944229]
[306.27099609 40.60169220]
[320.97848511 37.65394211]
[326.54141235 28.17327118]
[336.22848511 23.46306610]
[346.68319702 24.88351822]
[354.43106079 31.71583748]
[369.25979614 29.45555115]
[384.06121826 27.02288246]
[398.83331299 24.41816139]
[413.60543823 21.81343842]
[428.37756348 19.20871544]
[443.14965820 16.60399246]
[455.35751343 5.65406799]
[470.85812378 11.00788212]
[473.70578003 27.15788841]
[460.97109985 37.49034882]
[445.75439453 31.37610817]
[430.98226929 33.98083115]
[416.21017456 36.58555603]
[401.43804932 39.19027710]
[386.66592407 41.79499817]
[380.56921387 46.09380341]
[371.52008057 44.28427887]
[356.69134521 46.54456329]
[342.62371826 59.73221588]
[323.92623901 52.36145020]
[309.21871948 55.30920029]
[294.51123047 58.25694656]
[279.80371094 61.20469666]
[265.09622192 64.15244293]
[255.64305115 81.09630585]
[236.51824951 85.83821106]
[219.73869324 74.94513702]
[205.27264404 78.91165161]
[190.80657959 82.87816620]
[176.34053040 86.84467316]
[161.87446594 90.81118774]
[147.40841675 94.77770233]
[146.83547974 109.01486206]
[142.08256531 122.44745636]
[133.57383728 133.87664795]
[122.06871033 142.28240967]
[108.59397888 146.91453552]
[108.94301605 161.91047668]
[109.29204559 176.90641785]
[109.64108276 191.90235901]
[109.99011993 206.89830017]
[110.33914948 221.89422607]
[121.94309998 232.62380981]
[122.47787476 248.41905212]
[111.62620544 259.90890503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[13 44]
[14 43]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[22 34]
[23 33]
[24 32]
[45 55]
[46 54]
[47 53]
[48 52]
[57 65]
[58 64]
[70 121]
[71 120]
[72 119]
[73 118]
[74 117]
[75 116]
[81 113]
[82 112]
[83 111]
[84 110]
[85 109]
[89 107]
[90 106]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
