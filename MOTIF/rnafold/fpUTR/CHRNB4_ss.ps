%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCAGCAAACCUCGGGGGCCAGGACCGGCGCUCACUCGACCGCGCGGCUCACGGGUGCCCUGUGACCCCACAGCGGAGCUCGCGGCGGCUGCCACCCGGCCCCGCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[37.04518509 397.82797241]
[29.48263168 383.27670288]
[38.53004074 369.59912109]
[38.94701385 354.60491943]
[39.36398315 339.61071777]
[31.98346901 326.67327881]
[40.10139847 313.09350586]
[40.51837158 298.09930420]
[29.50704002 308.28512573]
[14.63831520 310.26525879]
[1.34504592 303.31622314]
[-5.51556587 289.97711182]
[-3.43673491 275.12185669]
[6.82195807 264.17840576]
[21.51211166 261.14535522]
[35.26611710 267.13095093]
[43.05810547 279.94677734]
[46.77229309 265.41387939]
[50.48648453 250.88101196]
[54.20067215 236.34811401]
[57.91486359 221.81523132]
[61.62905121 207.28234863]
[57.28413010 193.03556824]
[68.19757843 181.58099365]
[71.91176605 167.04811096]
[65.84999847 158.60917664]
[65.50330353 148.00309753]
[71.23498535 138.81047058]
[81.31470490 134.27168274]
[85.83081055 119.96767426]
[90.34692383 105.66365814]
[94.66376495 91.29825592]
[98.78050995 76.87422943]
[84.35758972 80.99485779]
[71.98049164 72.52093506]
[70.60514832 57.58412170]
[81.22675323 46.99254608]
[96.15961456 48.41016769]
[104.59858704 60.81203461]
[110.67423248 47.09756851]
[111.31368256 37.84049606]
[117.11411285 33.08999252]
[123.56864166 19.54971886]
[130.02317810 6.00944328]
[136.47770691 -7.53083181]
[142.93223572 -21.07110786]
[143.82876587 -30.30682755]
[149.75900269 -34.89425278]
[156.58743286 -48.24987030]
[163.41586304 -61.60549164]
[170.24429321 -74.96110535]
[177.07272339 -88.31672668]
[178.22564697 -97.52395630]
[184.28112793 -101.94476318]
[191.47817993 -115.10540009]
[176.64729309 -112.85931396]
[164.42172241 -121.55042267]
[161.67007446 -136.29588318]
[169.93826294 -148.81134033]
[184.58106995 -152.06535339]
[197.37179565 -144.22972107]
[201.12426758 -129.70597839]
[210.40657043 -141.48895264]
[219.68888855 -153.27194214]
[228.97120667 -165.05491638]
[238.25352478 -176.83790588]
[240.06423950 -193.13677979]
[255.19139099 -199.46934509]
[268.07345581 -189.32121277]
[265.45846558 -173.13189697]
[250.03649902 -167.55558777]
[240.75418091 -155.77259827]
[231.47187805 -143.98962402]
[222.18955994 -132.20664978]
[212.90724182 -120.42366791]
[204.63880920 -107.90834808]
[197.44175720 -94.74771118]
[190.42834473 -81.48829651]
[183.59991455 -68.13268280]
[176.77148438 -54.77706146]
[169.94305420 -41.42144394]
[163.11462402 -28.06582451]
[156.47250366 -14.61657715]
[150.01797485 -1.07630229]
[143.56344604 12.46397305]
[137.10891724 26.00424767]
[130.65438843 39.54452133]
[124.38869476 53.17321014]
[118.31305695 66.88768005]
[113.20452881 80.99097443]
[109.08779144 95.41499329]
[110.08264160 103.53813171]
[104.65093231 110.17977142]
[100.13482666 124.48377991]
[95.61871338 138.78779602]
[100.96959686 158.12547302]
[86.44465637 170.76229858]
[82.73046875 185.29518127]
[86.80972290 200.58145142]
[76.16193390 210.99653625]
[72.44774628 225.52941895]
[68.73355865 240.06231689]
[65.01937103 254.59519958]
[61.30517960 269.12808228]
[57.59099197 283.66098022]
[55.51257324 298.51626587]
[55.09560013 313.51046753]
[62.44629288 327.52041626]
[54.35818863 340.02767944]
[53.94121552 355.02188110]
[53.52424622 370.01608276]
[61.79754257 384.17532349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 111]
[4 110]
[5 109]
[7 107]
[8 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[24 98]
[25 97]
[29 95]
[30 94]
[31 93]
[32 91]
[33 90]
[39 89]
[40 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[54 77]
[55 76]
[62 75]
[63 74]
[64 73]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
