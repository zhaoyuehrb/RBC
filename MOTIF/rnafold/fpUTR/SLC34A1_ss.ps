%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGUCCUGGAGGCUUCAUUGAGCUGCUGAGCAGAAGCUGAAACACAGAAUUCUAAGCGUUGCUGAGACCCACUGACCUGCAGACCUCAUAGUGGGUGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[102.87954712 208.49838257]
[90.21324158 217.95037842]
[74.58547211 215.59487915]
[65.26792145 202.82934570]
[67.78852081 187.22735596]
[80.65184784 178.04528809]
[82.88748169 163.21282959]
[85.12311554 148.38035583]
[87.35874939 133.54789734]
[89.59438324 118.71543884]
[87.41337585 117.32400513]
[85.41606903 115.67971802]
[72.00041199 122.38941193]
[58.58475113 129.09910583]
[45.16909027 135.80880737]
[31.75342751 142.51850891]
[23.17568207 156.49542236]
[6.79193306 155.78491211]
[-0.54362130 141.11788940]
[8.71520805 127.58251953]
[25.04373169 129.10284424]
[38.45939255 122.39314270]
[51.87505341 115.68344879]
[65.29071808 108.97374725]
[78.70637512 102.26405334]
[83.41222382 83.03985596]
[103.32639313 74.18019104]
[98.47824860 59.98527908]
[86.69587708 49.42657089]
[89.90431976 34.88163376]
[85.05617523 20.68672180]
[80.20803070 6.49181175]
[75.35988617 -7.70309925]
[70.51174164 -21.89801025]
[59.21609116 -28.34362221]
[55.52530289 -40.39329910]
[60.91802597 -51.33585358]
[56.49670029 -65.66944885]
[52.07537079 -80.00303650]
[47.22722626 -94.19794464]
[41.95660400 -108.24147034]
[36.68598175 -122.28499603]
[21.69283485 -126.28314209]
[11.93933678 -138.35165405]
[11.17590714 -153.84992981]
[19.69609833 -166.81858826]
[34.22372437 -172.27088928]
[49.17261887 -168.11033630]
[58.79462433 -155.93673706]
[59.38988113 -140.43107605]
[50.72950363 -127.55561829]
[56.00012589 -113.51209259]
[61.27074814 -99.46856689]
[65.31912994 -96.66097260]
[67.55090332 -91.20822906]
[66.40896606 -84.42436218]
[70.83029175 -70.09077454]
[75.25161743 -55.75717926]
[88.73541260 -44.63579941]
[84.70665741 -26.74615479]
[89.55480194 -12.55124378]
[94.40294647 1.64366674]
[99.25109100 15.83857727]
[104.09923553 30.03348732]
[115.53482819 39.57688522]
[112.67315674 55.13713455]
[117.52130127 69.33204651]
[128.66847229 79.36900330]
[143.29238892 82.70681763]
[157.91632080 86.04463196]
[172.54023743 89.38244629]
[187.16415405 92.72026062]
[201.78807068 96.05807495]
[216.41198730 99.39588928]
[231.03590393 102.73370361]
[239.80369568 90.31620026]
[252.65870667 82.20343018]
[267.64065552 79.63254547]
[282.46490479 82.99556732]
[294.87088013 91.77967834]
[302.96673584 104.64535522]
[305.51791382 119.63068390]
[302.13537598 134.45050049]
[293.33496094 146.84489441]
[280.45864868 154.92381287]
[265.46997070 157.45527649]
[250.65461731 154.05325317]
[238.27180481 145.23654175]
[230.20983887 132.34960938]
[227.69808960 117.35762024]
[213.07417297 114.01980591]
[198.45025635 110.68199158]
[183.82633972 107.34417725]
[169.20242310 104.00636292]
[154.57850647 100.66854858]
[139.95457458 97.33073425]
[125.33066559 93.99291992]
[123.40692139 107.21389771]
[115.47785950 116.94989777]
[104.42684937 120.95107269]
[102.19121552 135.78353882]
[99.95558167 150.61599731]
[97.71994781 165.44845581]
[95.48431396 180.28091431]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 104]
[7 103]
[8 102]
[9 101]
[10 100]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[27 67]
[28 66]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[37 58]
[38 57]
[39 56]
[40 53]
[41 52]
[42 51]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[73 92]
[74 91]
[75 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
