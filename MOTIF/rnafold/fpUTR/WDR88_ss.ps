%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGCGCGGGCGCGGGCGCGCGGCGCCACCGUUCCCAUCCAGGCUUGUCGGCGGCCACCGGCGGACCGGGCUUCGAG\
) } def
/len { sequence length } bind def

/coor [
[78.96665192 112.35820770]
[64.32401276 115.61289215]
[49.68136597 118.86756897]
[35.03871918 122.12225342]
[20.53704643 125.95650482]
[6.19927502 130.36425781]
[-8.13849735 134.77201843]
[-22.47626877 139.17976379]
[-29.31659126 150.32295227]
[-41.55603027 153.60052490]
[-52.33801651 147.75172424]
[-66.83969116 151.58598328]
[-81.34136200 155.42022705]
[-95.84304047 159.25447083]
[-107.08968353 171.18951416]
[-122.98463440 167.15434265]
[-127.17652893 151.30000305]
[-115.35310364 139.93608093]
[-99.67728424 144.75280762]
[-85.17561340 140.91854858]
[-70.67394257 137.08430481]
[-56.17226791 133.25006104]
[-44.58010101 120.23160553]
[-26.88402367 124.84199524]
[-12.54625130 120.43424225]
[1.79152083 116.02648926]
[16.12929344 111.61872864]
[19.21707535 107.65132904]
[24.94107437 105.75138092]
[31.78403854 107.47960663]
[46.42668152 104.22492981]
[61.06932831 100.97024536]
[75.71197510 97.71556091]
[78.98991394 87.60228729]
[86.25797272 79.84352112]
[96.13584137 75.91275787]
[106.74757385 76.55651093]
[116.07784271 81.65251923]
[122.35469055 90.23298645]
[137.28062439 88.74417877]
[150.24470520 79.67536163]
[163.67707825 86.11122894]
[178.60301208 84.62242126]
[193.52894592 83.13361359]
[208.45487976 81.64480591]
[223.38081360 80.15599823]
[238.30674744 78.66719055]
[253.23268127 77.17838287]
[268.08761597 75.09735107]
[282.84808350 72.42738342]
[297.60855103 69.75741577]
[309.81112671 59.68727112]
[323.71237183 65.03558350]
[338.47283936 62.36561584]
[353.23330688 59.69564819]
[367.74325562 50.92653275]
[380.18643188 62.44190216]
[372.56570435 77.58656311]
[355.90325928 74.45611572]
[341.14279175 77.12608337]
[326.38232422 79.79605103]
[315.23553467 89.67521667]
[300.27850342 84.51787567]
[285.51803589 87.18784332]
[270.75759888 89.85781860]
[267.21954346 93.42951202]
[261.31011963 94.63469696]
[254.72148132 92.10431671]
[239.79554749 93.59312439]
[224.86961365 95.08193207]
[209.94367981 96.57073975]
[195.01774597 98.05954742]
[180.09182739 99.54835510]
[165.16589355 101.03716278]
[153.26942444 109.99948120]
[138.76943970 103.67011261]
[123.84349823 105.15891266]
[112.92980957 120.68688202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 33]
[2 32]
[3 31]
[4 30]
[5 27]
[6 26]
[7 25]
[8 24]
[11 22]
[12 21]
[13 20]
[14 19]
[39 77]
[40 76]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 65]
[50 64]
[51 63]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
