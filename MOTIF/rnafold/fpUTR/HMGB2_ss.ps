%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGAUGUGGCCCGUGGCCUAGCUCGUCAAGUUGCCGUGGCGCGGAGAACUCUGCAAAACAAGAGGCUGAGGAUUGCGUUAGAGAUAAACCAGUUCACGCCGGAGCCCCGUGAGGGAAGCGUCUCCGUUGGGUCCGGCCGCUCUGCGGGACUCUGAGGAAAAGCUCGCACCAGGUGGACGCGGAUCUGUCAAC\
) } def
/len { sequence length } bind def

/coor [
[384.87026978 265.58255005]
[371.60583496 258.57864380]
[358.34140015 251.57472229]
[345.07696533 244.57081604]
[331.81253052 237.56689453]
[318.54809570 230.56297302]
[305.28366089 223.55906677]
[292.01922607 216.55514526]
[277.90817261 221.18258667]
[264.35635376 214.26856995]
[259.59835815 199.43620300]
[246.33393860 192.43229675]
[233.06950378 185.42837524]
[221.40299988 190.91796875]
[208.51324463 188.64749146]
[199.15011597 179.22590637]
[196.89460754 165.93841553]
[183.74533081 158.72062683]
[170.37390137 165.22775269]
[155.55953979 162.58219910]
[145.02040100 151.59219360]
[142.94943237 136.32730103]
[129.80015564 129.10951233]
[116.65088654 121.89171600]
[103.50160217 114.67392731]
[88.50209808 114.55247498]
[75.23766327 121.55638885]
[61.97323227 128.56030273]
[48.70880127 135.56422424]
[46.63839340 150.94255066]
[35.89991760 162.14366150]
[20.62253380 164.86048889]
[6.68070745 158.04835510]
[-0.56464499 144.32667542]
[1.67246306 128.97171021]
[12.53181744 117.88775635]
[27.83777618 115.33682251]
[41.70488358 122.29978943]
[54.96931458 115.29587555]
[68.23374939 108.29196167]
[81.49818420 101.28804779]
[77.89030457 86.72840118]
[62.89030838 86.72840118]
[47.89030838 86.72840118]
[32.89030838 86.72840118]
[17.89030647 86.72840118]
[3.96650338 95.39210510]
[-10.36893082 87.42797089]
[-10.36893082 71.02882385]
[3.96650338 63.06469727]
[17.89030647 71.72840118]
[32.89030838 71.72840118]
[47.89030838 71.72840118]
[62.89030838 71.72840118]
[77.89030457 71.72840118]
[81.86584473 65.36875153]
[68.70211029 58.17737198]
[55.53836823 50.98598862]
[41.42710876 45.89950562]
[40.88980103 30.90913200]
[54.60068512 24.82540894]
[65.35482025 35.28266907]
[77.58586884 43.96606827]
[89.81692505 52.64946365]
[93.79246521 46.28981781]
[87.22174835 32.80554199]
[80.65103149 19.32126617]
[67.48875427 16.42315483]
[58.53297424 6.61352825]
[56.89113235 -6.37127876]
[62.94079971 -17.75742340]
[56.58929825 -31.34633064]
[50.23779678 -44.93523788]
[43.88629532 -58.52414703]
[37.53479385 -72.11305237]
[31.18329239 -85.70196533]
[24.70524788 -92.16257477]
[24.84095573 -99.56272888]
[18.71033287 -113.25270844]
[12.57971001 -126.94268799]
[-2.50986028 -131.04620361]
[-11.38894463 -143.91850281]
[-9.86511040 -159.48165894]
[1.34213376 -170.38723755]
[16.94107056 -171.48596191]
[29.56635857 -162.25903320]
[33.25672150 -147.06314087]
[26.26968765 -133.07330322]
[32.40031052 -119.38333130]
[38.53093338 -105.69335175]
[44.77220154 -92.05346680]
[51.12370300 -78.46456146]
[57.47520447 -64.87564850]
[63.82670593 -51.28674316]
[70.17820740 -37.69783401]
[76.52970886 -24.10892487]
[92.56433868 -19.05782890]
[100.13986969 -3.67279601]
[94.13530731 12.75055122]
[100.70602417 26.23482704]
[107.27674103 39.71910477]
[128.37638855 78.21743011]
[110.71939087 101.52465057]
[123.86867523 108.74243927]
[137.01794434 115.96022797]
[150.16723633 123.17801666]
[164.15715027 116.72911835]
[179.08734131 119.71953583]
[189.27336121 130.79695129]
[190.96311951 145.57135010]
[204.11239624 152.78913879]
[220.80795288 147.58921814]
[235.80696106 155.90293884]
[240.07341003 172.16394043]
[253.33784485 179.16786194]
[266.60229492 186.17176819]
[281.53421021 181.73612976]
[294.88647461 189.02806091]
[299.02316284 203.29071045]
[312.28759766 210.29463196]
[325.55203247 217.29855347]
[338.81643677 224.30245972]
[352.08087158 231.30638123]
[365.34530640 238.31028748]
[378.60974121 245.31420898]
[391.87417603 252.31813049]
[409.30511475 242.55979919]
[428.95193481 245.26811218]
[442.88876343 259.17526245]
[445.59902954 278.53115845]
[459.28900146 284.66177368]
[472.97897339 290.79241943]
[486.66894531 296.92303467]
[500.35894775 303.05364990]
[514.04888916 309.18426514]
[527.73889160 315.31491089]
[547.66650391 312.33532715]
[558.33203125 328.45407104]
[572.21337891 334.13818359]
[586.09466553 339.82226562]
[599.97601318 345.50637817]
[613.85729980 351.19049072]
[633.67797852 347.56716919]
[644.85992432 363.33209229]
[658.91802979 368.56372070]
[672.97607422 373.79534912]
[687.03417969 379.02694702]
[701.09228516 384.25857544]
[715.15039062 389.49017334]
[724.29919434 389.55194092]
[729.39263916 394.92202759]
[743.36419678 400.38058472]
[755.79522705 391.24426270]
[771.19378662 390.30181885]
[784.64624023 397.85403442]
[791.85992432 411.49096680]
[790.53295898 426.86117554]
[781.08886719 439.06002808]
[766.54113770 444.19497681]
[751.53198242 440.62741089]
[740.85064697 429.49578857]
[737.90557861 414.35214233]
[723.93408203 408.89355469]
[709.91876221 403.54827881]
[695.86065674 398.31668091]
[681.80261230 393.08505249]
[667.74450684 387.85342407]
[653.68640137 382.62182617]
[639.62829590 377.39019775]
[630.74035645 382.46694946]
[620.30676270 381.79165649]
[611.79681396 375.34646606]
[608.17321777 365.07180786]
[594.29187012 359.38769531]
[580.41058350 353.70358276]
[566.52923584 348.01950073]
[552.64794922 342.33538818]
[543.60028076 347.12167358]
[533.19403076 346.10888672]
[524.89721680 339.39151001]
[521.60827637 329.00488281]
[507.91827393 322.87423706]
[494.22830200 316.74362183]
[480.53833008 310.61300659]
[466.84835815 304.48239136]
[453.15838623 298.35174561]
[439.46841431 292.22113037]
[431.82968140 299.23944092]
[422.25308228 303.32485962]
[411.82418823 303.98654175]
[401.73440552 301.12335205]
[393.14501953 295.03826904]
[387.05340576 286.40664673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 126]
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[11 116]
[12 115]
[13 114]
[17 111]
[18 110]
[22 106]
[23 105]
[24 104]
[25 103]
[26 41]
[27 40]
[28 39]
[29 38]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[65 101]
[66 100]
[67 99]
[71 96]
[72 95]
[73 94]
[74 93]
[75 92]
[76 91]
[78 90]
[79 89]
[80 88]
[130 187]
[131 186]
[132 185]
[133 184]
[134 183]
[135 182]
[136 181]
[138 177]
[139 176]
[140 175]
[141 174]
[142 173]
[144 169]
[145 168]
[146 167]
[147 166]
[148 165]
[149 164]
[151 163]
[152 162]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
