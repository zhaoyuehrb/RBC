%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGACCAAUGGUGGAGGCUGCAGCCUGCGAACUAGUCGGUGGCUCGGGCGCCGGCGGGGAGCUGCUCGGCGGCGGACAGUGUA\
) } def
/len { sequence length } bind def

/coor [
[127.91100311 122.20075226]
[126.00871277 110.94656372]
[111.13404083 109.01157379]
[98.15222168 114.20426178]
[86.93096924 105.86309052]
[72.05629730 103.92810822]
[57.18162918 101.99311829]
[43.65024185 112.89548492]
[26.73711967 110.79964447]
[16.67914009 97.45822906]
[1.74312842 96.07420349]
[-13.19288445 94.69017792]
[-28.12889671 93.30615234]
[-41.98328018 105.94326019]
[-60.38154602 104.71309662]
[-72.02819061 90.82316589]
[-87.02562714 90.54598236]
[-102.02306366 90.26879883]
[-117.02050781 89.99161530]
[-131.10202026 98.39653778]
[-145.28784180 90.16886902]
[-144.98480225 73.77252197]
[-130.50465393 66.07465363]
[-116.74332428 74.99417877]
[-101.74588013 75.27136230]
[-86.74844360 75.54854584]
[-71.75100708 75.82572937]
[-65.25952911 66.10483551]
[-54.72270966 60.76970291]
[-42.80264664 61.30185699]
[-32.57711792 67.68322754]
[-26.74487114 78.37014008]
[-11.80885887 79.75416565]
[3.12715387 81.13819122]
[18.06316566 82.52221680]
[26.84560394 72.90404510]
[39.77261734 70.13299561]
[52.08569717 75.46190643]
[59.11661911 87.11844635]
[73.99128723 89.05343628]
[88.86595917 90.98842621]
[101.84777832 85.79573822]
[113.06903076 94.13690948]
[127.94370270 96.07189178]
[137.50563049 79.22084045]
[153.19589233 67.93003082]
[172.12429810 64.23348236]
[190.82324219 68.77053070]
[205.88293457 80.67559814]
[214.57324219 97.74304962]
[229.50924683 96.35902405]
[244.44526672 94.97499847]
[259.38128662 93.59097290]
[274.31729126 92.20694733]
[287.34469604 83.22933960]
[300.73156738 89.75930786]
[315.66760254 88.37528229]
[330.60360718 86.99125671]
[345.53961182 85.60723114]
[355.44204712 73.28986359]
[371.16262817 71.66532898]
[383.37460327 81.69743347]
[384.83282471 97.43430328]
[374.67218018 109.53953552]
[358.92077637 110.83131409]
[346.92364502 100.54324341]
[331.98764038 101.92726898]
[317.05160522 103.31129456]
[302.11560059 104.69532013]
[290.15652466 113.57393646]
[275.70132446 107.14295959]
[260.76531982 108.52698517]
[245.82928467 109.91101074]
[230.89328003 111.29503632]
[215.95726013 112.67906189]
[213.74432373 123.72943878]
[208.83610535 133.88880920]
[201.53776550 142.51048279]
[192.30685425 149.04386902]
[181.72456360 153.06959534]
[170.45919800 154.32641602]
[159.22395325 152.72817993]
[148.73175049 148.36968994]
[139.65003967 141.52114868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[5 41]
[6 40]
[7 39]
[10 35]
[11 34]
[12 33]
[13 32]
[16 27]
[17 26]
[18 25]
[19 24]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
