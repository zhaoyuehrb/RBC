%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCGCCUCUGGGAGGUUUAGGAAGCGGCUCCGGGUCGGUGGCCCCAGGACAGGGAAGAGCGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[133.32533264 168.98251343]
[129.71986389 154.42227173]
[135.97518921 140.78883362]
[149.36495972 134.02589417]
[136.04667664 127.12491608]
[122.72840118 120.22394562]
[109.41011810 113.32296753]
[92.82744598 114.64944458]
[83.70559692 100.73770905]
[70.08702087 94.45005798]
[54.31448746 95.69008636]
[46.00263214 83.33037567]
[32.38405991 77.04273224]
[18.76548767 70.75508118]
[5.14691687 64.46743774]
[-6.28065109 74.53374481]
[-20.81652832 79.07556915]
[-35.94228745 77.30600739]
[-49.03729630 69.53165436]
[-57.83276749 57.09945297]
[-60.80483246 42.16336441]
[-57.43856049 27.31115532]
[-48.31718445 15.11605930]
[-35.02103043 7.69095135]
[-19.85374260 6.32227659]
[-5.44314432 11.24716473]
[5.71404219 21.61235046]
[11.68476677 35.62200165]
[11.43456459 50.84886169]
[25.05313683 57.13651276]
[38.67170715 63.42416000]
[52.29027939 69.71180725]
[67.08872223 68.02204895]
[76.37467194 80.83148956]
[89.99324036 87.11913300]
[101.35838318 83.74556732]
[112.00593567 88.95874023]
[116.31109619 100.00469208]
[129.62937927 106.90566254]
[142.94764709 113.80664062]
[156.26593018 120.70761871]
[170.51052856 125.40777588]
[185.32046509 127.78801727]
[200.13041687 130.16825867]
[214.94035339 132.54849243]
[222.29774475 119.29538727]
[233.74627686 109.36026001]
[247.90350342 103.94282532]
[263.05987549 103.69725800]
[277.38519287 108.65322113]
[289.14956665 118.21224976]
[296.93243408 131.22006226]
[299.79394531 146.10586548]
[297.38858032 161.07217407]
[290.00677490 174.31169128]
[278.53994751 184.22570801]
[264.37277222 189.61703491]
[249.21597290 189.83467102]
[234.89982605 184.85232544]
[223.15307617 175.27162170]
[215.39419556 162.24949646]
[212.56011963 147.35842896]
[197.75018311 144.97819519]
[182.94023132 142.59796143]
[168.13029480 140.21772766]
[174.86579895 153.62043762]
[171.77966309 168.29953003]
[160.21733093 177.85530090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 41]
[5 40]
[6 39]
[7 38]
[9 35]
[10 34]
[12 32]
[13 31]
[14 30]
[15 29]
[42 65]
[43 64]
[44 63]
[45 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
