%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGAGGCCCCUCUUUUCGGCAGCUGGGAGGGCAGCGGGGCGGACCGACGGGAUCUCGCGAGAUUCUCGCGCGGUAGGCCCUGAGGACCCAGC\
) } def
/len { sequence length } bind def

/coor [
[39.20072937 165.60731506]
[31.68375397 164.08570862]
[25.28044701 159.99172974]
[11.90433979 166.77993774]
[-1.47176826 173.56814575]
[-14.84787655 180.35633850]
[-28.22398376 187.14454651]
[-33.22154617 201.89793396]
[-46.88352203 208.59158325]
[-60.91781235 203.73625183]
[-74.29392242 210.52445984]
[-87.67002869 217.31266785]
[-89.13210297 232.67059326]
[-98.68315125 244.78590393]
[-113.27547455 249.79266357]
[-128.25271606 246.09323120]
[-138.83569336 234.86807251]
[-141.64739990 219.69909668]
[-135.79066467 205.42666626]
[-123.13431549 196.60507202]
[-107.71696472 196.04925537]
[-94.45823669 203.93655396]
[-81.08213043 197.14834595]
[-67.70601654 190.36015320]
[-63.33892059 176.16633606]
[-49.87034607 169.09158325]
[-35.01218796 173.76844788]
[-21.63608170 166.98023987]
[-8.25997353 160.19203186]
[5.11613464 153.40382385]
[18.49224281 146.61561584]
[28.09315109 126.34829712]
[51.22651291 126.38550568]
[63.33314896 117.52947235]
[75.43978119 108.67343903]
[75.05419159 92.50737000]
[84.28353882 79.22920990]
[99.57052612 73.95680237]
[115.02304840 78.72229004]
[126.83655548 69.47886658]
[138.65007019 60.23543930]
[150.46357727 50.99201202]
[162.27709961 41.74858475]
[174.09060669 32.50515747]
[176.14515686 17.06441498]
[188.25741577 7.85855293]
[202.96514893 9.91241169]
[214.77865601 0.66898429]
[226.59216309 -8.57444286]
[238.40567017 -17.81786919]
[244.78559875 -34.99639130]
[262.13961792 -36.97793579]
[273.64761353 -46.59905624]
[284.99832153 -56.40526962]
[296.18872070 -66.39399719]
[307.37911987 -76.38272858]
[318.56954956 -86.37145233]
[329.75994873 -96.36018372]
[340.95037842 -106.34890747]
[345.56860352 -122.08434296]
[361.56668091 -125.68907166]
[372.48712158 -113.45485687]
[367.09591675 -97.96720886]
[350.93908691 -95.15850067]
[339.74868774 -85.16976929]
[328.55825806 -75.18104553]
[317.36785889 -65.19231415]
[306.17745972 -55.20358658]
[294.98703003 -45.21485901]
[292.03741455 -38.28042221]
[283.26873779 -35.09106064]
[271.76074219 -25.46993637]
[270.32540894 -13.33852863]
[260.64935303 -5.23767948]
[247.64910889 -6.00435781]
[235.83558655 3.23906898]
[224.02207947 12.48249626]
[212.20857239 21.72592354]
[210.66455078 36.49588013]
[198.81565857 46.03831863]
[183.33403015 44.31866837]
[171.52052307 53.56209564]
[159.70701599 62.80552292]
[147.89349365 72.04895020]
[136.07998657 81.29238129]
[124.26647186 90.53580475]
[125.76925659 103.79187012]
[120.51166534 116.05316925]
[109.87300110 124.10304260]
[96.64423370 125.82966614]
[84.29582214 120.78007507]
[72.18918610 129.63610840]
[60.08254623 138.49214172]
[60.68373108 146.48521423]
[58.38069916 154.09056091]
[53.53147507 160.29820251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 31]
[4 30]
[5 29]
[6 28]
[7 27]
[10 24]
[11 23]
[12 22]
[33 93]
[34 92]
[35 91]
[39 86]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[47 78]
[48 77]
[49 76]
[50 75]
[52 72]
[53 71]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
