%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGCCCGGCGCCCCGCCCCUCCCGCUGGAUCCCGCAGCCGCGGCUCUUCCCGACGCGUUCCGCCUUCCCCAGCUGUGCACUCUCCAUCCAGCUGUGCGCUCUCGUCGGGAGUCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[70.11846161 212.44657898]
[67.46647644 225.05331421]
[61.34842682 236.37001038]
[52.27825546 245.46759033]
[41.01178360 251.60249329]
[28.48372269 254.27743530]
[15.73014450 253.28167725]
[3.80278349 248.70764160]
[-5.57129669 260.41775513]
[-14.94537640 272.12786865]
[-24.31945610 283.83798218]
[-29.49772263 299.98175049]
[-46.44409180 299.47491455]
[-50.64826965 283.05050659]
[-36.02956390 274.46389771]
[-26.65548515 262.75378418]
[-17.28140450 251.04367065]
[-7.90732431 239.33357239]
[-16.70812607 224.53393555]
[-19.23386955 207.46635437]
[-15.07995033 190.68461609]
[-4.84322166 176.70983887]
[9.96360588 167.65180969]
[27.13545799 164.89041138]
[44.10327148 168.86549377]
[52.53774261 156.46148682]
[60.97221375 144.05746460]
[69.40668488 131.65344238]
[77.84115601 119.24942017]
[74.15609741 113.91571808]
[71.73174286 107.90319061]
[70.68636322 101.50512695]
[71.07095337 95.03363800]
[57.42647171 88.80241394]
[43.78199005 82.57118988]
[30.13751221 76.33996582]
[13.87294292 78.43658447]
[4.14139128 65.23700714]
[10.95384312 50.31981659]
[27.30223274 49.03054428]
[36.36873627 62.69548416]
[50.01321793 68.92671204]
[63.65769577 75.15793610]
[77.30217743 81.38916016]
[86.59013367 73.89003754]
[98.09611511 70.70956421]
[109.91699982 72.37378693]
[120.09759521 78.60744476]
[132.82060242 70.66233063]
[145.54362488 62.71720886]
[158.26663208 54.77209091]
[170.98965454 46.82696915]
[183.71266174 38.88185120]
[196.43568420 30.93673325]
[209.15869141 22.99161339]
[221.88169861 15.04649448]
[220.67776489 1.04458427]
[225.62536621 -12.03831196]
[235.69715881 -21.64802361]
[248.87153625 -25.93508148]
[262.53823853 -24.11048698]
[274.01544189 -16.59022522]
[286.94042969 -24.20236778]
[299.86541748 -31.81451035]
[300.06356812 -39.64130020]
[303.00585938 -46.82236862]
[308.26242065 -52.43752289]
[315.11035156 -55.78613663]
[322.63293457 -56.47438812]
[329.84225464 -54.46101761]
[335.80895996 -50.05635834]
[349.61059570 -55.93126297]
[363.41226196 -61.80616760]
[377.21389771 -67.68107605]
[391.01553345 -73.55597687]
[404.81719971 -79.43088531]
[405.02539062 -94.65837860]
[411.41510010 -108.48197174]
[422.87918091 -118.50665283]
[437.43148804 -122.99558258]
[452.55072021 -121.17102051]
[465.61737061 -113.34908295]
[474.36755371 -100.88497925]
[477.28527832 -85.93817902]
[473.86502075 -71.09831238]
[464.69934082 -58.93647003]
[451.37628174 -51.55977249]
[436.20410156 -50.24627304]
[421.81152344 -55.22354126]
[410.69210815 -65.62923431]
[396.89044189 -59.75433350]
[383.08880615 -53.87942505]
[369.28713989 -48.00452042]
[355.48550415 -42.12961578]
[341.68386841 -36.25471115]
[330.54220581 -16.77509499]
[307.47756958 -18.88952446]
[294.55258179 -11.27738190]
[281.62759399 -3.66523814]
[282.18069458 12.42840195]
[274.52890015 26.70355797]
[260.66119385 35.25070953]
[244.28314209 35.67567444]
[229.82682800 27.76950836]
[217.10380554 35.71462631]
[204.38079834 43.65974808]
[191.65777588 51.60486603]
[178.93476868 59.54998398]
[166.21174622 67.49510193]
[153.48873901 75.44022369]
[140.76573181 83.38533783]
[128.04270935 91.33045959]
[126.59840393 112.41287231]
[111.36783600 127.06153870]
[90.24517822 127.68389130]
[81.81070709 140.08792114]
[73.37623596 152.49192810]
[64.94176483 164.89595032]
[56.50728989 177.29997253]
[64.41335297 187.53987122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 18]
[9 17]
[10 16]
[11 15]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[33 44]
[34 43]
[35 42]
[36 41]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[62 99]
[63 98]
[64 97]
[71 95]
[72 94]
[73 93]
[74 92]
[75 91]
[76 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
