%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCUGUUUGUGAAAAGAGCUGAGCAGAGCUGAAGGCUGCAUGGUGGUUUCAGAAACUGCCUACUUAAUUUGAAAAGAACA\
) } def
/len { sequence length } bind def

/coor [
[105.16913605 194.17683411]
[102.95960999 179.34046936]
[100.75008392 164.50408936]
[98.54055786 149.66770935]
[96.33103180 134.83134460]
[94.12151337 119.99497223]
[81.82540131 111.40393829]
[67.13425446 114.43217468]
[52.44310760 117.46041107]
[37.75196457 120.48864746]
[23.06081581 123.51688385]
[8.36966991 126.54512024]
[-6.26300955 129.84431458]
[-20.83222580 133.41334534]
[-27.58219528 147.51908875]
[-41.84127045 153.93881226]
[-56.87674713 149.64131165]
[-65.58933258 136.65576172]
[-63.86521912 121.11351013]
[-52.51847076 110.35314941]
[-36.90667725 109.45539093]
[-24.40125275 118.84413147]
[-9.83203793 115.27510071]
[-3.94411492 110.51098633]
[5.34143353 111.85397339]
[20.03257942 108.82573700]
[34.72372818 105.79750061]
[49.41487503 102.76926422]
[64.10601807 99.74102783]
[78.79716492 96.71279144]
[85.23397827 83.16408539]
[78.30091858 69.86248016]
[71.36785889 56.56087494]
[64.43479919 43.25926971]
[51.75215912 32.00818634]
[59.05263901 16.70657539]
[75.77722931 19.48584557]
[77.73640442 36.32621384]
[84.66946411 49.62781906]
[91.60252380 62.92942429]
[98.53558350 76.23102570]
[105.85192108 77.88062286]
[109.15135956 63.24800110]
[123.78392792 66.54768372]
[120.48459625 81.17982483]
[127.80094147 82.82942200]
[139.77119446 73.78990173]
[151.74145508 64.75038147]
[163.71171570 55.71086121]
[175.68197632 46.67134094]
[187.65223694 37.63182068]
[199.62249756 28.59230232]
[211.59274292 19.55278206]
[220.58891296 5.18248940]
[236.88800049 9.84898949]
[236.91590881 26.80291367]
[220.63226318 31.52304077]
[208.66200256 40.56256104]
[196.69175720 49.60208130]
[184.72149658 58.64159775]
[172.75123596 67.68112183]
[160.78097534 76.72064209]
[148.81071472 85.76015472]
[136.84045410 94.79967499]
[151.67912292 92.60559845]
[165.75947571 97.77701569]
[175.76246643 108.95468903]
[179.34513855 123.52055359]
[175.66838074 138.06295776]
[165.59333801 149.17573547]
[151.47985840 154.25601196]
[136.63359070 152.11389160]
[124.53190613 143.25109863]
[118.00986481 129.74627686]
[108.95788574 117.78544617]
[111.16741180 132.62181091]
[113.37693787 147.45819092]
[115.58646393 162.29457092]
[117.79598236 177.13093567]
[120.00550842 191.96731567]
[131.98918152 202.63368225]
[130.97772217 218.64482117]
[117.74706268 227.71835327]
[102.44661713 222.89384460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[4 77]
[5 76]
[6 75]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 23]
[14 22]
[31 41]
[32 40]
[33 39]
[34 38]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[53 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
