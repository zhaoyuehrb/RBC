%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:10 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (LOC100130705)
} def

/sequence { (\
UCUGCUUGCUGUGCUCACCCCUCAGCUGUGGCCACCCUGGUGCCACUCCUUCCCUGGCCACC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 25 0.037105202 ubox
2 30 0.004657496 ubox
2 31 0.035699638 ubox
3 13 0.017224897 ubox
3 17 0.009661710 ubox
3 24 0.037688980 ubox
3 30 0.036357790 ubox
3 34 0.008542212 ubox
3 60 0.006421324 ubox
4 12 0.073898471 ubox
4 14 0.079265290 ubox
4 16 0.010501337 ubox
4 23 0.037468966 ubox
4 26 0.074946761 ubox
4 27 0.023480027 ubox
4 29 0.068158796 ubox
4 32 0.037281664 ubox
4 33 0.007173664 ubox
4 58 0.020872364 ubox
4 59 0.006218395 ubox
5 11 0.076108285 ubox
5 13 0.079417575 ubox
5 25 0.074914961 ubox
5 28 0.074073653 ubox
5 31 0.037946281 ubox
5 57 0.021168576 ubox
6 24 0.067926223 ubox
6 25 0.005645974 ubox
6 30 0.036676137 ubox
6 56 0.019213565 ubox
7 17 0.009702892 ubox
7 24 0.024856004 ubox
7 28 0.007695713 ubox
7 30 0.003201651 ubox
8 14 0.030473885 ubox
8 16 0.009669005 ubox
8 23 0.034406064 ubox
8 26 0.977986846 ubox
8 27 0.010698332 ubox
8 29 0.005937857 ubox
8 32 0.009557286 ubox
8 58 0.004567141 ubox
9 13 0.030329973 ubox
9 25 0.979699855 ubox
9 28 0.006503980 ubox
9 31 0.009717418 ubox
9 57 0.004634125 ubox
10 17 0.044856192 ubox
10 24 0.979342600 ubox
10 30 0.009497876 ubox
10 34 0.004866338 ubox
10 56 0.004443063 ubox
10 60 0.010141143 ubox
11 16 0.047037689 ubox
11 18 0.057703747 ubox
11 23 0.977876496 ubox
11 26 0.008670428 ubox
11 27 0.015901500 ubox
11 29 0.007890829 ubox
11 33 0.005475288 ubox
11 35 0.010085546 ubox
11 59 0.011438891 ubox
11 61 0.018621260 ubox
12 17 0.057674807 ubox
12 24 0.006915236 ubox
12 25 0.008429064 ubox
12 34 0.010123321 ubox
12 60 0.018685308 ubox
13 23 0.009669237 ubox
13 26 0.148746458 ubox
13 32 0.006859553 ubox
13 33 0.009587650 ubox
13 58 0.014255933 ubox
13 59 0.017414189 ubox
14 25 0.149030786 ubox
14 31 0.007566130 ubox
14 57 0.015716986 ubox
15 24 0.146990848 ubox
15 31 0.008513094 ubox
15 56 0.009096659 ubox
15 57 0.014380221 ubox
16 30 0.011732024 ubox
16 56 0.019838874 ubox
17 29 0.011786470 ubox
17 55 0.019233221 ubox
18 28 0.011755149 ubox
18 57 0.008658137 ubox
19 56 0.008691659 ubox
19 57 0.004061668 ubox
20 56 0.004096109 ubox
20 57 0.004418812 ubox
21 56 0.004462920 ubox
23 56 0.003195644 ubox
24 50 0.022434533 ubox
24 55 0.003174408 ubox
25 49 0.023307734 ubox
28 46 0.055482950 ubox
28 61 0.988870920 ubox
29 45 0.055589894 ubox
29 60 0.993466162 ubox
30 36 0.003491531 ubox
30 37 0.007128758 ubox
30 44 0.055666721 ubox
30 59 0.996814631 ubox
31 35 0.003458633 ubox
31 36 0.007060393 ubox
31 41 0.007154385 ubox
31 43 0.055626723 ubox
31 58 0.996827069 ubox
32 40 0.010360649 ubox
32 42 0.040218411 ubox
32 57 0.996821747 ubox
33 39 0.012169769 ubox
33 42 0.038191601 ubox
33 56 0.996684927 ubox
34 38 0.009971903 ubox
34 41 0.054158621 ubox
34 55 0.961146882 ubox
35 40 0.054368320 ubox
36 56 0.003182501 ubox
37 56 0.003208266 ubox
38 45 0.017002800 ubox
39 44 0.017576204 ubox
39 47 0.074761978 ubox
39 48 0.058404912 ubox
39 49 0.903762857 ubox
39 50 0.315309283 ubox
39 51 0.014255743 ubox
39 52 0.047948989 ubox
39 53 0.179557691 ubox
39 54 0.137124930 ubox
39 55 0.006242240 ubox
39 62 0.055296466 ubox
40 46 0.083695870 ubox
40 47 0.042293243 ubox
40 48 0.903434952 ubox
40 49 0.318884679 ubox
40 50 0.011784842 ubox
40 51 0.045041038 ubox
40 52 0.179969318 ubox
40 53 0.136207278 ubox
40 54 0.008772688 ubox
40 61 0.055959817 ubox
41 45 0.077919595 ubox
41 60 0.055818398 ubox
42 58 0.040663867 ubox
42 59 0.039534545 ubox
43 57 0.056668404 ubox
44 56 0.056669298 ubox
45 55 0.051790029 ubox
48 57 0.036525210 ubox
49 56 0.037168717 ubox
49 57 0.004852618 ubox
50 56 0.004885849 ubox
56 62 0.004585391 ubox
57 61 0.004567201 ubox
8 26 0.9500000 lbox
9 25 0.9500000 lbox
10 24 0.9500000 lbox
11 23 0.9500000 lbox
28 61 0.9500000 lbox
29 60 0.9500000 lbox
30 59 0.9500000 lbox
31 58 0.9500000 lbox
32 57 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
39 49 0.9500000 lbox
40 48 0.9500000 lbox
showpage
end
%%EOF
