%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACUGAGCAGCCAACCGCAGCCUCUGGCCACAAGGAGAGCGGAGCACAGGAGCAGGAAGCCGCCUACCACC\
) } def
/len { sequence length } bind def

/coor [
[95.74234772 140.46588135]
[87.15761566 138.60943604]
[79.17127228 134.95396423]
[72.15545654 129.66978455]
[66.43707275 123.00315094]
[62.28256226 115.26466370]
[59.88551331 106.81491852]
[59.35761642 98.04762268]
[60.72346878 89.37129974]
[63.91942978 81.19023132]
[68.79657745 73.88560486]
[59.26509476 62.30326080]
[48.01169205 61.83028030]
[39.16228867 55.22974777]
[35.64640427 45.00069046]
[38.44982147 34.78540802]
[29.94929504 22.42656326]
[21.44876862 10.06771755]
[12.94824219 -2.29112792]
[1.77715850 -3.72975278]
[-6.47207165 -11.06658649]
[-9.09560490 -21.56002045]
[-5.42440891 -31.49649429]
[-12.83104229 -44.54033661]
[-20.23767471 -57.58417511]
[-27.64430809 -70.62801361]
[-43.07880402 -72.22674561]
[-54.60334778 -82.61734772]
[-57.78651047 -97.80442047]
[-51.40430832 -111.94821930]
[-37.91082382 -119.61017609]
[-22.49457932 -117.84410095]
[-11.08343410 -107.32909393]
[-8.06520748 -92.10838318]
[-14.60046768 -78.03465271]
[-7.19383478 -64.99080658]
[0.21279849 -51.94696808]
[7.61943197 -38.90312576]
[24.93857002 -30.73592758]
[25.30708694 -10.79165459]
[33.80761337 1.56719089]
[42.30813980 13.92603588]
[50.80866623 26.28488159]
[68.76578522 32.93301010]
[70.84744263 52.77177429]
[80.37892914 64.35412598]
[102.89357758 59.41376877]
[124.47962952 67.49826813]
[138.20973206 86.01316071]
[139.67762756 109.01667786]
[153.44139099 114.97982025]
[163.67285156 110.27028656]
[174.55830383 112.11043549]
[182.35102844 119.61166382]
[184.51312256 129.98164368]
[197.71330261 137.10591125]
[210.91349792 144.23017883]
[225.98194885 139.46392822]
[239.96850586 146.82272339]
[244.57516479 161.94073486]
[237.06890869 175.84870911]
[221.90304565 180.29528809]
[208.07521057 172.64239502]
[203.78923035 157.43035889]
[190.58905029 150.30609131]
[177.38885498 143.18182373]
[158.37561035 145.45158386]
[147.47824097 128.74357605]
[133.71449280 122.78043365]
[128.04035950 129.48478699]
[121.05969238 134.81529236]
[113.09772491 138.52355957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 46]
[12 45]
[16 43]
[17 42]
[18 41]
[19 40]
[23 38]
[24 37]
[25 36]
[26 35]
[50 69]
[51 68]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
