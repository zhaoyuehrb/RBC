%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUGGCUCUGGAGGAGGUGGGUCAAGGACUCCAUGCCCCGCCCCCUGCCCCGCCCUUACCCCGCCCCAUGCAUUGGCACCCGGAGGGGCUCAGCUGACGCCGCACUUCACGUGACGCCGGUGCCGGGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[100.83715057 145.24609375]
[86.79222107 143.28353882]
[74.04433441 137.07038879]
[63.84539032 127.21680450]
[57.19694519 114.69043732]
[42.39849091 117.14109802]
[27.60003662 119.59175873]
[21.03625298 131.41714478]
[9.02211189 137.19145203]
[-3.92747712 134.99478149]
[-13.08886909 125.85708618]
[-27.94070625 127.96015930]
[-42.76687241 130.23718262]
[-57.56532669 132.68785095]
[-72.36377716 135.13850403]
[-84.71443176 145.02647400]
[-98.53479004 139.47248840]
[-113.33324432 141.92315674]
[-128.13169861 144.37380981]
[-142.93016052 146.82447815]
[-157.72860718 149.27513123]
[-172.52706909 151.72578430]
[-184.87771606 161.61376953]
[-198.69807434 156.05976868]
[-213.49653625 158.51043701]
[-225.84718323 168.39840698]
[-239.66754150 162.84442139]
[-254.46600342 165.29507446]
[-269.10449219 173.84793091]
[-281.37542725 162.14920044]
[-273.53082275 147.11927795]
[-256.91665649 150.49662781]
[-242.11820984 148.04595947]
[-230.82604980 138.33328247]
[-215.94718933 143.71197510]
[-201.14874268 141.26132202]
[-189.85658264 131.54862976]
[-174.97772217 136.92733765]
[-160.17927551 134.47666931]
[-145.38081360 132.02601624]
[-130.58236694 129.57534790]
[-115.78390503 127.12469482]
[-100.98545074 124.67403412]
[-89.69329071 114.96134949]
[-74.81443787 120.34004974]
[-60.01598740 117.88938904]
[-45.21753311 115.43872833]
[-39.07518387 111.20283508]
[-30.04377937 113.10832214]
[-15.19194221 111.00524902]
[-5.71517801 97.16293335]
[11.16538811 94.35772705]
[25.14937592 104.79330444]
[39.94783020 102.34264374]
[54.74628448 99.89198303]
[57.49801254 84.46000671]
[65.34931946 70.89260101]
[77.35818481 60.81762695]
[92.08370972 55.44393921]
[107.75907135 55.41629028]
[122.50346375 60.73800659]
[134.54779053 70.77055359]
[142.44691467 84.31018829]
[157.18385315 81.51329041]
[171.92079163 78.71638489]
[186.65773010 75.91948700]
[201.39466858 73.12258148]
[207.05584717 63.69746780]
[216.79333496 59.08689499]
[227.23493958 60.61699295]
[234.91191101 67.53231049]
[249.76374817 65.42923737]
[264.61560059 63.32616425]
[279.46743774 61.22309113]
[294.31927490 59.12001801]
[309.17111206 57.01694489]
[324.02294922 54.91387177]
[338.87478638 52.81079865]
[346.55856323 37.79265976]
[361.51599121 30.35622025]
[377.80151367 33.23764801]
[389.07125854 45.11463928]
[403.86972046 42.66397858]
[418.63842773 40.04001999]
[433.37536621 37.24311829]
[448.11230469 34.44621658]
[462.84924316 31.64931679]
[477.47872925 28.33599663]
[491.98269653 24.51035500]
[506.48663330 20.68471336]
[520.94476318 16.68931961]
[535.35504150 12.52471924]
[546.32598877 0.33582327]
[562.30902100 4.00675392]
[566.86206055 19.76117134]
[555.30139160 31.39228249]
[539.51959229 26.93499565]
[525.10931396 31.09959602]
[519.50457764 36.02480316]
[510.31228638 35.18865967]
[495.80831909 39.01430130]
[481.30438232 42.83994293]
[479.20434570 45.78195572]
[475.53076172 47.81184006]
[470.74804688 48.18096542]
[465.64614868 46.38625336]
[450.90921021 49.18315506]
[436.17227173 51.98005676]
[421.43533325 54.77695847]
[415.39398193 59.15568161]
[406.32037354 57.46243668]
[391.52194214 59.91309357]
[386.64947510 72.39830780]
[376.14492798 80.89523315]
[362.70285034 83.08591461]
[349.84057617 78.28812408]
[340.97784424 67.66263580]
[326.12600708 69.76570892]
[311.27416992 71.86878204]
[296.42233276 73.97185516]
[281.57049561 76.07492828]
[266.71865845 78.17800140]
[251.86682129 80.28107452]
[237.01498413 82.38414764]
[222.81063843 95.42276001]
[204.19155884 87.85951996]
[189.45462036 90.65642548]
[174.71768188 93.45332336]
[159.98074341 96.25022125]
[145.24380493 99.04712677]
[143.31718445 113.09703064]
[137.13665771 125.86076355]
[127.30918884 136.08488464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 55]
[6 54]
[7 53]
[11 50]
[12 49]
[13 47]
[14 46]
[15 45]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[24 36]
[25 35]
[27 33]
[28 32]
[63 130]
[64 129]
[65 128]
[66 127]
[67 126]
[71 124]
[72 123]
[73 122]
[74 121]
[75 120]
[76 119]
[77 118]
[78 117]
[82 112]
[83 111]
[84 109]
[85 108]
[86 107]
[87 106]
[88 102]
[89 101]
[90 100]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
