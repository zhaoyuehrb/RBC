%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCCUGAGCGAGGAGCCCGCGAGCUCUCCUCUCUCCUCUGUCUCCGCGGAUGACGAGUGGCUGGAUAAC\
) } def
/len { sequence length } bind def

/coor [
[159.61709595 115.41345978]
[144.74542236 113.45556641]
[129.87374878 111.49767303]
[115.00207520 109.53977966]
[107.16696167 116.26972961]
[96.91282654 117.50825500]
[87.70068359 112.83730316]
[82.63986969 103.83345032]
[67.99542999 100.58685303]
[53.35098648 97.34025574]
[43.97081375 98.54676056]
[38.14516449 93.61941528]
[23.65627670 89.73712921]
[9.16738892 85.85484314]
[-0.25648338 86.65103912]
[-5.86166000 81.47428131]
[-20.16741371 76.96369171]
[-34.47316742 72.45310211]
[-48.37425232 79.97210693]
[-63.49647141 75.37929535]
[-70.86808777 61.39949036]
[-66.11564636 46.32667160]
[-52.05868912 39.10327530]
[-37.03695679 44.01480865]
[-29.96258163 58.14735031]
[-15.65682697 62.65793610]
[-1.35107279 67.16852570]
[13.04967499 71.36595917]
[27.53856277 75.24824524]
[42.02745056 79.13053131]
[56.59757996 82.69581604]
[71.24201965 85.94241333]
[85.88645935 89.18901062]
[103.08717346 82.49174500]
[116.95996857 94.66810608]
[131.83163452 96.62599945]
[146.70330811 98.58389282]
[161.57498169 100.54178619]
[175.08268738 89.66691589]
[191.96495056 91.72920990]
[202.05375671 105.00499725]
[216.99668884 106.31233215]
[231.93960571 107.61966705]
[246.88252258 108.92700195]
[261.82543945 110.23433685]
[276.81115723 110.88862610]
[291.81115723 110.88862610]
[306.81115723 110.88862610]
[321.81115723 110.88862610]
[330.06515503 97.85500336]
[344.06494141 91.37358093]
[359.34332275 93.51255798]
[371.02496338 103.58940125]
[375.38229370 118.38862610]
[371.02496338 133.18785095]
[359.34332275 143.26469421]
[344.06494141 145.40368652]
[330.06515503 138.92225647]
[321.81115723 125.88862610]
[306.81115723 125.88862610]
[291.81115723 125.88862610]
[276.81115723 125.88862610]
[272.66778564 128.80596924]
[266.58258057 128.92407227]
[260.51809692 125.17726135]
[245.57519531 123.86991882]
[230.63226318 122.56258392]
[215.68934631 121.25524902]
[200.74642944 119.94791412]
[191.97778320 129.63523865]
[179.01663208 132.44883728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[8 33]
[9 32]
[10 31]
[12 30]
[13 29]
[14 28]
[16 27]
[17 26]
[18 25]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 62]
[47 61]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
