%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUACGGUGGCCGAGAGGAUGCCGCAGAUGUGUUAGCGGCGAGUCCAGAAGCAGCCCCAGGAGGUGCUGGGGGCAUCGUUUCUCUAAUCUGGCCUCCCGAGUGCCAAGGAGGCGUCCCGGCAGCGGUCAUC\
) } def
/len { sequence length } bind def

/coor [
[63.93044281 565.84771729]
[56.84861374 579.65447998]
[42.98870087 586.63177490]
[27.68011665 584.09661865]
[16.80932999 573.02386475]
[14.55637646 557.67126465]
[21.78756523 543.94207764]
[35.72235489 537.11560059]
[38.17301559 522.31713867]
[40.62367630 507.51867676]
[43.07433319 492.72021484]
[45.52499390 477.92175293]
[47.97565460 463.12329102]
[50.42631531 448.32485962]
[52.87697601 433.52639771]
[39.02723312 421.11926270]
[35.31612778 402.74761963]
[43.39063644 385.66918945]
[60.20581818 376.73922729]
[61.61043930 361.80514526]
[63.01506042 346.87106323]
[64.41968536 331.93695068]
[65.82431030 317.00286865]
[67.22892761 302.06878662]
[68.63355255 287.13470459]
[56.96298218 279.94598389]
[49.50935364 268.36383057]
[47.78487015 254.63204956]
[52.18514633 241.44062805]
[61.90030670 231.39863586]
[75.06339264 226.51831055]
[76.81772614 211.62126160]
[74.45372772 204.54434204]
[78.79177856 196.39703369]
[80.89485168 181.54519653]
[70.08076477 171.33767700]
[67.31821442 156.54470825]
[73.87265778 142.80087280]
[87.41967773 135.46708679]
[89.52275085 120.61525726]
[91.62582397 105.76342010]
[89.53482056 97.89438629]
[93.95623016 90.58966064]
[96.40689087 75.79120636]
[98.85755157 60.99275589]
[93.47884369 46.11390686]
[103.19153595 34.82174301]
[105.64219666 20.02328682]
[108.09285736 5.22483301]
[110.54351807 -9.57362175]
[112.99417877 -24.37207603]
[114.22364044 -39.32160568]
[114.22364044 -54.32160568]
[114.22364044 -69.32160187]
[103.32133484 -86.20391846]
[113.48273468 -102.59033203]
[112.77965546 -117.57384491]
[112.07656860 -132.55735779]
[111.37348175 -147.54086304]
[110.67040253 -162.52438354]
[109.79172516 -177.49862671]
[108.73758698 -192.46153259]
[96.64170837 -202.63333130]
[95.36442566 -218.38591003]
[105.66352844 -230.37358093]
[121.42874146 -231.48423767]
[133.30683899 -221.05897522]
[134.25076294 -205.28289795]
[123.70050049 -193.51568604]
[124.75463867 -178.55276489]
[128.39674377 -172.04075623]
[125.65391541 -163.22746277]
[126.35699463 -148.24395752]
[127.06008148 -133.26043701]
[127.76316833 -118.27692413]
[128.46624756 -103.29341125]
[136.69174194 -97.04049683]
[140.14195251 -87.06732178]
[137.42788696 -76.64091492]
[129.22364807 -69.32160187]
[129.22364807 -54.32160568]
[129.22364807 -39.32160568]
[140.25369263 -49.48713684]
[155.22703552 -50.38109589]
[167.38824463 -41.60016632]
[171.25067139 -27.10597038]
[165.07170105 -13.43774319]
[151.63906860 -6.76207733]
[137.01307678 -10.09078121]
[127.79263306 -21.92141533]
[125.34197235 -7.12296152]
[122.89131165 7.67549324]
[120.44065094 22.47394753]
[117.98999023 37.27240372]
[123.54398346 51.09276581]
[113.65600586 63.44341660]
[111.20534515 78.24186707]
[108.75468445 93.04032135]
[106.47766113 107.86649323]
[104.37458801 122.71833038]
[102.27151489 137.57015991]
[113.24978638 148.37681580]
[115.73070526 163.40008545]
[108.96964264 176.84448242]
[95.74668884 183.64826965]
[93.64361572 198.50010681]
[91.71478271 213.37557983]
[89.96045685 228.27264404]
[103.28875732 237.98252869]
[109.88909912 252.99198914]
[108.05724335 269.19177246]
[98.38357544 282.19818115]
[83.56764221 288.53930664]
[82.16301727 303.47338867]
[80.75839996 318.40750122]
[79.35377502 333.34158325]
[77.94915009 348.27566528]
[76.54453278 363.20974731]
[75.13990784 378.14385986]
[85.05973053 384.19970703]
[91.93569946 393.50561523]
[94.78542328 404.66650391]
[93.22648621 416.02734375]
[87.52725983 425.91857910]
[78.56169128 432.90139771]
[67.67543030 435.97705078]
[65.22476959 450.77551270]
[62.77410889 465.57397461]
[60.32345200 480.37240601]
[57.87279129 495.17086792]
[55.42213058 509.96932983]
[52.97146988 524.76776123]
[50.52080917 539.56622314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[19 119]
[20 118]
[21 117]
[22 116]
[23 115]
[24 114]
[25 113]
[31 108]
[32 107]
[34 106]
[35 105]
[39 101]
[40 100]
[41 99]
[43 98]
[44 97]
[45 96]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 82]
[53 81]
[54 80]
[56 76]
[57 75]
[58 74]
[59 73]
[60 72]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
