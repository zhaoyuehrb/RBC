%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:39:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCUCCCCCUGCCUCUUUCCCGGCCAGAGUCCAGCCUUAACCCGGGCAGAGGGCGGAGUCCCGUUAAGGGGGUGUGGGGAGGAGGCGGGGCCAGGGCAGGGGCGGGGCAGAGCCGGGCCAAGCUGGGCGGGUCAUGCGCCCUGGCCUUCGCGCAUCUCCCAGGUUAGCUGCGUGUCCGGGUGCUAGGCUGCAGACCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[25.70855713 109.24978638]
[21.86258698 107.89034271]
[19.33565521 105.42812347]
[4.39720631 104.07064056]
[-10.54124165 102.71315765]
[-25.47969055 101.35567474]
[-40.41814041 99.99819183]
[-55.35658646 98.64070892]
[-70.30486298 97.39607239]
[-85.26210785 96.26436615]
[-100.21935272 95.13265228]
[-115.20395660 94.45321655]
[-130.20225525 94.22666931]
[-145.20053101 94.00012207]
[-160.19882202 93.77356720]
[-175.19711304 93.54701996]
[-190.19540405 93.32047272]
[-205.19369507 93.09392548]
[-220.19198608 92.86737823]
[-235.19027710 92.64083099]
[-250.18856812 92.41427612]
[-265.18685913 92.18772888]
[-280.18515015 91.96118164]
[-295.18344116 91.73463440]
[-310.18173218 91.50808716]
[-325.17999268 91.28153229]
[-340.17956543 91.16825867]
[-355.17956543 91.16825867]
[-370.17956543 91.16825867]
[-368.16537476 100.89839935]
[-371.22418213 112.17461395]
[-379.93692017 122.63028717]
[-393.86807251 129.75952148]
[-408.57986450 132.68586731]
[-423.29162598 135.61222839]
[-438.00341797 138.53857422]
[-452.54125977 152.50109863]
[-470.56491089 145.50239563]
[-485.18161011 148.87174988]
[-499.79827881 152.24111938]
[-514.41497803 155.61047363]
[-522.58093262 169.14166260]
[-537.94293213 172.85430908]
[-551.38702393 164.54576111]
[-554.93707275 149.14533997]
[-546.48681641 135.78984070]
[-531.04974365 132.40284729]
[-517.78436279 140.99378967]
[-503.16766357 137.62443542]
[-488.55096436 134.25506592]
[-473.93429565 130.88571167]
[-469.31613159 121.76737213]
[-460.25033569 116.58856201]
[-449.61178589 117.26969147]
[-440.92977905 123.82679749]
[-426.21798706 120.90044403]
[-411.50619507 117.97409058]
[-396.79443359 115.04773712]
[-395.60998535 107.64185333]
[-410.42886353 109.96580505]
[-417.21820068 96.59027100]
[-406.59518433 86.00009918]
[-393.24108887 92.83009338]
[-392.05664062 85.42420959]
[-405.12188721 78.05538940]
[-418.18713379 70.68656921]
[-433.96484375 73.59224701]
[-445.97885132 62.96004868]
[-445.01300049 46.94609833]
[-431.80822754 37.83491898]
[-416.49411011 42.61583328]
[-410.81829834 57.62133026]
[-397.75308228 64.99015045]
[-384.68783569 72.35897064]
[-370.17956543 76.16825867]
[-355.17956543 76.16825867]
[-340.17956543 76.16825867]
[-333.48919678 73.02395630]
[-324.95346069 76.28324890]
[-309.95516968 76.50979614]
[-294.95687866 76.73634338]
[-279.95858765 76.96289062]
[-264.96029663 77.18943787]
[-249.96200562 77.41599274]
[-234.96372986 77.64253998]
[-219.96543884 77.86908722]
[-204.96714783 78.09563446]
[-189.96885681 78.32218170]
[-174.97056580 78.54872894]
[-159.97227478 78.77528381]
[-144.97398376 79.00183105]
[-129.97569275 79.22837830]
[-114.97740936 79.45492554]
[-112.87313080 77.59949493]
[-109.90625000 76.46681213]
[-106.34873199 76.38991547]
[-102.58807373 77.59721375]
[-99.08764648 80.17540741]
[-84.13040161 81.30711365]
[-69.17314911 82.43882751]
[-62.26460266 79.80825806]
[-53.99910355 83.70225525]
[-39.06065369 85.05973816]
[-24.12220764 86.41722107]
[-9.18375874 87.77470398]
[5.75468969 89.13218689]
[20.69313812 90.48966980]
[35.65850449 91.50839233]
[50.64310837 92.18783569]
[65.63241577 92.75408936]
[80.62557220 93.20713806]
[95.61872864 93.66018677]
[94.41867065 89.14886475]
[94.34605408 84.28795624]
[95.46215057 79.29714966]
[97.78993988 74.40491486]
[106.31091309 62.06015778]
[114.83187866 49.71540070]
[116.30360413 33.96279526]
[129.90118408 27.88374138]
[138.42216492 15.53898335]
[146.94313049 3.19422579]
[150.96473694 -13.27583694]
[167.90444946 -13.97075748]
[173.26158142 2.11455894]
[159.28788757 11.71519661]
[150.76692200 24.05995560]
[142.24594116 36.40471268]
[141.38369751 51.27434158]
[127.17664337 58.23637009]
[118.65567017 70.58113098]
[110.13469696 82.92588806]
[114.81302643 97.17766571]
[128.99252319 102.07070923]
[143.17201233 106.96375275]
[157.35151672 111.85679626]
[171.53102112 116.74983215]
[180.66647339 116.59116364]
[185.88674927 121.82534027]
[199.99073792 126.93197632]
[214.09471130 132.03862000]
[228.19868469 137.14526367]
[243.80862427 134.56831360]
[253.14152527 146.17633057]
[267.24551392 151.28297424]
[281.34948730 156.38961792]
[295.45346069 161.49624634]
[309.55743408 166.60289001]
[323.66140747 171.70953369]
[337.80355835 176.70951843]
[351.98306274 181.60255432]
[366.16256714 186.49560547]
[380.44924927 191.06616211]
[394.83584595 195.31190491]
[409.22241211 199.55766296]
[423.60900879 203.80340576]
[437.99557495 208.04914856]
[452.38214111 212.29489136]
[467.80801392 208.78015137]
[477.82476807 219.80348206]
[492.21133423 224.04922485]
[504.42980957 214.48423767]
[519.93804932 213.96148682]
[532.77288818 222.68196106]
[537.99902344 237.29246521]
[533.60693359 252.17497253]
[521.28546143 261.60684204]
[505.77239990 261.96133423]
[493.03292847 253.10215759]
[487.96560669 238.43580627]
[473.57901001 234.19006348]
[459.18218994 238.00849915]
[448.13641357 226.68147278]
[433.74981689 222.43572998]
[419.36325073 218.18998718]
[404.97668457 213.94422913]
[390.59008789 209.69848633]
[376.20352173 205.45274353]
[372.94680786 206.80986023]
[368.87057495 206.65557861]
[364.69296265 204.62173462]
[361.26950073 200.67509460]
[347.09002686 195.78205872]
[332.91052246 190.88900757]
[325.56042480 191.67889404]
[318.55477905 185.81350708]
[304.45080566 180.70686340]
[290.34683228 175.60023499]
[276.24285889 170.49359131]
[262.13885498 165.38694763]
[248.03488159 160.28030396]
[233.43376160 163.22251892]
[223.09205627 151.24923706]
[208.98806763 146.14259338]
[194.88409424 141.03594971]
[180.78012085 135.92932129]
[166.63796997 130.92933655]
[152.45848083 126.03629303]
[138.27897644 121.14324951]
[124.09947968 116.25020599]
[109.91998291 111.35716248]
[95.16568756 108.65334320]
[80.17253113 108.20029449]
[65.17937469 107.74724579]
[56.50476837 110.61656189]
[49.96366882 107.17243958]
[34.97906494 106.49299622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 107]
[4 106]
[5 105]
[6 104]
[7 103]
[8 102]
[9 100]
[10 99]
[11 98]
[12 93]
[13 92]
[14 91]
[15 90]
[16 89]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[22 83]
[23 82]
[24 81]
[25 80]
[26 79]
[27 77]
[28 76]
[29 75]
[33 58]
[34 57]
[35 56]
[36 55]
[38 51]
[39 50]
[40 49]
[41 48]
[64 74]
[65 73]
[66 72]
[108 207]
[109 206]
[110 204]
[111 203]
[112 202]
[116 132]
[117 131]
[118 130]
[120 128]
[121 127]
[122 126]
[133 201]
[134 200]
[135 199]
[136 198]
[137 197]
[139 196]
[140 195]
[141 194]
[142 193]
[144 191]
[145 190]
[146 189]
[147 188]
[148 187]
[149 186]
[150 184]
[151 183]
[152 182]
[153 178]
[154 177]
[155 176]
[156 175]
[157 174]
[158 173]
[160 171]
[161 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
