%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUAGCACACACCCCCUCCGCCCCGCGCGCCGGCGAUUCCGAGCCUACGACGCCUCCGCUAGAGCCCGCGGGGCUGCGCCGACUCCUGCUCUGGAGGGGUUGCGGGUACCUGAUGGCCACAGAGGGCUCUAGGAGGCCGAGCGUGUAAGCGGGGUGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[47.48111725 618.78790283]
[40.85670471 632.33660889]
[31.07035065 643.81176758]
[18.73723602 652.49188232]
[4.63262987 657.83148193]
[-10.35683918 659.49475098]
[-25.28892136 657.37731934]
[-39.22497177 651.61212158]
[-51.28896332 642.56164551]
[-60.72253799 630.79479980]
[-66.93269348 617.05126953]
[-69.52906036 602.19500732]
[-68.34842682 587.15979004]
[-63.46500015 572.89080811]
[-55.18576431 560.28509521]
[-44.03115845 550.13494873]
[-30.70236969 543.07843018]
[-16.03725815 539.55914307]
[-0.95768154 539.79833984]
[2.99352694 525.32806396]
[6.94473505 510.85784912]
[10.89594364 496.38760376]
[14.84715176 481.91735840]
[18.79836082 467.44711304]
[22.74956894 452.97686768]
[26.70077705 438.50662231]
[30.65198517 424.03637695]
[34.60319519 409.56613159]
[38.00064468 394.95596313]
[40.83941269 380.22702026]
[43.67818451 365.49810791]
[46.51695251 350.76916504]
[49.21537399 336.01388550]
[51.77320862 321.23358154]
[54.33103943 306.45327759]
[56.88887405 291.67297363]
[54.89067078 287.28976440]
[55.65685654 281.60089111]
[59.83573532 276.38317871]
[62.95441055 261.71096802]
[66.07308960 247.03875732]
[69.19176483 232.36654663]
[72.03053284 217.63761902]
[74.58836365 202.85731506]
[77.14619446 188.07699585]
[79.70402527 173.29669189]
[82.26186371 158.51638794]
[84.81969452 143.73608398]
[71.47616577 136.46473694]
[61.20585251 125.26461029]
[55.11530304 111.34242249]
[53.86072540 96.19817352]
[57.57729340 81.46353912]
[65.86457062 68.72606659]
[56.59218597 56.93527222]
[47.31980133 45.14447784]
[39.51814270 40.30479050]
[37.98568344 33.03977966]
[28.93946266 21.07458496]
[19.89323997 9.10939121]
[10.84701920 -2.85580349]
[-4.66409588 -2.42574716]
[-17.44657516 -11.22278309]
[-22.58529663 -25.86427116]
[-18.10431480 -40.72026062]
[-5.72665930 -50.07831955]
[9.78820801 -50.34008789]
[22.47450447 -41.40490341]
[27.45409012 -26.70853043]
[22.81221390 -11.90202522]
[31.85843468 0.06316936]
[40.90465546 12.02836418]
[49.95087814 23.99355888]
[59.11059570 35.87209320]
[68.38298035 47.66288757]
[77.65536499 59.45368576]
[89.58461761 53.29426956]
[103.20243835 50.69361877]
[117.43489838 52.10721207]
[123.00983429 38.18169403]
[128.58477783 24.25617599]
[128.87522888 15.07989979]
[134.40069580 10.12024498]
[140.23974609 -3.69660950]
[146.07879639 -17.51346397]
[151.91784668 -31.33031845]
[157.75689697 -45.14717484]
[163.59594727 -58.96402740]
[169.43499756 -72.78088379]
[162.15298462 -86.61946106]
[165.52040100 -101.89016724]
[177.94726562 -111.38264465]
[193.56599426 -110.61483002]
[205.00189209 -99.94926453]
[206.85527039 -84.42190552]
[198.25105286 -71.36428833]
[183.25184631 -66.94183350]
[177.41279602 -53.12497711]
[171.57374573 -39.30812073]
[165.73469543 -25.49126816]
[159.89564514 -11.67441273]
[154.05659485 2.14244199]
[148.21754456 15.95929718]
[142.51028442 29.83111191]
[136.93534851 43.75662994]
[131.36041260 57.68215179]
[142.01737976 68.23814392]
[155.88920593 62.53089142]
[169.76101685 56.82363892]
[173.28829956 41.71278381]
[185.04586792 31.58661842]
[200.51269531 30.33885574]
[213.74147034 38.44928741]
[219.64546204 52.79928970]
[215.95446777 67.87098694]
[204.08773804 77.86901093]
[188.60829163 78.94891357]
[175.46827698 70.69545746]
[161.59645081 76.40270996]
[147.72463989 82.10996246]
[150.15707397 98.21196747]
[147.38394165 114.00489807]
[139.84980774 127.87519073]
[128.47720337 138.45716858]
[114.55636597 144.76719666]
[99.59999847 146.29391479]
[97.04216766 161.07421875]
[94.48433685 175.85452271]
[91.92650604 190.63484192]
[89.36866760 205.41514587]
[86.81083679 220.19544983]
[88.75115204 226.59252930]
[87.34811401 232.15866089]
[83.86397552 235.48522949]
[80.74530029 250.15744019]
[77.62662506 264.82965088]
[74.50794983 279.50186157]
[71.66918182 294.23080444]
[69.11135101 309.01110840]
[66.55351257 323.79141235]
[63.99568176 338.57171631]
[65.61942291 347.60784912]
[61.24588013 353.60794067]
[58.40711212 368.33688354]
[55.56834412 383.06579590]
[52.72957611 397.79473877]
[54.34010315 401.93832397]
[54.50311279 405.96801758]
[53.43775940 409.43502808]
[51.48839188 412.01071167]
[49.07343674 413.51736450]
[45.12223053 427.98760986]
[41.17102051 442.45782471]
[37.21981430 456.92807007]
[33.26860428 471.39831543]
[29.31739616 485.86856079]
[25.36618805 500.33880615]
[21.41497803 514.80908203]
[17.46376991 529.27929688]
[13.51256180 543.74957275]
[26.62104607 551.20733643]
[37.46245575 561.69134521]
[45.35528946 574.54254150]
[49.80340195 588.95318604]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 160]
[20 159]
[21 158]
[22 157]
[23 156]
[24 155]
[25 154]
[26 153]
[27 152]
[28 151]
[29 146]
[30 145]
[31 144]
[32 143]
[33 141]
[34 140]
[35 139]
[36 138]
[39 137]
[40 136]
[41 135]
[42 134]
[43 131]
[44 130]
[45 129]
[46 128]
[47 127]
[48 126]
[54 76]
[55 75]
[56 74]
[58 73]
[59 72]
[60 71]
[61 70]
[79 106]
[80 105]
[81 104]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
