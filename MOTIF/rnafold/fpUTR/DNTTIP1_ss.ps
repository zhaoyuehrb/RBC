%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACGUCACGGCGCCACUUUCCGGCCGGUGACAGAGUCCAGCGGAGUUGUGGGGGCCGGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[64.80869293 186.38688660]
[60.05543137 188.19946289]
[51.68642044 200.64773560]
[43.31740952 213.09602356]
[42.73872757 229.48495483]
[28.13118553 236.93826294]
[14.52177429 227.78862000]
[15.91068745 211.44839478]
[30.86913109 204.72700500]
[39.23814011 192.27873230]
[47.60715103 179.83045959]
[55.40091324 167.01416016]
[62.60326385 153.85643005]
[69.80561829 140.69868469]
[77.00797272 127.54094696]
[84.21032715 114.38320923]
[91.41268158 101.22546387]
[90.58325958 97.89389801]
[91.12363434 94.16140747]
[93.19251251 90.60814667]
[96.70159149 87.86572266]
[101.30376434 86.51322174]
[110.77008057 74.87755585]
[120.23639679 63.24188232]
[129.70271301 51.60621262]
[139.16903687 39.97054291]
[148.63536072 28.33487511]
[158.10166931 16.69920540]
[153.55377197 3.48821163]
[156.19349670 -10.12067699]
[165.20751953 -20.50805092]
[178.10217285 -24.96699524]
[191.39253235 -22.40802574]
[201.37863159 -33.60078049]
[211.36473083 -44.79353714]
[221.35083008 -55.98628998]
[221.44470215 -69.10195160]
[230.27336121 -78.24608612]
[242.56771851 -78.76493835]
[253.05290222 -89.49158478]
[263.53808594 -100.21822357]
[270.28604126 -115.77140808]
[287.09942627 -113.59271240]
[289.66027832 -96.83328247]
[274.26473999 -89.73303986]
[263.77954102 -79.00639343]
[253.29435730 -68.27975464]
[250.04977417 -51.18111038]
[232.54359436 -46.00019073]
[222.55749512 -34.80743408]
[212.57139587 -23.61467934]
[202.58528137 -12.42192459]
[206.61459351 3.33138347]
[200.51084900 18.57961082]
[186.44621277 27.37541389]
[169.73735046 26.16552544]
[160.27102661 37.80119324]
[150.80470276 49.43686295]
[141.33839417 61.07253265]
[131.87207031 72.70820618]
[122.40575409 84.34387207]
[112.93943024 95.97953796]
[104.57041931 108.42781830]
[97.36806488 121.58555603]
[90.16571045 134.74330139]
[82.96335602 147.90103149]
[75.76100159 161.05877686]
[68.55864716 174.21652222]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[22 62]
[23 61]
[24 60]
[25 59]
[26 58]
[27 57]
[28 56]
[33 52]
[34 51]
[35 50]
[36 49]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
