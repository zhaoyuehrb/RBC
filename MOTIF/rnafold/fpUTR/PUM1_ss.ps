%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGCCGCCAUGUUGUCGGAGUGAAAGGUAAGGGGGAGCGAGAGCGCCAGAGAGAGAAGAUCGGGGGGCUGAAAUCCAUCUUCAUCCUACCGCUCCGCCCGUGUUGGUGGA\
) } def
/len { sequence length } bind def

/coor [
[73.28422546 478.30398560]
[59.61275864 485.64364624]
[44.24275208 483.51232910]
[33.08428574 472.72955322]
[30.42801857 457.44152832]
[37.29533768 443.52679443]
[51.04561996 436.33587646]
[53.10592270 421.47802734]
[55.16622925 406.62020874]
[57.22653198 391.76239014]
[59.28683472 376.90454102]
[61.34713745 362.04672241]
[50.50370407 351.87036133]
[47.69857407 337.08541870]
[54.21342087 323.32275391]
[67.73926544 315.95001221]
[69.79956818 301.09216309]
[62.29568863 285.29406738]
[73.54998016 270.80078125]
[75.20010376 255.89179993]
[76.85022736 240.98284912]
[78.50035095 226.07388306]
[80.15047455 211.16493225]
[81.80059814 196.25596619]
[83.45071411 181.34700012]
[73.96970367 169.91696167]
[75.43077850 154.77365112]
[87.48394012 144.90658569]
[89.13406372 129.99761963]
[90.78418732 115.08866882]
[82.37992096 98.53995514]
[93.39339447 83.60025024]
[94.21971130 68.62303162]
[95.04602814 53.64580536]
[95.87234497 38.66858292]
[88.90701294 24.46313667]
[97.33367920 12.18142128]
[98.15999603 -2.79580188]
[98.98631287 -17.77302551]
[86.83613586 -24.85404778]
[78.98477173 -36.44109344]
[76.93148804 -50.21905136]
[81.02393341 -63.46492767]
[90.40088654 -73.58601379]
[103.17271423 -78.62734222]
[104.41139984 -93.57611084]
[105.65009308 -108.52487946]
[99.07882690 -122.91685486]
[107.84071350 -134.96171570]
[109.07939911 -149.91047668]
[99.19979858 -159.18638611]
[96.54930115 -172.27702332]
[101.88413239 -184.30810547]
[113.02941132 -190.93261719]
[114.67953491 -205.84158325]
[103.74880219 -217.02429199]
[102.61503601 -232.62072754]
[111.81356812 -245.26670837]
[127.00113678 -248.99121094]
[141.00662231 -242.03562927]
[147.21708679 -227.68417358]
[142.70011902 -212.71316528]
[129.58850098 -204.19145203]
[127.93837738 -189.28250122]
[138.99096680 -176.68992615]
[137.55479431 -159.65939331]
[124.02816772 -148.67179871]
[122.78948212 -133.72302246]
[129.44934082 -120.40028381]
[120.59886169 -107.28618622]
[119.36016846 -92.33741760]
[118.12148285 -77.38864899]
[131.58093262 -68.56289673]
[138.83026123 -54.08830261]
[137.82501221 -37.83748245]
[128.74342346 -24.21121788]
[113.96353912 -16.94670868]
[113.13722229 -1.96948540]
[112.31090546 13.00773716]
[119.33533478 26.14191437]
[110.84956360 39.49489975]
[110.02324677 54.47212219]
[109.19692993 69.44934845]
[108.37061310 84.42656708]
[115.53749847 91.56287384]
[117.62007904 101.46004486]
[113.93688202 110.87944031]
[105.69314575 116.73878479]
[104.04302216 131.64775085]
[102.39290619 146.55670166]
[111.99659729 158.82075500]
[110.11075592 173.91705322]
[98.35968018 182.99713135]
[96.70955658 197.90608215]
[95.05943298 212.81504822]
[93.40930939 227.72401428]
[91.75918579 242.63296509]
[90.10906219 257.54193115]
[88.45893860 272.45089722]
[95.93338776 283.07321167]
[94.16470337 295.53411865]
[84.65740204 303.15246582]
[82.59709930 318.01031494]
[93.60643768 328.78530884]
[96.13059998 343.80136108]
[89.40827942 357.26519775]
[76.20497131 364.10702515]
[74.14466858 378.96484375]
[72.08436584 393.82269287]
[70.02405548 408.68051147]
[67.96375275 423.53833008]
[65.90345001 438.39617920]
[77.17823029 449.05728149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 112]
[8 111]
[9 110]
[10 109]
[11 108]
[12 107]
[16 103]
[17 102]
[19 99]
[20 98]
[21 97]
[22 96]
[23 95]
[24 94]
[25 93]
[28 90]
[29 89]
[30 88]
[32 84]
[33 83]
[34 82]
[35 81]
[37 79]
[38 78]
[39 77]
[45 72]
[46 71]
[47 70]
[49 68]
[50 67]
[54 64]
[55 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
