%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGCUCCGAGCUAAGGCGCAUGCGUUCCCUGAAAUUGCCGCCACCGGCUCUACCUUCCAGUUUCCAGUUCCGGCCUCCAAGGGGCGGGCAGAAGUUGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[119.14074707 138.40014648]
[110.36798859 141.63465881]
[101.10286713 142.89199829]
[91.78537750 142.11245728]
[82.85798645 139.33306885]
[74.74464417 134.68582153]
[67.83063507 128.39140320]
[62.44430161 120.74871063]
[58.84142685 112.12069702]
[57.19310760 102.91709137]
[57.57762146 93.57495880]
[43.36772537 88.77091217]
[29.15782928 83.96686554]
[14.94793415 79.16281891]
[0.73803920 74.35877228]
[-14.70752621 82.40539551]
[-30.90164757 76.97518921]
[-38.08571625 61.84991074]
[-52.43173218 57.46905899]
[-66.77774811 53.08820724]
[-81.12376404 48.70735550]
[-95.53311920 44.53956604]
[-110.00264740 40.58575821]
[-119.14067078 48.48671722]
[-130.85479736 50.89530945]
[-142.13830566 47.31381989]
[-150.15359497 38.76676941]
[-152.94563293 27.51143265]
[-167.15553284 22.70738411]
[-181.36541748 17.90333748]
[-198.30670166 18.55839729]
[-203.62597656 2.46051979]
[-189.62974548 -7.10721207]
[-176.56137085 3.69344139]
[-162.35147095 8.49748898]
[-148.14158630 13.30153656]
[-132.40878296 4.17667341]
[-114.65351868 9.38146687]
[-106.04884338 26.11622620]
[-91.57930756 30.07003403]
[-84.17878723 28.77624512]
[-76.74291229 34.36133957]
[-62.39689636 38.74219131]
[-48.05088043 43.12304306]
[-33.70486450 47.50389481]
[-23.20007515 39.88213730]
[-10.02663898 39.75078201]
[0.94924152 47.38479233]
[5.54208708 60.14887238]
[19.75198174 64.95291901]
[33.96187592 69.75697327]
[48.17177200 74.56101990]
[62.38166809 79.36506653]
[77.04947662 63.74792480]
[97.44002533 57.17026901]
[118.46889496 61.27224350]
[134.89253235 75.03101349]
[142.61569214 95.01582336]
[157.58935547 95.90443420]
[172.56300354 96.79304504]
[187.53666687 97.68165588]
[202.51031494 98.57026672]
[217.48397827 99.45887756]
[232.45762634 100.34748077]
[247.43128967 101.23609161]
[262.40493774 102.12470245]
[277.37860107 103.01331329]
[287.61999512 95.00085449]
[300.16809082 96.14633942]
[308.25427246 105.27802277]
[323.19503784 106.60996246]
[332.18481445 104.22891998]
[338.55654907 108.20918274]
[353.45126343 109.98328400]
[368.34597778 111.75737762]
[382.96441650 105.70657349]
[394.68722534 114.89486694]
[409.58197021 116.66896057]
[424.47668457 118.44306183]
[439.32742310 111.48697662]
[452.62030029 121.09070587]
[450.68072510 137.37474060]
[435.50396729 143.58747864]
[422.70257568 133.33776855]
[407.80786133 131.56367493]
[392.91314697 129.78958130]
[379.36007690 135.96728516]
[366.57189941 126.65209198]
[351.67718506 124.87799835]
[336.78247070 123.10389709]
[321.86309814 121.55071259]
[306.92233276 120.21877289]
[291.52340698 128.49028015]
[276.48999023 117.98696899]
[261.51632690 117.09835815]
[246.54267883 116.20974731]
[231.56901550 115.32113647]
[216.59536743 114.43253326]
[201.62170410 113.54392242]
[186.64805603 112.65531158]
[171.67439270 111.76670074]
[156.70074463 110.87808990]
[141.72708130 109.98948669]
[138.57237244 118.79125214]
[133.58592224 126.70065308]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[18 45]
[19 44]
[20 43]
[21 42]
[22 40]
[23 39]
[28 36]
[29 35]
[30 34]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
[65 96]
[66 95]
[67 94]
[70 92]
[71 91]
[73 90]
[74 89]
[75 88]
[77 86]
[78 85]
[79 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
