%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUGCCGUCCGGGUCGCCUAGGCCUGGGGUCGGGAGCGCGCACGCUGUGCGCCCUGGGCGCGCUCGGGAUUCUCGCCUGGCGCGGCUGGGGAAGGUGAACAGUGUGGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[-24.36550903 197.30798340]
[-37.86731720 203.84259033]
[-51.36912537 210.37721252]
[-64.87093353 216.91181946]
[-74.77498627 232.36076355]
[-92.17292786 230.56086731]
[-105.49121094 237.46183777]
[-118.80948639 244.36282349]
[-131.93429565 251.62500000]
[-144.85585022 259.24298096]
[-157.77738953 266.86096191]
[-170.69894409 274.47894287]
[-183.62048340 282.09692383]
[-196.54203796 289.71490479]
[-209.46357727 297.33288574]
[-222.38513184 304.95086670]
[-227.77217102 320.06240845]
[-242.99180603 325.13607788]
[-256.36883545 316.27978516]
[-257.64157104 300.28729248]
[-245.83364868 289.42669678]
[-230.00311279 292.02929688]
[-217.08155823 284.41131592]
[-204.16001892 276.79333496]
[-191.23846436 269.17538452]
[-178.31692505 261.55740356]
[-165.39537048 253.93940735]
[-152.47381592 246.32142639]
[-139.55227661 238.70346069]
[-137.49075317 234.25787354]
[-132.54249573 231.12742615]
[-125.71046448 231.04454041]
[-112.39218140 224.14356995]
[-99.07390594 217.24258423]
[-95.06639862 205.73918152]
[-83.91249847 199.91244507]
[-71.40554810 203.41001892]
[-57.90373993 196.87539673]
[-44.40193176 190.34078979]
[-30.90012360 183.80616760]
[-20.65866470 162.32981873]
[3.80643511 162.55213928]
[15.82013226 153.57043457]
[27.83382988 144.58872986]
[39.84752655 135.60702515]
[51.86122513 126.62531281]
[63.87492371 117.64360046]
[75.88861847 108.66189575]
[87.90231323 99.68018341]
[99.66619873 90.37368011]
[111.17148590 80.74931335]
[117.07652283 61.56981659]
[136.12478638 58.75024033]
[147.08732605 48.51194382]
[158.04986572 38.27364731]
[169.01240540 28.03534889]
[179.97494507 17.79705238]
[190.93748474 7.55875444]
[195.74203491 -7.51529360]
[210.32470703 -10.54763603]
[221.28724670 -20.78593254]
[232.24978638 -31.02423096]
[243.21232605 -41.26252747]
[254.17485046 -51.50082397]
[258.38659668 -59.76295853]
[265.57946777 -61.86399841]
[276.81759644 -71.79903412]
[288.05569458 -81.73407745]
[299.29379272 -91.66911316]
[298.70953369 -107.29577637]
[308.34735107 -119.61025238]
[323.65658569 -122.79802704]
[337.40863037 -115.35392761]
[343.11026001 -100.79282379]
[338.06927490 -85.99003601]
[324.66592407 -77.93497467]
[309.22882080 -80.43100739]
[297.99072266 -70.49597168]
[286.75262451 -60.56093216]
[275.51452637 -50.62589264]
[264.41314697 -40.53828430]
[253.45062256 -30.29998779]
[242.48808289 -20.06169128]
[231.52554321 -9.82339382]
[220.56300354 0.41490352]
[216.54257202 14.75664043]
[201.17578125 18.52129364]
[190.21324158 28.75959206]
[179.25070190 38.99788666]
[168.28816223 49.23618698]
[157.32562256 59.47448349]
[146.36308289 69.71277618]
[146.92010498 80.08179474]
[141.50134277 89.19817352]
[131.72723389 93.85443115]
[120.79584503 92.25460052]
[109.29056549 101.87896729]
[107.62137604 107.00719452]
[103.14024353 110.77940369]
[96.88402557 111.69388580]
[84.87033081 120.67559052]
[72.85662842 129.65730286]
[60.84293365 138.63900757]
[48.82923508 147.62071228]
[36.81553650 156.60241699]
[24.80183983 165.58413696]
[12.78814316 174.56584167]
[13.75290489 181.25103760]
[12.74059677 187.88789368]
[9.86193562 193.90779114]
[5.38649797 198.80195618]
[-0.28236616 202.16445923]
[-6.64381170 203.72578430]
[-13.14372253 203.37434387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[4 37]
[6 34]
[7 33]
[8 32]
[9 29]
[10 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[50 97]
[51 96]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[58 87]
[60 85]
[61 84]
[62 83]
[63 82]
[64 81]
[66 80]
[67 79]
[68 78]
[69 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
