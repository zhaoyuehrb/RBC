%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGAUGUGUAGGGGGCGGGGCCCGGCGGAAGCGUAUAUAAGGCCGGGCUCGGGGACGCCCCCCCCUCACUCGCGCGUUAGGAGGCUCGGGUCGUUGUGGUGCGCUGUCUUCCCGCUUGCGUCAGGGACCUGCCCGACUCAGUGGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[274.41421509 152.26054382]
[259.41744995 152.57098389]
[248.46209717 142.32499695]
[247.76945496 127.34098816]
[257.73388672 116.12750244]
[242.74670410 115.50762939]
[235.89028931 118.39182281]
[227.45710754 114.71689606]
[212.48593140 113.78742218]
[197.51477051 112.85794067]
[190.60021973 115.59980774]
[182.24478149 111.75138855]
[167.29602051 110.51269531]
[152.34724426 109.27400970]
[137.39848328 108.03531647]
[122.44971466 106.79662323]
[107.50094604 105.55793762]
[106.25006866 115.21732330]
[96.39273834 123.28829193]
[80.30363464 123.52420044]
[65.35487366 124.76288605]
[50.40610504 126.00157928]
[35.45733643 127.24026489]
[20.50856781 128.47895813]
[5.55980110 129.71765137]
[-9.38896656 130.95634460]
[-24.33773422 132.19502258]
[-39.28650284 133.43371582]
[-43.55373764 147.99926758]
[-52.79760361 160.03735352]
[-65.76793671 167.91990662]
[-80.71060944 170.58090210]
[-95.60475159 167.66046143]
[-108.43605042 159.55352783]
[-117.46916962 147.35652161]
[-121.48246765 132.71896362]
[-119.93316650 117.62048340]
[-113.03080750 104.10301971]
[-101.70886993 93.99469757]
[-87.49855804 88.66258240]
[-72.32169342 88.82780457]
[-58.23083115 94.46801758]
[-47.13163757 104.82042694]
[-40.52519226 118.48495483]
[-25.57642365 117.24626160]
[-10.62765598 116.00756836]
[4.32111073 114.76888275]
[19.26987839 113.53018951]
[34.21864700 112.29150391]
[49.16741180 111.05281067]
[64.11618042 109.81411743]
[79.06494904 108.57543182]
[84.37287140 94.54595947]
[73.98773956 83.72241974]
[63.60260773 72.89888000]
[47.71111298 68.85013580]
[43.53276062 52.99222183]
[55.36588287 41.63840103]
[71.03758240 46.46850967]
[74.42614746 62.51374817]
[84.81127930 73.33728790]
[95.19641113 84.16083527]
[108.73963928 90.60916901]
[123.68840790 91.84786224]
[138.63717651 93.08654785]
[153.58593750 94.32524109]
[168.53471375 95.56392670]
[183.48347473 96.80261993]
[198.44424438 97.88676453]
[213.41542053 98.81624603]
[228.38659668 99.74572754]
[243.36657715 100.52044678]
[258.35375977 101.14031982]
[273.35055542 100.83031464]
[288.29931641 99.59162903]
[303.24807739 98.35293579]
[311.60351562 94.50450897]
[318.51806641 97.24638367]
[333.48925781 96.31690216]
[348.46041870 95.38742065]
[363.43157959 94.45793915]
[378.49780273 83.92156982]
[393.90386963 92.26872253]
[408.85263062 91.03003693]
[423.80142212 89.79134369]
[432.69302368 74.04976654]
[449.09078979 66.81509399]
[466.40692139 70.78934479]
[477.80633545 84.21182251]
[492.69116211 82.35643005]
[507.57595825 80.50104523]
[522.46075439 78.64565277]
[537.34558105 76.79026031]
[552.23040771 74.93487549]
[564.96752930 65.55001068]
[578.55413818 71.65362549]
[593.43890381 69.79823303]
[608.32373047 67.94284821]
[611.79583740 65.10120392]
[615.61273193 63.69468307]
[619.26818848 63.65126038]
[622.33422852 64.73797607]
[624.50799561 66.60177612]
[639.49517822 65.98190308]
[654.48242188 65.36203003]
[669.46960449 64.74214935]
[684.75030518 54.51940155]
[699.98059082 63.18317032]
[714.95178223 62.25368881]
[725.22393799 50.24295044]
[740.98663330 49.09691620]
[752.88812256 59.49550629]
[753.86743164 75.26942444]
[743.34356689 87.06027985]
[727.56018066 87.87277222]
[715.88122559 77.22486115]
[700.91009521 78.15434265]
[692.63555908 87.03224945]
[680.12750244 87.89428711]
[670.08947754 79.72933960]
[655.10229492 80.34921265]
[640.11511230 80.96908569]
[625.12786865 81.58896637]
[610.17913818 82.82765198]
[595.29431152 84.68304443]
[580.40948486 86.53842926]
[568.73699951 95.79058075]
[554.08575439 89.81967926]
[539.20098877 91.67507172]
[524.31616211 93.53046417]
[509.43136597 95.38584900]
[494.54653931 97.24124146]
[479.66174316 99.09662628]
[475.40295410 110.54051208]
[466.61343384 119.12060547]
[454.93328857 123.14945984]
[442.57919312 121.79707336]
[431.92382812 115.26094818]
[425.04010010 104.74011230]
[410.09133911 105.97880554]
[395.14257812 107.21749115]
[387.05331421 116.26450348]
[374.56570435 117.38486481]
[364.36108398 109.42911530]
[349.38989258 110.35859680]
[334.41873169 111.28807831]
[319.44754028 112.21755981]
[304.48678589 113.30170441]
[289.53802490 114.54039001]
[274.58923340 115.77908325]
[285.00811768 126.57013702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 73]
[6 72]
[8 71]
[9 70]
[10 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[53 62]
[54 61]
[55 60]
[74 150]
[75 149]
[76 148]
[78 147]
[79 146]
[80 145]
[81 144]
[83 141]
[84 140]
[85 139]
[89 133]
[90 132]
[91 131]
[92 130]
[93 129]
[94 128]
[96 126]
[97 125]
[98 124]
[103 123]
[104 122]
[105 121]
[106 120]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
