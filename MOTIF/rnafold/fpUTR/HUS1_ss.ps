%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGAACCACUGUUCGCGCUGCCGUGUUUCCGGGCGGGGACACUCAGGGCGCGACGCUUUUCUGUUACCCACAGAGGCCCGCCGCGGCUGCGCCAUCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[132.54284668 182.09837341]
[135.44419861 166.79412842]
[127.13354492 154.30682373]
[118.82289124 141.81950378]
[110.51223755 129.33218384]
[102.20158386 116.84487152]
[103.98404694 131.73858643]
[97.78458405 145.39753723]
[85.40065765 153.86146545]
[70.42280579 154.67639160]
[57.19367599 147.60603333]
[49.54886627 134.70033264]
[49.70489120 119.70114899]
[57.61651611 106.95728302]
[70.98986816 100.16365051]
[85.94522095 101.28913879]
[73.10412598 93.53632355]
[60.26302338 85.78350830]
[47.42192459 78.03068542]
[34.58082962 70.27787018]
[21.73972893 62.52505112]
[8.89863110 54.77223206]
[-6.51176691 61.55866623]
[-22.78234291 57.91604614]
[-33.61131287 45.45600128]
[-34.92385101 29.16581917]
[-47.98701096 21.79331207]
[-61.05017090 14.42080402]
[-74.11332703 7.04829645]
[-87.17649078 -0.32421088]
[-100.23964691 -7.69671822]
[-113.30281067 -15.06922531]
[-126.36596680 -22.44173241]
[-142.75010681 -21.74026680]
[-151.32014465 -35.72192001]
[-143.25994873 -50.00356293]
[-126.86116791 -49.89347076]
[-118.99346161 -35.50489426]
[-105.93029785 -28.13238525]
[-92.86714172 -20.75987816]
[-79.80398560 -13.38737011]
[-66.74082184 -6.01486301]
[-53.67766190 1.35764444]
[-40.61450195 8.73015213]
[-27.55134392 16.10265923]
[-15.89131165 9.42291069]
[-2.34471178 9.41707134]
[9.50993729 16.19471169]
[16.48742867 28.05919838]
[16.65144920 41.93113327]
[29.49254799 49.68395233]
[42.33364487 57.43677139]
[55.17474365 65.18959045]
[68.01584625 72.94240570]
[80.85694122 80.69522095]
[93.69804382 88.44804382]
[99.27332306 83.55590057]
[107.89659882 81.88514709]
[119.74082184 72.68110657]
[131.58503723 63.47706223]
[134.53712463 57.27450943]
[139.48437500 54.08930206]
[144.40533447 54.10494614]
[156.76930237 45.61187744]
[169.13327026 37.11880875]
[181.49725342 28.62573814]
[193.86122131 20.13266945]
[198.19064331 4.68483257]
[213.02310181 -1.42888975]
[226.98040771 6.48142672]
[229.35571289 22.34766388]
[218.32687378 33.99860382]
[202.35429382 32.49663925]
[189.99031067 40.98970795]
[177.62634277 49.48277664]
[165.26237488 57.97584534]
[152.89840698 66.46891785]
[140.78909302 75.32128906]
[128.94487000 84.52532959]
[117.10063934 93.72937012]
[114.68889618 108.53421783]
[122.99954987 121.02153015]
[131.31021118 133.50885010]
[139.62086487 145.99617004]
[147.93150330 158.48347473]
[163.16932678 161.71560669]
[171.41961670 174.49790955]
[168.24436951 189.00492859]
[176.55502319 201.49224854]
[184.86567688 213.97955322]
[193.17633057 226.46687317]
[201.48698425 238.95419312]
[209.79763794 251.44149780]
[218.10829163 263.92883301]
[233.49090576 268.48455811]
[239.38623047 283.40515137]
[231.27188110 297.24484253]
[215.37248230 299.38696289]
[203.88470459 288.18829346]
[205.62097168 272.23947144]
[197.31031799 259.75216675]
[188.99966431 247.26484680]
[180.68901062 234.77752686]
[172.37835693 222.29020691]
[164.06771851 209.80290222]
[155.75706482 197.31558228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 85]
[3 84]
[4 83]
[5 82]
[6 81]
[16 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[22 50]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[58 80]
[59 79]
[60 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[88 106]
[89 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
