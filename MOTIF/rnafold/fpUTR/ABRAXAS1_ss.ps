%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACAGGGUCUUGCCUCCGCGCGCCCCGCCCUCGUCCUCUUGUGUAGCCUGAGGCGGCGGUAGC\
) } def
/len { sequence length } bind def

/coor [
[45.57699203 148.96174622]
[38.87481689 150.03427124]
[32.15623093 149.28512573]
[25.90547180 146.78288269]
[20.56915855 142.72196960]
[16.52439308 137.40757751]
[14.05212402 131.23281860]
[-0.93088615 130.51908875]
[-15.91389656 129.80535889]
[-30.89690590 129.09162903]
[-41.16048050 137.28140259]
[-53.83626175 136.16366577]
[-61.97167969 126.91268158]
[-76.90375519 125.48684692]
[-91.83583832 124.06100464]
[-106.52012634 131.36193848]
[-120.03361511 122.07119751]
[-118.47477722 105.74630737]
[-103.44721222 99.18090820]
[-90.40999603 109.12892151]
[-75.47791290 110.55476379]
[-60.54583740 111.98060608]
[-45.21430206 103.76561737]
[-30.18317795 114.10861969]
[-15.20016766 114.82234192]
[-0.21715739 115.53607178]
[14.76585293 116.24980164]
[33.88674164 99.93842316]
[58.03215790 108.72269440]
[71.95767212 103.14775848]
[85.88319397 97.57282257]
[94.67633057 86.70211029]
[108.54187012 88.50165558]
[122.46738434 82.92671967]
[136.39291382 77.35178375]
[143.49656677 71.04058838]
[151.11607361 71.86032867]
[165.29107666 66.95430756]
[179.46609497 62.04829025]
[193.64111328 57.14226913]
[200.59866333 43.20561981]
[215.04402161 38.43214798]
[228.28761292 45.15099716]
[242.46263123 40.24497604]
[255.45306396 29.35070801]
[269.51766968 38.81763458]
[264.31420898 54.95331192]
[247.36865234 54.41999054]
[233.19363403 59.32600784]
[226.93678284 72.79402924]
[212.63119507 77.97135162]
[198.54711914 71.31728363]
[184.37211609 76.22330475]
[170.19709778 81.12931824]
[156.02209473 86.03533936]
[141.96784973 91.27730560]
[128.04232788 96.85224152]
[114.11680603 102.42717743]
[105.32366943 113.29788971]
[91.45812988 111.49834442]
[77.53261566 117.07328033]
[63.60709381 122.64821625]
[63.16785812 129.55786133]
[60.91221619 136.07490540]
[57.01699448 141.73284912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 27]
[8 26]
[9 25]
[10 24]
[13 22]
[14 21]
[15 20]
[29 62]
[30 61]
[31 60]
[33 58]
[34 57]
[35 56]
[37 55]
[38 54]
[39 53]
[40 52]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
