%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGCGCCAAGGAAGGAGGAGAAAAGGCGGCCGAGAAAAGGAGGAGGGCAAGGGGAAGAGGAAGGGCGAGGGAGGAGCCUGAGGAGACUCGCCCGGCUCAACCCCGACGUCCGCGCCCCGGCCGCCUGUUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-15.56993675 353.83993530]
[-19.31361008 368.36523438]
[-11.06621647 381.84692383]
[-14.84859753 397.19192505]
[-28.41673279 405.29632568]
[-43.72089005 401.35192871]
[-51.68138123 387.69885254]
[-47.57539368 372.43725586]
[-33.83892822 364.62158203]
[-30.09525681 350.09625244]
[-42.97228622 357.78924561]
[-57.97195435 357.68927002]
[-70.74530029 349.82534790]
[-77.58886719 336.47747803]
[-76.51845551 321.51571655]
[-67.84441376 309.27801514]
[-54.08166122 303.31256104]
[-39.22053146 305.34893799]
[-27.56980896 314.79672241]
[-22.50764465 328.91421509]
[-16.17703247 315.31558228]
[-25.70890045 303.84347534]
[-29.32946205 289.31072998]
[-26.26862335 274.58685303]
[-17.08104706 262.60317993]
[-3.54652739 255.76916504]
[11.67458916 255.48811340]
[18.00520325 241.88946533]
[24.33581543 228.29081726]
[30.66642761 214.69215393]
[36.99703979 201.09350586]
[43.32765579 187.49485779]
[49.65826797 173.89619446]
[55.98888016 160.29754639]
[62.31949234 146.69889832]
[47.74421692 150.24310303]
[34.82298279 142.62458801]
[30.86874390 128.15516663]
[38.11945724 115.02401733]
[52.47148132 110.66288757]
[65.80208588 117.54002380]
[70.56668091 131.76228333]
[78.70258331 119.16041565]
[71.98304749 105.97930145]
[72.73607635 91.20340729]
[80.76082611 78.77370453]
[93.91696167 72.00538635]
[108.69554901 72.70368195]
[116.83144379 60.10181046]
[124.96734619 47.49994278]
[133.10324097 34.89807129]
[129.09352112 17.91367912]
[138.38812256 3.54276705]
[154.86190796 0.36177692]
[162.70671082 -12.42333031]
[170.55151367 -25.20843697]
[178.39633179 -37.99354553]
[174.93293762 -53.18046951]
[183.07083130 -66.03463745]
[197.57058716 -69.24285126]
[205.41539001 -82.02796173]
[213.26019287 -94.81306458]
[208.62799072 -107.51642609]
[212.13442993 -120.37327576]
[222.27343750 -128.71781921]
[235.17546082 -129.65721130]
[243.31135559 -142.25907898]
[251.44726562 -154.86094666]
[259.58316040 -167.46282959]
[267.71905518 -180.06469727]
[275.85498047 -192.66656494]
[283.99087524 -205.26843262]
[274.60906982 -217.15374756]
[269.59713745 -231.44216919]
[269.49868774 -246.58380127]
[274.32440186 -260.93618774]
[283.55084229 -272.94250488]
[296.17721558 -281.30035400]
[310.83383179 -285.10321045]
[325.93093872 -283.93850708]
[339.83087158 -277.93258667]
[351.02584839 -267.73693848]
[358.30157471 -254.45753479]
[360.86877441 -239.53480530]
[358.44903564 -224.58744812]
[351.30477905 -211.23684692]
[340.21099854 -200.93116760]
[326.37106323 -194.78831482]
[311.28622437 -193.47459412]
[296.59274292 -197.13253784]
[288.45684814 -184.53067017]
[280.32092285 -171.92878723]
[272.18502808 -159.32691956]
[264.04913330 -146.72505188]
[255.91323853 -134.12318420]
[247.77732849 -121.52131653]
[252.03248596 -105.29177094]
[243.09359741 -90.69695282]
[226.04530334 -86.96825409]
[218.20050049 -74.18315125]
[210.35568237 -61.39804459]
[214.06341553 -47.01790619]
[206.28979492 -33.94023514]
[191.18144226 -30.14873505]
[183.33662415 -17.36362839]
[175.49182129 -4.57852125]
[167.64700317 8.20658588]
[172.37890625 20.24625778]
[169.23899841 32.99662781]
[159.16246033 41.71770859]
[145.70512390 43.03397369]
[137.56921387 55.63584137]
[129.43331909 68.23770905]
[121.29741669 80.83958435]
[128.01695251 94.02069855]
[127.26392365 108.79659271]
[119.23917389 121.22629547]
[106.08303833 127.99461365]
[91.30445099 127.29631805]
[83.16855621 139.89819336]
[75.91814423 153.02951050]
[69.58753204 166.62815857]
[63.25691986 180.22682190]
[56.92630768 193.82546997]
[50.59569550 207.42411804]
[44.26507950 221.02276611]
[37.93446732 234.62142944]
[31.60385513 248.22007751]
[25.27324104 261.81872559]
[34.85696793 273.64724731]
[38.34043503 288.40365601]
[35.08484650 303.14889526]
[25.78822899 314.96978760]
[12.33661747 321.55490112]
[-2.57837939 321.64617920]
[-8.90899277 335.24484253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[20 136]
[21 135]
[27 129]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[42 120]
[43 119]
[48 114]
[49 113]
[50 112]
[51 111]
[54 107]
[55 106]
[56 105]
[57 104]
[60 101]
[61 100]
[62 99]
[66 96]
[67 95]
[68 94]
[69 93]
[70 92]
[71 91]
[72 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
