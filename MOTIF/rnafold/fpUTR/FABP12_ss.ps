%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCAUACUACUUCAGGGAAAACCAGCAUACACAUGAAACUACUGUUCUUUGAGAUCAACUUAUCUCAGACAGA\
) } def
/len { sequence length } bind def

/coor [
[70.49241638 132.47068787]
[58.65530777 141.68388367]
[46.81819916 150.89706421]
[34.98109055 160.11026001]
[23.14398384 169.32345581]
[25.91774559 184.37551880]
[21.36766815 198.98905945]
[10.53932762 209.80596924]
[-4.07900238 214.34062195]
[-19.12813759 211.55096436]
[-31.14989471 202.07806396]
[-37.38176346 188.09870911]
[-36.39170837 172.82525635]
[-28.40723228 159.76742554]
[-15.26311207 151.92582703]
[0.02023023 151.10238647]
[13.93079376 157.48634338]
[25.76790237 148.27314758]
[37.60501099 139.05996704]
[49.44211578 129.84677124]
[61.27922440 120.63357544]
[58.52071381 114.30076599]
[56.79030609 107.61349487]
[56.13088608 100.73751831]
[56.55880356 93.84326172]
[58.06344604 87.10160828]
[60.60752487 80.67964935]
[64.12798309 74.73656464]
[68.53755951 69.41965485]
[73.72695923 64.86070251]
[79.56755829 61.17271423]
[85.91458893 58.44709015]
[92.61074829 56.75139236]
[99.49005127 56.12765121]
[106.38199615 56.59132385]
[113.11575317 58.13092041]
[119.52442932 60.70827484]
[125.44917297 64.25951385]
[130.74314880 68.69660950]
[135.27511597 73.90958405]
[138.93275452 79.76924133]
[141.62541199 86.13033295]
[143.28636169 92.83518982]
[143.87440491 99.71763611]
[158.66983032 102.18655396]
[173.46524048 104.65547943]
[188.26066589 107.12439728]
[203.05607605 109.59331512]
[208.49095154 107.51892853]
[213.60707092 107.91416168]
[217.44877625 110.17648315]
[219.48120117 113.39330292]
[233.85762024 117.67333984]
[248.23402405 121.95338440]
[262.61044312 126.23342896]
[276.98684692 130.51347351]
[291.36328125 134.79351807]
[305.14169312 127.05202484]
[320.33578491 131.40116882]
[327.93115234 145.26066589]
[323.42163086 160.40792847]
[309.48260498 167.85635376]
[294.38385010 163.18692017]
[287.08322144 149.16992188]
[272.70681763 144.88989258]
[258.33041382 140.60984802]
[243.95397949 136.32980347]
[229.57757568 132.04975891]
[215.20115662 127.76971436]
[200.58715820 124.38873291]
[185.79174805 121.91981506]
[170.99632263 119.45089722]
[156.20089722 116.98197937]
[141.40548706 114.51306152]
[123.91867065 136.78233337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[4 18]
[5 17]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
