%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACACGCGCGCACACACACGCGCACACCGGACCCCGCGCGCACACGCACGGAGGGCGCGAGCGAGCAGACGCGCACACCGGCGAGCCAAGUUCCGCAGCCUGGC\
) } def
/len { sequence length } bind def

/coor [
[108.83046722 154.98802185]
[103.37039185 168.95898438]
[89.04321289 173.40103149]
[76.63732147 164.96931458]
[75.49439240 150.01292419]
[86.47638702 139.79362488]
[79.05858612 138.68627930]
[67.13577271 147.78828430]
[55.21295547 156.89028931]
[43.29013824 165.99229431]
[31.36732292 175.09428406]
[31.86981392 190.60322571]
[23.13257027 203.42665100]
[8.51524067 208.63369751]
[-6.36151409 204.22213745]
[-15.77727795 191.88832092]
[-16.11149597 176.37484741]
[-7.23565769 163.64695740]
[7.43729830 158.59880066]
[22.26531982 163.17147827]
[34.18813705 154.06947327]
[46.11095428 144.96746826]
[58.03377151 135.86546326]
[69.95658875 126.76346588]
[62.74186707 106.96228790]
[66.68765259 87.52756500]
[79.37103271 73.93792725]
[96.09872437 69.34127045]
[97.87281799 54.44655228]
[99.64691925 39.55183792]
[101.42101288 24.65711975]
[84.92068481 5.57380676]
[94.39096832 -21.04899788]
[86.76300812 -33.96465302]
[78.94448853 -46.76585388]
[70.93713379 -59.44979477]
[62.92978668 -72.13373566]
[49.02030182 -79.67275238]
[48.76881790 -94.56523895]
[40.76146698 -107.24917603]
[32.75411606 -119.93311310]
[17.99527168 -127.08213806]
[17.07711601 -143.45556641]
[30.94417000 -152.20980835]
[45.33119583 -144.33926392]
[45.43805695 -127.94046783]
[53.44540787 -115.25652313]
[61.45275497 -102.57258606]
[74.78950500 -95.94081116]
[75.61372375 -80.14108276]
[83.62107849 -67.45714569]
[91.62842560 -54.77320480]
[97.96206665 -50.73257828]
[99.67865753 -41.59261703]
[107.30662537 -28.67696381]
[122.22599792 -27.12377548]
[132.35073853 -38.19127655]
[142.47547913 -49.25877380]
[152.60023499 -60.32627487]
[162.72497559 -71.39377594]
[158.01797485 -86.01361084]
[161.26718140 -101.02487946]
[171.59860229 -112.38961792]
[186.23312378 -117.05077362]
[201.23413086 -113.75452423]
[212.56643677 -103.38752747]
[217.18170166 -88.73847198]
[213.83843994 -73.74787140]
[203.43597412 -62.44812012]
[188.77252197 -57.87879562]
[173.79248047 -61.26902771]
[163.66772461 -50.20153046]
[153.54298401 -39.13402939]
[143.41824341 -28.06653023]
[133.29350281 -16.99903107]
[139.06134033 -2.90170217]
[136.95970154 11.38142014]
[128.36883545 21.97949219]
[116.31573486 26.43121719]
[114.54163361 41.32593536]
[112.76753998 56.22064972]
[110.99343872 71.11536407]
[126.47415924 79.90261841]
[135.42184448 96.74935150]
[133.85655212 117.04040527]
[120.91709900 134.37098694]
[129.66178894 146.55828857]
[138.40647888 158.74559021]
[147.15116882 170.93289185]
[161.48284912 177.63467407]
[162.61613464 192.48609924]
[171.36082458 204.67340088]
[180.10551453 216.86070251]
[195.26194763 223.12284851]
[197.14846802 239.41313171]
[183.82437134 248.97349548]
[168.99635315 241.96907043]
[167.91821289 225.60539246]
[159.17352295 213.41809082]
[150.42883301 201.23078918]
[136.72264099 195.40074158]
[134.96386719 179.67758179]
[126.21917725 167.49028015]
[117.47448730 155.30297852]
[108.72979736 143.11567688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[28 82]
[29 81]
[30 80]
[31 79]
[33 55]
[34 54]
[35 52]
[36 51]
[37 50]
[39 48]
[40 47]
[41 46]
[56 75]
[57 74]
[58 73]
[59 72]
[60 71]
[86 105]
[87 104]
[88 103]
[89 102]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
