%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAAACAUGUGACAUGCUGGGACAAGGUUAAAGAUCGUUUUAUCCUUGCUGUAAAAGCUGAUCUGCCUGUAGCUGCCACAGCCUCCAGCGGUGGCUACAGUUGAAACCCUCACACCACGCAGGAAGAGGUCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[275.27648926 337.61102295]
[280.27819824 328.59420776]
[270.21640015 317.46942139]
[260.15463257 306.34466553]
[250.09286499 295.21987915]
[238.01141357 299.20520020]
[225.27525330 298.29397583]
[213.80020142 292.58746338]
[205.32601929 282.91101074]
[201.15255737 270.69476318]
[201.94053650 257.76235962]
[207.60720825 246.05871582]
[198.05101013 234.49676514]
[183.97882080 229.61590576]
[181.15087891 214.04948425]
[171.59468079 202.48751831]
[164.85440063 199.31008911]
[161.95782471 190.55986023]
[152.66157532 178.78787231]
[143.36532593 167.01588440]
[134.06909180 155.24389648]
[124.77283478 143.47190857]
[115.47658539 131.69990540]
[106.18034363 119.92792511]
[92.17382812 122.05296326]
[78.41987610 114.38777924]
[71.56822205 98.47148132]
[56.72525406 96.30669403]
[41.88228607 94.14189911]
[27.03931999 91.97710419]
[12.26697636 97.64177704]
[0.78958738 88.14868164]
[-14.05338001 85.98388672]
[-28.89634705 83.81909943]
[-43.73931503 81.65430450]
[-58.58228302 79.48951721]
[-73.61065674 86.05303955]
[-86.64663696 76.10340881]
[-84.27992249 59.87593842]
[-68.94518280 54.06406784]
[-56.41748810 64.64654541]
[-41.57452393 66.81134033]
[-26.73155594 68.97612762]
[-11.88858795 71.14092255]
[2.95437932 73.30570984]
[16.66505432 67.48620605]
[29.20411110 77.13414001]
[44.04707718 79.29893494]
[58.89004517 81.46372223]
[73.73301697 83.62851715]
[84.51536560 73.20063019]
[82.84776306 58.29361343]
[81.18016052 43.38660049]
[79.51255035 28.47958374]
[77.84494781 13.57256985]
[64.51831818 5.84553480]
[58.36882401 -8.08418751]
[61.56303406 -22.79000282]
[72.67116547 -32.67673111]
[71.00356293 -47.58374405]
[69.33596039 -62.49076080]
[67.66835022 -77.39777374]
[66.00074768 -92.30478668]
[52.13028717 -99.05860138]
[44.13263321 -112.25106049]
[44.55980301 -127.67250824]
[53.27548981 -140.40202332]
[67.49855042 -146.37763977]
[82.69046021 -143.69258118]
[94.00353241 -133.20364380]
[97.82780457 -118.25778961]
[92.94297028 -103.62419891]
[80.90776062 -93.97239685]
[82.57536316 -79.06537628]
[84.24297333 -64.15836334]
[85.91057587 -49.25135040]
[87.57818604 -34.34433365]
[100.59638977 -27.15655327]
[106.96117401 -13.52007580]
[104.04173279 1.42416203]
[92.75196075 11.90496445]
[94.41956329 26.81197929]
[96.08717346 41.71899414]
[97.75477600 56.62600708]
[99.42238617 71.53302002]
[121.30657959 87.56747437]
[117.95233154 110.63167572]
[127.24858093 122.40366364]
[136.54483032 134.17565918]
[145.84107971 145.94764709]
[155.13732910 157.71963501]
[164.43357849 169.49162292]
[173.72982788 181.26361084]
[183.15663147 192.93132019]
[192.71284485 204.49327087]
[207.46855164 210.20112610]
[209.61296082 224.94055176]
[219.16917419 236.50251770]
[236.35134888 233.15846252]
[252.79333496 238.90136719]
[264.04205322 252.08134460]
[267.09869385 269.04730225]
[261.21765137 285.15811157]
[271.27941895 296.28286743]
[281.34118652 307.40765381]
[291.40295410 318.53244019]
[311.02609253 312.99942017]
[330.71090698 318.01452637]
[345.18762207 332.15808105]
[350.61941528 351.57699585]
[345.61904907 371.03439331]
[357.07385254 380.71881104]
[368.52862549 390.40322876]
[379.98339844 400.08764648]
[393.23602295 397.42562866]
[405.41384888 402.82766724]
[412.13513184 414.10357666]
[411.12438965 426.99606323]
[422.36056519 436.93328857]
[438.39712524 437.39004517]
[447.92309570 450.29876709]
[443.63098145 465.75701904]
[428.81332397 471.90652466]
[414.83694458 464.02993774]
[412.42337036 448.16946411]
[401.18716431 438.23223877]
[384.49905396 439.99850464]
[371.41433716 428.96145630]
[370.29898071 411.54241943]
[358.84420776 401.85800171]
[347.38943481 392.17358398]
[335.93463135 382.48916626]
[327.28479004 387.78002930]
[317.54150391 390.64874268]
[307.37039185 390.89004517]
[297.46871948 388.47842407]
[288.51757812 383.57067871]
[281.13510132 376.49551392]
[275.83364868 367.73168945]
[272.98440552 357.87554932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 106]
[3 105]
[4 104]
[5 103]
[12 98]
[13 97]
[15 95]
[16 94]
[18 93]
[19 92]
[20 91]
[21 90]
[22 89]
[23 88]
[24 87]
[27 50]
[28 49]
[29 48]
[30 47]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[51 85]
[52 84]
[53 83]
[54 82]
[55 81]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[111 132]
[112 131]
[113 130]
[114 129]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
