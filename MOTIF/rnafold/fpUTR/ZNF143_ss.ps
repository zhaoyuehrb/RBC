%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:34:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGCCUCAGACACACUAUGCGGGUUGCGGGGCCUGGGGGCCGGACGGCUGUUUCCUGUCCUGGUGCAUGGUGGUCGGACGAAGGAAUUGUUGGAAAAUUUUCUCGGAGGUAGAAG\
) } def
/len { sequence length } bind def

/coor [
[93.75717163 256.63781738]
[80.18757629 249.65007019]
[71.00051880 237.46151733]
[68.02010345 222.49221802]
[71.83809662 207.71434021]
[81.69641876 196.06204224]
[95.63771057 189.84889221]
[96.03036499 174.85403442]
[96.42301941 159.85917664]
[96.81567383 144.86430359]
[97.20832825 129.86944580]
[76.68576050 112.36553192]
[80.03242493 89.03233337]
[69.99546814 77.88516235]
[59.95850754 66.73799133]
[51.78509903 62.38367081]
[49.80940247 55.16515732]
[40.06768036 43.75906754]
[30.32596207 32.35297775]
[20.58423996 20.94688797]
[10.84251976 9.54079723]
[1.10079920 -1.86529183]
[-8.64092159 -13.27138138]
[-18.38264275 -24.67747116]
[-28.12436295 -36.08356094]
[-36.69652939 -35.14879227]
[-44.82663345 -37.72355652]
[-51.15543747 -43.29710388]
[-54.65742111 -50.86429977]
[-54.80657578 -59.10628891]
[-51.65405655 -66.62017822]
[-60.15015030 -78.98207092]
[-68.64624786 -91.34396362]
[-77.14234161 -103.70585632]
[-85.63843536 -116.06774902]
[-94.13452911 -128.42964172]
[-106.72534180 -131.57888794]
[-113.53335571 -142.15298462]
[-111.33326721 -154.12625122]
[-119.50285339 -166.70629883]
[-127.67243958 -179.28636169]
[-136.32962036 -191.53598022]
[-145.46102905 -203.43629456]
[-154.59245300 -215.33659363]
[-163.72387695 -227.23689270]
[-179.07353210 -233.00926208]
[-181.48202515 -249.23057556]
[-168.47171021 -259.21374512]
[-153.42646790 -252.68893433]
[-151.82357788 -236.36831665]
[-142.69215393 -224.46800232]
[-133.56072998 -212.56770325]
[-124.42931366 -200.66740417]
[-120.87351990 -199.87377930]
[-117.55319214 -197.24288940]
[-115.36318970 -192.91882324]
[-115.09237671 -187.45594788]
[-106.92279053 -174.87588501]
[-98.75320435 -162.29583740]
[-82.73523712 -155.25732422]
[-81.77262878 -136.92573547]
[-73.27654266 -124.56384277]
[-64.78044891 -112.20195007]
[-56.28435135 -99.84005737]
[-47.78825760 -87.47816467]
[-39.29216385 -75.11627197]
[-18.87919617 -68.06352997]
[-16.71827316 -45.82527924]
[-6.97655296 -34.41919327]
[2.76516795 -23.01310158]
[12.50688839 -11.60701275]
[22.24860954 -0.20092307]
[31.99032974 11.20516682]
[41.73205185 22.61125565]
[51.47377014 34.01734543]
[61.21549225 45.42343521]
[71.10568237 56.70103073]
[81.14263916 67.84820557]
[91.17959595 78.99537659]
[103.82744598 75.71376801]
[117.20602417 79.98967743]
[126.87910461 91.48670197]
[129.08805847 107.33908081]
[143.35391235 111.97433472]
[157.61976624 116.60958862]
[173.13546753 113.51546478]
[182.84886169 124.80702209]
[197.11470032 129.44227600]
[211.38055420 134.07752991]
[225.64640808 138.71278381]
[239.91224670 143.34803772]
[254.17810059 147.98329163]
[267.34274292 139.54374695]
[282.84561157 141.59202576]
[293.36669922 153.16099548]
[293.93826294 168.78813171]
[284.29046631 181.09477234]
[268.97866821 184.27012634]
[255.23263550 176.81486511]
[249.54284668 162.24914551]
[235.27699280 157.61389160]
[221.01113892 152.97863770]
[206.74530029 148.34338379]
[192.47944641 143.70812988]
[178.21360779 139.07286072]
[163.71829224 142.49853516]
[152.98449707 130.87544250]
[138.71865845 126.24018097]
[124.45281219 121.60492706]
[112.20318604 130.26210022]
[111.81053162 145.25695801]
[111.41787720 160.25183105]
[111.02522278 175.24668884]
[110.63256836 190.24154663]
[124.22957611 197.17581177]
[133.46455383 209.32809448]
[136.50390625 224.28553772]
[132.74414062 239.07833862]
[122.93177032 250.76936340]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 114]
[8 113]
[9 112]
[10 111]
[11 110]
[13 79]
[14 78]
[15 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[36 61]
[39 59]
[40 58]
[41 57]
[42 53]
[43 52]
[44 51]
[45 50]
[83 109]
[84 108]
[85 107]
[87 105]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
