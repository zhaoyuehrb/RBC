%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGACUGAGGGCCGGUGCUUCCGGUGGCUGCCCAGAACUUCUUAUGUGCGGCGGCGUGAUGUUGGGCGGCCACAGAGAGAUUGGUGUUUUUGUGAGGCAGUGAGACCUAAGGUAACCUUUAUCAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[187.08096313 436.86563110]
[183.89247131 422.20843506]
[180.70399475 407.55120850]
[177.51551819 392.89401245]
[174.32704163 378.23681641]
[170.79064941 363.65963745]
[166.90837097 349.17074585]
[163.02607727 334.68185425]
[150.03874207 327.48016357]
[145.89515686 312.84167480]
[153.53701782 299.26818848]
[149.65472412 284.77929688]
[145.77244568 270.29040527]
[131.11207581 257.77029419]
[136.35934448 238.37355042]
[131.79203796 224.08580017]
[120.54685211 214.31877136]
[123.71479797 198.81797791]
[119.14749908 184.53022766]
[114.58020020 170.24247742]
[110.01290131 155.95472717]
[105.44560242 141.66697693]
[100.87831116 127.37921906]
[82.61723328 121.17150879]
[72.97355652 104.46816254]
[76.72805023 85.54975128]
[66.63814545 74.45047760]
[56.54824066 63.35121155]
[46.45833588 52.25194168]
[36.36843109 41.15266800]
[26.27852440 30.05340004]
[16.18861771 18.95412827]
[6.09871292 7.85485840]
[-3.99119282 -3.24441218]
[-14.08109856 -14.34368229]
[-24.17100334 -25.44295311]
[-30.48953247 -27.87261581]
[-34.03214264 -32.47287369]
[-34.46144104 -37.31874847]
[-44.01179123 -48.88554382]
[-55.00323868 -49.30664444]
[-63.73689651 -55.62356567]
[-67.42348480 -65.51690674]
[-65.05423737 -75.57881927]
[-74.04340363 -87.58693695]
[-83.03256989 -99.59505463]
[-92.02172852 -111.60317993]
[-101.01089478 -123.61129761]
[-110.00006104 -135.61941528]
[-125.67718506 -137.62023926]
[-135.28158569 -150.17137146]
[-133.11512756 -165.82647705]
[-120.46313477 -175.29763794]
[-104.83182526 -172.96577454]
[-95.49495697 -160.21437073]
[-97.99194336 -144.60858154]
[-89.00277710 -132.60046387]
[-80.01361084 -120.59233856]
[-71.02444458 -108.58422089]
[-62.03528214 -96.57610321]
[-53.04611588 -84.56798553]
[-34.78265381 -78.39343262]
[-32.44499588 -58.43589783]
[-22.89464378 -46.86910248]
[-13.07173347 -35.53285980]
[-2.98182797 -24.43358803]
[7.10807753 -13.33431816]
[17.19798279 -2.23504734]
[27.28788948 8.86422348]
[37.37779617 19.96349335]
[47.46770096 31.06276321]
[57.55760574 42.16203308]
[67.64751434 53.26130676]
[77.73741913 64.36057281]
[87.82732391 75.45984650]
[97.53731537 72.71762085]
[107.58140564 73.67671204]
[116.59695435 78.20701599]
[128.60507202 69.21784973]
[140.61318970 60.22868347]
[152.62130737 51.23951721]
[164.62942505 42.25035095]
[176.63754272 33.26118851]
[182.59216309 17.98131180]
[198.84098816 15.76601982]
[208.66864014 28.89421463]
[201.96525574 43.86073303]
[185.62670898 45.26930618]
[173.61859131 54.25847244]
[161.61047363 63.24763489]
[149.60235596 72.23680115]
[137.59423828 81.22596741]
[125.58612061 90.21513367]
[127.29553986 102.31226349]
[123.57553864 113.94945526]
[115.16606140 122.81192780]
[119.73335266 137.09967041]
[124.30065155 151.38742065]
[128.86795044 165.67517090]
[133.43524170 179.96292114]
[138.00254822 194.25067139]
[149.57441711 205.03965759]
[146.07978821 219.51850891]
[150.64709473 233.80625916]
[160.69468689 238.28230286]
[166.45497131 247.39270020]
[166.20050049 257.94750977]
[160.26133728 266.40811157]
[164.14361572 280.89700317]
[168.02590942 295.38589478]
[181.43069458 303.31994629]
[185.16148376 318.06906128]
[177.51496887 330.79959106]
[181.39726257 345.28845215]
[185.27954102 359.77734375]
[189.78233337 364.83224487]
[190.82318115 370.54443359]
[188.98423767 375.04833984]
[192.17271423 389.70553589]
[195.36120605 404.36273193]
[198.54968262 419.01992798]
[201.73815918 433.67715454]
[216.39199829 438.27722168]
[226.77072144 449.59878540]
[230.08250427 464.59637451]
[225.43652344 479.23571777]
[214.08248901 489.57888794]
[199.07458496 492.84365845]
[184.44989014 488.15179443]
[174.14233398 476.76541138]
[170.92462158 461.74734497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[3 120]
[4 119]
[5 118]
[6 115]
[7 114]
[8 113]
[11 110]
[12 109]
[13 108]
[15 104]
[16 103]
[18 101]
[19 100]
[20 99]
[21 98]
[22 97]
[23 96]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[39 64]
[40 63]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[78 93]
[79 92]
[80 91]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
