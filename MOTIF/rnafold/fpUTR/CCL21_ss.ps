%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUAAAUAGCAGGCCAAUCCCAGCCCACGCACAGACCCCCAACUUGCAGCUGCCCACCUCACCCUCAGCUCUGGCCUCUUACUCACCCUCUACCACAGAC\
) } def
/len { sequence length } bind def

/coor [
[103.97815704 315.05145264]
[98.11433411 301.19137573]
[95.06744385 286.45355225]
[94.95461273 271.40454102]
[97.78016663 256.62271118]
[103.43550110 242.67625427]
[111.70323944 230.10125732]
[122.26560211 219.38104248]
[134.71658325 210.92768860]
[128.86979675 197.11410522]
[123.26699829 192.09455872]
[123.06291962 182.78396606]
[117.64429474 168.79687500]
[112.22566986 154.80979919]
[106.80704498 140.82270813]
[101.38842010 126.83562469]
[95.96979523 112.84854126]
[96.11964417 127.84779358]
[89.96379852 141.52644348]
[78.63783264 151.36120605]
[64.23104095 155.53785706]
[49.40104675 153.28591919]
[36.88353348 145.02081299]
[28.98760986 132.26721191]
[27.16983414 117.37776184]
[31.76553154 103.09912109]
[41.92693710 92.06526947]
[55.77957153 86.31162262]
[70.76804352 86.89955139]
[84.12507629 93.71865845]
[74.01963806 82.63352203]
[63.91420364 71.54839325]
[55.67066956 67.21561432]
[53.67473221 59.96279526]
[43.91545486 48.57172012]
[28.45946312 49.94718552]
[15.16415215 41.94628906]
[9.14184284 27.64553833]
[12.70823479 12.54386806]
[24.49197769 2.44817448]
[39.96198273 1.24045956]
[53.16971588 9.38511372]
[59.03653717 23.75035095]
[55.30653000 38.81244659]
[65.06580353 50.20351791]
[74.99933624 61.44295502]
[85.10477448 72.52809143]
[95.21020508 83.61322021]
[110.14621735 82.22919464]
[118.04270172 69.47593689]
[125.93918610 56.72268295]
[133.83566284 43.96942520]
[141.73214722 31.21616936]
[133.12960815 18.64969444]
[130.38844299 3.66951156]
[133.98355103 -11.12897015]
[143.29208374 -23.18182373]
[156.70124817 -30.40082169]
[171.88786316 -31.53522682]
[186.22071838 -26.38849831]
[197.21659851 -15.85233688]
[202.97036743 -1.75219643]
[202.48516846 13.46898842]
[195.84506226 27.17405510]
[184.20048523 36.98851776]
[169.56893921 41.21196365]
[154.48541260 39.11265182]
[146.58892822 51.86590958]
[138.69244385 64.61916351]
[130.79595947 77.37242126]
[122.89947510 90.12567902]
[118.55291748 102.18025970]
[109.95687866 107.42991638]
[115.37550354 121.41699982]
[120.79412842 135.40408325]
[126.21275330 149.39117432]
[131.63137817 163.37825012]
[137.05000305 177.36534119]
[142.68338013 191.26731873]
[148.53016663 205.08090210]
[163.26647949 202.02685547]
[178.31546021 201.90672302]
[193.09866333 204.72509766]
[207.04785156 210.37365723]
[219.62687683 218.63528442]
[230.35220337 229.19244385]
[238.81161499 241.63931274]
[244.67991638 255.49749756]
[247.73156738 270.23431396]
[247.84927368 285.28329468]
[245.02851868 300.06604004]
[239.37768555 314.01434326]
[231.11401367 326.59201050]
[220.55513000 337.31564331]
[208.10688782 345.77301025]
[194.24775696 351.63909912]
[179.51045227 354.68835449]
[164.46144104 354.80361938]
[149.67915344 351.98046875]
[135.73178101 346.32739258]
[123.15544128 338.06167603]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 80]
[10 79]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[17 73]
[30 48]
[31 47]
[32 46]
[34 45]
[35 44]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
