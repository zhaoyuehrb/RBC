%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAUGCGGAUGCGGAUGCGAAGGUGGCGGCCGAGGUGGCGGCCGAGGUGGCGGCUGCGGCGGCCGCCGCGGAUGCAGAUGCGGAUGAGACCCUCGGUGACUGUGAGGGGAACCCAGAUUUUCAG\
) } def
/len { sequence length } bind def

/coor [
[100.10535431 133.50231934]
[96.79338837 148.13212585]
[102.16891479 163.62519836]
[91.23611450 175.84837341]
[75.24169922 172.22747803]
[70.63936615 156.48738098]
[82.16358948 144.82014465]
[85.47556305 130.19035339]
[76.23627472 123.61572266]
[69.71949005 114.33554840]
[66.67180634 103.41300964]
[67.44238281 92.09946442]
[71.94293213 81.69104767]
[61.53492355 70.88949585]
[51.12691879 60.08795166]
[35.55680847 59.63032532]
[25.15548134 48.52775574]
[25.68771172 33.68685532]
[15.27970409 22.88530922]
[4.87169790 12.08376312]
[-5.53630829 1.28221667]
[-20.81108093 3.27909231]
[-34.17656326 -4.01592636]
[-40.60758972 -17.62128830]
[-37.82734680 -32.22978973]
[-48.23535538 -43.03133392]
[-58.64336014 -53.83288193]
[-69.05136871 -64.63442993]
[-79.45937347 -75.43597412]
[-89.86737823 -86.23751831]
[-100.27538300 -97.03906250]
[-110.68339539 -107.84061432]
[-121.09140015 -118.64215851]
[-131.49940491 -129.44371033]
[-147.06951904 -129.90133667]
[-157.47084045 -141.00390625]
[-156.93861389 -155.84480286]
[-167.34661865 -166.64634705]
[-177.75462341 -177.44789124]
[-188.16262817 -188.24943542]
[-198.57063293 -199.05097961]
[-213.71777344 -203.61987305]
[-216.97715759 -218.15347290]
[-227.38516235 -228.95503235]
[-237.79316711 -239.75657654]
[-253.74223328 -241.49061584]
[-262.20852661 -255.11785889]
[-256.69744873 -270.18463135]
[-241.43659973 -275.13299561]
[-228.13282776 -266.16699219]
[-226.99162292 -250.16458130]
[-216.58361816 -239.36303711]
[-206.17561340 -228.56149292]
[-191.77291870 -224.76519775]
[-187.76908875 -209.45899963]
[-177.36108398 -198.65744019]
[-166.95307922 -187.85589600]
[-156.54507446 -177.05435181]
[-146.13706970 -166.25280762]
[-131.28663635 -166.23411560]
[-120.57756805 -155.42808533]
[-120.69786072 -139.85171509]
[-110.28985596 -129.05017090]
[-99.88184357 -118.24861908]
[-89.47383881 -107.44707489]
[-79.06583405 -96.64552307]
[-68.65782928 -85.84397888]
[-58.24982071 -75.04243469]
[-47.84181595 -64.24089050]
[-37.43380737 -53.43934250]
[-27.02580070 -42.63779449]
[-12.32421970 -44.87419128]
[1.03320658 -37.94287491]
[7.82738590 -24.31596947]
[5.26523781 -9.12578964]
[15.67324448 1.67575657]
[26.08125114 12.47730255]
[36.48925781 23.27884865]
[51.33968735 23.29753685]
[62.04875565 34.10357666]
[61.92846298 49.67994690]
[72.33647156 60.48149109]
[82.74447632 71.28303528]
[102.12313080 66.56484985]
[120.74932098 73.69634247]
[132.02180481 90.15005493]
[131.94549561 110.09466553]
[144.87359619 117.70152283]
[157.80169678 125.30838013]
[170.72978210 132.91523743]
[183.65788269 140.52209473]
[198.77812195 136.77824402]
[211.78068542 144.67684937]
[215.25668335 159.11474609]
[228.18478394 166.72160339]
[244.00256348 167.05143738]
[251.04808044 180.17430115]
[263.97616577 187.78117371]
[276.90426636 195.38803101]
[292.02450562 191.64418030]
[305.02706909 199.54277039]
[308.50308228 213.98068237]
[321.43118286 221.58753967]
[337.25946045 218.97129822]
[349.07672119 229.82173157]
[347.81777954 245.81530762]
[334.44836426 254.68313599]
[319.22436523 249.62255859]
[313.82431030 234.51562500]
[300.89620972 226.90876770]
[286.58715820 230.88198853]
[273.36785889 223.35171509]
[269.29742432 208.31611633]
[256.36932373 200.70925903]
[243.44122314 193.10240173]
[228.54815674 193.31668091]
[220.57792664 179.64970398]
[207.64982605 172.04284668]
[193.34077454 176.01606750]
[180.12147522 168.48579407]
[176.05102539 153.45019531]
[163.12292480 145.84333801]
[150.19483948 138.23648071]
[137.26673889 130.62962341]
[124.33863831 123.02276611]
[117.31568909 128.68072510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[13 83]
[14 82]
[15 81]
[18 78]
[19 77]
[20 76]
[21 75]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[87 125]
[88 124]
[89 123]
[90 122]
[91 121]
[94 118]
[95 117]
[97 115]
[98 114]
[99 113]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
