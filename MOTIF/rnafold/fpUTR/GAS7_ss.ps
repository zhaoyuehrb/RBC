%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCCCCGCCUGCCUGAGGACCCCCGCGCACCCCAGAGACGGCGCGCGCCCAGAGCGCGGGAGCCCGGAGCGCCGGGCGCCUGGGACCCCGCGGAGCCGCUGCCCAGCCCGUGGGGCUCGGCGGGAAUGCAGGCUGCGCUGUGAACCCGGGCGCCAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[91.64372253 119.45884705]
[82.01193237 111.17601013]
[67.29309845 114.06669617]
[52.57427216 116.95738220]
[38.01282501 120.55797577]
[23.64298248 124.86002350]
[9.27313900 129.16207886]
[-5.09670353 133.46412659]
[-19.46654701 137.76617432]
[-24.33149719 142.36001587]
[-29.94447708 143.58503723]
[-34.47753906 141.94476318]
[-49.00339127 145.68638611]
[-63.49227905 149.56866455]
[-77.94284058 153.59126282]
[-92.39340210 157.61384583]
[-99.86548615 162.95509338]
[-107.16326141 161.57142639]
[-121.68910980 165.31303406]
[-110.48288727 175.28401184]
[-111.09293365 190.27160645]
[-123.07246399 199.29884338]
[-137.64761353 195.75413513]
[-144.14349365 182.23365784]
[-137.80305481 168.64030457]
[-152.62290955 170.95808411]
[-167.44274902 173.27586365]
[-182.26260376 175.59364319]
[-197.08244324 177.91142273]
[-209.52131653 187.68818665]
[-223.29129028 182.01042175]
[-238.11114502 184.32820129]
[-245.06240845 198.20117188]
[-258.85589600 205.30888367]
[-274.18771362 202.91827393]
[-285.16247559 191.94856262]
[-287.56015015 176.61785889]
[-280.45880127 162.82110596]
[-266.58901978 155.86344910]
[-251.28402710 158.42024231]
[-240.42892456 169.50834656]
[-225.60906982 167.19056702]
[-214.23022461 157.57958984]
[-199.40022278 163.09158325]
[-184.58038330 160.77380371]
[-169.76052856 158.45600891]
[-154.94068909 156.13822937]
[-140.12083435 153.82044983]
[-125.43073273 150.78718567]
[-110.90487671 147.04557800]
[-96.41599274 143.16328430]
[-81.96543121 139.14070129]
[-67.51486969 135.11810303]
[-61.88664246 130.27091980]
[-52.74500656 131.16053772]
[-38.21915817 127.41891479]
[-23.76859474 123.39633179]
[-9.39875221 119.09427643]
[4.97109079 114.79222870]
[19.34093285 110.49018097]
[33.71077728 106.18813324]
[22.12634659 96.65917969]
[22.15478897 81.65920258]
[33.77527237 72.17424774]
[48.47691345 75.15113068]
[55.49217224 88.40956879]
[49.68358612 102.23854828]
[64.40241241 99.34786987]
[79.12124634 96.45718384]
[87.98451233 82.56147766]
[104.12576294 79.22857666]
[117.76796722 88.47727966]
[132.42797852 85.30171967]
[147.08798218 82.12615967]
[160.40261841 69.43900299]
[176.89115906 75.38541412]
[191.48683167 71.92617798]
[206.08250427 68.46694183]
[220.67817688 65.00770569]
[235.27384949 61.54846573]
[249.86952209 58.08922577]
[264.46517944 54.62998962]
[279.06085205 51.17074966]
[293.65652466 47.71151352]
[308.25219727 44.25227356]
[311.60189819 28.35383987]
[321.50454712 15.54626942]
[335.94400024 8.35449505]
[352.01614380 8.16842556]
[366.51306152 14.97461510]
[376.56323242 27.36903191]
[391.08908081 23.62741470]
[405.61492920 19.88579750]
[417.04885864 8.95074368]
[431.30383301 13.26876259]
[445.82968140 9.52714539]
[460.35552979 5.78552771]
[474.88137817 2.04391074]
[489.37026978 -1.83837497]
[503.82083130 -5.86096430]
[518.05944824 -10.57913589]
[532.05273438 -15.98180103]
[546.04595947 -21.38446808]
[560.03924561 -26.78713226]
[570.12640381 -38.97565079]
[584.78625488 -36.34172821]
[598.77954102 -41.74439240]
[612.77276611 -47.14706039]
[626.76605225 -52.54972458]
[640.75927734 -57.95239258]
[653.35760498 -69.29782867]
[667.74719238 -60.33258820]
[663.11578369 -44.02350616]
[646.16192627 -43.95913696]
[632.16870117 -38.55646896]
[618.17541504 -33.15380478]
[604.18218994 -27.75113869]
[590.18890381 -22.34847260]
[581.10266113 -10.54639053]
[565.44189453 -12.79387760]
[551.44866943 -7.39121151]
[537.45538330 -1.98854589]
[523.46215820 3.41411996]
[535.75018311 12.01671600]
[536.88415527 26.97378731]
[526.03363037 37.33071899]
[511.14553833 35.50205612]
[503.12393188 22.82711792]
[507.84341431 8.58959866]
[493.39285278 12.61218834]
[487.76464844 17.45936966]
[478.62298584 16.56975937]
[464.09713745 20.31137657]
[449.57128906 24.05299377]
[435.04544067 27.79461098]
[424.65048218 38.46203995]
[409.35653687 34.41164780]
[394.83068848 38.15326309]
[380.30484009 41.89488220]
[378.25814819 55.64221954]
[371.09600830 67.60421753]
[359.87484741 75.95186615]
[346.27471924 79.39411163]
[332.34762573 77.37741852]
[320.20791626 70.17449188]
[311.71145630 58.84794617]
[297.11578369 62.30718613]
[282.52011108 65.76642609]
[267.92443848 69.22566223]
[253.32875061 72.68489838]
[238.73307800 76.14413452]
[224.13740540 79.60337830]
[209.54173279 83.06261444]
[194.94606018 86.52185059]
[180.35038757 89.98108673]
[173.71113586 100.12965393]
[161.54194641 103.11000061]
[150.26354980 96.78617096]
[135.60353088 99.96172333]
[120.94352722 103.13728333]
[115.38011932 114.55767059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[4 67]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[12 56]
[13 55]
[14 53]
[15 52]
[16 51]
[18 50]
[19 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[31 42]
[32 41]
[72 160]
[73 159]
[74 158]
[76 155]
[77 154]
[78 153]
[79 152]
[80 151]
[81 150]
[82 149]
[83 148]
[84 147]
[85 146]
[91 139]
[92 138]
[93 137]
[95 135]
[96 134]
[97 133]
[98 132]
[99 130]
[100 129]
[101 123]
[102 122]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
