%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUCAUACGCAGCGCCCUUUGUGACACCAGGGCCCUGGUGCUUUAACUAGGGCGUUGGGACCUGUUGCCCACACAGACCGCCCUGCAGUUUCAGACUGGAGGGCGGUGGACGGCUACUCAGCGGCCCAACUCUCUCGCAGCCCUUCUCUCCGCAAA\
) } def
/len { sequence length } bind def

/coor [
[90.77106476 205.76002502]
[78.07627869 213.75016785]
[63.37129211 216.71046448]
[48.57365417 214.25488281]
[35.61300278 206.70361328]
[26.17942619 195.04138184]
[21.50307655 180.78895569]
[22.19376183 165.80487061]
[28.16141129 152.04307556]
[38.62891006 141.29736328]
[24.02431297 144.71871948]
[9.41971684 148.14009094]
[-5.18488026 151.56146240]
[-19.78947639 154.98281860]
[-34.39407349 158.40419006]
[-48.99867249 161.82556152]
[-63.60326767 165.24691772]
[-78.20786285 168.66828918]
[-84.30219269 182.81626892]
[-97.40556335 190.57223511]
[-112.38618469 189.14216614]
[-123.51890564 179.28314209]
[-138.12350464 182.70451355]
[-152.72810364 186.12588501]
[-167.26132202 189.83877563]
[-181.71733093 193.84173584]
[-196.17333984 197.84468079]
[-210.62936401 201.84764099]
[-225.08537292 205.85058594]
[-239.54139709 209.85353088]
[-250.64820862 221.91879272]
[-266.58911133 218.06909180]
[-270.96542358 202.26467896]
[-259.27520752 190.76376343]
[-243.54434204 195.39752197]
[-229.08833313 191.39457703]
[-214.63230896 187.39161682]
[-200.17630005 183.38867188]
[-185.72027588 179.38571167]
[-171.26426697 175.38276672]
[-168.15098572 171.69412231]
[-162.66618347 169.95590210]
[-156.14945984 171.52128601]
[-141.54487610 168.09991455]
[-126.94027710 164.67854309]
[-121.34487915 150.90068054]
[-108.55818176 142.96566772]
[-93.37335968 144.09466553]
[-81.62923431 154.06369019]
[-67.02463531 150.64231873]
[-52.42003632 147.22096252]
[-37.81544113 143.79959106]
[-23.21084404 140.37821960]
[-8.60624695 136.95686340]
[5.99834967 133.53549194]
[20.60294724 130.11412048]
[35.20754242 126.69275665]
[49.13644028 121.12626648]
[62.07650757 113.53978729]
[75.01657104 105.95330811]
[74.34064484 82.44540405]
[95.02054596 63.84493256]
[89.45404816 49.91603470]
[83.88755798 35.98714066]
[78.32106781 22.05824280]
[63.41164780 17.34197617]
[55.06559753 4.11785173]
[57.22366714 -11.37010288]
[68.86688232 -21.80895042]
[84.49767303 -22.26978493]
[96.73565674 -12.53501511]
[99.80243683 2.79889798]
[92.24996185 16.49175072]
[97.81645966 30.42064667]
[103.38294983 44.34954453]
[108.94944000 58.27844238]
[123.90142059 59.47776794]
[131.61697388 46.61425018]
[139.33255005 33.75073242]
[147.04811096 20.88721657]
[154.76367188 8.02369785]
[162.47923279 -4.83981895]
[170.19479370 -17.70333672]
[177.91035461 -30.56685448]
[178.37350464 -46.38127899]
[191.55531311 -53.31593704]
[199.27087402 -66.17945099]
[206.98643494 -79.04296875]
[214.70199585 -91.90648651]
[222.41755676 -104.77000427]
[225.37960815 -121.46319580]
[242.24038696 -123.23805237]
[248.61341858 -107.52751160]
[235.28108215 -97.05444336]
[227.56552124 -84.19092560]
[219.84994507 -71.32740784]
[212.13438416 -58.46389008]
[204.41882324 -45.60037231]
[204.50755310 -30.70603180]
[190.77388000 -22.85128975]
[183.05831909 -9.98777294]
[175.34275818 2.87574434]
[167.62718201 15.73926163]
[159.91162109 28.60277939]
[152.19606018 41.46629715]
[144.48049927 54.32981491]
[136.76493835 67.19332886]
[141.62796021 81.38315582]
[155.61184692 86.81000519]
[169.59573364 92.23686218]
[185.26036072 90.01646423]
[194.32620239 101.83423615]
[208.31008911 107.26109314]
[222.29399109 112.68795013]
[236.27787781 118.11480713]
[233.02227783 103.47236633]
[242.27978516 91.66989136]
[257.27624512 91.34383392]
[267.03799438 102.73278046]
[264.42190552 117.50288391]
[251.34252930 124.84611511]
[264.71444702 131.64260864]
[278.08633423 138.43908691]
[291.45825195 145.23556519]
[304.28698730 136.79049683]
[319.62045288 135.90724182]
[333.33404541 142.82337952]
[341.73886108 155.67852783]
[342.57403564 171.01469421]
[335.61495972 184.70652771]
[322.73352051 193.07101440]
[307.39483643 193.85812378]
[293.72485352 186.85615540]
[285.40078735 173.94857788]
[284.66177368 158.60746765]
[271.28985596 151.81098938]
[257.91796875 145.01451111]
[244.54605103 138.21801758]
[230.85101318 132.09869385]
[216.86712646 126.67184448]
[202.88323975 121.24498749]
[188.89933777 115.81813049]
[174.23493958 118.42669678]
[164.16888428 106.22075653]
[150.18499756 100.79389954]
[136.20109558 95.36704254]
[125.43453217 120.85570526]
[102.04561615 129.21588135]
[82.60305023 118.89337921]
[69.66298676 126.47985840]
[56.72291946 134.06632996]
[71.71202850 134.63786316]
[85.52083588 140.49591064]
[96.34866333 150.87657166]
[102.78353882 164.42620850]
[103.98633575 179.37789917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 57]
[11 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 49]
[22 45]
[23 44]
[24 43]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[58 151]
[59 150]
[60 149]
[62 76]
[63 75]
[64 74]
[65 73]
[77 107]
[78 106]
[79 105]
[80 104]
[81 103]
[82 102]
[83 101]
[84 100]
[86 98]
[87 97]
[88 96]
[89 95]
[90 94]
[108 146]
[109 145]
[110 144]
[112 142]
[113 141]
[114 140]
[115 139]
[121 138]
[122 137]
[123 136]
[124 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
