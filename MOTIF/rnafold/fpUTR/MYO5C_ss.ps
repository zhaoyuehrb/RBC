%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCGGGAACGGGAACAGGAGGCCGUUGGAAAACUUUGGGCAAGAUGGCCCGGCGGUGAUUUCCGCGGCGGUCUCUCCUGCGCCCGGCCUCUGCGGCGCAGGCCCAGCCCCCGAGCCUCGCACGUUCGGCAGCCCCGGCCUGGCCCCGGCCCCUCCUGCCC\
) } def
/len { sequence length } bind def

/coor [
[83.23933411 358.02737427]
[76.63384247 344.33666992]
[75.77536774 329.16000366]
[80.79482269 314.81170654]
[90.92677307 303.47979736]
[104.62617493 296.89230347]
[103.75934601 281.91738892]
[102.89251709 266.94244385]
[91.63324738 257.25924683]
[90.54084015 242.08488464]
[100.77381897 230.34077454]
[99.90699005 215.36584473]
[99.04016113 200.39091492]
[98.17333984 185.41598511]
[86.91407013 175.73277283]
[85.82166290 160.55841064]
[96.05464172 148.81431580]
[95.18781281 133.83938599]
[94.32098389 118.86444855]
[84.95249939 107.14985657]
[70.53446198 103.01221466]
[56.11642075 98.87456512]
[41.69838333 94.73691559]
[27.28034210 90.59926605]
[12.86230278 86.46161652]
[-1.55573714 82.32397461]
[-15.97377682 78.18632507]
[-30.46888161 74.32731628]
[-45.03566360 70.74837494]
[-59.60245132 67.16944122]
[-74.16923523 63.59049988]
[-88.73601532 60.01156235]
[-103.30280304 56.43262482]
[-117.93585968 53.13508987]
[-132.62974548 50.12017822]
[-147.32362366 47.10527039]
[-162.04588318 44.23209763]
[-176.79515076 41.50093460]
[-191.54441833 38.76977158]
[-206.29367065 36.03860474]
[-221.04293823 33.30744171]
[-235.79220581 30.57627869]
[-248.67185974 39.73542404]
[-264.24151611 37.02227402]
[-273.26397705 24.04649925]
[-270.38638306 8.50639343]
[-257.31594849 -0.37837547]
[-241.80711365 2.66337013]
[-233.06103516 15.82701588]
[-218.31176758 18.55817986]
[-203.56251526 21.28934479]
[-188.81324768 24.02050781]
[-174.06398010 26.75167274]
[-159.31472778 29.48283577]
[-152.13066101 27.59955788]
[-144.30871582 32.41138077]
[-129.61483765 35.42629242]
[-114.92094421 38.44120026]
[-110.47599030 36.57837677]
[-104.81059265 37.52210617]
[-99.72386169 41.86584091]
[-85.15708160 45.44477844]
[-70.59029388 49.02371597]
[-56.02350998 52.60265350]
[-41.45672607 56.18159103]
[-26.88994408 59.76052856]
[-22.37650299 58.07038879]
[-16.75168228 59.23174286]
[-11.83612919 63.76828384]
[2.58191085 67.90592957]
[16.99995041 72.04357910]
[31.41798973 76.18122864]
[45.83602905 80.31887817]
[60.25407028 84.45652771]
[74.67211151 88.59416962]
[89.09014893 92.73181915]
[88.78755951 86.85945129]
[91.06928253 80.50977325]
[96.09941864 74.69510651]
[101.19952393 60.58876419]
[106.29962921 46.48242188]
[111.39973450 32.37607956]
[116.49983978 18.26973534]
[121.59994507 4.16339159]
[126.70005035 -9.94295216]
[131.66398621 -24.09778786]
[136.49127197 -38.29980469]
[141.31857300 -52.50181961]
[140.69123840 -69.44415283]
[156.79779053 -74.73708344]
[166.34260559 -60.72519684]
[155.52058411 -47.67452240]
[150.69328308 -33.47250748]
[145.86599731 -19.27049446]
[146.69477844 -11.89007473]
[140.80639648 -4.84284735]
[135.70628357 9.26349640]
[130.60618591 23.36984062]
[125.50607300 37.47618484]
[120.40597534 51.58252716]
[115.30587006 65.68887329]
[110.20576477 79.79521179]
[118.99913788 91.94744110]
[133.99287415 91.51384735]
[148.98660278 91.08024597]
[160.73323059 78.14832306]
[177.86064148 77.69774628]
[189.79176331 89.51978302]
[204.77435303 88.79730225]
[215.36982727 77.37916565]
[230.57458496 76.85990143]
[241.39474487 87.03142548]
[256.37734985 86.30894470]
[271.35992432 85.58646393]
[286.34252930 84.86398315]
[301.32510376 84.14150238]
[316.30770874 83.41902924]
[325.62603760 70.86104584]
[340.84829712 67.28108978]
[354.78704834 74.36949158]
[360.86080933 88.77933502]
[356.20172119 103.70672607]
[343.00970459 112.10340881]
[327.51358032 110.00473022]
[317.03018188 98.40161896]
[302.04757690 99.12409973]
[287.06500244 99.84657288]
[272.08239746 100.56905365]
[257.09982300 101.29153442]
[242.11723328 102.01401520]
[232.32597351 113.17944336]
[217.14178467 114.12557220]
[205.49684143 103.77989197]
[190.51425171 104.50237274]
[183.25123596 115.17922211]
[170.97653198 119.77802277]
[158.10893250 116.40323639]
[149.42019653 106.07398224]
[134.42646790 106.50757599]
[119.43273163 106.94116974]
[109.29591370 117.99761963]
[110.16274261 132.97254944]
[111.02957153 147.94747925]
[122.54928589 158.43241882]
[123.21504974 173.63148499]
[113.14826965 184.54914856]
[114.01509857 199.52409363]
[114.88192749 214.49902344]
[115.74874878 229.47395325]
[127.26846313 239.95889282]
[127.93422699 255.15795898]
[117.86744690 266.07562256]
[118.73427582 281.05056763]
[119.60110474 296.02548218]
[133.96910095 300.98828125]
[145.34089661 311.07543945]
[151.98237610 324.74871826]
[152.88078308 339.92309570]
[147.89909363 354.28454590]
[137.79699707 365.64306641]
[124.11497498 372.26657104]
[108.93943787 373.14498901]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 154]
[7 153]
[8 152]
[11 149]
[12 148]
[13 147]
[14 146]
[17 143]
[18 142]
[19 141]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[33 61]
[34 58]
[35 57]
[36 56]
[37 54]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[79 102]
[80 101]
[81 100]
[82 99]
[83 98]
[84 97]
[85 96]
[86 94]
[87 93]
[88 92]
[103 140]
[104 139]
[105 138]
[108 134]
[109 133]
[112 130]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
