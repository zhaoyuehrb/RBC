%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGUGGCUGGGCCAUUGUUUCUCUCUGCUGCCGGAGCUCCAGGUCUACCCUUCACUGCUCUGUGUCCUCAGCGUGUGUGGCUUCGUGACCUGAAGAUACUGGGAAAUCCAUAGCUAAG\
) } def
/len { sequence length } bind def

/coor [
[70.55073547 396.22784424]
[56.16638565 390.09396362]
[49.13624954 376.12576294]
[52.77974701 360.91854858]
[65.37652588 351.65274048]
[66.16156769 336.67330933]
[66.94660950 321.69384766]
[67.73164368 306.71441650]
[68.51668549 291.73498535]
[69.30172729 276.75552368]
[69.89062500 261.76708984]
[70.28327942 246.77223206]
[57.39391327 254.44454956]
[43.26674271 249.40242004]
[38.14797592 235.30284119]
[45.75017548 222.37200928]
[60.55958939 219.98844910]
[71.83533478 229.88130188]
[74.18185425 215.06597900]
[76.52836609 200.25065613]
[78.87488556 185.43531799]
[81.22140503 170.61999512]
[83.56791687 155.80467224]
[85.91443634 140.98934937]
[74.22990417 134.84869385]
[64.93557739 125.47579193]
[58.89352036 113.73997498]
[56.66413498 100.72975922]
[41.84880829 98.38324738]
[27.03348351 96.03672791]
[13.26145649 104.26538849]
[-1.70745325 98.49378967]
[-6.39037848 83.14942169]
[2.80501986 70.00315857]
[18.82481956 69.13969421]
[29.38000107 81.22140503]
[44.19532776 83.56791687]
[59.01065063 85.91443634]
[70.06757355 68.65386963]
[87.81967163 58.40469360]
[108.29621887 57.45940018]
[113.67173767 43.45569611]
[119.04725647 29.45198822]
[124.42277527 15.44828224]
[129.79829407 1.44457555]
[135.17381287 -12.55913067]
[124.21194458 -23.05260658]
[118.11914062 -36.90615463]
[117.79535675 -51.99617767]
[123.25878906 -66.02252960]
[133.64788818 -76.85910797]
[147.35702515 -82.87615204]
[162.28465271 -83.18525696]
[167.66017151 -97.18896484]
[173.03569031 -111.19267273]
[178.41120911 -125.19638062]
[183.60296631 -139.26925659]
[188.61006165 -153.40887451]
[193.61717224 -167.54849243]
[190.93025208 -183.13987732]
[202.47221375 -192.55436707]
[207.47930908 -206.69398499]
[212.48641968 -220.83360291]
[205.45712280 -234.98863220]
[210.57490540 -249.94136047]
[224.80345154 -256.82058716]
[239.70123291 -251.54501343]
[246.42965698 -237.24452209]
[240.99685669 -222.40335083]
[226.62603760 -215.82650757]
[221.61892700 -201.68688965]
[216.61183167 -187.54725647]
[219.65687561 -172.96723938]
[207.75679016 -162.54139709]
[202.74967957 -148.40176392]
[197.74258423 -134.26214600]
[198.48500061 -126.81505585]
[192.41491699 -119.82086182]
[187.03939819 -105.81715393]
[181.66386414 -91.81344604]
[176.28834534 -77.80973816]
[187.17489624 -67.59150696]
[193.33659363 -53.94676208]
[193.80610657 -38.94195175]
[188.48077393 -24.86259079]
[178.14295959 -13.86517239]
[164.34529114 -7.64685869]
[149.17752075 -7.18361187]
[143.80200195 6.82009459]
[138.42648315 20.82380104]
[133.05096436 34.82750702]
[127.67544556 48.83121490]
[122.29992676 62.83491898]
[131.91264343 70.67231750]
[138.91209412 80.91130066]
[142.72511292 92.71342468]
[143.03945923 105.11222839]
[139.82937622 117.09240723]
[133.35774231 127.67292023]
[124.15451813 135.98735046]
[112.97332001 141.35484314]
[100.72975922 143.33586121]
[98.38324738 158.15118408]
[96.03672791 172.96652222]
[93.69020844 187.78184509]
[91.34369659 202.59716797]
[88.99717712 217.41249084]
[86.65065765 232.22781372]
[85.27813721 247.16488647]
[84.88548279 262.15975952]
[87.81694794 270.94445801]
[84.28116608 277.54055786]
[83.49612427 292.52001953]
[82.71109009 307.49945068]
[81.92604828 322.47891235]
[81.14100647 337.45834351]
[80.35597229 352.43777466]
[91.91520691 362.96954346]
[93.94915771 378.47430420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[11 110]
[12 109]
[18 108]
[19 107]
[20 106]
[21 105]
[22 104]
[23 103]
[24 102]
[28 38]
[29 37]
[30 36]
[41 93]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[53 81]
[54 80]
[55 79]
[56 78]
[57 76]
[58 75]
[59 74]
[61 72]
[62 71]
[63 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
