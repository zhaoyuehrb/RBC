%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAGAGGCAGAGAUUGGAGGUUCAGGCAGUGACGUAACUUGCUGCCUUAGGUGGCCUUCCGCUCUGGCGGCUGUCGCGACGGGGGUUCAGGGAAUAUUUACUGGGCCUCUCCGCUCCCUCUGCUCUUGGAGGUGCC\
) } def
/len { sequence length } bind def

/coor [
[79.48205566 405.81613159]
[74.05840302 391.64050293]
[74.12574005 376.46289062]
[79.67494965 362.33593750]
[89.95555115 351.17019653]
[103.57718658 344.47576904]
[102.24211121 329.53527832]
[100.90702820 314.59481812]
[99.57195282 299.65435791]
[98.23686981 284.71389771]
[94.47817230 278.27963257]
[97.04228210 269.42626953]
[96.04039001 254.45977783]
[95.03849792 239.49327087]
[94.03661346 224.52677917]
[93.03472137 209.56027222]
[90.55750275 206.94468689]
[89.26606750 202.96865845]
[89.79967499 198.22282410]
[92.50000000 193.56675720]
[92.50000000 178.56675720]
[92.50000000 163.56675720]
[92.50000000 148.56675720]
[78.89210510 144.37834167]
[67.05604553 136.46472168]
[57.98535538 125.49018860]
[52.44145203 112.37596130]
[50.88969803 98.22288513]
[36.15790176 95.39903259]
[21.42610168 92.57518005]
[6.69430447 89.75133514]
[-8.03749371 86.92748260]
[-22.76929092 84.10363007]
[-37.50108719 81.27977753]
[-52.23288727 78.45593262]
[-66.96468353 75.63208008]
[-79.90167999 84.71006012]
[-95.45397186 81.89906311]
[-104.39466858 68.86681366]
[-101.41940308 53.34510803]
[-88.29335785 44.54270172]
[-72.80397797 47.68190384]
[-64.14083099 60.90028381]
[-49.40903854 63.72413254]
[-34.67723846 66.54798126]
[-19.94544029 69.37183380]
[-5.21364307 72.19568634]
[9.51815510 75.01953125]
[24.24995232 77.84338379]
[38.98175049 80.66723633]
[53.71355057 83.49108124]
[58.98859406 72.92520905]
[66.63201904 63.92288971]
[76.20243835 57.00400162]
[87.14714813 52.56811142]
[85.47953796 37.66109848]
[83.81193542 22.75408173]
[82.14433289 7.84706736]
[80.47672272 -7.05994749]
[69.01921082 -14.23234844]
[63.88368225 -26.52495384]
[66.74867249 -39.33564377]
[76.34196472 -48.00782776]
[75.00688934 -62.94829559]
[73.67180634 -77.88876343]
[72.33673096 -92.82923126]
[62.46812057 -105.92665863]
[69.12471008 -120.91404724]
[85.45877075 -122.37365723]
[94.66722107 -108.80396271]
[87.27719879 -94.16430664]
[88.61227417 -79.22383881]
[89.94735718 -64.28337097]
[91.28243256 -49.34290695]
[104.62039948 -39.15903473]
[106.54273987 -22.14930534]
[95.38373566 -8.72755337]
[97.05134583 6.17946148]
[98.71894836 21.08647728]
[100.38655853 35.99349213]
[102.05416107 50.90050507]
[115.27777863 53.29272461]
[127.35895538 59.17760849]
[137.39428711 68.11509705]
[144.63336182 79.43686676]
[159.05535889 75.31301880]
[173.47735596 71.18917084]
[187.89933777 67.06531525]
[202.32133484 62.94146729]
[216.74333191 58.81761551]
[231.16531372 54.69376755]
[245.58731079 50.56991577]
[260.00930786 46.44606400]
[274.43130493 42.32221603]
[278.08013916 27.40304565]
[288.71127319 16.31818199]
[303.46502686 12.04939651]
[318.37268066 15.74497223]
[329.42416382 26.41081619]
[333.64669800 41.17787170]
[329.90438843 56.07387161]
[319.20397949 67.09187317]
[304.42373657 71.26808167]
[289.53955078 67.47912598]
[278.55514526 56.74420547]
[264.13314819 60.86805725]
[249.71116638 64.99190521]
[235.28916931 69.11576080]
[220.86717224 73.23960876]
[206.44519043 77.36345673]
[192.02319336 81.48731232]
[177.60119629 85.61116028]
[163.17921448 89.73500824]
[148.75721741 93.85886383]
[147.48539734 112.65373993]
[139.23591614 129.58923340]
[125.22098541 142.17678833]
[107.50000000 148.56675720]
[107.50000000 163.56675720]
[107.50000000 178.56675720]
[107.50000000 193.56675720]
[108.00122833 208.55838013]
[109.00311279 223.52488708]
[110.00500488 238.49139404]
[111.00689697 253.45788574]
[112.00878143 268.42440796]
[113.17733765 283.37881470]
[114.51242065 298.31927490]
[115.84749603 313.25973511]
[117.18257904 328.20019531]
[118.51765442 343.14068604]
[133.11041260 347.31387329]
[145.20787048 356.47991943]
[153.17391968 369.39913940]
[155.93124390 384.32434082]
[153.10691833 399.23699951]
[145.08291626 412.12033081]
[132.94441223 421.23193359]
[118.33305359 425.33953857]
[103.22489166 423.88766479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 131]
[7 130]
[8 129]
[9 128]
[10 127]
[12 126]
[13 125]
[14 124]
[15 123]
[16 122]
[20 121]
[21 120]
[22 119]
[23 118]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[55 81]
[56 80]
[57 79]
[58 78]
[59 77]
[63 74]
[64 73]
[65 72]
[66 71]
[85 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
