%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUCAGCCUUGCCUCUCCCCCUCUUGCUUUAUCUCCUCAUUUCUGUGUGCAGGCGAGCUUCUUGGCCUAAGGGCAGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[80.92928314 316.93588257]
[64.63084412 315.12127686]
[58.30187225 299.99264526]
[68.45307922 287.11300659]
[70.11286926 272.20510864]
[71.77265930 257.29721069]
[62.29905701 245.86102295]
[63.76995087 230.71867371]
[75.82951355 220.85942078]
[77.48930359 205.95153809]
[79.14909363 191.04365540]
[76.70079041 183.87634277]
[81.15559387 175.61924744]
[83.36511993 160.78286743]
[85.57464600 145.94648743]
[87.78417206 131.11012268]
[75.51035309 122.74473572]
[68.07336426 109.88715363]
[66.94204712 95.07680511]
[72.33985138 81.23880768]
[83.20067596 71.10624695]
[97.37945557 66.68035126]
[99.58898163 51.84397888]
[86.60572815 41.79256058]
[80.43273163 26.67823410]
[82.64184570 10.59598255]
[92.54740906 -2.14710760]
[107.41519165 -8.18534660]
[109.07498932 -23.09323311]
[110.73477936 -38.00112152]
[112.39456940 -52.90900803]
[105.64604950 -58.69272614]
[101.91445160 -66.65355682]
[101.78897858 -75.34884644]
[105.21308899 -83.23820496]
[111.50834656 -88.95635223]
[119.50730133 -91.54930115]
[123.34494781 -106.05007172]
[127.18258667 -120.55084991]
[130.75161743 -135.12007141]
[134.05081177 -149.75274658]
[137.35000610 -164.38542175]
[128.69551086 -177.60946655]
[132.00842285 -193.06263733]
[145.32322693 -201.57682800]
[160.74049377 -198.10072327]
[169.11344910 -184.69665527]
[165.47453308 -169.31698608]
[151.98268127 -161.08622742]
[148.68348694 -146.45355225]
[145.38429260 -131.82087708]
[147.02447510 -124.42666626]
[141.68336487 -116.71321106]
[137.84571838 -102.21243286]
[134.00808716 -87.71165466]
[142.20848083 -67.79313660]
[127.30245209 -51.24921799]
[125.64266205 -36.34133148]
[123.98287201 -21.43344307]
[122.32308197 -6.52555609]
[133.92703247 0.91615790]
[141.18322754 12.71532917]
[142.60267639 26.56122017]
[137.84616089 39.71260071]
[127.80300903 49.54045868]
[114.42535400 54.05350494]
[112.21582794 68.88987732]
[124.48964691 77.25526428]
[131.92663574 90.11284637]
[133.05795288 104.92319489]
[127.66014862 118.76119232]
[116.79932404 128.89375305]
[102.62054443 133.31964111]
[100.41101837 148.15602112]
[98.20149231 162.99240112]
[95.99196625 177.82876587]
[94.05698395 192.70344543]
[92.39719391 207.61132812]
[90.73740387 222.51921082]
[100.33314514 234.78947449]
[98.43750763 249.88455200]
[86.68054962 258.95700073]
[85.02075958 273.86489868]
[83.36096954 288.77279663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[9 79]
[10 78]
[11 77]
[13 76]
[14 75]
[15 74]
[16 73]
[22 67]
[23 66]
[28 60]
[29 59]
[30 58]
[31 57]
[37 55]
[38 54]
[39 53]
[40 51]
[41 50]
[42 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
