%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGAAGUGACGCGAGGCUCUGCGGAGACCAGGAGUCAGACUGUAGGACGACCUCGGGUCCCACGUGUCCCCGGUACUCGCCGGCCGGAGCCCCCGGCUUCCCGGGGCCGGGGGACCUUAGCGGCACCCACACACAGCCUACUUUCCAAGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[47.59724426 408.83578491]
[51.00243759 423.60668945]
[49.14723587 438.65109253]
[42.25566101 452.15228271]
[31.15990829 462.47991943]
[17.19984055 468.38690186]
[2.06120634 469.15991211]
[-12.42793179 464.70562744]
[-24.51794052 455.56192017]
[-32.74888992 442.83291626]
[-36.12685776 428.05572510]
[-34.24393082 413.01477051]
[-27.32748985 399.52630615]
[-16.21272278 389.21914673]
[-2.24179411 383.33792114]
[12.89823914 382.59280396]
[17.30599403 368.25503540]
[21.71374702 353.91726685]
[26.12150192 339.57946777]
[30.52925491 325.24169922]
[34.93700790 310.90393066]
[39.34476471 296.56616211]
[43.75251770 282.22839355]
[47.87433624 267.80581665]
[51.70858383 253.30413818]
[55.54283524 238.80247498]
[59.37708282 224.30079651]
[63.21133423 209.79911804]
[55.52266693 197.09400940]
[59.20455933 182.33262634]
[72.58299255 174.35418701]
[76.41723633 159.85252380]
[80.25148773 145.35084534]
[69.09838867 138.62374878]
[60.08789825 129.21861267]
[53.84476852 117.78756714]
[50.80187225 105.12319946]
[51.17019272 92.10359955]
[54.92419815 79.63151550]
[42.34955597 71.45359802]
[29.77491570 63.27567291]
[17.11959457 55.22316742]
[4.38484430 47.29687500]
[-8.34990597 39.37057877]
[-24.15456390 38.64713669]
[-30.87126541 25.35295868]
[-43.60601425 17.42666626]
[-56.34076691 9.50037193]
[-69.07551575 1.57407832]
[-83.40119171 7.53684664]
[-98.48789978 3.90766406]
[-108.53448486 -7.91797400]
[-109.67783356 -23.39286995]
[-101.47830963 -36.56660843]
[-87.08879089 -42.37361908]
[-72.04234314 -38.58098984]
[-62.12463379 -26.64706039]
[-61.14922333 -11.16067219]
[-48.41447067 -3.23437858]
[-35.67972183 4.69191504]
[-22.94497108 12.61820889]
[-8.05118847 12.77470970]
[-0.42361230 26.63582993]
[12.31113815 34.56212234]
[25.04588890 42.48841858]
[32.42671585 43.35774231]
[37.95283890 50.70103073]
[50.52747726 58.87895203]
[63.10211945 67.05687714]
[74.20119476 56.22690964]
[88.45626831 49.13758087]
[104.60682678 46.69685745]
[103.71260071 31.72353363]
[102.81837463 16.75021362]
[101.92414856 1.77689147]
[92.44578552 -11.60565948]
[99.54113770 -26.39038086]
[115.91111755 -27.36801720]
[124.71569061 -13.53286171]
[116.89746857 0.88266456]
[117.79169464 15.85598660]
[118.68592072 30.82930756]
[119.58014679 45.80262756]
[132.90438843 52.69208908]
[145.63914490 44.76579666]
[158.37388611 36.83950043]
[171.10864258 28.91320801]
[183.68327332 20.73528671]
[196.09283447 12.30896950]
[208.50239563 3.88265300]
[220.74197388 -4.78872681]
[232.80671692 -13.70174217]
[244.87147522 -22.61475754]
[256.93621826 -31.52777290]
[269.00097656 -40.44078827]
[281.06570435 -49.35380554]
[293.13046265 -58.26681900]
[305.19522095 -67.17983246]
[317.25994873 -76.09284973]
[329.32470703 -85.00586700]
[335.37588501 -100.24776459]
[351.63839722 -102.36021423]
[361.38278198 -89.17010498]
[354.58483887 -74.24629211]
[338.23773193 -72.94111633]
[326.17297363 -64.02809906]
[314.10821533 -55.11508560]
[302.04348755 -46.20207214]
[289.97872925 -37.28905487]
[277.91397095 -28.37603951]
[265.84924316 -19.46302414]
[253.78448486 -10.55000973]
[241.71974182 -1.63699389]
[229.65498352 7.27602148]
[228.06871033 11.83345509]
[223.57145691 15.41940212]
[216.92871094 16.29221344]
[204.51914978 24.71853065]
[192.10960388 33.14484787]
[190.34338379 37.63561249]
[185.70712280 41.03992844]
[179.03492737 41.64795685]
[166.30018616 49.57425308]
[153.56542969 57.50054550]
[140.83068848 65.42684174]
[146.17230225 73.59111786]
[149.91494751 82.53968048]
[151.95239258 91.96493530]
[152.23658752 101.54692841]
[150.77867126 110.96421051]
[147.64788818 119.90460205]
[142.96855164 128.07556152]
[136.91531372 135.21372986]
[129.70660400 141.09342957]
[121.59690857 145.53376770]
[112.86772919 148.40415955]
[103.81785583 149.62811279]
[94.75315857 149.18508911]
[90.91891479 163.68676758]
[87.08466339 178.18844604]
[94.77146912 191.73654175]
[90.67641449 206.38867188]
[77.71300507 213.63337708]
[73.87875366 228.13505554]
[70.04450989 242.63671875]
[66.21025848 257.13839722]
[62.37600708 271.64007568]
[63.75544739 278.19635010]
[61.86379242 283.62829590]
[58.09029007 286.63613892]
[53.68253708 300.97390747]
[49.27478027 315.31167603]
[44.86702728 329.64947510]
[40.45927429 343.98724365]
[36.05151749 358.32501221]
[31.64376450 372.66278076]
[27.23601151 387.00054932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 157]
[17 156]
[18 155]
[19 154]
[20 153]
[21 152]
[22 151]
[23 150]
[24 147]
[25 146]
[26 145]
[27 144]
[28 143]
[31 140]
[32 139]
[33 138]
[39 69]
[40 68]
[41 67]
[42 65]
[43 64]
[44 63]
[46 61]
[47 60]
[48 59]
[49 58]
[72 83]
[73 82]
[74 81]
[75 80]
[84 125]
[85 124]
[86 123]
[87 122]
[88 119]
[89 118]
[90 117]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
