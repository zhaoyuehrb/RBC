%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGAGGGGCGGGGCGUGUGGAGGCCGGGACGGCGCCCCCGGCCGGCGGUGAGGCCGGCUCAGCGCGGAGCAGCUCAGUGCCCCCCGCGCCCCGCUCCGGCAGCUCCACGCUCGCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[77.32484436 200.60768127]
[69.72348785 186.07664490]
[78.73435974 172.37495422]
[79.11130524 157.37969971]
[79.48825836 142.38442993]
[79.86521149 127.38916779]
[74.13606262 102.87945557]
[86.36928558 88.16194916]
[80.15364838 74.51036072]
[73.93801117 60.85877228]
[67.72238159 47.20718384]
[61.50674820 33.55559540]
[55.29111481 19.90400505]
[49.07548141 6.25241470]
[42.85984421 -7.39917469]
[36.64421082 -21.05076408]
[30.42857933 -34.70235443]
[24.21294403 -48.35394287]
[17.99731064 -62.00553131]
[11.78167725 -75.65711975]
[5.30560064 -82.26071930]
[5.58619261 -89.73076630]
[-0.28441235 -103.53424835]
[-18.81048203 -108.87316895]
[-26.82558060 -129.22970581]
[-41.48460388 -132.40980530]
[-56.14362335 -135.58992004]
[-70.80264282 -138.77001953]
[-85.46166992 -141.95013428]
[-100.12068939 -145.13023376]
[-114.77970886 -148.31034851]
[-126.26441193 -137.87573242]
[-141.69267273 -136.21794128]
[-155.13203430 -143.97445679]
[-161.41474915 -158.16273499]
[-158.12503052 -173.32707214]
[-146.52780151 -183.63648987]
[-131.08245850 -185.12680054]
[-117.72805023 -177.22496033]
[-111.59960175 -162.96936035]
[-96.94058228 -159.78926086]
[-82.28156281 -156.60914612]
[-67.62253571 -153.42904663]
[-52.96351624 -150.24894714]
[-38.30449677 -147.06883240]
[-23.64547348 -143.88873291]
[-11.29248428 -152.39776611]
[-9.03910065 -167.22753906]
[-6.78571701 -182.05731201]
[-4.53233337 -196.88708496]
[-10.10868931 -211.69299316]
[-0.54723227 -223.11349487]
[1.70615160 -237.94326782]
[3.95953536 -252.77304077]
[6.21291924 -267.60281372]
[-2.65314651 -275.72155762]
[-6.41026115 -287.01403809]
[-4.22016525 -298.58917236]
[3.24834228 -307.54324341]
[14.01752377 -311.68826294]
[17.01317406 -326.38607788]
[20.00882339 -341.08389282]
[23.00447273 -355.78173828]
[14.07815170 -368.82382202]
[17.07052231 -384.34225464]
[30.20626640 -393.13018799]
[45.69218063 -389.97390747]
[54.34074402 -376.74597168]
[51.02091980 -361.29431152]
[37.70230103 -352.78607178]
[34.70664978 -338.08825684]
[31.71100044 -323.39044189]
[28.71534920 -308.69259644]
[39.72571182 -294.17034912]
[36.68466949 -275.88085938]
[21.04269600 -265.34942627]
[18.78931236 -250.51966858]
[16.53592682 -235.68988037]
[14.28254414 -220.86010742]
[20.02007675 -207.11492920]
[10.29744339 -194.63371277]
[8.04405880 -179.80392456]
[5.79067516 -164.97415161]
[3.53729153 -150.14437866]
[21.56346893 -131.06893921]
[13.51906490 -109.40485382]
[19.38966942 -95.60137177]
[25.43326759 -81.87275696]
[31.64890099 -68.22116852]
[37.86453247 -54.56957626]
[44.08016968 -40.91798782]
[50.29580307 -27.26639748]
[56.51143646 -13.61480808]
[62.72706985 0.03678117]
[68.94270325 13.68837070]
[75.15833282 27.33996010]
[81.37397003 40.99155045]
[87.58960724 54.64313889]
[93.80523682 68.29473114]
[100.02087402 81.94631958]
[120.01470184 83.36731720]
[133.42680359 106.18263245]
[143.96655273 116.85566711]
[154.63958740 127.39541626]
[165.44422913 137.80021667]
[176.24885559 148.20501709]
[192.25161743 149.34146118]
[201.22155762 162.64257812]
[196.27770996 177.90489197]
[181.21258545 183.42044067]
[167.58283997 174.95820618]
[165.84405518 159.00965881]
[155.03942871 148.60485840]
[144.23478699 138.20005798]
[137.15530396 135.79980469]
[133.29351807 127.39541626]
[122.75376892 116.72238159]
[115.78044891 119.48331451]
[101.83380127 125.00518799]
[94.86047363 127.76612091]
[94.48352051 142.76138306]
[94.10657501 157.75663757]
[93.72962189 172.75190735]
[102.04067993 186.88903809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 123]
[4 122]
[5 121]
[6 120]
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[22 87]
[23 86]
[25 46]
[26 45]
[27 44]
[28 43]
[29 42]
[30 41]
[31 40]
[47 84]
[48 83]
[49 82]
[50 81]
[52 79]
[53 78]
[54 77]
[55 76]
[60 73]
[61 72]
[62 71]
[63 70]
[102 117]
[103 116]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
