%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCACUGGGCUUGGAGUCAGUGGCAAUAACCAGGGGCAAUAACCAGGCGUGUCCCAGGGGGGAGCCCCGCUCUGCAGCCCUGUGCGCCGUAGAGAGCUGGACUUAGGCUGGCAGC\
) } def
/len { sequence length } bind def

/coor [
[268.46771240 279.04336548]
[265.97909546 272.35974121]
[265.75399780 265.17922974]
[267.84927368 258.25299072]
[257.60458374 247.29641724]
[247.35987854 236.33985901]
[233.01579285 232.32780457]
[229.24217224 216.96322632]
[218.99748230 206.00666809]
[208.75277710 195.05010986]
[198.50808716 184.09353638]
[188.26339722 173.13697815]
[177.87252808 162.31893921]
[167.33737183 151.64138794]
[156.80220032 140.96382141]
[146.26704407 130.28625488]
[135.73187256 119.60869598]
[125.19670868 108.93112946]
[116.18067169 122.42675781]
[100.56718445 128.57070923]
[83.70365906 124.58799744]
[71.75389099 111.29292297]
[56.82008362 112.70053864]
[41.88627625 114.10815430]
[32.00331497 126.44114685]
[16.28532600 128.09049988]
[4.05751419 118.07770538]
[2.57442427 102.34315491]
[12.71594620 90.22189331]
[28.46529388 88.90523529]
[40.47866058 99.17434692]
[55.41246796 97.76673126]
[70.34627533 96.35911560]
[75.85316467 82.40654755]
[65.90631866 71.17888641]
[55.95948410 59.95122528]
[46.01264191 48.72356415]
[36.06580353 37.49590302]
[26.11896324 26.26824188]
[11.27359772 29.99298477]
[-3.59956288 26.38082695]
[-15.08277512 16.26181412]
[-20.53728104 1.96122193]
[-18.70967484 -13.23477936]
[-10.01992798 -25.83425903]
[3.53512025 -32.94194794]
[18.84061813 -32.92455292]
[32.37947464 -25.78606987]
[41.04056168 -13.16687202]
[42.83362198 2.03324413]
[37.34662247 16.32140160]
[47.29346466 27.54906273]
[57.24030304 38.77672577]
[67.18714142 50.00438690]
[77.13397980 61.23204803]
[87.08082581 72.45970917]
[104.00686646 71.70597076]
[117.62683868 79.90188599]
[121.60629272 65.43939209]
[125.58575439 50.97689056]
[129.56521606 36.51438904]
[124.90590668 20.79106522]
[136.38780212 9.08217812]
[152.19931030 13.43282700]
[156.07490540 29.36743736]
[144.02770996 40.49384689]
[140.04824829 54.95634842]
[136.06880188 69.41884613]
[132.08934021 83.88134766]
[135.87426758 98.39596558]
[146.40943909 109.07353210]
[156.94459534 119.75109100]
[167.47976685 130.42864990]
[178.01492310 141.10621643]
[188.55009460 151.78378296]
[196.92015076 155.76454163]
[199.21995544 162.89228821]
[209.46464539 173.84884644]
[219.70935059 184.80540466]
[229.95404053 195.76196289]
[240.19873047 206.71853638]
[255.27558899 211.51428223]
[258.31643677 226.09516907]
[268.56112671 237.05172729]
[278.80581665 248.00828552]
[302.27090454 252.30264282]
[308.01083374 274.73950195]
[319.88043213 283.91082764]
[331.75000000 293.08212280]
[331.78793335 278.08218384]
[342.24511719 267.32821655]
[357.23815918 266.87066650]
[368.33166504 276.96688843]
[369.28424072 291.93661499]
[359.55996704 303.35757446]
[344.62835693 304.80368042]
[354.87304688 315.76025391]
[365.11776733 326.71682739]
[375.36245728 337.67337036]
[390.96673584 336.65338135]
[403.54528809 345.94390869]
[407.15893555 361.15823364]
[400.10137939 375.11260986]
[385.70501709 381.21826172]
[370.76736450 376.59222412]
[362.34149170 363.41879272]
[364.40588379 347.91806030]
[354.16119385 336.96151733]
[343.91650391 326.00494385]
[333.67181396 315.04840088]
[322.57870483 304.95172119]
[310.70910645 295.78039551]
[298.83950806 286.60910034]
[292.54116821 289.35543823]
[285.64355469 289.95062256]
[278.86651611 288.29907227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 85]
[5 84]
[6 83]
[8 81]
[9 80]
[10 79]
[11 78]
[12 77]
[13 75]
[14 74]
[15 73]
[16 72]
[17 71]
[18 70]
[22 33]
[23 32]
[24 31]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[58 69]
[59 68]
[60 67]
[61 66]
[87 113]
[88 112]
[89 111]
[96 110]
[97 109]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
