%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGGUGAAGGUGCCCAGCAGGCUGAGGCUUGUGUGCAACCCAGAAGAGAGCUCGCUAACGCCAGCAAGAAGGUUCAGAACAGCCUGGCUUUGGAAAGGAAUUUCAUCCUGCCCACACACUGCAUAGCAGGAGGGAAGC\
) } def
/len { sequence length } bind def

/coor [
[50.75924683 157.57414246]
[60.91197586 146.53230286]
[74.29571533 139.75917053]
[89.20561218 138.11749268]
[103.74239349 141.81642151]
[116.05264282 150.38307190]
[110.81779480 136.32618713]
[105.58295441 122.26927948]
[96.06378937 126.56506348]
[84.19354248 126.37850952]
[72.17169189 120.64211273]
[58.29756927 126.34375000]
[44.42344284 132.04537964]
[30.61369324 137.90121460]
[16.87003708 143.91053772]
[13.41423988 156.97863770]
[3.19507384 165.52560425]
[-9.88927269 166.58473206]
[-21.01435852 159.99151611]
[-34.88848495 165.69314575]
[-48.76261139 171.39477539]
[-62.63673782 177.09642029]
[-76.51086426 182.79804993]
[-90.38498688 188.49967957]
[-99.97055054 201.80566406]
[-116.25722504 199.88833618]
[-122.49068451 184.72007751]
[-112.25847626 171.90469360]
[-96.08662415 174.62554932]
[-82.21249390 168.92391968]
[-68.33837128 163.22229004]
[-54.46424484 157.52066040]
[-40.59011841 151.81901550]
[-26.71599007 146.11738586]
[-20.94106102 130.36103821]
[-5.26457167 123.48542786]
[10.86071777 130.16688538]
[24.60437393 124.15756226]
[29.51243591 118.55056763]
[38.72180939 118.17125702]
[52.59593582 112.46961975]
[66.47006226 106.76799011]
[69.00902557 99.71081543]
[54.09982300 98.06285858]
[39.31934357 100.61969757]
[27.50359726 91.37912750]
[26.42306709 76.41809845]
[36.78834915 65.57554626]
[51.78284454 65.98194885]
[61.54509735 77.36835480]
[74.08694458 85.59647369]
[76.62590790 78.53930664]
[69.56417084 65.30556488]
[62.50243378 52.07182693]
[49.17932510 43.53921890]
[50.01377487 28.66800690]
[42.95203781 15.43426800]
[28.75340652 7.22872305]
[29.03088188 -9.16807652]
[43.49901581 -16.88850975]
[57.27423859 -7.99045563]
[56.18577576 8.37252903]
[63.24751282 21.60626793]
[76.06552124 29.19230843]
[75.73617554 45.01008606]
[82.79791260 58.24382782]
[89.85964966 71.47756195]
[104.85127258 70.97634125]
[111.01332092 57.30048370]
[117.17537689 43.62462234]
[114.87786102 25.39208221]
[129.43075562 15.64678288]
[135.28660583 1.83703446]
[141.14244080 -11.97271347]
[146.99827576 -25.78246307]
[152.85412598 -39.59220886]
[146.69668579 -54.14767456]
[152.71232605 -68.76230621]
[167.33207703 -74.76551056]
[181.88229370 -68.59568787]
[187.73059082 -53.91328430]
[181.40728760 -39.42911148]
[166.66386414 -33.73637009]
[160.80802917 -19.92662239]
[154.95219421 -6.11687469]
[149.09634399 7.69287348]
[143.24050903 21.50262260]
[147.48829651 32.88279724]
[142.65827942 44.46503830]
[130.85124207 49.78667450]
[124.68918610 63.46253586]
[118.52713013 77.13838959]
[127.01633453 89.50501251]
[141.99307251 88.66992188]
[156.96980286 87.83482361]
[167.47912598 76.33734894]
[182.67956543 75.70378876]
[193.57588196 85.79367828]
[208.55262756 84.95858002]
[223.52935791 84.12348175]
[238.50608826 83.28838348]
[248.85377502 71.34262848]
[264.62335205 70.29596710]
[276.45904541 80.76937103]
[277.33892822 96.54914856]
[266.74096680 108.27343750]
[250.95277405 108.98643494]
[239.34118652 98.26512146]
[224.36445618 99.10021973]
[209.38772583 99.93531799]
[194.41098022 100.77041626]
[184.70394897 112.00914001]
[169.52729797 113.06939697]
[157.80490112 102.81155396]
[142.82817078 103.64665222]
[127.85143280 104.48175049]
[119.63985443 117.03443909]
[124.87469482 131.09133911]
[130.10954285 145.14823914]
[137.89384460 151.70680237]
[138.85685730 160.69651794]
[148.15310669 172.46850586]
[157.44935608 184.24049377]
[166.74560547 196.01249695]
[181.30706787 204.69581604]
[176.99411011 221.09199524]
[160.04475403 221.48649597]
[154.97361755 205.30874634]
[145.67736816 193.53674316]
[136.38111877 181.76475525]
[127.08486938 169.99276733]
[128.01515198 184.96389771]
[123.62864685 199.30818176]
[114.48412323 211.19841003]
[101.74642944 219.11997986]
[87.03813171 222.06379700]
[72.23282623 219.65489197]
[59.21644592 212.20010376]
[49.64706039 200.64904785]
[44.74364853 186.47312927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 119]
[7 118]
[8 117]
[11 42]
[12 41]
[13 40]
[14 38]
[15 37]
[19 34]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[52 67]
[53 66]
[54 65]
[56 63]
[57 62]
[68 92]
[69 91]
[70 90]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
[93 116]
[94 115]
[95 114]
[98 111]
[99 110]
[100 109]
[101 108]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
