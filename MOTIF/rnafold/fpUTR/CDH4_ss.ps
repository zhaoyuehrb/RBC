%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCGGCGGUGGUCUCGGCGGCGGCGGCGGCGGCGGCGGCAGGGAGCGGGCUCCCGGUGCCGGGCACCGGGCGGGCGGCGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[131.50804138 118.51439667]
[127.33162689 107.01873016]
[112.33396149 107.28345490]
[100.25279236 114.32171631]
[87.93076324 107.71420288]
[72.93309784 107.97893524]
[59.27162933 115.95858002]
[46.40979004 108.44709778]
[31.41212463 108.71183014]
[17.75065231 116.69147491]
[4.88881207 109.18000031]
[-10.10885143 109.44472504]
[-23.77032280 117.42436981]
[-36.63216400 109.91289520]
[-51.62982941 110.17761993]
[-66.62749481 110.44234467]
[-81.61814880 110.97171783]
[-96.59712982 111.76557159]
[-111.57610321 112.55942535]
[-125.02188110 121.94788361]
[-139.75871277 114.75359344]
[-140.62661743 98.37742615]
[-126.73275757 89.66577911]
[-112.36995697 97.58044434]
[-97.39097595 96.78659058]
[-82.41200256 95.99274445]
[-75.75203705 92.41519165]
[-66.89221954 95.44468689]
[-51.89455414 95.17995453]
[-36.89689255 94.91522980]
[-24.30815315 86.95452118]
[-10.37357903 94.44705963]
[4.62408447 94.18233490]
[17.21282196 86.22161865]
[31.14739799 93.71416473]
[46.14506149 93.44944000]
[58.73379898 85.48872375]
[72.66837311 92.98126984]
[87.66603851 92.71654510]
[99.74720764 85.67828369]
[112.06923676 92.28579712]
[127.06690216 92.02106476]
[133.99096680 75.05840302]
[147.44226074 62.69137955]
[164.83216858 57.24323273]
[182.83818054 59.71113968]
[198.03865051 69.58399200]
[207.56301880 84.94756317]
[222.37417603 82.57490540]
[230.67118835 72.51048279]
[243.21321106 70.94243622]
[253.08070374 78.17765045]
[267.96636963 76.32917786]
[282.85202026 74.48069763]
[297.66320801 72.10803986]
[312.38140869 69.21414948]
[327.09960938 66.32025909]
[341.81777954 63.42636490]
[356.53598022 60.53247452]
[371.25418091 57.63858414]
[385.97238159 54.74469376]
[400.69058228 51.85080338]
[415.06567383 42.86227036]
[427.68234253 54.18728638]
[420.29254150 69.44596863]
[403.58447266 66.56900024]
[388.86627197 69.46289062]
[374.14807129 72.35678101]
[359.42987061 75.25067139]
[344.71166992 78.14456177]
[329.99349976 81.03845978]
[315.27529907 83.93235016]
[300.55709839 86.82624054]
[297.09609985 90.40907288]
[291.27185059 91.70932770]
[284.70050049 89.36637115]
[269.81484985 91.21484375]
[254.92916870 93.06332397]
[241.65992737 104.40048981]
[224.74684143 97.38606262]
[209.93568420 99.75872803]
[207.96824646 111.65126801]
[202.65057373 122.49095917]
[194.42308044 131.35433960]
[183.97465515 137.48268127]
[172.18492126 140.34693909]
[160.05020142 139.69345093]
[148.59933472 135.56626892]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[5 39]
[6 38]
[8 36]
[9 35]
[11 33]
[12 32]
[14 30]
[15 29]
[16 28]
[17 26]
[18 25]
[19 24]
[48 81]
[49 80]
[52 78]
[53 77]
[54 76]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
