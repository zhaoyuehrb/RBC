%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGGAGUCCGCGGCGAGCGCAGCAGCAGGGCCGGGUCCUGCGCCUCGGGGGUCGGCGUCCAGGCUCGGAGCGCGGCACGGAGACGGCGGCAGCGCUGGACUAGGUGGCAGGCCCUGCAUC\
) } def
/len { sequence length } bind def

/coor [
[95.90868378 435.44470215]
[105.54821777 422.62054443]
[104.78231049 407.64010620]
[104.01639557 392.65966797]
[103.25048828 377.67926025]
[102.48458099 362.69882202]
[98.95986176 356.10281372]
[101.89536285 347.32699585]
[101.51228333 332.33187866]
[101.12920380 317.33679199]
[93.06938934 304.81124878]
[100.45172882 290.81799316]
[100.06864929 275.82287598]
[92.00884247 263.29736328]
[99.39118195 249.30409241]
[99.00810242 234.30897522]
[89.03829956 219.92758179]
[97.81531525 203.80128479]
[97.04940796 188.82086182]
[85.85564423 179.06201172]
[84.86550140 163.88063049]
[95.17737579 152.20574951]
[94.41146851 137.22531128]
[93.64556122 122.24488068]
[92.87964630 107.26444244]
[89.32035828 99.91921234]
[92.29043579 91.89262390]
[91.90735626 76.89751434]
[77.87786102 67.54940796]
[72.20023346 51.85140991]
[76.90985107 36.00888443]
[89.97668457 26.16093063]
[89.21076965 11.18049717]
[88.44486237 -3.79993629]
[87.67895508 -18.78036880]
[76.23014832 -29.34268951]
[75.66680908 -44.54589081]
[85.80692291 -55.39548492]
[85.04101562 -70.37591553]
[84.27510834 -85.35635376]
[83.31795502 -100.32578278]
[82.16971588 -115.28176880]
[81.02147675 -130.23776245]
[79.68233490 -145.17785645]
[78.15251923 -160.09963989]
[76.43226624 -175.00067139]
[74.52186584 -189.87852478]
[72.61145782 -204.75637817]
[62.85273743 -213.30596924]
[61.62386322 -225.81750488]
[69.04290009 -235.46382141]
[67.51308441 -250.38560486]
[65.98326111 -265.30740356]
[64.45344543 -280.22918701]
[62.92362213 -295.15097046]
[49.43817520 -302.82705688]
[43.07080078 -316.97753906]
[46.26988220 -332.16125488]
[57.80530930 -342.53976440]
[73.24147034 -344.12231445]
[86.64285278 -336.30038452]
[92.85634613 -322.08166504]
[89.49274445 -306.93353271]
[77.84540558 -296.68078613]
[79.37522888 -281.75900269]
[80.90504456 -266.83721924]
[82.43486786 -251.91542053]
[83.96468353 -236.99363708]
[95.00611877 -223.41763306]
[87.48931122 -206.66677856]
[89.39971161 -191.78892517]
[91.31011200 -176.91107178]
[95.32940674 -170.60423279]
[93.07430267 -161.62947083]
[94.60412598 -146.70768738]
[98.46103668 -140.30024719]
[95.97746277 -131.38600159]
[97.12570190 -116.43000793]
[98.27394104 -101.47402191]
[101.96595764 -94.97017670]
[99.25553894 -86.12226105]
[100.02144623 -71.14183044]
[100.78735352 -56.16139221]
[111.98112488 -46.40254211]
[112.97126770 -31.22116280]
[102.65938568 -19.54627800]
[103.42530060 -4.56584549]
[104.19120789 10.41458797]
[104.95711517 25.39502144]
[116.82302094 31.65280724]
[124.08054352 43.06395340]
[124.72726440 56.68076324]
[118.48522186 68.92193604]
[106.90246582 76.51443481]
[107.28554535 91.50954437]
[107.86008453 106.49853516]
[108.62599182 121.47896576]
[109.39189911 136.45939636]
[110.15780640 151.43983459]
[121.60661316 162.00215149]
[122.16995239 177.20535278]
[112.02983856 188.05494690]
[112.79575348 203.03538513]
[121.87137604 212.30691528]
[122.13889313 224.87580872]
[114.00320435 233.92590332]
[114.38628387 248.92100525]
[122.47350311 262.51907349]
[115.06375885 275.43978882]
[115.44683838 290.43490601]
[123.53405762 304.03298950]
[116.12431335 316.95370483]
[116.50739288 331.94879150]
[116.89047241 346.94390869]
[117.46501160 361.93289185]
[118.23092651 376.91333008]
[118.99683380 391.89376831]
[119.76274109 406.87420654]
[120.52864838 421.85464478]
[131.42582703 433.62881470]
[128.87234497 449.46734619]
[114.82700348 457.22027588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 119]
[3 118]
[4 117]
[5 116]
[6 115]
[8 114]
[9 113]
[10 112]
[12 110]
[13 109]
[15 107]
[16 106]
[18 103]
[19 102]
[22 99]
[23 98]
[24 97]
[25 96]
[27 95]
[28 94]
[32 89]
[33 88]
[34 87]
[35 86]
[38 83]
[39 82]
[40 81]
[41 79]
[42 78]
[43 77]
[44 75]
[45 74]
[46 72]
[47 71]
[48 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
