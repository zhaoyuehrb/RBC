%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGUCCGCGAAACCUAGUGCUGAAGUAGGCGCGGACGUGCCCGGUGCCUGGCGCGUGGUAGCAGGCGCCCGGUGCCCCGGCCGGCGAAGACC\
) } def
/len { sequence length } bind def

/coor [
[82.59016418 170.48139954]
[93.74107361 159.82022095]
[90.78431702 145.11451721]
[87.82756042 130.40882874]
[75.54818726 121.79389191]
[60.71397400 124.01785278]
[45.87975311 126.24180603]
[31.04553604 128.46575928]
[16.21131897 130.68971252]
[1.37709999 132.91366577]
[-13.45711803 135.13761902]
[-17.84284782 138.66117859]
[-22.66621590 139.87945557]
[-26.92019272 139.03921509]
[-29.86355972 136.77062988]
[-44.84510803 137.51438904]
[-59.82666016 138.25814819]
[-74.80821228 139.00190735]
[-82.40576935 152.42877197]
[-96.06698608 159.59637451]
[-111.43261719 158.21759033]
[-123.59953308 148.73236084]
[-128.68533325 134.16738892]
[-125.06713867 119.17031860]
[-113.89951324 108.52664185]
[-98.74600220 105.63273621]
[-84.44203949 111.41202545]
[-75.55196381 124.02035522]
[-60.57041550 123.27660370]
[-45.58886719 122.53284454]
[-30.60731697 121.78908539]
[-15.68107319 120.30340576]
[-0.84685469 118.07945251]
[13.98736382 115.85549164]
[28.82158089 113.63153839]
[43.65579987 111.40758514]
[58.49001694 109.18363190]
[73.32423401 106.95967865]
[78.37850952 86.69898987]
[95.10487366 77.32068634]
[111.76568604 82.58375549]
[124.04505920 73.96881866]
[136.32443237 65.35388947]
[143.58702087 48.53333664]
[161.01699829 47.45108032]
[173.00482178 38.43486023]
[184.99263000 29.41864395]
[196.98045349 20.40242767]
[208.96827698 11.38620949]
[220.95610046 2.36999273]
[227.33428955 -12.10858822]
[242.15650940 -13.57515430]
[254.14433289 -22.59137154]
[266.13214111 -31.60758781]
[278.11996460 -40.62380600]
[290.10778809 -49.64002228]
[296.48596191 -64.11860657]
[311.30819702 -65.58516693]
[323.29602051 -74.60138702]
[329.21618652 -89.89464569]
[345.45996094 -92.14657593]
[355.31719971 -79.04057312]
[348.64755249 -64.05897522]
[332.31225586 -62.61356735]
[320.32443237 -53.59735107]
[314.80368042 -39.76366806]
[299.12399292 -37.65220261]
[287.13619995 -28.63598633]
[275.14837646 -19.61976814]
[263.16055298 -10.60355091]
[251.17272949 -1.58733404]
[245.65199280 12.24634647]
[229.97230530 14.35781288]
[217.98449707 23.37402916]
[205.99667358 32.39024734]
[194.00885010 41.40646362]
[182.02102661 50.42267990]
[170.03321838 59.43889999]
[167.97344971 71.48473358]
[157.88688660 79.07621765]
[144.93936157 77.63326263]
[132.65998840 86.24819183]
[120.38062286 94.86312103]
[119.82904053 114.03483582]
[102.53326416 127.45207214]
[105.49002075 142.15777588]
[108.44676971 156.86346436]
[122.85167694 162.38635254]
[131.96553040 174.83387756]
[132.88014221 190.23411560]
[125.30365753 203.67288208]
[111.65370941 210.86190796]
[96.28593445 209.50723267]
[84.10414886 200.04110718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[15 31]
[16 30]
[17 29]
[18 28]
[41 83]
[42 82]
[43 81]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
