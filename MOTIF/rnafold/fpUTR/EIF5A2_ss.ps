%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUGCCGCGGCCGCCACCGCCGCUGCCGGCGCCGCUGCUGUAGGGGACCAGCGCGGGUGCGCAGACGAAAGGCGCUCUUUGCCAGCUGAAAGUUCCCACGGAAAAACUACCAUCUCCCCUGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[32.24079132 249.16879272]
[17.34627151 250.94454956]
[3.08065462 246.30857849]
[-7.92448378 236.11608887]
[-13.63902664 222.24728394]
[-13.00881290 207.26052856]
[-6.15204716 193.92279053]
[-19.85034752 200.03479004]
[-29.30024910 212.72375488]
[-44.07574081 210.84384155]
[-57.77404022 216.95584106]
[-71.47234344 223.06784058]
[-85.17063904 229.17984009]
[-98.86894226 235.29185486]
[-105.51121521 241.70968628]
[-112.96977997 241.38179016]
[-126.81069946 247.16355896]
[-140.65162659 252.94532776]
[-144.24601746 263.34359741]
[-152.82879639 269.86813354]
[-163.36886597 270.52209473]
[-172.31027222 265.33007812]
[-186.41247559 270.44158936]
[-196.55059814 283.33154297]
[-212.74192810 280.72915649]
[-218.33023071 265.31152344]
[-207.56674194 252.93901062]
[-191.52400208 256.33938599]
[-177.42178345 251.22787476]
[-166.20855713 235.54676819]
[-146.43339539 239.10440063]
[-132.59246826 233.32263184]
[-118.75154877 227.54086304]
[-104.98094177 221.59355164]
[-91.28264618 215.48155212]
[-77.58434296 209.36955261]
[-63.88604355 203.25753784]
[-50.18774414 197.14553833]
[-41.71763611 184.89373779]
[-25.96234894 186.33648682]
[-12.26404858 180.22448730]
[-6.95866394 172.38671875]
[3.53879666 170.50135803]
[15.16952896 161.02896118]
[26.80026245 151.55657959]
[38.43099594 142.08419800]
[50.06172562 132.61181641]
[61.69245911 123.13942719]
[73.32318878 113.66704559]
[84.95392609 104.19466400]
[76.66198730 88.02719879]
[87.33654022 65.40480042]
[91.59389496 51.02165604]
[95.85125732 36.63850784]
[100.10861206 22.25536156]
[104.01984406 7.77426100]
[107.58270264 -6.79646349]
[111.14556885 -21.36718750]
[114.53346252 -35.97958755]
[117.74590302 -50.63155746]
[113.14360809 -65.76857758]
[123.42709351 -76.54351044]
[126.63953400 -91.19548035]
[129.85197449 -105.84745026]
[133.06442261 -120.49942017]
[122.10089111 -131.35319519]
[118.76808929 -146.41627502]
[124.12949371 -160.88204956]
[136.47430420 -170.13456726]
[151.86334229 -171.22137451]
[165.38601685 -163.79568481]
[172.72727966 -150.22698975]
[171.54458618 -134.84503174]
[162.21530151 -122.55812836]
[147.71638489 -117.28697968]
[144.50395203 -102.63500977]
[141.29150391 -87.98303986]
[138.07905579 -73.33106995]
[142.91113281 -59.24205399]
[132.39787292 -47.41911316]
[129.18542480 -32.76714325]
[130.84233093 -25.48756027]
[125.71629333 -17.80432701]
[122.15342712 -3.23360181]
[118.59056854 11.33712292]
[120.31465912 15.88817787]
[119.12657166 21.57414818]
[114.49176025 26.51271629]
[110.23439789 40.89586258]
[105.97704315 55.27901077]
[101.71968842 69.66215515]
[105.80197144 75.95381927]
[118.38542938 67.78947449]
[126.54956818 80.37306213]
[113.96652222 88.53713989]
[118.04880524 94.82880402]
[132.91851807 96.80155945]
[147.78822327 98.77430725]
[162.65792847 100.74706268]
[179.15467834 96.83634949]
[187.47930908 111.60581207]
[175.59153748 123.69370270]
[160.68518066 115.61676788]
[145.81547546 113.64402008]
[130.94575500 111.67126465]
[116.07604980 109.69850922]
[130.36396790 114.26527405]
[141.08898926 124.75212097]
[145.97543335 138.93389893]
[143.98645020 153.80143738]
[135.54409790 166.20008850]
[122.43968964 173.49903870]
[107.45380402 174.14956665]
[93.76620483 168.01362610]
[84.28120422 156.39317322]
[81.01137543 141.75390625]
[84.65052032 127.20204926]
[94.42630768 115.82539368]
[82.79557800 125.29778290]
[71.16484070 134.77015686]
[59.53411102 144.24255371]
[47.90337753 153.71493530]
[36.27264404 163.18731689]
[24.64191246 172.65969849]
[13.01118088 182.13208008]
[28.01079559 182.02455139]
[41.67202759 188.21896362]
[51.47479248 199.57263184]
[55.61077118 213.99114990]
[53.31700516 228.81474304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 41]
[8 40]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[16 33]
[17 32]
[18 31]
[22 29]
[23 28]
[43 125]
[44 124]
[45 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[52 91]
[53 90]
[54 89]
[55 88]
[56 85]
[57 84]
[58 83]
[59 81]
[60 80]
[62 78]
[63 77]
[64 76]
[65 75]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
