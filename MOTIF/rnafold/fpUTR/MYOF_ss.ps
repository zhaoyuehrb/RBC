%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUGGGAGAAAUCCUCCCUUCACUGGGAGAGAACUUCUCUCCCAGGGCGGUGCGACCCGGAGCUCCAGCGCCCUAGUCUCCACUUCGUUUGCUGAAACUUGCUUUCUACCAGCUAAGAACC\
) } def
/len { sequence length } bind def

/coor [
[91.40649414 106.97404480]
[76.98524475 111.10048676]
[62.56399536 115.22692871]
[48.14274597 119.35337067]
[33.72149277 123.47980499]
[19.30024338 127.60624695]
[4.87899160 131.73269653]
[-9.54225922 135.85913086]
[-23.96351051 139.98558044]
[-38.38476181 144.11201477]
[-52.80601120 148.23846436]
[-61.45237732 166.25450134]
[-80.21905518 172.19009399]
[-97.12853241 162.71635437]
[-111.19480896 167.92593384]
[-125.19396973 173.31327820]
[-139.12376404 178.87751770]
[-153.05355835 184.44175720]
[-166.98335266 190.00601196]
[-180.91314697 195.57025146]
[-186.91456604 210.19073486]
[-201.52845764 216.20817566]
[-216.08468628 210.05252075]
[-221.94728088 195.37582397]
[-215.63807678 180.88549805]
[-200.90020752 175.17840576]
[-186.47740173 181.64045715]
[-172.54760742 176.07621765]
[-158.61781311 170.51196289]
[-144.68801880 164.94772339]
[-130.75822449 159.38348389]
[-125.65564728 153.91819763]
[-116.40438843 153.85964966]
[-102.33811188 148.65007019]
[-100.67717743 138.32203674]
[-94.78310394 129.58154297]
[-85.69126892 124.08629608]
[-75.05084991 122.91304779]
[-64.82581329 126.34715271]
[-56.93245316 133.81721497]
[-42.51120377 129.69076538]
[-28.08995247 125.56432343]
[-13.66870117 121.43788147]
[0.75254995 117.31143951]
[15.17380047 113.18499756]
[29.59505272 109.05855560]
[44.01630402 104.93211365]
[58.43755341 100.80567169]
[72.85880280 96.67922974]
[87.28005219 92.55278778]
[98.15194702 82.21828461]
[103.00351715 68.02454376]
[107.85508728 53.83080673]
[112.70665741 39.63706589]
[108.69789124 21.71886635]
[122.23708344 10.63078690]
[126.72753143 -3.68130183]
[131.21798706 -17.99339104]
[124.15590668 -31.87736893]
[128.91374207 -46.32789612]
[142.19351196 -52.97494125]
[146.68395996 -67.28703308]
[146.27386475 -76.52938080]
[151.47369385 -81.90221405]
[156.32525635 -96.09595490]
[149.14100647 -110.17295074]
[154.09431458 -125.18096161]
[168.24647522 -132.21598816]
[183.20127869 -127.10427856]
[190.08628845 -112.87852478]
[184.81675720 -97.97859955]
[170.51899719 -91.24438477]
[165.66743469 -77.05064392]
[160.99604797 -62.79658127]
[156.50559998 -48.48449326]
[163.60791016 -35.44252777]
[159.25784302 -20.86406708]
[145.53007507 -13.50294399]
[141.03962708 0.80914503]
[136.54917908 15.12123394]
[141.88331604 26.05769539]
[138.17265320 38.06784058]
[126.90039825 44.48863602]
[122.04882812 58.68237686]
[117.19725800 72.87611389]
[112.34568787 87.06985474]
[117.55526733 101.13613892]
[130.48184204 108.74557495]
[142.73890686 102.30075073]
[156.47007751 102.78002167]
[168.06317139 109.94951630]
[174.52194214 121.82960510]
[174.24015808 135.24031067]
[186.96983337 143.17477417]
[199.69949341 151.10923767]
[212.42915344 159.04368591]
[224.55084229 149.90974426]
[239.15461731 145.77520752]
[254.26542664 147.19926453]
[267.83966064 153.98930359]
[278.04150391 165.22703552]
[283.49127197 179.39265442]
[283.45190430 194.57035828]
[277.92871094 208.70750427]
[267.66870117 219.89216614]
[254.05941772 226.61167908]
[238.94143677 227.95732117]
[224.35929871 223.74708557]
[212.28517151 214.55036926]
[204.35192871 201.61096191]
[201.63252258 186.67880249]
[204.49468994 171.77336121]
[191.76502991 163.83889771]
[179.03536987 155.90443420]
[166.30569458 147.96997070]
[151.35540771 154.62182617]
[135.21575928 151.05639648]
[124.24136353 138.47621155]
[122.87241364 121.67215729]
[109.94583130 114.06272125]
[104.94953918 115.20780182]
[100.20256805 114.76016998]
[96.16731262 112.97595215]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 50]
[2 49]
[3 48]
[4 47]
[5 46]
[6 45]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[14 34]
[15 33]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[51 86]
[52 85]
[53 84]
[54 83]
[56 80]
[57 79]
[58 78]
[61 75]
[62 74]
[64 73]
[65 72]
[87 120]
[88 119]
[93 115]
[94 114]
[95 113]
[96 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
