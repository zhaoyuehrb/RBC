%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGCGCCCCGCCCCCUUUACUGACAGGUUGCCCACCUCCCCCAACGCCACCCCGCUUCGCAGUAGACGGACAGAGGAGUCGUAGCGGUCGAGGCUUUUGCGGCUCCGGCGUGCCGGAAAGUAUGUUAUGCAUAAAAGUGGAUAAUUUACAUGAUAA\
) } def
/len { sequence length } bind def

/coor [
[187.13807678 235.20103455]
[189.02017212 226.46354675]
[193.07933044 218.47909546]
[182.89732361 207.46426392]
[172.71531677 196.44941711]
[162.53330994 185.43458557]
[152.35128784 174.41975403]
[142.16928101 163.40490723]
[131.98727417 152.39007568]
[128.44570923 151.90240479]
[124.97296143 149.64320374]
[122.41376495 145.66799927]
[121.55371857 140.41406250]
[112.03781891 128.81890869]
[102.52192688 117.22374725]
[77.31290436 109.60453796]
[62.49757767 107.25802612]
[47.65692520 112.74124146]
[36.29673004 103.10821533]
[21.48140335 100.76169586]
[6.66607904 98.41518402]
[-8.14924622 96.06866455]
[-22.96457100 93.72214508]
[-37.77989578 91.37563324]
[-52.59522247 89.02911377]
[-64.52205658 106.59838867]
[-87.42358398 112.84692383]
[-111.19071198 101.70708466]
[-125.77626038 105.20876312]
[-140.36180115 108.71044159]
[-154.94735718 112.21212006]
[-164.52207947 125.08473969]
[-180.56024170 125.48083496]
[-190.75874329 113.09655762]
[-187.29415894 97.43207550]
[-172.82421875 90.50382233]
[-158.44903564 97.62657166]
[-143.86349487 94.12489319]
[-129.27793884 90.62321472]
[-114.69239044 87.12153625]
[-113.59191132 79.70270538]
[-128.42956543 77.50175476]
[-143.26721191 75.30079651]
[-158.10481262 73.09959412]
[-155.90336609 58.26201630]
[-141.06625366 60.46314621]
[-126.22859955 62.66410446]
[-111.39095306 64.86505890]
[-110.29047394 57.44623947]
[-123.23149109 49.86137772]
[-138.45849609 54.09383774]
[-152.17713928 46.24688339]
[-156.24836731 30.97597885]
[-148.25682068 17.34107399]
[-132.94372559 13.43152142]
[-119.39406586 21.56678581]
[-115.64662933 36.92036057]
[-102.70561981 44.50522232]
[-86.93226624 39.96569061]
[-71.60746002 42.21856689]
[-59.36883926 50.11805344]
[-52.01494217 61.61183167]
[-50.24870300 74.21379089]
[-35.43338013 76.56030273]
[-20.61805344 78.90682220]
[-5.80272913 81.25334167]
[9.01259613 83.59985352]
[23.82792091 85.94637299]
[38.64324570 88.29289246]
[52.42420578 82.64183044]
[64.84409332 92.44269562]
[79.65941620 94.78921509]
[67.48140717 86.03158569]
[65.73342896 71.13378143]
[75.55351257 59.79508591]
[90.54824829 59.39760971]
[100.95523834 70.20013428]
[99.99917603 85.16922760]
[107.58403778 72.22821045]
[115.16889954 59.28719330]
[122.75376129 46.34617615]
[130.33862305 33.40516281]
[137.92347717 20.46414566]
[145.50834656 7.52313042]
[153.09320068 -5.41788530]
[160.67807007 -18.35890198]
[168.26292419 -31.29991722]
[168.56584167 -47.11822510]
[181.67672729 -54.18605423]
[189.26158142 -67.12706757]
[196.84643555 -80.06808472]
[196.41264343 -96.46149445]
[210.53239441 -104.80204773]
[224.68049622 -96.50969696]
[224.30261230 -80.11490631]
[209.78746033 -72.48322296]
[202.20259094 -59.54220963]
[194.61773682 -46.60119629]
[194.85733032 -31.70851707]
[181.20393372 -23.71505737]
[173.61907959 -10.77404118]
[166.03422546 2.16697502]
[158.44935608 15.10799122]
[150.86450195 28.04900742]
[143.27963257 40.99002075]
[135.69477844 53.93103790]
[128.10990906 66.87205505]
[120.52505493 79.81307220]
[112.94019318 92.75408936]
[114.11708069 107.70784760]
[123.63298035 119.30300140]
[133.14888000 130.89816284]
[143.00210571 142.20806885]
[153.18411255 153.22290039]
[163.36613464 164.23773193]
[173.54814148 175.25257874]
[183.73014832 186.26741028]
[193.91217041 197.28225708]
[204.09417725 208.29708862]
[225.54763794 203.95634460]
[245.21960449 213.25619507]
[255.36026001 232.36259460]
[252.07676697 253.61238098]
[263.67193604 263.12826538]
[275.26708984 272.64416504]
[290.84326172 275.41790771]
[295.77307129 289.47302246]
[307.36822510 298.98892212]
[318.96337891 308.50482178]
[330.55853271 318.02072144]
[342.15371704 327.53662109]
[357.72985840 330.31033325]
[362.65969849 344.36544800]
[374.25485229 353.88134766]
[385.85000610 363.39724731]
[402.10943604 365.53326416]
[408.13848877 380.78393555]
[397.73498535 393.46063232]
[381.60116577 390.52270508]
[376.33410645 374.99240112]
[364.73895264 365.47650146]
[353.14379883 355.96060181]
[338.39700317 353.86752319]
[332.63781738 339.13177490]
[321.04263306 329.61587524]
[309.44747925 320.09997559]
[297.85232544 310.58407593]
[286.25717163 301.06817627]
[271.51037598 298.97509766]
[265.75119019 284.23931885]
[254.15602112 274.72341919]
[242.56086731 265.20755005]
[235.04492188 269.71859741]
[226.60795593 272.16656494]
[217.80650330 272.37982178]
[209.22369385 270.33447266]
[201.43066406 266.15658569]
[194.94857788 260.11447144]
[190.21374512 252.60147095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 119]
[4 118]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[13 112]
[14 111]
[15 110]
[16 72]
[17 71]
[19 69]
[20 68]
[21 67]
[22 66]
[23 65]
[24 64]
[25 63]
[28 40]
[29 39]
[30 38]
[31 37]
[49 58]
[50 57]
[78 109]
[79 108]
[80 107]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[89 98]
[90 97]
[91 96]
[123 152]
[124 151]
[125 150]
[127 148]
[128 147]
[129 146]
[130 145]
[131 144]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
