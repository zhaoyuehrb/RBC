%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGGGAGGGCGCCCGCCCCGCUCCCGGCCCGGCUGCGAGGAGGAGGCGGCGGCGGCGCAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[60.05773163 379.15405273]
[44.91948700 378.81900024]
[30.71112442 373.58441162]
[18.97385788 364.01803589]
[10.98086166 351.15762329]
[7.59915495 336.39810181]
[9.19556046 321.34054565]
[15.59691143 307.61825562]
[26.10883713 296.71972656]
[39.59108353 289.82711792]
[54.58119583 287.68814087]
[57.37809753 272.95120239]
[60.17499924 258.21426392]
[62.97189713 243.47732544]
[65.76879883 228.74038696]
[63.85359955 221.32629395]
[69.05770111 213.38539124]
[72.54227448 198.79574585]
[76.02685547 184.20610046]
[79.16846466 169.53878784]
[81.96536255 154.80184937]
[84.76226044 140.06491089]
[87.55916595 125.32797241]
[90.35606384 110.59103394]
[85.92726135 97.32915497]
[94.90699768 86.61206818]
[97.70389557 71.87512970]
[91.02759552 60.57430649]
[93.89737701 48.18221283]
[104.18473816 41.41336441]
[107.66931915 26.82372093]
[110.81092072 12.15640068]
[113.60782623 -2.58053803]
[107.69229126 -17.87558746]
[118.18973541 -30.47462273]
[134.30128479 -27.41683769]
[139.45275879 -11.84781742]
[128.34475708 0.21636288]
[125.54785919 14.95330143]
[127.46306610 22.36739731]
[122.25896454 30.30830193]
[118.77438354 44.89794540]
[124.77967072 61.22578812]
[112.44083405 74.67202759]
[109.64393616 89.40896606]
[114.07273865 102.67084503]
[105.09300232 113.38793182]
[102.29610443 128.12486267]
[99.49919891 142.86180115]
[96.70230103 157.59873962]
[93.90540314 172.33567810]
[95.40042114 181.71147156]
[90.61650085 187.69068909]
[87.13191986 202.28033447]
[83.64733887 216.86997986]
[80.50573730 231.53729248]
[77.70883942 246.27423096]
[74.91193390 261.01116943]
[72.11503601 275.74810791]
[69.31813049 290.48504639]
[82.48223114 297.96737671]
[92.50168610 309.32031250]
[98.28966522 323.31237793]
[99.21832275 338.42584229]
[95.18693542 353.02127075]
[86.63278961 365.51547241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 55]
[18 54]
[19 53]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[26 45]
[27 44]
[30 42]
[31 41]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
