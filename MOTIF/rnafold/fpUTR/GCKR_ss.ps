%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUGACCAGAGGGGUUUGUGUGGCUGAAGAGGCAGGAGGAACAGUGUAUCCACAGCGUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[1.70565414 267.59347534]
[-1.20603716 282.48931885]
[-9.30541992 295.32537842]
[-21.49711990 304.36569214]
[-36.13230896 308.38757324]
[-51.23169708 306.84716797]
[-64.75321960 299.95275879]
[-74.86819458 288.63674927]
[-80.20866394 274.42956543]
[-80.05236816 259.25262451]
[-74.42044067 245.15844727]
[-64.07456207 234.05316162]
[-50.41392136 227.43869019]
[-35.28601074 226.20956421]
[-20.73675537 230.53201294]
[-11.58210182 218.64956665]
[-2.42744803 206.76713562]
[6.72720575 194.88470459]
[15.88185978 183.00225830]
[10.65253544 171.61676025]
[10.90265846 159.01672363]
[16.64632988 147.71664429]
[26.79497910 139.99938965]
[39.36312103 137.45518494]
[51.85665512 140.65422058]
[62.08377075 129.68124390]
[72.31089020 118.70828247]
[82.53800964 107.73531342]
[82.13346100 93.25143433]
[92.01252747 82.65190125]
[106.48902130 82.03757477]
[116.71614075 71.06459808]
[120.46512604 55.69399261]
[134.80276489 51.65894318]
[145.02987671 40.68597412]
[155.25698853 29.71300507]
[150.68600464 15.05007267]
[154.07452393 0.06963592]
[164.51106262 -11.19864368]
[179.18824768 -15.72365570]
[194.15798950 -12.28819466]
[205.39350891 -1.81638157]
[209.87248230 12.87491798]
[206.39012146 27.83381844]
[195.88314819 39.03644943]
[181.17787170 43.46936035]
[166.22996521 39.94012070]
[156.00285339 50.91309357]
[145.77572632 61.88606262]
[142.75825500 76.47180939]
[127.68910980 81.29171753]
[117.46199036 92.26468658]
[117.86653900 106.74856567]
[107.98747253 117.34809875]
[93.51097870 117.96242523]
[83.28385925 128.93539429]
[73.05673981 139.90837097]
[62.82962418 150.88133240]
[66.91477203 168.23947144]
[60.06935883 184.54010010]
[45.07694244 193.61874390]
[27.76429749 192.15692139]
[18.60964203 204.03935242]
[9.45498943 215.92178345]
[0.30033505 227.80422974]
[-8.85431862 239.68666077]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[25 58]
[26 57]
[27 56]
[28 55]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
