%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGCUCUAGGGCUGGCACCAGGCACUGGAAUUAAACAUUCUGGACUCCAGAGGGGCAUGAAAACUCUUCCUGAAGGAGAUGCAGAGGAAGAUUCGAACUGGAGGAAAACCCUAAAAUAAACAAUAACAACAAAAGUUCAAAACCUGAAAAGUGAACC\
) } def
/len { sequence length } bind def

/coor [
[69.13951874 135.45440674]
[63.67245865 149.42263794]
[58.20540237 163.39085388]
[52.73834229 177.35908508]
[47.27128601 191.32730103]
[41.80422974 205.29553223]
[36.33716965 219.26376343]
[39.33012390 235.38746643]
[26.68896675 245.83415222]
[11.41783524 239.85714722]
[9.22636223 223.60508728]
[22.36894798 213.79669189]
[27.83600426 199.82847595]
[33.30306244 185.86024475]
[38.77011871 171.89202881]
[44.23717880 157.92379761]
[49.70423508 143.95558167]
[55.17129135 129.98735046]
[66.38097382 98.26856995]
[89.69161224 91.44902039]
[79.72782135 80.23639679]
[69.76403809 69.02377319]
[59.80025101 57.81114960]
[48.67501831 60.92086792]
[37.24694443 59.63507843]
[27.18141937 54.18002701]
[19.93066406 45.38670731]
[16.52425385 34.56444931]
[17.42303658 23.30606079]
[22.45718384 13.25340080]
[13.17077351 1.47364712]
[3.88436437 -10.30610657]
[-5.40204477 -22.08586121]
[-14.68845367 -33.86561584]
[-27.06517792 -31.72853851]
[-39.10079956 -35.05740738]
[-48.51059723 -43.15622711]
[-53.53571320 -54.42971420]
[-53.27175522 -66.69724274]
[-47.83092880 -77.61458588]
[-56.64770889 -89.74983978]
[-65.46448517 -101.88510132]
[-74.28126526 -114.02035522]
[-83.09804535 -126.15560913]
[-100.40072632 -128.55749512]
[-110.43663788 -142.44160461]
[-107.41166687 -158.96134949]
[-116.46500397 -170.92115784]
[-125.51834106 -182.88096619]
[-134.57168579 -194.84078979]
[-155.81462097 -201.89146423]
[-157.94326782 -223.41189575]
[-167.90704346 -234.62451172]
[-177.87083435 -245.83714294]
[-187.83462524 -257.04977417]
[-197.79841614 -268.26239014]
[-207.76219177 -279.47500610]
[-223.19076538 -277.82012939]
[-236.62867737 -285.57913208]
[-242.90875244 -299.76858521]
[-239.61619568 -314.93231201]
[-228.01705933 -325.23956299]
[-212.57142639 -326.72698975]
[-199.21849060 -318.82266235]
[-193.09271240 -304.56591797]
[-196.54957581 -289.43881226]
[-186.58578491 -278.22616577]
[-176.62199402 -267.01354980]
[-166.65821838 -255.80091858]
[-156.69442749 -244.58830261]
[-146.73063660 -233.37567139]
[-138.83569336 -234.61364746]
[-131.01052856 -232.57733154]
[-124.57191467 -227.53169250]
[-120.63401794 -220.25436401]
[-119.91601562 -211.91641235]
[-122.61187744 -203.89411926]
[-113.55853271 -191.93431091]
[-104.50519562 -179.97450256]
[-95.45185852 -168.01469421]
[-82.53657532 -168.04534912]
[-71.81108093 -160.50601196]
[-67.33583069 -147.97608948]
[-70.96279144 -134.97238159]
[-62.14601135 -122.83713531]
[-53.32923126 -110.70187378]
[-44.51245117 -98.56661987]
[-35.69567490 -86.43136597]
[-18.09699821 -87.27573395]
[-3.36292648 -77.33212280]
[2.54160857 -60.40002441]
[-2.90869999 -43.15202332]
[6.37770939 -31.37227058]
[15.66411877 -19.59251595]
[24.95052719 -7.81276226]
[34.23693848 3.96699190]
[52.78210068 2.11736012]
[68.85454559 11.84368896]
[75.93057251 29.40729141]
[71.01287079 47.84736252]
[80.97666168 59.05998611]
[90.94044495 70.27261353]
[100.90423584 81.48523712]
[115.58657837 84.55587769]
[129.20872498 78.27598572]
[142.83087158 71.99608612]
[149.71029663 57.50288010]
[165.36302185 53.98550415]
[177.78160095 64.14218903]
[177.43957520 80.18159485]
[164.59931946 89.79966736]
[149.11076355 85.61823273]
[135.48861694 91.89813232]
[121.86647034 98.17803192]
[119.47892761 105.28785706]
[134.44422913 106.30753326]
[149.40953064 107.32720947]
[164.37483215 108.34689331]
[179.34013367 109.36656952]
[192.96838379 103.09990692]
[207.95426941 102.44949341]
[222.07421875 107.51182556]
[233.23309326 117.53576660]
[239.77516174 131.03396606]
[240.72972107 146.00355530]
[235.95512390 160.22337341]
[226.15982056 171.58348083]
[212.79724121 178.39826965]
[197.85009766 179.65657043]
[183.53627014 175.17167664]
[171.97962952 165.60903931]
[164.89414978 152.38505554]
[152.34657288 144.16566467]
[139.79899597 135.94628906]
[127.25141907 127.72689819]
[114.70384216 119.50750732]
[112.31630707 126.61734009]
[119.38725281 139.84616089]
[126.45820618 153.07498169]
[133.52915955 166.30378723]
[140.60011292 179.53260803]
[144.47430420 181.74333191]
[147.14517212 184.78207397]
[148.49958801 188.15798950]
[148.59930420 191.39494324]
[147.66024780 194.08856201]
[153.67147827 207.83137512]
[167.18901062 217.11622620]
[165.63728333 233.44178772]
[150.61257935 240.01373291]
[137.57102966 230.07139587]
[139.92866516 213.84260559]
[133.91743469 200.09979248]
[127.37129211 186.60356140]
[120.30033875 173.37474060]
[113.22938538 160.14591980]
[106.15843201 146.91711426]
[99.08748627 133.68829346]
[91.60049438 134.12982178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[5 14]
[6 13]
[7 12]
[20 103]
[21 102]
[22 101]
[23 100]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[47 80]
[48 79]
[49 78]
[50 77]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[104 114]
[105 113]
[106 112]
[137 158]
[138 157]
[139 156]
[140 155]
[141 154]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
