%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUGUGCACCCGGCCACAGAGAAGUGGGUGACUUAGGAGUAUCCUCUCCGCUUCUCACCCUUACUUUCGUCUGUGCACAACUCGCUCAAA\
) } def
/len { sequence length } bind def

/coor [
[131.41944885 302.95443726]
[142.57951355 292.40222168]
[139.02804565 277.82873535]
[135.47657776 263.25521851]
[131.67681885 248.74447632]
[127.62986755 234.30072021]
[123.58291626 219.85696411]
[119.53596497 205.41319275]
[115.48900604 190.96943665]
[111.44205475 176.52568054]
[100.96154022 170.22625732]
[97.55637360 158.06222534]
[103.61756134 146.52177429]
[100.06609344 131.94827271]
[96.51462555 117.37475586]
[87.51283264 112.57380676]
[82.64975739 103.60542297]
[83.53720856 93.44206238]
[89.88105011 85.45224762]
[87.33239746 70.67035675]
[84.78373718 55.88846588]
[82.23508453 41.10657120]
[69.34859467 35.89007187]
[60.83329773 25.03898811]
[58.86172104 11.49735737]
[63.84937286 -1.12866735]
[74.37296295 -9.53111839]
[72.33046722 -24.39140701]
[70.28796387 -39.25169754]
[68.24546814 -54.11198425]
[66.20296478 -68.97227478]
[64.16046906 -83.83256531]
[48.86632919 -89.84682465]
[38.70177841 -102.64176941]
[36.32955933 -118.71550751]
[42.29582214 -133.72808838]
[54.90796280 -143.67327881]
[52.35931015 -158.45516968]
[49.81065369 -173.23706055]
[47.26199722 -188.01895142]
[34.20745850 -196.92706299]
[31.35763168 -212.47229004]
[40.40327072 -225.43191528]
[55.97775650 -228.11723328]
[68.84102631 -218.93508911]
[71.36152649 -203.33308411]
[62.04388809 -190.56761169]
[64.59254456 -175.78572083]
[67.14120483 -161.00381470]
[69.68985748 -146.22192383]
[82.89012909 -142.30577087]
[93.13404846 -133.00611877]
[98.35456848 -120.12145996]
[97.46453857 -106.18115997]
[90.58251953 -93.94896698]
[79.02075195 -85.87506104]
[81.06325531 -71.01477814]
[83.10575104 -56.15448761]
[85.14825439 -41.29419708]
[87.19075775 -26.43390656]
[89.23325348 -11.57361794]
[103.87776947 -4.37381554]
[111.48864746 10.24743557]
[108.93531036 26.69883919]
[97.01697540 38.55791855]
[99.56563568 53.33980942]
[102.11428833 68.12170410]
[104.66294098 82.90359497]
[117.35024261 96.39457703]
[111.08813477 113.82329559]
[114.63959503 128.39680481]
[118.19106293 142.97030640]
[131.21124268 155.85237122]
[125.88581848 172.47872925]
[129.93276978 186.92248535]
[133.97972107 201.36624146]
[138.02667236 215.81001282]
[142.07362366 230.25376892]
[146.12057495 244.69752502]
[151.55694580 252.30525208]
[150.05007935 259.70376587]
[153.60154724 274.27725220]
[157.15301514 288.85076904]
[171.91656494 293.08554077]
[182.57322693 304.14587402]
[186.25642395 319.05661011]
[181.97538757 333.80679321]
[170.88169861 344.42874146]
[155.95950317 348.06518555]
[141.22279358 343.73794556]
[130.63568115 332.61102295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[13 72]
[14 71]
[15 70]
[19 68]
[20 67]
[21 66]
[22 65]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[37 50]
[38 49]
[39 48]
[40 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
