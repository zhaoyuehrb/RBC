%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGAGGUUUGUAGCUGCAGCUGCAGGCAAGCCUGGCCACUGUUGGCUGCAGCAGGACAUCCCAGGCACAGCCCCUAGGGCUCUGAGCAGACAUCCCUCGCCAUUGACACAUCUUCAG\
) } def
/len { sequence length } bind def

/coor [
[95.68218231 222.52436829]
[103.98149872 208.38034058]
[103.59208679 193.38539124]
[100.23248291 186.69984436]
[103.39231110 177.99725342]
[103.39231110 162.99725342]
[103.39231110 147.99725342]
[83.80923462 140.94445801]
[70.69646454 127.14137268]
[57.97344971 135.08648682]
[45.25043488 143.03161621]
[32.52742004 150.97673035]
[19.80440521 158.92184448]
[7.08139181 166.86697388]
[-5.64162207 174.81208801]
[-18.36463547 182.75720215]
[-31.08765030 190.70233154]
[-38.30889130 205.42596436]
[-54.68661499 206.26390076]
[-63.37282562 192.35412598]
[-55.43189621 178.00582886]
[-39.03276825 177.97930908]
[-26.30975533 170.03419495]
[-13.58674145 162.08908081]
[-0.86372709 154.14395142]
[11.85928726 146.19883728]
[24.58230019 138.25372314]
[37.30531311 130.30859375]
[50.02832794 122.36347961]
[62.75134277 114.41835785]
[60.10803223 98.00441742]
[64.37625122 81.93622589]
[74.81650543 68.99768829]
[67.71337891 55.78612137]
[60.61024475 42.57455444]
[53.50711823 29.36298370]
[46.40398788 16.15141487]
[39.30085754 2.93984699]
[20.36466408 1.27809513]
[6.26887035 -11.25404072]
[2.46235180 -29.57629395]
[10.27562428 -46.41790009]
[2.16601181 -59.03670120]
[-5.94360065 -71.65550232]
[-14.05321312 -84.27430725]
[-22.16282463 -96.89311218]
[-30.27243805 -109.51191711]
[-45.08858490 -116.54141235]
[-46.13905334 -132.90687561]
[-32.34321213 -141.77293396]
[-17.89303970 -134.01892090]
[-17.65363503 -117.62152863]
[-9.54402161 -105.00272369]
[-1.43440974 -92.38391876]
[6.67520237 -79.76512146]
[14.78481483 -67.14631653]
[22.89442635 -54.52751160]
[34.15492249 -56.01556778]
[45.19282532 -53.12492752]
[54.36130142 -46.24644470]
[60.27719879 -36.36893082]
[62.02965164 -24.93712807]
[59.32012939 -13.64044285]
[52.51242447 -4.16328287]
[59.61555481 9.04828548]
[66.71868134 22.25985336]
[73.82181549 35.47142410]
[80.92494202 48.68299103]
[88.02807617 61.89455795]
[101.47756195 60.08548737]
[114.75647736 62.88399506]
[126.33196259 69.96703339]
[138.16278076 60.74575424]
[149.99359131 51.52447891]
[161.82440186 42.30320358]
[173.65521240 33.08192825]
[182.43086243 18.57592010]
[198.79930115 22.99295425]
[199.08613586 39.94447708]
[182.87648010 44.91273880]
[171.04566956 54.13401413]
[159.21485901 63.35528946]
[147.38404846 72.57656860]
[135.55323792 81.79784393]
[143.89561462 96.56999969]
[145.71633911 115.00867462]
[160.26235962 118.67108917]
[169.47308350 117.73172760]
[175.13600159 122.62199402]
[189.58204651 126.66078949]
[204.07929993 130.51171875]
[218.62532043 134.17413330]
[232.06069946 125.85149384]
[247.42660522 129.54801941]
[255.60673523 143.07064819]
[251.74794006 158.39660645]
[238.13960266 166.43330383]
[222.85528564 162.41270447]
[214.96290588 148.72015381]
[200.41688538 145.05773926]
[193.07365417 146.49316406]
[185.54324341 141.10682678]
[171.09719849 137.06803894]
[156.59994507 133.21710205]
[142.05392456 129.55470276]
[136.13851929 134.16534424]
[147.14801025 144.35313416]
[160.25813293 151.64179993]
[161.41720581 166.59695435]
[149.58668518 175.81858826]
[135.36686707 171.04402161]
[131.49909973 156.55035400]
[124.30771637 143.38661194]
[118.39231110 147.99725342]
[118.39231110 162.99725342]
[118.39231110 177.99725342]
[118.58702850 192.99598694]
[118.97644043 207.99093628]
[127.99869537 221.68511963]
[120.40940857 236.22248840]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 118]
[3 117]
[5 116]
[6 115]
[7 114]
[9 30]
[10 29]
[11 28]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[38 64]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
[86 105]
[87 104]
[89 103]
[90 102]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
