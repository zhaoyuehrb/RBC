%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUUCACGUAGACCUUGUCAGGAAAUUGGUCACUAUCCAUCUAGGCCCUAGAAGUGAGAGGAGGAAUCUUACGAACUCAUUUUCUAGUUGCUUUGUAUUCAAAUCUUAGUUGUUAAUUAUCUUGUUCUAGUAAUCACCUAAAAUAUUAGACACUUAAA\
) } def
/len { sequence length } bind def

/coor [
[214.59654236 411.07495117]
[208.01208496 397.59735107]
[201.42764282 384.11978149]
[194.84320068 370.64221191]
[189.05055237 365.98794556]
[188.26477051 356.83267212]
[181.94787598 343.22763062]
[176.24832153 338.45983887]
[175.64356995 329.29083252]
[169.59671021 315.56365967]
[163.54986572 301.83645630]
[157.50300598 288.10928345]
[150.31272888 287.25924683]
[143.81600952 283.91104126]
[138.85948181 278.44702148]
[136.10778809 271.52859497]
[135.95472717 264.01617432]
[138.46766663 256.86233521]
[143.37286377 250.99090576]
[138.70942688 236.73425293]
[134.04600525 222.47758484]
[129.38256836 208.22091675]
[124.71913147 193.96426392]
[119.91508484 179.75436401]
[114.97089386 165.59262085]
[110.02670288 151.43087769]
[105.08250427 137.26913452]
[100.13831329 123.10739899]
[95.19411469 108.94565582]
[89.74742889 102.94102478]
[90.29515076 94.45500183]
[85.63172150 80.19834137]
[80.82766724 65.98844147]
[75.88347626 51.82670212]
[70.93928528 37.66495895]
[52.19342422 38.11000443]
[34.41341782 32.22337341]
[19.67147064 20.70674515]
[9.68045425 4.91702747]
[5.59489536 -13.29347706]
[7.87757349 -31.79437828]
[16.24715233 -48.42641830]
[29.71275902 -61.25348282]
[23.12831497 -74.73105621]
[16.54386902 -88.20863342]
[9.95942402 -101.68621063]
[-5.53953218 -111.58356476]
[-3.70723820 -129.01383972]
[-10.55667686 -142.35868835]
[-17.40611458 -155.70355225]
[-24.25555420 -169.04840088]
[-31.10499191 -182.39326477]
[-37.95442963 -195.73811340]
[-44.80387115 -209.08297729]
[-51.78480911 -222.35951233]
[-58.89656830 -235.56643677]
[-66.00832367 -248.77336121]
[-73.12007904 -261.98028564]
[-80.87527466 -274.81994629]
[-89.25497437 -287.26104736]
[-97.63467407 -299.70211792]
[-106.01437378 -312.14321899]
[-120.97858429 -318.85174561]
[-122.38153839 -335.19076538]
[-108.77999115 -344.35211182]
[-94.16605377 -336.91134644]
[-93.57328796 -320.52291870]
[-85.19358826 -308.08181763]
[-76.81388855 -295.64074707]
[-68.43418884 -283.19964600]
[-62.75891495 -297.08459473]
[-48.42309189 -301.49865723]
[-35.92067337 -293.21075439]
[-34.40355682 -278.28765869]
[-44.98228073 -267.65325928]
[-59.91315842 -269.09204102]
[-52.80139923 -255.88511658]
[-45.68964005 -242.67819214]
[-38.57788086 -229.47126770]
[-32.60588837 -225.04946899]
[-31.45901299 -215.93240356]
[-24.60957527 -202.58755493]
[-17.76013565 -189.24269104]
[-10.91069794 -175.89784241]
[-4.06125879 -162.55297852]
[2.78817964 -149.20812988]
[9.63761806 -135.86326599]
[21.08160782 -131.84222412]
[26.88481331 -120.73554230]
[23.43700218 -108.27066040]
[30.02144623 -94.79308319]
[36.60589218 -81.31550598]
[43.19033813 -67.83792877]
[54.50562668 -70.28106689]
[66.08949280 -70.27471924]
[77.41738892 -67.81587219]
[87.97568512 -63.01262665]
[97.28489685 -56.07946014]
[104.92152405 -47.32767105]
[110.53727722 -37.15137100]
[113.87496185 -26.00975800]
[114.78027344 -14.40639019]
[113.20891571 -2.86642718]
[109.22876740 8.08713818]
[103.01692963 17.95718193]
[94.85189819 26.29501343]
[85.10102844 32.72076416]
[90.04521942 46.88250732]
[94.98941040 61.04425049]
[100.19092560 66.35096741]
[99.88838196 75.53490448]
[104.55181122 89.79156494]
[109.35585785 104.00146484]
[114.30005646 118.16320038]
[119.24424744 132.32495117]
[124.18843842 146.48669434]
[129.13262939 160.64843750]
[134.07682800 174.81018066]
[139.89012146 181.92648315]
[138.97579956 189.30082703]
[143.63923645 203.55749512]
[148.30265808 217.81414795]
[152.96609497 232.07081604]
[157.62953186 246.32746887]
[176.22158813 260.17547607]
[171.23019409 282.06243896]
[177.27705383 295.78961182]
[183.32389832 309.51681519]
[189.37075806 323.24398804]
[195.55291748 336.91076660]
[201.86979675 350.51580811]
[208.32078552 364.05776978]
[214.90522766 377.53533936]
[221.48966980 391.01290894]
[228.07411194 404.49050903]
[251.06257629 409.73004150]
[262.75656128 429.90808105]
[256.02343750 451.96893311]
[264.64730835 464.24203491]
[273.27117920 476.51510620]
[281.89505005 488.78820801]
[296.98886108 495.19979858]
[298.71435547 511.50790405]
[285.29647827 520.93615723]
[270.53839111 513.78558350]
[269.62194824 497.41207886]
[260.99807739 485.13897705]
[252.37420654 472.86587524]
[243.75035095 460.59280396]
[236.69567871 462.27413940]
[229.42263794 462.13729858]
[222.39367676 460.17999268]
[216.05848694 456.51596069]
[210.82521057 451.36849976]
[207.03421021 445.05694580]
[204.93586731 437.97668457]
[204.67411804 430.57458496]
[206.27664185 423.32070923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 135]
[2 134]
[3 133]
[4 132]
[6 131]
[7 130]
[9 129]
[10 128]
[11 127]
[12 126]
[19 124]
[20 123]
[21 122]
[22 121]
[23 120]
[24 118]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[31 112]
[32 111]
[33 109]
[34 108]
[35 107]
[43 93]
[44 92]
[45 91]
[46 90]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[53 82]
[54 81]
[55 79]
[56 78]
[57 77]
[58 76]
[59 70]
[60 69]
[61 68]
[62 67]
[138 149]
[139 148]
[140 147]
[141 146]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
