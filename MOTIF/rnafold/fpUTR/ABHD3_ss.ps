%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGAAGCCGCGCUCCGCCAGGCAGGAGACACUGUGGUCGGGAGUAGGCAGCGGCGCCGCGUCCGCUCUCGCCCGCUCUCGCCCGCUCGCCAGCCGGCUCUCCUCCCGCCGCAGGACCCGCGCGCCGCGCUCGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[95.98819733 188.94725037]
[84.44425201 199.18154907]
[69.19629669 201.52748108]
[55.10989380 195.23646545]
[46.67996979 182.31593323]
[46.59647751 166.88879395]
[54.88606262 153.87779236]
[68.90354919 147.43467712]
[70.90284729 132.56851196]
[72.90215302 117.70235443]
[74.44843292 109.65910339]
[77.96601868 103.19869995]
[82.83237457 98.74296570]
[88.34683228 96.51815796]
[93.78573608 96.54354095]
[90.79794312 81.84411621]
[87.81015015 67.14469147]
[84.65879059 52.47946167]
[81.34426117 37.85025024]
[66.40002441 28.83156395]
[62.63639069 12.13242245]
[71.89579010 -1.86315155]
[68.25614929 -16.41488838]
[57.40156937 -27.92525482]
[61.81946945 -42.14958191]
[58.17983246 -56.70131683]
[54.54019547 -71.25305176]
[50.90055847 -85.80479431]
[47.26092148 -100.35652924]
[43.62128448 -114.90826416]
[27.42599869 -111.80597687]
[12.80780411 -118.00578308]
[4.45232487 -130.78401184]
[4.62358809 -145.43955994]
[12.58581352 -157.01043701]
[6.42376089 -170.68629456]
[0.26170826 -184.36215210]
[-5.90034437 -198.03800964]
[-18.62378502 -207.44145203]
[-16.79791069 -222.22372437]
[-22.95996284 -235.89958191]
[-29.12201500 -249.57543945]
[-35.28406906 -263.25128174]
[-41.44612122 -276.92715454]
[-47.60817337 -290.60302734]
[-53.77022552 -304.27886963]
[-66.49366760 -313.68231201]
[-64.66779327 -328.46456909]
[-70.82984161 -342.14044189]
[-76.99189758 -355.81628418]
[-83.60749054 -369.27862549]
[-90.66922760 -382.51235962]
[-97.73096466 -395.74609375]
[-104.79270172 -408.97982788]
[-111.85443878 -422.21356201]
[-119.06316376 -435.36782837]
[-126.41798401 -448.44094849]
[-139.45388794 -459.28076172]
[-132.64639282 -474.80798340]
[-115.84148407 -472.56488037]
[-113.34486389 -455.79577637]
[-105.99004364 -442.72262573]
[-99.91992950 -438.40045166]
[-98.62070465 -429.27529907]
[-91.55895996 -416.04156494]
[-84.49722290 -402.80783081]
[-77.43548584 -389.57409668]
[-70.37374878 -376.34036255]
[-67.04071808 -374.97329712]
[-64.22991180 -371.87878418]
[-62.76681900 -367.33270264]
[-63.31604004 -361.97833252]
[-57.15398788 -348.30249023]
[-50.99193192 -334.62661743]
[-38.70924377 -326.20138550]
[-40.09436798 -310.44091797]
[-33.93231583 -296.76507568]
[-27.77026176 -283.08920288]
[-21.60820961 -269.41336060]
[-15.44615746 -255.73748779]
[-9.28410435 -242.06163025]
[-3.12205243 -228.38577271]
[9.16063690 -219.96052551]
[7.77551460 -204.20007324]
[13.93756676 -190.52420044]
[20.09961891 -176.84834290]
[26.26167107 -163.17248535]
[38.27688599 -163.15180969]
[49.55730438 -156.97438049]
[56.97361374 -145.44580078]
[70.12786102 -152.65452576]
[83.28211212 -159.86326599]
[91.32897186 -174.15242004]
[107.72784424 -174.05761719]
[115.60897827 -159.67639160]
[106.86493683 -145.80290222]
[90.49083710 -146.70901489]
[77.33658600 -139.50028992]
[64.18234253 -132.29156494]
[58.17301941 -118.54790497]
[61.81265640 -103.99616241]
[65.45229340 -89.44442749]
[69.09193420 -74.89269257]
[72.73156738 -60.34095383]
[76.37120819 -45.78921890]
[86.96546173 -35.31968689]
[82.80789185 -20.05452538]
[86.44752502 -5.50278854]
[98.35470581 -0.45728126]
[105.26339722 10.70479298]
[104.44430542 24.00181961]
[95.97347260 34.53571320]
[99.28800964 49.16492462]
[103.87077332 55.04078293]
[102.50957489 64.15689850]
[105.49736786 78.85632324]
[108.48516083 93.55574799]
[114.49447632 107.29940796]
[123.25708771 119.47383118]
[132.01969910 131.64825439]
[140.78231812 143.82267761]
[155.12384033 150.50335693]
[156.27897644 165.35310364]
[165.04158020 177.52752686]
[173.80419922 189.70195007]
[187.96440125 199.02531433]
[182.92532349 215.21308899]
[165.97521973 214.85215759]
[161.62977600 198.46455383]
[152.86715698 186.29013062]
[144.10455322 174.11570740]
[130.38978577 168.30583191]
[128.60789490 152.58529663]
[119.84528351 140.41087341]
[111.08266449 128.23645020]
[102.32005310 116.06201935]
[87.76831818 119.70166016]
[85.76901245 134.56782532]
[83.76970673 149.43399048]
[95.58689880 159.35151672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 139]
[9 138]
[10 137]
[15 117]
[16 116]
[17 115]
[18 113]
[19 112]
[22 108]
[23 107]
[25 105]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[35 87]
[36 86]
[37 85]
[38 84]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[46 76]
[48 74]
[49 73]
[50 72]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 62]
[57 61]
[90 99]
[91 98]
[92 97]
[118 136]
[119 135]
[120 134]
[121 133]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
