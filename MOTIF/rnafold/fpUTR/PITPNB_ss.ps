%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCGAUGGUGGCUCGGGGGGGCAGGGAGGCGGGGCCGCGCAGGCGCUGUGAGAGGCGGUAGCGGCGGCGGCGGCGGUGGUAUCGGCGGCAGCUGUGAGGGGGUUCCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[122.81120300 150.08242798]
[109.10131073 154.72140503]
[94.54193878 155.64646912]
[80.12921143 152.73434448]
[73.46453857 166.17243958]
[66.79985809 179.61051941]
[68.37492371 195.93385315]
[54.87067795 205.23802185]
[40.17913818 197.95167542]
[39.41369629 181.57040405]
[53.36177826 172.94584656]
[60.02645111 159.50776672]
[66.69112396 146.06967163]
[55.80119705 135.75418091]
[42.74363708 143.13661194]
[29.68608093 150.51902771]
[16.62852287 157.90145874]
[8.77174091 172.29600525]
[-7.62694883 172.41854858]
[-15.69797993 158.14303589]
[-7.13856792 144.15487671]
[9.24609852 144.84390259]
[22.30365562 137.46147156]
[35.36121368 130.07905579]
[48.41876984 122.69662476]
[44.43806839 105.18567657]
[46.18197250 87.48980713]
[53.36073303 71.41441345]
[65.13587952 58.56417465]
[80.21666718 50.18295670]
[97.00094604 47.03384399]
[113.74518585 49.33074188]
[128.74552917 56.72760010]
[138.76234436 45.56232071]
[148.77915955 34.39704514]
[158.79597473 23.23176956]
[168.81278992 12.06649399]
[178.82960510 0.90121824]
[188.84642029 -10.26405811]
[191.74832153 -31.40552711]
[211.40173340 -37.45913315]
[220.47933960 -49.40052795]
[229.55696106 -61.34192276]
[238.63456726 -73.28331757]
[247.71218872 -85.22471619]
[245.77658081 -100.68082428]
[255.15267944 -112.66178131]
[269.89965820 -114.41182709]
[278.97726440 -126.35322571]
[288.05487061 -138.29461670]
[297.13247681 -150.23602295]
[306.21011353 -162.17741394]
[305.25686646 -175.12748718]
[313.17376709 -184.90715027]
[325.24084473 -186.56080627]
[334.63851929 -198.25201416]
[337.25390625 -213.85554504]
[351.25820923 -218.92785645]
[360.65585327 -230.61904907]
[355.21884155 -244.91542053]
[357.65164185 -259.91470337]
[367.20205688 -271.60467529]
[381.22766113 -276.90921021]
[395.92626953 -274.49737549]
[405.32391357 -286.18859863]
[407.93930054 -301.79211426]
[421.94360352 -306.86444092]
[431.34127808 -318.55563354]
[433.31207275 -334.83593750]
[448.50070190 -341.01956177]
[461.28240967 -330.74533081]
[458.50848389 -314.58248901]
[443.03247070 -309.15798950]
[433.63482666 -297.46676636]
[431.69161987 -282.69946289]
[417.01510620 -276.79092407]
[407.61746216 -265.09973145]
[413.13265991 -251.26325989]
[410.96722412 -236.42524719]
[401.60360718 -224.58509827]
[387.47799683 -218.98477173]
[372.34707642 -221.22140503]
[362.94943237 -209.53019714]
[361.00619507 -194.76290894]
[346.32971191 -188.85435486]
[336.93206787 -177.16316223]
[335.25576782 -159.75175476]
[318.15148926 -153.09979248]
[309.07388306 -141.15840149]
[299.99627686 -129.21701050]
[290.91867065 -117.27561188]
[281.84103394 -105.33421326]
[284.10000610 -90.65659332]
[275.06414795 -78.41699982]
[259.65359497 -76.14710236]
[250.57597351 -64.20570374]
[241.49835205 -52.26430893]
[232.42074585 -40.32291412]
[223.34312439 -28.38151932]
[226.01193237 -19.67052269]
[224.26982117 -10.58649349]
[218.39398193 -3.26405263]
[209.64796448 0.51465976]
[200.01170349 -0.24724142]
[189.99488831 10.91803455]
[179.97805786 22.08331108]
[169.96124268 33.24858856]
[159.94442749 44.41386414]
[149.92761230 55.57913971]
[139.91079712 66.74441528]
[147.57504272 78.05982971]
[152.07351685 91.08696747]
[153.04066467 104.95048523]
[150.35035706 118.70226288]
[144.12866211 131.38623047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[14 25]
[15 24]
[16 23]
[17 22]
[33 110]
[34 109]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[55 86]
[56 85]
[58 83]
[59 82]
[64 77]
[65 76]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
