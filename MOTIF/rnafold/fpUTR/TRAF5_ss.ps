%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCGCCGCCGCCGCCGGCCGCAGCCAGGAGCAGCAGCCGCGCCUGCAGACCGGCCUCGCGGAGCCCGCGCGCCGAGCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[128.53456116 252.37544250]
[125.27310181 237.73431396]
[122.01165009 223.09317017]
[118.75019836 208.45204163]
[108.43071747 197.71157837]
[112.98233032 182.55923462]
[109.72087860 167.91810608]
[106.19256592 153.33897400]
[102.39856720 138.82672119]
[98.60456085 124.31446075]
[81.55422974 115.90263367]
[75.74515533 97.79938507]
[84.71752167 81.03724670]
[79.35905457 67.02700806]
[74.00059509 53.01676178]
[68.64212799 39.00652313]
[54.10641479 27.88293457]
[57.26466370 10.72412872]
[51.39809418 -3.08106446]
[45.53152466 -16.88625717]
[39.66495132 -30.69145012]
[33.79838181 -44.49664307]
[17.47451210 -46.28589630]
[4.31442881 -55.95204163]
[-2.20107245 -70.82280731]
[-0.40669870 -86.86519623]
[9.12281990 -99.77915192]
[2.75596976 -113.36087036]
[-3.61088085 -126.94259644]
[-9.97773170 -140.52432251]
[-22.84103203 -149.73550415]
[-21.23748207 -164.54354858]
[-27.60433388 -178.12527466]
[-42.76272202 -181.96678162]
[-51.86345673 -194.68333435]
[-50.60945129 -210.27055359]
[-39.59280014 -221.36863708]
[-24.01523781 -222.73741150]
[-11.23200798 -213.73057556]
[-7.27896357 -198.60089111]
[-14.02260971 -184.49212646]
[-7.65575933 -170.91040039]
[4.75214148 -162.67065430]
[3.60399222 -146.89117432]
[9.97084236 -133.30944824]
[16.33769417 -119.72772217]
[22.70454407 -106.14599609]
[36.48420334 -105.85705566]
[48.83125687 -99.58377838]
[57.27052307 -88.51884460]
[60.08211899 -74.82183838]
[56.65170670 -61.19784164]
[47.60357285 -50.36321259]
[53.47014618 -36.55802155]
[59.33671570 -22.75282860]
[65.20328522 -8.94763565]
[71.06985474 4.85755730]
[82.28493500 9.77107525]
[87.21454620 21.41909218]
[82.65237427 33.64805984]
[88.01083374 47.65829849]
[93.36930084 61.66854095]
[98.72776031 75.67878723]
[109.15230560 77.43064880]
[117.85266876 83.43430328]
[123.18981171 92.55871582]
[124.15829468 103.08497620]
[120.57565308 113.03006744]
[113.11682129 120.52046204]
[116.91082001 135.03271484]
[120.70481873 149.54496765]
[126.02037811 157.27018738]
[124.36202240 164.65664673]
[127.62347412 179.29779053]
[138.17623901 191.08547974]
[133.39134216 205.19058228]
[136.65278625 219.83172607]
[139.91424561 234.47285461]
[143.17568970 249.11399841]
[157.13616943 256.15948486]
[163.25422668 270.55059814]
[158.64108276 285.49224854]
[145.47492981 293.92947388]
[129.97244263 291.87844849]
[119.45339966 280.30764771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[6 74]
[7 73]
[8 71]
[9 70]
[10 69]
[13 63]
[14 62]
[15 61]
[16 60]
[18 57]
[19 56]
[20 55]
[21 54]
[22 53]
[27 47]
[28 46]
[29 45]
[30 44]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
