%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGUAGGCGGAGACAGAGAGGCUGUAUUUCAGUGCAGCCUGCCAGACCUCUUCUGGAGGAAGACUGGACAAAGGGGGUCACACAUUCCUUCCAUACGGUUGAGCCUCUACCUGCCUGGUGCUGGUCACAGUUCAGCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[123.68595886 245.79570007]
[133.01675415 234.05107117]
[146.46429443 227.40548706]
[161.46171570 227.12745667]
[175.14627075 233.27000427]
[167.69323730 220.25262451]
[160.24018860 207.23524475]
[152.78715515 194.21786499]
[145.33410645 181.20048523]
[132.29568481 173.99986267]
[132.15342712 158.17930603]
[124.70038605 145.16192627]
[117.24734497 132.14454651]
[109.79430389 119.12715912]
[112.94586182 133.79234314]
[105.44985962 146.78503418]
[91.17649078 151.39706421]
[77.49512482 145.24725342]
[71.46948242 131.51074219]
[76.21062469 117.27973175]
[89.27270508 109.90142059]
[74.58932495 112.96709442]
[59.90594864 116.03276825]
[45.22256851 119.09844208]
[30.53918839 122.16411591]
[15.85580826 125.22978973]
[1.17242861 128.29547119]
[-13.51095104 131.36114502]
[-28.19433212 134.42681885]
[-40.05355835 145.75335693]
[-55.71409607 140.88719177]
[-59.06572342 124.83419800]
[-46.66057587 114.10832214]
[-31.26000404 119.74343109]
[-16.57662392 116.67775726]
[-1.89324474 113.61208344]
[12.79013538 110.54640961]
[27.47351456 107.48073578]
[42.15689468 104.41506195]
[56.84027481 101.34938812]
[71.52365875 98.28371429]
[86.20703125 95.21804047]
[96.16323090 83.99867249]
[97.46157074 69.05496979]
[87.57154846 57.02063751]
[89.10112762 41.88409042]
[100.63497162 32.52962875]
[101.93331909 17.58592415]
[103.23165894 2.64221954]
[104.52999878 -12.30148506]
[94.02709961 -19.23509026]
[87.53202057 -29.93000793]
[86.23765564 -42.30271149]
[90.33070374 -53.97355270]
[98.96763611 -62.72443008]
[110.44771576 -66.92032623]
[112.39218903 -81.79376221]
[114.33665466 -96.66719055]
[116.28112030 -111.54062653]
[118.06434631 -126.43424988]
[119.68613434 -141.34632874]
[121.30792236 -156.25839233]
[122.92970276 -171.17045593]
[113.31336212 -180.66442871]
[110.97856140 -193.77644348]
[116.56082153 -205.65318298]
[127.80689240 -212.02998352]
[129.75135803 -226.90342712]
[131.53459167 -241.79704285]
[133.15637207 -256.70910645]
[134.77815247 -271.62118530]
[123.82618713 -282.78311157]
[122.66278839 -298.37734985]
[131.83726501 -311.04080200]
[147.01773071 -314.79415894]
[161.03640747 -307.86520386]
[167.27413940 -293.52557373]
[162.78562927 -278.54602051]
[149.69023132 -269.99938965]
[148.06843567 -255.08732605]
[146.44665527 -240.17526245]
[148.86830139 -233.13343811]
[144.62478638 -224.95895386]
[142.68032837 -210.08552551]
[153.48611450 -197.24224854]
[151.65942383 -180.21882629]
[137.84178162 -169.54867554]
[136.21998596 -154.63661194]
[134.59820557 -139.72453308]
[132.97642517 -124.81246948]
[135.39805603 -117.77064514]
[131.15455627 -109.59616089]
[129.21008301 -94.72272491]
[127.26561737 -79.84928894]
[125.32115173 -64.97586060]
[138.67199707 -53.50596237]
[142.55393982 -36.17794800]
[135.24519348 -19.82292175]
[119.47370911 -11.00314236]
[118.17536163 3.94056225]
[116.87702179 18.88426590]
[115.57868195 33.82797241]
[125.32640839 45.03142548]
[124.22257996 60.20496368]
[112.40527344 70.35331726]
[111.10693359 85.29701996]
[122.81167603 111.67411804]
[130.26472473 124.69149780]
[137.71775818 137.70887756]
[145.17080688 150.72625732]
[158.74230957 158.85797119]
[158.35148621 173.74743652]
[165.80453491 186.76481628]
[173.25756836 199.78219604]
[180.71061707 212.79957581]
[188.16365051 225.81695557]
[197.24127197 237.75836182]
[207.79026794 248.42225647]
[218.33926392 259.08615112]
[228.88825989 269.75006104]
[237.21347046 273.68963623]
[239.54714966 280.76110840]
[249.86264038 291.65103149]
[260.17813110 302.54095459]
[270.49362183 313.43090820]
[286.35882568 317.58148193]
[290.43536377 333.46588135]
[278.52966309 344.74356079]
[262.88928223 339.81301880]
[259.60369873 323.74639893]
[249.28819275 312.85644531]
[238.97270203 301.96652222]
[228.65721130 291.07659912]
[218.22436523 280.29904175]
[207.67536926 269.63513184]
[197.12637329 258.97125244]
[186.57737732 248.30735779]
[188.83500671 263.13647461]
[184.55484009 277.51284790]
[174.55387878 288.69232178]
[160.74108887 294.54098511]
[145.75303650 293.94241333]
[132.45062256 287.01086426]
[123.37302399 275.06948853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 116]
[6 115]
[7 114]
[8 113]
[9 112]
[11 110]
[12 109]
[13 108]
[14 107]
[21 42]
[22 41]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[43 106]
[44 105]
[47 102]
[48 101]
[49 100]
[50 99]
[56 95]
[57 94]
[58 93]
[59 92]
[60 90]
[61 89]
[62 88]
[63 87]
[67 84]
[68 83]
[69 81]
[70 80]
[71 79]
[117 137]
[118 136]
[119 135]
[120 134]
[122 133]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
