%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:56:41 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (TYMSOS)
} def

/sequence { (\
GGAGGAGGGGCCAAAGCCAGGACUUUGAGACCGGCGCGCGGUCAAGCCCAGGCAGCUCUCCCUAACCCUCCAGCACUGGGCAAACGCUGCCCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 63 0.006343936 ubox
1 67 0.008725257 ubox
1 68 0.009248151 ubox
1 71 0.998917620 ubox
2 62 0.006717960 ubox
2 66 0.008742314 ubox
2 67 0.009237305 ubox
2 70 0.999668722 ubox
3 63 0.013490916 ubox
3 69 0.999502475 ubox
4 61 0.012486922 ubox
4 62 0.015023784 ubox
4 67 0.067922806 ubox
4 68 0.997270704 ubox
4 71 0.018867540 ubox
5 60 0.013688230 ubox
5 61 0.015272819 ubox
5 62 0.003396083 ubox
5 66 0.095567388 ubox
5 67 0.994314362 ubox
5 70 0.018888070 ubox
6 59 0.015377025 ubox
6 63 0.894124834 ubox
6 69 0.018878002 ubox
7 58 0.014142491 ubox
7 59 0.034607072 ubox
7 60 0.012402522 ubox
7 61 0.041424622 ubox
7 62 0.906893896 ubox
7 63 0.410955015 ubox
7 68 0.018838858 ubox
8 49 0.014808042 ubox
8 57 0.012673908 ubox
8 58 0.040324522 ubox
8 59 0.009493583 ubox
8 60 0.044742168 ubox
8 61 0.906606538 ubox
8 62 0.415962287 ubox
8 63 0.019209709 ubox
8 67 0.018683573 ubox
9 18 0.005716696 ubox
9 48 0.014888326 ubox
9 56 0.011119533 ubox
9 57 0.059967837 ubox
9 58 0.017207115 ubox
9 59 0.046119217 ubox
9 60 0.905016652 ubox
9 61 0.416073325 ubox
9 62 0.019592867 ubox
9 66 0.018148485 ubox
10 17 0.007146990 ubox
10 47 0.014950375 ubox
10 53 0.004899528 ubox
10 56 0.183303827 ubox
10 57 0.009121572 ubox
10 58 0.190289960 ubox
10 59 0.794138642 ubox
10 60 0.415194529 ubox
10 61 0.019550507 ubox
11 16 0.007185851 ubox
11 21 0.004263841 ubox
11 46 0.014933531 ubox
11 52 0.004973394 ubox
11 55 0.185674864 ubox
12 20 0.004277694 ubox
12 27 0.054821500 ubox
12 51 0.004851305 ubox
13 26 0.054943096 ubox
14 25 0.054931001 ubox
15 24 0.054965130 ubox
15 57 0.023444223 ubox
15 59 0.006604857 ubox
16 23 0.054708807 ubox
16 35 0.003221019 ubox
16 53 0.996769605 ubox
16 56 0.018506020 ubox
16 58 0.003193408 ubox
17 34 0.003223928 ubox
17 52 0.998257938 ubox
17 55 0.016588562 ubox
18 27 0.007461222 ubox
18 33 0.003212042 ubox
18 51 0.996635649 ubox
19 26 0.007335236 ubox
20 25 0.005962871 ubox
20 32 0.003485556 ubox
20 48 0.325548456 ubox
20 49 0.941526255 ubox
21 31 0.003482073 ubox
21 47 0.329272421 ubox
21 48 0.940821961 ubox
23 29 0.003223116 ubox
23 46 0.985844953 ubox
24 28 0.003438234 ubox
24 45 0.979143410 ubox
24 46 0.085630853 ubox
25 44 0.945558689 ubox
25 45 0.139738767 ubox
25 46 0.074440621 ubox
26 44 0.163633381 ubox
26 45 0.080083396 ubox
27 43 0.148385553 ubox
28 42 0.110108344 ubox
29 43 0.987785155 ubox
30 42 0.993086010 ubox
31 41 0.999905373 ubox
32 38 0.006535985 ubox
32 40 0.999937175 ubox
33 37 0.006915114 ubox
33 39 0.997951197 ubox
45 57 0.022059550 ubox
46 53 0.047431354 ubox
46 56 0.023348084 ubox
47 52 0.047461254 ubox
47 55 0.023322304 ubox
50 57 0.006085792 ubox
50 59 0.004711160 ubox
50 63 0.014207387 ubox
51 56 0.006484844 ubox
51 58 0.005158230 ubox
51 62 0.014918009 ubox
52 57 0.003620395 ubox
52 61 0.014891155 ubox
54 63 0.006463973 ubox
55 62 0.006720962 ubox
72 77 0.016954876 ubox
73 90 0.012243623 ubox
74 89 0.012271753 ubox
75 88 0.011686404 ubox
77 86 0.010835775 ubox
77 93 0.554109837 ubox
78 85 0.011200733 ubox
78 92 0.999161398 ubox
79 88 0.004939252 ubox
79 91 0.999893451 ubox
79 92 0.004045070 ubox
80 87 0.006691335 ubox
80 90 0.999900127 ubox
81 86 0.006987965 ubox
81 89 0.999847639 ubox
82 88 0.951963123 ubox
1 71 0.9500000 lbox
2 70 0.9500000 lbox
3 69 0.9500000 lbox
4 68 0.9500000 lbox
5 67 0.9500000 lbox
6 63 0.9500000 lbox
7 62 0.9500000 lbox
8 61 0.9500000 lbox
9 60 0.9500000 lbox
10 59 0.9500000 lbox
16 53 0.9500000 lbox
17 52 0.9500000 lbox
18 51 0.9500000 lbox
20 49 0.9500000 lbox
21 48 0.9500000 lbox
23 46 0.9500000 lbox
24 45 0.9500000 lbox
25 44 0.9500000 lbox
29 43 0.9500000 lbox
30 42 0.9500000 lbox
31 41 0.9500000 lbox
32 40 0.9500000 lbox
33 39 0.9500000 lbox
78 92 0.9500000 lbox
79 91 0.9500000 lbox
80 90 0.9500000 lbox
81 89 0.9500000 lbox
82 88 0.9500000 lbox
showpage
end
%%EOF
