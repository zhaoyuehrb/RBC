%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCCUCGCCGGCGCCGUCAAGUAGCCUGGGGGACAGGCCGGCGCGGCUGGGAGCGGGUGGGCGGCCGGGAGGCCGGAGCAGCACGGCCGCAGGACCUGGAGCUCCGGCUGCGUCUUCCCGCAGCGCUACCCGCC\
) } def
/len { sequence length } bind def

/coor [
[87.92534637 206.86370850]
[90.54468536 187.65982056]
[90.87886810 172.66354370]
[91.21305084 157.66726685]
[91.54723358 142.67098999]
[91.88142395 127.67471313]
[92.21560669 112.67843628]
[83.77288818 102.67714691]
[86.14176178 88.48889923]
[71.21709442 89.99033356]
[56.29242325 91.49177551]
[43.33602905 100.57154846]
[29.89820480 94.14705658]
[14.97353840 95.64849091]
[0.04887077 97.14992523]
[-14.87579632 98.65135956]
[-23.17933273 102.65232086]
[-30.14914322 100.01618195]
[-45.10355759 101.18474579]
[-60.05796814 102.35330200]
[-75.01238251 103.52185822]
[-89.96679688 104.69041443]
[-78.90842438 114.82512665]
[-76.76606750 129.67134094]
[-84.50801086 142.51901245]
[-98.63511658 147.56132507]
[-112.76232910 142.51930237]
[-120.50454712 129.67181396]
[-118.36250305 114.82554626]
[-107.30390930 104.69041443]
[-122.25832367 103.52185822]
[-137.21273804 102.35330200]
[-152.16714478 101.18474579]
[-167.12156677 100.01618195]
[-180.20034790 109.30730438]
[-195.57849121 104.73651886]
[-201.45921326 89.81013489]
[-193.33129883 75.97840881]
[-177.42980957 73.85184479]
[-165.95300293 85.06177521]
[-150.99859619 86.23033142]
[-136.04417419 87.39888763]
[-121.08976746 88.56744385]
[-106.13535309 89.73600006]
[-91.13535309 89.73600006]
[-76.18093872 88.56744385]
[-61.22652435 87.39888763]
[-46.27211380 86.23033142]
[-31.31769943 85.06177521]
[-16.37723160 83.72669220]
[-1.45256460 82.22525787]
[13.47210217 80.72382355]
[28.39677048 79.22238922]
[40.28565216 70.25000000]
[54.79098892 76.56710815]
[69.71565247 75.06566620]
[84.64031982 73.56423187]
[99.06231689 69.44038391]
[112.52463531 62.82479477]
[125.98694611 56.20920563]
[139.44926453 49.59361267]
[149.29394531 34.07632065]
[166.71981812 35.83604050]
[180.03140259 28.92216682]
[193.34298706 22.00829124]
[206.65458679 15.09441757]
[219.96617126 8.18054390]
[228.64666748 -5.04668283]
[243.50765991 -4.04661703]
[256.81924438 -10.96049118]
[265.49975586 -24.18771744]
[280.36074829 -23.18765259]
[293.67233276 -30.10152626]
[296.38098145 -40.74077225]
[304.36538696 -47.95080948]
[314.78851318 -49.49869919]
[324.12420654 -45.10758209]
[337.73059082 -51.42160416]
[351.33694458 -57.73562622]
[364.94329834 -64.04964447]
[378.54968262 -70.36367035]
[392.15603638 -76.67768860]
[405.76239014 -82.99171448]
[419.36874390 -89.30573273]
[432.97512817 -95.61975098]
[438.48797607 -110.18842316]
[452.37670898 -116.39791107]
[466.23175049 -111.05245972]
[479.83810425 -117.36647797]
[486.36978149 -123.86983490]
[493.81866455 -123.66582489]
[507.56231689 -129.67514038]
[521.23815918 -135.83720398]
[534.84454346 -142.15121460]
[546.66699219 -154.30303955]
[561.61663818 -146.30661011]
[558.07122803 -129.72752380]
[541.15856934 -128.54486084]
[527.55218506 -122.23083496]
[522.77026367 -116.51588440]
[513.57165527 -115.93148804]
[499.82797241 -109.92217255]
[486.15213013 -103.76011658]
[472.54577637 -97.44609833]
[467.68264771 -83.41450500]
[453.97378540 -76.81735992]
[439.28915405 -82.01338959]
[425.68276978 -75.69937134]
[412.07641602 -69.38534546]
[398.47006226 -63.07132721]
[384.86367798 -56.75730515]
[371.25732422 -50.44328308]
[357.65097046 -44.12926102]
[344.04458618 -37.81523895]
[330.43823242 -31.50121880]
[320.60305786 -14.90814400]
[300.58621216 -16.78993988]
[287.27462769 -9.87606525]
[279.54623413 2.85663486]
[263.73312378 2.35109568]
[250.42153931 9.26496983]
[242.69317627 21.99766922]
[226.88003540 21.49213028]
[213.56845093 28.40600395]
[200.25686646 35.31987762]
[186.94528198 42.23375320]
[173.63369751 49.14762878]
[169.65779114 60.62562180]
[158.55599976 66.47606659]
[146.06484985 63.05593109]
[132.60253906 69.67152405]
[119.14022064 76.28710938]
[105.67790222 82.90270233]
[116.37581635 98.47723389]
[107.21188354 113.01261902]
[106.87770081 128.00889587]
[106.54351044 143.00517273]
[106.20932770 158.00144958]
[105.87514496 172.99772644]
[105.54096222 187.99400330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[5 137]
[6 136]
[7 135]
[9 57]
[10 56]
[11 55]
[13 53]
[14 52]
[15 51]
[16 50]
[18 49]
[19 48]
[20 47]
[21 46]
[22 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[58 133]
[59 132]
[60 131]
[61 130]
[63 127]
[64 126]
[65 125]
[66 124]
[67 123]
[69 121]
[70 120]
[72 118]
[73 117]
[77 115]
[78 114]
[79 113]
[80 112]
[81 111]
[82 110]
[83 109]
[84 108]
[85 107]
[88 104]
[89 103]
[91 102]
[92 101]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
