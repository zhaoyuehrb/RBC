%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGUGGGGAAGCGCAGGAGGCGGGGCUUUGCGUGAGUCACUGCCGGGCUCGGCGUGAGUCGCUGCGGGGCUGACGGGGUGGCAGUGCGGCGGGUUACGGCCUGGUCAGACCAUA\
) } def
/len { sequence length } bind def

/coor [
[111.70343781 145.88807678]
[114.28571320 131.11322021]
[106.26872253 143.79107666]
[98.25173187 156.46893311]
[90.23474884 169.14677429]
[82.21775818 181.82463074]
[74.20077515 194.50248718]
[77.91728973 209.86357117]
[69.61212921 223.30975342]
[54.21260834 226.86366272]
[40.85498047 218.41680908]
[37.46409225 202.98057556]
[46.05169678 189.71299744]
[61.52292252 186.48548889]
[69.53990936 173.80764771]
[77.55690002 161.12979126]
[85.57388306 148.45193481]
[93.59087372 135.77409363]
[101.60785675 123.09623718]
[87.66725159 116.32716370]
[82.61018372 103.66031647]
[67.99917603 100.26643372]
[53.38816833 96.87255096]
[38.77716064 93.47866821]
[24.16615105 90.08477783]
[9.51089668 86.88735962]
[-5.18596268 83.88697052]
[-19.88282204 80.88658142]
[-34.57968140 77.88619995]
[-49.27654266 74.88581085]
[-63.39950180 82.49643707]
[-78.09809875 76.06752777]
[-82.09682465 60.53080750]
[-72.32820129 47.80471039]
[-56.28588104 47.65161133]
[-46.27615738 60.18895340]
[-31.57929611 63.18933868]
[-16.88243675 66.18972778]
[-2.18557739 69.19010925]
[12.51128197 72.19049835]
[19.78914452 70.42227936]
[27.56003571 75.47377014]
[42.17104340 78.86766052]
[56.78205109 82.26154327]
[71.39305878 85.65542603]
[86.00406647 89.04930878]
[107.71965790 81.05059814]
[123.01276398 102.53654480]
[136.00314331 95.03654480]
[148.99353027 87.53654480]
[161.98390198 80.03654480]
[170.06655884 66.43576050]
[184.95735168 66.77282715]
[197.94772339 59.27282333]
[210.93811035 51.77282333]
[223.82662964 44.09910202]
[236.61097717 36.25304031]
[249.39530945 28.40697861]
[262.17965698 20.56091499]
[269.89422607 6.74803066]
[284.78869629 6.68518400]
[297.57302856 -1.16087806]
[310.35739136 -9.00693989]
[323.14172363 -16.85300255]
[335.92605591 -24.69906425]
[348.71038818 -32.54512787]
[361.49472046 -40.39118958]
[374.27908325 -48.23725128]
[378.06909180 -63.34597397]
[391.14599609 -71.12088013]
[405.52648926 -67.41456604]
[418.31085205 -75.26062775]
[431.09518433 -83.10668945]
[432.16793823 -98.58663940]
[442.16049194 -110.45796967]
[457.23049927 -114.15591431]
[471.58322144 -108.25853729]
[479.69973755 -95.03350067]
[478.45910645 -79.56610107]
[468.33837891 -67.80387115]
[453.22912598 -64.26962280]
[438.94125366 -70.32234955]
[426.15689087 -62.47628784]
[413.37255859 -54.63022614]
[410.16577148 -40.13015366]
[397.31240845 -31.99101448]
[382.12512207 -35.45291138]
[369.34078979 -27.60684967]
[356.55645752 -19.76078796]
[343.77212524 -11.91472626]
[330.98779297 -4.06866360]
[318.20343018 3.77739835]
[305.41909790 11.62346077]
[292.63476562 19.46952248]
[285.83459473 32.72120285]
[270.02569580 33.34525299]
[257.24136353 41.19131470]
[244.45703125 49.03738022]
[231.67269897 56.88344193]
[227.56433105 63.14564133]
[218.43811035 64.76320648]
[205.44772339 72.26320648]
[192.45735168 79.76320648]
[185.30386353 92.82753754]
[169.48390198 93.02693176]
[156.49353027 100.52693176]
[143.50314331 108.02693176]
[130.51277161 115.52693176]
[145.38082886 113.54181671]
[159.37068176 118.95327759]
[169.03273010 130.42694092]
[171.98448181 145.13365173]
[167.49810791 159.44702148]
[156.67987061 169.83766174]
[142.19729614 173.74346924]
[127.62152100 170.20133972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[48 108]
[49 107]
[50 106]
[51 105]
[53 103]
[54 102]
[55 101]
[56 99]
[57 98]
[58 97]
[59 96]
[61 94]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[67 88]
[68 87]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
