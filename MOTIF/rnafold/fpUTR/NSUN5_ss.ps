%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUUUGACCCCGGAAGUCCGGGCGGGCGCCGAGCCGGGUGCGUUUUGCCACAGAGCCGUAAAGGCGCGCGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[62.43089676 266.72763062]
[52.20039749 277.69741821]
[38.91835785 284.66790771]
[24.07866478 286.85504150]
[9.35039806 284.01281738]
[-3.60989499 276.46093750]
[-13.34451866 265.04879761]
[-18.75858116 251.05995178]
[-19.24314117 236.06777954]
[-14.74369717 221.75851440]
[-5.76816273 209.74333191]
[-20.57391739 212.14950562]
[-35.37966919 214.55566406]
[-50.18542480 216.96183777]
[-64.99118042 219.36801147]
[-77.34491730 230.15306091]
[-92.77224731 224.59162903]
[-95.40285492 208.40484619]
[-82.53059387 198.24427795]
[-67.39734650 204.56225586]
[-52.59159470 202.15608215]
[-37.78583908 199.74992371]
[-22.98008537 197.34375000]
[-8.17433167 194.93757629]
[5.10750818 187.96673584]
[15.49837399 177.14869690]
[18.73470497 162.60993958]
[33.87458038 158.01704407]
[44.26544571 147.19900513]
[54.65631104 136.38096619]
[65.04717255 125.56292725]
[75.43804169 114.74488831]
[71.35690308 100.52383423]
[74.91532898 86.16307068]
[85.16423035 75.49282837]
[99.37007141 71.35903931]
[113.74391937 74.86424255]
[124.13478851 64.04621124]
[134.52565002 53.22817230]
[144.01232910 41.60909653]
[152.53330994 29.26433945]
[161.05427551 16.91958046]
[163.45445251 7.81094360]
[170.17521667 4.25875044]
[179.18635559 -7.73289108]
[183.86788940 -24.02766228]
[200.82183838 -24.03992653]
[205.52693176 -7.75194502]
[191.17799377 1.27824283]
[182.16687012 13.26988411]
[173.39903259 25.44055176]
[164.87806702 37.78530884]
[156.35708618 50.13006973]
[156.94529724 53.14677048]
[156.19973755 56.60339737]
[153.93589783 59.91990662]
[150.21235657 62.45802689]
[145.34368896 63.61903763]
[134.95281982 74.43707275]
[124.56195831 85.25511169]
[128.64309692 99.47616577]
[125.08467102 113.83692932]
[114.83576965 124.50717163]
[100.62992859 128.64096069]
[86.25608063 125.13575745]
[75.86521149 135.95379639]
[65.47434998 146.77183533]
[55.08348083 157.58985901]
[44.69261551 168.40789795]
[40.71306229 183.72044373]
[26.31641006 187.53956604]
[15.92554474 198.35758972]
[30.91505051 197.79661560]
[45.24706650 202.22303772]
[57.30961609 211.13903809]
[65.74597168 223.54177856]
[69.60726166 238.03627014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[25 72]
[26 71]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[37 60]
[38 59]
[39 58]
[40 53]
[41 52]
[42 51]
[44 50]
[45 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
