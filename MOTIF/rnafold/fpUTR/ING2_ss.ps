%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUCGGGGAGCGCGGCCGUGCCCUCUCGAGCGGCUGCGGGGUCCCCGCGGCGCCGGGCUGCUGAGCUGAGGGCCCGCGGCGGCCGCGGCCGGUGCAUGUGCGGCUGCUGGAUGCGGAGGCGGCGGCGACGGCGCGGAUCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[102.51473999 177.40385437]
[114.11384583 167.09655762]
[112.51404572 152.18211365]
[110.91423798 137.26766968]
[109.31443787 122.35323334]
[94.93441772 118.08531952]
[85.45729065 129.71218872]
[75.98016357 141.33905029]
[66.50303650 152.96592712]
[63.47588348 161.66104126]
[56.69703293 164.73716736]
[46.97360611 176.15884399]
[37.25017929 187.58053589]
[27.52675438 199.00222778]
[25.09789276 215.22050476]
[9.74100208 220.97358704]
[-2.74606204 210.34320068]
[0.48231986 194.26496887]
[16.10506630 189.27880859]
[25.82849121 177.85711670]
[35.55191803 166.43542480]
[45.27534485 155.01373291]
[54.87616730 143.48880005]
[64.35329437 131.86192322]
[73.83042145 120.23506165]
[83.30754852 108.60819244]
[69.54706573 114.57888031]
[55.85783768 108.44658661]
[51.15230179 94.20376587]
[58.49401474 81.12327576]
[73.10312653 77.72122955]
[85.46806335 86.21216583]
[78.38828278 72.98806763]
[71.30849457 59.76397705]
[64.22871399 46.53988266]
[57.14892960 33.31578827]
[50.06914520 20.09169388]
[42.98936081 6.86760092]
[35.90957642 -6.35649252]
[28.82979202 -19.58058548]
[24.26930428 -22.40120125]
[21.56389999 -26.31665611]
[20.81786919 -30.41690826]
[21.75106430 -33.88661957]
[15.53309631 -47.53714752]
[9.16962147 -61.12045288]
[2.66136551 -74.63498688]
[-3.84689069 -88.14952087]
[-10.35514641 -101.66405487]
[-16.86340332 -115.17858124]
[-23.37165833 -128.69311523]
[-29.96133423 -135.12310791]
[-29.87112808 -142.56671143]
[-36.08909607 -156.21723938]
[-42.30706406 -169.86776733]
[-59.22731400 -180.73918152]
[-56.71557236 -199.86976624]
[-63.51114655 -213.24214172]
[-70.30671692 -226.61450195]
[-77.10228729 -239.98687744]
[-91.13391876 -248.47483826]
[-90.52846527 -264.86279297]
[-75.90876770 -272.29223633]
[-62.31432343 -263.12039185]
[-63.72992325 -246.78244019]
[-56.93434906 -233.41007996]
[-50.13877869 -220.03770447]
[-43.34320450 -206.66534424]
[-33.30129242 -204.35292053]
[-26.06628227 -196.70869446]
[-24.23378563 -186.12043762]
[-28.65653610 -176.08573914]
[-22.43856812 -162.43521118]
[-16.22060013 -148.78468323]
[-9.85712624 -135.20137024]
[-3.34886980 -121.68684387]
[3.15938640 -108.17230988]
[9.66764259 -94.65777588]
[16.17589760 -81.14324188]
[22.68415451 -67.62870789]
[28.46102715 -62.93370438]
[29.18362427 -53.75511551]
[35.40159225 -40.10458755]
[42.05388641 -26.66036987]
[49.13367081 -13.43627739]
[56.21345520 -0.21218351]
[63.29323959 13.01191044]
[70.37302399 26.23600388]
[77.45280457 39.46009827]
[84.53259277 52.68419266]
[91.61237335 65.90828705]
[98.69216156 79.13237762]
[110.90234375 87.84510040]
[125.71006775 90.23909760]
[140.51779175 92.63309479]
[155.32551575 95.02709198]
[166.34544373 84.26291656]
[181.41447449 82.07716370]
[194.72367859 89.10064697]
[201.26678467 102.45452118]
[216.07450867 104.84851837]
[230.88223267 107.24251556]
[245.74038696 101.80690002]
[257.06964111 111.47629547]
[271.87738037 113.87029266]
[286.68508911 116.26428986]
[301.49282837 118.65828705]
[316.30053711 121.05228424]
[331.10827637 123.44628143]
[341.33660889 111.89705658]
[356.19140625 107.73308563]
[370.93255615 112.28307343]
[380.85617065 124.09513855]
[382.79571533 139.40010071]
[376.13226318 153.31419373]
[362.99209595 161.39747620]
[347.56820679 161.07061768]
[334.78228760 152.43791199]
[328.71426392 138.25401306]
[313.90655518 135.86001587]
[299.09881592 133.46601868]
[284.29110718 131.07202148]
[269.48336792 128.67802429]
[254.67564392 126.28401947]
[240.87663269 131.89086914]
[228.48823547 122.05023956]
[213.68051147 119.65624237]
[198.87277222 117.26224518]
[188.45509338 127.87402344]
[173.61077881 130.34587097]
[159.99816895 123.52309418]
[152.93151855 109.83481598]
[138.12379456 107.44081879]
[123.31607056 105.04682159]
[108.50834656 102.65282440]
[117.85726166 109.87786865]
[124.22888184 120.75342560]
[125.82868195 135.66787720]
[127.42848969 150.58232117]
[129.02828979 165.49676514]
[142.54960632 173.10949707]
[148.98329163 187.22994995]
[145.85546875 202.42852783]
[134.36886597 212.86103821]
[118.94029236 214.51599121]
[105.50236511 206.75701904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 140]
[3 139]
[4 138]
[5 137]
[6 26]
[7 25]
[8 24]
[9 23]
[11 22]
[12 21]
[13 20]
[14 19]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 84]
[44 83]
[45 82]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[51 75]
[53 74]
[54 73]
[55 72]
[57 68]
[58 67]
[59 66]
[60 65]
[93 135]
[94 134]
[95 133]
[96 132]
[100 128]
[101 127]
[102 126]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
