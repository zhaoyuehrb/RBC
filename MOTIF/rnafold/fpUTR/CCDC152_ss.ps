%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAGGGGUGUACCAGGCCCCAGAGGCAGCGGAAAGGGAGACUGUGGGGAACUAGGAGCAACAGCAGGC\
) } def
/len { sequence length } bind def

/coor [
[85.05302429 278.44628906]
[71.43511963 271.88549805]
[60.35719299 261.60098267]
[52.80427170 248.50729370]
[49.44796371 233.76869202]
[50.58670807 218.69570923]
[56.11925125 204.62864685]
[65.55363464 192.81831360]
[78.05097198 184.31491089]
[92.50000000 179.87451172]
[92.50000000 164.87451172]
[92.50000000 149.87451172]
[84.76270294 137.14724731]
[92.50000000 123.34707642]
[92.50000000 108.34707642]
[92.16816711 93.35074615]
[91.50466919 78.36542511]
[81.21498871 63.27650070]
[89.52533722 47.97798157]
[88.19963837 33.03667831]
[86.87393188 18.09537697]
[85.54823303 3.15407443]
[84.22253418 -11.78722763]
[75.29584503 -24.84957504]
[81.87803650 -38.21086502]
[80.55233002 -53.15216827]
[65.89929199 -57.03344345]
[53.45919037 -65.69483185]
[44.73422241 -78.09042358]
[40.77797318 -92.72339630]
[42.06818008 -107.82674408]
[48.44904327 -121.57666779]
[59.15004349 -132.31278992]
[72.87898254 -138.73869324]
[87.97801971 -140.07838440]
[102.62387848 -136.17010498]
[115.04800415 -127.48581696]
[123.75011444 -115.07416534]
[127.67938995 -100.43392181]
[126.36135101 -85.33297729]
[119.95515442 -71.59483337]
[109.23439026 -60.87844849]
[95.49363708 -54.47787094]
[96.81933594 -39.53656769]
[105.65119934 -27.54292297]
[99.16383362 -13.11292934]
[100.48953247 1.82837296]
[101.81523895 16.76967621]
[103.14093781 31.71097755]
[104.46664429 46.65227890]
[113.65028381 54.82951736]
[114.70326233 67.48754883]
[106.48999023 77.70192719]
[107.15348816 92.68724823]
[110.72327423 100.22733307]
[107.50000000 108.34707642]
[107.50000000 123.34707642]
[115.23729706 137.14724731]
[107.50000000 149.87451172]
[107.50000000 164.87451172]
[107.50000000 179.87451172]
[121.94902802 184.31491089]
[134.44636536 192.81831360]
[143.88075256 204.62864685]
[149.41328430 218.69570923]
[150.55203247 233.76869202]
[147.19572449 248.50729370]
[139.64280701 261.60098267]
[128.56488037 271.88549805]
[114.94697571 278.44628906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 61]
[11 60]
[12 59]
[14 57]
[15 56]
[16 54]
[17 53]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[25 44]
[26 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
