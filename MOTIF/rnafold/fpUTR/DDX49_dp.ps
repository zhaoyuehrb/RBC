%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:48 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DDX49)
} def

/sequence { (\
GUCGGCGCGCGCCGGAAGCGCGGAUCACACGGGCCCCUACAAGGGGCCCCUACAAGCGGCCACAAGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 19 0.006844823 ubox
1 25 0.072138517 ubox
1 28 0.085525010 ubox
1 30 0.031934358 ubox
1 53 0.011793703 ubox
1 57 0.010907798 ubox
1 60 0.223467303 ubox
1 63 0.835691255 ubox
2 15 0.063854687 ubox
2 16 0.008615804 ubox
2 18 0.006225979 ubox
2 24 0.080425298 ubox
2 27 0.084325848 ubox
2 29 0.030906891 ubox
2 52 0.011261597 ubox
2 56 0.010401839 ubox
2 59 0.224250590 ubox
2 62 0.832104424 ubox
2 67 0.020123317 ubox
3 14 0.081894849 ubox
3 15 0.006540851 ubox
3 22 0.003743184 ubox
3 23 0.082087509 ubox
3 58 0.224671057 ubox
3 66 0.032487981 ubox
4 13 0.083152916 ubox
4 26 0.087669611 ubox
4 50 0.007824370 ubox
4 51 0.006112036 ubox
4 57 0.211985659 ubox
4 61 0.959676520 ubox
5 12 0.083159250 ubox
5 21 0.081810638 ubox
5 25 0.085722929 ubox
5 49 0.003476255 ubox
5 50 0.006909876 ubox
5 57 0.066335339 ubox
5 60 0.960040193 ubox
6 11 0.083040043 ubox
6 20 0.081884196 ubox
6 22 0.203033647 ubox
6 56 0.090434908 ubox
6 58 0.325006860 ubox
6 59 0.902260781 ubox
7 19 0.081888552 ubox
7 21 0.266235212 ubox
7 30 0.011851676 ubox
7 57 0.457606956 ubox
7 60 0.003198945 ubox
8 18 0.081866923 ubox
8 20 0.266479744 ubox
8 22 0.477586927 ubox
8 56 0.438933952 ubox
8 58 0.695888923 ubox
9 19 0.266643898 ubox
9 21 0.650157027 ubox
9 30 0.003589233 ubox
9 57 0.697053701 ubox
10 18 0.266609555 ubox
10 20 0.650566627 ubox
10 22 0.041596576 ubox
10 56 0.695848087 ubox
10 58 0.006807034 ubox
11 19 0.651842279 ubox
11 21 0.075425687 ubox
11 30 0.023384781 ubox
11 57 0.006841643 ubox
12 18 0.650912468 ubox
12 20 0.060690580 ubox
12 23 0.692897224 ubox
12 56 0.005513192 ubox
13 20 0.052696287 ubox
13 22 0.695145340 ubox
14 19 0.069847057 ubox
14 21 0.693235746 ubox
14 30 0.003659380 ubox
14 50 0.006262327 ubox
14 51 0.010427365 ubox
14 61 0.010565595 ubox
15 26 0.011463358 ubox
15 49 0.005827841 ubox
15 50 0.010703278 ubox
15 60 0.011069515 ubox
16 25 0.011342460 ubox
17 51 0.005118699 ubox
18 50 0.005294563 ubox
18 57 0.006497528 ubox
18 60 0.061501974 ubox
19 56 0.006496548 ubox
19 58 0.054523324 ubox
19 59 0.057632804 ubox
20 30 0.004492732 ubox
20 57 0.059357821 ubox
20 60 0.018584493 ubox
21 31 0.010830942 ubox
21 56 0.059371109 ubox
21 58 0.054421506 ubox
21 59 0.018171902 ubox
22 30 0.182366541 ubox
22 50 0.017757400 ubox
22 51 0.030944975 ubox
22 57 0.062417460 ubox
22 61 0.008051264 ubox
23 49 0.012729147 ubox
23 50 0.034204001 ubox
23 60 0.008191900 ubox
25 59 0.004255579 ubox
26 31 0.015905860 ubox
26 58 0.011304055 ubox
30 58 0.017457718 ubox
31 48 0.004747216 ubox
31 49 0.992633899 ubox
31 50 0.099527802 ubox
31 51 0.003162928 ubox
31 57 0.007618147 ubox
32 47 0.003461860 ubox
32 48 0.996642945 ubox
32 49 0.081467356 ubox
33 47 0.998316152 ubox
33 48 0.057796994 ubox
34 46 0.999954461 ubox
35 45 0.999936310 ubox
35 46 0.008730765 ubox
36 43 0.003251877 ubox
36 44 0.999917951 ubox
36 45 0.010434588 ubox
37 43 0.999625583 ubox
37 44 0.011888104 ubox
38 42 0.900547568 ubox
38 43 0.012552045 ubox
49 58 0.009353333 ubox
49 59 0.006487186 ubox
49 67 0.004586179 ubox
50 56 0.097590377 ubox
50 58 0.077386176 ubox
50 59 0.026218942 ubox
50 66 0.013758198 ubox
50 67 0.004524417 ubox
51 55 0.091545751 ubox
51 58 0.034043220 ubox
51 65 0.013382523 ubox
51 66 0.004481585 ubox
60 67 0.078547907 ubox
61 66 0.084750383 ubox
1 63 0.9500000 lbox
2 62 0.9500000 lbox
4 61 0.9500000 lbox
5 60 0.9500000 lbox
6 59 0.9500000 lbox
8 58 0.9500000 lbox
9 57 0.9500000 lbox
10 56 0.9500000 lbox
12 23 0.9500000 lbox
13 22 0.9500000 lbox
14 21 0.9500000 lbox
31 49 0.9500000 lbox
32 48 0.9500000 lbox
33 47 0.9500000 lbox
34 46 0.9500000 lbox
35 45 0.9500000 lbox
36 44 0.9500000 lbox
37 43 0.9500000 lbox
38 42 0.9500000 lbox
showpage
end
%%EOF
