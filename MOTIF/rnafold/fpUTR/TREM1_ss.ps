%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAACUUUCCGAAGCCUCUAGGUCAUUGUGGUGCCUUGUAGCUGUCCCGGGAGCCCUCAGCAGCAGUUGGAGCUGGUGCACAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[68.11266327 348.49804688]
[57.73372650 360.19470215]
[42.25705338 362.43225098]
[28.99025917 354.15420532]
[24.19751740 339.26919556]
[30.14181328 324.80545044]
[44.01643372 317.59234619]
[47.10133362 302.91299438]
[50.18622971 288.23364258]
[53.27112961 273.55429077]
[56.35602570 258.87493896]
[59.44092560 244.19558716]
[49.32870865 233.29232788]
[47.55482101 218.34852600]
[55.00766373 205.07040405]
[69.01188660 198.65261841]
[72.09677887 183.97325134]
[65.71218109 173.54141235]
[68.31582642 161.17832947]
[79.02824402 153.74639893]
[82.61798096 139.18228149]
[86.20771027 124.61814880]
[89.79744720 110.05402374]
[86.09228516 96.57205200]
[95.63842773 86.35624695]
[99.22815704 71.79211426]
[88.26850128 61.12285233]
[84.14794159 46.49692535]
[87.87670898 31.86946297]
[98.35636139 21.14413071]
[112.70082092 17.13138771]
[116.29055786 2.56725979]
[112.08068085 -12.68356133]
[122.63898468 -23.18934441]
[126.22872162 -37.75347137]
[129.81845093 -52.31760025]
[118.50746918 -60.97822952]
[111.40834808 -73.27893829]
[109.57941437 -87.31900787]
[113.26762390 -100.94373322]
[121.87577820 -112.07508087]
[134.05899048 -119.02864075]
[147.93466187 -120.76844025]
[152.02496338 -135.19998169]
[156.11524963 -149.63153076]
[146.41900635 -161.74607849]
[145.72897339 -177.24780273]
[154.31047058 -190.17597961]
[168.86375427 -195.55943298]
[183.79277039 -191.32814026]
[193.35702515 -179.10911560]
[193.87886047 -163.60081482]
[185.15762329 -150.76651001]
[170.54679871 -145.54122925]
[166.45649719 -131.10969543]
[162.36621094 -116.67814636]
[174.47111511 -106.39920044]
[180.95184326 -91.83819580]
[180.48336792 -75.84923553]
[173.10813904 -61.59009933]
[160.23768616 -51.89860153]
[144.38258362 -48.72786331]
[140.79284668 -34.16373825]
[137.20310974 -19.59960938]
[141.66975403 -5.39051247]
[130.85467529 6.15699482]
[127.26494598 20.72112274]
[138.10151672 30.94043159]
[142.39648438 45.30738068]
[138.90042114 59.99220276]
[128.45483398 71.02789307]
[113.79228973 75.38185120]
[110.20255280 89.94597626]
[113.90771484 103.42794800]
[104.36157227 113.64375305]
[100.77184296 128.20788574]
[97.18210602 142.77200317]
[93.59236908 157.33613586]
[99.18147278 174.77641296]
[86.77613068 187.05815125]
[83.69123840 201.73750305]
[93.92747498 213.24948120]
[95.40505981 228.40435791]
[87.76594543 241.36999512]
[74.12027740 247.28048706]
[71.03537750 261.95983887]
[67.95048523 276.63919067]
[64.86558533 291.31854248]
[61.78068542 305.99789429]
[58.69578552 320.67724609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[16 81]
[17 80]
[20 78]
[21 77]
[22 76]
[23 75]
[25 73]
[26 72]
[31 67]
[32 66]
[34 64]
[35 63]
[36 62]
[43 56]
[44 55]
[45 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
