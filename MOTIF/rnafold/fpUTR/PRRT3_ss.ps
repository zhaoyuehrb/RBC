%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUGUUAGCCGAGUCUGAGCAUCUCGGAGGAUGCGGCGCGGCGAUCGGCUGCAGGGACGCGCGCAAGGUGAACACGGGGGCUGCGGCGCGCAGGCUCAUCCAGUGAGGACUGGAAGGUGGGGGCUUUAGGCCCAGGCAUCGGAGUAGACC\
) } def
/len { sequence length } bind def

/coor [
[69.79316711 119.83748627]
[55.81930161 125.29010773]
[41.84543228 130.74272156]
[27.87156677 136.19534302]
[13.89770126 141.64796448]
[-0.07616508 147.10058594]
[-6.98614740 153.17312622]
[-14.39559364 152.51820374]
[-28.47916412 157.68086243]
[-42.56273651 162.84352112]
[-56.64630508 168.00617981]
[-70.72987366 173.16883850]
[-84.81344604 178.33149719]
[-98.78731537 183.78411865]
[-112.64550781 189.52436829]
[-126.50370026 195.26461792]
[-140.30183411 201.14778137]
[-154.03843689 207.17321777]
[-164.55776978 222.25129700]
[-181.89552307 219.71653748]
[-195.50465393 226.02458191]
[-209.11380005 232.33261108]
[-222.72293091 238.64065552]
[-236.33207703 244.94869995]
[-249.94120789 251.25672913]
[-258.93054199 264.97256470]
[-275.28594971 263.77545166]
[-282.18237305 248.89691162]
[-272.52539062 235.64268494]
[-256.24923706 237.64759827]
[-242.64010620 231.33955383]
[-229.03097534 225.03150940]
[-215.42182922 218.72348022]
[-201.81269836 212.41543579]
[-188.20355225 206.10740662]
[-183.72229004 194.82897949]
[-172.38323975 189.47912598]
[-160.06385803 193.43661499]
[-146.32727051 187.41117859]
[-141.43426514 181.80874634]
[-132.24395752 181.40643311]
[-118.38575745 175.66618347]
[-104.52756500 169.92593384]
[-101.88652802 165.87782288]
[-96.64591980 163.48085022]
[-89.97610474 164.24792480]
[-75.89253235 159.08526611]
[-61.80896378 153.92260742]
[-47.72539139 148.75994873]
[-33.64182281 143.59730530]
[-19.55825233 138.43464661]
[-5.52878475 133.12672424]
[8.44508171 127.67409515]
[22.41894722 122.22148132]
[36.39281464 116.76885986]
[50.36668015 111.31623840]
[64.34054565 105.86361694]
[65.99433136 87.76918030]
[76.24454498 72.76661682]
[92.50000000 64.64849854]
[92.50000000 49.64849854]
[92.50000000 34.64849854]
[92.50000000 19.64849854]
[92.50000000 4.64849901]
[92.50000000 -10.35150051]
[79.91534424 -22.45888710]
[79.94829559 -39.58509445]
[92.09225464 -51.17840958]
[91.78224945 -66.17520142]
[91.47225189 -81.17200470]
[77.97669983 -88.50450897]
[69.96915436 -101.61079407]
[69.60359955 -116.96533966]
[76.97837830 -130.43783569]
[90.10969543 -138.40426636]
[105.46530914 -138.72167969]
[118.91462708 -131.30471802]
[126.83985138 -118.14849091]
[127.10913849 -102.79195404]
[119.65005493 -89.36595154]
[106.46904755 -81.48200226]
[106.77904510 -66.48520660]
[107.08905029 -51.48841095]
[117.56796265 -43.92753601]
[121.82364655 -31.52025986]
[118.08213043 -18.74506950]
[107.50000000 -10.35150051]
[107.50000000 4.64849901]
[107.50000000 19.64849854]
[107.50000000 34.64849854]
[107.50000000 49.64849854]
[107.50000000 64.64849854]
[122.80342865 71.96463013]
[133.08302307 85.45724487]
[136.07408142 102.15377808]
[150.53588867 106.13578796]
[164.99768066 110.11780548]
[179.45947266 114.09981537]
[194.90574646 107.07519531]
[209.43901062 114.52373505]
[223.90080261 110.54171753]
[238.36260986 106.55970764]
[252.82440186 102.57769012]
[267.28619385 98.59568024]
[281.74798584 94.61366272]
[292.87228394 82.56449890]
[308.80758667 86.43727875]
[313.16101074 102.24802399]
[301.45416260 113.73199463]
[285.73001099 109.07546234]
[271.26821899 113.05747223]
[256.80642700 117.03948975]
[242.34461975 121.02149963]
[227.88282776 125.00351715]
[213.42102051 128.98553467]
[213.34678650 129.43615723]
[213.26139832 129.88481140]
[225.46913147 138.60096741]
[237.67684937 147.31710815]
[249.88458252 156.03326416]
[269.97811890 157.00164795]
[277.34738159 174.83860779]
[289.90490723 183.04283142]
[302.46240234 191.24705505]
[315.01989746 199.45127869]
[327.57739258 207.65550232]
[344.14440918 211.25689697]
[345.26995850 228.17344666]
[329.32611084 233.93797302]
[319.37316895 220.21299744]
[306.81567383 212.00877380]
[294.25817871 203.80455017]
[281.70068359 195.60034180]
[269.14318848 187.39611816]
[259.29467773 190.39634705]
[249.21942139 187.38479614]
[242.35066223 179.13349915]
[241.16842651 168.24099731]
[228.96070862 159.52484131]
[216.75297546 150.80868530]
[204.54524231 142.09254456]
[186.70677185 143.36755371]
[175.47746277 128.56161499]
[161.01567078 124.57960510]
[146.55387878 120.59758759]
[132.09207153 116.61557770]
[125.81085968 125.29383850]
[117.26145172 131.74934387]
[107.19515228 135.41481018]
[96.49655914 135.96810913]
[86.10584259 133.36062622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[8 51]
[9 50]
[10 49]
[11 48]
[12 47]
[13 46]
[14 43]
[15 42]
[16 41]
[17 39]
[18 38]
[20 35]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[60 92]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[68 83]
[69 82]
[70 81]
[95 146]
[96 145]
[97 144]
[98 143]
[100 115]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[117 141]
[118 140]
[119 139]
[120 138]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
