%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUGUGGCGCGCCGCUUCCGGUCUGCAGCCUUGUAGUGGGGCUGGAGCAGAGCCUGCCGCGAACCCCCGGAGCCCACGAUCCCUCGUGCCAUCCCUCGAAUCCACCAGCACGAGCGUCCCACCCGCGCCUGGGACC\
) } def
/len { sequence length } bind def

/coor [
[82.11875153 136.45982361]
[73.28203583 130.58116150]
[66.27040863 122.61354065]
[61.56283188 113.10119629]
[59.48086548 102.69392395]
[60.16673660 92.10262299]
[46.24501038 86.51821899]
[32.32328796 80.93381500]
[18.40156174 75.34941101]
[4.47983742 69.76500702]
[-4.73418379 69.46314240]
[-9.68932629 63.89594650]
[-23.48224258 58.00057220]
[-39.21283722 59.69142151]
[-47.87496567 47.57462311]
[-61.66788101 41.67924500]
[-75.46080017 35.78387070]
[-96.46311188 39.75695038]
[-108.36914062 22.95347786]
[-122.52738953 17.99929237]
[-136.68563843 13.04510593]
[-150.89857483 8.25008392]
[-165.16442871 3.61482882]
[-179.43028259 -1.02042603]
[-193.69612122 -5.65568113]
[-208.32003784 -8.99349499]
[-223.18429565 -11.00699425]
[-237.89816284 -5.19216013]
[-249.47164917 -14.56785965]
[-264.33590698 -16.58135796]
[-279.20013428 -18.59485817]
[-294.06439209 -20.60835648]
[-308.92864990 -22.62185478]
[-323.79287720 -24.63535500]
[-338.65713501 -26.64885330]
[-352.24105835 -18.11324883]
[-367.33569336 -23.54751778]
[-372.36175537 -38.78295135]
[-363.46365356 -52.13222885]
[-347.46725464 -53.35493088]
[-336.64364624 -41.51309967]
[-321.77938843 -39.49959946]
[-306.91513062 -37.48610306]
[-292.05090332 -35.47260284]
[-277.18664551 -33.45910263]
[-262.32238770 -31.44560432]
[-247.45816040 -29.43210602]
[-233.80746460 -35.39095688]
[-221.17079163 -25.87124062]
[-206.30654907 -23.85774231]
[-215.64421082 -35.59690857]
[-216.47131348 -50.57408524]
[-208.48307800 -63.27006912]
[-194.62319946 -69.00627899]
[-179.99919128 -65.66888428]
[-170.00009155 -54.48773575]
[-168.31066895 -39.58317566]
[-175.55346680 -26.44766045]
[-189.06086731 -19.92152786]
[-174.79502869 -15.28627396]
[-160.52917480 -10.65101910]
[-146.26332092 -6.01576376]
[-138.86888123 -6.94808006]
[-131.73144531 -1.11314392]
[-117.57320404 3.84104204]
[-103.41495514 8.79522800]
[-96.02677917 3.61675406]
[-86.94084930 2.44880176]
[-78.22364807 5.68663359]
[-71.91817474 12.70856667]
[-69.56542206 21.99095345]
[-55.77250671 27.88632965]
[-41.97958755 33.78170395]
[-27.23555565 31.66917801]
[-17.58686638 44.20765305]
[-3.79395056 50.10303116]
[10.06424236 55.84328079]
[23.98596764 61.42768478]
[37.90769196 67.01209259]
[51.82941818 72.59649658]
[65.75114441 78.18090057]
[78.52375031 65.53511810]
[95.50361633 59.64110947]
[113.36434174 61.65353012]
[128.60694885 71.17813873]
[138.24537659 86.34903717]
[153.06069946 84.00252533]
[167.87602234 81.65600586]
[182.69134521 79.30948639]
[197.50666809 76.96297455]
[212.32200623 74.61645508]
[227.13732910 72.26993561]
[229.48583984 57.32538223]
[236.33932495 43.83891678]
[247.02638245 33.13180161]
[260.49996948 26.25301743]
[275.44009399 23.87647057]
[290.38305664 26.23499489]
[303.86492920 33.09752655]
[314.56488037 43.79174042]
[321.43463135 57.26993179]
[323.80117798 72.21163940]
[321.43264771 87.15303802]
[314.56106567 100.63030243]
[303.85968018 111.32308960]
[290.37689209 118.18381500]
[275.43359375 120.54033661]
[260.49380493 118.16178894]
[247.02113342 111.28119659]
[236.33552551 100.57264709]
[229.48384094 87.08526611]
[214.66851807 89.43177795]
[199.85319519 91.77829742]
[185.03787231 94.12481689]
[170.22253418 96.47132874]
[155.40721130 98.81784821]
[140.59188843 101.16436768]
[136.58706665 117.61940765]
[126.21896362 131.01005554]
[133.62159729 144.05616760]
[141.02421570 157.10227966]
[148.42683411 170.14840698]
[155.82945251 183.19451904]
[163.23208618 196.24063110]
[178.66609192 197.84411621]
[190.18743896 208.23825073]
[193.36593628 223.42630005]
[186.97938538 237.56814575]
[173.48353577 245.22593689]
[158.06784058 243.45512390]
[146.65992737 232.93661499]
[143.64637756 217.71498108]
[150.18595886 203.64326477]
[142.78334045 190.59713745]
[135.38072205 177.55102539]
[127.97809601 164.50491333]
[120.57546997 151.45878601]
[113.17285156 138.41267395]
[102.76947021 140.51403809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 81]
[7 80]
[8 79]
[9 78]
[10 77]
[12 76]
[13 75]
[15 73]
[16 72]
[17 71]
[19 66]
[20 65]
[21 64]
[22 62]
[23 61]
[24 60]
[25 59]
[26 50]
[27 49]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[119 138]
[120 137]
[121 136]
[122 135]
[123 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
