%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGCCCUGCGGGCGCGGGGCUGAAGGCGGAACCACGACGGGCAGAGAGCACGGAGCCGGGAAGCCCCUGGGCGCCCGUCGGAGGGCU\
) } def
/len { sequence length } bind def

/coor [
[111.75734711 436.19409180]
[98.96387482 425.06921387]
[106.11243439 409.69601440]
[107.17051697 394.73339844]
[108.22859955 379.77075195]
[109.28668213 364.80810547]
[110.34476471 349.84548950]
[111.40285492 334.88284302]
[111.66757965 319.88519287]
[111.13820648 304.89453125]
[110.60883331 289.90386963]
[110.07946014 274.91320801]
[109.55009460 259.92257690]
[109.02072144 244.93190002]
[108.49134827 229.94125366]
[107.96197510 214.95059204]
[106.63999176 200.00895691]
[104.52909088 185.15823364]
[102.41819000 170.30751038]
[100.30729675 155.45678711]
[98.19639587 140.60604858]
[96.08550262 125.75532532]
[81.65302277 118.49455261]
[74.27686310 104.12069702]
[76.79392242 88.16201019]
[88.23613739 76.75625610]
[85.60244751 61.98927689]
[82.96876526 47.22229767]
[75.00181580 45.50159836]
[67.78667450 41.75844955]
[61.82490158 36.26627350]
[57.52744675 29.41960716]
[55.18630981 21.70576668]
[54.95476532 13.67016506]
[56.83734512 5.87775278]
[60.69035721 -1.12669945]
[66.23278809 -6.85668802]
[73.06676483 -10.91776085]
[80.70611572 -13.03466225]
[82.29159546 -27.95063591]
[76.05628967 -42.49132538]
[85.09550476 -54.32947922]
[86.68098450 -69.24545288]
[77.75851440 -82.57846069]
[82.75672150 -97.82304382]
[97.84142303 -103.28486633]
[111.44091034 -94.77408600]
[113.12283325 -78.81944275]
[101.59695435 -67.65997314]
[100.01147461 -52.74399948]
[106.36018372 -39.27020264]
[97.20756531 -26.36515617]
[95.62208557 -11.44918346]
[112.60327148 4.07333136]
[113.61823273 27.29474449]
[97.73574066 44.58861160]
[100.36943054 59.35559082]
[103.00312042 74.12257385]
[115.43408203 79.01311493]
[123.80681610 89.42193604]
[125.91981506 102.61214447]
[121.21747589 115.11551666]
[110.93622589 123.64442444]
[113.04712677 138.49514771]
[115.15802765 153.34588623]
[117.26892090 168.19660950]
[119.37982178 183.04733276]
[121.49071503 197.89807129]
[125.01485443 202.34883118]
[126.19274139 207.22529602]
[125.28704834 211.49925232]
[122.95262909 214.42121887]
[123.48200226 229.41188049]
[124.01137543 244.40252686]
[124.54074860 259.39318848]
[125.07012177 274.38385010]
[125.59949493 289.37451172]
[126.12886047 304.36514282]
[126.65823364 319.35580444]
[129.69218445 324.15414429]
[130.34803772 329.12780762]
[128.99568176 333.28207397]
[126.36548615 335.94094849]
[125.30740356 350.90356445]
[124.24932098 365.86621094]
[123.19123840 380.82882690]
[122.13314819 395.79147339]
[121.07506561 410.75411987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 63]
[26 58]
[27 57]
[28 56]
[39 53]
[40 52]
[42 50]
[43 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
