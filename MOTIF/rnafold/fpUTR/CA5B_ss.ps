%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGGCUGCGGAUCCCCGUAGGCGAGCGAGCGGCUAGGUUCGUGAUCUGGAGAGACGCUCAGAUUAUUAAGUUCCUGCAACUUAACUGGGAACUGAUCAAGAUUUCAAGCUAAAG\
) } def
/len { sequence length } bind def

/coor [
[162.26281738 174.25558472]
[166.80784607 161.86720276]
[154.76718140 152.92169189]
[142.72650146 143.97618103]
[130.68582153 135.03067017]
[118.64514923 126.08515930]
[106.60447693 117.13964844]
[91.62573242 117.93798065]
[80.60412598 128.11265564]
[69.58251190 138.28733826]
[58.56089783 148.46200562]
[47.53928757 158.63668823]
[36.51767349 168.81137085]
[32.16351700 184.62191772]
[16.22804642 188.49397278]
[5.10430956 176.44430542]
[10.23545361 160.86857605]
[26.34299660 157.78974915]
[37.36460876 147.61508179]
[48.38621902 137.44039917]
[59.40783310 127.26572418]
[70.42944336 117.09104156]
[81.45105743 106.91636658]
[80.06139374 99.54623413]
[65.32108307 102.32532501]
[62.54224396 87.58496857]
[77.28205872 84.80597687]
[75.89239502 77.43584442]
[61.92235184 71.97343445]
[47.95231247 66.51102448]
[33.98226929 61.04861832]
[20.01222610 55.58620834]
[6.04218245 50.12379837]
[-8.33306980 56.69096375]
[-23.11220169 51.09160614]
[-29.52701569 36.64772415]
[-23.77171707 21.92861938]
[-9.26082230 15.66687298]
[5.39661312 21.57746887]
[11.50459099 36.15375519]
[25.47463417 41.61616516]
[39.44467545 47.07857513]
[53.41471863 52.54098129]
[67.38476562 58.00339127]
[81.35480499 63.46580124]
[93.15307617 54.20293045]
[91.16219330 39.33563995]
[89.17131042 24.46834564]
[87.18042755 9.60105324]
[85.18954468 -5.26623917]
[83.19866180 -20.13353157]
[81.20777893 -35.00082397]
[67.49123383 -42.25589371]
[60.68898392 -56.20254135]
[63.41662979 -71.47799683]
[74.62533569 -82.20854187]
[90.00513458 -84.26805115]
[103.64216614 -76.86460876]
[110.29272461 -62.84498978]
[107.39952850 -47.60002136]
[96.07507324 -36.99170685]
[98.06595612 -22.12441444]
[100.05683899 -7.25712204]
[102.04772186 7.61017036]
[104.03860474 22.47746277]
[106.02948761 37.34475708]
[108.02037048 52.21204758]
[121.35143280 45.33580780]
[136.35144043 45.33839798]
[149.68013000 52.21923828]
[158.36944580 64.44609070]
[160.48440552 79.29624176]
[155.55407715 93.46281433]
[144.67633057 103.79115295]
[130.27346802 107.98133087]
[115.54998779 105.09896851]
[127.59066010 114.04447937]
[139.63133240 122.98999023]
[151.67201233 131.93550110]
[163.71267700 140.88101196]
[175.75335693 149.82652283]
[189.83341980 140.09994507]
[206.34893799 135.71119690]
[223.35163879 137.16101074]
[238.84149170 144.26235962]
[251.00201416 156.16439819]
[258.41329956 171.45437622]
[260.21768188 188.32534790]
[256.21917725 204.78964233]
[268.93518066 212.74595642]
[281.65118408 220.70227051]
[294.36721802 228.65858459]
[307.08322144 236.61489868]
[322.88613892 237.37562561]
[329.57147217 250.68560791]
[342.28747559 258.64190674]
[358.18118286 256.45797729]
[369.69839478 267.62637329]
[368.00408936 283.57971191]
[354.39797974 292.07992554]
[339.31753540 286.60641479]
[334.33114624 271.35794067]
[321.61514282 263.40161133]
[306.72177124 263.20999146]
[299.12692261 249.33091736]
[286.41088867 241.37460327]
[273.69488525 233.41828918]
[260.97888184 225.46197510]
[248.26284790 217.50566101]
[238.53466797 226.21853638]
[226.85025024 232.08219910]
[214.02388000 234.67999268]
[200.95149231 233.82316589]
[188.54817200 229.56455994]
[177.68397522 222.19534302]
[169.12303162 212.22518921]
[163.46969604 200.34696960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[13 18]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
