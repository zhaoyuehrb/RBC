%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUGUUCCCGCCGCGGGCUCCGCCCCCCGGCCAAUCGGACCGGCGCUCGGUGAAGCCCAGAUUCUCUUUGUUCCGCAGCCAUUUCAGGCCCCGGACAGGAGGCAGUGCCGCUUCGGCCGAAGGCCCGAGCGCCCGAGGCGUCUGGG\
) } def
/len { sequence length } bind def

/coor [
[107.28036499 315.66195679]
[95.80136108 325.96905518]
[80.56854248 328.41134644]
[66.44264984 322.20953369]
[57.93119812 309.34255981]
[57.75016403 293.91625977]
[65.95731354 280.85308838]
[79.93377686 274.32147217]
[81.83904266 259.44296265]
[83.26969147 244.51135254]
[84.22425842 229.54176331]
[85.17882538 214.57215881]
[86.13339233 199.60256958]
[79.22171783 186.40870667]
[87.82154846 173.12889099]
[88.77611542 158.15930176]
[89.73068237 143.18969727]
[90.68524933 128.22010803]
[91.63981628 113.25051117]
[86.39310455 107.89122009]
[78.37858582 120.57063293]
[71.90850067 134.10348511]
[57.11075974 136.55842590]
[46.61735916 125.83982086]
[49.38593674 111.09753418]
[63.05300140 104.91623688]
[75.89967346 97.17264557]
[70.65295410 91.81335449]
[55.66646957 92.44997406]
[40.67998505 93.08659363]
[25.69350052 93.72321320]
[10.71461582 94.51885223]
[-4.25498009 95.47341919]
[-17.59922028 105.00564575]
[-32.41241837 97.96993256]
[-33.45602417 81.60402679]
[-19.65646935 72.74375916]
[-5.20954847 80.50382233]
[9.76004696 79.54925537]
[16.28032303 75.95988464]
[25.05688095 78.73672485]
[40.04336548 78.10011292]
[55.02985001 77.46349335]
[70.01633453 76.82687378]
[88.98072052 79.51683044]
[99.35995483 91.40040588]
[108.02146149 79.15384674]
[116.68297577 66.90728760]
[125.34448242 54.66072464]
[134.00599670 42.41416550]
[131.42599487 29.75439835]
[136.99670410 18.52757454]
[147.94154358 13.26129913]
[154.12005615 -0.40712813]
[160.29858398 -14.07555580]
[166.47709656 -27.74398232]
[172.65562439 -41.41241074]
[170.38427734 -59.65362930]
[184.96026611 -69.37328339]
[190.84727478 -83.16977692]
[183.05126953 -96.45617676]
[184.55598450 -111.60838318]
[194.57583618 -122.83632660]
[209.11183167 -125.97364807]
[214.99884033 -139.77014160]
[220.88584900 -153.56661987]
[226.77285767 -167.36311340]
[232.65986633 -181.15960693]
[238.54687500 -194.95610046]
[239.04768372 -204.14782715]
[244.70803833 -208.98083496]
[250.88655090 -222.64926147]
[251.58235168 -231.82830811]
[257.34402466 -236.54006958]
[263.81124878 -250.07427979]
[270.27850342 -263.60848999]
[265.24859619 -278.35086060]
[272.00012207 -291.98434448]
[286.08572388 -296.68875122]
[292.55294800 -310.22296143]
[299.02020264 -323.75714111]
[293.51950073 -338.57330322]
[300.18237305 -352.90444946]
[315.05584717 -358.24816895]
[329.31576538 -351.43417358]
[334.50195312 -336.50503540]
[327.53753662 -322.31796265]
[312.55441284 -317.28991699]
[306.08715820 -303.75570679]
[299.61993408 -290.22149658]
[304.80859375 -276.30700684]
[298.44268799 -262.48925781]
[283.81271362 -257.14123535]
[277.34545898 -243.60704041]
[270.87823486 -230.07283020]
[264.55499268 -216.47074890]
[258.37646484 -202.80232239]
[252.34336853 -189.06909180]
[246.45635986 -175.27259827]
[240.56935120 -161.47610474]
[234.68234253 -147.67961121]
[228.79531860 -133.88313293]
[222.90830994 -120.08663940]
[230.70132446 -107.42144775]
[229.52836609 -92.41851044]
[219.63031006 -80.84777069]
[204.64375305 -77.28276825]
[198.75674438 -63.48627472]
[202.97822571 -52.10399246]
[198.13128662 -40.53680420]
[186.32405090 -35.23389053]
[180.14552307 -21.56546402]
[173.96701050 -7.89703655]
[167.78849792 5.77139044]
[161.60997009 19.43981743]
[166.90614319 33.47372818]
[180.57456970 39.65224838]
[194.24299622 45.83076477]
[207.91142273 52.00928497]
[224.83497620 53.02384567]
[228.54498291 69.56688690]
[213.67547607 77.71146393]
[201.73289490 65.67771149]
[188.06446838 59.49919128]
[174.39604187 53.32067490]
[160.72761536 47.14215469]
[146.25256348 51.07567596]
[137.59104919 63.32223511]
[128.92953491 75.56879425]
[120.26802063 87.81535339]
[111.60651398 100.06191254]
[106.60941315 114.20507812]
[105.65484619 129.17466736]
[104.70027924 144.14427185]
[103.74571228 159.11386108]
[102.79114532 174.08346558]
[109.63454437 188.34805298]
[101.10298920 200.55712891]
[100.14842224 215.52673340]
[99.19385529 230.49632263]
[98.23928833 245.46592712]
[100.62628937 250.26402283]
[100.86205292 255.01475525]
[99.33692932 258.89102173]
[96.71755219 261.34823608]
[94.81228638 276.22674561]
[106.69194794 286.06936646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 146]
[9 145]
[10 141]
[11 140]
[12 139]
[13 138]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[28 44]
[29 43]
[30 42]
[31 41]
[32 39]
[33 38]
[46 131]
[47 130]
[48 129]
[49 128]
[50 127]
[53 115]
[54 114]
[55 113]
[56 112]
[57 111]
[59 108]
[60 107]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[69 98]
[71 97]
[72 96]
[74 95]
[75 94]
[76 93]
[79 90]
[80 89]
[81 88]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
