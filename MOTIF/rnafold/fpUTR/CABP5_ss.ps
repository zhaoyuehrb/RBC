%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAAGCCAAGAGAGGCAGGAAGAGGUGGCAAAGGAGUGCUGGAGAAGAUAAGGAGGCUGAGCUCCGACAGGGAGCAGGGAGGAGGGGCCAUCUUGAGACUGGUGCCCUGCGAGCUCCACCCCACCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[-47.09683609 417.61038208]
[-47.43709183 424.62838745]
[-49.96287537 431.12921143]
[-54.38365555 436.45596313]
[-60.21929932 440.08163452]
[-66.85206604 441.66119385]
[-73.59192657 441.06411743]
[-81.94387817 453.52383423]
[-90.29583740 465.98355103]
[-86.98995972 481.43823242]
[-95.65045166 494.65832520]
[-111.13920593 497.80062866]
[-124.26701355 489.00085449]
[-127.24538422 473.47973633]
[-118.30729675 460.44570923]
[-102.75556183 457.63159180]
[-94.40361023 445.17187500]
[-86.05165100 432.71215820]
[-87.57633209 409.61004639]
[-66.52591705 398.38571167]
[-60.01765823 384.87118530]
[-59.94915390 377.40872192]
[-53.19276047 371.11706543]
[-46.36712265 357.76004028]
[-47.46550369 342.90597534]
[-34.29600525 334.13815308]
[-27.47036934 320.78109741]
[-20.64473152 307.42404175]
[-13.81909370 294.06701660]
[-6.99345636 280.70996094]
[-14.13771629 269.36935425]
[-14.72592926 255.87023926]
[-8.49590588 243.75808716]
[3.00961494 236.26747131]
[16.82354355 235.45848083]
[23.96275520 222.26637268]
[31.10196495 209.07426453]
[38.24117661 195.88215637]
[45.38038635 182.69004822]
[42.23120880 170.94879150]
[48.15011215 159.87274170]
[60.42265320 155.70640564]
[67.87145233 142.68659973]
[67.47576904 127.79724884]
[81.04463196 119.66111755]
[88.49343109 106.64131165]
[75.71446228 114.49611664]
[62.44819641 121.49655914]
[47.50619888 122.81436920]
[33.21943665 118.24398041]
[21.81667137 108.49836731]
[15.07674599 95.09786987]
[14.05109882 80.13297272]
[18.89973259 65.93823242]
[28.86625290 54.72803879]
[42.39587021 48.25119781]
[57.37794495 47.51810837]
[71.47357941 52.64211273]
[76.40020752 66.80998230]
[78.86912537 52.01456070]
[69.95561218 39.24009323]
[72.67021179 24.27060318]
[84.90364075 15.85165501]
[87.37256622 1.05623567]
[89.84148407 -13.73918343]
[92.31040192 -28.53460312]
[94.77931976 -43.33002472]
[86.66480255 -57.16960907]
[92.55995178 -72.09029388]
[107.94251251 -76.64620209]
[121.01230621 -67.34243011]
[121.74330139 -51.31604385]
[109.57473755 -40.86110306]
[107.10581970 -26.06568527]
[104.63690186 -11.27026463]
[102.16798401 3.52515459]
[99.69906616 18.32057381]
[108.53602600 30.25555038]
[106.24295807 45.29537964]
[93.66454315 54.48347855]
[91.19562531 69.27890015]
[96.40414429 74.67531586]
[107.19713593 64.25843811]
[117.61384583 75.05158997]
[106.82118988 85.46814728]
[112.02970886 90.86456299]
[126.90330505 88.92130280]
[139.58480835 79.46139526]
[153.20719910 85.48466492]
[168.08079529 83.54141235]
[182.95437622 81.59815979]
[197.82797241 79.65489960]
[212.67758179 77.53611755]
[227.50112915 75.24211121]
[239.93615723 64.55090332]
[255.32093811 70.22897339]
[257.82891846 86.43520355]
[244.88011169 96.49802399]
[229.79513550 90.06565857]
[214.97158813 92.35966492]
[208.78359985 96.53121185]
[199.77122498 94.52849579]
[184.89764404 96.47174835]
[170.02404785 98.41500092]
[155.15045166 100.35826111]
[143.53280640 109.67917633]
[128.84655762 103.79489899]
[113.97296906 105.73815155]
[101.51323700 114.09011078]
[94.06443787 127.10991669]
[93.92733002 142.93052673]
[80.89125824 150.13539124]
[73.44245911 163.15519714]
[73.98180389 181.51718140]
[58.57249451 189.82925415]
[51.43328476 203.02136230]
[44.29407120 216.21347046]
[37.15486145 229.40557861]
[30.01564980 242.59768677]
[37.52260208 257.70397949]
[34.61018372 274.15124512]
[22.61264420 285.53323364]
[6.36358929 287.53558350]
[-0.46204820 300.89263916]
[-7.28768587 314.24969482]
[-14.11332321 327.60671997]
[-20.93896103 340.96377563]
[-20.32879448 356.77322388]
[-33.01007462 364.58566284]
[-39.83571243 377.94271851]
[-46.50312424 391.37942505]
[-53.01138306 404.89398193]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[20 132]
[21 131]
[23 130]
[24 129]
[26 127]
[27 126]
[28 125]
[29 124]
[30 123]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[42 113]
[43 112]
[45 110]
[46 109]
[59 81]
[60 80]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[86 108]
[87 107]
[89 105]
[90 104]
[91 103]
[92 102]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
