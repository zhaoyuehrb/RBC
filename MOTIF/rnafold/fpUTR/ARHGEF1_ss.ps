%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:50:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGACUCAGGGCGGCUAGAGCGACGCGGCGGCAGGGGUGGGGAGAGUGCGGAGCCCGAGCGCGGAGGCUUCGGUUCCGGUGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.69819641 154.57574463]
[70.16528320 164.61819458]
[62.49066925 172.46949768]
[52.62411499 177.19615173]
[41.77367020 178.24902344]
[31.25774956 175.52696228]
[22.34493637 169.38591003]
[9.62421513 177.33470154]
[-3.09650660 185.28349304]
[-15.67656517 193.45307922]
[-28.11212921 201.84097290]
[-32.57242203 217.25152588]
[-47.45620728 223.23922729]
[-61.34591675 215.21081543]
[-63.58655930 199.32499695]
[-52.45930099 187.76802063]
[-36.50002289 189.40541077]
[-24.06445885 181.01751709]
[-20.19611168 174.52597046]
[-11.04529572 172.56277466]
[1.67542577 164.61398315]
[14.39614677 156.66519165]
[14.19764614 137.36589050]
[25.49153900 121.54456329]
[44.07122040 115.37500000]
[62.84933853 121.38255310]
[74.34000397 111.74073792]
[85.83067322 102.09892273]
[90.79274750 89.02722168]
[104.52751923 86.41040802]
[116.01818085 76.76859283]
[121.61628723 61.97089767]
[136.33938599 59.71708298]
[147.83004761 50.07526779]
[132.83168030 49.85427094]
[118.75776672 44.66534805]
[107.20552826 35.09738541]
[99.48602295 22.23623276]
[96.47531891 7.54148340]
[98.51509857 -7.31917953]
[105.37387085 -20.65924263]
[116.27323914 -30.96476555]
[129.97625732 -37.06618881]
[144.92778015 -38.27106857]
[159.43099976 -34.44267273]
[171.83996582 -26.01547241]
[180.74639893 -13.94586182]
[185.13951111 0.39640033]
[184.52076721 15.38363266]
[178.96035767 29.31495857]
[169.08744812 40.61086273]
[183.94146729 38.52326584]
[198.79548645 36.43566895]
[213.64950562 34.34807587]
[228.50354004 32.26047897]
[243.35755920 30.17288017]
[258.21157837 28.08528519]
[270.80062866 18.50267029]
[284.48086548 24.39337730]
[299.33486938 22.30578232]
[314.18890381 20.21818542]
[329.04290771 18.13058853]
[338.35281372 5.35947466]
[353.97915649 2.99459934]
[366.65115356 12.43900108]
[368.85067749 28.08948326]
[359.27282715 40.66089249]
[343.59997559 42.69483566]
[331.13052368 32.98460770]
[316.27648926 35.07220459]
[301.42248535 37.15980148]
[286.56845093 39.24739838]
[275.04187012 48.68069458]
[260.29916382 42.93930435]
[245.44514465 45.02690125]
[230.59112549 47.11449814]
[215.73710632 49.20209503]
[200.88308716 51.28969193]
[186.02906799 53.37728882]
[171.17504883 55.46488571]
[157.47186279 61.56593323]
[145.98120117 71.20774841]
[141.20498657 85.31579590]
[125.65999603 88.25926208]
[114.16932678 97.90107727]
[109.20725250 110.97277832]
[95.47248077 113.58959198]
[83.98181915 123.23140717]
[72.49114990 132.87321472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 22]
[8 21]
[9 20]
[10 18]
[11 17]
[26 89]
[27 88]
[28 87]
[30 85]
[31 84]
[33 82]
[34 81]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[56 75]
[57 74]
[59 72]
[60 71]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
