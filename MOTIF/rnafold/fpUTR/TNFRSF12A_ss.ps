%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGGGGCGGGGGCGGGGCGGCGGCCGUGGGUCCCUGCCGGCCGGCGGCGGGCGCAGACAGCGGCGGGCGCAGGACGUGCACU\
) } def
/len { sequence length } bind def

/coor [
[64.81372833 127.34157562]
[70.46920013 113.44856262]
[83.98294067 106.93425751]
[69.00493622 106.12216949]
[54.02693558 105.31008911]
[39.04893494 104.49800873]
[24.07093430 103.68592072]
[9.09293270 102.87384033]
[-5.88506889 102.06175232]
[-20.86306953 101.24967194]
[-35.84107208 100.43758392]
[-49.21191025 113.59613800]
[-67.65068817 113.05448151]
[-79.80628967 99.59810638]
[-94.80384064 99.86891937]
[-108.46207428 107.85411072]
[-121.32696533 100.34784698]
[-136.32452393 100.61865997]
[-147.11448669 112.16648865]
[-162.91229248 112.61886597]
[-174.34539795 101.70742035]
[-174.63072205 85.90570068]
[-163.59901428 74.58860779]
[-147.79516602 74.47035217]
[-136.59533691 85.62110901]
[-121.59777832 85.35029602]
[-109.01226807 77.38447571]
[-95.07465363 84.87136078]
[-80.07710266 84.60054779]
[-73.95197296 74.65736389]
[-63.62934875 68.94098663]
[-51.70857620 69.02696228]
[-41.25884247 75.01223755]
[-35.02898788 85.45958710]
[-20.05098724 86.27166748]
[-5.07298517 87.08375549]
[9.90501595 87.89583588]
[24.88301659 88.70792389]
[39.86101913 89.52000427]
[54.83901978 90.33208466]
[69.81702423 91.14417267]
[84.79502106 91.95625305]
[94.57398987 80.98540497]
[111.26290894 80.70031738]
[124.25328827 73.20031738]
[137.24366760 65.70031738]
[145.32632446 52.09952927]
[160.21710205 52.43659210]
[173.20748901 44.93659210]
[181.29014587 31.33580780]
[196.18092346 31.67287064]
[209.17131042 24.17287064]
[208.49130249 8.88247585]
[215.00546265 -4.96758318]
[227.21691895 -14.19466496]
[242.31954956 -16.67845345]
[256.84289551 -11.84819126]
[267.44955444 -0.81383824]
[271.70223999 13.88899231]
[268.62371826 28.88169670]
[258.92138672 40.71906281]
[244.82476807 46.68095016]
[229.57318115 45.39735794]
[216.67131042 37.16324997]
[203.68092346 44.66324997]
[196.52743530 57.72758484]
[180.70748901 57.92697525]
[167.71710205 65.42697144]
[160.56361389 78.49131012]
[144.74366760 78.69069672]
[131.75328064 86.19069672]
[118.76290894 93.69069672]
[115.80335236 108.39583588]
[124.88096619 120.33722687]
[133.95858765 132.27862549]
[149.59667969 135.86042786]
[156.41636658 150.38183594]
[149.18615723 164.70327759]
[133.45245361 167.83856201]
[121.28479767 157.38256836]
[122.01718903 141.35623169]
[112.93957520 129.41484070]
[103.86196136 117.47344971]
[106.05432129 132.31236267]
[97.73023987 144.79072571]
[83.18743896 148.46592712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[14 29]
[15 28]
[17 26]
[18 25]
[44 72]
[45 71]
[46 70]
[48 68]
[49 67]
[51 65]
[52 64]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
