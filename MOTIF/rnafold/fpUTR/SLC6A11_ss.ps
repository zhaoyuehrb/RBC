%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAGCCAGCUCGCCCGGGGCGGCGGCGCAGAGCCGGGCCGGCGCACGAGGCAGCCAGCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[113.94121552 135.11724854]
[100.88573456 137.77293396]
[87.72013092 135.73210144]
[76.08135223 129.24853516]
[67.41648865 119.12834167]
[62.80290222 106.62982941]
[47.80702591 106.27819061]
[32.81114960 105.92655182]
[23.80558395 108.93327332]
[17.12512970 105.19049835]
[2.16221666 104.13636017]
[-6.97438192 106.71766663]
[-13.47206020 102.66587830]
[-28.36911774 100.91155243]
[-43.26617432 99.15721893]
[-58.16323471 97.40289307]
[-74.60081482 101.55526733]
[-83.14128876 86.90956116]
[-71.43218231 74.64851379]
[-56.40890503 82.50583649]
[-41.51184464 84.26016235]
[-26.61478806 86.01449585]
[-11.71773052 87.76882172]
[3.21635962 89.17344666]
[18.17927361 90.22758484]
[33.16278458 90.93067169]
[48.15866470 91.28231049]
[63.15454102 91.63394928]
[70.25910187 76.69640350]
[83.06370544 66.22515106]
[99.11426544 62.22707367]
[115.33457947 65.46842957]
[128.61592102 75.32799530]
[136.41282654 89.91611481]
[151.37573242 88.86196899]
[166.33865356 87.80783081]
[181.30155945 86.75368500]
[194.52386475 78.06568909]
[207.76342773 84.88943481]
[222.72633362 83.83529663]
[235.94863892 75.14730072]
[249.18818665 81.97104645]
[264.15109253 80.91690063]
[279.11401367 79.86276245]
[294.04809570 78.45813751]
[308.94515991 76.70381165]
[319.97335815 65.05226898]
[335.94604492 66.55336761]
[344.61032104 80.05558014]
[339.31970215 95.20117950]
[324.13272095 100.37174225]
[310.69949341 91.60086823]
[295.80242920 93.35519409]
[289.30474854 97.40699005]
[280.16815186 94.82567596]
[265.20526123 95.87981415]
[250.24234009 96.93395996]
[238.09028625 105.54655457]
[223.78047180 98.79821014]
[208.81756592 99.85234833]
[196.66551208 108.46494293]
[182.35571289 101.71659851]
[167.39279175 102.77074432]
[152.42988586 103.82488251]
[137.46696472 104.87902832]
[133.44429016 117.58005524]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 28]
[7 27]
[8 26]
[10 25]
[11 24]
[13 23]
[14 22]
[15 21]
[16 20]
[34 65]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[42 57]
[43 56]
[44 55]
[45 53]
[46 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
