%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGCUUCCAAACCGGGCCUGCGCGCCGACGUUCCGCUGCGCCCCGCGCAAAACCGGAAGUACCCGGGCCCAAGGCUGAGGGACCCGGUGGAGCGGAAGUCACUCCCUGAGGCAGUGGCGACAGCGGCGGCGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[144.92770386 239.45446777]
[156.46319580 229.07603455]
[154.77169800 214.17170715]
[153.08020020 199.26739502]
[151.38870239 184.36306763]
[149.69720459 169.45874023]
[148.00570679 154.55442810]
[141.00024414 141.29080200]
[129.64384460 131.49121094]
[118.28744507 121.69161224]
[106.93104553 111.89201355]
[99.28775787 116.66448975]
[88.72448730 116.02579498]
[79.15663147 108.50093079]
[64.18057251 107.65383148]
[49.20450974 106.80673218]
[34.22844696 105.95962524]
[24.38294029 117.80750275]
[9.62141609 121.54257965]
[-4.34377098 115.93566132]
[-12.23507118 103.33148193]
[-27.21113205 102.48438263]
[-42.18719482 101.63727570]
[-57.16325378 100.79017639]
[-72.13932037 99.94307709]
[-87.11537933 99.09597778]
[-95.04976654 110.42517853]
[-107.45709229 116.28804779]
[-121.03105164 115.24118042]
[-132.21295166 107.66687012]
[-138.12471008 95.64452362]
[-153.07780457 94.45919037]
[-168.03089905 93.27384949]
[-179.89018250 103.72051239]
[-195.65737915 102.63825989]
[-205.97807312 90.66917419]
[-204.72917175 74.91430664]
[-192.65164185 64.72074127]
[-176.91085815 66.13613129]
[-166.84555054 78.32076263]
[-151.89247131 79.50609589]
[-136.93937683 80.69142914]
[-126.71453857 67.89837646]
[-110.72695160 63.64869690]
[-95.19132233 69.79811859]
[-86.26828003 84.11991119]
[-71.29221344 84.96701813]
[-56.31615448 85.81411743]
[-41.34009171 86.66121674]
[-26.36403084 87.50831604]
[-11.38796997 88.35542297]
[-2.12567449 76.72151184]
[12.38270855 72.72515869]
[26.62888336 78.10102081]
[35.07555008 90.98356628]
[50.05160904 91.83066559]
[65.02767181 92.67777252]
[80.00373077 93.52487183]
[65.90795135 88.39565277]
[58.89048767 75.13838196]
[62.57448196 60.59781647]
[75.05787659 52.28127289]
[89.89546967 54.48261261]
[99.42657471 66.06526947]
[98.72943878 81.05097961]
[103.71789551 66.90476990]
[108.70635223 52.75855637]
[113.69480896 38.61234283]
[118.68326569 24.46613312]
[123.51154327 10.26445293]
[128.17903137 -3.99088192]
[132.84651184 -18.24621773]
[123.64542389 -30.74099541]
[123.57949066 -46.25793076]
[132.67407227 -58.83044434]
[147.43212891 -63.62414932]
[162.17886353 -58.79576874]
[171.24388123 -46.20190811]
[171.14147949 -30.68517303]
[161.91104126 -18.21205711]
[147.10185242 -13.57873154]
[142.43437195 0.67660385]
[137.76687622 14.93193913]
[138.68267822 22.32979774]
[132.82948303 29.45458984]
[127.84101868 43.60079956]
[122.85256195 57.74701309]
[117.86410522 71.89322662]
[112.87564850 86.03943634]
[116.73063660 100.53560638]
[128.08703613 110.33520508]
[139.44345093 120.13480377]
[150.79985046 129.93440247]
[178.12142944 128.56715393]
[192.61759949 132.42214966]
[203.48513794 121.65906525]
[218.18385315 117.80616760]
[232.74081421 121.80132294]
[243.27305603 132.47502136]
[247.02330017 146.89033508]
[261.51947021 150.74531555]
[276.01562500 154.60031128]
[290.51181030 158.45530701]
[305.00799561 162.31028748]
[319.50415039 166.16528320]
[334.04296875 169.85621643]
[348.62255859 173.38261414]
[364.19290161 168.23512268]
[376.25424194 179.34620667]
[372.39892578 195.28572083]
[356.59295654 199.65647888]
[345.09616089 187.96220398]
[330.51657104 184.43580627]
[323.21420288 185.93333435]
[315.64916992 180.66145325]
[301.15298462 176.80645752]
[286.65682983 172.95147705]
[272.16064453 169.09648132]
[257.66448975 165.24150085]
[243.16830444 161.38650513]
[232.75288391 172.03472900]
[218.30993652 176.06672668]
[203.69137573 172.30319214]
[192.84819031 161.65789795]
[188.76260376 146.91831970]
[174.26643372 143.06332397]
[162.91003418 152.86293030]
[164.60153198 167.76724243]
[166.29302979 182.67156982]
[167.98452759 197.57589722]
[169.67602539 212.48020935]
[171.36752319 227.38453674]
[184.93539429 234.91398621]
[191.45581055 248.99459839]
[188.42152405 264.21212769]
[176.99928284 274.71508789]
[161.58119202 276.46487427]
[148.09579468 268.78869629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 132]
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 93]
[9 92]
[10 91]
[11 90]
[14 58]
[15 57]
[16 56]
[17 55]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[31 42]
[32 41]
[33 40]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[70 83]
[71 82]
[72 81]
[94 126]
[95 125]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
