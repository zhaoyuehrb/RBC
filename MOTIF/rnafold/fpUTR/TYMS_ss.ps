%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGACGGCCGCGGGAAAAGGCGCGCGGAAGGGGUCCUGCCACCGCGCCACUUGGCCUGCCUCCGUCCCGCCGCGCCACUUGGCCUGCCUCCGUCCCGCCGCGCCACUUCGCCUGCCUCCGUCCCCCGCCCGCCGCGCC\
) } def
/len { sequence length } bind def

/coor [
[207.92370605 484.43972778]
[213.54147339 476.68478394]
[209.22747803 462.31851196]
[204.91348267 447.95227051]
[200.59950256 433.58599854]
[196.28550720 419.21972656]
[191.97151184 404.85348511]
[187.65753174 390.48721313]
[174.46055603 383.67724609]
[169.88090515 369.16928101]
[177.11329651 355.37326050]
[172.79930115 341.00698853]
[168.48530579 326.64071655]
[164.17132568 312.27447510]
[159.85733032 297.90820312]
[146.66035461 291.09823608]
[142.08070374 276.59027100]
[149.31309509 262.79425049]
[144.99909973 248.42797852]
[140.36384583 234.16212463]
[135.40966797 220.00387573]
[130.45547485 205.84562683]
[125.50128937 191.68737793]
[120.54710388 177.52912903]
[115.59291840 163.37088013]
[110.48019409 149.26910400]
[105.20957184 135.22558594]
[99.93894958 121.18206024]
[84.78540802 114.73769379]
[78.82673645 99.38666534]
[85.66402435 84.40631104]
[80.07962036 70.48458099]
[74.33937073 56.62639236]
[68.44399261 42.83347321]
[62.54861832 29.04055786]
[49.50861359 25.47626305]
[41.04645157 15.18544102]
[40.09684753 2.09167004]
[46.78398895 -8.97839355]
[41.19958496 -22.90011787]
[35.61518097 -36.82184219]
[30.03077507 -50.74356842]
[12.38012981 -57.44583130]
[5.27473116 -74.59530640]
[12.75345993 -91.23822784]
[6.55008221 -104.89538574]
[0.34670472 -118.55255127]
[-5.85667276 -132.20971680]
[-13.89634609 -119.54623413]
[-28.78327942 -117.70797729]
[-39.66190720 -128.03538513]
[-38.59951782 -142.99772644]
[-26.37081146 -151.68441772]
[-11.89321232 -147.76133728]
[-16.52846718 -162.02719116]
[-21.16372299 -176.29302979]
[-36.86782837 -183.91003418]
[-42.14015579 -200.19502258]
[-34.19837189 -214.97724915]
[-39.15255737 -229.13549805]
[-51.92882156 -239.41650391]
[-49.14630890 -255.57786560]
[-33.66742706 -260.99417114]
[-21.41552353 -250.09356689]
[-24.99430847 -234.08969116]
[-20.04012299 -219.93144226]
[-7.72080469 -215.99461365]
[0.17897651 -205.50929260]
[0.57709527 -192.19198608]
[-6.89787483 -180.92829895]
[-2.26261973 -166.66244507]
[2.37263513 -152.39659119]
[7.80049038 -138.41308594]
[14.00386810 -124.75592804]
[20.20724487 -111.09876251]
[26.41062355 -97.44160461]
[37.80043411 -95.81666565]
[47.06423569 -88.79277802]
[51.80053329 -78.04408264]
[50.71067810 -66.22790527]
[43.95249939 -56.32797241]
[49.53690338 -42.40625000]
[55.12130737 -28.48452377]
[60.70571518 -14.56279850]
[76.41224670 -8.65593529]
[83.15633392 7.07669830]
[76.34153748 23.14518166]
[82.23690796 36.93809891]
[88.13228607 50.73101425]
[93.69947815 55.68615723]
[94.00134277 64.90017700]
[99.58575439 78.82190704]
[111.79354095 82.40466309]
[119.74671173 92.33509064]
[120.57608795 105.03070068]
[113.98247528 115.91143799]
[119.25309753 129.95495605]
[124.52371979 143.99848938]
[130.51733398 151.00318909]
[129.75117493 158.41668701]
[134.70535278 172.57493591]
[139.65954590 186.73320007]
[144.61372375 200.89144897]
[149.56791687 215.04969788]
[154.52209473 229.20794678]
[159.37254333 233.89541626]
[160.84217834 239.49304199]
[159.36537170 244.11398315]
[163.67935181 258.48025513]
[177.31550598 266.00973511]
[181.48585510 280.64062500]
[174.22358704 293.59420776]
[178.53758240 307.96047974]
[182.85157776 322.32672119]
[187.16555786 336.69299316]
[191.47955322 351.05926514]
[205.11569214 358.58874512]
[209.28604126 373.21963501]
[202.02378845 386.17321777]
[206.33778381 400.53948975]
[210.65176392 414.90573120]
[214.96575928 429.27200317]
[219.27975464 443.63827515]
[223.59373474 458.00451660]
[227.90773010 472.37078857]
[244.41751099 485.94686890]
[239.14869690 505.85537720]
[244.41932678 519.89892578]
[249.68994141 533.94244385]
[263.64334106 541.85961914]
[266.01083374 557.72705078]
[254.97627258 569.37255859]
[239.00442505 567.86273193]
[230.34753418 554.35577393]
[235.64642334 539.21307373]
[230.37579346 525.16955566]
[225.10517883 511.12600708]
[216.39505005 508.77328491]
[209.67552185 502.54702759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[11 116]
[12 115]
[13 114]
[14 113]
[15 112]
[18 109]
[19 108]
[20 105]
[21 104]
[22 103]
[23 102]
[24 101]
[25 100]
[26 98]
[27 97]
[28 96]
[31 92]
[32 91]
[33 89]
[34 88]
[35 87]
[39 84]
[40 83]
[41 82]
[42 81]
[45 76]
[46 75]
[47 74]
[48 73]
[54 72]
[55 71]
[56 70]
[59 66]
[60 65]
[127 137]
[128 136]
[129 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
