%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCGCAGCGGCGACGGCGUCGGCGGCGGCGGCGGCAGCGGCUCCGGCCGAGGUGCGCGCUGGGGGGGAGGGGGGGCCGGAGAGGAGCAUGAAUGGAGCAAA\
) } def
/len { sequence length } bind def

/coor [
[134.74955750 138.14076233]
[145.64225769 127.82819366]
[159.23373413 121.49213409]
[144.62449646 118.09063721]
[130.01525879 114.68913269]
[115.40602875 111.28762817]
[103.04879761 118.85367584]
[88.93673706 115.56793213]
[81.19246674 103.32160950]
[66.58323669 99.92010498]
[51.97399902 96.51860046]
[37.36476135 93.11709595]
[30.66793442 94.73619080]
[25.06523705 92.88707733]
[21.98174286 89.03710938]
[7.60704947 84.75129700]
[-6.76764393 80.46548462]
[-22.20323563 83.93724060]
[-32.18923569 72.88603973]
[-46.56393051 68.60022736]
[-60.93862152 64.31441498]
[-75.31331635 60.02860260]
[-89.81202698 56.18315887]
[-104.42125702 52.78165436]
[-119.61648560 57.18796921]
[-130.25764465 46.76610947]
[-144.86688232 43.36460876]
[-160.39259338 48.64515686]
[-172.54856873 37.63769913]
[-168.82978821 21.66576385]
[-153.06181335 17.15991020]
[-141.46537781 28.75537109]
[-126.85614014 32.15687561]
[-112.70585632 27.50726128]
[-101.01976013 38.17241669]
[-86.41052246 41.57392120]
[-81.82432556 39.75816345]
[-76.04166412 40.92874527]
[-71.02750397 45.65391159]
[-56.65280914 49.93972397]
[-42.27811813 54.22553635]
[-27.90342331 58.51134872]
[-13.49600601 54.73303986]
[-2.48183107 66.09078979]
[11.89286232 70.37660217]
[26.26755524 74.66241455]
[40.76626205 78.50786591]
[55.37549973 81.90936279]
[69.98473358 85.31086731]
[84.59397125 88.71237183]
[96.95120239 81.14632416]
[111.06326294 84.43206787]
[118.80753326 96.67839050]
[133.41676331 100.07989502]
[148.02600098 103.48139954]
[162.63523865 106.88290405]
[177.62826538 106.42546082]
[192.00296021 102.13964844]
[203.01713562 90.78189087]
[217.42454529 94.56020355]
[231.79924011 90.27439117]
[234.29074097 75.25594330]
[243.02029419 62.85908890]
[256.21264648 55.51183319]
[271.22509766 54.62466812]
[285.07687378 60.32008743]
[295.04089355 71.41889954]
[309.41558838 67.13308716]
[314.44204712 52.45267868]
[327.15679932 43.55802155]
[342.67074585 43.86929703]
[355.01849365 53.26680756]
[359.45202637 68.13701630]
[354.26663208 82.76203156]
[341.45614624 91.51823425]
[325.94647217 91.03868103]
[313.70141602 81.50777435]
[299.32672119 85.79358673]
[297.06747437 100.53676605]
[288.59625244 112.88778687]
[275.54907227 120.36659241]
[260.48718262 121.44333649]
[246.39416504 115.85102844]
[236.08505249 104.64908600]
[221.71035767 108.93489838]
[211.72436523 119.98609924]
[196.28877258 116.51433563]
[181.91407776 120.80014801]
[195.87020874 126.29800415]
[207.37045288 135.92837524]
[215.23368835 148.70217896]
[218.65226746 163.30741882]
[217.27510071 178.24406433]
[211.24362183 191.97801208]
[201.17732239 203.09869385]
[188.11006165 210.46392822]
[173.38394165 213.31727600]
[158.51144409 211.36564636]
[145.02008057 204.80950928]
[134.29548645 194.32221985]
[127.43917847 180.98089600]
[125.15531921 166.15579224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 56]
[4 55]
[5 54]
[6 53]
[9 50]
[10 49]
[11 48]
[12 47]
[15 46]
[16 45]
[17 44]
[19 42]
[20 41]
[21 40]
[22 39]
[23 36]
[24 35]
[26 33]
[27 32]
[57 88]
[58 87]
[60 85]
[61 84]
[67 78]
[68 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
