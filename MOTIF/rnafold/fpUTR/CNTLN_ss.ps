%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCCGGGCUCGCCGGGUUGGGGAAAGGGAGGUGGAGUUUCCAACAGGGAACUUGACCCGUUAGCAGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[69.16966248 162.27151489]
[66.37428284 164.11012268]
[63.48295593 164.80651855]
[60.88675308 164.47624207]
[49.85089493 174.63546753]
[38.81503677 184.79469299]
[27.77917862 194.95390320]
[25.68222427 210.85932922]
[11.86565208 219.01296997]
[-3.07164931 213.16004944]
[-7.67105913 197.79043579]
[1.59569609 184.69438171]
[17.61995506 183.91804504]
[28.65581322 173.75881958]
[39.69167328 163.59960938]
[50.72753143 153.44038391]
[60.65650558 142.19691467]
[69.37265778 129.98918152]
[78.08881378 117.78145599]
[86.80496216 105.57372284]
[88.34247589 91.67668915]
[100.98730469 85.71012115]
[109.70346069 73.50238800]
[100.21193695 60.15304184]
[95.76862335 44.41364670]
[96.87471771 28.12172318]
[103.38452911 13.17339706]
[114.52448273 1.30272400]
[128.98495483 -6.11946249]
[145.07421875 -8.24384880]
[160.91641235 -4.83979321]
[168.59468079 -17.72560310]
[176.27296448 -30.61141205]
[176.69030762 -46.42711258]
[189.85195923 -53.39991760]
[197.53024292 -66.28572845]
[205.20851135 -79.17153931]
[212.88679504 -92.05734253]
[220.56506348 -104.94315338]
[228.24333191 -117.82896423]
[235.92161560 -130.71476746]
[243.59988403 -143.60058594]
[243.28468323 -159.99670410]
[257.46438599 -168.23489380]
[271.55215454 -159.84040833]
[271.05566406 -143.44879150]
[256.48568726 -135.92230225]
[248.80741882 -123.03649902]
[241.12915039 -110.15068817]
[233.45086670 -97.26487732]
[225.77259827 -84.37906647]
[218.09431458 -71.49326324]
[210.41604614 -58.60745239]
[202.73776245 -45.72164154]
[202.86962891 -30.82761955]
[189.15876770 -22.93313599]
[181.48049927 -10.04732704]
[173.80221558 2.83848262]
[183.01469421 13.06092167]
[188.91574097 25.51146507]
[191.00070190 39.14825439]
[189.08473206 52.82705307]
[183.31910706 65.39726257]
[174.17933655 75.79869080]
[162.42594910 83.15097809]
[149.04122925 86.82810974]
[135.14712524 86.51169586]
[121.91118622 82.21854401]
[113.19503784 94.42627716]
[111.65752411 108.32331085]
[99.01269531 114.28987885]
[90.29653931 126.49761200]
[81.58039093 138.70533752]
[72.86423492 150.91307068]
[72.78978729 155.42582703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[17 74]
[18 73]
[19 72]
[20 71]
[22 69]
[23 68]
[31 58]
[32 57]
[33 56]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
