%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCGGGGGGAGGGGGGUGCGGCGAGCGGCCCCGCUCUCUCCCCACCGCUCCGCUCGCACCCCAGUGUAAUGAGGGUCACCCCCUCCCCCCAGCUGGCCCGGGAGGGGGCGCGGGGCACGGUUGAUGCCGGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[80.06127930 115.85416412]
[66.09227753 121.31925201]
[59.16998291 127.41059113]
[51.74533081 126.74607086]
[37.65639496 131.89407349]
[23.56745911 137.04206848]
[9.47852230 142.19006348]
[-4.55134010 147.49694824]
[-18.52033615 152.96202087]
[-32.48933411 158.42710876]
[-46.45832825 163.89219666]
[-60.42732620 169.35728455]
[-74.39632416 174.82235718]
[-88.36531830 180.28744507]
[-102.33431244 185.75253296]
[-116.30330658 191.21762085]
[-130.27230835 196.68269348]
[-137.19461060 202.77404785]
[-144.61924744 202.10951233]
[-158.70819092 207.25752258]
[-169.01473999 219.26109314]
[-183.62442017 216.36172485]
[-197.71336365 221.50971985]
[-211.80229187 226.65771484]
[-219.84082031 240.54158020]
[-235.72827148 242.77066040]
[-247.27713013 231.63497925]
[-245.62812805 215.67691040]
[-232.04621887 207.13809204]
[-216.95028687 212.56878662]
[-202.86135864 207.42079163]
[-188.77241516 202.27279663]
[-179.47361755 190.63743591]
[-163.85618591 193.16857910]
[-149.76725769 188.02058411]
[-135.73739624 182.71369934]
[-121.76839447 177.24861145]
[-107.79940033 171.78353882]
[-93.83039856 166.31845093]
[-79.86140442 160.85336304]
[-65.89241028 155.38827515]
[-51.92341232 149.92320251]
[-37.95441818 144.45811462]
[-23.98542023 138.99302673]
[-10.01642418 133.52793884]
[-4.89023733 128.11599731]
[4.33052540 128.10112000]
[18.41946220 122.95312500]
[32.50839996 117.80513000]
[46.59733582 112.65713501]
[60.62719727 107.35025787]
[74.59619141 101.88516998]
[76.27066803 88.21672058]
[85.03861237 76.90920258]
[98.86032104 71.48838043]
[114.03993988 73.99315643]
[126.21171570 84.25932312]
[136.13902283 73.01438904]
[146.06632996 61.76945114]
[151.21432495 47.68051529]
[150.87532043 32.68434525]
[150.53633118 17.68817520]
[150.19734192 2.69200659]
[149.68890381 -12.29937458]
[149.01109314 -27.28405190]
[137.17463684 -37.75658035]
[136.29360962 -53.53629303]
[146.89068604 -65.26136780]
[162.67883301 -65.97551727]
[174.29121399 -55.25506210]
[174.83840942 -39.46024704]
[163.99577332 -27.96186256]
[164.67358398 -12.97718525]
[168.14746094 -6.38179255]
[165.19351196 2.35301447]
[165.53250122 17.34918404]
[165.87149048 32.34535217]
[166.21049500 47.34152222]
[172.49897766 51.42868423]
[185.07595825 59.60300827]
[191.36445618 63.69017029]
[205.20637512 57.91078949]
[219.04829407 52.13140869]
[232.89021301 46.35202789]
[246.73213196 40.57264709]
[260.57406616 34.79326630]
[274.41598511 29.01388741]
[288.25790405 23.23450661]
[302.09982300 17.45512581]
[313.48922729 0.89003813]
[332.52743530 3.97669840]
[346.09405518 -2.42225862]
[354.99142456 -16.19792747]
[371.35446167 -15.11029243]
[378.35031128 -0.27821827]
[368.78219604 13.04032803]
[352.49301147 11.14436817]
[338.92639160 17.54332542]
[336.31298828 27.52808952]
[328.44021606 34.53866577]
[317.78356934 36.04367065]
[307.87918091 31.29704666]
[294.03726196 37.07642746]
[280.19534302 42.85580826]
[266.35342407 48.63518906]
[252.51150513 54.41456985]
[238.66958618 60.19394684]
[224.82766724 65.97332764]
[210.98574829 71.75270844]
[197.14382935 77.53208923]
[172.52180481 82.59480286]
[157.31126404 71.69675446]
[147.38395691 82.94168854]
[137.45664978 94.18663025]
[136.77883911 109.17131042]
[145.65037537 121.26658630]
[154.52192688 133.36186218]
[163.39346313 145.45713806]
[171.05923462 150.58145142]
[172.32516479 157.92750549]
[180.92109680 170.22018433]
[189.51702881 182.51286316]
[198.11296082 194.80554199]
[213.19216919 201.25143433]
[214.88056946 217.56343079]
[201.44126892 226.96116638]
[186.69947815 219.77703857]
[185.82028198 203.40147400]
[177.22434998 191.10879517]
[168.62841797 178.81611633]
[160.03248596 166.52343750]
[151.29818726 154.32867432]
[142.42665100 142.23339844]
[133.55509949 130.13812256]
[124.68356323 118.04285431]
[115.99503326 124.85226440]
[105.78474426 127.94186401]
[95.51932526 127.14685059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[4 50]
[5 49]
[6 48]
[7 47]
[8 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[17 36]
[19 35]
[20 34]
[22 32]
[23 31]
[24 30]
[57 114]
[58 113]
[59 112]
[60 78]
[61 77]
[62 76]
[63 75]
[64 73]
[65 72]
[81 110]
[82 109]
[83 108]
[84 107]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[91 98]
[92 97]
[115 135]
[116 134]
[117 133]
[118 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
