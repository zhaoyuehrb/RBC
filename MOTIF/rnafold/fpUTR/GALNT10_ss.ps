%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGAGCGGGGCCGGCGCCGCAGCCGCUUCUGCUGGCUGAGCUGCUGCCGCCGCCGGGCGGACGGGCGGACGCGCGGAGCUGGGGGCGGCGCGGCGGGGCCGGCGGGGCGCGGCGGGGCUGACCGGCCCCG\
) } def
/len { sequence length } bind def

/coor [
[47.15055466 675.85937500]
[40.05169678 689.65740967]
[26.18318367 696.61761475]
[10.87773991 694.06353760]
[0.02062389 682.97741699]
[-2.21338344 667.62200928]
[5.03473949 653.90179443]
[18.97794151 647.09246826]
[21.44686127 632.29705811]
[23.91577911 617.50164795]
[26.38469887 602.70617676]
[28.85361671 587.91076660]
[31.32253647 573.11535645]
[33.79145432 558.31994629]
[36.26037216 543.52453613]
[38.72929382 528.72912598]
[30.57429123 511.25854492]
[43.39056396 495.78070068]
[45.15802383 480.88519287]
[46.92547989 465.98968506]
[37.58280182 457.03582764]
[35.09518433 444.13781738]
[40.59880066 431.99606323]
[52.27517700 425.16842651]
[54.39395905 410.31881714]
[56.51273727 395.46920776]
[58.63151932 380.61959839]
[60.75029755 365.77001953]
[62.69355392 350.89642334]
[64.46101379 336.00091553]
[66.22846985 321.10540771]
[67.99593353 306.20989990]
[69.76338959 291.31439209]
[71.53084564 276.41888428]
[73.29830933 261.52337646]
[75.06576538 246.62786865]
[76.83322906 231.73236084]
[78.60068512 216.83686829]
[80.36814117 201.94136047]
[70.97741699 190.43701172]
[72.55767822 175.30567932]
[84.68816376 165.53381348]
[86.45561981 150.63832092]
[88.22307587 135.74281311]
[89.99053955 120.84730530]
[91.75799561 105.95179749]
[89.48968506 98.13027954]
[93.74715424 90.72688293]
[95.86593628 75.87728119]
[97.98471069 61.02767563]
[100.10349274 46.17807007]
[102.22227478 31.32846451]
[104.34105682 16.47885895]
[102.44490814 7.44346666]
[106.68924713 1.30517411]
[109.15816498 -13.49024582]
[103.79782867 -28.37571907]
[113.52444458 -39.65589142]
[115.99336243 -54.45130920]
[118.46228027 -69.24672699]
[109.39588165 -79.28439331]
[107.81980133 -92.52178192]
[114.08972931 -104.06451416]
[125.70186615 -109.77552795]
[128.51954651 -124.50850677]
[123.51227570 -139.51643372]
[133.50260925 -150.56372070]
[136.32028198 -165.29670715]
[130.42633057 -180.60008240]
[140.94152832 -193.18429565]
[157.04875183 -190.10380554]
[162.17825317 -174.52752686]
[151.05326843 -162.47901917]
[148.23558044 -147.74604797]
[153.44438171 -133.79191589]
[143.25251770 -121.69082642]
[140.43484497 -106.95784760]
[150.46421814 -93.51161194]
[147.65582275 -76.63248444]
[133.25770569 -66.77780914]
[130.78877258 -51.98239136]
[128.31985474 -37.18696976]
[133.85679626 -23.35976410]
[123.95359039 -11.02132702]
[121.48466492 3.77409291]
[119.19065857 18.59763908]
[117.07187653 33.44724274]
[114.95309448 48.29684830]
[112.83432007 63.14645386]
[110.71553802 77.99606323]
[108.59675598 92.84566498]
[106.65350342 107.71925354]
[104.88604736 122.61476135]
[103.11858368 137.51026917]
[101.35112762 152.40577698]
[99.58366394 167.30128479]
[109.09049988 179.64056396]
[107.08585358 194.72154236]
[95.26364899 203.70881653]
[93.49619293 218.60432434]
[91.72872925 233.49983215]
[89.96127319 248.39532471]
[88.19381714 263.29083252]
[86.42635345 278.18634033]
[84.65889740 293.08184814]
[82.89143372 307.97735596]
[81.12397766 322.87286377]
[79.35652161 337.76837158]
[77.58905792 352.66387939]
[79.69807434 361.65194702]
[75.59990692 367.88879395]
[73.48112488 382.73840332]
[71.36234283 397.58798218]
[69.24356079 412.43759155]
[67.12478638 427.28720093]
[77.87063599 441.03302002]
[75.44559479 457.97146606]
[61.82098770 467.75714111]
[60.05352783 482.65264893]
[58.28606796 497.54815674]
[65.57217407 505.78512573]
[67.03782654 516.46124268]
[62.43339157 525.95953369]
[53.52471161 531.19799805]
[51.05579376 545.99346924]
[48.58687592 560.78887939]
[46.11795425 575.58428955]
[43.64903641 590.37969971]
[41.18011856 605.17510986]
[38.71120071 619.97052002]
[36.24227905 634.76599121]
[33.77336121 649.56140137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 132]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[18 120]
[19 119]
[20 118]
[24 115]
[25 114]
[26 113]
[27 112]
[28 111]
[29 109]
[30 108]
[31 107]
[32 106]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 99]
[42 96]
[43 95]
[44 94]
[45 93]
[46 92]
[48 91]
[49 90]
[50 89]
[51 88]
[52 87]
[53 86]
[55 85]
[56 84]
[58 82]
[59 81]
[60 80]
[64 77]
[65 76]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
