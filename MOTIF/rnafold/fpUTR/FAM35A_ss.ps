%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGGUCGGGGCGGGUCGGGGCGGGCCCACGGGCGGCCGGAUUUGCCCGGAGGCCGCACCCGCCUCCGGCGGGGCUCUCAGUGAAAAAUGUACUCUGACCUGAAUCCUGAAUUUUCCUUGAUGGUCAAAAGAUUAAGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[277.35617065 412.25671387]
[269.94952393 399.21289062]
[262.54290771 386.16903687]
[255.13626099 373.12518311]
[240.24114990 373.15493774]
[227.24458313 365.67526245]
[219.68695068 352.60818481]
[219.68463135 337.41290283]
[227.33837891 324.17025757]
[219.93174744 311.12643433]
[212.52511597 298.08258057]
[205.11848450 285.03875732]
[197.71185303 271.99490356]
[190.30520630 258.95104980]
[182.61964417 246.06959534]
[174.65869141 233.35649109]
[166.69773865 220.64337158]
[158.73678589 207.93026733]
[150.77583313 195.21714783]
[142.81488037 182.50402832]
[134.85394287 169.79092407]
[126.89298248 157.07780457]
[118.93203735 144.36468506]
[110.97108459 131.65158081]
[83.06070709 133.41331482]
[60.41006470 112.19158936]
[60.25907898 78.07574463]
[45.75635910 74.24544525]
[31.25364304 70.41514587]
[16.75092506 66.58484650]
[3.20492840 74.27534485]
[-11.44832516 70.18428040]
[-18.69655800 57.22284698]
[-33.19927597 53.39254761]
[-47.70199203 49.56224823]
[-62.20470810 45.73194885]
[-76.70742798 41.90164948]
[-91.21014404 38.07135010]
[-105.71286011 34.24105072]
[-119.24353790 42.40783310]
[-134.56568909 38.53393173]
[-142.58895874 24.91766739]
[-138.55328369 9.63732624]
[-124.85295868 1.75846243]
[-109.61613464 5.95546722]
[-101.88256073 19.73833275]
[-87.37984467 23.56863213]
[-72.87712860 27.39893150]
[-58.37440872 31.22923088]
[-43.87169266 35.05952835]
[-29.36897469 38.88982773]
[-14.86625767 42.72012711]
[-2.16323376 35.02800369]
[12.59914780 38.70587540]
[20.58122444 52.08213043]
[35.08394241 55.91242981]
[49.58665848 59.74272919]
[64.08937836 63.57302856]
[75.03273773 53.31423950]
[72.14596558 38.59463882]
[67.39170837 30.70820427]
[69.35901642 23.52746201]
[66.78961945 8.74915981]
[64.22022247 -6.02914190]
[61.65082550 -20.80744362]
[59.08142853 -35.58574677]
[56.51203156 -50.36404800]
[47.84192276 -64.93338013]
[59.44175720 -77.29785156]
[74.53417206 -69.57417297]
[71.29033661 -52.93344498]
[73.85973358 -38.15514374]
[76.42913055 -23.37684059]
[78.99852753 -8.59853935]
[81.56792450 6.17976236]
[84.13732147 20.95806313]
[86.86556244 35.70786667]
[89.75233459 50.42746353]
[104.64741516 52.19853973]
[110.90531921 38.56627274]
[106.69889832 23.08449173]
[116.29623413 10.22872448]
[132.33506775 9.86081696]
[142.51177979 22.26299667]
[139.01966858 37.92137146]
[124.53758240 44.82417679]
[118.27967834 58.45644379]
[125.97128296 64.40021515]
[132.00166321 71.66143799]
[136.17314148 79.81332397]
[138.39161682 88.40738678]
[138.66636658 96.99757385]
[137.10432434 105.16309357]
[133.89968872 112.52901459]
[129.31916809 118.78343964]
[123.68419647 123.69062805]
[131.64514160 136.40374756]
[139.60609436 149.11685181]
[147.56704712 161.82997131]
[155.52799988 174.54307556]
[163.48895264 187.25619507]
[171.44990540 199.96931458]
[179.41085815 212.68241882]
[187.37181091 225.39553833]
[195.33274841 238.10865784]
[201.08520508 241.59967041]
[203.75573730 246.71957397]
[203.34906006 251.54443359]
[210.75569153 264.58825684]
[218.16232300 277.63211060]
[225.56895447 290.67596436]
[232.97558594 303.71978760]
[240.38221741 316.76364136]
[255.67608643 316.97601318]
[268.72406006 324.76364136]
[276.07327271 337.94906616]
[275.83746338 352.94241333]
[268.18011475 365.71856689]
[275.58673096 378.76242065]
[282.99337769 391.80624390]
[290.39999390 404.85009766]
[311.01705933 405.77597046]
[326.87258911 418.77182007]
[331.76193237 438.54022217]
[323.89886475 457.17648315]
[332.66333008 469.34957886]
[341.42782593 481.52267456]
[350.19229126 493.69573975]
[358.95675659 505.86883545]
[374.12335205 512.10638428]
[376.03631592 528.39355469]
[362.72775269 537.97552490]
[347.88839722 530.99517822]
[346.78366089 514.63330078]
[338.01919556 502.46023560]
[329.25473022 490.28713989]
[320.49026489 478.11404419]
[311.72576904 465.94097900]
[302.15887451 468.30514526]
[292.29656982 467.64486694]
[283.07498169 464.00466919]
[275.37487793 457.71279907]
[269.93768311 449.35177612]
[267.29391479 439.70428467]
[267.71163940 429.68008423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 108]
[15 105]
[16 104]
[17 103]
[18 102]
[19 101]
[20 100]
[21 99]
[22 98]
[23 97]
[24 96]
[27 58]
[28 57]
[29 56]
[30 55]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[59 78]
[60 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
[79 87]
[80 86]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
