%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUUUCUAUUGGUCCUGGGUACCGAGCAUGGGCGCUGCGUCAGUGCGCGCUGGCGCAAGGUUGGUGGAAGUCGCGUUGUGCAGGUUCGUGCCCGGCUGGCGCGGCGUGGUUUCACUGUUACAUGCCUUGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[19.22856140 283.20938110]
[12.94091320 296.82794189]
[6.65326548 310.44650269]
[5.88086033 319.63671875]
[0.06435803 324.30099487]
[-6.53166294 337.77291870]
[-0.02799677 351.99389648]
[-4.23678207 367.05444336]
[-17.17075920 375.84344482]
[-32.72290039 374.21096802]
[-43.54995728 362.92785645]
[-44.53972626 347.32162476]
[-35.22487259 334.76107788]
[-20.00357819 331.17691040]
[-13.40755749 317.70498657]
[-6.96530581 304.15887451]
[-0.67765808 290.54028320]
[5.60998964 276.92172241]
[-4.32200050 266.94546509]
[-10.25201607 254.14512634]
[-11.44509506 240.05838013]
[-7.73668528 226.38523865]
[0.44500858 214.78280640]
[12.12836838 206.66450500]
[25.91370773 203.02787781]
[40.14094925 204.33206177]
[46.73697281 190.86013794]
[53.33299255 177.38822937]
[59.92901230 163.91630554]
[66.37126160 150.37019348]
[72.65891266 136.75161743]
[78.94656372 123.13304901]
[85.23420715 109.51448059]
[81.84885406 94.90148926]
[70.21318054 85.43517303]
[58.57751465 75.96885681]
[43.06600189 77.39389801]
[31.40063095 67.62795258]
[30.13765717 52.83131409]
[18.50198936 43.36499405]
[6.86631918 33.89867783]
[-4.76935005 24.43235779]
[-16.40501976 14.96603775]
[-28.04068947 5.49971867]
[-39.67635727 -3.96660042]
[-51.31202698 -13.43291950]
[-62.94769669 -22.89923859]
[-79.21611023 -24.96585083]
[-85.31019592 -40.19063568]
[-74.96089172 -52.91164017]
[-58.81467056 -50.04258347]
[-53.48137665 -34.53490829]
[-41.84570694 -25.06858826]
[-30.21003914 -15.60227013]
[-18.57436943 -6.13595057]
[-6.93870068 3.33036852]
[4.69696903 12.79668808]
[16.33263779 22.26300621]
[27.96830750 31.72932625]
[39.60397720 41.19564438]
[54.34808731 39.42173767]
[66.28316498 48.85617447]
[68.04383087 64.33318329]
[79.67950439 73.79950714]
[91.31517029 83.26582336]
[106.25302124 84.62984467]
[119.41076660 77.42749023]
[132.56849670 70.22513580]
[145.72624207 63.02278519]
[158.88398743 55.82043076]
[172.04171753 48.61807632]
[185.19946289 41.41572189]
[191.28953552 34.48986435]
[198.73970032 34.20306015]
[212.05798340 27.30208588]
[225.37626648 20.40110970]
[238.69453430 13.50013351]
[252.01281738 6.59915829]
[265.33108521 -0.30181733]
[278.64938354 -7.20279312]
[291.96765137 -14.10376835]
[305.28591919 -21.00474358]
[318.60421753 -27.90571976]
[331.92248535 -34.80669403]
[340.61578369 -48.02550507]
[355.47579956 -47.01104355]
[368.79409790 -53.91202164]
[382.11236572 -60.81299591]
[388.35852051 -67.59842682]
[395.81329346 -67.71556854]
[409.28521729 -74.31159210]
[417.98083496 -88.21547699]
[434.35797119 -87.36646271]
[441.56924438 -72.63793182]
[432.19631958 -59.18134308]
[415.88122559 -60.83967209]
[402.40930176 -54.24365234]
[389.01333618 -47.49471664]
[375.69506836 -40.59374237]
[362.37680054 -33.69276810]
[354.63607788 -20.96755981]
[338.82345581 -21.48841667]
[325.50518799 -14.58744144]
[312.18692017 -7.68646574]
[298.86862183 -0.78549021]
[285.55035400 6.11548519]
[272.23205566 13.01646137]
[258.91378784 19.91743660]
[245.59552002 26.81841278]
[232.27723694 33.71938705]
[218.95895386 40.62036133]
[205.64068604 47.52133942]
[192.40180969 54.57345963]
[179.24407959 61.77581406]
[166.08633423 68.97816467]
[152.92858887 76.18051910]
[139.77085876 83.38287354]
[126.61312103 90.58522797]
[113.45537567 97.78758240]
[113.80176544 102.77304077]
[112.30504608 107.70652771]
[109.05425262 111.90972900]
[104.38620758 114.76442719]
[98.85278320 115.80212402]
[92.56513214 129.42070007]
[86.27748108 143.03927612]
[79.98983765 156.65783691]
[79.21743011 165.84805298]
[73.40093231 170.51232910]
[66.80490875 183.98425293]
[60.20888901 197.45616150]
[53.61286545 210.92808533]
[64.30589294 222.88102722]
[69.59740448 237.98011780]
[68.70940399 253.91644287]
[61.80646896 268.26492310]
[49.96623993 278.85345459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[5 15]
[6 14]
[26 132]
[27 131]
[28 130]
[29 129]
[30 127]
[31 126]
[32 125]
[33 124]
[34 65]
[35 64]
[36 63]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[66 119]
[67 118]
[68 117]
[69 116]
[70 115]
[71 114]
[72 113]
[74 112]
[75 111]
[76 110]
[77 109]
[78 108]
[79 107]
[80 106]
[81 105]
[82 104]
[83 103]
[84 102]
[86 100]
[87 99]
[88 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
