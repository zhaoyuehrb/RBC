%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGUGCGGCUGGCCCGGUUUCCUGGCGACGCGGCCCUGCAGGCGGUUGCGUUCCCCGUCGUUACCCUCUUUCUCUUCCCGACGCGUGAGUUAGGCCGUA\
) } def
/len { sequence length } bind def

/coor [
[242.98393250 209.33958435]
[231.01367188 200.30006409]
[219.04341125 191.26054382]
[207.07315063 182.22103882]
[195.10289001 173.18151855]
[175.88603210 172.40449524]
[167.93026733 154.00932312]
[155.42622375 145.72384644]
[142.92219543 137.43836975]
[130.41815186 129.15289307]
[117.91412354 120.86742401]
[101.11604309 129.57244873]
[81.23202515 125.52835846]
[67.40426636 108.85205841]
[52.97688675 112.95700073]
[38.54949951 117.06194305]
[27.39355469 128.28047180]
[13.03472424 124.32152557]
[-1.39266002 128.42646790]
[-14.97248459 138.57658386]
[-28.48519325 128.33729553]
[-22.38674736 112.51814270]
[-5.49760485 113.99908447]
[8.92978001 109.89414215]
[19.05378342 98.96922302]
[34.44455719 102.63455963]
[48.87194061 98.52961731]
[63.29932404 94.42466736]
[68.50191498 80.35580444]
[60.21644211 67.85176849]
[51.93096542 55.34772873]
[43.64549255 42.84369659]
[35.36001587 30.33965874]
[27.07454300 17.83562279]
[18.78906822 5.33158731]
[10.50359344 -7.17244816]
[2.21811891 -19.67648506]
[-6.25892735 -32.05144501]
[-14.92553520 -44.29439926]
[-29.01197433 -53.72883224]
[-23.84575653 -69.87648010]
[-6.89901352 -69.38227844]
[-2.68258119 -52.96100616]
[5.98402643 -40.71805191]
[12.53095627 -37.01333618]
[14.72215462 -27.96195793]
[23.00762939 -15.45792294]
[31.29310417 -2.95388722]
[39.57857895 9.55014896]
[47.86405182 22.05418396]
[56.14952850 34.55821991]
[64.43500519 47.06225586]
[72.72047424 59.56629181]
[81.00595093 72.07032776]
[96.69438171 67.64694977]
[111.99073792 71.12397766]
[123.30212402 81.08655548]
[128.25875854 94.67044067]
[126.19960022 108.36338806]
[138.70362854 116.64886475]
[151.20767212 124.93433380]
[163.71170044 133.21981812]
[176.21574402 141.50527954]
[186.94874573 138.69181824]
[197.21626282 142.27217102]
[203.60632324 150.79472351]
[204.14241028 161.21125793]
[216.11267090 170.25077820]
[228.08293152 179.29029846]
[240.05319214 188.32981873]
[252.02345276 197.36933899]
[264.16876221 189.76043701]
[278.15850830 186.78868103]
[292.28863525 188.79499817]
[304.84527588 195.51521301]
[314.31250000 206.11463928]
[319.55541992 219.29173279]
[319.95614624 233.43785095]
[315.48660278 246.83364868]
[327.17279053 256.23748779]
[342.77493286 258.86117554]
[347.83981323 272.86819458]
[359.52603149 282.27203369]
[371.21221924 291.67590332]
[386.89584351 289.72653198]
[399.31271362 299.50387573]
[401.09616089 315.20721436]
[391.18807983 327.52005005]
[375.46676636 329.13735962]
[363.25936890 319.09963989]
[361.80838013 303.36212158]
[350.12216187 293.95825195]
[338.43594360 284.55438232]
[323.66967773 282.60333252]
[317.76895142 267.92370605]
[306.08273315 258.51983643]
[292.37768555 266.31472778]
[276.69702148 268.29336548]
[261.41131592 264.12725830]
[248.84257507 254.41889954]
[240.91169739 240.61511230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[7 63]
[8 62]
[9 61]
[10 60]
[11 59]
[14 28]
[15 27]
[16 26]
[18 24]
[19 23]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 44]
[39 43]
[79 96]
[80 95]
[82 93]
[83 92]
[84 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
