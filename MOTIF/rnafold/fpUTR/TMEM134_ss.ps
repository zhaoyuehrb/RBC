%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCAUGCGGGGGCGGGGCAGCGGCGACGCUGGGUGUGUGGGCGCAGAUGGCGGCGGCGCACGGCGCCUGAGCGGGCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[-3.55487776 278.68695068]
[-4.53703070 287.58374023]
[-8.20538998 295.71063232]
[-14.18172932 302.28131104]
[-21.86569214 306.66732788]
[-30.49505997 308.45809937]
[-39.22134781 307.49923706]
[-47.19322968 303.90567017]
[-58.36481094 313.91543579]
[-62.95342255 329.65954590]
[-78.94466400 333.29440308]
[-89.88813019 321.08074951]
[-84.52610779 305.58300781]
[-68.37459564 302.74386597]
[-57.20301056 292.73406982]
[-58.82292938 271.03607178]
[-44.28137970 254.50825500]
[-22.04280472 253.32467651]
[-13.31492233 241.12532043]
[-4.58703804 228.92597961]
[-7.27024698 214.31994629]
[1.40728390 201.82374573]
[16.74562073 199.10838318]
[25.47350311 186.90904236]
[34.20138931 174.70968628]
[42.92927170 162.51034546]
[41.28102875 150.37757874]
[48.65566635 140.10177612]
[61.47084427 137.62545776]
[70.63845062 125.75301361]
[79.80605316 113.88056183]
[88.97366333 102.00811768]
[97.92289734 89.97021484]
[106.65077972 77.77086639]
[115.37866974 65.57151794]
[124.10655212 53.37217331]
[132.83442688 41.17282867]
[141.56231689 28.97348213]
[150.06593323 16.61676407]
[158.34245300 4.10679626]
[166.61897278 -8.40317154]
[167.78056335 -24.18167686]
[181.25595093 -30.52700233]
[189.53247070 -43.03696823]
[197.57913208 -55.69601059]
[205.39323425 -68.49990845]
[199.30484009 -82.77264404]
[202.80133057 -97.89065552]
[214.53823853 -108.04074860]
[230.00250244 -109.32001495]
[243.24777222 -101.23654175]
[249.18096924 -86.89859772]
[245.52067566 -71.81941223]
[233.67434692 -61.79723358]
[218.19712830 -60.68580246]
[210.38302612 -47.88190842]
[209.56761169 -40.35562134]
[202.04243469 -34.76045227]
[193.76593018 -22.25048637]
[193.19631958 -7.36677599]
[179.12893677 -0.12665498]
[170.85241699 12.38331223]
[162.57589722 24.89328003]
[161.48617554 32.38476562]
[153.76165771 37.70136642]
[145.03378296 49.90071106]
[136.30589294 62.10005569]
[127.57801056 74.29940033]
[118.85012817 86.49874878]
[110.12224579 98.69809723]
[108.30052948 106.76268005]
[100.84610748 111.17572021]
[91.67850494 123.04817200]
[82.51089478 134.92062378]
[73.34329224 146.79306030]
[71.42051697 164.99537659]
[55.12861633 171.23823547]
[46.40073395 183.43757629]
[37.67285156 195.63691711]
[28.94496536 207.83627319]
[31.32748604 223.22981262]
[22.30238724 235.47735596]
[7.61230803 237.65385437]
[-1.11557579 249.85321045]
[-9.84345913 262.05255127]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 15]
[9 14]
[18 85]
[19 84]
[20 83]
[23 80]
[24 79]
[25 78]
[26 77]
[29 75]
[30 74]
[31 73]
[32 72]
[33 70]
[34 69]
[35 68]
[36 67]
[37 66]
[38 65]
[39 63]
[40 62]
[41 61]
[43 59]
[44 58]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
