%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUAGGAGUGAAGGAAAGGCGGGGACCCGGAUGUGUGUGGUGGCGGCGGCCGAAGAGCUUGUGUGCGGAGCUGAGAGGCCUAUGG\
) } def
/len { sequence length } bind def

/coor [
[98.03907013 115.97473145]
[89.48423004 128.29603577]
[81.15067291 140.76808167]
[73.04106140 153.38688660]
[77.85664368 168.26452637]
[71.93454742 182.73736572]
[58.07101059 189.97175598]
[42.81197357 186.55184937]
[33.36228180 174.09242249]
[34.18379593 158.47642517]
[44.88861847 147.07727051]
[60.42226028 145.27728271]
[68.53187561 132.65847778]
[69.52128601 125.16008759]
[77.16291809 119.74120331]
[85.71775818 107.41989136]
[71.64401245 112.60927582]
[59.26263809 104.14160156]
[58.99486542 89.14398956]
[71.06607819 80.23973083]
[85.31615448 84.92347717]
[76.32698822 72.91535950]
[61.12797546 74.62921143]
[47.20374298 68.54541779]
[38.25371933 56.38962173]
[36.60091400 41.48579025]
[42.58969116 27.84760094]
[33.60052490 15.83948135]
[24.61135864 3.83136296]
[15.40929317 -8.01439476]
[5.99725819 -19.69401741]
[-9.74129200 -21.13401031]
[-19.78754425 -33.33435440]
[-18.18123627 -49.05680084]
[-5.87535954 -58.97349930]
[9.82922459 -57.20105362]
[19.61526680 -44.79101944]
[17.67688179 -29.10605240]
[27.08891678 -17.42642975]
[33.89112091 -14.11966228]
[36.61947632 -5.15780210]
[45.60864258 6.85031652]
[54.59780884 18.85843468]
[69.37078857 16.95457077]
[83.20526123 22.73931885]
[92.34715271 34.75148773]
[94.26159668 49.82569504]
[88.33510590 63.92618942]
[97.32427216 75.93431091]
[117.97616577 90.54582214]
[132.97616577 90.54582214]
[147.97616577 90.54582214]
[162.97616577 90.54582214]
[170.71258545 77.35131073]
[183.92739868 69.85027313]
[199.02215576 69.97010803]
[211.94378662 77.57849884]
[219.27278137 90.54582214]
[234.27278137 90.54582214]
[249.27278137 90.54582214]
[264.27276611 90.54582214]
[279.27276611 90.54582214]
[289.18515015 78.45124054]
[304.56219482 75.60861969]
[318.14334106 83.36016083]
[323.51599121 98.04582214]
[318.14334106 112.73148346]
[304.56219482 120.48302460]
[289.18515015 117.64040375]
[279.27276611 105.54582214]
[264.27276611 105.54582214]
[249.27278137 105.54582214]
[234.27278137 105.54582214]
[219.27278137 105.54582214]
[211.94378662 118.51314545]
[199.02215576 126.12154388]
[183.92739868 126.24137878]
[170.71258545 118.74033356]
[162.97616577 105.54582214]
[147.97616577 105.54582214]
[132.97616577 105.54582214]
[117.97616577 105.54582214]
[131.45222473 112.13339233]
[137.03201294 126.05696869]
[131.83467102 140.12777710]
[118.54361725 147.08103943]
[104.02103424 143.32675171]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 13]
[4 12]
[21 49]
[22 48]
[27 43]
[28 42]
[29 41]
[30 39]
[31 38]
[50 82]
[51 81]
[52 80]
[53 79]
[58 74]
[59 73]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
