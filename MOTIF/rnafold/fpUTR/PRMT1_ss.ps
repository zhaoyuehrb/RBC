%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCAAUGAAAUCUUCCAGCGGGGUCGCGGUAGGCGGGCCGUGGACCCUCUGGUAUAAGGCGGUCCCGGGGGAGUGAGGAGAAAGGGGGGGUCUUGGCGGCCGGAGGAGGAGUAGGUGCGGGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[110.40454102 352.63479614]
[113.79864502 337.81762695]
[122.60874939 325.43011475]
[135.49137878 317.36126709]
[132.96601868 302.57537842]
[130.44065857 287.78945923]
[120.67107391 276.54650879]
[125.97457886 261.64068604]
[123.44921875 246.85478210]
[110.93583679 242.04302979]
[102.38548279 231.57629395]
[100.13114166 218.14030457]
[104.87207794 205.25227356]
[115.46199036 196.34014893]
[113.29465485 181.49755859]
[111.12731934 166.65496826]
[108.95998383 151.81236267]
[106.79264832 136.96977234]
[104.62531281 122.12717438]
[105.98678589 137.06526184]
[98.71949768 150.18724060]
[85.33481598 156.95852661]
[70.45812225 155.03915405]
[59.23039246 145.09239197]
[55.53162003 130.55557251]
[60.63999939 116.45222473]
[72.79021454 107.65606689]
[87.78382111 107.20691681]
[72.78820038 106.84445953]
[57.79257965 106.48200226]
[45.23250580 116.46318817]
[29.63075638 112.72621918]
[22.95565796 98.13777924]
[30.32777786 83.88887024]
[46.09185410 80.91003418]
[58.15503693 91.48638153]
[73.15065765 91.84883881]
[88.14627838 92.21129608]
[100.38717651 83.54178619]
[105.02243042 69.27593994]
[109.65768433 55.01009369]
[114.29294586 40.74424362]
[118.92819977 26.47839737]
[123.56345367 12.21254921]
[127.85263824 -2.16113853]
[131.79324341 -16.63427162]
[135.73385620 -31.10740471]
[139.67446899 -45.58053970]
[143.61508179 -60.05367279]
[147.55569458 -74.52680206]
[151.49630737 -88.99993896]
[155.43692017 -103.47306824]
[159.37751770 -117.94620514]
[146.53961182 -125.88774872]
[136.46981812 -137.11367798]
[129.97784424 -150.70851135]
[127.58212280 -165.56678772]
[129.46835327 -180.48303223]
[135.47518921 -194.24943542]
[145.10800171 -205.75376892]
[157.57957458 -214.06916809]
[171.87440491 -218.52885437]
[186.83149719 -218.77957153]
[190.77210999 -233.25270081]
[186.93197632 -248.60079956]
[197.74105835 -258.84838867]
[201.68167114 -273.32150269]
[205.62228394 -287.79464722]
[200.92077637 -303.50540161]
[212.37118530 -315.24508667]
[228.19433594 -310.93688965]
[232.11270142 -295.01275635]
[220.09541321 -283.85403442]
[216.15480042 -269.38088989]
[212.21420288 -254.90777588]
[216.33618164 -240.59489441]
[205.24523926 -229.31208801]
[201.30462646 -214.83895874]
[214.07008362 -207.04020691]
[224.13092041 -195.94918823]
[230.66545105 -182.45898438]
[233.13641357 -167.65914917]
[231.33511353 -152.74769592]
[225.39906311 -138.93409729]
[215.80145264 -127.34124756]
[203.31353760 -118.91408539]
[188.94258118 -114.34265900]
[173.85066223 -114.00559235]
[169.91004944 -99.53246307]
[165.96943665 -85.05932617]
[162.02882385 -70.58619690]
[158.08821106 -56.11306000]
[154.14759827 -41.63992691]
[150.20698547 -27.16679382]
[146.26638794 -12.69366074]
[142.32577515 1.77947211]
[143.93202209 6.37540674]
[142.59509277 12.03087139]
[137.82929993 16.84780312]
[133.19404602 31.11365128]
[128.55879211 45.37949753]
[123.92353821 59.64534760]
[119.28828430 73.91119385]
[114.65302277 88.17704010]
[119.46791077 119.95983887]
[121.63524628 134.80242920]
[123.80258179 149.64503479]
[125.96991730 164.48762512]
[128.13725281 179.33023071]
[130.30459595 194.17282104]
[145.35319519 201.78839111]
[152.85664368 216.70814514]
[150.05358887 233.00358582]
[138.23510742 244.32943726]
[140.76046753 259.11532593]
[150.71067810 271.41589355]
[145.22654724 285.26412964]
[147.75190735 300.05001831]
[150.27726746 314.83590698]
[165.10771179 318.17150879]
[177.52989197 326.93264771]
[185.64953613 339.78332520]
[188.22842407 354.76391602]
[184.87332153 369.58996582]
[176.09584045 382.00061035]
[163.23448181 390.10333252]
[148.25051880 392.66250610]
[133.42890930 389.28790283]
[121.02980804 380.49411011]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 119]
[5 118]
[6 117]
[8 115]
[9 114]
[14 110]
[15 109]
[16 108]
[17 107]
[18 106]
[19 105]
[28 38]
[29 37]
[30 36]
[39 104]
[40 103]
[41 102]
[42 101]
[43 100]
[44 99]
[45 96]
[46 95]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 88]
[63 78]
[64 77]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
