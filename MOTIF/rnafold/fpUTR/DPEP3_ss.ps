%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUGGGGGCGGAAAAGCCGUGGCGCCCCCUUGCGUGGCGCGUCGGUCUCAGAGUCGCGUGACUUCAACCCCCUCUUCGGGAGGCUGGGUCGUC\
) } def
/len { sequence length } bind def

/coor [
[72.50226593 98.65110016]
[58.76566315 104.67653656]
[52.94653702 119.12560272]
[38.92983627 125.04055786]
[25.19072151 119.40386963]
[11.45412064 125.42929840]
[-2.28247881 131.45472717]
[-16.01907921 137.48016357]
[-29.75567818 143.50559998]
[-43.49227905 149.53102112]
[-57.22887802 155.55645752]
[-57.71807098 170.81173706]
[-64.78544617 184.34004211]
[-77.02777100 193.45530701]
[-92.01432037 196.34771729]
[-106.76951599 192.44294739]
[-118.36368561 182.51632690]
[-124.49481201 168.53877258]
[-123.94554901 153.28553772]
[-116.82495117 139.78517151]
[-104.54682922 130.71818542]
[-89.54900360 127.88481903]
[-74.80930328 131.84765625]
[-63.25431061 141.81985474]
[-49.51771164 135.79441833]
[-35.78110886 129.76899719]
[-22.04450989 123.74356079]
[-8.30790997 117.71813202]
[5.42868948 111.69270325]
[19.16528893 105.66726685]
[24.32349014 91.74144745]
[38.16852188 85.43511963]
[52.74023056 90.93993378]
[66.47682953 84.91450500]
[75.29360962 72.77925110]
[76.77929688 57.85300446]
[70.44688416 43.35434341]
[79.40671539 31.45599747]
[80.89240265 16.52975464]
[82.37808228 1.60351050]
[83.86376953 -13.32273293]
[85.34944916 -28.24897575]
[86.34080505 -43.21618271]
[86.83676147 -58.20798111]
[75.07652283 -68.51481628]
[72.74387360 -83.97743988]
[80.94021606 -97.29487610]
[95.79548645 -102.17903137]
[110.29547882 -96.32376099]
[117.59375000 -82.49374390]
[114.24426270 -67.21909332]
[101.82855988 -57.71202850]
[101.33261108 -42.72023010]
[104.02587891 -38.55669785]
[103.99067688 -32.62068176]
[100.27569580 -26.76329422]
[98.79000854 -11.83705044]
[97.30432892 3.08919334]
[95.81864166 18.01543617]
[94.33296204 32.94168091]
[100.77163696 46.37271500]
[91.70553589 59.33868790]
[90.21985626 74.26493073]
[101.59217834 73.41519165]
[111.94762421 77.20751953]
[119.54380798 84.67509460]
[123.23986816 94.26363373]
[122.66264343 104.14728546]
[135.73490906 111.50363922]
[148.80717468 118.85999298]
[161.87944031 126.21634674]
[175.18777466 133.13645935]
[188.71765137 139.61277771]
[202.24751282 146.08909607]
[215.77738953 152.56539917]
[229.30725098 159.04171753]
[246.20454407 160.42658997]
[249.55143738 177.04690552]
[234.50715637 184.86395264]
[222.83093262 172.57159424]
[209.30107117 166.09527588]
[195.77119446 159.61895752]
[182.24133301 153.14263916]
[168.71145630 146.66633606]
[163.81672668 147.46028137]
[158.39483643 145.04357910]
[154.52308655 139.28860474]
[141.45082092 131.93225098]
[128.37855530 124.57590485]
[115.30628967 117.21955109]
[107.83338165 122.46084595]
[98.63872528 124.49847412]
[89.07977295 122.80514526]
[80.65502167 117.42173004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[35 63]
[36 62]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 53]
[44 52]
[68 90]
[69 89]
[70 88]
[71 87]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
