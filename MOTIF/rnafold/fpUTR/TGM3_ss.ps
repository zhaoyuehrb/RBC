%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUAUAAAUGGUAAGGCAAUCCUUGGCAGCCUGUCUGUCAGCACUGUCCGUGCCAUUCCCAGAGGAGCCUGAGAAGAGGCAGAGGAAGGCGAAAC\
) } def
/len { sequence length } bind def

/coor [
[33.68952179 298.56958008]
[23.81468964 309.86062622]
[10.74467373 317.22094727]
[-4.02998638 319.81121826]
[-18.82435036 317.33596802]
[-31.95123482 310.07754517]
[-41.91361237 298.86367798]
[-47.57535553 284.97320557]
[-48.29077530 269.99029541]
[-43.97829437 255.62356567]
[-35.13174438 243.51345825]
[-49.64116669 247.31828308]
[-61.02740097 258.30300903]
[-75.30102539 254.04708862]
[-89.81045532 257.85189819]
[-104.31987762 261.65673828]
[-118.82929993 265.46154785]
[-133.33871460 269.26635742]
[-144.60955811 281.17855835]
[-160.49629211 277.11114502]
[-164.65600586 261.24832153]
[-152.80955505 249.90841675]
[-137.14353943 254.75694275]
[-122.63411713 250.95211792]
[-108.12469482 247.14730835]
[-93.61527252 243.34248352]
[-79.10585022 239.53765869]
[-68.75742340 228.82508850]
[-53.44598770 232.80885315]
[-38.93656540 229.00404358]
[-25.86678314 221.64328003]
[-15.09154320 211.20803833]
[-4.31630325 200.77279663]
[6.45893717 190.33755493]
[10.17044163 171.47514343]
[29.55299950 166.41426086]
[39.63751221 155.31008911]
[49.72202682 144.20591736]
[59.80654144 133.10174561]
[69.89105225 121.99757385]
[79.97556305 110.89340973]
[78.73587799 91.78528595]
[92.50000000 78.47340393]
[92.50000000 63.47340393]
[92.50000000 48.47340393]
[92.50000000 33.47340393]
[82.21823120 21.15818024]
[85.57711029 5.47068644]
[100.00000000 -1.55497313]
[114.42288971 5.47068644]
[117.78176880 21.15818024]
[107.50000000 33.47340393]
[107.50000000 48.47340393]
[107.50000000 63.47340393]
[107.50000000 78.47340393]
[111.07103729 80.07322693]
[114.31586456 82.26020813]
[117.13885498 84.96990204]
[131.04260254 79.34089661]
[144.94636536 73.71189117]
[154.83441162 61.36131287]
[169.53509521 63.75701904]
[183.43884277 58.12801361]
[197.34259033 52.49900818]
[203.27590942 37.85075378]
[217.86164856 31.76537514]
[232.44635010 37.85322189]
[238.37718201 52.50248337]
[232.13546753 67.02201080]
[217.42433167 72.79762268]
[202.97160339 66.40276337]
[189.06785583 72.03176880]
[175.16409302 77.66077423]
[166.27052307 89.60872650]
[150.57536316 87.61564636]
[136.67161560 93.24465179]
[122.76786041 98.87365723]
[118.49095154 113.33150482]
[106.12506866 121.95741272]
[91.07973480 120.97792053]
[80.99522400 132.08209229]
[70.91071320 143.18626404]
[60.82619476 154.29043579]
[50.74168396 165.39460754]
[40.65716934 176.49876404]
[41.81209564 187.55146790]
[36.70108414 197.16864014]
[27.28587914 202.18673706]
[16.89417458 201.11280823]
[6.11893511 211.54803467]
[-4.65630531 221.98327637]
[-15.43154526 232.41851807]
[-0.48686257 231.13148499]
[14.03404903 234.89221191]
[26.47518730 243.27183533]
[35.41773605 255.31471252]
[39.84186172 269.64743042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 30]
[12 29]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[31 92]
[32 91]
[33 90]
[34 89]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[43 55]
[44 54]
[45 53]
[46 52]
[58 77]
[59 76]
[60 75]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
