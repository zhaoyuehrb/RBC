%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:05 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DDX17)
} def

/sequence { (\
GUUAAGUUGGAGCCGACUCAGCGGCGGCCGCCAUUUUGUGCAGUCGCUGGGAAGGAAGGAGACGCCUAAACCGCGGCACUGCCCGGUUUGAGCGUAGCCAAAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.007772252 ubox
1 13 0.027061734 ubox
1 17 0.003563249 ubox
1 22 0.024754967 ubox
1 98 0.007368725 ubox
1 103 0.094484295 ubox
2 6 0.009097234 ubox
2 10 0.043559166 ubox
2 11 0.074716854 ubox
2 12 0.034105203 ubox
2 16 0.003929572 ubox
2 21 0.025563451 ubox
2 56 0.005856326 ubox
2 57 0.012510148 ubox
2 97 0.007348405 ubox
2 101 0.017626377 ubox
2 102 0.095185642 ubox
3 9 0.053613405 ubox
3 10 0.078615648 ubox
3 11 0.036268540 ubox
3 15 0.003865184 ubox
3 20 0.023944038 ubox
3 56 0.014043239 ubox
3 57 0.003467239 ubox
3 96 0.006844003 ubox
3 100 0.018710087 ubox
3 101 0.089218425 ubox
4 8 0.046045089 ubox
4 95 0.004839174 ubox
5 18 0.056808730 ubox
6 13 0.021460327 ubox
6 17 0.065101087 ubox
6 22 0.003776265 ubox
6 63 0.006134443 ubox
6 98 0.009887776 ubox
6 103 0.121733055 ubox
7 12 0.024485717 ubox
7 16 0.067422634 ubox
7 21 0.003978488 ubox
7 56 0.011546950 ubox
7 57 0.033032595 ubox
7 59 0.003635101 ubox
7 60 0.010157520 ubox
7 61 0.008086800 ubox
7 62 0.006378514 ubox
7 97 0.009805302 ubox
7 101 0.087011947 ubox
7 102 0.120477516 ubox
8 15 0.067854732 ubox
8 20 0.003961046 ubox
8 56 0.037135976 ubox
8 57 0.013430907 ubox
8 58 0.006195690 ubox
8 59 0.010908558 ubox
8 60 0.009763268 ubox
8 61 0.007105071 ubox
8 96 0.008728501 ubox
8 100 0.101547465 ubox
8 101 0.112776668 ubox
9 14 0.067525154 ubox
9 19 0.003327378 ubox
9 95 0.004276765 ubox
9 99 0.103841718 ubox
10 19 0.005484255 ubox
10 98 0.102686309 ubox
11 18 0.005946033 ubox
12 17 0.006008035 ubox
13 55 0.992520404 ubox
13 59 0.006181545 ubox
14 54 0.996121724 ubox
14 58 0.006192654 ubox
17 50 0.024334542 ubox
17 51 0.996596475 ubox
17 54 0.004967372 ubox
18 49 0.003831752 ubox
18 50 0.997015254 ubox
18 52 0.010778746 ubox
18 53 0.004503452 ubox
18 56 0.004119703 ubox
19 49 0.999185797 ubox
19 50 0.004773196 ubox
19 51 0.014079377 ubox
19 54 0.004036759 ubox
19 55 0.005650345 ubox
20 48 0.999005807 ubox
21 47 0.999219411 ubox
22 46 0.999204110 ubox
22 49 0.028317200 ubox
23 45 0.999056341 ubox
23 48 0.037781856 ubox
24 41 0.003235435 ubox
24 44 0.998550348 ubox
24 47 0.039222153 ubox
25 40 0.003265240 ubox
25 43 0.996689771 ubox
25 46 0.039395123 ubox
26 32 0.005655789 ubox
26 45 0.040229011 ubox
27 31 0.005572006 ubox
27 39 0.012111833 ubox
27 41 0.954532335 ubox
27 44 0.041777797 ubox
28 38 0.012169787 ubox
28 40 0.846681905 ubox
28 43 0.042098736 ubox
29 38 0.683104945 ubox
29 40 0.523421558 ubox
30 37 0.520891975 ubox
30 39 0.689736716 ubox
30 41 0.066882550 ubox
31 38 0.687306290 ubox
31 40 0.066470767 ubox
32 38 0.176144971 ubox
32 40 0.018868238 ubox
33 37 0.155070418 ubox
33 39 0.027509731 ubox
34 38 0.025607361 ubox
54 99 0.003396837 ubox
55 98 0.003387590 ubox
58 99 0.992896840 ubox
59 98 0.993956333 ubox
62 95 0.998140066 ubox
63 94 0.999901051 ubox
64 93 0.999970138 ubox
65 92 0.998276716 ubox
66 92 0.051078572 ubox
67 90 0.966024657 ubox
67 91 0.058521156 ubox
68 88 0.003473879 ubox
68 89 0.996416436 ubox
69 88 0.998273551 ubox
69 89 0.006755611 ubox
70 87 0.999445941 ubox
70 88 0.005109677 ubox
71 86 0.999986440 ubox
72 85 0.999972641 ubox
73 82 0.007915336 ubox
73 84 0.999408517 ubox
74 81 0.008679371 ubox
75 80 0.006652472 ubox
75 83 0.999813897 ubox
75 84 0.003186575 ubox
76 82 0.999898905 ubox
76 83 0.003235501 ubox
77 81 0.992625433 ubox
13 55 0.9500000 lbox
14 54 0.9500000 lbox
17 51 0.9500000 lbox
18 50 0.9500000 lbox
19 49 0.9500000 lbox
20 48 0.9500000 lbox
21 47 0.9500000 lbox
22 46 0.9500000 lbox
23 45 0.9500000 lbox
24 44 0.9500000 lbox
25 43 0.9500000 lbox
27 41 0.9500000 lbox
28 40 0.9500000 lbox
29 38 0.9500000 lbox
30 37 0.9500000 lbox
58 99 0.9500000 lbox
59 98 0.9500000 lbox
62 95 0.9500000 lbox
63 94 0.9500000 lbox
64 93 0.9500000 lbox
65 92 0.9500000 lbox
67 90 0.9500000 lbox
68 89 0.9500000 lbox
69 88 0.9500000 lbox
70 87 0.9500000 lbox
71 86 0.9500000 lbox
72 85 0.9500000 lbox
73 84 0.9500000 lbox
75 83 0.9500000 lbox
76 82 0.9500000 lbox
77 81 0.9500000 lbox
showpage
end
%%EOF
