%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:30 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RSPH9)
} def

/sequence { (\
AGCUUCAGGUCUCCAUGGAGGCGGCUUCUCCUAGCAACUCGACGGGCGUUGAGCGGAGCCGCUGACCUG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.009210466 ubox
1 63 0.003379828 ubox
1 68 0.005184045 ubox
2 10 0.025827447 ubox
2 11 0.010491939 ubox
2 22 0.003583345 ubox
2 62 0.003529031 ubox
2 67 0.005389809 ubox
3 9 0.028400311 ubox
3 20 0.066989431 ubox
3 21 0.003596318 ubox
3 61 0.003506948 ubox
4 8 0.025596154 ubox
4 19 0.068900463 ubox
4 20 0.003547681 ubox
5 18 0.069513892 ubox
5 19 0.003805250 ubox
5 65 0.007508009 ubox
6 17 0.069919005 ubox
6 18 0.003631112 ubox
6 64 0.008053845 ubox
6 69 0.970785249 ubox
7 16 0.069600658 ubox
7 63 0.007967606 ubox
7 68 0.992539321 ubox
8 14 0.065542096 ubox
8 60 0.003424002 ubox
8 62 0.007586178 ubox
8 67 0.994998135 ubox
9 13 0.064590286 ubox
9 22 0.008122248 ubox
9 59 0.003548249 ubox
9 66 0.995004395 ubox
10 18 0.004742473 ubox
10 19 0.011530556 ubox
10 21 0.008839498 ubox
10 65 0.994206904 ubox
11 17 0.011806710 ubox
11 18 0.017434162 ubox
11 20 0.070621830 ubox
11 58 0.004926004 ubox
11 64 0.991022583 ubox
12 17 0.020952851 ubox
12 18 0.057693479 ubox
12 19 0.231697525 ubox
12 20 0.004887722 ubox
12 46 0.003893697 ubox
12 57 0.005705708 ubox
12 65 0.014288208 ubox
13 17 0.067150774 ubox
13 18 0.241427629 ubox
13 20 0.031651668 ubox
13 21 0.017293120 ubox
13 45 0.005185205 ubox
13 56 0.005715819 ubox
13 64 0.019181132 ubox
14 20 0.040924864 ubox
14 44 0.005191137 ubox
14 55 0.005709897 ubox
14 64 0.017130984 ubox
14 69 0.035322834 ubox
15 63 0.019425046 ubox
15 68 0.035277990 ubox
16 64 0.005530594 ubox
17 31 0.010078246 ubox
17 63 0.017937582 ubox
17 67 0.069350725 ubox
18 30 0.010097648 ubox
18 40 0.005617868 ubox
18 62 0.009552045 ubox
18 66 0.069476928 ubox
19 29 0.010096930 ubox
19 39 0.005615035 ubox
19 63 0.067651149 ubox
19 68 0.011361638 ubox
20 28 0.010089063 ubox
20 38 0.005536425 ubox
20 60 0.005364268 ubox
20 62 0.048594296 ubox
20 63 0.977266348 ubox
20 67 0.012737579 ubox
21 27 0.008385269 ubox
21 59 0.005375601 ubox
21 62 0.998212827 ubox
21 66 0.013324031 ubox
22 58 0.005329641 ubox
22 61 0.999671375 ubox
22 64 0.017152371 ubox
23 60 0.999715019 ubox
23 63 0.018335630 ubox
24 35 0.008768650 ubox
24 59 0.999722889 ubox
24 62 0.018445355 ubox
25 34 0.008805371 ubox
25 58 0.994708066 ubox
25 61 0.018437019 ubox
26 33 0.008738350 ubox
26 56 0.006756929 ubox
26 57 0.961748293 ubox
26 58 0.024461998 ubox
27 55 0.013427022 ubox
27 56 0.932037813 ubox
27 57 0.170852666 ubox
28 34 0.019565927 ubox
28 53 0.108906641 ubox
28 55 0.918686963 ubox
28 56 0.240362753 ubox
28 58 0.098456764 ubox
29 33 0.032623234 ubox
29 42 0.005134752 ubox
29 46 0.008506635 ubox
29 52 0.125246126 ubox
29 55 0.228732064 ubox
29 56 0.030132952 ubox
29 57 0.209583013 ubox
30 41 0.005531183 ubox
30 45 0.030589300 ubox
30 46 0.006437474 ubox
30 51 0.125172198 ubox
30 55 0.074113128 ubox
30 56 0.256116461 ubox
31 44 0.030629141 ubox
31 45 0.008374999 ubox
31 53 0.410442942 ubox
31 55 0.257282681 ubox
31 56 0.038199951 ubox
32 44 0.008109888 ubox
32 51 0.227947139 ubox
32 52 0.370696206 ubox
32 55 0.037184270 ubox
33 39 0.009299375 ubox
33 50 0.279972247 ubox
34 38 0.011890979 ubox
34 47 0.105333719 ubox
34 49 0.295857946 ubox
34 54 0.410360286 ubox
35 46 0.104945984 ubox
35 48 0.295961380 ubox
35 51 0.467521775 ubox
35 53 0.364807859 ubox
36 50 0.470808057 ubox
37 49 0.471350577 ubox
38 45 0.243926954 ubox
38 46 0.149231138 ubox
38 48 0.470563638 ubox
38 53 0.732026505 ubox
39 44 0.221496910 ubox
39 45 0.148273478 ubox
39 46 0.454088633 ubox
39 52 0.818608722 ubox
40 44 0.146882426 ubox
40 45 0.462742456 ubox
40 48 0.034024679 ubox
40 51 0.820817810 ubox
41 47 0.039815926 ubox
41 50 0.820152630 ubox
42 49 0.820374078 ubox
43 48 0.818943371 ubox
46 54 0.035854473 ubox
47 53 0.035959000 ubox
47 55 0.003508225 ubox
48 54 0.005980211 ubox
49 53 0.005597953 ubox
52 63 0.009485501 ubox
53 62 0.010039838 ubox
54 61 0.010160071 ubox
55 60 0.010028590 ubox
6 69 0.9500000 lbox
7 68 0.9500000 lbox
8 67 0.9500000 lbox
9 66 0.9500000 lbox
10 65 0.9500000 lbox
11 64 0.9500000 lbox
20 63 0.9500000 lbox
21 62 0.9500000 lbox
22 61 0.9500000 lbox
23 60 0.9500000 lbox
24 59 0.9500000 lbox
25 58 0.9500000 lbox
26 57 0.9500000 lbox
27 56 0.9500000 lbox
28 55 0.9500000 lbox
38 53 0.9500000 lbox
39 52 0.9500000 lbox
40 51 0.9500000 lbox
41 50 0.9500000 lbox
42 49 0.9500000 lbox
43 48 0.9500000 lbox
showpage
end
%%EOF
