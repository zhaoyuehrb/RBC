%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:23:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCGCAAGAGAGCGGGAAGCCGAGCUGGGCGAGAAGUAGGGGAGGGCGGUGCUCCGCCGCGGUGGCGGUUGCUAUCGCUUCGCAGAACCUACUCAGGCAGCCAGCUGAGAAGAGUUGAGGGAAAGUGCUGCUGCUGGGUCUGCAGACGCG\
) } def
/len { sequence length } bind def

/coor [
[45.79616928 195.56896973]
[38.12611771 181.07405090]
[47.07204437 167.32987976]
[47.37802124 152.33299255]
[47.68399811 137.33612061]
[33.97667313 131.24438477]
[23.05052376 141.52151489]
[12.12437725 151.79864502]
[13.26087284 165.25578308]
[6.52074337 176.73309326]
[-5.43012142 182.13523865]
[-18.11598969 179.68589783]
[-29.24950027 189.73800659]
[-30.21200371 205.28507996]
[-41.64616394 215.32075500]
[-56.46198654 214.30734253]
[-67.59549713 224.35945129]
[-78.72901154 234.41156006]
[-83.25783539 250.17295837]
[-99.23516846 253.86846924]
[-110.22489929 241.69645691]
[-104.92173767 226.17845154]
[-88.78112030 223.27804565]
[-77.64760590 213.22593689]
[-66.51409912 203.17382812]
[-66.01364899 188.33181763]
[-54.86587906 177.97894287]
[-39.30161285 178.60449219]
[-28.16809845 168.55238342]
[-28.04736900 151.76219177]
[-15.59560966 140.00172424]
[1.84725189 140.87249756]
[12.77339840 130.59536743]
[23.69954491 120.31824493]
[23.31721306 112.82799530]
[8.80150032 116.60874176]
[-5.71421289 120.38949585]
[-17.15233040 130.09359741]
[-32.11734009 131.11755371]
[-44.77064133 123.06186676]
[-50.17554474 109.06948090]
[-46.22332764 94.59951019]
[-34.45594788 85.29742432]
[-19.46445274 84.79243469]
[-7.09792423 93.28135681]
[7.72731066 95.56443024]
[22.55254555 97.84749603]
[22.17021179 90.35724640]
[10.25440598 81.24607086]
[-1.66140008 72.13489532]
[-13.57720661 63.02371597]
[-25.49301338 53.91253662]
[-41.81633759 52.33738708]
[-48.36671448 37.30327225]
[-38.40567780 24.27600288]
[-22.18028831 26.65691376]
[-16.38183403 41.99673080]
[-4.46602869 51.10790634]
[7.44977760 60.21908569]
[19.36558342 69.33026123]
[31.28139114 78.44144440]
[43.90019226 70.33183289]
[40.56237793 55.70791245]
[37.22456360 41.08399200]
[33.88675308 26.46007347]
[30.54893684 11.83615494]
[27.21112251 -2.78776407]
[23.87331009 -17.41168213]
[20.53549576 -32.03560257]
[8.99067211 -43.68244934]
[13.56518936 -59.43065262]
[29.55317497 -63.07980347]
[40.50756073 -50.87597656]
[35.15941238 -35.37341690]
[38.49722672 -20.74949646]
[41.83504105 -6.12557793]
[45.17285538 8.49834061]
[48.51066971 23.12225914]
[51.84848404 37.74617767]
[55.18629837 52.37009811]
[58.52411270 66.99401855]
[83.96417999 53.04158401]
[111.01206207 55.09466553]
[131.03739929 70.45567322]
[138.74644470 92.50000000]
[153.74644470 92.50000000]
[168.74644470 92.50000000]
[183.74644470 92.50000000]
[198.74644470 92.50000000]
[207.38819885 89.35544586]
[214.05163574 92.65612030]
[229.04852295 92.96209717]
[244.04539490 93.26807404]
[259.04226685 93.57405090]
[265.89886475 83.77435303]
[276.53857422 78.58002472]
[288.24249268 79.18877411]
[298.08187866 85.33156586]
[303.65124512 95.36920929]
[318.62313843 96.28663635]
[333.59506226 97.20405579]
[348.56698608 98.12148285]
[363.53890991 99.03890991]
[378.51083374 99.95633698]
[393.50381470 99.49740601]
[408.39157104 97.66599274]
[423.27935791 95.83457947]
[438.16714478 94.00316620]
[453.05490112 92.17174530]
[462.58343506 79.56289673]
[478.24819946 77.46755219]
[490.75558472 87.12883759]
[492.68521118 102.81488800]
[482.89224243 115.21944427]
[467.18664551 116.98310852]
[454.88632202 107.05952454]
[439.99853516 108.89093781]
[425.11077881 110.72235107]
[410.22299194 112.55377197]
[395.33520508 114.38518524]
[407.84747314 122.65825653]
[414.03344727 136.32330322]
[411.99356079 151.18394470]
[402.35421753 162.67668152]
[388.07550049 167.27220154]
[373.54229736 163.55931091]
[363.21752930 152.67816162]
[360.27182007 137.97024536]
[365.60977173 123.95217896]
[377.59338379 114.92825317]
[362.62149048 114.01082611]
[347.64956665 113.09339905]
[332.67764282 112.17597961]
[317.70571899 111.25855255]
[302.73379517 110.34112549]
[289.83660889 123.27088165]
[271.26464844 122.71913910]
[258.73629761 108.57093048]
[243.73942566 108.26495361]
[228.74253845 107.95897675]
[213.74566650 107.65299988]
[198.74644470 107.50000000]
[183.74644470 107.50000000]
[168.74644470 107.50000000]
[153.74644470 107.50000000]
[138.74644470 107.50000000]
[131.89202881 128.61967468]
[113.63061523 144.18099976]
[88.16069794 148.18788147]
[62.68087769 137.64208984]
[62.37490082 152.63897705]
[62.06892014 167.63584900]
[70.44680023 181.73348999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 152]
[4 151]
[5 150]
[6 34]
[7 33]
[8 32]
[12 29]
[13 28]
[16 25]
[17 24]
[18 23]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
[62 81]
[63 80]
[64 79]
[65 78]
[66 77]
[67 76]
[68 75]
[69 74]
[85 146]
[86 145]
[87 144]
[88 143]
[89 142]
[91 141]
[92 140]
[93 139]
[94 138]
[99 135]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
