%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCGCCUCCCCAGCCUCGCUGUGGCCUGCGGCUCCCGGGCUGGUAGCGCGCCGCUCUCGGUCGCGCGGAGUGAUCGUGUGGAAUCGCGGGUCGCGGACGCUCGCCGCCGGCCAUAGCUCAGCCUAGCGCCGCCAAGGCCGACGGCCCUCAGCCUCUGCC\
) } def
/len { sequence length } bind def

/coor [
[266.36431885 513.95098877]
[270.90304565 499.05004883]
[263.99099731 485.73754883]
[257.07891846 472.42501831]
[242.84519958 468.18984985]
[235.64573669 454.78750610]
[240.18447876 439.88659668]
[233.27241516 426.57406616]
[226.36035156 413.26153564]
[215.94256592 414.01171875]
[205.83808899 411.21963501]
[197.22062683 405.18295288]
[191.10006714 396.57775879]
[188.20413208 386.38284302]
[188.89193726 375.76852417]
[193.10972595 365.96212769]
[200.39402771 358.10626221]
[194.52130127 344.30368042]
[179.98857117 341.15130615]
[169.98034668 329.91299438]
[168.49131775 314.75924683]
[176.30107117 301.48092651]
[170.42835999 287.67834473]
[164.55563354 273.87576294]
[158.68292236 260.07318115]
[152.81019592 246.27061462]
[146.93746948 232.46803284]
[141.06475830 218.66545105]
[135.19203186 204.86288452]
[129.31932068 191.06030273]
[117.21675873 182.37829590]
[118.93343353 166.65049744]
[113.06071472 152.84791565]
[107.18798828 139.04533386]
[101.31526947 125.24275970]
[95.44255066 111.44017792]
[85.57038116 100.14681244]
[72.67683411 92.48152924]
[59.78329086 84.81625366]
[46.81692123 77.27481079]
[33.77891541 69.85791779]
[20.67046928 62.56623077]
[7.49278450 55.40043640]
[-5.68489933 48.23463821]
[-18.86258316 41.06884003]
[-32.04026794 33.90304184]
[-45.21794891 26.73724556]
[-61.03783417 26.94194221]
[-68.52263641 14.06455994]
[-81.70031738 6.89876270]
[-94.87800598 -0.26703474]
[-108.05568695 -7.43283224]
[-124.85901642 -9.68771648]
[-127.34387970 -26.45857811]
[-111.91630554 -33.48896790]
[-100.88989258 -20.61051559]
[-87.71220398 -13.44471836]
[-74.53452301 -6.27892113]
[-61.35683823 0.88687605]
[-46.47951126 0.16963299]
[-38.05215454 13.55956173]
[-24.87446976 20.72535896]
[-11.69678593 27.89115715]
[1.48089814 35.05695343]
[14.65858173 42.22275162]
[27.83626556 49.38854980]
[35.24936295 49.82333755]
[41.19581223 56.81990814]
[54.23382187 64.23680878]
[61.63722992 64.81351471]
[67.44857025 71.92270660]
[80.34211731 79.58798981]
[93.23565674 87.25326538]
[106.80316925 80.85617828]
[109.09290314 66.03197479]
[111.38264465 51.20776749]
[113.67238617 36.38356018]
[115.96212769 21.55935478]
[118.25186157 6.73514748]
[116.46462250 -2.27140856]
[120.73006439 -8.34998417]
[123.30333710 -23.12761116]
[125.87660980 -37.90523911]
[128.44989014 -52.68286514]
[122.30327606 -67.88652039]
[132.60859680 -80.64317322]
[148.76463318 -77.82987213]
[154.15142822 -62.34070206]
[143.22750854 -50.10958862]
[140.65423584 -35.33196259]
[138.08096313 -20.55433655]
[135.50769043 -5.77670860]
[133.07606506 9.02488708]
[130.78633118 23.84909248]
[128.49659729 38.67329788]
[126.20684814 53.49750519]
[123.91711426 68.32170868]
[121.62737274 83.14591980]
[130.74391174 71.23421478]
[145.74357605 71.33559418]
[158.11314392 79.82051086]
[163.60842896 93.77764893]
[160.34393311 108.41810608]
[149.43974304 118.71852875]
[134.63725281 121.14467621]
[121.01623535 114.86483002]
[109.24512482 105.56745911]
[115.11785126 119.37004089]
[120.99057007 133.17262268]
[126.86328888 146.97518921]
[132.73600769 160.77777100]
[145.25862122 170.44703674]
[143.12188721 185.18757629]
[148.99461365 198.99015808]
[154.86734009 212.79273987]
[160.74005127 226.59532166]
[166.61277771 240.39788818]
[172.48548889 254.20046997]
[178.35821533 268.00305176]
[184.23094177 281.80563354]
[190.10365295 295.60821533]
[205.08651733 299.18872070]
[214.97257996 310.76971436]
[216.13000488 325.77386475]
[208.32388306 338.43096924]
[214.19660950 352.23355103]
[233.84495544 355.61639404]
[247.41923523 370.02325439]
[249.59617615 389.55361938]
[239.67288208 406.34945679]
[246.58494568 419.66198730]
[253.49700928 432.97451782]
[268.29614258 437.83493042]
[275.11630249 451.43420410]
[270.39144897 465.51293945]
[277.30352783 478.82546997]
[284.21557617 492.13800049]
[299.01470947 496.99841309]
[305.83486938 510.59765625]
[301.11001587 524.67639160]
[308.02209473 537.98895264]
[314.93414307 551.30145264]
[328.16018677 559.98376465]
[327.15811157 574.84460449]
[334.07019043 588.15716553]
[340.83386230 594.36724854]
[340.98437500 601.79156494]
[347.64016724 615.23400879]
[354.29598999 628.67651367]
[368.97463989 635.15075684]
[372.92538452 650.69976807]
[363.11752319 663.39562988]
[347.07479858 663.49920654]
[337.10385132 650.93103027]
[340.85348511 635.33227539]
[334.19769287 621.88983154]
[327.54190063 608.44732666]
[320.75765991 595.06921387]
[313.84558105 581.75671387]
[301.11395264 574.02661133]
[301.62164307 558.21356201]
[294.70956421 544.90100098]
[287.79748535 531.58850098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 137]
[3 136]
[4 135]
[7 132]
[8 131]
[9 130]
[17 126]
[18 125]
[22 121]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[32 111]
[33 110]
[34 109]
[35 108]
[36 107]
[37 73]
[38 72]
[39 71]
[40 69]
[41 68]
[42 66]
[43 65]
[44 64]
[45 63]
[46 62]
[47 61]
[49 59]
[50 58]
[51 57]
[52 56]
[74 98]
[75 97]
[76 96]
[77 95]
[78 94]
[79 93]
[81 92]
[82 91]
[83 90]
[84 89]
[140 163]
[141 162]
[142 161]
[144 159]
[145 158]
[147 157]
[148 156]
[149 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
