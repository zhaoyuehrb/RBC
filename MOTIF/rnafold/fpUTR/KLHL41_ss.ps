%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUACAGCUAGACCUGUGUGCUGCAAGGAGCUAAGGCCUUCAGUGUCCCCUUCCUUACCCAGGUUUCUCACAGA\
) } def
/len { sequence length } bind def

/coor [
[75.05702209 346.71411133]
[59.96510315 346.34460449]
[45.53285980 341.91595459]
[32.83126068 333.75680542]
[22.80284882 322.47259521]
[16.19180107 308.90066528]
[13.48869801 294.04821777]
[14.89412880 279.01733398]
[20.30380249 264.92343140]
[29.31628418 252.81237793]
[41.26278687 243.58287048]
[55.25680542 237.91983032]
[70.25988007 236.24346924]
[72.66605377 221.43771362]
[75.07221985 206.63195801]
[77.47839355 191.82620239]
[79.88455963 177.02046204]
[82.29073334 162.21470642]
[84.69689941 147.40895081]
[79.10139465 133.60534668]
[88.95220184 121.22502899]
[91.35836792 106.41927338]
[90.15136719 91.46791077]
[85.40135193 77.23986816]
[80.65132904 63.01181793]
[75.90131378 48.78377151]
[70.06137085 41.39302063]
[71.25904083 33.88620377]
[67.08577728 19.47842979]
[62.91251755 5.07065868]
[58.73925400 -9.33711338]
[44.09860611 -14.47822857]
[35.30366135 -27.26214600]
[35.73625565 -42.77318954]
[45.23004532 -55.04704666]
[60.13447571 -59.36417007]
[74.71849060 -54.06453323]
[83.37423706 -41.18595886]
[82.77340698 -25.68052101]
[73.14702606 -13.51037502]
[77.32028961 0.89739662]
[81.49355316 15.30516815]
[85.66680908 29.71294022]
[90.12935638 44.03375244]
[94.87937927 58.26179886]
[99.62939453 72.48984528]
[104.37941742 86.71789551]
[111.03661346 73.27610016]
[122.72457123 63.87442398]
[137.28071594 60.25242615]
[152.01173401 63.08027649]
[164.19201660 71.83474731]
[171.56787109 84.89602661]
[172.77455139 99.84740448]
[167.58879089 113.92249298]
[156.97010803 124.51699066]
[142.88323975 129.67065430]
[127.93463898 128.42988586]
[114.89022064 121.02427673]
[106.16412354 108.82543945]
[103.75795746 123.63119507]
[109.18135834 138.49380493]
[99.50265503 149.81510925]
[97.09648132 164.62086487]
[94.69031525 179.42662048]
[92.28414154 194.23237610]
[89.87797546 209.03813171]
[87.47180939 223.84388733]
[85.06563568 238.64964294]
[98.76575470 244.99072266]
[110.24628448 254.79377747]
[118.65529633 267.33135986]
[123.36877441 281.67312622]
[124.03696442 296.75476074]
[120.61026764 311.45715332]
[113.34297180 324.68927002]
[102.77436066 335.46920776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[21 61]
[22 60]
[23 47]
[24 46]
[25 45]
[26 44]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
