%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:13 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CD163L1)
} def

/sequence { (\
GAUUAUAUAUAAGAGGACCCAGGAGUUACAUCAGGACUCAGGAAGAGAUAGACCCAUA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 32 0.006837667 ubox
2 8 0.036627750 ubox
2 10 0.080234192 ubox
2 31 0.006807961 ubox
2 49 0.028453030 ubox
2 57 0.023736997 ubox
3 7 0.033663889 ubox
3 9 0.082028942 ubox
3 12 0.096794667 ubox
3 13 0.016110963 ubox
3 14 0.059893991 ubox
3 15 0.014766830 ubox
3 16 0.009945126 ubox
3 17 0.022588428 ubox
3 30 0.006435065 ubox
3 43 0.004688325 ubox
3 44 0.007255033 ubox
3 46 0.005816878 ubox
3 47 0.004924788 ubox
3 48 0.029254760 ubox
3 51 0.034218815 ubox
3 52 0.010486073 ubox
3 56 0.023090110 ubox
4 11 0.109552393 ubox
4 12 0.022845676 ubox
4 13 0.064221860 ubox
4 14 0.017951823 ubox
4 15 0.013993093 ubox
4 16 0.024474104 ubox
4 42 0.003871287 ubox
4 43 0.008114729 ubox
4 45 0.005974540 ubox
4 46 0.006943539 ubox
4 47 0.028159702 ubox
4 50 0.050419045 ubox
4 51 0.010646617 ubox
4 58 0.034066361 ubox
5 10 0.099870713 ubox
5 49 0.051567639 ubox
5 57 0.038882613 ubox
6 48 0.050702467 ubox
6 50 0.029189311 ubox
6 56 0.036908617 ubox
6 58 0.018650431 ubox
7 49 0.030754534 ubox
7 57 0.020897781 ubox
8 48 0.030393745 ubox
8 50 0.075748957 ubox
8 56 0.019926785 ubox
8 58 0.016209301 ubox
9 49 0.079885320 ubox
9 57 0.018186038 ubox
10 48 0.078987929 ubox
10 50 0.044477792 ubox
10 56 0.017553406 ubox
10 58 0.012582302 ubox
11 49 0.044804591 ubox
11 57 0.013765153 ubox
13 32 0.013425186 ubox
13 39 0.289717846 ubox
14 31 0.013145205 ubox
14 38 0.289942009 ubox
15 37 0.289395514 ubox
15 38 0.018652135 ubox
15 39 0.023879071 ubox
15 54 0.097335742 ubox
15 55 0.143203539 ubox
16 27 0.021846608 ubox
16 37 0.025538339 ubox
16 38 0.022098317 ubox
16 39 0.023160380 ubox
16 53 0.097595759 ubox
16 54 0.142868484 ubox
17 26 0.022958844 ubox
17 38 0.022715566 ubox
18 25 0.023016075 ubox
18 35 0.208629717 ubox
18 42 0.254213587 ubox
19 34 0.207055891 ubox
19 35 0.232179387 ubox
19 41 0.252933237 ubox
19 42 0.890771686 ubox
20 34 0.233990911 ubox
20 41 0.892967256 ubox
21 38 0.004562844 ubox
22 32 0.044366965 ubox
22 37 0.004823736 ubox
22 38 0.003816609 ubox
22 39 0.056129548 ubox
22 54 0.005655588 ubox
22 55 0.058284678 ubox
23 31 0.031931897 ubox
23 32 0.306058793 ubox
23 37 0.003989380 ubox
23 38 0.024594739 ubox
23 39 0.944622229 ubox
23 53 0.005490805 ubox
23 54 0.058222355 ubox
24 31 0.302322945 ubox
24 38 0.946167677 ubox
25 31 0.007896091 ubox
25 37 0.946633291 ubox
25 53 0.056846172 ubox
26 30 0.011535148 ubox
26 34 0.007408890 ubox
26 35 0.047226591 ubox
26 36 0.943877273 ubox
26 51 0.015876857 ubox
26 52 0.055522138 ubox
27 33 0.017070833 ubox
27 34 0.076930847 ubox
27 35 0.926615568 ubox
27 50 0.019341338 ubox
27 51 0.052450249 ubox
28 49 0.022142807 ubox
30 49 0.038406640 ubox
31 46 0.033032609 ubox
31 48 0.040428979 ubox
31 52 0.009473970 ubox
32 45 0.033089033 ubox
32 47 0.038436870 ubox
32 51 0.010710268 ubox
34 54 0.012030162 ubox
34 55 0.011064348 ubox
35 53 0.012075416 ubox
35 54 0.011027895 ubox
37 45 0.010160751 ubox
37 47 0.116461728 ubox
37 51 0.006240350 ubox
38 44 0.009875539 ubox
38 46 0.118307318 ubox
38 48 0.009454101 ubox
38 50 0.005293341 ubox
38 52 0.006715162 ubox
39 45 0.118344835 ubox
39 47 0.010352589 ubox
39 51 0.007155474 ubox
41 54 0.105083096 ubox
41 55 0.200742365 ubox
42 53 0.105304303 ubox
42 54 0.200495239 ubox
48 57 0.062741714 ubox
49 56 0.061925968 ubox
49 58 0.077108826 ubox
50 57 0.085999272 ubox
19 42 0.9500000 lbox
20 41 0.9500000 lbox
23 39 0.9500000 lbox
24 38 0.9500000 lbox
25 37 0.9500000 lbox
26 36 0.9500000 lbox
27 35 0.9500000 lbox
showpage
end
%%EOF
