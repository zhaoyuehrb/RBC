%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUCCAUUGGUGCCCUGGUUACGCCACCUGUGGCUCAGUUGCACAGCUGCCUGGUAGGUGACUGGAGGCAUUGAGCAGUGCUCACUGGUAUUUCGCUG\
) } def
/len { sequence length } bind def

/coor [
[106.82688904 223.69107056]
[105.89434052 208.72009277]
[104.96179962 193.74909973]
[89.45644379 182.21406555]
[87.12057495 162.73034668]
[99.84002686 147.39859009]
[97.51655579 132.57963562]
[95.19307709 117.76068115]
[83.66866302 110.63796997]
[79.65534210 96.88806915]
[86.20690918 83.28385162]
[100.89323425 77.25465393]
[93.73243713 64.07425690]
[86.57164001 50.89385223]
[79.41084290 37.71345139]
[72.25004578 24.53305054]
[64.88513184 11.46560669]
[57.31789017 -1.48571897]
[49.75064468 -14.43704414]
[42.18340302 -27.38837051]
[34.61616135 -40.33969498]
[28.82905006 -44.09848404]
[26.32315445 -49.44920349]
[27.00996208 -54.33991241]
[20.26253700 -67.73664093]
[13.51511097 -81.13336182]
[6.76768541 -94.53009033]
[-0.18726733 -107.82025909]
[-7.34806538 -121.00066376]
[-14.50886345 -134.18106079]
[-30.39734840 -143.32453918]
[-29.46329880 -160.77243042]
[-37.03054047 -173.72375488]
[-44.59778595 -186.67507935]
[-52.16502762 -199.62640381]
[-59.73226929 -212.57772827]
[-67.29951477 -225.52905273]
[-82.71701813 -226.08047485]
[-95.37588501 -234.89843750]
[-101.23670959 -249.16918945]
[-98.42933655 -264.33895874]
[-87.84957123 -275.56716919]
[-72.87339020 -279.27087402]
[-58.27963638 -274.26828003]
[-48.72512054 -262.15570068]
[-47.25865936 -246.79820251]
[-54.34818649 -233.09629822]
[-46.78094482 -220.14497375]
[-39.21370316 -207.19364929]
[-31.64645958 -194.24232483]
[-24.07921600 -181.29100037]
[-16.51197243 -168.33967590]
[-4.79749584 -164.90615845]
[1.57904649 -154.02662659]
[-1.32846248 -141.34185791]
[5.83233547 -128.16145325]
[12.99313354 -114.98105621]
[19.05905914 -110.52796936]
[20.16441154 -101.27751160]
[26.91183662 -87.88079071]
[33.65926361 -74.48406219]
[40.40668869 -61.08734131]
[47.56748581 -47.90694046]
[55.13472748 -34.95561218]
[62.70197296 -22.00428772]
[70.26921844 -9.05296230]
[77.83645630 3.89836359]
[84.03794098 8.16065311]
[85.43044281 17.37225151]
[92.59123993 30.55265236]
[99.75203705 43.73305511]
[106.91284180 56.91345596]
[114.07363892 70.09385681]
[125.84255219 79.39399719]
[140.32131958 83.31382751]
[154.80009460 87.23365784]
[169.27888489 91.15348816]
[183.75765991 95.07331848]
[200.62644958 93.37619019]
[206.92698669 109.11592865]
[193.54653931 119.52744293]
[179.83782959 109.55209351]
[165.35905457 105.63226318]
[150.88027954 101.71243286]
[136.40150452 97.79260254]
[121.92272186 93.87277222]
[119.25144958 107.27810669]
[110.01203918 115.43721008]
[112.33551025 130.25616455]
[114.65898132 145.07511902]
[124.85638428 149.13906860]
[132.31930542 157.07754517]
[135.69534302 167.35093689]
[134.41557312 178.00650024]
[128.78927612 187.04948425]
[119.93277740 192.81655884]
[120.86532593 207.78753662]
[121.79786682 222.75852966]
[128.81723022 238.19111633]
[115.93089294 249.20832825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 98]
[2 97]
[3 96]
[6 90]
[7 89]
[8 88]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 57]
[29 56]
[30 55]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[74 86]
[75 85]
[76 84]
[77 83]
[78 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
