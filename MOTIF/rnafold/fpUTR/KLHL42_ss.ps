%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:22:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGGCGCGCGCGUAGGGGCUGGGAGGCCGGCGCGCAGAUCUGGCGGUGAGCGCUGCCGCCCCGGGGCCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[37.17523575 187.36946106]
[33.23867798 189.42846680]
[29.44522858 189.46089172]
[18.21756744 199.40773010]
[13.01876831 214.35038757]
[-1.63851035 216.99867249]
[-12.86617184 226.94551086]
[-24.09383202 236.89234924]
[-28.77085114 252.61041260]
[-44.78227234 256.15533447]
[-55.65691757 243.88040161]
[-50.20788574 228.41300964]
[-34.04067230 225.66468811]
[-22.81301117 215.71784973]
[-11.58535004 205.77101135]
[-7.18962955 191.53981018]
[8.27072716 188.18006897]
[19.49838829 178.23323059]
[30.10499001 167.62661743]
[40.05183029 156.39895630]
[49.99866867 145.17129517]
[59.94551086 133.94363403]
[69.89234924 122.71598053]
[79.83918762 111.48831177]
[89.78602600 100.26065063]
[92.44998169 92.39558411]
[100.36656952 88.79154205]
[110.75743103 77.97351074]
[121.14830017 67.15547180]
[131.53916931 56.33743286]
[141.02584839 44.71836090]
[149.54681396 32.37360001]
[158.06779480 20.02884293]
[166.58876038 7.68408585]
[168.98893738 -1.42455125]
[175.70970154 -4.97674465]
[184.72084045 -16.96838570]
[193.73197937 -28.96002769]
[202.74310303 -40.95166779]
[200.72167969 -56.39678192]
[210.03106689 -68.42964935]
[224.76808167 -70.26158905]
[233.77922058 -82.25323486]
[230.06507874 -97.44332886]
[237.03019714 -111.44408417]
[251.38587952 -117.64475250]
[266.35382080 -113.11758423]
[274.86657715 -100.00016022]
[272.90472412 -84.48612976]
[261.39456177 -73.90074158]
[245.77085876 -73.24209595]
[236.75971985 -61.25045776]
[239.10020447 -46.58560944]
[230.13246155 -34.29601288]
[214.73475647 -31.94053459]
[205.72361755 -19.94889259]
[196.71247864 -7.95725203]
[187.70133972 4.03438950]
[178.93351746 16.20505714]
[170.41255188 28.54981422]
[161.89157104 40.89457321]
[153.37060547 53.23933029]
[153.95880127 56.25603485]
[153.21325684 59.71265793]
[150.94941711 63.02917099]
[147.22587585 65.56729126]
[142.35720825 66.72830200]
[131.96633911 77.54633331]
[121.57546997 88.36437225]
[111.18460846 99.18241119]
[101.01368713 110.20749664]
[91.06684875 121.43515778]
[81.12001038 132.66281128]
[71.17317200 143.89047241]
[61.22632980 155.11813354]
[51.27949142 166.34579468]
[41.33264923 177.57345581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 18]
[4 17]
[6 15]
[7 14]
[8 13]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[27 70]
[28 69]
[29 68]
[30 67]
[31 62]
[32 61]
[33 60]
[34 59]
[36 58]
[37 57]
[38 56]
[39 55]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
