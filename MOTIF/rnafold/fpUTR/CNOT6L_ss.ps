%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGCGCGCGCGUGUUUGUGUGUGUGUUUCCCCUGCCGCGGGGAAAUGGCUGCUGUUGCUUCUGGGCCAGAGGAAGAGAAUGAGGUAGAGUGUUCUUUUGCCUCCGAGUAGGACCGAGAGUGUUGGGAAGAGGAGCGCGUCCCCGGGGAA\
) } def
/len { sequence length } bind def

/coor [
[-94.61038208 378.92016602]
[-107.00711060 388.71163940]
[-121.97840881 393.66806030]
[-137.71537781 393.20989990]
[-152.32319641 387.41064453]
[-162.14610291 398.74688721]
[-171.96900940 410.08312988]
[-181.79193115 421.41937256]
[-191.61483765 432.75561523]
[-201.43774414 444.09185791]
[-211.26065063 455.42810059]
[-221.08357239 466.76434326]
[-230.90647888 478.10058594]
[-240.72938538 489.43682861]
[-250.55230713 500.77307129]
[-253.12286377 516.96948242]
[-268.52944946 522.58807373]
[-280.92312622 511.84893799]
[-277.55429077 495.79956055]
[-261.88854980 490.95016479]
[-252.06562805 479.61392212]
[-242.24272156 468.27767944]
[-232.41981506 456.94143677]
[-222.59689331 445.60519409]
[-212.77398682 434.26895142]
[-202.95108032 422.93270874]
[-193.12817383 411.59646606]
[-183.30525208 400.26022339]
[-173.48234558 388.92398071]
[-163.65943909 377.58770752]
[-170.92623901 365.40322876]
[-174.07101440 351.54724121]
[-172.77210999 337.37673950]
[-167.14376831 324.28387451]
[-157.72621155 313.55892944]
[-145.43379211 306.26339722]
[-131.46624756 303.12475586]
[-117.19161224 304.46401978]
[-104.01219940 310.16302490]
[-93.96009064 299.02951050]
[-91.17391205 284.39782715]
[-76.18296814 279.33993530]
[-66.13085938 268.20642090]
[-56.07875061 257.07290649]
[-46.02663803 245.93940735]
[-35.97452927 234.80589294]
[-25.92241859 223.67237854]
[-29.88390541 210.88812256]
[-26.97285652 197.71348572]
[-17.84810066 187.62774658]
[-4.82370853 183.34870911]
[8.71718025 186.10087585]
[18.99430466 175.17472839]
[29.27143097 164.24858093]
[32.35549164 149.67675781]
[47.44649124 144.92573547]
[57.72361755 133.99958801]
[60.80767441 119.42776489]
[75.89867401 114.67673492]
[86.17579651 103.75058746]
[89.56629944 90.18606567]
[102.89805603 85.97229004]
[113.17517853 75.04614258]
[122.88195038 63.61029434]
[131.99313354 51.69448853]
[141.10430908 39.77868271]
[143.34028625 24.11627769]
[157.21739197 18.70562363]
[166.32856750 6.78981829]
[175.31773376 -5.21830034]
[184.18394470 -17.31748199]
[184.57736206 -40.49478912]
[205.25143433 -49.24176025]
[212.83959961 -62.18083954]
[220.42776489 -75.11991882]
[228.01591492 -88.05900574]
[235.47171021 -101.07480621]
[242.79435730 -114.16598511]
[250.11700439 -127.25716400]
[257.43963623 -140.34834290]
[264.76229858 -153.43951416]
[272.08493042 -166.53068542]
[279.40756226 -179.62187195]
[286.73022461 -192.71304321]
[294.05285645 -205.80421448]
[287.42727661 -219.83566284]
[290.34759521 -235.07545471]
[301.69094849 -245.66358948]
[317.09552002 -247.52870178]
[330.63796997 -239.95364380]
[337.11093140 -225.85115051]
[334.02545166 -210.64393616]
[322.56793213 -200.17947388]
[307.14404297 -198.48158264]
[299.82138062 -185.39039612]
[292.49874878 -172.29922485]
[285.17611694 -159.20805359]
[277.85345459 -146.11686707]
[270.53082275 -133.02569580]
[263.20816040 -119.93451691]
[255.88552856 -106.84333801]
[248.56288147 -93.75216675]
[248.03918457 -86.33451080]
[240.95500183 -80.47084045]
[233.36683655 -67.53176117]
[225.77868652 -54.59267807]
[218.19052124 -41.65359879]
[221.72007751 -35.31107330]
[222.80819702 -28.06539726]
[221.26884460 -20.83201027]
[217.25100708 -14.54188919]
[211.22575378 -10.02175426]
[203.93141174 -7.88552141]
[196.28312683 -8.45126534]
[187.41691589 3.64791656]
[185.99148560 10.94613075]
[178.24436951 15.90099621]
[169.13319397 27.81680298]
[167.54891968 42.62691116]
[153.02011108 48.88986206]
[143.90893555 60.80566788]
[134.79776001 72.72147369]
[149.76564026 73.70262146]
[158.50183105 85.89601898]
[154.61732483 100.38431549]
[140.95297241 106.57183075]
[127.50186157 99.93347931]
[124.10132599 85.32326508]
[113.82420349 96.24941254]
[110.43370056 109.81393433]
[97.10194397 114.02770996]
[86.82482147 124.95385742]
[83.00567627 140.30718994]
[68.64976501 144.27670288]
[58.37263870 155.20285034]
[54.55348969 170.55618286]
[40.19757843 174.52571106]
[29.92045212 185.45185852]
[19.64332771 196.37800598]
[23.03132057 212.92022705]
[15.98207760 228.08134460]
[1.44141197 235.99357605]
[-14.78890705 233.72448730]
[-24.84101677 244.85800171]
[-34.89312744 255.99151611]
[-44.94523621 267.12503052]
[-54.99734879 278.25854492]
[-65.04945374 289.39205933]
[-68.55462646 304.82009888]
[-82.82657623 309.08163452]
[-92.87868500 320.21511841]
[-85.35214233 334.22579956]
[-83.07125854 349.93865967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[39 151]
[40 150]
[42 148]
[43 147]
[44 146]
[45 145]
[46 144]
[47 143]
[52 139]
[53 138]
[54 137]
[56 135]
[57 134]
[59 132]
[60 131]
[62 129]
[63 128]
[64 122]
[65 121]
[66 120]
[68 118]
[69 117]
[70 115]
[71 114]
[73 107]
[74 106]
[75 105]
[76 104]
[77 102]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
