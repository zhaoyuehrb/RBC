%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGUGACCCGGAAGUAGAAGUGGCCCUUGCAGGCAAGAGUGCUGGAGGGCGGCAGCGGCGACCGGAGCGGUAGGAGCAGCAAUUUAUCCGUGUGCAGCCCCAAACUGGAAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[70.22372437 202.51551819]
[56.62974930 196.17485046]
[45.43793106 186.18769836]
[37.59670258 173.40040588]
[33.77055359 158.89659119]
[34.28372574 143.90536499]
[39.09273148 129.69714355]
[47.79003906 117.47599030]
[59.63861084 108.27754211]
[73.63435364 102.88132477]
[88.59512329 101.74490356]
[75.53924561 94.35950470]
[62.48336792 86.97411346]
[49.42749023 79.58871460]
[34.37327194 83.58974457]
[21.23796272 75.91391754]
[17.51636887 61.53736115]
[4.46049166 54.15196609]
[-8.76966763 61.82725906]
[-23.96494102 61.84966660]
[-37.04430008 54.31330490]
[-44.54510498 41.32893372]
[-44.53961563 26.43378258]
[-57.59548950 19.04838562]
[-73.41658020 18.98822021]
[-80.68476105 5.98734093]
[-93.74063873 -1.39805484]
[-106.79651642 -8.78345108]
[-119.85239410 -16.16884613]
[-132.90826416 -23.55424309]
[-145.96414185 -30.93963814]
[-156.41378784 -27.39265633]
[-166.85841370 -30.19512367]
[-173.83723450 -38.16415024]
[-175.17988586 -48.44861221]
[-187.82778931 -56.51274490]
[-200.47570801 -64.57687378]
[-213.12362671 -72.64100647]
[-229.52178955 -72.82138062]
[-237.32775879 -87.24354553]
[-228.51142883 -101.07121277]
[-212.14228821 -100.07966614]
[-205.05949402 -85.28892517]
[-192.41157532 -77.22479248]
[-179.76365662 -69.16065979]
[-167.11575317 -61.09652710]
[-147.86642456 -61.79258347]
[-138.57875061 -43.99551773]
[-125.52287292 -36.61011887]
[-112.46699524 -29.22472382]
[-99.41111755 -21.83932877]
[-86.35523987 -14.45393181]
[-73.29936218 -7.06853580]
[-58.41211700 -7.53662252]
[-50.21009445 5.99250937]
[-37.15421677 13.37790585]
[-24.39053535 5.69975615]
[-9.39759445 5.43955612]
[3.79976988 12.76730824]
[11.60861874 25.80259514]
[11.84588718 41.09608841]
[24.90176392 48.48148346]
[39.14102173 44.26494980]
[52.48674393 51.56880569]
[56.81288528 66.53283691]
[69.86876678 73.91823578]
[82.92464447 81.30363464]
[95.98051453 88.68902588]
[101.40192413 87.72956085]
[106.84038544 89.30360413]
[111.14231873 93.22009277]
[126.10965729 94.20937347]
[141.07699585 95.19865417]
[156.04434204 96.18793488]
[172.29402161 87.65093994]
[186.52798462 97.82315826]
[201.51622009 98.41699982]
[215.61189270 91.23210907]
[228.02287292 99.46721649]
[243.01110840 100.06105804]
[257.10678101 92.87616730]
[269.51776123 101.11126709]
[284.50601196 101.70510864]
[299.49423218 102.29895020]
[307.08270264 89.00708008]
[319.98522949 80.77400970]
[335.23690796 79.49165344]
[349.33303833 85.45468140]
[359.03442383 97.29283142]
[362.11175537 112.28578186]
[357.85787964 126.98826599]
[347.25030518 138.02175903]
[332.72659302 142.85086060]
[317.62414551 140.36584473]
[305.41345215 131.13777161]
[298.90039062 117.28719330]
[283.91217041 116.69335175]
[268.92391968 116.09951019]
[255.90031433 123.32687378]
[242.41726685 115.04929352]
[227.42903137 114.45545197]
[214.40542603 121.68282318]
[200.92237854 113.40524292]
[185.93414307 112.81140137]
[176.76507568 120.82166290]
[164.19540405 120.37162781]
[155.05506897 111.15527344]
[140.08772278 110.16599274]
[125.12037659 109.17671967]
[110.15303802 108.18743896]
[122.03434753 117.34355164]
[130.77520752 129.53361511]
[135.63485718 143.72457886]
[136.20150757 158.71388245]
[132.42712402 173.23124695]
[124.63156891 186.04644775]
[113.47544861 196.07345581]
[99.90418243 202.46257019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 68]
[12 67]
[13 66]
[14 65]
[17 62]
[18 61]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[35 46]
[36 45]
[37 44]
[38 43]
[71 110]
[72 109]
[73 108]
[74 107]
[76 104]
[77 103]
[79 101]
[80 100]
[82 98]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
