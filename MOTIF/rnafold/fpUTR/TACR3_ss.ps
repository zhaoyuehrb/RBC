%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:08:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCAGUAUCUUUCAGCUUCCAGUCUUAUCUGAAGACUCCGGCACCAAAGUGACCAGGAGGCAGAGAAGAACUUCAGAGGAGUCUCGUCUUGGGCUGCCCGUGGGUGAGUGGGAGGGUCCGGGACUGCAGACCGGUGGCG\
) } def
/len { sequence length } bind def

/coor [
[367.61804199 183.86149597]
[363.97631836 173.60305786]
[362.92565918 162.75526428]
[348.22204590 159.78823853]
[334.21578979 164.85517883]
[322.21871948 154.54104614]
[307.51510620 151.57402039]
[292.81146240 148.60699463]
[285.57543945 150.38127136]
[277.81701660 145.40826416]
[263.18261719 142.11668396]
[248.54821777 138.82510376]
[233.87831116 135.69561768]
[219.17466736 132.72859192]
[204.47103882 129.76155090]
[190.46478271 134.82850647]
[178.46772766 124.51438141]
[163.76409912 121.54734802]
[149.06047058 118.58032227]
[134.35684204 115.61328888]
[119.65320587 112.64626312]
[104.94957733 109.67923737]
[89.94957733 109.67923737]
[75.24594879 112.64626312]
[60.54231644 115.61328888]
[45.83868790 118.58032227]
[31.13505745 121.54734802]
[16.43142700 124.51438141]
[6.39328003 137.02897644]
[-9.64865398 136.83947754]
[-19.38837433 124.09124756]
[-15.35440350 108.56363678]
[-0.64125603 102.16809845]
[13.46439934 109.81074524]
[28.16802979 106.84371948]
[42.87165833 103.87669373]
[57.57529068 100.90966034]
[72.27892303 97.94263458]
[86.98255157 94.97560120]
[88.46606445 87.62378693]
[91.43309021 72.92015839]
[92.91661072 65.56834412]
[80.51412964 57.13160324]
[68.01908875 48.83257294]
[55.43300629 40.67226791]
[42.84692764 32.51196289]
[26.45062447 32.20660019]
[18.75481033 17.72535324]
[27.67628098 3.96528840]
[44.03739166 5.08157969]
[51.00723267 19.92588234]
[63.59331512 28.08618927]
[76.17939758 36.24649429]
[83.56132507 37.25404739]
[88.95086670 44.72912979]
[101.35334778 53.16586685]
[113.89857483 75.56056976]
[107.91661072 94.97560120]
[122.62023926 97.94263458]
[137.32386780 100.90966034]
[152.02749634 103.87669373]
[166.73112488 106.84371948]
[181.43475342 109.81074524]
[196.49272156 104.95602417]
[207.43807983 115.05792999]
[222.14170837 118.02495575]
[236.84533691 120.99198914]
[245.95774841 119.61800385]
[251.83979797 124.19071198]
[266.47418213 127.48229218]
[281.10858154 130.77386475]
[295.77850342 133.90336609]
[310.48211670 136.87039185]
[325.18576050 139.83741760]
[340.24371338 134.98269653]
[351.18905640 145.08460999]
[365.89270020 148.05163574]
[376.94039917 131.74136353]
[393.89172363 121.79676819]
[413.42630005 120.11926270]
[431.73767090 126.99546814]
[445.27505493 141.04917908]
[451.43188477 159.51657104]
[466.39886475 160.51141357]
[481.36581421 161.50625610]
[496.33279419 162.50111389]
[513.91644287 152.75041199]
[529.57910156 164.01019287]
[544.57543945 164.34202576]
[559.57177734 164.67385864]
[574.56805420 165.00569153]
[589.56439209 165.33752441]
[604.56072998 165.66934204]
[619.55706787 166.00117493]
[634.55340576 166.33300781]
[649.54974365 166.66484070]
[664.54608154 166.99667358]
[680.43450928 157.76141357]
[695.08886719 167.35481262]
[710.08886719 167.35481262]
[725.08886719 167.35481262]
[740.08886719 167.35481262]
[749.10028076 154.72254944]
[763.82641602 149.83155823]
[778.60467529 154.56251526]
[787.75262451 167.09626770]
[787.75262451 182.61334229]
[778.60467529 195.14710999]
[763.82641602 199.87806702]
[749.10028076 194.98707581]
[740.08886719 182.35481262]
[725.08886719 182.35481262]
[710.08886719 182.35481262]
[695.08886719 182.35481262]
[686.27099609 190.70771790]
[673.72332764 190.78356934]
[664.21423340 181.99299622]
[649.21789551 181.66117859]
[634.22155762 181.32934570]
[619.22521973 180.99751282]
[604.22888184 180.66567993]
[589.23260498 180.33384705]
[574.23626709 180.00201416]
[559.23992920 179.67018127]
[544.24359131 179.33834839]
[529.24725342 179.00651550]
[522.45544434 186.76962280]
[512.28802490 189.52934265]
[502.08465576 186.12631226]
[495.33795166 177.46807861]
[480.37097168 176.47323608]
[465.40399170 175.47839355]
[450.43704224 174.48355103]
[446.70001221 184.57038879]
[440.62454224 193.46284485]
[432.56704712 200.62815857]
[423.00292969 205.63520813]
[412.49850464 208.18046570]
[401.67749023 208.10641479]
[391.18395996 205.41120911]
[381.64395142 200.24920654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 77]
[4 76]
[6 74]
[7 73]
[8 72]
[10 71]
[11 70]
[12 69]
[13 67]
[14 66]
[15 65]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[42 56]
[43 55]
[44 53]
[45 52]
[46 51]
[83 133]
[84 132]
[85 131]
[86 130]
[88 126]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
