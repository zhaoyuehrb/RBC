%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:26:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAACUUCCGGCCUCAGGACGCAGGCGCGGGCCGCUCAUUUCGCUCUUUCCGGCGGUGCUCGCAAGCGAGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[67.27196503 162.41970825]
[66.67561340 147.43156433]
[66.07926941 132.44342041]
[65.48291779 117.45527649]
[60.91180420 131.74180603]
[47.28097153 138.00282288]
[33.46483612 132.16207886]
[28.45845795 118.02219391]
[35.52126312 104.78902435]
[50.05453873 101.07800293]
[35.12860870 99.58919525]
[20.20267487 98.10039520]
[5.25009298 96.90863800]
[-9.72322845 96.01441193]
[-24.69655037 95.12018585]
[-39.66987228 94.22595978]
[-49.41833496 106.29853058]
[-64.40981293 110.30293274]
[-78.87977600 104.69937897]
[-87.26422882 91.64255524]
[-86.33917999 76.15308380]
[-76.46031952 64.18696594]
[-61.42628479 60.34543610]
[-47.01796341 66.10562897]
[-38.77564621 79.25263977]
[-23.80232430 80.14686584]
[-8.82900143 81.04109192]
[6.14431953 81.93531799]
[13.19846630 79.11385345]
[21.69148254 83.17446136]
[36.61741638 84.66326904]
[51.54334641 86.15207672]
[64.86758423 79.26261139]
[72.28132629 66.22280884]
[79.69506073 53.18300629]
[87.10880280 40.14319992]
[94.52253723 27.10339737]
[101.93627167 14.06359386]
[92.32009888 2.32078338]
[87.59899139 -12.10404205]
[88.41144562 -27.26004219]
[94.64757538 -41.09749603]
[105.46400452 -51.74499512]
[119.39789581 -57.76255798]
[134.56480408 -58.33635712]
[148.91354370 -53.38879395]
[160.50354004 -43.58898163]
[167.76734924 -30.26226234]
[169.72262573 -15.21097088]
[166.10490417 -0.47066867]
[157.40345764 11.96514034]
[144.79508972 20.41461372]
[129.98498535 23.73503113]
[114.97608185 21.47733116]
[107.56233978 34.51713562]
[100.14860535 47.55693817]
[92.73486328 60.59674454]
[85.32112885 73.63655090]
[77.90738678 86.67635345]
[108.57146454 78.28820801]
[120.42982483 104.33996582]
[133.00445557 112.51788330]
[145.57910156 120.69580841]
[158.15374756 128.87373352]
[174.54960632 129.20204163]
[182.22512817 143.69406128]
[173.28440857 157.44161987]
[156.92486572 156.30241394]
[149.97583008 141.44836426]
[137.40118408 133.27044678]
[124.82653809 125.09252930]
[112.25189972 116.91460419]
[97.30101776 123.18593597]
[80.47106171 116.85893250]
[81.06740570 131.84707642]
[81.66375732 146.83522034]
[82.26010132 161.82334900]
[85.21482849 180.97850037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 77]
[2 76]
[3 75]
[4 74]
[10 32]
[11 31]
[12 30]
[13 28]
[14 27]
[15 26]
[16 25]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[61 72]
[62 71]
[63 70]
[64 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
