%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCUCUACCACUUCAGGAACCCUCCUCCGCCUGCCAGAGACAUGAAGAUUCUGCUCAUCAUUGCUCAGCUCCUCAGAGUGGGCCGGGAGGGGACUAGAAGAGCUGCAUGAUGGUGGCUGAGACAGG\
) } def
/len { sequence length } bind def

/coor [
[67.34009552 206.33029175]
[62.25067139 191.67160034]
[66.78162384 176.83076477]
[79.19069672 167.51441956]
[78.82543182 152.51885986]
[78.46016693 137.52331543]
[78.09490204 122.52775574]
[77.34130096 115.22335815]
[78.51194000 108.67646027]
[81.24452972 103.33424377]
[85.08215332 99.52413177]
[89.50753021 97.43550873]
[93.98038483 97.11045074]
[88.96467590 82.97388458]
[83.94896698 68.83731079]
[78.93325043 54.70074081]
[67.02681732 44.28213501]
[70.06298828 29.70026588]
[65.04727936 15.56369495]
[51.05713272 8.71434212]
[46.17187119 -5.69360161]
[52.78789902 -18.98885536]
[47.77218628 -33.12542725]
[42.75647736 -47.26199722]
[37.74076462 -61.39857101]
[32.72505569 -75.53514099]
[27.70934486 -89.67171478]
[22.69363403 -103.80828094]
[11.35314560 -110.09336853]
[7.50005150 -122.05138397]
[12.69515991 -133.04714966]
[8.02517605 -147.30166626]
[3.35519266 -161.55618286]
[-1.31479061 -175.81069946]
[-13.73276329 -169.34826660]
[-27.08944511 -171.13301086]
[-36.60415268 -179.92071533]
[-39.21963501 -192.07102966]
[-34.56934357 -203.03065491]
[-42.22696304 -215.92875671]
[-49.88458252 -228.82684326]
[-64.93606567 -232.83816528]
[-72.51824188 -246.02775574]
[-68.60131073 -260.35232544]
[-76.25892639 -273.25039673]
[-83.91654968 -286.14849854]
[-91.57417297 -299.04660034]
[-105.27236176 -306.96304321]
[-105.11664581 -321.85684204]
[-112.77426147 -334.75491333]
[-128.14869690 -338.41583252]
[-136.36013794 -351.91946411]
[-132.53689575 -367.25433350]
[-118.94720459 -375.32254028]
[-103.65361786 -371.33737183]
[-95.72953033 -357.66314697]
[-99.87616730 -342.41253662]
[-92.21854401 -329.51446533]
[-79.06807709 -322.52056885]
[-78.67607117 -306.70422363]
[-71.01845551 -293.80612183]
[-63.36083221 -280.90802002]
[-55.70321274 -268.00994873]
[-41.25176239 -264.59069824]
[-33.30210495 -251.61929321]
[-36.98648834 -236.48446655]
[-29.32886887 -223.58636475]
[-21.67124939 -210.68827820]
[-9.41619110 -210.78520203]
[1.68219960 -203.04832458]
[9.33981991 -215.94642639]
[16.99744034 -228.84451294]
[24.65505981 -241.74261475]
[24.31358910 -258.13821411]
[38.48008347 -266.39910889]
[52.58126831 -258.02722168]
[52.11105347 -241.63479614]
[37.55315399 -234.08499146]
[29.89553452 -221.18688965]
[22.23791504 -208.28880310]
[14.58029461 -195.39070129]
[12.93972683 -180.48068237]
[17.60971069 -166.22616577]
[22.27969360 -151.97164917]
[26.94967651 -137.71713257]
[40.62763596 -126.79328918]
[36.83020401 -108.82399750]
[41.84591675 -94.68742371]
[46.86162567 -80.55084991]
[51.87733841 -66.41428375]
[56.89304733 -52.27770996]
[61.90876007 -38.14113617]
[66.92446899 -24.00456619]
[80.44056702 -17.85226822]
[85.72859192 -3.58722520]
[79.18384552 10.54798412]
[84.19956207 24.68455505]
[95.74723816 34.09201813]
[93.06982422 49.68502808]
[98.08553314 63.82160187]
[103.10124969 77.95816803]
[108.11695862 92.09474182]
[116.54518890 104.50300598]
[127.83782196 114.37601471]
[139.13046265 124.24902344]
[150.42309570 134.12203979]
[161.71574402 143.99504089]
[173.00837708 153.86805725]
[188.75848389 152.56047058]
[200.76593018 162.83648682]
[201.90693665 178.59953308]
[191.50453186 190.49766541]
[175.73031616 191.47195435]
[163.94281006 180.94433594]
[163.13536072 165.16069031]
[151.84272766 155.28768921]
[140.55009460 145.41467285]
[129.25744629 135.54165649]
[117.96481323 125.66865540]
[106.67217255 115.79563904]
[93.09045410 122.16249084]
[93.45571899 137.15805054]
[93.82098389 152.15359497]
[94.18624878 167.14915466]
[107.03420258 175.85028076]
[112.28234100 190.45291138]
[107.91265106 205.34201050]
[95.60536957 214.79243469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[7 121]
[13 102]
[14 101]
[15 100]
[16 99]
[18 97]
[19 96]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[31 85]
[32 84]
[33 83]
[34 82]
[39 68]
[40 67]
[41 66]
[44 63]
[45 62]
[46 61]
[47 60]
[49 58]
[50 57]
[70 81]
[71 80]
[72 79]
[73 78]
[103 120]
[104 119]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
