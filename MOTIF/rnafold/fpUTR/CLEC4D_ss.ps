%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUGAAAAAGACUUCUUUUGAGCUAACUUUCUUAUACUGGUACCUUUCUAAUCUCACUACAAUAUGUAACAUUGGUGUUCGAUCUCAAGUAUUUCUGAAUAUAUUCCCCUAUCCACAGAAAUAUACUCUGGGGGAAAAAAAAUAGAACAAAUUCUUGCCGUCCUGACCAUUGAACAAGAGACUAAUUAGACA\
) } def
/len { sequence length } bind def

/coor [
[26.98758507 302.12161255]
[17.53607941 321.63482666]
[3.28382015 337.96182251]
[-14.75861263 349.95233154]
[-35.31381989 356.76315308]
[-56.92803192 357.91772461]
[-78.07391357 353.33926392]
[-84.42541504 366.92819214]
[-90.77691650 380.51708984]
[-97.12841797 394.10598755]
[-103.47991943 407.69491577]
[-101.52703857 423.97735596]
[-114.81206512 433.59194946]
[-129.66850281 426.64797974]
[-130.81330872 410.28884888]
[-117.06882477 401.34341431]
[-110.71732330 387.75448608]
[-104.36582184 374.16558838]
[-98.01432037 360.57669067]
[-91.66281891 346.98776245]
[-99.52510834 341.76629639]
[-106.73112488 335.66876221]
[-113.18373871 328.77694702]
[-118.79593658 321.18328857]
[-123.49197388 312.98971558]
[-127.20840454 304.30627441]
[-129.89495850 295.24957275]
[-131.51518250 285.94134521]
[-132.04696655 276.50668335]
[-131.48281860 267.07250977]
[-129.83000183 257.76565552]
[-127.11041260 248.71134949]
[-123.36031342 240.03149414]
[-118.62983704 231.84291077]
[-112.98230743 224.25590515]
[-106.49340820 217.37269592]
[-99.25016785 211.28607178]
[-91.34978485 206.07817078]
[-82.89831543 201.81927490]
[-74.00927734 198.56697083]
[-64.80209351 196.36531067]
[-55.40051651 195.24421692]
[-45.93093491 195.21908569]
[-36.52069855 196.29060364]
[-27.29640198 198.44468689]
[-18.38216591 201.65267944]
[-9.89798737 205.87174988]
[-1.95811117 211.04545593]
[8.03061676 199.85504150]
[18.01934624 188.66462708]
[28.00807381 177.47422791]
[37.99680328 166.28381348]
[47.61792755 154.77581787]
[56.86135101 142.96231079]
[66.10478210 131.14878845]
[75.34820557 119.33528137]
[70.64165497 110.93853760]
[68.70645142 101.50923157]
[69.72526550 91.93745422]
[56.57598877 84.71966553]
[43.42671204 77.50187683]
[30.27743340 70.28408813]
[13.48314285 67.96285248]
[11.06453991 51.18230820]
[26.51976013 44.21290970]
[37.49522400 57.13481140]
[50.64450073 64.35260010]
[63.79378128 71.57038879]
[76.94305420 78.78817749]
[95.95254517 68.93261719]
[116.85261536 73.58876801]
[127.71370697 63.24290848]
[132.36943054 48.12223434]
[146.92149353 44.94630051]
[157.78259277 34.60044479]
[168.64367676 24.25458717]
[179.50476074 13.90873051]
[176.66804504 0.41183415]
[180.84123230 -12.61975384]
[190.83125305 -21.81136131]
[203.95352173 -24.83845139]
[216.75292969 -21.01383400]
[227.78012085 -31.18246078]
[238.80732727 -41.35108566]
[239.60629272 -56.90741730]
[250.93429565 -67.06275940]
[265.75994873 -66.20520020]
[276.78713989 -76.37382507]
[287.81433105 -86.54244995]
[298.84155273 -96.71107483]
[303.74151611 -111.75437927]
[318.34310913 -114.69425201]
[329.37030029 -124.86287689]
[340.39749146 -135.03150940]
[351.17443848 -145.46496582]
[361.69482422 -156.15710449]
[372.21520996 -166.84922791]
[382.73556519 -177.54136658]
[376.87594604 -191.53924561]
[376.82211304 -206.67330933]
[382.55111694 -220.63728333]
[393.16113281 -231.31506348]
[407.01327515 -237.10150146]
[421.98471069 -237.14353943]
[435.79391479 -231.46594238]
[446.31427002 -242.15808105]
[456.83465576 -252.85021973]
[467.35504150 -263.54235840]
[477.87539673 -274.23446655]
[488.39578247 -284.92660522]
[473.43301392 -285.98303223]
[463.48703003 -297.21142578]
[464.24407959 -312.19232178]
[475.27136230 -322.36083984]
[490.26437378 -321.90347290]
[500.65136719 -311.08169556]
[500.49398804 -296.08285522]
[512.00195312 -305.70397949]
[523.51000977 -315.32510376]
[535.01800537 -324.94622803]
[534.86517334 -340.58306885]
[544.83917236 -352.62689209]
[560.23052979 -355.39096069]
[573.77191162 -347.57019043]
[579.06951904 -332.85729980]
[573.62194824 -318.19924927]
[560.00140381 -310.51715088]
[544.63909912 -313.43823242]
[533.13110352 -303.81710815]
[521.62310791 -294.19598389]
[510.11511230 -284.57485962]
[499.08792114 -274.40625000]
[488.56753540 -263.71411133]
[478.04718018 -253.02197266]
[467.52679443 -242.32983398]
[457.00640869 -231.63771057]
[446.48605347 -220.94557190]
[452.38650513 -207.23011780]
[452.58688354 -192.25996399]
[447.02554321 -178.31593323]
[436.52096558 -167.53440857]
[422.65158081 -161.58003235]
[407.51864624 -161.38880920]
[393.42770386 -167.02099609]
[382.90731812 -156.32885742]
[372.38696289 -145.63671875]
[361.86657715 -134.94459534]
[361.53417969 -131.42083740]
[359.46972656 -127.88495636]
[355.68713379 -125.15321350]
[350.56610107 -124.00431061]
[339.53890991 -113.83568573]
[328.51171875 -103.66706085]
[324.40048218 -89.35108948]
[309.01016235 -85.68388367]
[297.98297119 -75.51525879]
[286.95578003 -65.34663391]
[275.92858887 -55.17800522]
[275.58422852 -40.33155823]
[264.54592896 -29.86203766]
[248.97595215 -30.32389069]
[237.94876099 -20.15526390]
[226.92155457 -9.98663902]
[229.35453796 6.24123907]
[221.56195068 20.87059212]
[206.43727112 28.04840469]
[189.85061646 24.76981926]
[178.98953247 35.11567688]
[168.12844849 45.46153259]
[157.26736450 55.80738831]
[153.38848877 70.18805695]
[138.05955505 74.10399628]
[127.19847107 84.44985199]
[131.17138672 96.85219574]
[129.75827026 109.79843903]
[123.20329285 121.05163574]
[112.63906860 128.66735840]
[99.89097595 131.32972717]
[87.16172028 128.57870483]
[77.91828918 140.39221191]
[68.67486572 152.20573425]
[59.43143845 164.01924133]
[58.97669983 168.36997986]
[57.32059479 171.98094177]
[54.84578705 174.56399536]
[51.98935318 175.98588562]
[49.18721390 176.27253723]
[39.19848633 187.46295166]
[29.20975685 198.65336609]
[19.22102928 209.84378052]
[9.23229980 221.03417969]
[21.76833916 238.76931763]
[29.18616295 259.17187500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 20]
[8 19]
[9 18]
[10 17]
[11 16]
[48 191]
[49 190]
[50 189]
[51 188]
[52 187]
[53 182]
[54 181]
[55 180]
[56 179]
[59 69]
[60 68]
[61 67]
[62 66]
[71 173]
[72 172]
[74 170]
[75 169]
[76 168]
[77 167]
[82 163]
[83 162]
[84 161]
[87 158]
[88 157]
[89 156]
[90 155]
[92 153]
[93 152]
[94 151]
[95 147]
[96 146]
[97 145]
[98 144]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[110 132]
[117 131]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
