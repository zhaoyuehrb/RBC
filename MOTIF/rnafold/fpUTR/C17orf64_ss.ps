%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGACGGCUAGGUCACAGAAGCAGUGGGUCAGAAGCCAGAGGGGACGUGGGGAGUGCCACCCUGGAGCCUACCGGCACACCUGCUGAG\
) } def
/len { sequence length } bind def

/coor [
[10.94989109 268.57067871]
[-2.97639775 276.08090210]
[-18.67590141 277.71240234]
[-33.77552032 273.24786377]
[-43.01044083 285.06802368]
[-52.24536514 296.88818359]
[-50.07078552 312.54217529]
[-59.66866302 325.09829712]
[-75.34474945 327.10723877]
[-87.79869843 317.37713623]
[-89.64179993 301.68069458]
[-79.78058624 289.33032227]
[-64.06552887 287.65325928]
[-54.83060455 275.83309937]
[-45.59568024 264.01293945]
[-53.01007462 251.96754456]
[-55.83845139 238.07812500]
[-53.71590805 224.03305054]
[-46.88065338 211.54692078]
[-36.14748764 202.15116882]
[-22.81070900 197.00630188]
[-8.48805428 196.75849915]
[5.07551765 201.45866394]
[14.71733189 189.96800232]
[24.35914612 178.47732544]
[34.00096130 166.98666382]
[43.64277267 155.49600220]
[53.28458786 144.00532532]
[62.92640305 132.51466370]
[72.56821442 121.02399445]
[67.00785828 110.29708099]
[65.47955322 98.31173706]
[68.17008209 86.53271484]
[74.75063324 76.39956665]
[84.41696167 69.15068817]
[95.98773956 65.67198181]
[108.04886627 66.38858795]
[114.62443542 52.90667725]
[121.19999695 39.42476654]
[127.77556610 25.94285583]
[128.77148438 16.63695908]
[134.82312012 12.11125183]
[141.86518860 -1.13296163]
[148.67504883 -14.49805927]
[155.25062561 -27.97997093]
[161.58988953 -41.57458878]
[167.69094849 -55.27776718]
[160.67372131 -69.25247955]
[164.33126831 -84.45630646]
[176.93659973 -93.71047211]
[192.53787231 -92.64543152]
[203.76863098 -81.76407623]
[205.32606506 -66.20424652]
[196.47480774 -53.31280899]
[181.39411926 -49.17671967]
[175.29307556 -35.47353745]
[175.45252991 -27.91847992]
[168.73252869 -21.40440369]
[162.15696716 -7.92249250]
[162.05265808 -0.36647183]
[155.10940552 5.90911198]
[148.06733704 19.15332603]
[141.25747681 32.51842499]
[134.68191528 46.00033569]
[128.10633850 59.48224640]
[121.53077698 72.96415710]
[132.04505920 87.05295563]
[134.26861572 104.49142456]
[148.36401367 109.62172699]
[162.45939636 114.75202942]
[178.50665283 111.37303162]
[189.25366211 123.75987244]
[183.64482117 139.17002869]
[167.45002747 141.75085449]
[157.32910156 128.84741211]
[143.23370361 123.71711731]
[129.13832092 118.58681488]
[116.83789825 130.18272400]
[100.50931549 134.55795288]
[84.05888367 130.66581726]
[74.41706848 142.15647888]
[64.77525330 153.64714050]
[55.13344193 165.13781738]
[45.49162674 176.62847900]
[35.84981155 188.11914062]
[26.20799828 199.60981750]
[16.56618500 211.10047913]
[24.05493164 225.21173096]
[25.59634590 241.07402039]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[23 87]
[24 86]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 80]
[37 66]
[38 65]
[39 64]
[40 63]
[42 62]
[43 61]
[44 59]
[45 58]
[46 56]
[47 55]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
