%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACGUGGAGAACGCCAGGGAGCUGUGAGAGUGUGCAGUCGCGUUCCUGCUGUCCGGACACUUUUUUCCUCUACUGAGACUCAUCUGGUAGAUCCGCAGGCCAGUCCUCCCAGGGGCUGAAGUUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[290.81277466 360.58471680]
[281.11120605 349.14440918]
[271.40966797 337.70413208]
[261.07751465 337.77093506]
[252.25767517 331.97625732]
[248.04429626 322.06042480]
[250.07633972 311.25518799]
[240.92169189 299.37277222]
[231.76704407 287.49032593]
[222.61238098 275.60787964]
[213.45773315 263.72546387]
[200.15222168 265.33331299]
[187.69911194 260.09280396]
[179.41471863 249.28276062]
[177.56282043 235.68028259]
[182.73699951 222.84762573]
[173.86341858 210.75384521]
[164.98983765 198.66006470]
[156.11625671 186.56628418]
[147.24266052 174.47250366]
[138.36907959 162.37872314]
[129.35433960 150.38980103]
[120.19969177 138.50735474]
[111.04503632 126.62492371]
[97.61289215 128.72596741]
[84.71177673 124.43664551]
[75.21167755 114.71116638]
[71.22596741 101.71304321]
[73.64131927 88.33383942]
[61.97675323 78.90314484]
[50.31219101 69.47245789]
[38.64762878 60.04176331]
[26.98306465 50.61106873]
[15.31850243 41.18037415]
[3.65393925 31.74968338]
[-8.01062393 22.31899071]
[-20.10440445 13.44540691]
[-32.60081863 5.14843941]
[-45.09722900 -3.14852786]
[-57.59364319 -11.44549561]
[-70.09005737 -19.74246216]
[-84.17569733 -13.44975185]
[-99.42393494 -15.79384708]
[-110.96910858 -26.02675819]
[-115.12720490 -40.88319778]
[-110.57137299 -55.62253189]
[-98.75537872 -65.54149628]
[-83.44965363 -67.47497559]
[-69.53820038 -60.80601120]
[-61.46011734 -47.66264343]
[-61.79308701 -32.23887634]
[-49.29667664 -23.94190788]
[-36.80026245 -15.64494038]
[-24.30385017 -7.34797335]
[-11.80743694 0.94899392]
[-8.95672131 0.45874226]
[-5.73238325 1.12235510]
[-2.59370971 3.09110022]
[-0.04696322 6.33955956]
[1.42006910 10.65442657]
[13.08463192 20.08511925]
[24.74919510 29.51581383]
[36.41375732 38.94650650]
[48.07831955 48.37719727]
[59.74288559 57.80789185]
[71.40744781 67.23858643]
[83.07200623 76.66928101]
[87.80256653 73.88291168]
[92.97561646 72.04400635]
[98.40348816 71.21926880]
[103.88928223 71.43861389]
[109.71066284 57.61429977]
[115.53203583 43.78998947]
[112.95110321 27.59521294]
[125.85447693 17.47419357]
[140.96826172 23.83856773]
[142.74470520 40.14121628]
[129.35635376 49.61136627]
[123.53497314 63.43568039]
[117.71359253 77.25998688]
[128.58567810 96.29342651]
[122.92747498 117.47026825]
[132.08212280 129.35270691]
[141.23678589 141.23513794]
[149.02886963 146.18292236]
[150.46286011 153.50514221]
[159.33644104 165.59892273]
[168.21003723 177.69270325]
[177.08361816 189.78648376]
[185.95719910 201.88026428]
[194.83078003 213.97404480]
[211.69725037 213.64633179]
[225.32066345 223.31214905]
[230.47944641 239.02543640]
[225.34016418 254.57080078]
[234.49482727 266.45324707]
[243.64947510 278.33566284]
[252.80412292 290.21810913]
[261.95877075 302.10055542]
[280.89862061 308.82028198]
[282.84994507 328.00259399]
[292.55148315 339.44287109]
[302.25305176 350.88314819]
[313.57879639 360.71813965]
[326.26629639 368.71987915]
[338.95376587 376.72161865]
[351.64126587 384.72335815]
[364.32873535 392.72509766]
[377.01620483 400.72683716]
[389.70370483 408.72857666]
[406.10253906 408.82818604]
[413.97946167 423.21173096]
[405.23135376 437.08264160]
[388.85751343 436.17172241]
[381.70196533 421.41604614]
[369.01446533 413.41430664]
[356.32699585 405.41256714]
[343.63952637 397.41082764]
[330.95202637 389.40908813]
[318.26455688 381.40734863]
[305.57705688 373.40560913]
[311.16436768 387.32617188]
[310.73382568 402.32000732]
[304.35693359 415.89703369]
[293.09274292 425.80245972]
[278.81188965 430.39132690]
[263.88604736 428.90148926]
[250.79400635 421.58041382]
[241.70996094 409.64392090]
[238.14251709 395.07431030]
[240.68415833 380.29119873]
[248.91275024 367.74966431]
[261.46179199 359.53250122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[7 99]
[8 98]
[9 97]
[10 96]
[11 95]
[16 91]
[17 90]
[18 89]
[19 88]
[20 87]
[21 86]
[22 84]
[23 83]
[24 82]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[71 80]
[72 79]
[73 78]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
