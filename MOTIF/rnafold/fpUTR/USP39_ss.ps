%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAGAGAGUUCGGGGCUCGCUACCAGCCCCUCUCCUGAUUGGCCUUGUGCCGCGCGCUCGAGCGUGCUUGGCGCCUGCGCUGGACGACUCGGCCGGUAGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[-14.23180199 228.80439758]
[-5.28152418 240.84153748]
[-2.20609856 255.52287292]
[-5.57284880 270.14016724]
[-14.76071072 281.99694824]
[-28.07480049 288.90597534]
[-43.05906677 289.59280396]
[-56.94936752 283.93069458]
[-67.18335724 272.96411133]
[-71.87316895 258.71612549]
[-70.15368652 243.81500244]
[-62.34420395 231.01177979]
[-76.61005402 235.64703369]
[-90.87590027 240.28228760]
[-105.14174652 244.91754150]
[-119.40759277 249.55281067]
[-133.67344666 254.18806458]
[-139.36323547 268.75378418]
[-153.10925293 276.20904541]
[-168.42105103 273.03369141]
[-178.06886292 260.72705078]
[-177.49729919 245.09989929]
[-166.97621155 233.53094482]
[-151.47335815 231.48266602]
[-138.30870056 239.92221069]
[-124.04284668 235.28695679]
[-109.77700043 230.65170288]
[-95.51115417 226.01644897]
[-81.24530792 221.38119507]
[-66.97945404 216.74594116]
[-61.29843521 209.90345764]
[-51.37084961 208.64532471]
[-39.36884689 199.64799500]
[-27.36684418 190.65066528]
[-15.36484146 181.65333557]
[-13.75215054 164.98789978]
[-0.37156004 154.37437439]
[16.88871956 156.68617249]
[28.61619186 147.33383179]
[40.34366226 137.98147583]
[52.07113647 128.62913513]
[63.79860687 119.27678680]
[75.52607727 109.92443848]
[87.25355530 100.57209015]
[98.54962158 90.70301056]
[109.39154816 80.33707428]
[120.23346710 69.97113037]
[131.07539368 59.60519409]
[135.20578003 51.26945877]
[142.40014648 49.09735107]
[153.54731750 39.06039429]
[164.69450378 29.02343369]
[169.07240295 20.81499481]
[176.32853699 18.85908127]
[187.77098083 9.16008759]
[199.21342468 -0.53890610]
[210.65586853 -10.23789978]
[209.30587769 -22.24599648]
[213.94573975 -33.27236176]
[223.28453064 -40.55366898]
[234.87042236 -42.32799530]
[245.73377991 -38.26000214]
[257.73577881 -47.25732803]
[269.73779297 -56.25465775]
[281.73977661 -65.25198364]
[285.42639160 -80.86571503]
[299.99319458 -87.58786774]
[314.26583862 -80.26177216]
[317.29553223 -64.50739288]
[306.75817871 -52.41013718]
[290.73712158 -53.24998474]
[278.73510742 -44.25265503]
[266.73309326 -35.25532532]
[254.73110962 -26.25799751]
[253.35374451 -8.12508488]
[239.02027893 3.57115054]
[220.35485840 1.20454347]
[208.91241455 10.90353775]
[197.46997070 20.60253143]
[186.02752686 30.30152512]
[174.73146057 40.17060471]
[163.58428955 50.20756531]
[152.43711853 60.24452591]
[141.44132996 70.44711304]
[130.59941101 80.81305695]
[119.75748444 91.17899323]
[108.91556549 101.54493713]
[108.29680634 105.53954315]
[105.83792877 109.20938110]
[101.74310303 111.70246124]
[96.60589600 112.29956818]
[84.87842560 121.65190887]
[73.15095520 131.00425720]
[61.42348099 140.35661316]
[49.69601059 149.70895386]
[37.96853638 159.06129456]
[26.24106598 168.41365051]
[26.26489067 181.98071289]
[18.53922272 192.89450073]
[6.10463190 197.25167847]
[-6.36751270 193.65534973]
[-18.36951637 202.65267944]
[-30.37151909 211.64999390]
[-42.37352371 220.64732361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[32 104]
[33 103]
[34 102]
[35 101]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[44 91]
[45 87]
[46 86]
[47 85]
[48 84]
[50 83]
[51 82]
[52 81]
[54 80]
[55 79]
[56 78]
[57 77]
[62 74]
[63 73]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
