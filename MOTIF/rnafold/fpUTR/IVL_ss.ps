%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCACUCCACCAAAGCCUCUGCCUCAGCCUUACUGUGAGUCUGGUUGACAGUAGCUUCUAAG\
) } def
/len { sequence length } bind def

/coor [
[56.80371475 299.30407715]
[43.02388763 305.49221802]
[28.05865288 307.54608154]
[13.12117481 305.29922485]
[-0.57763207 298.93374634]
[-11.92726707 288.96566772]
[-20.00766754 276.20306396]
[-24.16378784 261.68057251]
[-24.05871391 246.57540894]
[-19.70096207 232.11212158]
[-11.44379616 219.46318054]
[0.04341380 209.65396118]
[13.82944965 203.47967529]
[28.79673958 201.44082642]
[43.73195267 203.70269775]
[50.05297089 190.09957886]
[56.37398529 176.49645996]
[62.69500351 162.89335632]
[57.35667801 149.03558350]
[63.57330322 135.15003967]
[78.14480591 129.64466858]
[84.46582031 116.04155731]
[90.78684235 102.43843842]
[90.06197357 96.83601379]
[92.73997498 91.30338287]
[98.43125916 87.87321472]
[106.03565216 74.94367218]
[113.64005280 62.01412964]
[121.24445343 49.08458328]
[128.84884644 36.15503693]
[136.45324707 23.22549248]
[132.70651245 8.10597610]
[140.60264587 -4.89809370]
[155.03988647 -8.37684917]
[162.64428711 -21.30639458]
[170.24868774 -34.23593903]
[173.06672668 -50.95404053]
[189.91159058 -52.87416077]
[196.41978455 -37.21914291]
[183.17822266 -26.63154030]
[175.57382202 -13.70199585]
[167.96943665 -0.77245110]
[171.94537354 13.53585148]
[164.41761780 26.75657654]
[149.38279724 30.82989120]
[141.77839661 43.75943375]
[134.17399597 56.68898010]
[126.56959534 69.61852264]
[118.96520233 82.54807281]
[111.36080170 95.47761536]
[104.38995361 108.75945282]
[98.06893921 122.36257172]
[91.74792480 135.96568298]
[96.93640137 150.65301514]
[90.33220673 164.35845947]
[76.29811859 169.21437073]
[69.97710419 182.81748962]
[63.65608597 196.42059326]
[57.33506775 210.02371216]
[68.69470978 219.98037720]
[76.78792572 232.73484802]
[80.95864105 247.25317383]
[80.86873627 262.35842896]
[76.52552032 276.82608032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 59]
[16 58]
[17 57]
[18 56]
[21 53]
[22 52]
[23 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[34 42]
[35 41]
[36 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
