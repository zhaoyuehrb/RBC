%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUAGCUCAGGAACCCAAACCUGUCGGGCAGGUUUUGAGAGCUGUGGAGAGAGGGACAGAGGCUGGAGAAGGAUGUAUGGCCUGCCCUGGGCUUGUCUGUUCCCUCCUGAGCCUGAGCCCCUUACCUUCCUGACCCC\
) } def
/len { sequence length } bind def

/coor [
[157.68862915 268.98153687]
[154.32720947 254.36303711]
[150.96578979 239.74453735]
[147.60437012 225.12602234]
[144.24295044 210.50750732]
[140.22439575 196.05581665]
[135.55690002 181.80049133]
[130.88941956 167.54515076]
[126.22193146 153.28981018]
[121.55445099 139.03448486]
[116.88696289 124.77914429]
[110.14023590 121.50321960]
[111.21277618 136.46482849]
[98.79185486 144.87438965]
[85.29855347 138.32223511]
[84.22633362 123.36060333]
[96.64678955 114.95136261]
[89.90006256 111.67543030]
[75.81112671 116.82343292]
[61.72219086 121.97142792]
[47.63325500 127.11942291]
[33.54431915 132.26742554]
[19.45538330 137.41542053]
[5.36644697 142.56341553]
[-8.72248936 147.71141052]
[-21.52448845 158.82649231]
[-35.74913788 149.60176086]
[-30.82269096 133.37936401]
[-13.87048626 133.62246704]
[0.21845025 128.47447205]
[14.30738640 123.32647705]
[28.39632225 118.17848206]
[42.48526001 113.03048706]
[56.57419586 107.88249207]
[70.66313171 102.73448944]
[84.75206757 97.58649445]
[70.35922241 93.36206055]
[63.77053833 79.88655090]
[69.27561188 65.93326569]
[83.29034424 60.58655548]
[96.69037628 67.32741547]
[100.75160980 81.76674652]
[106.05849457 67.73688507]
[111.36537170 53.70701981]
[105.11424255 39.43953323]
[110.69603729 25.28685760]
[124.33642578 19.41528702]
[129.64331055 5.38542509]
[134.95018005 -8.64443684]
[140.25706482 -22.67429924]
[139.37712097 -27.99155998]
[140.56033325 -32.62441635]
[143.18066406 -35.88765335]
[146.42823792 -37.45457840]
[152.67347717 -51.09265137]
[158.91871643 -64.73072052]
[165.16395569 -78.36878967]
[171.40919495 -92.00686646]
[177.65443420 -105.64493561]
[183.89967346 -119.28300476]
[190.14491272 -132.92108154]
[196.08033752 -146.69680786]
[201.70292664 -160.60314941]
[207.32553101 -174.50949097]
[212.94812012 -188.41584778]
[218.25498962 -202.44570923]
[223.24345398 -216.59191895]
[216.05041504 -228.03895569]
[216.78028870 -241.34324646]
[224.93994141 -251.62893677]
[237.35482788 -255.25682068]
[242.66169739 -269.28668213]
[247.96858215 -283.31652832]
[239.34149170 -296.21432495]
[239.97679138 -311.71838379]
[249.63021851 -323.86709595]
[264.58981323 -327.98904419]
[279.10330200 -322.49920654]
[287.58996582 -309.50860596]
[286.78649902 -294.01232910]
[277.00186157 -281.96905518]
[261.99844360 -278.00967407]
[256.69155884 -263.97979736]
[251.38468933 -249.94993591]
[258.95422363 -234.97457886]
[253.27769470 -218.82691956]
[237.38966370 -211.60345459]
[232.40119934 -197.45724487]
[233.65873718 -192.77018738]
[231.92472839 -187.24638367]
[226.85446167 -182.79325867]
[221.23187256 -168.88690186]
[215.60928345 -154.98056030]
[209.98669434 -141.07421875]
[211.03112793 -136.33511353]
[209.04930115 -130.89530945]
[203.78297424 -126.67584229]
[197.53773499 -113.03776550]
[191.29249573 -99.39969635]
[185.04725647 -85.76162720]
[178.80201721 -72.12355042]
[172.55677795 -58.48548126]
[166.31153870 -44.84741211]
[160.06629944 -31.20934105]
[154.28692627 -17.36742020]
[148.98004150 -3.33755779]
[143.67317200 10.69230461]
[138.36628723 24.72216606]
[144.70605469 38.15134811]
[139.52398682 52.45522308]
[125.39523315 59.01389694]
[120.08835602 73.04376221]
[114.78147888 87.07362366]
[131.14230347 120.11166382]
[135.80978394 134.36698914]
[140.47726440 148.62232971]
[145.14476013 162.87767029]
[149.81224060 177.13299561]
[154.47972107 191.38833618]
[157.97334290 194.28120422]
[160.09796143 197.79884338]
[160.82756042 201.41598511]
[160.31549072 204.65580750]
[158.86146545 207.14608765]
[162.22288513 221.76460266]
[165.58430481 236.38311768]
[168.94570923 251.00161743]
[172.30712891 265.62014771]
[187.12486267 269.45333862]
[198.45614624 279.74218750]
[203.69712830 294.12240601]
[201.64346313 309.28952026]
[192.76708984 321.75823975]
[179.10772705 328.66329956]
[163.80418396 328.41802979]
[150.37310791 321.07876587]
[141.90086365 308.33200073]
[140.33432007 293.10687256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 128]
[2 127]
[3 126]
[4 125]
[5 124]
[6 119]
[7 118]
[8 117]
[9 116]
[10 115]
[11 114]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[42 113]
[43 112]
[44 111]
[47 108]
[48 107]
[49 106]
[50 105]
[54 104]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[62 94]
[63 93]
[64 92]
[65 91]
[66 88]
[67 87]
[71 84]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
