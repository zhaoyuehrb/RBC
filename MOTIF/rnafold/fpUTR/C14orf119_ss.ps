%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUUUGGGGCGGGUCCGAGGCCGGAAGUGCGUGGGCUGCCGGGCUGGCCCAGCUUAGGGUUUUCAGGAAAUUUGGAAGCUGCCGCAGUAGUUGGAGUCUAAGGACUCGUGACAAUCUUCGGGUGCCCUUCGAGAGAAAAGGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[84.42925262 154.21467590]
[78.05585480 151.96281433]
[71.99758911 148.96472168]
[66.34145355 145.26347351]
[61.16868591 140.91220093]
[56.55355835 135.97340393]
[52.56235123 130.51800537]
[49.25238037 124.62435150]
[35.00634003 129.32012939]
[20.76029968 134.01589966]
[6.51425886 138.71168518]
[-4.17008638 150.38024902]
[-18.67981148 147.01614380]
[-32.92585373 151.71192932]
[-47.17189407 156.40769958]
[-61.41793442 161.10348511]
[-75.66397095 165.79925537]
[-89.91001892 170.49502563]
[-101.80784607 184.50726318]
[-118.82623291 180.34730530]
[-132.96939087 185.34439087]
[-147.11254883 190.34149170]
[-161.25572205 195.33859253]
[-163.38426208 210.49536133]
[-172.32212830 222.92007446]
[-186.01544189 229.75759888]
[-201.31758118 229.43673706]
[-214.71223450 222.03120422]
[-223.12141418 209.24275208]
[-224.61273193 194.01007080]
[-218.84350586 179.83352661]
[-207.13946533 169.97076416]
[-192.19010925 166.68818665]
[-177.43069458 170.74011230]
[-166.25280762 181.19543457]
[-152.10964966 176.19833374]
[-137.96649170 171.20123291]
[-123.82332611 166.20414734]
[-118.29616547 155.39544678]
[-106.49839783 151.14039612]
[-94.60578918 156.24899292]
[-80.35974884 151.55320740]
[-66.11370850 146.85743713]
[-51.86766815 142.16166687]
[-37.62162781 137.46588135]
[-23.37558937 132.77011108]
[-13.71021557 121.43741608]
[1.81848156 124.46564484]
[16.06452179 119.76986694]
[30.31056404 115.07408905]
[44.55660248 110.37831116]
[43.59395981 100.19531250]
[44.48606491 90.00588989]
[47.20357895 80.14508820]
[51.65715027 70.93716431]
[57.70033264 62.68488693]
[65.13442230 55.65960312]
[73.71495819 50.09232712]
[83.15979767 46.16611481]
[80.62478638 31.38187790]
[78.08977509 16.59763908]
[75.55476379 1.81339967]
[73.01975250 -12.97083855]
[70.48473358 -27.75507736]
[67.94972229 -42.53931808]
[65.41471100 -57.32355499]
[62.87969971 -72.10779572]
[50.66454315 -82.50824738]
[51.32390976 -98.53774261]
[64.35199738 -107.89982605]
[79.75476074 -103.41270447]
[85.71652985 -88.51851654]
[77.66394043 -74.64280701]
[80.19895172 -59.85856628]
[82.73396301 -45.07432938]
[85.26897430 -30.29009056]
[87.80398560 -15.50585175]
[90.33899689 -0.72161269]
[92.87401581 14.06262589]
[95.40902710 28.84686470]
[97.94403839 43.63110352]
[128.03019714 51.05117035]
[149.65679932 73.24404907]
[163.69071960 67.94788361]
[177.72462463 62.65171432]
[187.90411377 50.54021072]
[202.54354858 53.28546906]
[216.57745361 47.98930359]
[223.45896912 31.94234276]
[239.48945618 25.92290306]
[254.62463379 33.18336105]
[268.54296875 27.59051514]
[282.46130371 21.99766731]
[293.44329834 7.25668049]
[310.69192505 10.32520103]
[324.48843384 4.43819141]
[338.28491211 -1.44881761]
[352.08139038 -7.33582687]
[365.87789917 -13.22283554]
[375.28430176 -26.65605164]
[391.59521484 -24.95710564]
[398.03134155 -9.87372875]
[387.97177124 3.07759523]
[371.76489258 0.57365358]
[357.96841431 6.46066284]
[344.17193604 12.34767151]
[330.37542725 18.23468208]
[316.57894897 24.12169075]
[311.75082397 35.26020813]
[300.24774170 40.25741577]
[288.05416870 35.91600418]
[274.13583374 41.50885010]
[260.21749878 47.10169601]
[256.84866333 59.58035278]
[246.74324036 67.94845581]
[233.46640015 68.96147156]
[221.87362671 62.02321243]
[207.83970642 67.31937408]
[198.66401672 79.05206299]
[183.02079773 76.68562317]
[168.98687744 81.98178864]
[154.95297241 87.27795410]
[156.34812927 102.56291962]
[153.57116699 117.65811920]
[146.82772827 131.44587708]
[136.61708069 142.90534973]
[144.75103760 155.50848389]
[152.88497925 168.11160278]
[161.01892090 180.71473694]
[169.15287781 193.31787109]
[184.65316772 194.03933716]
[196.74804688 203.76011658]
[200.78677368 218.74238586]
[195.21638489 233.22514343]
[182.17880249 241.63948059]
[166.68724060 240.74990845]
[154.69853210 230.89849854]
[150.82257080 215.87329102]
[156.54974365 201.45181274]
[148.41580200 188.84867859]
[140.28184509 176.24555969]
[132.14790344 163.64242554]
[124.01395416 151.03929138]
[117.73616028 153.54537964]
[111.20367432 155.28251648]
[104.51028442 156.22576904]
[97.75212860 156.36157227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 51]
[9 50]
[10 49]
[11 48]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[18 41]
[20 38]
[21 37]
[22 36]
[23 35]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[83 122]
[84 121]
[85 120]
[87 118]
[88 117]
[91 113]
[92 112]
[93 111]
[95 108]
[96 107]
[97 106]
[98 105]
[99 104]
[126 143]
[127 142]
[128 141]
[129 140]
[130 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
