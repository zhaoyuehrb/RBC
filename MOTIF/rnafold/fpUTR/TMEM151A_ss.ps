%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCGGCCGCUGAGCCGAGCGGACGCCCCCGGGGGCCGCGUCGCAGCCCUCCGUGCUCCCCCCUAUCAUGCCCGGUGCCCAGGCUGGGGCCGCCCAAGCAGCCAGGACACC\
) } def
/len { sequence length } bind def

/coor [
[115.02301025 152.58010864]
[96.94539642 154.59878540]
[79.20576477 150.57626343]
[63.76696014 140.95761108]
[52.38121033 150.72308350]
[40.99545670 160.48857117]
[35.55766678 175.34591675]
[20.85979652 177.75878906]
[9.47404480 187.52427673]
[-1.91170740 197.28974915]
[-13.29745960 207.05523682]
[-24.68321037 216.82072449]
[-25.64029312 232.59600830]
[-37.52708817 243.01135254]
[-53.29137039 241.88754272]
[-63.58047104 229.89129639]
[-62.29005051 214.13977051]
[-50.18568802 203.97808838]
[-34.44869232 205.43496704]
[-23.06294250 195.66947937]
[-11.67718983 185.90400696]
[-0.29143807 176.13851929]
[11.09431362 166.37303162]
[15.71772003 152.21417236]
[31.22997475 149.10281372]
[42.61572647 139.33734131]
[54.00147629 129.57185364]
[47.22429276 114.32073212]
[45.36272812 97.73574829]
[48.59016800 81.36166382]
[56.60600662 66.72358704]
[68.66363525 55.18492889]
[61.83520508 41.82931137]
[55.00677490 28.47369194]
[48.17834473 15.11807251]
[41.34991455 1.76245391]
[26.58156586 -3.19068480]
[19.84682274 -16.83245468]
[24.65989494 -30.88129616]
[17.83146667 -44.23691559]
[11.00303650 -57.59253311]
[4.21428967 -63.91828918]
[4.17625904 -71.41567993]
[-2.27827048 -84.95595551]
[-17.55885315 -87.65473938]
[-28.31054688 -98.84315491]
[-30.39910698 -114.21903229]
[-23.02144051 -127.87002563]
[-9.01440907 -134.54705811]
[6.23599672 -131.68266296]
[16.86568451 -120.37826538]
[18.78732491 -104.98064423]
[11.26200485 -91.41048431]
[17.71653366 -77.87020874]
[24.35865593 -64.42095947]
[31.18708420 -51.06534195]
[38.01551437 -37.70972443]
[52.22239685 -33.38536072]
[59.33765030 -19.93813896]
[54.70553589 -5.06597567]
[61.53396225 8.28964329]
[68.36239624 21.64526176]
[75.19082642 35.00088120]
[82.01924896 48.35649872]
[92.90761566 45.77770996]
[104.09293365 45.46921539]
[115.10688782 47.44393158]
[125.48830414 51.61917114]
[134.80253601 57.82012177]
[142.65957642 65.78714752]
[148.73045349 75.18666840]
[152.76098633 85.62512207]
[154.58241272 96.66545868]
[154.11846924 107.84541321]
[151.38856506 118.69687653]
[164.64797974 125.71029663]
[177.90739441 132.72370911]
[191.16680908 139.73713684]
[206.98327637 139.35008240]
[214.61602783 152.14033508]
[227.87542725 159.15374756]
[243.69190979 158.76670837]
[251.32464600 171.55696106]
[264.58404541 178.57037354]
[277.84347534 185.58380127]
[291.10287476 192.59721375]
[304.36230469 199.61062622]
[317.90255737 206.06515503]
[331.70016479 211.94958496]
[345.49774170 217.83399963]
[362.43917847 218.48593140]
[366.50256348 234.94573975]
[351.81085205 243.40686035]
[339.61334229 231.63159180]
[325.81573486 225.74717712]
[312.01815796 219.86276245]
[308.51678467 220.92979431]
[304.30972290 220.26257324]
[300.26184082 217.54248047]
[297.34887695 212.87004089]
[284.08944702 205.85662842]
[270.83004761 198.84320068]
[257.57064819 191.82978821]
[244.31123352 184.81636047]
[229.44316101 185.70506287]
[220.86201477 172.41316223]
[207.60260010 165.39974976]
[192.73452759 166.28843689]
[184.15338135 152.99653625]
[170.89396667 145.98312378]
[157.63456726 138.96971130]
[144.37515259 131.95628357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 27]
[5 26]
[6 25]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[39 57]
[40 56]
[41 55]
[43 54]
[44 53]
[75 112]
[76 111]
[77 110]
[78 109]
[80 107]
[81 106]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
