%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGAACUCAAAACCGACUGCGGAGAGCCCAGCGGGCGGGAGCUGGGGCGCACGUUGGGGCCCUGCCGAGGGGCGGGCAGGGCCCGGUGCCAGCCCCGGCACCGACGGGACGCCCUCCUCCCUCCGCAGGGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[96.85394287 364.65252686]
[87.22656250 376.61953735]
[72.89971924 382.15463257]
[57.72725296 379.76885986]
[45.79048538 370.10403442]
[40.30034256 355.75988770]
[42.73364639 340.59500122]
[52.43585205 328.68856812]
[66.79711914 323.24340820]
[69.12712860 308.42547607]
[71.45713806 293.60754395]
[69.83602142 291.22674561]
[69.09989166 288.03500366]
[69.57231140 284.38113403]
[71.43895721 280.72784424]
[74.71112061 277.59851074]
[78.35076141 263.04675293]
[81.99039459 248.49502563]
[76.23894501 231.95179749]
[89.05133057 218.77807617]
[92.36586761 204.14886475]
[95.68040466 189.51965332]
[98.99493408 174.89044189]
[102.30947113 160.26123047]
[105.62400818 145.63201904]
[108.93854523 131.00280762]
[104.09633636 125.27541351]
[94.41191864 113.82063293]
[89.56970978 108.09323883]
[74.59297180 108.92833710]
[59.61623764 109.76343536]
[44.63950348 110.59853363]
[29.16155624 117.51731110]
[18.22844505 104.55955505]
[27.65321922 90.46665192]
[43.80440521 95.62179565]
[58.78113937 94.78669739]
[73.75787354 93.95159912]
[88.73461151 93.11650085]
[101.46712494 85.18662262]
[108.82194519 72.11349487]
[116.17676544 59.04036713]
[123.53158569 45.96723938]
[130.88639832 32.89411545]
[128.16699219 20.23192596]
[134.62643433 9.47307110]
[146.30798340 6.14235258]
[153.95222473 -6.76367140]
[161.59648132 -19.66969490]
[169.24073792 -32.57571793]
[176.88497925 -45.48174286]
[184.52923584 -58.38776779]
[179.86900330 -75.20885468]
[188.60931396 -89.92732239]
[204.95341492 -93.73292542]
[212.30824280 -106.80605316]
[219.66305542 -119.87917328]
[227.01788330 -132.95230103]
[218.10325623 -143.30082703]
[218.36412048 -160.43388367]
[220.36343384 -175.30004883]
[222.36273193 -190.16621399]
[224.36204529 -205.03237915]
[226.36134338 -219.89854431]
[228.36064148 -234.76469421]
[230.35995483 -249.63085938]
[232.35925293 -264.49700928]
[234.35856628 -279.36318970]
[236.35786438 -294.22933960]
[225.03941345 -304.84408569]
[222.15486145 -320.09066772]
[228.81335449 -334.10653687]
[242.45458984 -341.50225830]
[257.83322144 -339.43402100]
[269.03582764 -328.69714355]
[271.75482178 -313.42013550]
[264.94467163 -299.47735596]
[251.22402954 -292.23004150]
[249.22471619 -277.36389160]
[247.22541809 -262.49771118]
[245.22612000 -247.63156128]
[243.22680664 -232.76539612]
[241.22750854 -217.89923096]
[239.22819519 -203.03306580]
[237.22889709 -188.16691589]
[235.22959900 -173.30075073]
[233.23028564 -158.43458557]
[245.20646667 -149.40290833]
[258.95013428 -155.41223145]
[272.69378662 -161.42155457]
[286.43743896 -167.43086243]
[300.18109131 -173.44018555]
[313.92474365 -179.44950867]
[319.45288086 -194.25541687]
[333.86572266 -200.73970032]
[348.61236572 -195.05532837]
[354.94390869 -180.57475281]
[349.10394287 -165.88902283]
[334.55722046 -159.71095276]
[319.93408203 -165.70584106]
[306.19039917 -159.69653320]
[292.44674683 -153.68721008]
[278.70309448 -147.67788696]
[264.95944214 -141.66857910]
[251.21578979 -135.65925598]
[240.09100342 -125.59748077]
[232.73619080 -112.52436066]
[225.38136292 -99.45123291]
[218.02655029 -86.37810516]
[223.21041870 -74.53050232]
[220.55981445 -61.67374802]
[210.82778931 -52.57598114]
[197.43525696 -50.74351501]
[189.79100037 -37.83749390]
[182.14675903 -24.93146896]
[174.50250244 -12.02544498]
[166.85826111 0.88057840]
[159.21400452 13.78660202]
[160.00083923 31.28342056]
[143.95953369 40.24893570]
[136.60470581 53.32205963]
[129.24989319 66.39518738]
[121.89507294 79.46831512]
[114.54025269 92.54143524]
[123.56775665 134.31733704]
[120.25321960 148.94654846]
[116.93868256 163.57575989]
[113.62415314 178.20497131]
[110.30961609 192.83419800]
[106.99507904 207.46340942]
[103.68054199 222.09262085]
[109.90321350 233.45063782]
[106.78575897 245.60624695]
[96.54212952 252.13467407]
[92.90249634 266.68640137]
[89.26285553 281.23812866]
[86.27507019 295.93756104]
[83.94506073 310.75549316]
[81.61504364 325.57342529]
[93.61216736 335.16323853]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[16 136]
[17 135]
[18 134]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[29 39]
[30 38]
[31 37]
[32 36]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[47 118]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
[55 109]
[56 108]
[57 107]
[58 106]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[88 105]
[89 104]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
