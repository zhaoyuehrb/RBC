%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCAUCCCAGGCUUCCAGCUCAGCCCGCCCCAGGCCAGGUGAUCGGCCGCCACAUCCCCUGCGACUGAAGCACCUGCUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[57.46089935 169.23255920]
[50.63864517 178.20043945]
[42.10088348 185.54260254]
[32.22547531 190.93814087]
[21.44864464 194.15219116]
[10.24569988 195.04621887]
[-0.88991857 193.58392334]
[-11.46837711 189.83268738]
[-21.02499771 183.96057129]
[-29.14066315 176.22866821]
[-35.46020508 166.97961426]
[-39.70794296 156.62229919]
[-54.54809570 158.80630493]
[-69.38824463 160.99032593]
[-84.22839355 163.17434692]
[-91.30451202 176.98405457]
[-105.16153717 183.96707153]
[-120.47116852 181.43826294]
[-131.34654236 170.37002563]
[-133.60583496 155.01831055]
[-126.38033295 141.28616333]
[-112.44837189 134.45388794]
[-97.16706848 137.14862061]
[-86.41241455 148.33419800]
[-71.57226562 146.15017700]
[-56.73211288 143.96615601]
[-41.89196396 141.78215027]
[-38.50789261 122.60314941]
[-28.45428085 105.89157867]
[-13.05287743 93.88257599]
[5.65779305 88.19053650]
[25.19224358 89.59208679]
[42.94819260 97.92020416]
[56.55322266 112.08382416]
[70.13494873 105.71697235]
[83.71666718 99.35012054]
[92.81459045 85.37334442]
[109.43756866 86.71461487]
[122.77770233 79.85597992]
[136.11782837 72.99734497]
[149.45796204 66.13871002]
[162.79809570 59.28007507]
[176.13822937 52.42144012]
[185.60530090 36.75632095]
[203.00659180 38.01894760]
[216.08732605 30.67767906]
[229.16807556 23.33641052]
[242.24880981 15.99514294]
[250.49647522 2.49378419]
[265.38204956 3.01213837]
[278.46279907 -4.32912922]
[291.54354858 -11.67039680]
[291.65032959 -27.02891731]
[299.43588257 -40.26826859]
[312.80596924 -47.82712936]
[328.16409302 -47.67220688]
[341.37896729 -39.84517288]
[348.89587402 -26.45145988]
[348.69281006 -11.09391022]
[340.82440186 2.09637237]
[327.40719604 9.57126904]
[312.05035400 9.32006836]
[298.88479614 1.41034400]
[285.80407715 8.75161171]
[272.72332764 16.09288025]
[265.41128540 29.06914139]
[249.59007263 29.07588387]
[236.50933838 36.41715240]
[223.42860413 43.75841904]
[210.34785461 51.09968567]
[206.69041443 62.78488159]
[195.65144348 68.95887756]
[182.99685669 65.76157379]
[169.65673828 72.62020874]
[156.31660461 79.47884369]
[142.97647095 86.33747864]
[129.63633728 93.19611359]
[116.29620361 100.05474854]
[111.99136353 111.03524017]
[101.40554810 116.23556519]
[90.08351898 112.93184662]
[76.50179291 119.29869843]
[62.92007446 125.66554260]
[65.05898285 136.75849915]
[64.83628845 148.04624939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 27]
[13 26]
[14 25]
[15 24]
[34 83]
[35 82]
[36 81]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[43 73]
[45 70]
[46 69]
[47 68]
[48 67]
[50 65]
[51 64]
[52 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
