%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCGAGGGAGCGGCGGCCGCUGCGGGCCGGGCCGGGCCGGGGCUGAGGCCGAGCGAGCCGCGGGGCCCGCGCAGCCCCGGCCGGAGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[45.69267273 183.38508606]
[36.98584366 171.17070007]
[39.16569901 156.32960510]
[25.85735512 163.24972534]
[12.54901314 170.16984558]
[12.64161301 184.26504517]
[6.64122200 196.94599915]
[-4.21291733 205.72868347]
[-17.73719597 208.92050171]
[-31.24281311 205.94615173]
[-42.07032394 197.45046997]
[-55.60019302 203.92677307]
[-69.13005829 210.40309143]
[-82.65992737 216.87940979]
[-96.18979645 223.35572815]
[-107.86602020 235.64808655]
[-122.91029358 227.83103943]
[-119.56340790 211.21072388]
[-102.66611481 209.82585144]
[-89.13624573 203.34954834]
[-75.60637665 196.87322998]
[-62.07650757 190.39691162]
[-48.54663849 183.92059326]
[-47.73303604 167.87417603]
[-38.93538666 154.31857300]
[-24.44512558 146.95606995]
[-8.12312794 147.85316467]
[5.62889576 156.86149597]
[18.93723869 149.94139099]
[32.24557877 143.02127075]
[44.80307770 134.81704712]
[56.48623657 125.40940094]
[68.16939545 116.00175476]
[79.85255432 106.59410858]
[81.18469238 90.23342896]
[93.79785156 79.72846222]
[110.12961578 81.37763214]
[121.49534607 71.58884430]
[132.86106873 61.80006027]
[144.22679138 52.01127243]
[155.59251404 42.22248459]
[166.95823669 32.43370056]
[178.32395935 22.64491272]
[189.68968201 12.85612679]
[201.05540466 3.06734037]
[212.42112732 -6.72144604]
[223.78684998 -16.51023293]
[229.25888062 -37.08763504]
[249.44209290 -40.81685638]
[259.78237915 -51.68323517]
[270.12268066 -62.54961395]
[280.46298218 -73.41599274]
[280.24536133 -88.99130249]
[290.88668823 -99.86405182]
[305.73672485 -99.97554779]
[316.07702637 -110.84192657]
[326.41732788 -121.70830536]
[332.95596313 -137.35063171]
[349.79705811 -135.39775085]
[352.58258057 -118.67420197]
[337.28369141 -111.36800385]
[326.94338989 -100.50162506]
[316.60308838 -89.63524628]
[317.22805786 -74.79796600]
[306.89633179 -63.63060760]
[291.32937622 -63.07569122]
[280.98907471 -52.20931244]
[270.64877319 -41.34293365]
[260.30847168 -30.47655487]
[262.01275635 -21.41062927]
[259.19927979 -12.47896576]
[252.40731812 -5.83118153]
[243.14938354 -3.13171697]
[233.57563782 -5.14450932]
[222.20991516 4.64427710]
[210.84419250 14.43306351]
[199.47846985 24.22184944]
[188.11274719 34.01063538]
[176.74702454 43.79942322]
[165.38130188 53.58820724]
[154.01557922 63.37699509]
[142.64985657 73.16577911]
[131.28413391 82.95456696]
[119.91840363 92.74335480]
[120.46749115 105.52119446]
[113.56675720 116.28941345]
[101.72795105 121.12855530]
[89.26020050 118.27726746]
[77.57704163 127.68491364]
[65.89388275 137.09255981]
[54.21072388 146.50019836]
[68.67715454 150.46533203]
[76.36549377 163.34513855]
[72.99028778 177.96047974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[31 91]
[32 90]
[33 89]
[34 88]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[47 74]
[49 69]
[50 68]
[51 67]
[52 66]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
