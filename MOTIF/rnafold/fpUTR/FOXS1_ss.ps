%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUAUUCCGGACGCCAGCCCUGGAAGCUGAGCCUGACCCAGCAGGUCCCAGCAGCCUGGCAGCCCGGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[77.13638306 287.68667603]
[60.86317062 285.65823364]
[54.73339081 270.44778442]
[65.05283356 257.70254517]
[66.90822601 242.81773376]
[68.76361084 227.93292236]
[59.41279602 218.82690430]
[57.06842041 205.78752136]
[62.82995987 193.63977051]
[74.75396729 187.01405334]
[77.22288513 172.21864319]
[79.69180298 157.42321777]
[82.16072845 142.62779236]
[79.98164368 138.07922363]
[80.85190582 132.08862305]
[85.49337006 126.73368073]
[89.17565155 112.19268036]
[83.78128815 101.66771698]
[86.92092896 90.26522827]
[96.94255066 83.98500824]
[101.22259521 69.60859680]
[105.50263977 55.23218536]
[100.01810455 43.35062408]
[104.08802032 31.33987045]
[114.95001221 25.61813164]
[119.82050323 11.43087196]
[113.13116455 -2.63648462]
[118.27264404 -16.95499992]
[131.72494507 -23.24556732]
[136.59542847 -37.43282700]
[141.46592712 -51.62008667]
[146.33641052 -65.80734253]
[142.29716492 -83.63408661]
[155.66656494 -94.80790710]
[159.94660950 -109.18431854]
[164.22665405 -123.56072998]
[168.50669861 -137.93714905]
[172.78674316 -152.31355286]
[165.04525757 -166.09197998]
[169.39439392 -181.28607178]
[183.25389099 -188.88145447]
[198.40115356 -184.37191772]
[205.84957886 -170.43289185]
[201.18016052 -155.33415222]
[187.16316223 -148.03350830]
[182.88311768 -133.65710449]
[178.60307312 -119.28068542]
[174.32302856 -104.90427399]
[170.04298401 -90.52786255]
[175.55822754 -79.55957794]
[171.89135742 -67.41971588]
[160.52368164 -60.93685150]
[155.65318298 -46.74959183]
[150.78268433 -32.56233597]
[145.91220093 -18.37507629]
[152.66419983 -5.14836121]
[147.92694092 9.30891895]
[134.00776672 16.30136490]
[129.13726807 30.48862267]
[133.52510071 47.35107803]
[119.87905121 59.51222992]
[115.59900665 73.88864136]
[111.31896210 88.26505280]
[115.71923065 104.32824707]
[103.71665955 115.87496185]
[100.03437805 130.41596985]
[96.95614624 145.09671021]
[94.48722839 159.89213562]
[92.01830292 174.68756104]
[89.54938507 189.48297119]
[99.95442963 203.37120056]
[97.29112244 220.18127441]
[83.64842224 229.78831482]
[81.79302979 244.67312622]
[79.93764496 259.55792236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 75]
[5 74]
[6 73]
[10 70]
[11 69]
[12 68]
[13 67]
[16 66]
[17 65]
[20 63]
[21 62]
[22 61]
[25 59]
[26 58]
[29 55]
[30 54]
[31 53]
[32 52]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
