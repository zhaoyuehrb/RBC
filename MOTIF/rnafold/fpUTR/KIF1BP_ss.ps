%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCACAGCGGCCGCAACGUGUCGAGAGCCGUAAGUAAAGUGUCGCAAAGCAGAAGGAAGGCGGGAGUCCCGACUGCAAACAUUGAGGAAAGCCAGGCAGUAGAGGCCGCU\
) } def
/len { sequence length } bind def

/coor [
[49.59084320 438.01684570]
[42.09128189 451.60125732]
[28.02504730 458.15264893]
[12.80089092 455.15185547]
[2.27281237 443.75277710]
[0.48907289 428.33856201]
[8.13555622 414.83630371]
[22.27203369 408.43789673]
[25.17282104 393.72103882]
[28.07360840 379.00421143]
[30.97439575 364.28738403]
[33.87518311 349.57052612]
[36.77597046 334.85369873]
[39.67675781 320.13684082]
[29.42876053 309.36111450]
[27.46783066 294.44070435]
[34.75377274 281.07025146]
[48.67650604 274.47756958]
[51.57729340 259.76071167]
[49.75769043 252.48738098]
[54.76869202 244.67764282]
[58.07746124 230.04711914]
[61.38622665 215.41661072]
[64.69499207 200.78608704]
[56.55995560 192.55442810]
[53.43918610 181.28457642]
[56.23844147 169.80622864]
[64.36145020 161.06130981]
[75.83232117 157.35003662]
[79.94905853 142.92601013]
[68.58502197 135.46520996]
[59.80737686 125.08457184]
[54.33879852 112.63871002]
[52.62950516 99.15230560]
[54.82022858 85.73568726]
[60.73060226 73.49345398]
[69.87403107 63.43350983]
[81.49772644 56.38408279]
[94.64472198 52.92555618]
[108.23261261 53.34267044]
[113.14459991 39.16972351]
[118.05659485 24.99678040]
[122.96858215 10.82383537]
[127.88056946 -3.34910870]
[121.08808136 -10.71485615]
[117.54335022 -20.02385712]
[117.71432495 -29.92489433]
[121.53294373 -38.99804688]
[128.41114807 -45.95830154]
[137.33100891 -49.83754349]
[146.99528503 -50.11906052]
[153.44981384 -63.65933609]
[159.90434265 -77.19960785]
[166.35887146 -90.73988342]
[161.31512451 -105.47753906]
[168.05381775 -119.11735535]
[182.13500977 -123.83496857]
[188.58953857 -137.37524414]
[188.44508362 -144.21493530]
[191.41586304 -149.26850891]
[195.79759216 -151.47338867]
[202.99464417 -164.63403320]
[210.19169617 -177.79466248]
[209.27107239 -194.16795349]
[223.13679504 -202.92430115]
[237.52500916 -195.05593872]
[237.63435364 -178.65715027]
[223.35234070 -170.59761047]
[216.15528870 -157.43698120]
[208.95823669 -144.27633667]
[202.12980652 -130.92071533]
[195.67527771 -117.38043976]
[200.87702942 -103.47082520]
[194.52409363 -89.64710999]
[179.89913940 -84.28535461]
[173.44461060 -70.74507904]
[166.99008179 -57.20480347]
[160.53555298 -43.66453171]
[169.10908508 -25.24746132]
[161.47888184 -6.11192465]
[142.05351257 1.56288135]
[137.14152527 15.73582554]
[132.22953796 29.90876961]
[127.31754303 44.08171463]
[122.40555573 58.25465775]
[135.23533630 68.32740784]
[143.88865662 82.15432739]
[147.33982849 98.09650421]
[145.17977905 114.26431274]
[137.66453552 128.74134827]
[125.68489075 139.81166077]
[110.66080475 146.16307068]
[94.37308502 147.04275513]
[90.25634003 161.46676636]
[100.10715485 177.51866150]
[95.32121277 195.40753174]
[79.32550812 204.09484863]
[76.01674652 218.72537231]
[72.70797729 233.35589600]
[69.39920807 247.98640442]
[66.29413605 262.66149902]
[63.39334488 277.37835693]
[73.77297974 288.76119995]
[75.44027710 303.89636230]
[67.96415710 316.95669556]
[54.39360046 323.03762817]
[51.49281311 337.75448608]
[48.59202576 352.47131348]
[45.69123840 367.18817139]
[42.79045105 381.90499878]
[39.88966370 396.62182617]
[36.98887634 411.33868408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 112]
[9 111]
[10 110]
[11 109]
[12 108]
[13 107]
[14 106]
[18 102]
[19 101]
[21 100]
[22 99]
[23 98]
[24 97]
[29 94]
[30 93]
[40 85]
[41 84]
[42 83]
[43 82]
[44 81]
[51 78]
[52 77]
[53 76]
[54 75]
[57 72]
[58 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
