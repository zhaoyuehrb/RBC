%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:19:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGAAGGGGCCACUUCACACCUCGGGCUCGGCAUAAAGCGGCCGCCGGCCGCCGGCCCCCAGACGCGCCGCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-13.02650070 221.25105286]
[-23.73802567 231.75167847]
[-34.23865509 242.46321106]
[-44.52424240 253.38139343]
[-54.80982971 264.29956055]
[-65.09541321 275.21774292]
[-64.37365723 291.00555420]
[-75.08852386 302.62310791]
[-90.88307190 303.17788696]
[-102.38667297 292.34078979]
[-102.77445984 276.54125977]
[-91.81634521 265.15289307]
[-76.01359558 264.93215942]
[-65.72801208 254.01399231]
[-55.44242477 243.09580994]
[-45.15683746 232.17762756]
[-42.79983902 224.95500183]
[-34.23865509 221.04016113]
[-23.52713203 210.53953552]
[-25.23655319 202.23683167]
[-23.33976364 193.87641907]
[-18.09864998 186.97123718]
[-10.38744259 182.80438232]
[-1.54763544 182.19096375]
[6.84522772 185.31983948]
[19.08480263 176.64846802]
[31.32437515 167.97708130]
[37.62148285 151.72270203]
[55.81129074 149.84182739]
[67.69644165 140.69070435]
[79.58159637 131.53956604]
[91.46675110 122.38844299]
[82.76058197 115.60884857]
[78.23480225 105.90552521]
[78.61304474 95.53313446]
[83.51527405 86.75784302]
[91.60530090 81.36223602]
[100.94016266 80.28502655]
[107.29445648 66.69741821]
[113.64874268 53.10981369]
[120.00302887 39.52220917]
[126.35731506 25.93460274]
[132.71160889 12.34699726]
[133.94433594 -4.56207371]
[150.53385925 -8.05840492]
[158.48599243 6.91490412]
[146.29920959 18.70128441]
[139.94491577 32.28889084]
[133.59063721 45.87649536]
[127.23634338 59.46410370]
[120.88205719 73.05171204]
[114.52777100 86.63931274]
[121.84790802 99.84564972]
[117.86288452 115.96796417]
[132.62335205 118.63793182]
[147.38381958 121.30790710]
[157.24684143 109.53436279]
[171.68072510 104.28475952]
[186.80285645 106.97122192]
[198.54542542 116.87110138]
[203.74975586 131.32138062]
[201.01589966 146.43501282]
[191.07925415 158.14648438]
[176.61274719 163.30549622]
[161.50776672 160.52429199]
[149.82748413 150.55097961]
[144.71385193 136.06835938]
[129.95338440 133.39839172]
[115.19291687 130.72842407]
[100.61788177 134.27359009]
[88.73272705 143.42472839]
[76.84757233 152.57585144]
[64.96241760 161.72697449]
[62.45912552 174.56030273]
[52.14342117 181.91778564]
[39.99575424 180.21665955]
[27.75618172 188.88803101]
[15.51660824 197.55941772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[3 16]
[4 15]
[5 14]
[6 13]
[25 78]
[26 77]
[27 76]
[29 73]
[30 72]
[31 71]
[32 70]
[38 52]
[39 51]
[40 50]
[41 49]
[42 48]
[43 47]
[54 69]
[55 68]
[56 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
