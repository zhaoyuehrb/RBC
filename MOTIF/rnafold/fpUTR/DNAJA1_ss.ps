%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGGGCGGGACUUCCGGCGGGUGACGCGCCCGGGUUCGGCUACAAAAGAGGACGGCUGCGGCGCGCCGGGCGGAACUUUCCAGAACGCUCGGUGAGAGGCGGAGGAGCGGUAACUACCCCGGCUGCGCACAGCUCGGCGCUCCUUCCCGCUCCCUCACACACCGGCCUCAGCCCGCACCGGCAGUAGAAG\
) } def
/len { sequence length } bind def

/coor [
[100.63291168 417.67782593]
[105.58728027 403.33142090]
[115.39258575 391.74606323]
[128.72274780 384.48858643]
[126.76485443 369.61691284]
[124.68535614 354.76174927]
[122.48440552 339.92410278]
[120.28344727 325.08645630]
[118.08248901 310.24880981]
[115.88153076 295.41116333]
[111.78358459 289.24609375]
[113.76801300 280.31292725]
[111.81011963 265.44125366]
[100.58359528 259.09811401]
[94.98122406 247.26838684]
[97.25357819 234.18020630]
[106.79105377 224.65597534]
[105.07674408 209.75425720]
[103.36244202 194.85253906]
[94.22127533 183.09294128]
[100.33070374 168.49891663]
[98.61639404 153.59719849]
[96.90209198 138.69548035]
[95.18778992 123.79376221]
[84.44676971 118.63861084]
[77.45206451 108.99396515]
[62.48418045 109.97500610]
[47.51630020 110.95605469]
[32.54841614 111.93710327]
[17.58053017 112.91815186]
[2.61264682 113.89920044]
[-12.34671021 115.00266266]
[-27.29653931 116.22848511]
[-42.24636841 117.45429993]
[-57.17413712 118.92455292]
[-72.07585144 120.63886261]
[-86.97756958 122.35316467]
[-101.87928772 124.06746674]
[-110.50282288 133.67314148]
[-122.96083832 134.78636169]
[-132.51707458 127.35340118]
[-147.44485474 128.82365417]
[-158.69297791 140.26301575]
[-174.63417053 138.45796204]
[-183.03968811 124.79315186]
[-177.46154785 109.75108337]
[-162.17881775 104.87073517]
[-148.91510010 113.89588928]
[-133.98733521 112.42562866]
[-120.30432892 101.44829559]
[-103.59358978 109.16574860]
[-88.69187927 107.45144653]
[-73.79016113 105.73714447]
[-58.88844299 104.02283478]
[-55.26203537 100.89263153]
[-49.62623215 100.01775360]
[-43.47218323 102.50447083]
[-28.52235413 101.27865601]
[-13.57252598 100.05283356]
[-7.15263414 96.36687469]
[1.63159990 98.93131256]
[16.59948349 97.95026398]
[31.56736755 96.96921539]
[46.53525162 95.98817444]
[61.50313568 95.00712585]
[76.47101593 94.02607727]
[79.04495239 82.37343597]
[87.54634857 72.16954041]
[80.04634857 59.17915726]
[72.54634857 46.18877792]
[65.04634857 33.19839478]
[57.54634857 20.20801544]
[50.04634857 7.21763420]
[34.90532684 8.85145187]
[20.41077232 4.17943096]
[9.07395458 -5.98897314]
[2.85904479 -19.89202309]
[2.84281421 -35.12092972]
[9.02807426 -49.03719711]
[20.34319305 -59.22974014]
[34.82775497 -63.93264771]
[49.97222519 -62.33110809]
[63.15272903 -54.70259857]
[72.08567047 -42.36880493]
[75.22335815 -27.46662903]
[72.02217102 -12.57796574]
[63.03673172 -0.28236565]
[70.53672791 12.70801544]
[78.03672791 25.69839668]
[85.53672791 38.68877792]
[93.03672791 51.67915726]
[100.53672791 64.66954041]
[115.14488220 68.07568359]
[127.61692810 59.74213028]
[140.08897400 51.40857697]
[152.56101990 43.07502365]
[165.03306580 34.74147034]
[172.78259277 18.04558563]
[190.31811523 17.56379890]
[202.65214539 9.02729607]
[214.98616028 0.49079412]
[227.32019043 -8.04570770]
[239.65420532 -16.58221054]
[251.84690857 -25.31937599]
[263.89501953 -34.25486374]
[275.94314575 -43.19035339]
[287.99124146 -52.12584305]
[300.03936768 -61.06133270]
[312.08746338 -69.99682617]
[324.13558960 -78.93231201]
[309.14865112 -79.55851746]
[296.81253052 -88.09197998]
[290.94052124 -101.89485931]
[293.34777832 -116.70043945]
[303.29016113 -127.93204498]
[317.69433594 -132.11778259]
[332.10766602 -127.96376801]
[342.07473755 -116.75408173]
[344.51458740 -101.95384216]
[338.67294312 -88.13798523]
[351.90173340 -95.20893097]
[365.13055420 -102.27988434]
[378.30108643 -109.45882416]
[391.41244507 -116.74527740]
[404.52380371 -124.03173065]
[417.63516235 -131.31817627]
[425.59732056 -145.65470886]
[441.99645996 -145.65696716]
[449.96255493 -131.32263184]
[441.30078125 -117.39763641]
[424.92160034 -118.20682526]
[411.81024170 -110.92037201]
[398.69891357 -103.63391876]
[385.58755493 -96.34747314]
[381.26110840 -90.34053040]
[372.20150757 -89.05106354]
[358.97268677 -81.98011780]
[345.74386597 -74.90916443]
[333.07107544 -66.88420105]
[321.02294922 -57.94871140]
[308.97485352 -49.01322174]
[296.92672729 -40.07773209]
[284.87863159 -31.14224243]
[272.83050537 -22.20675278]
[260.78240967 -13.27126312]
[259.20693970 -8.74722195]
[254.76362610 -5.17165327]
[248.19070435 -4.24818707]
[235.85668945 4.28831530]
[223.52265930 12.82481766]
[211.18864441 21.36132050]
[198.85461426 29.89782143]
[196.37652588 41.74812698]
[186.15675354 48.95905685]
[173.36660767 47.21351242]
[160.89457703 55.54706573]
[148.42253113 63.88061905]
[135.95048523 72.21417236]
[123.47843933 80.54772949]
[126.69160461 106.11295319]
[110.08950043 122.07946014]
[111.80381012 136.98117065]
[113.51811218 151.88288879]
[115.23241425 166.78460693]
[124.49620056 179.61009216]
[118.26416016 193.13824463]
[119.97846222 208.03996277]
[121.69276428 222.94168091]
[135.58859253 233.55563354]
[137.47959900 250.59918213]
[126.68179321 263.48336792]
[128.63967896 278.35504150]
[130.71917725 293.21020508]
[132.92013550 308.04785156]
[135.12109375 322.88549805]
[137.32205200 337.72314453]
[139.52301025 352.56079102]
[143.88409424 360.60565186]
[141.63652039 367.65899658]
[143.59442139 382.53067017]
[158.34873962 386.09078979]
[170.81845093 394.74359131]
[179.31712341 407.31884766]
[182.69537354 422.11584473]
[180.49632263 437.13348389]
[173.01739502 450.34066772]
[161.27001953 459.95126343]
[146.84295654 464.66552734]
[131.68734741 463.84591675]
[117.85285187 457.60321045]
[107.21047974 446.78173828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 180]
[5 179]
[6 177]
[7 176]
[8 175]
[9 174]
[10 173]
[12 172]
[13 171]
[17 168]
[18 167]
[19 166]
[21 164]
[22 163]
[23 162]
[24 161]
[26 66]
[27 65]
[28 64]
[29 63]
[30 62]
[31 61]
[32 59]
[33 58]
[34 57]
[35 54]
[36 53]
[37 52]
[38 51]
[41 49]
[42 48]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[73 87]
[93 159]
[94 158]
[95 157]
[96 156]
[97 155]
[99 152]
[100 151]
[101 150]
[102 149]
[103 148]
[104 145]
[105 144]
[106 143]
[107 142]
[108 141]
[109 140]
[110 139]
[120 138]
[121 137]
[122 136]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
