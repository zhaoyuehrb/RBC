%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGAGUCGGGCGGGGCGCCGGGCAGGUUCCUCUGCGUUCCGCGGCGGCGGCAGCGGCGGCGACGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[111.39379120 154.67050171]
[108.63900757 146.95982361]
[108.92917633 138.70700073]
[112.27484894 131.08078003]
[103.77432251 118.72193146]
[89.54594421 115.98339844]
[81.33470917 104.04515076]
[83.86682892 89.77859497]
[75.36630249 77.41974640]
[66.86577606 65.06090546]
[58.36525345 52.70206070]
[41.64152908 45.34667587]
[40.60113144 27.96196938]
[31.57677078 15.98027897]
[22.55241013 3.99858832]
[13.52804947 -7.98310232]
[4.50368834 -19.96479225]
[-4.52067280 -31.94648361]
[-13.54503345 -43.92817307]
[-22.56939507 -55.90986633]
[-31.59375572 -67.89155579]
[-46.07666779 -74.25990295]
[-47.55330276 -89.08113098]
[-56.57766342 -101.06282043]
[-65.60202789 -113.04450989]
[-81.22644806 -113.68592072]
[-92.74827576 -124.25859833]
[-94.72724915 -139.77044678]
[-86.22896576 -152.89726257]
[-71.26604462 -157.44094849]
[-56.90352631 -151.25611877]
[-49.92295456 -137.26306152]
[-53.62033463 -122.06887054]
[-44.59597397 -110.08718109]
[-35.57161331 -98.10549164]
[-21.73418427 -92.59415436]
[-19.61206436 -76.91591644]
[-10.58770370 -64.93422699]
[-1.56334305 -52.95253372]
[7.46101809 -40.97084427]
[16.48537827 -28.98915482]
[25.50973892 -17.00746346]
[34.53409958 -5.02577257]
[43.55846024 6.95591784]
[52.58282089 18.93760872]
[64.69351959 21.01976967]
[72.28070068 31.19601059]
[70.72409821 44.20153427]
[79.22462463 56.56037903]
[87.72515106 68.91921997]
[96.22567749 81.27806854]
[110.45405579 84.01660156]
[118.66529083 95.95484924]
[116.13317108 110.22140503]
[124.63369751 122.58025360]
[146.53932190 129.82647705]
[149.71789551 151.98764038]
[160.66125488 162.24642944]
[176.02096558 166.03982544]
[180.01455688 180.38906860]
[190.95791626 190.64785767]
[207.04141235 193.84994507]
[212.05311584 209.46452332]
[200.83741760 221.42863464]
[184.93206787 217.43464661]
[180.69912720 201.59121704]
[169.75576782 191.33242798]
[155.17880249 188.27279663]
[150.40246582 173.18978882]
[139.45910645 162.93099976]
[131.87084961 165.15821838]
[123.92690277 164.41888428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 55]
[5 54]
[8 51]
[9 50]
[10 49]
[11 48]
[13 45]
[14 44]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[23 35]
[24 34]
[25 33]
[57 70]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
