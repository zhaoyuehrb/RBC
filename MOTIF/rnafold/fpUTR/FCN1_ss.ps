%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGUGCAACUAAGCAGCCCAUAGGAAGUGGGUGUCCCCCAGGGAGUUGAGAAACUGUGGCACAAGGCGAGAGCUGGUUUCCUCUGCCCUGUUAGAGCUGGGGGACUCUUCAGAGUCAAAGGCCAGAGAGC\
) } def
/len { sequence length } bind def

/coor [
[105.35080719 194.92680359]
[116.45627594 183.91760254]
[115.04112244 168.98451233]
[113.62596893 154.05140686]
[112.21081543 139.11831665]
[110.79566193 124.18521881]
[96.17174530 120.84740448]
[88.41751099 133.68765259]
[92.44953918 148.96894836]
[84.42301941 162.58329773]
[69.09993744 166.45355225]
[55.57121277 158.28353882]
[51.86319351 142.92039490]
[60.17578125 129.47880554]
[75.57727051 125.93341827]
[83.33150482 113.09317017]
[78.58640289 107.28507233]
[64.35110474 89.86077118]
[50.22235870 94.89847565]
[36.09361267 99.93618774]
[21.96486282 104.97389221]
[7.83611584 110.01159668]
[-6.29263163 115.04930878]
[-14.43944263 128.86990356]
[-30.34382248 130.97471619]
[-41.80529404 119.74911499]
[-40.03159332 103.80441284]
[-26.38335609 95.37202454]
[-11.33033848 100.92055511]
[2.79840899 95.88285065]
[16.92715645 90.84514618]
[31.05590439 85.80743408]
[45.18465042 80.76972961]
[59.31340027 75.73202515]
[69.20913696 64.45929718]
[72.37400055 49.79697418]
[75.53887177 35.13465500]
[78.70374298 20.47233582]
[81.86861420 5.81001711]
[85.03348541 -8.85230160]
[88.19834900 -23.51462173]
[91.36322021 -38.17694092]
[94.52809143 -52.83926010]
[83.18347168 -43.02602005]
[68.74073792 -38.97541428]
[53.94761658 -41.45806885]
[41.61850357 -50.00165558]
[34.09900665 -62.98076248]
[32.81971741 -77.92610931]
[38.02401733 -91.99434662]
[48.72178650 -102.50898743]
[62.87778091 -107.46962738]
[77.79881287 -105.93249512]
[90.64616394 -98.19003296]
[98.97561646 -85.71525574]
[101.20252228 -70.88186646]
[108.34173584 -84.07397461]
[108.10514069 -99.89340973]
[120.96739960 -107.40416718]
[128.10661316 -120.59626770]
[135.24581909 -133.78837585]
[142.38504028 -146.98048401]
[149.52424622 -160.17259216]
[145.79180908 -170.51686096]
[148.36909485 -180.98039246]
[156.15348816 -188.10931396]
[166.36648560 -189.69076538]
[174.12071228 -202.53100586]
[181.87495422 -215.37126160]
[183.66114807 -224.42903137]
[189.96702576 -228.42013550]
[198.02236938 -241.07363892]
[206.07771301 -253.72715759]
[214.13305664 -266.38067627]
[208.31622314 -280.76623535]
[212.09858704 -295.81524658]
[224.02574158 -305.74111938]
[239.51145935 -306.72708130]
[252.60116577 -298.39407349]
[258.26159668 -283.94625854]
[254.31620789 -268.93914795]
[242.28207397 -259.14324951]
[226.78656006 -258.32534790]
[218.73121643 -245.67181396]
[210.67587280 -233.01829529]
[202.62052917 -220.36479187]
[194.71519470 -207.61701965]
[186.96095276 -194.77677917]
[179.20672607 -181.93653870]
[180.33952332 -162.68968201]
[162.71635437 -153.03337097]
[155.57713318 -139.84127808]
[148.43792725 -126.64916229]
[141.29872131 -113.45706177]
[134.15951538 -100.26495361]
[134.90675354 -85.38910675]
[121.53383636 -76.93476105]
[114.39463043 -63.74265671]
[109.19040680 -49.67438889]
[106.02554321 -35.01206970]
[102.86067200 -20.34975052]
[99.69580078 -5.68743229]
[96.53092957 8.97488689]
[93.36606598 23.63720512]
[90.20119476 38.29952621]
[87.03632355 52.96184540]
[83.87145233 67.62416077]
[124.40440369 64.74511719]
[149.32470703 105.06679535]
[160.36056519 115.22602081]
[171.39642334 125.38524628]
[186.58193970 122.19465637]
[200.72886658 128.56994629]
[208.39739990 142.05969238]
[206.63887024 157.47679138]
[196.12944031 168.89308167]
[180.91020203 171.91874695]
[166.83328247 165.39036560]
[159.31152344 151.81822205]
[161.23719788 136.42111206]
[150.20133972 126.26187897]
[139.16548157 116.10266113]
[125.72875977 122.77007294]
[127.14391327 137.70317078]
[128.55906677 152.63626099]
[129.97421265 167.56935120]
[131.38937378 182.50245667]
[144.36517334 191.22956848]
[148.64584351 206.26983643]
[142.21015930 220.52172852]
[128.09687805 227.25590515]
[112.96984863 223.29270935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 127]
[3 126]
[4 125]
[5 124]
[6 123]
[7 16]
[8 15]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[35 107]
[36 106]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[43 99]
[56 98]
[57 97]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[67 89]
[68 88]
[69 87]
[71 86]
[72 85]
[73 84]
[74 83]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
