%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUGCUAUAGAAGACCUGGGACAGAGGACUGCUGUCUGCCCUCUCUGGUCACCCUGCCUAGCUAGAGGAUCUGUGACCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.85188293 221.20831299]
[83.46793365 234.91001892]
[73.32773590 246.12017822]
[60.33292770 253.84197998]
[45.63900757 257.38882446]
[30.55254936 256.44534302]
[16.41502762 251.09539795]
[4.48354578 241.81471252]
[-4.18096066 229.42851257]
[-8.80804825 215.03819275]
[-8.98628044 199.92330933]
[-4.69980812 185.42787170]
[3.67021799 172.84082031]
[15.37954140 163.28135681]
[29.38697624 157.59953308]
[44.44699097 156.30055237]
[59.22046280 159.49993896]
[66.56172943 146.41918945]
[73.90299988 133.33845520]
[81.24426270 120.25771332]
[88.58553314 107.17697144]
[85.78524017 100.23617554]
[87.08635712 92.46707153]
[79.27225494 79.66316986]
[71.45814514 66.85927582]
[63.64404297 54.05538177]
[55.82993698 41.25148392]
[48.01583481 28.44758797]
[34.51049805 26.76268959]
[24.63735771 17.68214989]
[21.91176605 4.74826765]
[27.12408066 -7.18496037]
[19.78281212 -20.26570129]
[4.78931046 -25.97310448]
[0.04068253 -41.29727173]
[9.17966938 -54.48281097]
[25.19562149 -55.41490936]
[35.80247498 -43.37853622]
[32.86355209 -27.60696983]
[40.20482254 -14.52622795]
[56.48609543 -10.76474476]
[65.27996826 3.83628011]
[60.81972885 20.63348198]
[68.63383484 33.43737793]
[76.44793701 46.24127579]
[84.26204681 59.04516983]
[92.07614899 71.84906769]
[99.89025116 84.65296173]
[113.23038483 91.51159668]
[128.19036865 90.41667175]
[143.15036011 89.32173920]
[158.11033630 88.22680664]
[173.07032776 87.13188171]
[179.82296753 73.40784454]
[192.45498657 64.96219635]
[207.51821899 63.97986221]
[220.96075439 70.62474823]
[229.21675110 83.02249146]
[244.17672729 81.92755890]
[259.13671875 80.83263397]
[269.27548218 68.70906830]
[285.02453613 67.38884735]
[297.04022217 77.65523529]
[298.19387817 93.41735840]
[287.80102539 105.32383728]
[272.02758789 106.31076813]
[260.23165894 95.79261780]
[245.27166748 96.88754272]
[230.31167603 97.98247528]
[223.94879150 111.45018768]
[211.61701965 119.98150635]
[196.57125854 121.20286560]
[182.84417725 114.68645477]
[174.16525269 102.09186554]
[159.20527649 103.18679047]
[144.24528503 104.28172302]
[129.28529358 105.37665558]
[114.32531738 106.47158051]
[101.66627502 114.51823425]
[94.32500458 127.59897614]
[86.98374176 140.67971802]
[79.64247131 153.76045227]
[72.30120087 166.84120178]
[82.72826385 177.78504944]
[89.46483612 191.31686401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 83]
[18 82]
[19 81]
[20 80]
[21 79]
[23 48]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[32 40]
[33 39]
[49 78]
[50 77]
[51 76]
[52 75]
[53 74]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
