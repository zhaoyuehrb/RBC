%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGUGUAGCUGCGAGAACCUUUGCACGCGCACAAACUACGGGGACGAUUUCUGAUUGAUUUUUGGCGCUUUCGAUCCACCCUCCUCCCUUCUC\
) } def
/len { sequence length } bind def

/coor [
[101.81613922 147.36900330]
[88.24427032 145.92301941]
[75.64695740 140.67001343]
[65.06850433 132.04545593]
[57.38588333 120.76432800]
[43.03177643 125.11859894]
[28.67767334 129.47286987]
[14.32356739 133.82714844]
[6.84740400 139.41636658]
[-0.57184374 138.08074951]
[-15.06073093 141.96304321]
[-29.48415756 146.08186340]
[-43.83826447 150.43614197]
[-58.19236755 154.79040527]
[-72.54647064 159.14468384]
[-86.90058136 163.49894714]
[-101.25468445 167.85322571]
[-112.06399536 180.18572998]
[-128.09400940 176.72589111]
[-132.85443115 161.03288269]
[-121.44814301 149.25033569]
[-105.60895538 153.49911499]
[-91.25484467 149.14483643]
[-76.90074158 144.79057312]
[-62.54663849 140.43630981]
[-48.19253159 136.08203125]
[-33.83842850 131.72776794]
[-28.24328423 126.67568970]
[-18.94301605 127.47415161]
[-4.45412922 123.59186554]
[9.96929741 119.47303772]
[24.32340240 115.11876678]
[38.67750931 110.76449585]
[53.03161240 106.41022491]
[53.62928772 90.15735626]
[59.68535233 75.06308746]
[70.48693085 62.90419006]
[84.76255035 55.11191177]
[100.83179474 52.60349655]
[116.80313110 55.67421722]
[130.79653931 63.96260834]
[141.16482544 76.49303436]
[155.20341492 71.20928192]
[169.24200439 65.92552948]
[183.28059387 60.64177704]
[197.31918335 55.35802841]
[207.50938416 43.25553131]
[222.14637756 46.01373291]
[236.18496704 40.72998428]
[237.61666870 25.57374382]
[245.45495605 12.59499168]
[258.09933472 4.34029341]
[273.01257324 2.40207076]
[287.22976685 7.11164379]
[297.94793701 17.48404884]
[311.98651123 12.20029831]
[326.02511597 6.91654778]
[340.06369019 1.63279688]
[354.10229492 -3.65095401]
[368.14086914 -8.93470478]
[369.44351196 -24.14213371]
[377.22277832 -37.27398682]
[389.93414307 -45.72292328]
[405.05368042 -47.81140137]
[419.57946777 -43.12475586]
[430.62734985 -32.59351730]
[436.00378418 -18.30867577]
[434.64126587 -3.10649419]
[426.81033325 9.99462223]
[414.06582642 18.39343643]
[398.93817139 20.42235947]
[384.43093872 15.67854595]
[373.42462158 5.10388422]
[359.38604736 10.38763523]
[345.34744263 15.67138577]
[331.30886841 20.95513725]
[317.27026367 26.23888779]
[303.23168945 31.52263832]
[302.01235962 46.38798904]
[294.42852783 59.30289841]
[281.93820190 67.67864227]
[266.98895264 69.80944061]
[252.53833008 65.21965027]
[241.46871948 54.76857376]
[227.43013000 60.05232239]
[218.24406433 71.77689362]
[202.60293579 69.39661407]
[188.56434631 74.68036652]
[174.52575684 79.96411896]
[160.48716736 85.24787140]
[146.44857788 90.53161621]
[147.22105408 104.15842438]
[144.07890320 117.44049072]
[137.28260803 129.27674866]
[127.39557648 138.68594360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 34]
[6 33]
[7 32]
[8 31]
[10 30]
[11 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[48 85]
[49 84]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
