%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUUGCUUCCGCGUUCCGGUUGCGGAUGGUGAGUGUGUCGGGGGGCUUGGCGGCUUUUCUCCUCAGUUUUCUGGAGUGCUUUGGAGGAGAGACAAGGUCUUGCUAUGUUGCCCAGGCUGGUCUUGAACUCCUGGCCUCAAGCGAUCCUCCCAACUUGGCCUCGCAAAGUGCUGGGACUACAGGACU\
) } def
/len { sequence length } bind def

/coor [
[80.05632782 118.52877045]
[72.23479462 131.32814026]
[64.41326904 144.12750244]
[56.59173965 156.92686462]
[48.77021408 169.72622681]
[40.94868469 182.52558899]
[33.23380280 195.38951111]
[25.62609863 208.31710815]
[29.36895943 223.43759155]
[21.46950722 236.43963623]
[7.03137922 239.91470337]
[-0.57632458 252.84230042]
[-8.18402863 265.76989746]
[-5.56882811 281.59835815]
[-16.42003441 293.41491699]
[-32.41353226 292.15490723]
[-41.28047562 278.78491211]
[-36.21890640 263.56124878]
[-21.11162758 258.16220093]
[-13.50392437 245.23460388]
[-5.89622068 232.30699158]
[-9.86849880 217.99768066]
[-2.33736396 204.77888489]
[12.69849873 200.70941162]
[20.30620193 187.78181458]
[20.99033737 180.40855408]
[28.14932251 174.70405579]
[35.97085190 161.90469360]
[43.79237747 149.10533142]
[51.61390686 136.30596924]
[59.43543243 123.50660706]
[67.25696564 110.70724487]
[55.02746582 119.39282990]
[40.13075638 117.63552094]
[30.25804520 106.34262085]
[30.50662994 91.34468079]
[40.74816513 80.38516998]
[55.69492722 79.12250519]
[67.63094330 88.21035004]
[60.23916626 75.15808868]
[52.84738922 62.10582352]
[45.34738922 49.11544037]
[37.73968506 36.18783951]
[30.13198090 23.26024055]
[16.46449089 15.29090691]
[16.67778397 0.39782858]
[9.07007980 -12.52977180]
[1.46237612 -25.45737076]
[-12.20511341 -33.42670441]
[-11.99182034 -48.31978226]
[-19.59952354 -61.24738312]
[-27.20722771 -74.17498016]
[-34.81493378 -87.10258484]
[-42.63645935 -99.90194702]
[-50.66965103 -112.56953430]
[-58.70284271 -125.23712921]
[-66.73603058 -137.90472412]
[-75.08254242 -150.36810303]
[-83.73717499 -162.61952209]
[-92.39180756 -174.87094116]
[-101.04644012 -187.12236023]
[-109.70107269 -199.37377930]
[-118.35570526 -211.62521362]
[-127.01033783 -223.87663269]
[-135.66496277 -236.12805176]
[-144.31959534 -248.37947083]
[-153.27697754 -260.41131592]
[-162.53153992 -272.21612549]
[-171.78608704 -284.02090454]
[-186.98043823 -281.77868652]
[-201.25431824 -287.44894409]
[-210.76814270 -299.50640869]
[-212.96273804 -314.70770264]
[-207.24775696 -328.96374512]
[-195.16052246 -338.43972778]
[-179.95242310 -340.58666992]
[-165.71437073 -334.82702637]
[-156.27632141 -322.71014404]
[-154.17706299 -307.49539185]
[-159.98129272 -293.27545166]
[-150.72674561 -281.47067261]
[-141.47218323 -269.66586304]
[-138.01542664 -268.88525391]
[-134.76902771 -266.38031006]
[-132.54444885 -262.27017212]
[-132.06817627 -257.03411865]
[-123.41354370 -244.78268433]
[-114.75891113 -232.53126526]
[-106.10427856 -220.27984619]
[-97.44964600 -208.02841187]
[-88.79501343 -195.77699280]
[-80.14038086 -183.52557373]
[-71.48574829 -171.27415466]
[-62.83111954 -159.02273560]
[-59.41756058 -158.07078552]
[-56.30007172 -155.40713501]
[-54.28312683 -151.19120789]
[-54.06844330 -145.93791199]
[-46.03525162 -133.27032471]
[-38.00205994 -120.60272980]
[-29.96887016 -107.93513489]
[-25.56909561 -106.03362274]
[-22.32591057 -101.33785248]
[-21.88733292 -94.71028900]
[-14.27962780 -81.78268433]
[-6.67192411 -68.85508728]
[0.93577981 -55.92748642]
[14.05911541 -48.88282013]
[14.38997555 -33.06507492]
[21.99768066 -20.13747597]
[29.60538483 -7.20987558]
[42.72872162 -0.16520944]
[43.05958176 15.65253735]
[50.66728592 28.58013725]
[58.27498627 41.50773621]
[64.38864136 45.68580246]
[65.89965057 54.71404266]
[73.29142761 67.76631165]
[80.68321228 80.81857300]
[109.27160645 78.48498535]
[119.62296295 100.62607574]
[133.29554749 106.79537964]
[146.96813965 112.96469116]
[160.64071655 119.13399506]
[174.31330872 125.30329895]
[187.98590088 131.47261047]
[201.65849304 137.64190674]
[215.10231018 130.12062073]
[230.22038269 131.93641663]
[241.24003601 142.18490601]
[244.07795715 156.78230286]
[257.75054932 162.95161438]
[271.42312622 169.12092590]
[285.09570312 175.29022217]
[298.76831055 181.45953369]
[312.44088745 187.62884521]
[326.11346436 193.79814148]
[339.83685303 199.85360718]
[353.61010742 205.79479980]
[365.48287964 199.41064453]
[378.67156982 201.01287842]
[388.38140869 209.79304504]
[391.21289062 222.37460327]
[404.88546753 228.54391479]
[418.55807495 234.71321106]
[432.23065186 240.88252258]
[450.49615479 238.61737061]
[460.19006348 253.23628235]
[473.96328735 259.17749023]
[486.70458984 250.47901917]
[502.12658691 250.07272339]
[515.30822754 258.08822632]
[522.04327393 271.96780396]
[520.18255615 287.28253174]
[510.31991577 299.14556885]
[495.60241699 303.77142334]
[480.72634888 299.68402100]
[470.43865967 288.18765259]
[468.02209473 272.95071411]
[454.24887085 267.00952148]
[442.88269043 271.18371582]
[431.35253906 266.33157349]
[426.06134033 254.55511475]
[412.38876343 248.38580322]
[398.71618652 242.21649170]
[385.04357910 236.04719543]
[369.59155273 242.66433716]
[353.82064819 235.93444824]
[347.66891479 219.56803894]
[333.89566040 213.62684631]
[326.49456787 213.86483765]
[319.94418335 207.47073364]
[306.27157593 201.30142212]
[292.59899902 195.13212585]
[278.92642212 188.96281433]
[265.25381470 182.79350281]
[251.58123779 176.62420654]
[237.90864563 170.45489502]
[225.08596802 177.98596191]
[210.11030579 176.50491333]
[198.74543762 166.37115479]
[195.48918152 151.31449890]
[181.81658936 145.14518738]
[168.14399719 138.97589111]
[154.47142029 132.80657959]
[140.79882812 126.63727570]
[127.12624359 120.46797180]
[113.45365143 114.29866028]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 27]
[7 25]
[8 24]
[11 21]
[12 20]
[13 19]
[39 119]
[40 118]
[41 117]
[42 115]
[43 114]
[44 113]
[46 111]
[47 110]
[48 109]
[50 107]
[51 106]
[52 105]
[53 104]
[54 101]
[55 100]
[56 99]
[57 98]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 82]
[68 81]
[69 80]
[121 188]
[122 187]
[123 186]
[124 185]
[125 184]
[126 183]
[127 182]
[131 178]
[132 177]
[133 176]
[134 175]
[135 174]
[136 173]
[137 172]
[138 170]
[139 169]
[143 166]
[144 165]
[145 164]
[146 163]
[148 160]
[149 159]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
