%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUCCCCUGCAGCAAGGGGCGGGGCCACCCCAACGCCGCUUCUGCGGCCAAAGUAGGUUGGGAGUGGAAGGUGGUGGCUGCUGCUCCGCAGUGUCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[75.20868683 409.35565186]
[61.23631668 401.47198486]
[58.83074951 385.61032104]
[69.83733368 373.93835449]
[70.74301147 358.96572876]
[71.64868927 343.99310303]
[72.55436707 329.02044678]
[73.46004486 314.04782104]
[65.63135529 304.68939209]
[66.36942291 292.10675049]
[75.82380676 283.17337036]
[77.18128967 268.23492432]
[78.53878021 253.29647827]
[66.28793335 244.82402039]
[59.88014603 231.26687622]
[61.12686157 216.22320557]
[69.79305267 203.74145508]
[83.63355255 197.23088074]
[84.99103546 182.29243469]
[86.34852600 167.35397339]
[87.70600891 152.41552734]
[89.06349182 137.47708130]
[90.42097473 122.53863525]
[91.77845764 107.60018921]
[92.91016388 92.64294434]
[93.81584167 77.67031097]
[94.72151947 62.69767380]
[95.62719727 47.72504044]
[96.53287506 32.75240707]
[97.43855286 17.77977371]
[98.34423065 2.80714083]
[99.02366638 -12.17746353]
[99.47671509 -27.17061996]
[89.64886475 -34.20768738]
[84.56259155 -45.03946686]
[85.40737915 -56.85488129]
[91.85009003 -66.65072632]
[102.14981842 -71.99500275]
[103.50730133 -86.93344879]
[104.86478424 -101.87189484]
[106.22226715 -116.81034851]
[107.57975006 -131.74879456]
[108.93723297 -146.68724060]
[110.29471588 -161.62568665]
[107.77088165 -168.03088379]
[108.82803345 -173.83116150]
[112.21198273 -177.41580200]
[114.46894836 -192.24504089]
[116.72591400 -207.07426453]
[118.98288727 -221.90350342]
[121.23985291 -236.73272705]
[111.67255402 -249.31217957]
[113.88521576 -264.96081543]
[126.56510162 -274.39456177]
[142.18946838 -272.01660156]
[151.48864746 -259.23767090]
[148.94560242 -243.63931274]
[136.06907654 -234.47576904]
[133.81211853 -219.64653015]
[131.55514526 -204.81730652]
[129.29818726 -189.98806763]
[127.04121399 -175.15884399]
[125.23316193 -160.26820374]
[123.87567902 -145.32975769]
[122.51819611 -130.39131165]
[121.16071320 -115.45286560]
[119.80323029 -100.51441193]
[118.44574738 -85.57596588]
[117.08826447 -70.63751984]
[129.63053894 -57.47299194]
[128.72114563 -38.99781418]
[114.46987152 -26.71757507]
[114.01682281 -11.72441769]
[117.01078796 -4.82882595]
[113.31686401 3.71281815]
[112.41118622 18.68545151]
[111.50550842 33.65808487]
[110.59983063 48.63071823]
[109.69415283 63.60335159]
[108.78847504 78.57598114]
[107.88279724 93.54861450]
[110.61338043 101.28795624]
[106.71690369 108.95767212]
[105.35942078 123.89611816]
[104.00193787 138.83456421]
[102.64445496 153.77301025]
[101.28697205 168.71147156]
[99.92948914 183.64991760]
[98.57200623 198.58836365]
[111.01223755 207.48712158]
[117.28657532 221.32653809]
[115.80117035 236.34852600]
[107.05460358 248.52856445]
[93.47722626 254.65396118]
[92.11974335 269.59240723]
[90.76226044 284.53085327]
[98.90380859 300.96044922]
[88.43267822 314.95349121]
[87.52700043 329.92614746]
[86.62132263 344.89877319]
[85.71564484 359.87139893]
[84.80996704 374.84402466]
[94.32940674 387.75759888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[11 96]
[12 95]
[13 94]
[18 89]
[19 88]
[20 87]
[21 86]
[22 85]
[23 84]
[24 83]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 73]
[33 72]
[38 69]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
