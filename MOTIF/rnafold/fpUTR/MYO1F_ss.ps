%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAACUAAAGCCGGGAGUCCGGUGAACGGGCAGAAGCAGGGCCAUGCCCAAGCCACCCCCAAGAUCCCCCUGAACCUGCACCUCCAUCACGACCCAUUCAGGAGCCUCCAGGAGCCCAGACACCAGCCCCCCACC\
) } def
/len { sequence length } bind def

/coor [
[65.99387360 391.60873413]
[50.99389648 391.58401489]
[38.77138138 382.88858032]
[33.82940674 368.72677612]
[27.58416748 382.36483765]
[35.31758118 395.81750488]
[33.63329697 411.24288940]
[23.17896080 422.70965576]
[7.97447634 425.80856323]
[-6.13372183 419.34802246]
[-13.72074413 405.81228638]
[-11.86922455 390.40606689]
[-1.29111087 379.05337524]
[13.94609642 376.11959839]
[20.19133568 362.48153687]
[25.17979240 348.33532715]
[28.87072372 333.79650879]
[32.56165314 319.25769043]
[28.19394112 305.01788330]
[39.08905029 293.54586792]
[42.77997971 279.00704956]
[36.85284424 268.40164185]
[39.87067413 256.21862793]
[50.73663330 249.16764832]
[54.75519180 234.71595764]
[58.77374649 220.26426697]
[62.79230499 205.81259155]
[53.39902878 194.28416443]
[52.58570480 179.25744629]
[60.87351227 166.48381042]
[75.25995636 160.97595215]
[79.27851105 146.52427673]
[83.29706573 132.07258606]
[87.31562805 117.62090302]
[80.49677277 112.19842529]
[76.05807495 104.13400269]
[75.01134491 94.49166107]
[77.88900757 84.71315765]
[84.60893250 76.40237427]
[72.03195190 68.22805023]
[53.66383362 67.72155762]
[46.24733734 51.85648346]
[33.48883438 43.96847916]
[20.73033142 36.08047485]
[7.97182798 28.19247246]
[-8.67998314 25.00601387]
[-10.22773266 8.12286282]
[5.56715918 1.96187854]
[15.85983086 15.43396950]
[28.61833382 23.32197189]
[41.37683868 31.20997620]
[54.13534164 39.09798050]
[66.03143311 36.63053894]
[76.74517059 43.16883850]
[80.20627594 55.65107346]
[92.78325653 63.82539749]
[85.66489410 50.62202835]
[73.49630737 41.85131073]
[64.18839264 30.08854103]
[58.45004654 16.22955894]
[56.71829605 1.32985985]
[59.12502289 -13.47580338]
[65.48693848 -27.05983734]
[75.31952667 -38.38769150]
[87.87393188 -46.59664154]
[102.19402313 -51.06150055]
[117.18919373 -51.44222260]
[131.71740723 -47.70981216]
[144.67221069 -40.14853287]
[155.06698608 -29.33424377]
[162.11004639 -16.09055710]
[165.26501465 -1.42610347]
[164.29159546 13.54227829]
[159.26394653 27.67460632]
[150.56494141 39.89456558]
[138.85711670 49.27149582]
[125.03585815 55.09025574]
[115.13973999 66.36264801]
[129.22866821 61.21464920]
[143.31761169 56.06665039]
[157.40653992 50.91865540]
[161.79946899 34.62642670]
[174.88839722 24.24128342]
[191.42158508 23.67869759]
[204.91322327 32.96230698]
[218.88221741 27.49722290]
[232.85121155 22.03213882]
[246.82020569 16.56705475]
[246.74043274 1.38950300]
[252.15245056 -12.79056835]
[262.32434082 -24.05542183]
[275.88046265 -30.88157845]
[290.98742676 -32.34585571]
[305.60214233 -28.25022125]
[317.74810791 -19.14858055]
[325.78268433 -6.27185011]
[328.61923218 8.63849449]
[325.87417603 23.56595230]
[317.91870117 36.49170685]
[305.82876587 45.66765976]
[291.23944092 49.85283279]
[276.12377930 48.48122025]
[262.52606201 41.73831940]
[252.28529358 30.53605080]
[238.31629944 36.00113678]
[224.34730530 41.46622086]
[210.37829590 46.93130493]
[208.20167542 60.15052795]
[199.69255066 70.63861847]
[187.00349426 75.57176208]
[173.42994690 73.55341339]
[162.55455017 65.00759125]
[148.46560669 70.15558624]
[134.37666321 75.30358124]
[120.28773499 80.45158386]
[123.33264923 108.81532288]
[101.76731110 121.63945770]
[97.74875641 136.09114075]
[93.73019409 150.54283142]
[89.71163940 164.99450684]
[99.18970490 177.13833618]
[99.69381714 192.35671997]
[91.24012756 204.80657959]
[77.24398804 209.83114624]
[73.22543335 224.28282166]
[69.20687866 238.73451233]
[65.18831635 253.18620300]
[70.22312164 270.85806274]
[57.31879044 282.69796753]
[53.62786102 297.23678589]
[57.73157120 312.51651001]
[47.10046387 322.94860840]
[43.40953445 337.48742676]
[39.71860504 352.02624512]
[52.45136642 344.09677124]
[67.42462921 344.99197388]
[79.12190247 354.38204956]
[83.23364258 368.80749512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[16 134]
[17 133]
[18 132]
[20 130]
[21 129]
[24 127]
[25 126]
[26 125]
[27 124]
[31 120]
[32 119]
[33 118]
[34 117]
[39 56]
[40 55]
[42 52]
[43 51]
[44 50]
[45 49]
[78 115]
[79 114]
[80 113]
[81 112]
[85 107]
[86 106]
[87 105]
[88 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
