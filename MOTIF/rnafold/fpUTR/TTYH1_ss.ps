%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCUCCCCCCCGCUCCCGCUCCCCUGAGCCCAGCCAGACCCCGCGCCGCCCGCGCCCCGCUCGACUCCGGAGGCUCCCGCAGCCCCGGCGUCCGCCCCGCUGCCCCCUCCCCCGGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[111.07942963 179.74865723]
[102.92739105 180.46138000]
[94.74510956 180.34294128]
[86.61711121 179.39459229]
[78.62735748 177.62611389]
[70.85837555 175.05577087]
[63.39042282 171.71011353]
[56.30063248 167.62371826]
[49.66225052 162.83879089]
[43.54384232 157.40473938]
[38.00861359 151.37771606]
[33.11374283 144.81997681]
[28.90979004 137.79927063]
[25.44018173 130.38809204]
[11.08260536 134.73089600]
[-3.27497029 139.07371521]
[-8.26277733 151.66000366]
[-19.44659996 158.93771362]
[-32.58419800 158.41561890]
[-42.84568787 150.51162720]
[-57.30949020 154.48634338]
[-71.77329254 158.46105957]
[-86.23709869 162.43579102]
[-97.36745453 174.47933960]
[-113.30078888 170.59852600]
[-117.64626312 154.78559875]
[-105.93361664 143.30752563]
[-90.21182251 147.97198486]
[-75.74801636 143.99726868]
[-61.28421402 140.02253723]
[-46.82041168 136.04782104]
[-39.19173813 121.11889648]
[-22.82051277 116.17535400]
[-7.61778212 124.71613312]
[6.73979378 120.37332153]
[21.09737015 116.03050995]
[19.70335197 105.92034912]
[19.59949303 95.71506500]
[20.78746223 85.57862091]
[23.24817276 75.67389679]
[26.94208527 66.16003418]
[31.80985069 57.18988419]
[37.77325821 48.90758514]
[44.73648453 41.44621277]
[52.58765411 34.92564392]
[44.92237473 22.03210068]
[37.25709534 9.13855553]
[29.59181404 -3.75498819]
[14.46060753 -9.08660603]
[9.33119774 -24.28754997]
[18.13842964 -37.69695663]
[34.12614822 -39.02827835]
[45.02994537 -27.26023865]
[42.48535919 -11.42026806]
[50.15063858 1.47327566]
[57.81591797 14.36681938]
[65.48120117 27.26036453]
[89.39118958 20.18737221]
[114.31862640 20.76882362]
[137.87281799 28.94895172]
[157.79483032 43.94324112]
[169.48809814 34.54816818]
[171.68707275 21.76173401]
[181.71766663 14.18308830]
[193.81811523 15.47640324]
[205.74751282 6.38302231]
[217.67691040 -2.71035886]
[223.96153259 -17.22979355]
[238.77398682 -18.79196930]
[250.70338440 -27.88535118]
[262.63278198 -36.97873306]
[274.56216431 -46.07211304]
[279.56475830 -53.85711288]
[286.91433716 -55.24075317]
[299.07208252 -64.02650452]
[311.22979736 -72.81226349]
[323.38754272 -81.59801483]
[327.34701538 -97.14479065]
[342.02932739 -103.61079407]
[356.17147827 -96.03586578]
[358.92480469 -80.23084259]
[348.17718506 -68.31998444]
[332.17330933 -69.44028473]
[320.01556396 -60.65452576]
[307.85781860 -51.86877060]
[295.70010376 -43.08301544]
[283.65554810 -34.14271927]
[271.72616577 -25.04933929]
[259.79675293 -15.95595741]
[247.86737061 -6.86257648]
[242.43600464 7.00643873]
[226.77027893 9.21903419]
[214.84089661 18.31241608]
[202.91149902 27.40579605]
[197.09463501 43.90990067]
[178.88317871 46.24143600]
[167.18991089 55.63651276]
[175.18913269 71.20422363]
[179.63522339 88.13270569]
[180.31808472 105.62198639]
[177.20544434 122.84559631]
[170.44439697 138.98962402]
[160.35441589 153.29115295]
[147.41233826 165.07435608]
[155.07762146 177.96789551]
[162.74290466 190.86145020]
[170.40818787 203.75498962]
[178.07347107 216.64852905]
[185.73875427 229.54208374]
[201.11535645 233.19384766]
[209.33482361 246.69259644]
[205.52067566 262.02972412]
[191.93579102 270.10601807]
[176.63983154 266.12994385]
[168.70762634 252.46041870]
[172.84519958 237.20735168]
[165.17991638 224.31381226]
[157.51464844 211.42027283]
[149.84936523 198.52671814]
[142.18408203 185.63317871]
[134.51879883 172.73963928]
[126.95714569 175.86775208]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 36]
[15 35]
[16 34]
[20 31]
[21 30]
[22 29]
[23 28]
[45 57]
[46 56]
[47 55]
[48 54]
[61 97]
[62 96]
[65 94]
[66 93]
[67 92]
[69 90]
[70 89]
[71 88]
[72 87]
[74 86]
[75 85]
[76 84]
[77 83]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
