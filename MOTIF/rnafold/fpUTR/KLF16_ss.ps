%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGGCCGGACGGACGCCGCUCCCGCCGCCUCCGCUCCGCCCGCCGCGCCGCGCGCCCUUGCUCGGC\
) } def
/len { sequence length } bind def

/coor [
[164.08055115 154.41326904]
[151.82600403 145.76306152]
[136.96626282 144.74462891]
[130.15388489 130.46519470]
[117.89933777 121.81499481]
[105.64479065 113.16479492]
[91.73966217 111.70223236]
[85.70500946 99.08975983]
[73.45045471 90.43955231]
[61.19590759 81.78934479]
[48.94136047 73.13914490]
[36.49308014 64.77013397]
[23.85752296 56.68665314]
[11.22196293 48.60317230]
[-1.41359639 40.51969147]
[-17.20807648 39.60047150]
[-23.75953674 26.22408867]
[-36.39509583 18.14060974]
[-52.18957520 17.22138977]
[-58.74103546 3.84500575]
[-71.37659454 -4.23847389]
[-87.77445221 -4.44394350]
[-95.55834198 -18.87803841]
[-86.72086334 -32.69219971]
[-70.35325623 -31.67560005]
[-63.29311371 -16.87403297]
[-50.65755463 -8.79055309]
[-35.76685333 -8.44951820]
[-28.31161499 5.50505018]
[-15.67605686 13.58852959]
[-0.78535599 13.92956448]
[6.66988325 27.88413239]
[19.30544281 35.96761322]
[31.94100189 44.05109406]
[44.57656097 52.13457108]
[52.15919876 53.11680603]
[57.59156418 60.88459396]
[69.84611511 69.53479767]
[82.10066223 78.18500519]
[94.35520935 86.83520508]
[108.26033783 88.29776764]
[114.29499054 100.91024017]
[126.54954529 109.56044769]
[138.80409241 118.21065521]
[154.54035950 119.84780121]
[160.47621155 133.50851440]
[172.73075867 142.15870667]
[188.46704102 143.79585266]
[194.40289307 157.45657349]
[206.65744019 166.10676575]
[218.91198730 174.75697327]
[231.16653442 183.40718079]
[246.90280151 185.04432678]
[252.83865356 198.70503235]
[265.09320068 207.35523987]
[280.62313843 204.42327881]
[293.63040161 213.40028381]
[296.39801025 228.96035767]
[287.28399658 241.87197876]
[271.69552612 244.47492981]
[258.88098145 235.22489929]
[256.44299316 219.60978699]
[244.18844604 210.95957947]
[229.32870483 209.94116211]
[222.51632690 195.66172791]
[210.26177979 187.01152039]
[198.00723267 178.36132812]
[185.75268555 169.71112061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[4 44]
[5 43]
[6 42]
[8 40]
[9 39]
[10 38]
[11 37]
[12 35]
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[20 27]
[21 26]
[49 68]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
