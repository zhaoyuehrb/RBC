%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCAGCGGCGCGGGCGGGAGGGCGAAGAGCAGCGGCCGCCUGAGGGGAGCCCGCGCCUCCGCCGCCUGAGAGGAGGUCGAGCUGCCGCCGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[116.10285950 223.65859985]
[112.86259460 209.01275635]
[109.62232971 194.36691284]
[106.38205719 179.72106934]
[103.14179230 165.07522583]
[99.90152740 150.42938232]
[96.66126251 135.78355408]
[93.42098999 121.13770294]
[87.93428040 114.64487457]
[86.08014679 107.50108337]
[87.42266846 101.34924316]
[90.88414764 97.37347412]
[79.71618652 87.35964966]
[68.54822540 77.34583282]
[57.38026428 67.33200836]
[46.21229935 57.31818771]
[35.04433823 47.30436325]
[23.87637711 37.29054260]
[12.70841599 27.27672005]
[1.54045451 17.26289940]
[-10.64941406 8.52178288]
[-23.71685791 1.15687180]
[-36.78430176 -6.20803928]
[-52.60546875 -6.24339342]
[-59.89402771 -19.23285675]
[-72.96147156 -26.59776878]
[-88.78263855 -26.63312340]
[-96.07119751 -39.62258530]
[-109.13864136 -46.98749924]
[-123.19141388 -40.40729523]
[-138.42169189 -43.37686539]
[-148.97311401 -54.75434875]
[-150.78843689 -70.16487122]
[-143.16964722 -83.68276978]
[-129.04631042 -90.11014557]
[-113.84915161 -86.97552490]
[-103.42177582 -75.48425293]
[-101.77372742 -60.05494308]
[-88.70628357 -52.69002914]
[-73.81978607 -53.18146515]
[-65.59655762 -39.66521072]
[-52.52911758 -32.30030060]
[-37.64262009 -32.79173660]
[-29.41938972 -19.27548218]
[-16.35194588 -11.91057205]
[-3.28450298 -4.54566050]
[-6.11462736 -19.27625465]
[0.95735389 -32.50452423]
[14.77863598 -38.33308792]
[29.18746567 -34.16347885]
[37.76015091 -21.85457611]
[36.67484665 -6.89388943]
[26.41540146 4.04886103]
[11.55427647 6.09493685]
[22.72223854 16.10875893]
[33.89020157 26.12258148]
[45.05816269 36.13640213]
[56.22612381 46.15022659]
[67.39408112 56.16404724]
[78.56204987 66.17787170]
[89.73001099 76.19168854]
[100.89797211 86.20551300]
[115.17816925 90.79637146]
[130.08937073 89.16658783]
[142.96716309 79.97567749]
[156.45976257 86.28432465]
[171.37095642 84.65454102]
[186.28215027 83.02476501]
[199.15995789 73.83384705]
[212.65255737 80.14250183]
[227.56375122 78.51271820]
[242.47494507 76.88293457]
[257.56335449 69.15143585]
[269.16958618 81.50989532]
[260.50704956 96.08371735]
[244.10473633 91.79412842]
[229.19352722 93.42391205]
[214.28233337 95.05369568]
[202.47108459 104.12803650]
[187.91194153 97.93595886]
[173.00074768 99.56574249]
[158.08953857 101.19552612]
[146.27828979 110.26986694]
[131.71914673 104.07778931]
[116.80794525 105.70757294]
[108.06683350 117.89743805]
[111.30709839 132.54327393]
[114.54737091 147.18911743]
[117.78763580 161.83496094]
[121.02790070 176.48080444]
[124.26817322 191.12664795]
[127.50843811 205.77249146]
[130.74870300 220.41833496]
[145.02934265 226.48818970]
[152.98594666 239.81004333]
[151.55906677 255.26138306]
[141.29734802 266.90081787]
[126.14664459 270.25280762]
[111.93270111 264.02838135]
[104.12107086 250.62098694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 93]
[2 92]
[3 91]
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 46]
[22 45]
[23 44]
[25 42]
[26 41]
[28 39]
[29 38]
[63 85]
[64 84]
[66 82]
[67 81]
[68 80]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
