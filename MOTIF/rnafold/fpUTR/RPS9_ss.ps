%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGGCGGUGUGCUUUUUCUCUAGGGUUUGGGUUGGAUGGUGGCCCGGGCCUUCCGAGUUUCCAUGAGCGCAGACGGGGAAGCGGAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[49.94672012 426.27481079]
[37.72563934 416.71316528]
[33.49113846 401.78506470]
[38.87147522 387.23062134]
[51.79779434 378.64633179]
[52.29902267 363.65472412]
[52.80024719 348.66308594]
[43.21063995 342.05773926]
[38.03128052 331.49353027]
[38.69593811 319.62542725]
[45.15275192 309.50125122]
[55.84719467 303.77914429]
[57.34862900 288.85446167]
[58.85006714 273.92980957]
[60.35150146 259.00512695]
[61.85293579 244.08047485]
[63.35437012 229.15580750]
[64.85580444 214.23114014]
[66.35724640 199.30647278]
[67.85868073 184.38180542]
[54.86675644 191.87913513]
[40.30209351 188.29158020]
[32.27870178 175.61778259]
[35.26644135 160.91835022]
[47.60083389 152.38237000]
[62.41034698 154.76527405]
[71.44459534 166.73966980]
[75.88873291 152.41313171]
[80.33286285 138.08659363]
[84.77700043 123.76006317]
[89.22113037 109.43352509]
[86.31916809 95.75616455]
[96.45233154 86.12233734]
[100.89646149 71.79579926]
[105.34059906 57.46926498]
[100.00432587 45.58189011]
[104.14792633 33.65453720]
[114.98941803 28.00960350]
[119.90979767 13.83956718]
[124.83016968 -0.33046934]
[129.75053406 -14.50050545]
[126.96814728 -30.07512856]
[138.45219421 -39.56016159]
[143.37257385 -53.73019791]
[148.29295349 -67.90023804]
[145.51055908 -83.47486115]
[156.99461365 -92.95989227]
[161.91497803 -107.12992859]
[166.83535767 -121.29996490]
[161.16218567 -136.30645752]
[169.48110962 -150.02413940]
[185.41055298 -151.93000793]
[196.73081970 -140.56201172]
[194.75796509 -124.64073181]
[181.00538635 -116.37959290]
[176.08502197 -102.20955658]
[171.16464233 -88.03952026]
[174.29896545 -73.47843170]
[162.46298218 -62.97986221]
[157.54261780 -48.80982590]
[152.62223816 -34.63978958]
[155.75656128 -20.07870293]
[143.92057800 -9.58013248]
[139.00019836 4.58990335]
[134.07983398 18.75993919]
[129.15945435 32.92997742]
[133.45814514 49.85446167]
[119.66713715 61.91339874]
[115.22299957 76.23993683]
[110.77886963 90.56647491]
[113.68083191 104.24383545]
[103.54766846 113.87766266]
[99.10353851 128.20419312]
[94.65940094 142.53073120]
[90.21527100 156.85726929]
[85.77113342 171.18380737]
[82.78334808 185.88323975]
[81.28190613 200.80790710]
[79.78047180 215.73257446]
[78.27903748 230.65724182]
[76.77760315 245.58190918]
[75.27616882 260.50656128]
[73.77473450 275.43124390]
[72.27330017 290.35589600]
[70.77186584 305.28057861]
[83.30223846 319.27413940]
[81.86086273 337.68780518]
[67.79187012 349.16430664]
[67.29064178 364.15594482]
[66.78942108 379.14755249]
[79.11351013 388.57604980]
[83.50969696 403.45736694]
[78.28756714 418.06930542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 90]
[6 89]
[7 88]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 80]
[18 79]
[19 78]
[20 77]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[33 70]
[34 69]
[35 68]
[38 66]
[39 65]
[40 64]
[41 63]
[43 61]
[44 60]
[45 59]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
