%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCUACGAGUGGCAGCAAGAAGGCAAUUCCUGGCUGGCGGUUGGCAUCUAAGCAGGCAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[72.87905121 98.54985046]
[58.70404053 93.64382935]
[44.52902985 88.73780823]
[30.35401726 83.83179474]
[16.17900467 78.92577362]
[2.00399280 74.01975250]
[-12.17101955 69.11373138]
[-27.74281693 71.91189575]
[-37.23947525 60.43745804]
[-51.41448975 55.53143692]
[-65.58950043 50.62541580]
[-79.76451111 45.71939850]
[-95.33631134 48.51755905]
[-104.83296967 37.04312134]
[-119.00798035 32.13710022]
[-131.07087708 41.75428009]
[-146.42057800 43.30034256]
[-160.15904236 36.28194046]
[-167.90238953 22.93862152]
[-167.17973328 7.52819300]
[-158.22167969 -5.03193569]
[-143.88671875 -10.73387241]
[-128.74905396 -7.75815010]
[-117.63909149 2.94568944]
[-114.10195923 17.96208954]
[-99.92694855 22.86810875]
[-85.36904144 19.71903610]
[-74.85848999 31.54438591]
[-60.68347931 36.45040512]
[-46.50846863 41.35642624]
[-32.33345795 46.26244354]
[-17.77555084 43.11337280]
[-7.26499987 54.93872070]
[6.91001225 59.84474182]
[21.08502388 64.75076294]
[35.26003647 69.65677643]
[49.43505096 74.56279755]
[63.61006165 79.46881866]
[77.78507233 84.37483978]
[95.23189545 73.26213074]
[115.44453430 77.65911865]
[126.69833374 95.01526642]
[141.63041687 96.44110870]
[156.56248474 97.86695099]
[171.03565979 91.47647095]
[182.96981812 100.38854218]
[197.90190125 101.81438446]
[209.92779541 91.55994415]
[225.67552185 92.89582062]
[235.80223083 105.02944946]
[234.29994202 120.76217651]
[222.05992126 130.76005554]
[206.34396362 129.09150696]
[196.47605896 116.74645996]
[181.54397583 115.32061768]
[168.13885498 121.81307983]
[155.13665771 112.79902649]
[140.20457458 111.37318420]
[125.27249146 109.94734192]
[120.28421021 118.06099701]
[112.80142212 123.95354462]
[103.74433899 126.90034485]
[94.22679138 126.53900146]
[85.41921997 122.91395569]
[78.40475464 116.47100830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 39]
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[9 31]
[10 30]
[11 29]
[12 28]
[14 26]
[15 25]
[42 59]
[43 58]
[44 57]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
