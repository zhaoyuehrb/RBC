%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUGCUGAUUUAGCUUAUGGAAGAGGAACCAGAAAUUUGUCCUUGAAUAAUGUUUCCCGACAACGAAGAGGCAGAAGGAUCUGGGCCUGUGCGCGACGCCCCGGGGGACGAGGCUC\
) } def
/len { sequence length } bind def

/coor [
[106.35336304 151.87556458]
[100.52960205 152.26049805]
[94.69924164 151.99366760]
[88.93498230 151.07841492]
[83.30872345 149.52616882]
[77.89061737 147.35626221]
[69.66024017 159.89662170]
[61.42986679 172.43699646]
[53.19948959 184.97737122]
[49.56357574 201.53684998]
[32.64472198 202.62715149]
[26.91342545 186.67132568]
[40.65911865 176.74699402]
[48.88949585 164.20661926]
[57.11987305 151.66624451]
[65.35025024 139.12588501]
[57.66660309 130.64837646]
[52.01182175 120.70203400]
[48.65690613 109.76352692]
[47.76265335 98.35710144]
[49.37191010 87.02940369]
[53.40756226 76.32334137]
[59.67618942 66.75199127]
[67.87736511 58.77408600]
[77.61804962 52.77195740]
[88.43139648 49.03327560]
[87.24464417 34.08029556]
[86.05789185 19.12731361]
[76.72168732 10.10942268]
[76.10578156 -2.45321608]
[83.99431610 -11.72721386]
[83.20269012 -26.70631027]
[82.41105652 -41.68540573]
[81.61942291 -56.66450119]
[80.82779694 -71.64360046]
[66.29406738 -83.64089966]
[65.03465271 -102.12794495]
[77.37898254 -115.52071381]
[75.79792786 -130.43716431]
[74.21687317 -145.35360718]
[72.63581848 -160.27005005]
[68.57462311 -168.59573364]
[71.21525574 -175.60035706]
[70.02850342 -190.55332947]
[68.84174347 -205.50631714]
[67.65499115 -220.45928955]
[54.23149109 -225.08877563]
[43.63416290 -234.47419739]
[37.45445251 -247.16166687]
[36.60334778 -261.20486450]
[41.17722321 -274.46356201]
[50.44821930 -284.92993164]
[62.97984695 -291.03244019]
[62.18821716 -306.01153564]
[61.39658737 -320.99063110]
[60.60495758 -335.96972656]
[51.21849442 -349.41690063]
[58.41496658 -364.15267944]
[74.79125977 -365.01815796]
[83.50084686 -351.12298584]
[75.58405304 -336.76138306]
[76.37568665 -321.78228760]
[77.16731262 -306.80316162]
[77.95894623 -291.82406616]
[92.76963806 -285.98095703]
[103.61095428 -274.24157715]
[108.29324341 -258.90283203]
[105.83866882 -242.99568176]
[96.68486786 -229.68634033]
[82.60797119 -221.64604187]
[83.79472351 -206.69306946]
[84.98148346 -191.74009705]
[86.16823578 -176.78710938]
[87.55226135 -161.85108948]
[89.13331604 -146.93464661]
[90.71437073 -132.01820374]
[92.29542542 -117.10176849]
[102.63387299 -111.93996429]
[109.21685791 -102.29654694]
[110.27996063 -90.54777527]
[105.43688965 -79.65877533]
[95.80689240 -72.43522644]
[96.59852600 -57.45613098]
[97.39015198 -42.47703552]
[98.18178558 -27.49794006]
[98.97341156 -12.51884365]
[109.33262634 1.57960975]
[101.01087189 17.94055748]
[102.19762421 32.89353943]
[103.38437653 47.84651947]
[125.45893860 54.35701752]
[142.59657288 69.71846771]
[151.47401428 90.95202637]
[150.36975098 113.94013977]
[139.49794006 134.22502136]
[149.30723572 145.57304382]
[164.82989502 146.87110901]
[174.61627197 158.51936340]
[173.28309631 173.30984497]
[183.09239197 184.65786743]
[193.05062866 195.87541199]
[203.15606689 206.96055603]
[213.26150513 218.04568481]
[228.40055847 225.67755127]
[225.25784302 242.33767700]
[208.37881470 243.92977905]
[202.17636108 228.15112305]
[192.07093811 217.06597900]
[181.96549988 205.98085022]
[175.04716492 203.12174988]
[171.74436951 194.46716309]
[161.93507385 183.11914062]
[147.10733032 182.29824829]
[136.99765015 170.92947388]
[137.95921326 155.38235474]
[128.14991760 144.03433228]
[123.06454468 146.89846802]
[117.69153595 149.17773438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[9 13]
[26 90]
[27 89]
[28 88]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[38 77]
[39 76]
[40 75]
[41 74]
[43 73]
[44 72]
[45 71]
[46 70]
[53 64]
[54 63]
[55 62]
[56 61]
[95 116]
[96 115]
[99 112]
[100 111]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
