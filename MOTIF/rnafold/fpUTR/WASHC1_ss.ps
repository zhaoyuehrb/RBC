%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUAGGCACUUCACAAAACUGGACUCAUACGAUAUCUGUAGUUUUGCGUCUGGCUUCUCUAUUGAAUUCUUAAAGGGGGGUGGGAACUAAGCAGAUCACAAGGGAGCUGCCCACAGAGGUAAAGACAAGGUCAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[177.45967102 293.31777954]
[165.81663513 283.86053467]
[165.72752380 268.86080933]
[177.25737000 259.26589966]
[191.99246216 262.07931519]
[186.25221252 248.22111511]
[180.51196289 234.36291504]
[164.34454346 223.83715820]
[167.07460022 203.91484070]
[160.73533630 190.32022095]
[154.39605713 176.72561646]
[148.05677795 163.13099670]
[141.56959534 149.60633850]
[134.93527222 136.15324402]
[128.30093384 122.70014954]
[121.66660309 109.24706268]
[101.02143097 121.10023499]
[83.59690094 108.96373749]
[68.65398407 110.27107239]
[53.71105957 111.57840729]
[38.76813889 112.88574219]
[23.82522011 114.19307709]
[8.88229942 115.50041199]
[-6.06062078 116.80775452]
[-20.97146606 118.44075012]
[-35.84313965 120.39864349]
[-50.71481323 122.35653687]
[-65.01203156 133.90557861]
[-80.95718384 126.65394592]
[-95.78260803 128.93580627]
[-108.22640991 139.61680603]
[-123.60652924 133.92611694]
[-126.10122681 117.71783447]
[-113.14416504 107.66564178]
[-98.06446075 114.11037445]
[-83.23903656 111.82852936]
[-75.79621124 102.23271942]
[-63.40855026 100.24731445]
[-52.67270660 107.48486328]
[-37.80103302 105.52697754]
[-22.92935944 103.56908417]
[-19.32416916 100.33238983]
[-13.62523746 99.37565613]
[-7.36795712 101.86483002]
[7.57496357 100.55749512]
[22.51788330 99.25016022]
[37.46080399 97.94282532]
[52.40372467 96.63548279]
[67.34664154 95.32814789]
[82.28956604 94.02081299]
[88.39170074 83.32932281]
[100.62914276 78.07326508]
[114.54795837 81.47145844]
[113.89366913 66.48574066]
[113.23937988 51.50001526]
[104.90748596 38.05047226]
[112.08226776 24.99781799]
[111.42797852 10.01209450]
[110.77368927 -4.97362852]
[110.11939240 -19.95935249]
[109.46510315 -34.94507599]
[108.81081390 -49.93079758]
[108.15652466 -64.91651917]
[107.50223541 -79.90224457]
[103.97915649 -88.41390991]
[107.00074005 -95.22128296]
[106.67351532 -110.21771240]
[106.34629059 -125.21414185]
[106.01906586 -140.21057129]
[97.05368042 -153.94206238]
[104.70318604 -168.44783020]
[121.09843445 -168.80557251]
[129.37339783 -154.64727783]
[121.01550293 -140.53779602]
[121.34272003 -125.54136658]
[121.66994476 -110.54493713]
[121.99716949 -95.54850769]
[122.48795319 -80.55653381]
[123.14225006 -65.57081604]
[123.79653931 -50.58509064]
[124.45082855 -35.59936523]
[125.10511780 -20.61364365]
[125.75940704 -5.62791967]
[126.41370392 9.35780430]
[127.06799316 24.34352684]
[135.35308838 36.72118759]
[128.22509766 50.84572220]
[128.87939453 65.83144379]
[129.53367615 80.81716919]
[131.82040405 65.99250031]
[138.68212891 52.65395355]
[149.41317749 42.17327881]
[162.90997314 35.62831116]
[177.78448486 33.69214249]
[192.50701904 36.56389236]
[205.56350708 43.94821930]
[215.61119080 55.08572388]
[221.61677551 68.83100891]
[222.96264648 83.77050781]
[219.51037598 98.36783600]
[211.61502075 111.12178040]
[200.08851624 120.72073364]
[186.11628723 126.17752838]
[171.13520813 126.93097687]
[156.68598938 122.90360260]
[144.25456238 114.50958252]
[135.11968994 102.61273193]
[141.75402832 116.06581879]
[148.38835144 129.51890564]
[155.02268982 142.97200012]
[161.67544556 149.34391785]
[161.65139771 156.79171753]
[167.99067688 170.38633728]
[174.32995605 183.98095703]
[180.66921997 197.57557678]
[191.17716980 200.73362732]
[198.03833008 209.01153564]
[199.14524841 219.48439026]
[194.37014771 228.62266541]
[200.11039734 242.48086548]
[205.85066223 256.33905029]
[212.33784485 269.86370850]
[219.55267334 283.01461792]
[226.76750183 296.16552734]
[243.53991699 298.05215454]
[255.78070068 309.43063354]
[258.82427979 325.69506836]
[251.67097473 340.43173218]
[259.17098999 353.42211914]
[266.67098999 366.41250610]
[279.82684326 377.10641479]
[273.19271851 392.70849609]
[256.36389160 390.65274048]
[253.68060303 373.91250610]
[246.18060303 360.92211914]
[238.68060303 347.93173218]
[225.28913879 347.76510620]
[213.64508057 340.93185425]
[206.86080933 329.13391113]
[206.81115723 315.41601562]
[213.61660767 303.38034058]
[206.40177917 290.22943115]
[199.18693542 277.07855225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 121]
[6 120]
[7 119]
[9 115]
[10 114]
[11 113]
[12 112]
[13 110]
[14 109]
[15 108]
[16 107]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 41]
[26 40]
[27 39]
[29 36]
[30 35]
[53 89]
[54 88]
[55 87]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[62 80]
[63 79]
[64 78]
[66 77]
[67 76]
[68 75]
[69 74]
[122 143]
[123 142]
[124 141]
[128 136]
[129 135]
[130 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
