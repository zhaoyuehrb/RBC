%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCGGCGUGAGGGCUCCGGGUCGCUGGCGGCGUGGACACCUGAGUCCCGGGGUAGGGGUCUCCCGCGAGGAGUGAGCUGUUGCCGCAGAAUGGGCUGCUGGCUCCUGCCCUGCUUCCUGUGAUCGAGCCGGCCCUGAGGACUCUGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[-64.63100433 322.79376221]
[-72.28286743 328.18197632]
[-81.10691071 331.22827148]
[-90.40616608 331.70587158]
[-99.44998932 329.59036255]
[-107.53141785 325.06048584]
[-119.01121521 334.71524048]
[-130.49102783 344.36999512]
[-136.07246399 359.17398071]
[-150.79301453 361.44436646]
[-162.27281189 371.09912109]
[-173.75260925 380.75387573]
[-179.33404541 395.55786133]
[-194.05459595 397.82824707]
[-205.53440857 407.48300171]
[-216.91577148 417.25357056]
[-228.19755554 427.13900757]
[-239.47932434 437.02444458]
[-250.76109314 446.90985107]
[-258.68927002 461.89584351]
[-275.28436279 458.42602539]
[-276.54412842 441.51895142]
[-260.64651489 435.62808228]
[-249.36474609 425.74264526]
[-238.08297729 415.85723877]
[-226.80120850 405.97180176]
[-223.82553101 399.15823364]
[-215.18914795 396.00320435]
[-203.70935059 386.34844971]
[-198.94902039 372.23501587]
[-183.40736389 369.27404785]
[-171.92755127 359.61932373]
[-160.44775391 349.96456909]
[-155.68742371 335.85116577]
[-140.14576721 332.89019775]
[-128.66596985 323.23544312]
[-117.18616486 313.58068848]
[-120.49091339 292.93954468]
[-110.71702576 274.31127930]
[-91.61528778 265.18643188]
[-70.72249603 269.34133911]
[-60.49869537 258.36526489]
[-50.27489853 247.38920593]
[-50.38035583 235.25631714]
[-41.90124512 226.02432251]
[-29.00237274 225.03747559]
[-18.55822372 214.27085876]
[-8.11407566 203.50425720]
[2.33007360 192.73765564]
[12.77422237 181.97105408]
[23.21837044 171.20445251]
[33.55287552 160.33256531]
[43.77667236 149.35649109]
[54.00046921 138.38043213]
[64.22426605 127.40436554]
[74.44806671 116.42830658]
[84.67185974 105.45223999]
[84.97003937 93.77272034]
[93.01946259 85.30473328]
[104.66888428 84.41538239]
[115.11303711 73.64878082]
[119.16814423 58.35607910]
[133.58348083 54.60808182]
[144.02761841 43.84147644]
[141.51640320 28.64279556]
[148.35621643 15.03873825]
[161.73678589 8.15222645]
[176.43080139 10.43788338]
[186.87493896 -0.32872027]
[197.31909180 -11.09532356]
[207.76324463 -21.86192703]
[211.81834412 -37.15462875]
[226.23367310 -40.90262604]
[236.67782593 -51.66923141]
[247.12197876 -62.43583298]
[257.56613159 -73.20243835]
[268.01028442 -83.96903992]
[278.45443726 -94.73564148]
[282.50326538 -112.67127991]
[299.51748657 -116.86703491]
[309.74127197 -127.84309387]
[305.35940552 -142.49732971]
[308.87765503 -157.27970886]
[319.25372314 -168.24343872]
[333.62826538 -172.51289368]
[348.11230469 -169.03744507]
[358.33609009 -180.01350403]
[368.55987549 -190.98956299]
[378.67193604 -202.06866455]
[388.67117310 -213.24967957]
[398.67041016 -224.43069458]
[408.66967773 -235.61170959]
[407.53909302 -251.37551880]
[417.94934082 -263.26678467]
[433.72421265 -264.23062134]
[445.50476074 -253.69522095]
[446.30175781 -237.91104126]
[435.64239502 -226.24255371]
[419.85067749 -225.61247253]
[409.85144043 -214.43145752]
[399.85220337 -203.25044250]
[389.85293579 -192.06942749]
[387.72579956 -184.94517517]
[379.53594971 -180.76576233]
[369.31216431 -169.78970337]
[359.08834839 -158.81364441]
[363.58169556 -144.61239624]
[360.34182739 -129.97137451]
[350.14114380 -118.84428406]
[335.64529419 -114.28712463]
[320.71734619 -117.61930084]
[310.49356079 -106.64323425]
[310.59899902 -94.51033783]
[302.11990356 -85.27835083]
[289.22103882 -84.29149628]
[278.77688599 -73.52489471]
[268.33273315 -62.75828934]
[257.88858032 -51.99168396]
[247.44442749 -41.22508240]
[237.00028992 -30.45847702]
[233.69221497 -15.93587685]
[218.52984619 -11.41777897]
[208.08569336 -0.65117514]
[197.64154053 10.11542892]
[187.19740295 20.88203239]
[189.92866516 35.49976730]
[183.45207214 49.08349991]
[170.06222534 56.33368301]
[154.79421997 54.28562546]
[144.35008240 65.05223083]
[141.04200745 79.57482910]
[125.87963867 84.09292603]
[115.43549347 94.85953522]
[111.79161835 111.20877075]
[95.64792633 115.67604065]
[85.42412567 126.65209961]
[75.20033264 137.62815857]
[64.97653198 148.60423279]
[54.75273514 159.58029175]
[44.52893829 170.55635071]
[40.94053268 179.02185059]
[33.98497391 181.64860535]
[23.54082680 192.41520691]
[13.09667778 203.18180847]
[2.65252852 213.94841003]
[-7.79162025 224.71501160]
[-18.23576927 235.48161316]
[-22.28461647 253.41725159]
[-39.29883575 257.61300659]
[-49.52263260 268.58908081]
[-59.74642944 279.56512451]
[-55.63961029 288.10540771]
[-54.06710052 297.42657471]
[-55.13945007 306.79470825]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[10 33]
[11 32]
[12 31]
[14 29]
[15 28]
[16 26]
[17 25]
[18 24]
[19 23]
[41 151]
[42 150]
[43 149]
[46 147]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[52 140]
[53 139]
[54 138]
[55 137]
[56 136]
[57 135]
[60 133]
[61 132]
[63 130]
[64 129]
[68 125]
[69 124]
[70 123]
[71 122]
[73 120]
[74 119]
[75 118]
[76 117]
[77 116]
[78 115]
[80 112]
[81 111]
[86 106]
[87 105]
[88 104]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
