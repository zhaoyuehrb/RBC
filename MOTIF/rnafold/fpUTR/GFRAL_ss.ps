%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUCUGGACAGUUACUCUUAAGAAAGUUGUCAGAAGAAACGCAUCUGCCUUUUUUUCCAGGUGAACUGCCGUGAGUUGUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[69.44725800 326.94793701]
[54.14118958 330.15078735]
[40.38179398 322.72024536]
[34.66583633 308.16479492]
[39.69221497 293.35702515]
[53.08763123 285.28875732]
[55.24671936 270.44497681]
[57.40581131 255.60116577]
[59.56489944 240.75737000]
[61.72398758 225.91357422]
[63.88307953 211.06977844]
[66.04216766 196.22598267]
[68.20125580 181.38218689]
[70.09200287 166.50183105]
[71.71379089 151.58975220]
[73.33557129 136.67768860]
[74.95735931 121.76561737]
[67.93123627 108.51293182]
[54.67855072 101.48680878]
[41.42587280 94.46068573]
[28.17319107 87.43455505]
[13.23384094 91.84517670]
[-0.10617223 84.53089142]
[-4.21895742 70.26132202]
[-17.47163773 63.23519897]
[-32.50431442 68.11312103]
[-46.54508209 60.85830307]
[-51.26380157 45.77489471]
[-43.86093903 31.81161499]
[-28.72848129 27.25263023]
[-14.84425068 34.80270767]
[-10.44551182 49.98251724]
[2.80716920 57.00864410]
[16.92597580 52.40485382]
[30.46616936 59.34155655]
[35.19931793 74.18187714]
[48.45199966 81.20800018]
[61.70467758 88.23413086]
[74.95735931 95.26025391]
[81.26923370 84.84838867]
[91.21303558 79.07368469]
[102.03233337 78.79636383]
[111.05230713 83.44497681]
[123.46764374 75.02716827]
[135.88298035 66.60935974]
[147.98631287 57.74882126]
[159.76188660 48.45709229]
[164.70655823 40.49495697]
[172.13446045 39.05170441]
[184.23779297 30.19116211]
[196.34114075 21.33061981]
[208.44447327 12.47007751]
[208.25378418 -3.04582572]
[217.24697876 -15.69106007]
[231.96600342 -20.60327530]
[246.75109863 -15.89362431]
[255.91706848 -3.37306380]
[255.93943787 12.14399529]
[246.80958557 24.69092751]
[232.03814697 29.44318008]
[217.30500793 24.57341576]
[205.20167542 33.43395615]
[193.09834290 42.29449844]
[180.99499512 51.15504074]
[169.05360413 60.23265457]
[157.27804565 69.52438354]
[155.83338928 74.30046844]
[151.23326111 78.11997986]
[144.30078125 79.02469635]
[131.88545227 87.44250488]
[119.47011566 95.86030579]
[114.37276459 117.56545258]
[89.86943054 123.38739777]
[88.24764252 138.29946899]
[86.62586212 153.21153259]
[85.00407410 168.12361145]
[87.22003937 177.23046875]
[83.04505920 183.54127502]
[80.88596344 198.38507080]
[78.72687531 213.22886658]
[76.56778717 228.07266235]
[74.40869904 242.91645813]
[72.24961090 257.76025391]
[70.09051514 272.60406494]
[67.93142700 287.44784546]
[78.47328186 298.99789429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 85]
[7 84]
[8 83]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 76]
[15 75]
[16 74]
[17 73]
[18 39]
[19 38]
[20 37]
[21 36]
[24 33]
[25 32]
[43 71]
[44 70]
[45 69]
[46 66]
[47 65]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
