%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCGCCUAACGCCGCCAACAUGGUGAGUCUUACUGUUGCGGGCUCCGGGGCCGUCGACCAUGCCGCUCGACCUCCACCUCCGCUGGGAAGCUGAGGCGCCAAACGGCUCCCAGAGGGUCCCGGGAAGCGC\
) } def
/len { sequence length } bind def

/coor [
[124.93144226 200.79728699]
[109.80720520 204.77113342]
[95.68917847 198.04690552]
[89.24345398 183.79956055]
[93.51351166 168.75627136]
[106.48316193 160.02001953]
[107.88778687 145.08592224]
[109.29240417 130.15184021]
[103.80592346 125.03827667]
[97.47016907 138.63453674]
[82.58150482 136.81031799]
[79.71560669 122.08664703]
[92.83295441 114.81115723]
[87.34646606 109.69760132]
[72.54801178 112.14826202]
[57.74955750 114.59892273]
[48.54594421 127.16599274]
[33.50329590 129.44050598]
[21.57923317 120.58881378]
[6.78077936 123.03947449]
[-8.01767540 125.49013519]
[-22.81612968 127.94079590]
[-37.61458588 130.39146423]
[-43.07942581 134.37602234]
[-48.86075592 134.85696411]
[-53.16275406 132.59313965]
[-68.05981445 134.34745789]
[-82.95687103 136.10179138]
[-97.85392761 137.85612488]
[-112.87720490 145.71343994]
[-124.58631134 133.45239258]
[-116.04583740 118.80669403]
[-99.60825348 122.95906830]
[-84.71119690 121.20473480]
[-69.81414032 119.45040894]
[-54.91708374 117.69607544]
[-40.06524658 115.59300232]
[-25.26679039 113.14234161]
[-10.46833611 110.69168091]
[4.33011866 108.24102020]
[19.12857437 105.79035950]
[27.56261063 93.56732178]
[42.53543854 90.87120056]
[55.29889679 99.80046844]
[70.09735107 97.34980774]
[84.89580536 94.89914703]
[98.72011566 89.07776642]
[110.81389618 80.20418549]
[122.90767670 71.33060455]
[135.00146484 62.45701981]
[147.09524536 53.58343506]
[159.18902588 44.70985413]
[171.28279114 35.83626938]
[183.37657166 26.96268654]
[195.47035217 18.08910370]
[202.01960754 3.68709064]
[216.85816956 2.39620423]
[228.95195007 -6.47737885]
[225.83087158 -20.31211662]
[228.22862244 -34.24630737]
[235.74818420 -46.16858673]
[247.21902466 -54.28534317]
[260.87921143 -57.39051437]
[274.64605713 -55.04471970]
[286.43350220 -47.63709259]
[298.73196411 -56.22472763]
[311.03045654 -64.81236267]
[323.32891846 -73.39999390]
[325.67807007 -93.26505280]
[341.54681396 -104.94230652]
[360.61904907 -101.38680267]
[372.28359985 -110.81749725]
[377.04736328 -118.72342682]
[384.33395386 -120.32868195]
[396.21640015 -129.48333740]
[408.09881592 -138.63798523]
[419.98126221 -147.79264832]
[418.05700684 -162.96644592]
[423.94732666 -176.97363281]
[435.97796631 -186.09118652]
[450.85748291 -187.95030212]
[464.57733154 -182.15104675]
[476.45974731 -191.30569458]
[488.34219360 -200.46034241]
[494.08456421 -215.82124329]
[510.30114746 -218.26142883]
[520.30969238 -205.27062988]
[513.81433105 -190.21269226]
[497.49685669 -188.57791138]
[485.61441040 -179.42326355]
[473.73196411 -170.26860046]
[475.84030151 -155.52342224]
[470.24777222 -141.61013794]
[458.36340332 -132.30271912]
[443.31716919 -130.17962646]
[429.13592529 -135.91020203]
[417.25347900 -126.75555420]
[405.37103271 -117.60089874]
[393.48861694 -108.44624329]
[381.71429443 -99.15293121]
[370.04974365 -89.72223663]
[371.77261353 -79.44024658]
[369.00283813 -69.30529022]
[362.18542480 -61.20428085]
[352.52536011 -56.67496109]
[341.77508545 -56.61425781]
[331.91656494 -61.10152054]
[319.61807251 -52.51388550]
[307.31961060 -43.92625046]
[295.02111816 -35.33861542]
[297.88543701 -19.66152954]
[293.63238525 -4.24275827]
[283.05960083 7.83622456]
[268.23294067 14.13870144]
[252.08293152 13.36417961]
[237.82553101 5.61640120]
[225.73175049 14.48998451]
[220.04753113 28.25729942]
[204.34394836 30.18288422]
[192.25016785 39.05646515]
[180.15638733 47.93004990]
[168.06260681 56.80363464]
[155.96882629 65.67721558]
[143.87504578 74.55079651]
[131.78126526 83.42438507]
[119.68747711 92.29796600]
[107.59369659 101.17154694]
[116.87894440 107.28397369]
[122.94499969 117.87122345]
[124.22649384 131.55645752]
[122.82187653 146.49055481]
[121.41725159 161.42463684]
[132.53048706 172.42601013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 132]
[7 131]
[8 130]
[14 46]
[15 45]
[16 44]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[26 36]
[27 35]
[28 34]
[29 33]
[47 127]
[48 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 121]
[54 120]
[55 119]
[57 117]
[58 116]
[65 110]
[66 109]
[67 108]
[68 107]
[71 101]
[72 100]
[74 99]
[75 98]
[76 97]
[77 96]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
