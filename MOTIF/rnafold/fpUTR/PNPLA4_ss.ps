%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUACCAACCCCUGCCGCAGGACUUUCCUGGGCCGGCUCGCGGAGAGCGUAGCGCGGCCUUGGUGGCGGAAUGGCGUUGAGUGACGGCCCGGCCCCGCCAUCUGGUUAAAGGGACUCGUUCAACACGGAAGUGUCCCGGGGCUGCAUUGUGCUACAGCUAGA\
) } def
/len { sequence length } bind def

/coor [
[282.97955322 147.71163940]
[271.43518066 138.13420105]
[266.53100586 123.95855713]
[269.68893433 109.29473877]
[279.99124146 98.39559174]
[265.00866699 99.11807251]
[250.02607727 99.84055328]
[240.23481750 111.00598145]
[225.05062866 111.95211029]
[213.40568542 101.60643768]
[198.42309570 102.32891083]
[183.44816589 103.19573975]
[168.48226929 104.20683289]
[153.51638794 105.21793365]
[138.55050659 106.22902679]
[123.58462524 107.24011993]
[108.61873627 108.25122070]
[94.56220245 113.48702240]
[82.58170319 122.51296997]
[70.60120392 131.53890991]
[58.62070084 140.56484985]
[46.64020157 149.59078979]
[37.62775040 163.95088196]
[21.33396721 159.26589966]
[21.32528496 142.31195068]
[37.61425781 137.61029053]
[49.59475708 128.58435059]
[61.57525635 119.55841064]
[73.55575562 110.53247070]
[85.53625488 101.50652313]
[81.95732117 86.93974304]
[67.15815735 84.49333954]
[52.35900116 82.04693604]
[37.55984116 79.60053253]
[22.76068306 77.15412903]
[7.93863535 74.85044861]
[-6.90492344 72.68972015]
[-21.74848175 70.52898407]
[-36.61217499 68.51139069]
[-51.49461746 66.63713074]
[-66.37705994 64.76287079]
[-79.88048553 73.42526245]
[-95.02534485 68.13253784]
[-100.19378662 52.94482422]
[-91.42104340 39.51282883]
[-75.43679810 38.14043808]
[-64.50279999 49.88042450]
[-49.62035370 51.75468445]
[-34.73791122 53.62894821]
[-27.67468834 51.33366013]
[-19.58774757 55.68542480]
[-4.74418926 57.84616089]
[10.09936905 60.00689316]
[17.20551682 57.84815979]
[25.20708466 62.35496902]
[40.00624466 64.80136871]
[54.80540466 67.24777222]
[69.60456085 69.69417572]
[84.40372467 72.14057922]
[103.53132629 79.26101685]
[107.60764313 93.28533173]
[122.57353210 92.27423859]
[137.53941345 91.26314545]
[152.50529480 90.25204468]
[167.47117615 89.24095154]
[182.43705750 88.22985840]
[190.83514404 84.51386261]
[197.70060730 87.34632111]
[212.68319702 86.62384033]
[223.27867126 75.20570374]
[238.48344421 74.68643951]
[249.30358887 84.85796356]
[264.28619385 84.13548279]
[279.26876831 83.41300201]
[289.41217041 77.38916779]
[299.30001831 80.89031219]
[313.99389648 77.87540436]
[328.68777466 74.86049652]
[343.38168335 71.84558105]
[358.04580688 68.68921661]
[372.67886353 65.39167786]
[387.31192017 62.09413910]
[395.03967285 57.13246536]
[402.25869751 58.87693787]
[416.95260620 55.86202621]
[431.64648438 52.84711838]
[446.34036255 49.83220673]
[455.05654907 36.92229462]
[470.00119019 34.07406616]
[482.25509644 42.46317673]
[496.94900513 39.44826508]
[511.64288330 36.43335724]
[526.33679199 33.41844559]
[541.03063965 30.40353584]
[555.72454834 27.38862419]
[570.41845703 24.37371445]
[583.57415771 17.16768646]
[594.02630615 6.40887737]
[604.47851562 -4.34993124]
[607.96673584 -20.37380409]
[623.66809082 -25.10645103]
[635.43048096 -13.67932987]
[631.15368652 2.15231633]
[615.23730469 6.10224724]
[604.78515625 16.86105537]
[594.33294678 27.61986542]
[597.01849365 34.62258148]
[611.02398682 29.25179291]
[616.39453125 43.25740433]
[602.38946533 48.62801361]
[605.07501221 55.63072968]
[620.04089355 56.64182663]
[635.00677490 57.65291977]
[649.97265625 58.66401672]
[664.93853760 59.67510986]
[674.91320801 47.93579102]
[689.71478271 44.36263275]
[703.61773682 50.12218857]
[711.37048340 62.81205368]
[726.33636475 63.82315063]
[741.30224609 64.83424377]
[754.28253174 55.40598679]
[769.70794678 59.81466675]
[775.74542236 74.67832184]
[767.76354980 88.59483337]
[751.88531494 90.88864136]
[740.29113770 79.80012512]
[725.32525635 78.78903198]
[710.35937500 77.77793884]
[700.97021484 89.30969238]
[686.41894531 93.14688110]
[672.23248291 87.61529541]
[663.92742920 74.64099884]
[648.96154785 73.62989807]
[633.99566650 72.61880493]
[619.02978516 71.60771179]
[604.06390381 70.59661102]
[573.43334961 39.06760025]
[558.73944092 42.08251190]
[544.04559326 45.09742355]
[529.35168457 48.11233139]
[514.65777588 51.12724304]
[499.96389771 54.14215088]
[485.27001953 57.15706253]
[477.30969238 69.69375610]
[462.45092773 72.96062469]
[449.35528564 64.52609253]
[434.66137695 67.54100800]
[419.96749878 70.55591583]
[405.27362061 73.57082367]
[390.60946655 76.72719574]
[375.97640991 80.02473450]
[361.34335327 83.32226562]
[355.48135376 87.88235474]
[346.39657593 86.53946686]
[331.70269775 89.55438232]
[317.00881958 92.56929016]
[302.31491089 95.58419800]
[314.99957275 103.59043884]
[321.69348145 117.01397705]
[320.45587158 131.96282959]
[311.64556885 144.10278320]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 74]
[6 73]
[7 72]
[10 69]
[11 68]
[12 66]
[13 65]
[14 64]
[15 63]
[16 62]
[17 61]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[31 59]
[32 58]
[33 57]
[34 56]
[35 55]
[36 53]
[37 52]
[38 51]
[39 49]
[40 48]
[41 47]
[76 158]
[77 157]
[78 156]
[79 155]
[80 153]
[81 152]
[82 151]
[84 150]
[85 149]
[86 148]
[87 147]
[90 144]
[91 143]
[92 142]
[93 141]
[94 140]
[95 139]
[96 138]
[97 106]
[98 105]
[99 104]
[111 137]
[112 136]
[113 135]
[114 134]
[115 133]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
