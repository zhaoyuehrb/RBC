%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGACACUUCCGUCCGGCGCGCGGCGUCCUCCUCCCGCUCGGAAGGUCCCAGGUGUGACACCUUCAGCAGGUCUCAGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[-38.04237366 229.58029175]
[-55.28901291 222.65855408]
[-66.46059418 232.66833496]
[-77.63217926 242.67811584]
[-88.80375671 252.68789673]
[-99.97534180 262.69769287]
[-111.14692688 272.70745850]
[-122.31851196 282.71725464]
[-122.93370819 298.50955200]
[-134.59214783 309.17990112]
[-150.37705994 308.39776611]
[-160.92356873 296.62716675]
[-159.97459412 280.85140991]
[-148.09315491 270.42993164]
[-132.32829285 271.54565430]
[-121.15670776 261.53588867]
[-109.98512268 251.52609253]
[-98.81354523 241.51631165]
[-87.64196014 231.50653076]
[-76.47037506 221.49674988]
[-65.29879761 211.48696899]
[-69.47885132 200.70837402]
[-70.06272888 189.13522339]
[-66.97431183 177.93838501]
[-60.50985336 168.25598145]
[-51.30968094 161.07777405]
[-40.29477310 157.14390564]
[-28.57458878 156.86871338]
[-17.33532524 160.29707336]
[-7.71984959 167.09820557]
[4.79011774 158.82168579]
[17.30008507 150.54516602]
[29.81005287 142.26866150]
[29.64973259 124.80026245]
[39.95325089 110.50277710]
[56.86853027 105.03365326]
[73.88471985 110.68984222]
[85.75717163 101.52223206]
[91.24558258 88.66265106]
[105.07522583 86.60531616]
[116.94766998 77.43771362]
[128.82011414 68.27010345]
[131.84672546 61.95948410]
[136.91798401 58.78089905]
[141.91055298 58.90470505]
[154.42051697 50.62818527]
[166.93049622 42.35166931]
[179.44046021 34.07515335]
[191.95042419 25.79863930]
[204.46038818 17.52212334]
[207.73413086 2.29319000]
[220.53890991 -5.92216492]
[235.03720093 -2.70730472]
[247.54716492 -10.98382092]
[254.37924194 -25.89203453]
[270.72930908 -27.15979958]
[279.77783203 -13.48294640]
[272.21646118 1.06895030]
[255.82368469 1.52614653]
[243.31372070 9.80266285]
[240.60215759 24.40345001]
[228.03317261 32.97522354]
[212.73690796 30.03208923]
[200.22694397 38.30860519]
[187.71696472 46.58512115]
[175.20700073 54.86163712]
[162.69703674 63.13815308]
[150.18707275 71.41467285]
[137.98773193 80.14255524]
[126.11528015 89.31015778]
[114.24282837 98.47776794]
[108.75441742 111.33734894]
[94.92477417 113.39468384]
[83.05233002 122.56228638]
[85.07564545 135.17019653]
[81.47382355 147.34472656]
[73.01445770 156.71388245]
[61.40502930 161.48075867]
[48.94850540 160.76802063]
[38.08656693 154.77862549]
[25.57660103 163.05513000]
[13.06663418 171.33164978]
[0.55666649 179.60816956]
[2.71552420 198.38171387]
[-4.65179014 215.69856262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[30 83]
[31 82]
[32 81]
[33 80]
[37 74]
[38 73]
[40 71]
[41 70]
[42 69]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
