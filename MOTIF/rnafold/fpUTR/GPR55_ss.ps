%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCCUGGAGGAGAAAUGACAUCUCUCAGCCCUCUCAGCUGCACCGGACCACCAACAGUUGUGAUUCAAUGGGCAUGAAUUGCUGUGUGAUGCUGGGGAGGUGUUUGUGAUUCUUGACAAAGUCAUUUGAAUCCAUCACUUCAAGAGAGUGAAAGGAGCCCCGUCUGAUCUGUUGGUGUUGUAGGAAGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-95.57768250 450.55706787]
[-106.19273376 447.50250244]
[-114.45039368 460.02493286]
[-122.70805359 472.54736328]
[-123.84588623 488.32760620]
[-137.31170654 494.69320679]
[-145.56936646 507.21563721]
[-153.82702637 519.73803711]
[-154.60246277 526.32708740]
[-158.07508850 530.84838867]
[-162.56034851 532.52630615]
[-171.21917725 544.77471924]
[-179.87800598 557.02319336]
[-188.53683472 569.27166748]
[-197.19566345 581.52008057]
[-193.04164124 596.59582520]
[-199.59693909 610.79309082]
[-213.76635742 617.40832520]
[-228.85952759 613.31811523]
[-237.74992371 600.45361328]
[-236.23974609 584.88909912]
[-225.04208374 573.97369385]
[-209.44412231 572.86126709]
[-200.78529358 560.61279297]
[-192.12646484 548.36437988]
[-183.46763611 536.11590576]
[-174.80880737 523.86743164]
[-166.34944153 511.48037720]
[-158.09178162 498.95797729]
[-149.83412170 486.43554688]
[-149.28694153 471.55099487]
[-135.23048401 464.28970337]
[-126.97281647 451.76727295]
[-118.71515656 439.24484253]
[-129.29338074 423.44842529]
[-131.92916870 404.57128906]
[-126.05225372 386.38809204]
[-112.79891968 372.55361938]
[-94.79252625 365.86810303]
[-75.62436676 367.71063232]
[-68.40657806 354.56134033]
[-61.18878937 341.41207886]
[-53.97100067 328.26278687]
[-46.75321198 315.11352539]
[-50.40013885 308.97518921]
[-51.69765091 301.88482666]
[-50.43726730 294.71853638]
[-46.72959137 288.37866211]
[-40.99632645 283.68011475]
[-33.92274094 281.24572754]
[-26.37591362 281.42398071]
[-18.11825180 268.90155029]
[-9.86059093 256.37911987]
[-1.60292923 243.85670471]
[6.65473270 231.33428955]
[14.91239452 218.81187439]
[23.17005539 206.28944397]
[31.42771721 193.76702881]
[39.68537903 181.24461365]
[32.89458466 167.98750305]
[33.65637589 153.01167297]
[41.86616516 140.34416199]
[55.40314102 133.44148254]
[70.67726898 134.24662781]
[78.93492889 121.72419739]
[87.19258881 109.20178223]
[87.19258881 94.20178223]
[78.93492889 81.67935944]
[70.67726898 69.15693665]
[55.29487610 68.32738495]
[43.48847580 58.71165466]
[39.65338898 44.15981293]
[45.05771637 30.30588722]
[36.80005264 17.78346634]
[28.54239082 5.26104498]
[20.28472900 -7.26137590]
[4.92155600 -11.88224697]
[-0.91048932 -26.82770729]
[7.26243973 -40.63288116]
[23.17077255 -42.70761871]
[34.61099625 -31.46035767]
[32.80715179 -15.51903725]
[41.06481171 -2.99661684]
[49.32247543 9.52580452]
[57.58013535 22.04822540]
[72.44279480 22.53749084]
[84.30776978 31.79417992]
[88.49594879 46.43359756]
[83.19969177 60.89927673]
[91.45735168 73.42169952]
[99.71501160 85.94411469]
[98.20854187 71.01995850]
[109.50247192 61.14842987]
[124.09085846 64.63825989]
[129.69485474 78.55210876]
[121.59757996 91.17892456]
[134.62826538 83.74915314]
[147.65893555 76.31938171]
[160.68960571 68.88961029]
[157.39370728 54.22748947]
[159.06967163 39.11719894]
[165.64797974 25.21735382]
[176.51490784 14.09075069]
[190.56816101 7.02885771]
[206.32815552 4.90252304]
[222.09358215 8.05609322]
[236.12513733 16.25768661]
[246.81726074 5.73731136]
[250.74711609 -2.52469826]
[257.76873779 -4.86510134]
[268.62985229 -15.21095753]
[279.49093628 -25.55681419]
[290.35202026 -35.90267181]
[301.21310425 -46.24852753]
[306.00711060 -65.81903839]
[324.96536255 -69.58112335]
[335.48571777 -80.27325439]
[346.00610352 -90.96539307]
[356.52648926 -101.65752411]
[363.32550049 -117.18844604]
[380.13162231 -114.95452118]
[382.63739014 -98.18677521]
[367.21859741 -91.13714600]
[356.69824219 -80.44501495]
[346.17785645 -69.75288391]
[335.65747070 -59.06074905]
[336.65826416 -48.87411499]
[331.77767944 -39.62773514]
[322.41729736 -34.49521637]
[311.55895996 -35.38743973]
[300.69787598 -25.04158211]
[289.83679199 -14.69572544]
[278.97570801 -4.34986925]
[268.11459351 5.99598742]
[257.33764648 16.42944527]
[246.64550781 26.94981956]
[252.44181824 40.78466034]
[267.43984985 40.54176331]
[282.43789673 40.29886627]
[297.43591309 40.05597305]
[312.43395996 39.81307602]
[327.43197632 39.57017899]
[339.57910156 29.09033775]
[355.31893921 32.19475174]
[362.57720947 46.50197983]
[355.78604126 61.03674316]
[340.15496826 64.64921570]
[327.67486572 54.56821442]
[312.67684937 54.81110764]
[297.67880249 55.05400467]
[282.68078613 55.29690170]
[267.68273926 55.53979874]
[252.68470764 55.78269196]
[248.38587952 72.07968140]
[238.95698547 85.79890442]
[225.61959839 95.40988159]
[210.02049255 99.89833069]
[194.02885437 98.87194824]
[179.51242065 92.59075928]
[168.11938477 81.92028809]
[155.08869934 89.35005951]
[142.05802917 96.77983093]
[129.02735901 104.20959473]
[99.71501160 117.45944214]
[91.45735168 129.98185730]
[83.19969177 142.50428772]
[89.95585632 156.22657776]
[88.94303894 171.38807678]
[80.53316498 183.92364502]
[67.06797791 190.52247620]
[52.20780182 189.50227356]
[43.95013809 202.02468872]
[35.69247818 214.54710388]
[27.43481445 227.06953430]
[19.17715263 239.59194946]
[10.91949177 252.11437988]
[2.66182971 264.63677979]
[-5.59583187 277.15921021]
[-13.85349369 289.68164062]
[-13.24587727 312.86593628]
[-33.60393524 322.33129883]
[-40.82172394 335.48059082]
[-48.03951263 348.62985229]
[-55.25730133 361.77914429]
[-62.47509003 374.92843628]
[-54.77382660 383.06237793]
[-49.43881989 392.89395142]
[-46.82413101 403.75387573]
[-47.09893799 414.90518188]
[-50.23661041 425.59329224]
[-56.01707458 435.09698486]
[-64.04220581 442.77719116]
[-73.76325989 448.11981201]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[40 185]
[41 184]
[42 183]
[43 182]
[44 181]
[51 179]
[52 178]
[53 177]
[54 176]
[55 175]
[56 174]
[57 173]
[58 172]
[59 171]
[64 166]
[65 165]
[66 164]
[67 91]
[68 90]
[69 89]
[73 85]
[74 84]
[75 83]
[76 82]
[96 163]
[97 162]
[98 161]
[99 160]
[107 136]
[108 135]
[110 134]
[111 133]
[112 132]
[113 131]
[114 130]
[116 126]
[117 125]
[118 124]
[119 123]
[137 153]
[138 152]
[139 151]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
