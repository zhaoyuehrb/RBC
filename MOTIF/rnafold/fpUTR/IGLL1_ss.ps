%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCACAUGGACUGGGGUGCAAUGGGACAGCUGCUGCCAGCGAGAGGGACCAGGGCACCACUCUCUAGGGAGCCCACACUGCAAGUCAGGCCACAAGGACCUCUGACCCUGAGGGCCG\
) } def
/len { sequence length } bind def

/coor [
[268.13415527 361.19757080]
[258.62780762 349.59457397]
[249.12149048 337.99157715]
[239.61515808 326.38858032]
[231.51527405 327.32400513]
[223.63636780 324.88204956]
[217.34199524 319.40518188]
[213.75360107 311.76766968]
[213.55116272 303.23663330]
[216.84568787 295.26199341]
[208.61531067 282.72161865]
[200.38493347 270.18124390]
[191.98974609 257.75061035]
[183.43121338 245.43185425]
[169.81517029 239.39425659]
[168.29547119 223.64620972]
[159.73693848 211.32746887]
[151.17839050 199.00871277]
[142.61985779 186.68997192]
[139.10304260 185.72955322]
[135.90859985 182.94236755]
[133.92555237 178.51512146]
[133.91722107 173.04060364]
[126.36013031 160.08335876]
[118.80304718 147.12609863]
[111.24596405 134.16883850]
[91.92953491 136.49006653]
[73.47838593 128.28175354]
[61.41363525 111.17416382]
[59.75952530 89.56405640]
[45.44552612 85.07970428]
[31.13152695 80.59535217]
[16.81752586 76.11100006]
[0.94043303 80.21586609]
[-10.35846329 68.33028412]
[-5.45582628 52.68112564]
[10.60493088 49.36690140]
[21.30187988 61.79699707]
[35.61587906 66.28134918]
[49.92987823 70.76570129]
[64.24388123 75.25005341]
[74.78024292 64.57368469]
[70.10734558 50.32012177]
[65.43444824 36.06655884]
[60.76154327 21.81299973]
[56.08864212 7.55943775]
[51.22800827 -6.63120079]
[46.18048859 -20.75644493]
[31.12946892 -24.14323616]
[20.31506729 -35.14561081]
[17.18811989 -50.25275421]
[22.74642372 -64.64402771]
[35.21634674 -73.72723389]
[50.61877823 -74.60395050]
[64.03885651 -66.99442291]
[71.19429016 -53.32681656]
[69.80180359 -37.96242523]
[60.30573273 -25.80396652]
[65.35325623 -11.67872238]
[70.63334656 -6.37227726]
[70.34220123 2.88653755]
[75.01510620 17.14009857]
[79.68800354 31.39365959]
[84.36090851 45.64722061]
[89.03380585 59.90077972]
[102.73081207 59.21961594]
[115.66867828 63.00997162]
[126.45435333 70.70513916]
[133.97903442 81.32705688]
[137.53150940 93.60848999]
[136.86349487 106.14337158]
[132.20112610 117.54757690]
[124.20321655 126.61175537]
[131.76029968 139.56901550]
[139.31738281 152.52626038]
[146.87448120 165.48352051]
[154.93859863 178.13143921]
[163.49714661 190.45018005]
[172.05567932 202.76892090]
[180.61421204 215.08767700]
[194.84242249 222.00639343]
[195.74995422 236.87332153]
[204.30848694 249.19207764]
[211.87263489 254.53941345]
[212.92529297 261.95086670]
[221.15567017 274.49124146]
[229.38604736 287.03161621]
[250.13597107 295.31341553]
[251.21815491 316.88223267]
[260.72448730 328.48522949]
[270.23083496 340.08825684]
[279.73715210 351.69125366]
[291.72027588 350.54183960]
[302.63522339 355.32614136]
[309.76467896 364.72479248]
[311.39651489 376.28628540]
[307.23379517 387.06588745]
[316.11453247 399.15441895]
[330.52041626 405.69515991]
[331.82006836 420.53292847]
[340.70080566 432.62145996]
[349.58151245 444.71002197]
[358.46224976 456.79855347]
[374.07791138 457.62637329]
[385.47274780 468.33578491]
[387.26644897 483.87014771]
[378.61212158 496.89462280]
[363.59603882 501.25939941]
[349.30834961 494.90362549]
[342.49526978 480.82824707]
[346.37371826 465.67926025]
[337.49298096 453.59072876]
[328.61227417 441.50219727]
[319.73153687 429.41366577]
[305.96084595 423.73757935]
[304.02600098 408.03515625]
[295.14526367 395.94659424]
[277.00003052 394.36557007]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[10 87]
[11 86]
[12 85]
[13 83]
[14 82]
[16 80]
[17 79]
[18 78]
[19 77]
[23 76]
[24 75]
[25 74]
[26 73]
[30 41]
[31 40]
[32 39]
[33 38]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 59]
[48 58]
[97 117]
[98 116]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
