%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCAGCUGCCGCCCGCCGGCUCGCCCGUGCAGCUGCGAUGCCCCGGAGCGUCGACCCCGGUCCUGGUCCCUGGCCCGCCGCGUAAUUAGCCUCCGCGCGCCCAGAGCGCGCCGCCGCCAACGCCGCGCCCGACGCAGCG\
) } def
/len { sequence length } bind def

/coor [
[94.58463287 234.99624634]
[81.11759949 242.70460510]
[65.69536591 240.99162292]
[54.24809265 230.51596069]
[51.17748642 215.30572510]
[57.66425705 201.20957947]
[71.21411133 193.64776611]
[72.87002563 178.73945618]
[74.52593231 163.83113098]
[76.18184662 148.92280579]
[77.83775330 134.01449585]
[66.99910736 123.64512634]
[52.17862701 125.95886230]
[37.35814667 128.27259827]
[22.56416893 130.75012207]
[7.79849958 133.39115906]
[-6.96716928 136.03218079]
[-15.00653934 146.18431091]
[-27.41574287 148.04484558]
[-37.41651535 141.15205383]
[-52.23699570 143.46577454]
[-67.05747986 145.77951050]
[-81.85145569 148.25704956]
[-96.61712646 150.89807129]
[-111.38279724 153.53910828]
[-126.14846039 156.18013000]
[-131.29048157 170.65269470]
[-142.99029541 180.60307312]
[-158.10069275 183.35467529]
[-172.55706787 178.16731262]
[-182.47073364 166.43638611]
[-185.17494202 151.31742859]
[-179.94230652 136.87738037]
[-168.18034363 127.00053406]
[-153.05299377 124.34371948]
[-138.62940979 129.62161255]
[-128.78948975 141.41445923]
[-114.02381897 138.77343750]
[-99.25815582 136.13240051]
[-84.49248505 133.49137878]
[-78.41393280 129.18331909]
[-69.37120819 130.95903015]
[-54.55073166 128.64529419]
[-39.73025131 126.33156586]
[-26.73104286 114.59256744]
[-9.60819721 121.26651764]
[5.15747166 118.62548828]
[19.92314148 115.98445892]
[26.00168991 111.67640686]
[35.04441452 113.45211792]
[49.86489487 111.13838196]
[64.68537140 108.82464600]
[65.87309265 94.73886871]
[72.17038727 82.90721893]
[82.05597687 74.98030853]
[76.54644775 61.02878189]
[71.03692627 47.07725525]
[65.52740479 33.12572479]
[50.46820831 29.38403893]
[40.51016617 17.48374176]
[39.48234940 2.00074434]
[47.77997589 -11.11142635]
[62.21243668 -16.81087303]
[77.23015594 -12.90604210]
[87.05851746 -0.89842016]
[87.91831207 14.59481621]
[79.47893524 27.61620140]
[84.98845673 41.56772995]
[90.49797821 55.51926041]
[96.00750732 69.47078705]
[109.19470978 70.61581421]
[120.68245697 77.19191742]
[128.34747314 87.98361969]
[143.16795349 85.66988373]
[157.98843384 83.35615540]
[166.25042725 73.38435364]
[178.69775391 71.79879761]
[188.54359436 78.91114807]
[203.41163635 76.92583466]
[218.27967834 74.94052887]
[230.93437195 65.44479370]
[244.57374573 71.42951965]
[259.44177246 69.44421387]
[274.30981445 67.45890808]
[289.17785645 65.47359467]
[293.39846802 55.52528000]
[301.33685303 48.31307220]
[311.48837280 45.11215973]
[321.96679688 46.44599915]
[330.85494995 52.00201035]
[336.55523682 60.70139313]
[351.52221680 59.70655060]
[358.36648560 46.02798843]
[371.05471802 37.66701508]
[386.12420654 36.78545761]
[399.52197266 43.52009964]
[407.69485474 55.97278976]
[422.66183472 54.97794724]
[437.62881470 53.98310089]
[452.59579468 52.98825836]
[467.56274414 51.99341202]
[482.52972412 50.99856949]
[494.13592529 39.92265701]
[510.01165771 42.23370361]
[517.97839355 56.15887070]
[511.92477417 71.01596069]
[496.49459839 75.40789032]
[483.52456665 65.96554565]
[468.55758667 66.96038818]
[453.59063721 67.95523071]
[438.62365723 68.95007324]
[423.65667725 69.94492340]
[408.68969727 70.93976593]
[402.23687744 84.36461639]
[389.84832764 92.81326294]
[374.79473877 93.93395996]
[361.11154175 87.32588196]
[352.51705933 74.67352295]
[337.55007935 75.66836548]
[325.94015503 91.22771454]
[306.34362793 93.38956451]
[291.16317749 80.34163666]
[276.29513550 82.32694244]
[261.42709351 84.31224823]
[246.55905151 86.29756165]
[234.96780396 95.65129089]
[220.26498413 89.80857086]
[205.39694214 91.79387665]
[190.52890015 93.77918243]
[177.27317810 105.22774506]
[160.30216980 98.17663574]
[145.48168945 100.49036407]
[130.66120911 102.80410004]
[125.97459412 119.79825592]
[112.14624786 132.32327271]
[92.74607086 135.67041016]
[91.09016418 150.57872009]
[89.43424988 165.48704529]
[87.77834320 180.39535522]
[86.12243652 195.30368042]
[97.68267822 205.65454102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 140]
[8 139]
[9 138]
[10 137]
[11 136]
[12 52]
[13 51]
[14 50]
[15 48]
[16 47]
[17 46]
[20 44]
[21 43]
[22 42]
[23 40]
[24 39]
[25 38]
[26 37]
[55 70]
[56 69]
[57 68]
[58 67]
[73 133]
[74 132]
[75 131]
[78 129]
[79 128]
[80 127]
[82 125]
[83 124]
[84 123]
[85 122]
[91 119]
[92 118]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
