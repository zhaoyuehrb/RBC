%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGGCGAGUCUGCAGACGGCCGUGGCUCCUCUGUUCUUCCCGAGGCUACAGCAACAGCCAGAGGUGUUCCUGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[6.43378305 122.31670380]
[2.26810861 119.52024078]
[-12.72907066 119.81111145]
[-27.72624969 120.10198212]
[-42.72343063 120.39285278]
[-57.72061157 120.68372345]
[-72.71778870 120.97459412]
[-86.36533356 128.97804260]
[-99.24024200 121.48899078]
[-114.23742676 121.77986145]
[-129.23460388 122.07073212]
[-144.23178101 122.36160278]
[-159.22895813 122.65247345]
[-175.70726013 133.95292664]
[-192.40515137 124.52019501]
[-207.33470154 125.97235870]
[-218.59669495 137.39808655]
[-234.53567505 135.57369995]
[-242.92462158 121.89871216]
[-237.32826233 106.86341858]
[-222.03962708 102.00159454]
[-208.78686523 111.04281616]
[-193.85731506 109.59065247]
[-187.88435364 100.91068268]
[-177.85929871 97.00396729]
[-167.15353394 99.45276642]
[-159.51983643 107.65529633]
[-144.52265930 107.36442566]
[-129.52548218 107.07355499]
[-114.52829742 106.78268433]
[-99.53111267 106.49181366]
[-86.95627594 98.50917053]
[-73.00865936 105.97740936]
[-58.01147842 105.68653870]
[-43.01430130 105.39567566]
[-28.01712036 105.10480499]
[-13.01994133 104.81393433]
[1.97723854 104.52306366]
[16.95186043 103.65088654]
[31.88140297 102.19872284]
[46.81094360 100.74656677]
[61.74048615 99.29440308]
[76.67002869 97.84223938]
[91.59957123 96.39007568]
[87.65808868 84.47727966]
[94.57967377 69.96596527]
[112.75243378 60.81568146]
[126.02385712 53.82502747]
[139.29528809 46.83437347]
[152.56671143 39.84372330]
[154.65248108 24.46746826]
[165.40216064 13.27710342]
[180.68225098 10.57555008]
[194.61726379 17.40161133]
[201.84889221 31.13052559]
[199.59643555 46.48324966]
[188.72601318 57.55634308]
[173.41751099 60.09197617]
[159.55735779 53.11515045]
[146.28593445 60.10580063]
[133.01451111 67.09645081]
[119.74308777 74.08710480]
[119.01700592 81.55187988]
[117.56484222 96.48142242]
[116.83876038 103.94618988]
[128.51423645 113.36337280]
[140.18971252 122.78055573]
[156.46669006 124.77856445]
[162.62490845 139.97752380]
[152.32931519 152.74205017]
[136.17114258 149.94108582]
[130.77252197 134.45602417]
[119.09705353 125.03884888]
[107.42157745 115.62166595]
[93.05173492 111.31961823]
[78.12219238 112.77178192]
[63.19264984 114.22394562]
[48.26310730 115.67610168]
[33.33356476 117.12826538]
[18.40402412 118.58042908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 38]
[3 37]
[4 36]
[5 35]
[6 34]
[7 33]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[15 23]
[16 22]
[39 80]
[40 79]
[41 78]
[42 77]
[43 76]
[44 75]
[47 62]
[48 61]
[49 60]
[50 59]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
