%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCGGCCGGACUGAGUUCGCUGCUGUCCCGGUUCCUCUCGAGUCGGCUCCAACUGCCAGCCCGGGUUGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[46.63146973 123.37699890]
[32.09046555 127.05928040]
[23.97246742 140.35348511]
[9.17336559 143.88070679]
[-3.45059729 136.05949402]
[-17.99160194 139.74177551]
[-32.53260422 143.42407227]
[-47.07360840 147.10635376]
[-61.45001984 151.38638306]
[-75.63728333 156.25688171]
[-89.82453918 161.12738037]
[-104.01179504 165.99786377]
[-118.19905853 170.86836243]
[-131.21673584 181.73004150]
[-145.25759888 172.22792053]
[-140.01371765 156.10533142]
[-123.06954956 156.68110657]
[-108.88228607 151.81060791]
[-94.69503021 146.94010925]
[-80.50777435 142.06962585]
[-66.32051086 137.19912720]
[-63.35728455 133.11779785]
[-57.67451477 131.03196716]
[-50.75588989 132.56533813]
[-36.21488571 128.88305664]
[-21.67388344 125.20077515]
[-7.13287973 121.51849365]
[0.24708463 108.63161469]
[14.94127464 104.69011688]
[28.40818405 112.51828003]
[42.94918823 108.83599091]
[57.41098404 104.85398102]
[71.78739929 100.57393646]
[86.16381073 96.29389191]
[95.91285706 86.27153778]
[109.55614471 89.32969666]
[123.93255615 85.04965210]
[136.09370422 71.40360260]
[152.95616150 75.79142761]
[167.14343262 70.92093658]
[181.33068848 66.05044556]
[195.51794434 61.17995453]
[206.05809021 49.38097382]
[220.60806274 52.56650543]
[234.79531860 47.69601440]
[245.33546448 35.89703369]
[259.88543701 39.08256531]
[274.07269287 34.21207428]
[288.25994873 29.34158325]
[293.70812988 14.68377686]
[307.32901001 7.00225973]
[322.69122314 9.92400837]
[332.54119873 22.06946373]
[332.22805786 37.70391083]
[321.89971924 49.44524384]
[306.43283081 51.74956512]
[293.13043213 43.52884293]
[278.94317627 48.39933395]
[264.75592041 53.26982498]
[255.23054504 64.72043610]
[239.66580200 61.88327408]
[225.47854614 66.75376129]
[215.95317078 78.20437622]
[200.38842773 75.36721039]
[186.20117188 80.23770142]
[172.01391602 85.10819244]
[157.82666016 89.97869110]
[152.10491943 100.84068298]
[140.09416199 104.91059113]
[128.21260071 99.42606354]
[113.83618927 103.70610809]
[104.08714294 113.72846222]
[90.44385529 110.67030334]
[76.06744385 114.95034790]
[61.69102859 119.23039246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[5 27]
[6 26]
[7 25]
[8 24]
[9 21]
[10 20]
[11 19]
[12 18]
[13 17]
[32 75]
[33 74]
[34 73]
[36 71]
[37 70]
[39 67]
[40 66]
[41 65]
[42 64]
[44 62]
[45 61]
[47 59]
[48 58]
[49 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
