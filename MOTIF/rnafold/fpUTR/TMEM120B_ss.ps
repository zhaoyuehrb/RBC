%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGCGCGCGUGGCUCUGGCUGCGCAGGAACAGCUGGUGCCUCCGAGGGCGGUCGGCGAGCGCGCGGGCGUGGGGCGCUGGGGGGCCGGUCGGGCAGCGCUGCGGGAGCAGCCGCCGGCACCGCCGCCUUGCACCAUCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[33.20167160 160.88850403]
[20.69343567 152.60937500]
[15.28423500 138.61865234]
[18.96991158 124.07850647]
[30.39004326 114.35406494]
[15.41204166 113.54198456]
[1.21321905 120.52080536]
[-11.07649803 112.10581207]
[-26.05449867 111.29373169]
[-41.03250122 110.48164368]
[-56.01050186 109.66956329]
[-70.98850250 108.85748291]
[-85.96650696 108.04539490]
[-94.77983856 110.72020721]
[-101.25913239 107.04999542]
[-116.21601868 105.91361237]
[-131.17291260 104.77722931]
[-146.15090942 103.96514893]
[-161.14299011 103.47774506]
[-176.13507080 102.99034119]
[-191.12715149 102.50293732]
[-206.11923218 102.01553345]
[-221.11131287 101.52812958]
[-236.10339355 101.04073334]
[-246.26872253 114.51536560]
[-262.29574585 119.25533295]
[-277.84356689 113.59083557]
[-286.88244629 99.92841339]
[-301.88159180 99.76591492]
[-316.88070679 99.60342407]
[-324.27047729 107.71120453]
[-334.69906616 110.31885529]
[-344.61956787 106.79088593]
[-350.79562378 98.53710175]
[-365.77362061 97.72501373]
[-380.14602661 105.62219238]
[-394.02926636 96.89363861]
[-393.14144897 80.51853943]
[-378.39587402 73.34220123]
[-364.96151733 82.74701691]
[-349.98352051 83.55909729]
[-333.50299072 73.52880096]
[-316.71820068 84.60430145]
[-301.71908569 84.76679993]
[-286.71997070 84.92929077]
[-279.75622559 73.49070740]
[-267.94601440 66.95075989]
[-254.33850098 67.12075806]
[-242.50820923 74.06352234]
[-235.61598206 86.04865265]
[-220.62390137 86.53605652]
[-205.63183594 87.02346039]
[-190.63975525 87.51085663]
[-175.64767456 87.99826050]
[-160.65559387 88.48566437]
[-145.66351318 88.97306824]
[-141.58087158 86.36712646]
[-135.80430603 86.34955597]
[-130.03652954 89.82033539]
[-115.07963562 90.95671844]
[-100.12274933 92.09310150]
[-85.15441895 93.06739807]
[-70.17642212 93.87947845]
[-55.19841766 94.69155884]
[-40.22041702 95.50364685]
[-25.24241638 96.31572723]
[-10.26441479 97.12781525]
[2.86308074 90.09090424]
[16.22412491 98.56398010]
[31.20212555 99.37606049]
[46.19420624 98.88866425]
[61.08782959 97.10543060]
[75.98146057 95.32219696]
[90.87508392 93.53897095]
[105.74851990 91.59450531]
[120.60001373 89.48902893]
[133.17752075 79.89126587]
[146.86483765 85.76550293]
[161.71632385 83.66003418]
[174.29383850 74.06227112]
[187.98115540 79.93650818]
[202.83264160 77.83103180]
[217.68414307 75.72555542]
[230.26164246 66.12779999]
[243.94895935 72.00203705]
[258.80044556 69.89656067]
[273.65194702 67.79108429]
[281.77999878 63.45927811]
[288.84762573 65.80448914]
[303.74127197 64.02126312]
[318.63488770 62.23802948]
[329.15472412 48.30560684]
[346.15734863 46.29459763]
[359.11694336 56.96063232]
[373.96844482 54.85515976]
[388.81994629 52.74968338]
[394.89993286 43.61850739]
[404.81484985 39.46521378]
[415.15451050 41.45386887]
[422.50665283 48.67982483]
[437.43539429 47.21967697]
[452.36416626 45.75952530]
[467.29293823 44.29937744]
[482.22171021 42.83922577]
[495.23602295 32.86127853]
[510.27862549 39.39212799]
[511.87496948 55.71339417]
[498.38287354 65.03515625]
[483.68185425 57.76799011]
[468.75308228 59.22813797]
[453.82431030 60.68828964]
[438.89556885 62.14843750]
[423.96679688 63.60858917]
[409.19082642 76.01366425]
[390.92541504 67.60118103]
[376.07391357 69.70665741]
[361.22241211 71.81213379]
[354.96780396 83.12661743]
[343.15222168 88.83720398]
[330.01571655 86.64458466]
[320.41812134 77.13165283]
[305.52450562 78.91488647]
[290.63085938 80.69812012]
[275.75741577 82.64258575]
[260.90594482 84.74805450]
[246.05442810 86.85353088]
[234.53921509 96.30069733]
[219.78961182 90.57705688]
[204.93812561 92.68253326]
[190.08662415 94.78800201]
[178.57139587 104.23516846]
[163.82180786 98.51152802]
[148.97030640 100.61700439]
[137.45507812 110.06416321]
[122.70549011 104.34052277]
[107.85398865 106.44599915]
[100.89098358 110.63336945]
[92.65830994 108.43259430]
[77.76468658 110.21582794]
[62.87106323 111.99905396]
[47.97743607 113.78228760]
[60.00540543 122.74487305]
[64.62739563 137.01502991]
[60.13803101 151.32745361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 70]
[6 69]
[8 67]
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[15 61]
[16 60]
[17 59]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[28 45]
[29 44]
[30 43]
[34 41]
[35 40]
[71 141]
[72 140]
[73 139]
[74 138]
[75 136]
[76 135]
[78 133]
[79 132]
[81 130]
[82 129]
[83 128]
[85 126]
[86 125]
[87 124]
[89 123]
[90 122]
[91 121]
[94 117]
[95 116]
[96 115]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
