%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGUCUCUCGCUGACGCCAGAGAUCCAGCUAUCGUCUUCACUGCUCUGUGCCGUCAGCUCCUAGAGGCCCAGCCUCUGUGGCCCUGUGACCUGCAGGUAUUAGGAGGGUCACAGCUAGGACGCCGGGACCCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[124.72489929 205.53578186]
[113.76529694 215.77722168]
[99.78587341 221.21559143]
[84.78655243 221.07286072]
[70.91315460 215.36946106]
[60.15041733 204.92132568]
[54.03807831 191.22317505]
[53.45056915 176.23469543]
[58.47194672 162.10012817]
[68.38384247 150.84161377]
[81.76824951 144.06977844]
[96.71214294 142.75361633]
[81.73297882 143.54391479]
[66.75381470 144.33422852]
[51.77464676 145.12452698]
[36.79547882 145.91482544]
[21.81631470 146.70513916]
[6.84631157 147.65330505]
[-8.11286354 148.75923157]
[-23.05954742 150.02281189]
[-37.99208069 151.44387817]
[-52.92461395 152.86494446]
[-67.85714722 154.28602600]
[-82.78968048 155.70709229]
[-87.14822388 158.81979370]
[-91.79943848 159.80300903]
[-95.86627197 158.91108704]
[-98.70643616 156.71522522]
[-113.69892883 157.18954468]
[-128.69143677 157.66386414]
[-134.82855225 171.63879395]
[-146.42698669 181.56044006]
[-161.18385315 185.45886230]
[-176.16915894 182.56002808]
[-188.40757751 173.43949890]
[-195.46913147 159.90815735]
[-195.95178223 144.65267944]
[-189.75967407 130.70202637]
[-178.12225342 120.82613373]
[-163.35015869 116.98585510]
[-148.37637329 119.94367981]
[-136.17398071 129.11233521]
[-129.16575623 142.67137146]
[-114.17325592 142.19705200]
[-99.18075562 141.72273254]
[-84.21075439 140.77455139]
[-69.27822113 139.35348511]
[-54.34568405 137.93241882]
[-39.41315079 136.51135254]
[-24.48061752 135.09027100]
[-18.07648087 131.29989624]
[-9.21879578 133.80006409]
[5.74037933 132.69413757]
[12.22300625 129.03959656]
[21.02601051 131.72596741]
[36.00517654 130.93566895]
[50.98434448 130.14535522]
[65.96350861 129.35505676]
[80.94267273 128.56475830]
[95.92184448 127.77445221]
[74.75592804 103.45967102]
[90.70508575 79.08452606]
[89.44151306 64.13784790]
[88.02043915 49.20531082]
[86.44203186 34.28858948]
[84.86361694 19.37186623]
[83.28520966 4.45514297]
[81.70679474 -10.46158028]
[80.12838745 -25.37830353]
[78.54997253 -40.29502487]
[70.87049103 -55.40998077]
[83.26885986 -66.97357941]
[97.81275940 -58.26087189]
[93.46669769 -41.87343597]
[95.04510498 -26.95671463]
[96.62351990 -12.03999138]
[98.20192719 2.87673187]
[99.78034210 17.79345512]
[101.35874939 32.71017838]
[102.93716431 47.62689972]
[106.79485321 53.99072266]
[104.38819885 62.87427139]
[105.65176392 77.82096100]
[118.50093842 83.76235962]
[126.15657043 96.86214447]
[124.87982178 113.00177002]
[138.36480713 106.43251801]
[151.84980774 99.86327362]
[165.33479309 93.29402161]
[178.81977844 86.72476959]
[192.30477905 80.15552521]
[205.78976440 73.58627319]
[219.27474976 67.01702118]
[232.75975037 60.44777298]
[232.19322205 45.22939682]
[237.87156677 31.09871483]
[248.81098938 20.50394821]
[263.11614990 15.28070736]
[278.30859375 16.33395004]
[291.75616455 23.48119354]
[301.12893677 35.48413849]
[304.80307007 50.26319885]
[302.14199829 65.25781250]
[293.60671997 77.87007904]
[280.67608643 85.91483307]
[265.59036255 87.99829102]
[250.96324158 83.75946045]
[239.32899475 73.93276215]
[225.84400940 80.50201416]
[212.35900879 87.07126617]
[198.87402344 93.64051056]
[185.38903809 100.20976257]
[171.90403748 106.77901459]
[158.41905212 113.34825897]
[144.93406677 119.91751099]
[131.44906616 126.48676300]
[128.61972046 141.21749878]
[138.71139526 152.31515503]
[148.80307007 163.41281128]
[158.89474487 174.51048279]
[168.98643494 185.60813904]
[184.31250000 184.05328369]
[197.46170044 191.73129272]
[203.49708557 205.51673889]
[200.29605103 220.03883362]
[210.38772583 231.13648987]
[220.47941589 242.23414612]
[230.57109070 253.33181763]
[240.66276550 264.42947388]
[256.44018555 268.90216064]
[260.19256592 284.86624146]
[248.05973816 295.89923096]
[232.52296448 290.65133667]
[229.56510925 274.52114868]
[219.47343445 263.42349243]
[209.38174438 252.32583618]
[199.29006958 241.22816467]
[189.19839478 230.13050842]
[174.43835449 231.94134521]
[161.28669739 224.62710571]
[154.88894653 210.80964661]
[157.88876343 195.69981384]
[147.79708862 184.60215759]
[137.70541382 173.50450134]
[127.61373138 162.40684509]
[117.52205658 151.30917358]
[127.21791840 162.75427246]
[131.96942139 176.98182678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[28 45]
[29 44]
[30 43]
[62 83]
[63 82]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[117 146]
[118 145]
[119 144]
[120 143]
[121 142]
[125 138]
[126 137]
[127 136]
[128 135]
[129 134]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
