%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCCCGCCAGGGCAGCCCGGGAGGCCAGACGCUGGCGCUGCAGGGAGAGGGCGGUGGGCGCAUCCGCUAGGGGGCGCGGCGGGGCGGGGCGCACCUUUCGGCGGGCCUCGCGG\
) } def
/len { sequence length } bind def

/coor [
[83.12637329 105.27030945]
[68.26368713 103.24530792]
[53.40100861 101.22030640]
[38.53832245 99.19530487]
[23.67563820 97.17030334]
[8.78689766 95.34674835]
[-6.12517214 93.72496033]
[-21.03724098 92.10317230]
[-35.94931030 90.48139191]
[-50.86138153 88.85960388]
[-56.77998734 99.57219696]
[-65.97676086 107.59436798]
[-77.32869720 111.97820282]
[-89.46038818 112.21815491]
[-100.91068268 108.30919647]
[-110.30863190 100.74457550]
[-116.53767395 90.45368195]
[-118.86824036 78.68793488]
[-133.59948730 75.86125183]
[-148.33074951 73.03456879]
[-159.66122437 83.47136688]
[-174.78781128 85.21481323]
[-187.88557434 77.80452728]
[-194.03474426 64.26473999]
[-208.76600647 61.43806458]
[-223.53417969 58.81111908]
[-238.33657837 56.38438797]
[-253.13897705 53.95765686]
[-267.94137573 51.53092957]
[-282.74377441 49.10419846]
[-299.35244751 52.50839996]
[-307.22134399 37.49118423]
[-294.96932983 25.77262497]
[-280.31704712 34.30179977]
[-265.51464844 36.72853088]
[-250.71224976 39.15526199]
[-235.90985107 41.58198929]
[-221.10745239 44.00872040]
[-213.90200806 41.95831299]
[-205.93933105 46.70681000]
[-191.20806885 49.53348923]
[-180.48403931 39.23138809]
[-165.57368469 37.19538498]
[-152.16676331 44.41394043]
[-145.50407410 58.30331802]
[-130.77281189 61.12999725]
[-116.04155731 63.95667648]
[-104.98416138 49.78816605]
[-88.23342133 43.04723358]
[-70.27846527 45.63089371]
[-55.97666550 56.92499924]
[-49.23959351 73.94753265]
[-34.32752609 75.56932068]
[-19.41545677 77.19110870]
[-4.50338697 78.81288910]
[10.40868282 80.43467712]
[17.49255753 77.99717712]
[25.70063972 82.30762482]
[40.56332397 84.33261871]
[55.42600632 86.35762024]
[70.28868866 88.38262177]
[85.15137482 90.40762329]
[92.83432007 83.83991241]
[102.85990906 82.55533600]
[111.95051575 86.97385406]
[117.13420868 95.65093994]
[131.86546326 98.47762299]
[146.59671021 101.30429840]
[161.32797241 104.13098145]
[166.50895691 102.31544495]
[171.35563660 102.72131348]
[175.04989624 104.82103729]
[177.11851501 107.83161163]
[191.57177734 111.84453583]
[206.02502441 115.85746002]
[220.47827148 119.87039185]
[234.93151855 123.88331604]
[250.29862976 120.11997223]
[260.49203491 130.98016357]
[274.94528198 134.99308777]
[290.31237793 131.22973633]
[300.50579834 142.08992004]
[314.95904541 146.10284424]
[329.41229248 150.11576843]
[343.86557007 154.12869263]
[358.31881714 158.14163208]
[367.56216431 157.42549133]
[373.10629272 162.46386719]
[387.44558716 166.86669922]
[401.28970337 159.24333191]
[416.44604492 163.72225952]
[423.92263794 177.64620972]
[419.28372192 192.75434875]
[405.28149414 200.08329773]
[390.22323608 195.28489685]
[383.04275513 181.20597839]
[368.70346069 176.80314636]
[354.30587769 172.59487915]
[339.85263062 168.58195496]
[325.39938354 164.56903076]
[310.94613647 160.55610657]
[296.49288940 156.54318237]
[282.15957642 160.59355164]
[270.93237305 149.44633484]
[256.47912598 145.43341064]
[242.14579773 149.48377991]
[230.91859436 138.33656311]
[216.46534729 134.32363892]
[202.01210022 130.31071472]
[187.55883789 126.29779053]
[173.10559082 122.28486633]
[158.50129700 118.86223602]
[143.77003479 116.03556061]
[129.03878784 113.20887756]
[114.30752563 110.38219452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 56]
[7 55]
[8 54]
[9 53]
[10 52]
[18 47]
[19 46]
[20 45]
[24 41]
[25 40]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[66 115]
[67 114]
[68 113]
[69 112]
[73 111]
[74 110]
[75 109]
[76 108]
[77 107]
[79 105]
[80 104]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
