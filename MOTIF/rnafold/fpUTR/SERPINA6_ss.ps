%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCACCGCAGGCUUACUGUACACAUGCUAGGGUCCAGGACAGCAGGACCAAGCCAGCAGAAACAGCCUGAGCCCACCGCAGACUGGCCUGGCUAUACUGGACA\
) } def
/len { sequence length } bind def

/coor [
[68.14885712 189.36718750]
[76.39214325 175.19042969]
[75.94341278 160.19714355]
[75.49468231 145.20385742]
[75.04594421 130.21057129]
[74.90357971 118.54608154]
[78.53859711 108.88307953]
[84.91897583 102.25551605]
[92.76279449 99.30658722]
[82.23582458 88.62094879]
[71.70885468 77.93530273]
[61.18188477 67.24966431]
[50.65491867 56.56402206]
[40.12794876 45.87837982]
[21.32552719 46.56230545]
[8.09821033 33.62831497]
[8.35181713 15.44493198]
[-2.79535508 5.40797329]
[-13.94252777 -4.62898588]
[-25.08970070 -14.66594505]
[-34.56650543 -11.25564289]
[-44.57274246 -11.62631989]
[-53.66413498 -15.68068314]
[-60.54479218 -22.79290771]
[-64.25189972 -31.90484047]
[-64.29032135 -41.68329620]
[-60.69824982 -50.71508789]
[-70.56732941 -62.01116180]
[-80.43640900 -73.30723572]
[-93.33266449 -74.98778534]
[-101.31731415 -84.73776245]
[-100.47709656 -96.90801239]
[-110.00382996 -108.49427032]
[-119.53057098 -120.08052063]
[-129.05731201 -131.66677856]
[-138.58404541 -143.25303650]
[-153.89366150 -141.35067749]
[-167.79153442 -148.04791260]
[-175.84286499 -161.20768738]
[-175.47853088 -176.63073730]
[-166.81478882 -189.39566040]
[-152.61619568 -195.42918396]
[-137.41346741 -192.80604553]
[-126.05776215 -182.36328125]
[-122.17262268 -167.43313599]
[-126.99778748 -152.77976990]
[-117.47105408 -141.19351196]
[-107.94431305 -129.60725403]
[-98.41757965 -118.02100372]
[-88.89084625 -106.43475342]
[-72.19671631 -101.25749207]
[-69.14033508 -83.17631531]
[-59.27125549 -71.88024139]
[-49.40217590 -60.58417130]
[-29.11831474 -61.18450165]
[-14.53380871 -46.66844559]
[-15.05274105 -25.81311798]
[-3.90556836 -15.77615833]
[7.24160385 -5.73919916]
[18.38877678 4.29776001]
[29.57305145 1.21992755]
[40.95325089 4.02565956]
[49.60175705 12.11477757]
[53.23453522 23.51266861]
[50.81359100 35.35141373]
[61.34056091 46.03705215]
[71.86753082 56.72269440]
[82.39449310 67.40833282]
[92.92146301 78.09397888]
[103.44843292 88.77961731]
[116.54955292 96.08444977]
[131.17347717 99.42226410]
[145.79739380 102.76007843]
[160.42131042 106.09789276]
[174.96923828 96.52607727]
[191.62976074 100.28291321]
[200.31361389 114.59823608]
[215.03083801 117.49707794]
[229.74806213 120.39591217]
[243.81814575 112.68796539]
[258.56079102 119.01522827]
[262.66668701 134.52397156]
[252.98616028 147.31721497]
[236.94528198 147.58106995]
[226.84922791 135.11314392]
[212.13200378 132.21430969]
[197.41477966 129.31546021]
[187.73814392 137.96710205]
[174.64447021 139.43658447]
[162.94856262 132.95565796]
[157.08349609 120.72180939]
[142.45957947 117.38399506]
[127.83566284 114.04618073]
[113.21174622 110.70837402]
[107.41861725 115.47174072]
[116.94517517 127.05814362]
[105.35862732 136.58451843]
[95.83235931 124.99847412]
[90.03923035 129.76184082]
[90.48796844 144.75512695]
[90.93669891 159.74841309]
[91.38542938 174.74169922]
[100.46179199 188.40010071]
[92.93007660 202.96736145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 102]
[3 101]
[4 100]
[5 99]
[9 70]
[10 69]
[11 68]
[12 67]
[13 66]
[14 65]
[17 60]
[18 59]
[19 58]
[20 57]
[27 54]
[28 53]
[29 52]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[71 94]
[72 93]
[73 92]
[74 91]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
