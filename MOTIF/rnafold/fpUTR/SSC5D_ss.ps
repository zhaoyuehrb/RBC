%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCCCUCUCUCCCCAGCUGCCUCCUCCUCUUCUCUCCCCGCUCUCCUUCCCCUUUCACCCCAUCCCCUGCCCUGGCUGCAACC\
) } def
/len { sequence length } bind def

/coor [
[108.22558594 208.66360474]
[99.02980804 220.60935974]
[87.24200439 230.00675964]
[73.54748535 236.30943298]
[58.74245071 239.15097046]
[43.68763351 238.36614990]
[29.25830650 234.00061035]
[16.29336739 226.30815125]
[5.54658556 215.73602295]
[-2.35723782 202.89884949]
[-6.95858479 188.54296875]
[-7.98993826 173.50303650]
[-5.39133739 158.65342712]
[0.68613899 144.85749817]
[9.88915443 132.91731262]
[21.68265724 123.52706909]
[35.38098907 117.23269653]
[50.18774796 114.40013885]
[65.24208069 115.19408417]
[79.66876221 119.56837463]
[87.32281494 106.66815948]
[87.68120575 92.69091797]
[99.77696991 85.67778778]
[107.43102264 72.77758026]
[115.08507538 59.87736511]
[103.14640045 50.76777267]
[92.34603882 40.33375549]
[82.83005524 28.71641922]
[74.72713470 16.07287598]
[68.14685822 2.57411766]
[63.17821884 -11.59730339]
[59.88841629 -26.24973488]
[58.32194138 -41.18501663]
[58.49997330 -56.20116806]
[60.42010498 -71.09511566]
[64.05637360 -85.66542816]
[69.35960388 -99.71506500]
[76.25806427 -113.05402374]
[84.65847015 -125.50189972]
[94.44721985 -136.89035034]
[105.49192047 -147.06538391]
[117.64321136 -155.88935852]
[130.73675537 -163.24296570]
[144.59548950 -169.02674866]
[159.03198242 -173.16247559]
[173.85099792 -175.59423828]
[188.85211182 -176.28913879]
[203.83247375 -175.23777771]
[218.58947754 -172.45437622]
[232.92355347 -167.97657776]
[246.64085388 -161.86492920]
[259.55587769 -154.20210266]
[271.49392700 -145.09172058]
[282.29360962 -134.65698242]
[291.80880737 -123.03900146]
[299.91088867 -110.39492035]
[306.49026489 -96.89572144]
[311.45794678 -82.72396851]
[314.74676514 -68.07131958]
[316.31225586 -53.13593292]
[316.13320923 -38.11979294]
[314.21209717 -23.22597504]
[310.57485962 -8.65590382]
[305.27069092 5.39337969]
[298.37133789 18.73187447]
[289.97009277 31.17919159]
[280.18060303 42.56699753]
[269.13522339 52.74127960]
[256.98333740 61.56444931]
[243.88929749 68.91718292]
[230.03018188 74.70003510]
[215.59341431 78.83480835]
[200.77423096 81.26557922]
[185.77307129 81.95948029]
[170.79278564 80.90711975]
[156.03596497 78.12272644]
[141.70217896 73.64397430]
[127.98529053 67.53141785]
[120.33123779 80.43162537]
[112.67718506 93.33184052]
[112.31879425 107.30908203]
[100.22303009 114.32221222]
[92.56897736 127.22241974]
[103.32216644 137.78804016]
[111.23377228 150.62042236]
[115.84381866 164.97349548]
[116.88429260 180.01281738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 83]
[21 82]
[23 80]
[24 79]
[25 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
