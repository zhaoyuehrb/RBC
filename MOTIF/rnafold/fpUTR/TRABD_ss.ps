%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGCAGCCUCCCGCCCGGCUGCACAGGAGUUUCUUUAAGGAGUUUCCCCGGUGUGCCUCGGCAGCCUUGCGCUGCUCUAAUGGUCCGGACUUCCGUGUGCUCCCCACAGGUGCAGGAAGCCGCCGCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[121.68062592 146.81225586]
[106.52302551 151.17506409]
[90.75566101 150.75410461]
[75.85243988 145.58871460]
[66.97885132 157.68249512]
[58.10527039 169.77627563]
[49.23168945 181.87005615]
[40.35810471 193.96383667]
[31.48452187 206.05761719]
[36.33840179 220.79598999]
[31.57022858 235.56230164]
[19.01346397 244.67861938]
[3.49643731 244.63954163]
[-9.01423550 235.46006775]
[-13.70794678 220.66990662]
[-8.77986908 205.95619202]
[3.87505269 196.97662354]
[19.39074135 197.18403625]
[28.26432419 185.09025574]
[37.13790894 172.99647522]
[46.01148987 160.90269470]
[54.88507462 148.80891418]
[63.75865555 136.71513367]
[56.94696426 128.42309570]
[51.99812317 118.90122223]
[49.12626648 108.56150818]
[48.45565414 97.85135651]
[33.71871567 95.05445862]
[18.98177719 92.25755310]
[4.24483919 89.46065521]
[-10.75601006 94.48908234]
[-21.81738091 84.51434326]
[-36.55431747 81.71744537]
[-51.29125595 78.92054749]
[-66.02819824 76.12364197]
[-81.32324219 82.03917694]
[-93.92227936 71.54173279]
[-90.86449432 55.43017960]
[-75.29547882 50.27870941]
[-63.23129272 61.38670349]
[-48.49435806 64.18360901]
[-33.75741959 66.98050690]
[-19.02048111 69.77740479]
[-5.07371473 64.54892731]
[7.04173994 74.72371674]
[21.77867889 77.52061462]
[36.51561737 80.31752014]
[51.25255585 83.11441803]
[56.62929535 72.06403351]
[64.46705627 62.59884644]
[74.32109833 55.25594711]
[68.82539368 41.29896927]
[63.32969666 27.34198761]
[57.21765900 20.42533112]
[57.87298203 12.99284935]
[52.70597839 -1.08912826]
[47.53897476 -15.17110538]
[34.60921478 -25.25839233]
[37.14784622 -41.45985413]
[52.54333878 -47.10881805]
[64.95813751 -36.39411163]
[61.62095261 -20.33810806]
[66.78795624 -6.25613117]
[71.95495605 7.82584620]
[77.28667450 21.84628868]
[82.78237915 35.80326843]
[88.27807617 49.76024628]
[105.95409393 48.75563431]
[122.92887115 53.78633118]
[137.20320129 64.25984955]
[147.09591675 78.94266510]
[151.44189453 96.10551453]
[166.40481567 97.15965271]
[181.36772156 98.21379852]
[196.33064270 99.26793671]
[186.96539307 87.55076599]
[187.12591553 72.55162811]
[196.73977661 61.03756714]
[211.46957397 58.20329666]
[224.66976929 65.32752991]
[230.38493347 79.19609070]
[226.03660583 93.55199432]
[213.58724976 101.91823578]
[228.17689514 105.40281677]
[242.76652527 108.88739777]
[260.23608398 103.20394897]
[272.54699707 115.65415192]
[287.21432495 118.79575348]
[301.88165283 121.93736267]
[311.02462769 120.67127228]
[316.85409546 125.32835388]
[331.44375610 128.81294250]
[346.03338623 132.29751587]
[360.62304688 135.78210449]
[375.21267700 139.26667786]
[384.38284302 138.21527100]
[390.10153198 143.00773621]
[404.60546875 146.83337402]
[419.10943604 150.65902710]
[433.61337280 154.48466492]
[448.11730957 158.31030273]
[462.62127686 162.13594055]
[475.29046631 152.96940613]
[490.88397217 154.14260864]
[502.03903198 165.10157776]
[503.48852539 180.67182922]
[494.54809570 193.50157166]
[479.43908691 197.53300476]
[465.29556274 190.86257935]
[458.79562378 176.63989258]
[444.29168701 172.81425476]
[429.78771973 168.98860168]
[415.28378296 165.16296387]
[400.77984619 161.33732605]
[386.27587891 157.51168823]
[371.72808838 153.85632324]
[357.13845825 150.37173462]
[342.54879761 146.88716125]
[327.95916748 143.40258789]
[313.36953735 139.91799927]
[298.74002075 136.60467529]
[284.07272339 133.46307373]
[269.40539551 130.32147217]
[259.02462769 136.64482117]
[246.73208618 134.08064270]
[239.28195190 123.47703552]
[224.69230652 119.99245453]
[210.10266113 116.50787354]
[195.27650452 114.23085785]
[180.31358337 113.17671204]
[165.35067749 112.12256622]
[150.38775635 111.06842804]
[144.68835449 125.77570343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 23]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[51 67]
[52 66]
[53 65]
[55 64]
[56 63]
[57 62]
[72 132]
[73 131]
[74 130]
[75 129]
[83 128]
[84 127]
[85 126]
[87 123]
[88 122]
[89 121]
[91 120]
[92 119]
[93 118]
[94 117]
[95 116]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
