%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACAAUGCUGGGGAGAUGAAGAUAGUGUGUGGCUGCUUCUGGACUCAAGGAGGAGGAGAGAGAUUCCGCGAGCCGACACC\
) } def
/len { sequence length } bind def

/coor [
[7.51305628 222.49545288]
[4.33118916 237.21174622]
[-1.84119654 250.94474792]
[-10.73427105 263.09411621]
[-21.95926857 273.12869263]
[-35.02547836 280.60986328]
[-49.36170197 285.21057129]
[-64.34122467 286.72964478]
[-79.30919647 285.10073853]
[-93.61129761 280.39501953]
[-106.62229156 272.81823730]
[-117.77339172 262.70159912]
[-126.57712555 250.48733521]
[-132.64862061 236.70942688]
[-135.72247314 221.97019958]
[-135.66430664 206.91395569]
[-132.47663879 192.19891357]
[-126.29885864 178.46833801]
[-117.40100098 166.32247925]
[-106.17205811 156.29229736]
[-93.10291290 148.81628418]
[-78.76487732 144.22122192]
[-63.78475952 142.70802307]
[-48.81742477 144.34281921]
[-34.51717758 149.05416870]
[-21.50916862 156.63607788]
[-10.36204910 166.75711060]
[1.80649078 157.98632812]
[13.97503090 149.21554565]
[26.14356995 140.44476318]
[29.81939316 133.81408691]
[38.94266891 131.58264160]
[51.43439102 123.27861786]
[63.92611694 114.97459412]
[76.41783905 106.67056274]
[88.90956116 98.36653900]
[101.24190521 89.82760620]
[113.41044617 81.05682373]
[124.69583893 71.17552948]
[134.99710083 60.27214432]
[145.29837036 49.36875916]
[155.59963989 38.46537399]
[152.88822937 23.30112457]
[159.54804993 9.60805893]
[172.83666992 2.54570627]
[187.55952454 4.63740587]
[197.86079407 -6.26598120]
[208.16206360 -17.16936874]
[207.46299744 -32.95818710]
[218.19454956 -44.56031418]
[233.98988342 -45.09241486]
[245.47790527 -34.23879623]
[245.84297180 -18.43872452]
[234.86849976 -7.06610012]
[219.06546021 -6.86809826]
[208.76419067 4.03528881]
[198.46292114 14.93867493]
[201.38670349 29.51912498]
[195.08979797 43.18707657]
[181.79670715 50.61319351]
[166.50303650 48.76664352]
[156.20176697 59.67002869]
[145.90049744 70.57341766]
[135.59922791 81.47679901]
[135.85792542 84.04235077]
[135.12123108 86.87034607]
[133.28701782 89.58996582]
[130.38525391 91.80129242]
[126.58412170 93.12046814]
[122.18122864 93.22536469]
[110.01268768 101.99614716]
[105.70173645 109.06599426]
[97.21358490 110.85826111]
[84.72186279 119.16229248]
[72.23014069 127.46631622]
[59.73841858 135.77033997]
[47.24669266 144.07437134]
[34.91435242 152.61329651]
[22.74581337 161.38407898]
[10.57727432 170.15486145]
[-1.59126592 178.92564392]
[4.48565626 192.70115662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[27 81]
[28 80]
[29 79]
[30 78]
[32 77]
[33 76]
[34 75]
[35 74]
[36 73]
[37 71]
[38 70]
[39 64]
[40 63]
[41 62]
[42 61]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
