%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUUCUGGUUCCGGAAGGCCCCCCACAGGUGCCUUGGGCCUAGCUCUCACCUGGGCCCAGGGCAACACUGAAGAC\
) } def
/len { sequence length } bind def

/coor [
[121.76633453 133.94363403]
[114.06003571 137.79231262]
[105.71212006 139.91635132]
[97.10353088 140.21882629]
[88.62712097 138.68592834]
[80.66970825 135.38761902]
[73.59442902 130.47441101]
[67.72415161 124.17050934]
[63.32677460 116.76359558]
[48.76264572 120.35333252]
[40.56026840 133.59564209]
[25.73903465 137.02867126]
[13.16506577 129.12734985]
[-1.39906144 132.71708679]
[-12.84490395 144.46121216]
[-28.66971779 140.15921021]
[-32.59429169 124.23658752]
[-20.58135796 113.07318878]
[-4.98879623 118.15295410]
[9.57533073 114.56321716]
[17.03709984 101.72353363]
[31.75605774 97.87555695]
[45.17291260 105.78920746]
[59.73703766 102.19947052]
[65.13830566 79.73658752]
[81.98374939 63.92565536]
[104.74345398 59.95698166]
[125.94601440 69.13338470]
[137.56509399 59.64670181]
[149.18415833 50.16001892]
[160.60984802 40.44128799]
[171.83750916 30.49444962]
[182.86259460 20.32353401]
[193.68063354 9.93266964]
[204.49867249 -0.45819581]
[215.31669617 -10.84906101]
[226.13473511 -21.23992729]
[236.95277405 -31.63079262]
[247.77081299 -42.02165604]
[258.58883667 -52.41252136]
[269.40689087 -62.80338669]
[280.22491455 -73.19425201]
[291.04296875 -83.58512115]
[301.86099243 -93.97598267]
[312.67904663 -104.36685181]
[311.44964600 -119.95603180]
[320.57046509 -132.65818787]
[335.73489380 -136.47575378]
[349.78277588 -129.60618591]
[356.08111572 -115.29308319]
[351.65603638 -100.29466248]
[338.59692383 -91.69271088]
[323.06988525 -93.54881287]
[312.25186157 -83.15794373]
[301.43383789 -72.76708221]
[290.61578369 -62.37621689]
[279.79776001 -51.98535156]
[268.97970581 -41.59448624]
[258.16168213 -31.20362091]
[247.34364319 -20.81275558]
[236.52560425 -10.42188931]
[225.70756531 -0.03102439]
[214.88952637 10.35984135]
[204.07148743 20.75070572]
[193.25346375 31.14157104]
[190.53726196 38.24150085]
[181.78434753 41.72211075]
[170.55668640 51.66894913]
[167.55680847 58.65375519]
[158.67083740 61.77909470]
[147.05177307 71.26577759]
[135.43269348 80.75245667]
[138.71240234 88.71755219]
[140.22549438 97.19752502]
[139.90289307 105.80538177]
[137.75935364 114.14830780]
[133.89268494 121.84558868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[13 20]
[14 19]
[28 72]
[29 71]
[30 70]
[31 68]
[32 67]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
