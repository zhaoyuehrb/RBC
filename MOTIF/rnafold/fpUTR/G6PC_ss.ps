%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAGAGCAAUCACCACCAAGCCUGGAAUAACUGCAAGGGCUCUGCUGACAUCUUCCUGAGGUGCCAAGGAAAUGAGG\
) } def
/len { sequence length } bind def

/coor [
[216.99847412 172.03030396]
[215.64964294 163.19984436]
[202.11712646 156.72906494]
[188.58460999 150.25827026]
[175.05210876 143.78747559]
[161.51959229 137.31668091]
[147.98707581 130.84590149]
[134.45457458 124.37510681]
[120.92205811 117.90431213]
[107.38954926 111.43352509]
[117.90046692 122.13494873]
[121.86775208 136.60079956]
[118.28652191 151.16702271]
[108.06387329 162.14414978]
[93.78909302 166.75180054]
[79.07781219 163.82290649]
[67.65625763 154.09933472]
[62.41737366 140.04393005]
[64.68797302 125.21714783]
[50.16212463 121.47552490]
[35.63627625 117.73390961]
[19.99151993 122.65058136]
[8.09581089 111.36235809]
[12.18643284 95.48158264]
[28.05530548 91.34504700]
[39.37789154 103.20806122]
[53.90373993 106.94967651]
[68.42958832 110.69129944]
[73.78406525 105.43966675]
[60.48571014 98.50037384]
[62.97613907 83.70855713]
[77.81359863 81.50635529]
[84.49301147 94.93640900]
[89.84748077 89.68477631]
[86.38824463 75.08910370]
[74.74702454 63.53860474]
[79.19049835 47.75292969]
[95.14760590 43.97102737]
[106.20304108 56.08339310]
[100.98391724 71.62986755]
[104.44315338 86.22554016]
[113.86033630 97.90100861]
[127.39285278 104.37180328]
[140.92535400 110.84259033]
[154.45787048 117.31338501]
[167.99038696 123.78417206]
[181.52288818 130.25495911]
[195.05540466 136.72575378]
[208.58792114 143.19654846]
[222.12042236 149.66734314]
[244.02139282 145.71444702]
[256.67764282 163.13134766]
[271.04748535 167.43341064]
[285.41732788 171.73545837]
[294.80545044 171.21104431]
[300.25500488 176.49296570]
[314.44723511 181.34896851]
[328.63946533 186.20498657]
[342.83169556 191.06098938]
[357.02389526 195.91699219]
[369.05282593 186.25733948]
[384.39697266 184.65718079]
[398.16009521 191.62709045]
[405.95043945 204.94302368]
[405.28213501 220.35591125]
[396.36843872 232.94754028]
[382.05364990 238.69998169]
[366.90557861 235.77764893]
[355.75796509 225.11305237]
[352.16790771 210.10922241]
[337.97567749 205.25320435]
[323.78344727 200.39720154]
[309.59124756 195.54119873]
[295.39901733 190.68518066]
[281.11529541 186.10530090]
[266.74545288 181.80325317]
[252.37561035 177.50119019]
[245.95184326 182.99560547]
[237.74102783 185.37626648]
[229.18452454 184.14288330]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 50]
[3 49]
[4 48]
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[19 28]
[20 27]
[21 26]
[34 41]
[35 40]
[52 77]
[53 76]
[54 75]
[56 74]
[57 73]
[58 72]
[59 71]
[60 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
