%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:52:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGCAUCCAAAAGACGUAUCUGGAGGGAGAUUUUGUCUUUCCUGUGAGCAGCAGCAGCUUCCUACGGACCCUGCUGGAGCCCCAGCUCGGAUCAGCCCUUCUGACAGCA\
) } def
/len { sequence length } bind def

/coor [
[5.78978109 221.82777405]
[4.19666290 236.74293518]
[-2.53287053 250.14865112]
[-13.54159164 260.33728027]
[-27.42717743 266.01095581]
[-42.42084122 266.44692993]
[-56.61264420 261.58969116]
[-68.19479370 252.05796814]
[-75.69191742 239.06593323]
[-78.14901733 224.26853943]
[-75.25309753 209.55075073]
[-67.37304688 196.78732300]
[-55.51475525 187.60523987]
[-70.51330566 187.81373596]
[-85.51185608 188.02224731]
[-100.51040649 188.23075867]
[-115.50895691 188.43925476]
[-130.50750732 188.64776611]
[-145.50605774 188.85627747]
[-161.01295471 198.66468811]
[-176.01664734 189.67929077]
[-191.00361633 190.30464172]
[-205.99057007 190.92999268]
[-220.97752380 191.55535889]
[-231.49142456 203.35508728]
[-247.27412415 204.18087769]
[-258.96203613 193.54281616]
[-259.62091064 177.75227356]
[-248.85987854 166.17749023]
[-233.06324768 165.68557739]
[-221.60289001 176.56838989]
[-206.61592102 175.94303894]
[-191.62896729 175.31768799]
[-176.64201355 174.69232178]
[-168.14515686 165.95890808]
[-155.57028198 165.39540100]
[-145.71456909 173.85772705]
[-130.71601868 173.64921570]
[-115.71746826 173.44070435]
[-100.71891785 173.23220825]
[-85.72036743 173.02369690]
[-70.72181702 172.81518555]
[-55.72326279 172.60668945]
[-48.72688293 167.97576904]
[-39.38652802 169.15002441]
[-25.58893204 163.26560974]
[-11.79133701 157.38119507]
[2.00625825 151.49676514]
[10.67800808 139.38685608]
[26.40725327 141.09019470]
[40.20484924 135.20578003]
[48.87659836 123.09587097]
[64.60584259 124.79920959]
[78.40344238 118.91479492]
[94.17180634 71.43338776]
[102.44023895 58.91807175]
[110.70866394 46.40275574]
[118.97708893 33.88743973]
[127.24551392 21.37212563]
[135.51394653 8.85680962]
[132.56091309 -6.43754864]
[141.12455750 -19.01207161]
[155.72358704 -21.73307419]
[163.99201965 -34.24839020]
[172.26045227 -46.76370621]
[175.94664001 -63.31206894]
[192.86872864 -64.35098267]
[198.55152893 -48.37781525]
[184.77575684 -38.49528122]
[176.50733948 -25.97996521]
[168.23890686 -13.46464825]
[171.46315002 1.03155458]
[163.25607300 13.84165192]
[148.02925110 17.12523651]
[139.76083374 29.64055252]
[131.49240112 42.15586853]
[123.22397614 54.67118454]
[114.95555115 67.18650055]
[106.68712616 79.70181274]
[113.51555634 93.05743408]
[128.50251770 93.68279266]
[143.48947144 94.30815125]
[158.47642517 94.93350220]
[172.74932861 86.85782623]
[186.74026489 95.41268158]
[186.05657959 111.79756927]
[171.40158081 119.15712738]
[157.85107422 109.92046356]
[142.86412048 109.29510498]
[127.87715912 108.66974640]
[112.89019775 108.04439545]
[107.97821045 122.21733856]
[120.13792419 131.00035095]
[136.14157104 129.87643433]
[146.89186096 141.78485107]
[144.14210510 157.59049988]
[130.00167847 165.16862488]
[115.31790924 158.70593262]
[111.35491943 143.16006470]
[99.19519806 134.37705994]
[84.28785706 132.71238708]
[70.49026489 138.59680176]
[60.83161545 151.12760925]
[46.08926773 149.00337219]
[32.29167175 154.88780212]
[22.63302612 167.41860962]
[7.89067554 165.29437256]
[-5.90691948 171.17878723]
[-19.70451355 177.06320190]
[-33.50210953 182.94761658]
[-18.93879318 186.54064941]
[-6.56483078 195.01914978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[21 34]
[22 33]
[23 32]
[24 31]
[45 110]
[46 109]
[47 108]
[48 107]
[50 105]
[51 104]
[53 102]
[54 101]
[55 79]
[56 78]
[57 77]
[58 76]
[59 75]
[60 74]
[63 71]
[64 70]
[65 69]
[80 91]
[81 90]
[82 89]
[83 88]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
