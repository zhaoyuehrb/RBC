%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCCGGAUGAGGCAAUCGCGGACCCGGGUCAGGACCUGCCCACGGCUCUGCUGGGACUAGGAGCCCAGAACCAGUCCCUCGGCGCCGCAGGCGGCCAAACGCUAAGGACUACAUUUCCCACA\
) } def
/len { sequence length } bind def

/coor [
[182.32162476 222.81747437]
[171.14141846 212.81733704]
[159.96119690 202.81719971]
[148.78097534 192.81706238]
[137.60076904 182.81692505]
[126.42054749 172.81678772]
[115.24033356 162.81665039]
[104.06011963 152.81651306]
[92.87989807 142.81637573]
[77.89022827 143.37281799]
[67.48221588 154.17437744]
[57.07421494 164.97592163]
[57.61796188 180.77084351]
[46.77282333 192.26687622]
[30.97302437 192.64360046]
[19.59230614 181.67752075]
[19.38264847 165.87461853]
[30.46843529 154.61047363]
[46.27266693 154.56791687]
[56.68067169 143.76635742]
[67.08867645 132.96481323]
[63.59601974 118.37710571]
[49.42469025 113.46046448]
[35.25335693 108.54381561]
[21.08202744 103.62717438]
[6.91069698 98.71053314]
[-8.66319275 101.49701691]
[-18.15124893 90.01546478]
[-32.32257843 85.09882355]
[-46.49391174 80.18217468]
[-60.72496796 75.44118500]
[-75.01357269 70.87656403]
[-90.51377869 74.04740906]
[-100.28292084 62.80405045]
[-114.57152557 58.23942947]
[-128.86012268 53.67481232]
[-145.78802490 54.61442184]
[-151.37701416 38.60818863]
[-137.54350281 28.80664635]
[-124.29550934 39.38620377]
[-110.00690460 43.95082474]
[-95.71829987 48.51544571]
[-81.24011230 45.01810837]
[-70.44895172 56.58795929]
[-56.16034698 61.15257645]
[-48.75179672 60.18066025]
[-41.57726669 66.01084900]
[-27.40593529 70.92749023]
[-13.23460484 75.84413147]
[1.32565701 72.70597839]
[11.82734108 84.53919983]
[25.99867249 89.45584106]
[40.17000198 94.37248993]
[54.34133148 99.28913116]
[68.51266479 104.20577240]
[79.09734344 82.36477661]
[99.16599274 77.08581543]
[103.55354309 62.74184799]
[107.94108582 48.39788055]
[112.32863617 34.05391312]
[116.71617889 19.70994377]
[121.10372925 5.36597443]
[120.62693024 -3.86644840]
[125.78125763 -9.27607822]
[130.52224731 -23.50713539]
[120.76557159 -35.45747757]
[119.04127502 -50.78817368]
[125.89958191 -64.60726166]
[139.15202332 -72.50511932]
[154.56980896 -71.96156311]
[167.23316956 -63.15004730]
[173.10127258 -48.88228989]
[170.30163574 -33.71108246]
[159.72760010 -22.47750092]
[144.75331116 -18.76613998]
[140.01231384 -4.53508425]
[135.44769287 9.75352097]
[131.06015015 24.09749031]
[126.67260742 38.44145966]
[122.28505707 52.78542709]
[117.89750671 67.12939453]
[113.50996399 81.47336578]
[126.35998535 107.28514862]
[102.88004303 131.63615417]
[114.06025696 141.63629150]
[125.24047089 151.63642883]
[136.42068481 161.63656616]
[147.60090637 171.63670349]
[158.78112793 181.63684082]
[169.96133423 191.63697815]
[181.14155579 201.63711548]
[192.32176208 211.63726807]
[217.86067200 204.32412720]
[242.36810303 224.99000549]
[256.86495972 228.84242249]
[271.36181641 232.69482422]
[285.85867310 236.54724121]
[299.40179443 228.40110779]
[314.71801758 232.29835510]
[322.72052002 245.92684937]
[318.66156006 261.20101929]
[304.94921875 269.05899048]
[289.71884155 264.83874512]
[282.00628662 251.04409790]
[267.50942993 247.19169617]
[253.01255798 243.33927917]
[238.51570129 239.48687744]
[234.01774597 245.48840332]
[225.02182007 257.49145508]
[220.52386475 263.49301147]
[228.29003906 276.32601929]
[236.05621338 289.15905762]
[251.53562927 291.37753296]
[261.92898560 303.06137085]
[262.32882690 318.69384766]
[252.54640198 330.89376831]
[237.20063782 333.90069580]
[223.53735352 326.29486084]
[218.00793457 311.66751099]
[223.22319031 296.92523193]
[215.45701599 284.09219360]
[207.69084167 271.25915527]
[195.42739868 267.82241821]
[185.66539001 260.76727295]
[179.33609009 251.34054565]
[176.83970642 240.97116089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 21]
[11 20]
[12 19]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[28 49]
[29 48]
[30 47]
[31 45]
[32 44]
[34 42]
[35 41]
[36 40]
[57 82]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[64 76]
[65 75]
[94 107]
[95 106]
[96 105]
[97 104]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
