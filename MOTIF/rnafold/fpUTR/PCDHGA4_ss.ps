%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:52:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAAGAUUUCUGCAGCACAAAGCACUGGCUCUGGAGCUUUAUGAAAGCUUCAAGCGGAAGCCCUGAGAGCUCUGGCUGUGA\
) } def
/len { sequence length } bind def

/coor [
[56.11933517 301.11489868]
[47.74747086 313.75164795]
[35.55662155 322.76046753]
[21.01889038 327.05352783]
[5.88977909 326.11236572]
[-8.00379944 320.05065918]
[-18.98412704 309.60037231]
[-25.72527695 296.02346802]
[-27.41322136 280.95938110]
[-23.84413147 266.22717285]
[-15.44899559 253.60586548]
[-3.24156547 244.61952209]
[11.30405331 240.35328674]
[26.43140411 241.32232666]
[32.42978668 227.57388306]
[38.42816544 213.82545471]
[44.42654419 200.07702637]
[50.42492676 186.32858276]
[50.20777893 178.75408936]
[56.91323853 172.18484497]
[63.42149353 158.67031860]
[61.97258377 143.84634399]
[74.93132019 134.76991272]
[81.43957520 121.25537872]
[87.94783020 107.74084473]
[87.09457397 93.78507233]
[98.53763580 85.75090027]
[105.04589081 72.23636627]
[110.78614044 58.37817383]
[115.74032593 44.21992111]
[120.69451141 30.06167221]
[125.64869690 15.90342331]
[130.33728027 1.65501082]
[134.75860596 -12.67858124]
[138.09642029 -27.30249977]
[140.33204651 -42.13496399]
[142.56768799 -56.96742630]
[144.80331421 -71.79988861]
[147.03895569 -86.63234711]
[149.27458191 -101.46481323]
[151.51022339 -116.29727173]
[153.74584961 -131.12973022]
[150.12774658 -147.69311523]
[165.04223633 -155.75503540]
[176.91783142 -143.65516663]
[168.57832336 -128.89410400]
[166.34268188 -114.06163788]
[164.10705566 -99.22917938]
[161.87141418 -84.39671326]
[159.63578796 -69.56425476]
[157.40014648 -54.73179245]
[155.16452026 -39.89933014]
[152.92887878 -25.06686592]
[154.74555969 -22.62689590]
[155.57757568 -19.23406219]
[155.02105713 -15.31237888]
[152.85493469 -11.43695259]
[149.09219360 -8.25725365]
[144.67086792 6.07633829]
[145.73472595 13.57890320]
[139.80694580 20.85760880]
[134.85276794 35.01585770]
[129.89857483 49.17411041]
[124.94438934 63.33235931]
[126.32512665 66.83238983]
[125.91681671 71.21323395]
[123.30855560 75.54499054]
[118.56042480 78.74462128]
[112.05216980 92.25915527]
[112.90542603 106.21492767]
[101.46236420 114.24909973]
[94.95410919 127.76363373]
[88.44585419 141.27816772]
[89.42925262 157.06878662]
[76.93602753 165.17857361]
[70.42777252 178.69309998]
[64.17336273 192.32696533]
[58.17498016 206.07540894]
[52.17659760 219.82383728]
[46.17821884 233.57226562]
[40.17984009 247.32070923]
[51.17940521 257.75073242]
[57.94556427 271.31518555]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[20 76]
[21 75]
[23 73]
[24 72]
[25 71]
[27 69]
[28 68]
[29 64]
[30 63]
[31 62]
[32 61]
[33 59]
[34 58]
[35 53]
[36 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
[42 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
