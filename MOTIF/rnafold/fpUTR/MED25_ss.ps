%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUGCUCAUUCCGCGGCGUCGGCUGCGGCUGCAGUGGUGGUGGCGGGUACCGCACGGGGU\
) } def
/len { sequence length } bind def

/coor [
[74.86141205 121.79428101]
[70.33422089 115.06255341]
[67.57076263 107.43531036]
[66.73534393 99.36600494]
[67.87763214 91.33439636]
[54.64881516 84.26345062]
[41.41999435 77.19249725]
[28.19117737 70.12154388]
[18.50364876 75.97419739]
[7.32057428 77.05693817]
[-3.15418625 73.22831726]
[-10.88737869 65.30771637]
[-14.41098213 54.90120697]
[-13.10055733 44.07621002]
[-25.14867020 35.14072037]
[-37.19678497 26.20523262]
[-49.24489594 17.26974297]
[-61.29301071 8.33425236]
[-73.34112549 -0.60123694]
[-85.38923645 -9.53672695]
[-101.73390198 -10.87237549]
[-108.50400543 -25.80883217]
[-98.73504639 -38.98075104]
[-82.47648621 -36.83798981]
[-76.45374298 -21.58483887]
[-64.40563202 -12.64935017]
[-52.35752106 -3.71386027]
[-40.30940628 5.22162914]
[-28.26129341 14.15711880]
[-16.21318054 23.09260750]
[-4.16506767 32.02809906]
[14.41300201 27.44301796]
[30.93496132 37.65871811]
[35.26212692 56.89272690]
[48.49094772 63.96367645]
[61.71976471 71.03462982]
[74.94858551 78.10557556]
[95.99869537 66.97079468]
[119.09869385 72.75704193]
[132.41433716 92.50000000]
[147.41433716 92.50000000]
[162.41433716 92.50000000]
[177.41433716 92.50000000]
[192.41433716 92.50000000]
[207.41433716 92.50000000]
[219.72955322 82.21823120]
[235.41705322 85.57711029]
[242.44271851 100.00000000]
[235.41705322 114.42288971]
[219.72955322 117.78176880]
[207.41433716 107.50000000]
[192.41433716 107.50000000]
[177.41433716 107.50000000]
[162.41433716 107.50000000]
[147.41433716 107.50000000]
[132.41433716 107.50000000]
[129.63566589 115.12171936]
[125.09504700 121.84439087]
[119.06243896 127.26834106]
[111.89649963 131.07109070]
[104.02326965 133.02653503]
[95.91084290 133.01844788]
[88.04152679 131.04728699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 37]
[6 36]
[7 35]
[8 34]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
