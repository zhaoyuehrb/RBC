%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAUAAAAGCGCGGGAGCGAGGCCCGGCGGCUCCAGUUCUGGGGCUUUUGCUUUCGCUCGAUUAGUUGCUGUGAGGCUGCUCCGCGGGCCUCGCCUGGACGCUGACUCCCUGUGACUUAGCCCUGAUCCUCAGGAAGGCAGGCCAUCGAGAGUCCAGAGGCACCCGUGGCCUGGGGGUAGGGUGGGAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[195.68728638 163.43981934]
[188.51304626 162.24348450]
[181.69607544 159.68003845]
[175.49462891 155.84257507]
[170.14443970 150.87255859]
[165.84968567 144.95452881]
[162.77531433 138.30937195]
[161.04058838 131.18595886]
[160.71453857 123.85189056]
[146.21522522 120.00872803]
[131.71591187 116.16555786]
[117.21659088 112.32239532]
[103.14704895 120.93677521]
[87.16675568 116.83924866]
[78.97824860 102.51765442]
[64.41860962 98.90978241]
[55.32152939 99.88328552]
[49.65336227 95.12380981]
[35.15404892 91.28063965]
[20.65473557 87.43747711]
[6.15542269 83.59430695]
[-8.34389019 79.75114441]
[-22.84320259 75.90797424]
[-37.34251404 72.06480408]
[-51.84182739 68.22164154]
[-66.34114075 64.37847137]
[-80.84045410 60.53530884]
[-95.45661163 57.16367340]
[-110.17428589 54.26710129]
[-124.89196014 51.37053299]
[-139.60963440 48.47396469]
[-154.32730103 45.57739639]
[-169.06794739 42.80008698]
[-183.83059692 40.14222336]
[-198.61427307 37.60397720]
[-213.41802979 35.18551254]
[-228.22177124 32.76704788]
[-243.02552795 30.34858513]
[-260.08425903 37.26516342]
[-273.23095703 25.64972878]
[-288.07192993 23.47130013]
[-302.91290283 21.29287148]
[-317.80239868 19.47554588]
[-332.73165894 18.02039909]
[-347.66091919 16.56525040]
[-362.59014893 15.11010361]
[-371.45834351 27.65007591]
[-385.41510010 34.06134033]
[-400.70614624 32.61930084]
[-413.21826172 23.71185493]
[-419.58575439 9.73506355]
[-418.09579468 -5.55138731]
[-409.14916992 -18.03551865]
[-395.15249634 -24.35916328]
[-379.87078857 -22.82129097]
[-367.41476440 -13.83558273]
[-361.13500977 0.18085195]
[-346.20574951 1.63599980]
[-331.27651978 3.09114742]
[-316.34725952 4.54629517]
[-313.39855957 2.58865166]
[-309.35110474 1.97000492]
[-304.84835815 3.19292021]
[-300.73446655 6.45189905]
[-285.89349365 8.63032722]
[-271.05252075 10.80875587]
[-261.15478516 3.83900881]
[-248.76481628 5.54211473]
[-240.60707092 15.54483414]
[-225.80331421 17.96329689]
[-210.99955750 20.38176155]
[-196.19581604 22.80022430]
[-189.07743835 20.77304459]
[-181.17272949 25.37957573]
[-166.41007996 28.03744125]
[-159.25981140 26.12579346]
[-151.43074036 30.85972404]
[-136.71305847 33.75629425]
[-121.99539185 36.65286255]
[-107.27771759 39.54943085]
[-92.56004333 42.44599915]
[-90.15252686 40.98379898]
[-87.01672363 40.39411545]
[-83.48461151 40.96066284]
[-79.98512268 42.84091949]
[-76.99728394 46.03599548]
[-62.49797440 49.87916183]
[-47.99866104 53.72232819]
[-33.49934769 57.56549454]
[-19.00003624 61.40866089]
[-4.50072336 65.25183105]
[9.99858952 69.09499359]
[24.49790192 72.93816376]
[38.99721527 76.78132629]
[53.49652863 80.62449646]
[68.02648163 84.35013580]
[82.58612823 87.95801544]
[92.59337616 80.16583252]
[105.25861359 79.49147797]
[116.03671265 86.17696381]
[121.05976105 97.82308197]
[135.55906677 101.66624451]
[150.05838013 105.50941467]
[164.55769348 109.35257721]
[181.36503601 92.57099152]
[204.75155640 89.16757965]
[225.43708801 100.35032654]
[235.29829407 121.56735992]
[250.24914551 122.78057098]
[265.20001221 123.99377441]
[280.15087891 125.20697784]
[269.27569580 114.87591553]
[265.60003662 100.33323669]
[270.26043701 86.07557678]
[281.81582642 76.51144409]
[296.69329834 74.59809113]
[310.29269409 80.92714691]
[318.40899658 93.54163361]
[318.53268433 108.54112244]
[310.62548828 121.28772736]
[297.13214111 127.84020233]
[311.74829102 131.21183777]
[326.36447144 134.58348083]
[340.98062134 137.95510864]
[355.59677124 141.32675171]
[364.67691040 140.20605469]
[370.42138672 144.87312317]
[384.98104858 148.48100281]
[399.54067993 152.08888245]
[414.10031128 155.69674683]
[428.65997314 159.30462646]
[443.21960449 162.91250610]
[457.77926636 166.52037048]
[472.33889771 170.12825012]
[486.89855957 173.73612976]
[502.72415161 163.34170532]
[520.81542969 167.72595215]
[529.81274414 183.65663147]
[544.48162842 186.79113770]
[554.87506104 178.21086121]
[568.11956787 177.20254517]
[579.35772705 183.91108704]
[584.59710693 195.69207764]
[599.21331787 199.06372070]
[613.82946777 202.43534851]
[622.90954590 201.31466675]
[628.65405273 205.98173523]
[643.21368408 209.58961487]
[654.36029053 198.92388916]
[669.50805664 196.00004578]
[683.82342529 201.75106812]
[692.73834229 214.34181213]
[693.40820312 229.75462341]
[685.61920166 243.07133484]
[671.85675049 250.04263306]
[656.51245117 248.44398499]
[644.48260498 238.78553772]
[639.60583496 224.14926147]
[625.04620361 220.54138184]
[610.45782471 217.05151367]
[595.84167480 213.67987061]
[581.22546387 210.30824280]
[567.36639404 219.82395935]
[550.58142090 216.30950928]
[541.34710693 201.45997620]
[526.67828369 198.32546997]
[518.66204834 206.46708679]
[507.59472656 209.75582886]
[496.19885254 207.26179504]
[487.33654785 199.49272156]
[483.29067993 188.29576111]
[468.73101807 184.68789673]
[454.17138672 181.08001709]
[439.61172485 177.47213745]
[425.05209351 173.86427307]
[410.49246216 170.25639343]
[395.93280029 166.64851379]
[381.37316895 163.04064941]
[366.81350708 159.43276978]
[352.22512817 155.94290161]
[337.60897827 152.57127380]
[322.99282837 149.19963074]
[308.37664795 145.82798767]
[293.76049805 142.45635986]
[278.93765259 140.15783691]
[263.98678589 138.94462585]
[249.03594971 137.73143005]
[234.08508301 136.51821899]
[231.44670105 143.22308350]
[227.55725098 149.29997253]
[222.56016541 154.51780701]
[216.64109802 158.67735291]
[210.02096558 161.61872864]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 104]
[10 103]
[11 102]
[12 101]
[15 97]
[16 96]
[18 95]
[19 94]
[20 93]
[21 92]
[22 91]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 81]
[29 80]
[30 79]
[31 78]
[32 77]
[33 75]
[34 74]
[35 72]
[36 71]
[37 70]
[38 69]
[40 66]
[41 65]
[42 64]
[43 60]
[44 59]
[45 58]
[46 57]
[108 188]
[109 187]
[110 186]
[111 185]
[121 184]
[122 183]
[123 182]
[124 181]
[125 180]
[127 179]
[128 178]
[129 177]
[130 176]
[131 175]
[132 174]
[133 173]
[134 172]
[135 171]
[138 166]
[139 165]
[143 162]
[144 161]
[145 160]
[147 159]
[148 158]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
