%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUCAGAAAGCGCGGGAAAGGCACGCAGCCACGCCCCAAGGGCGCAGCCUAGGACAGGGGCUUCUGGAGCUUCUGGCAGCCGUCUGCCCUC\
) } def
/len { sequence length } bind def

/coor [
[81.80404663 139.75901794]
[73.31483459 152.12564087]
[64.82563019 164.49226379]
[56.33642578 176.85888672]
[62.41057968 191.04014587]
[59.83098221 206.25032043]
[49.42077255 217.63587952]
[34.50181198 221.56375122]
[19.83468437 216.78056335]
[10.09961987 204.81259155]
[8.40304089 189.47880554]
[15.28631878 175.67213440]
[28.55302429 167.79826355]
[43.96980286 168.36968994]
[52.45900726 156.00306702]
[60.94821548 143.63644409]
[69.43742371 131.26980591]
[64.54462433 125.58883667]
[60.69428635 119.15550232]
[57.99961472 112.15895081]
[56.53984070 104.80490875]
[56.35788727 97.30958557]
[41.76650620 93.83228302]
[27.17512512 90.35498047]
[12.81186199 97.50174713]
[-1.66962659 90.59768677]
[-5.16038179 74.93901062]
[5.01740503 62.53771210]
[21.05620766 62.90700531]
[30.65242767 75.76360321]
[45.24380875 79.24090576]
[59.83518982 82.71820831]
[65.68467712 72.90145874]
[73.87797546 64.93560028]
[67.11282349 51.54781723]
[60.34767151 38.16003418]
[53.58251953 24.77225113]
[46.81736755 11.38446903]
[34.27728653 -0.02529504]
[41.76971054 -15.23384190]
[58.45801163 -12.24436760]
[60.20515060 4.61931658]
[66.97029877 18.00709915]
[73.73545074 31.39488220]
[80.50060272 44.78266525]
[87.26575470 58.17044830]
[98.49488831 56.30094910]
[109.82603455 57.39340973]
[120.49116516 61.37378311]
[129.76737976 67.97227478]
[137.02593994 76.74163055]
[141.77485657 87.08746338]
[143.69223022 98.30850983]
[158.55839539 100.30781555]
[173.42456055 102.30712128]
[188.13287354 96.47824097]
[199.71531677 105.84288025]
[214.58146667 107.84218597]
[229.44763184 109.84149170]
[244.31379700 111.84079742]
[259.21130371 113.59140778]
[274.13595581 115.09284973]
[289.06063843 116.59428406]
[303.98529053 118.09571838]
[318.49063110 111.77861023]
[330.37951660 120.75099945]
[345.30416870 122.25243378]
[360.22885132 123.75386810]
[375.15350342 125.25530243]
[390.07818604 126.75674438]
[406.44299316 122.32619476]
[415.23059082 136.82495117]
[403.73110962 149.28280640]
[388.57675171 141.68141174]
[373.65206909 140.17997742]
[358.72741699 138.67854309]
[343.80273438 137.17710876]
[328.87808228 135.67567444]
[315.44024658 142.10015869]
[302.48385620 133.02038574]
[287.55920410 131.51895142]
[272.63452148 130.01751709]
[257.70986938 128.51608276]
[250.59658813 131.02967834]
[242.31449890 126.70696259]
[227.44833374 124.70765686]
[212.58216858 122.70835114]
[197.71600342 120.70904541]
[184.07101440 126.68093109]
[171.42524719 117.17328644]
[156.55909729 115.17398071]
[141.69293213 113.17467499]
[128.17132568 133.44023132]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[22 32]
[23 31]
[24 30]
[34 46]
[35 45]
[36 44]
[37 43]
[38 42]
[53 92]
[54 91]
[55 90]
[57 88]
[58 87]
[59 86]
[60 85]
[61 83]
[62 82]
[63 81]
[64 80]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
