%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGACUACAGUUCCCAGGCGCCCCUGCGCGGCCGCGGCGCCGGCGCCGGCGUCGGUUGGGACGCGGAGCUGAGGAGCAGGGCCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[-40.25887299 298.96289062]
[-54.84878159 301.73239136]
[-63.07555771 314.27511597]
[-71.30233765 326.81787109]
[-79.52911377 339.36059570]
[-87.75588989 351.90332031]
[-88.14799500 368.29779053]
[-102.66975403 375.91687012]
[-116.38243103 366.92272949]
[-115.17959595 350.56774902]
[-100.29862213 343.67654419]
[-92.07184601 331.13381958]
[-83.84506989 318.59109497]
[-75.61829376 306.04833984]
[-67.39151001 293.50561523]
[-70.66391754 279.02020264]
[-62.49946976 266.18289185]
[-47.28365326 262.84872437]
[-39.05687714 250.30598450]
[-30.83009911 237.76325989]
[-22.60332108 225.22053528]
[-14.37654305 212.67779541]
[-6.14976454 200.13507080]
[2.07701349 187.59233093]
[-12.91119862 188.18690491]
[-24.14050293 178.24191284]
[-25.36183929 163.29171753]
[-15.89553928 151.65603638]
[-1.00955915 149.81007385]
[11.01211739 158.78109741]
[13.47946262 173.57684326]
[24.08606529 162.97024536]
[34.69266510 152.36363220]
[45.29926682 141.75703430]
[43.50848389 128.87397766]
[49.61421204 117.16782379]
[61.55301285 111.08589935]
[74.99955750 113.08656311]
[85.96209717 102.84826660]
[90.22314453 89.53154755]
[103.79960632 86.18919373]
[114.76214600 75.95089722]
[125.36875153 65.34429169]
[135.60704041 54.38175583]
[145.84533691 43.41921616]
[149.61000061 28.05243492]
[163.95173645 24.03200531]
[174.19003296 13.06946564]
[184.42832947 2.10692644]
[188.10386658 -6.49087048]
[195.20823669 -9.04752064]
[205.81483459 -19.65412331]
[216.42143250 -30.26072502]
[227.02804565 -40.86732483]
[226.77740479 -56.66962814]
[237.83395386 -67.96247864]
[253.63801575 -68.04602051]
[264.81332397 -56.87070084]
[264.72979736 -41.06663513]
[253.43693542 -30.01009178]
[237.63464355 -30.26072502]
[227.02804565 -19.65412331]
[216.42143250 -9.04752064]
[205.81483459 1.55908084]
[195.39086914 12.34522343]
[185.15257263 23.30776215]
[174.91427612 34.27030182]
[171.88192749 48.85297012]
[156.80787659 53.65751266]
[146.56958008 64.62004852]
[136.33128357 75.58258820]
[135.62120056 80.50131226]
[131.67507935 84.95627594]
[125.00044250 86.91343689]
[114.03790283 97.15173340]
[109.77685547 110.46845245]
[96.20039368 113.81080627]
[85.23785400 124.04910278]
[85.02108765 141.43972778]
[72.60993195 153.14041138]
[55.90586853 152.36363220]
[45.29926682 162.97024536]
[34.69266510 173.57684326]
[24.08606529 184.18344116]
[14.61974525 195.81910706]
[6.39296722 208.36184692]
[-1.83381081 220.90457153]
[-10.06058884 233.44731140]
[-18.28736687 245.99003601]
[-26.51414490 258.53277588]
[-34.74092484 271.07550049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[6 11]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[31 84]
[32 83]
[33 82]
[34 81]
[38 78]
[39 77]
[41 75]
[42 74]
[43 71]
[44 70]
[45 69]
[47 67]
[48 66]
[49 65]
[51 64]
[52 63]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
