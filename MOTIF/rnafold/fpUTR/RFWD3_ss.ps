%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUGGCAGUUGGCGUAGGUGCAUUCGGAGUGCGGCCGAGGUAACUACCGAGUCUUCGGCGGGCUCGCGAGCCCGGCCGCGGCCUGCUGGUUUCAGUG\
) } def
/len { sequence length } bind def

/coor [
[137.16441345 296.30780029]
[134.06838989 289.16055298]
[133.75238037 281.30871582]
[136.30863953 273.80477905]
[141.44102478 267.67257690]
[136.76052856 253.42150879]
[132.08003235 239.17044067]
[120.75770569 229.49291992]
[123.80258179 213.96748352]
[119.12207794 199.71641541]
[113.94956970 194.24378967]
[114.52694702 184.93836975]
[110.30095673 170.54597473]
[106.07496643 156.15357971]
[96.50936127 151.96430969]
[90.79454803 142.96012878]
[91.08749390 132.07752991]
[97.53582001 123.03228760]
[94.23116302 108.40084076]
[89.44375610 101.71689606]
[91.06157684 93.25291443]
[88.22280884 78.52398682]
[84.00468445 73.04829407]
[83.42092896 67.15987396]
[85.70239258 62.77252197]
[83.80351257 47.89319992]
[81.90462494 33.01387787]
[79.76989746 18.16655540]
[77.39987946 3.35497189]
[75.02986145 -11.45661163]
[72.65983582 -26.26819420]
[62.83927917 -38.67251587]
[68.46846008 -52.46242523]
[66.09844208 -67.27400970]
[61.57769012 -75.42797089]
[63.89598083 -82.59246063]
[61.99709320 -97.47178650]
[60.09820938 -112.35110474]
[58.19932175 -127.23043060]
[56.30043411 -142.10975647]
[54.40154648 -156.98907471]
[50.53920364 -162.72126770]
[50.33009338 -168.63485718]
[52.88522720 -172.86868286]
[51.93386841 -187.83848572]
[50.98250961 -202.80828857]
[41.45314789 -216.15457153]
[48.49203491 -230.96624756]
[64.85816193 -232.00634766]
[73.71546936 -218.20489502]
[65.95230865 -203.75964355]
[66.90367126 -188.78984070]
[67.85502625 -173.82003784]
[69.28086853 -158.88795471]
[71.17975616 -144.00863647]
[73.07864380 -129.12931824]
[74.97753143 -114.24999237]
[76.87641907 -99.37067413]
[78.77530670 -84.49134827]
[80.91002655 -69.64402771]
[83.28004456 -54.83244705]
[92.93108368 -43.48754501]
[87.47142029 -28.63821602]
[89.84143829 -13.82663250]
[92.21146393 0.98495108]
[94.58148193 15.79653454]
[98.82434082 22.01767349]
[96.78394318 31.11499023]
[98.68283081 45.99431229]
[100.58171844 60.87363434]
[102.95173645 75.68521881]
[105.79050446 90.41414642]
[108.86260986 105.09618378]
[112.16726685 119.72763062]
[126.53990173 133.68548584]
[120.46736145 151.92758179]
[124.69335175 166.31997681]
[128.91934204 180.71237183]
[133.37313843 195.03591919]
[138.05364990 209.28697205]
[149.71073914 219.98382568]
[146.33110046 234.48994446]
[151.01159668 248.74099731]
[155.69209290 262.99206543]
[174.50541687 276.45898438]
[170.45115662 298.51763916]
[177.32455444 311.85015869]
[184.19795227 325.18270874]
[191.07135010 338.51522827]
[205.15220642 346.92126465]
[204.64228821 363.31246948]
[190.06614685 370.82699585]
[176.41847229 361.73452759]
[177.73881531 345.38864136]
[170.86541748 332.05609131]
[163.99201965 318.72357178]
[157.11862183 305.39102173]
[149.54925537 304.96417236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 84]
[6 83]
[7 82]
[9 80]
[10 79]
[12 78]
[13 77]
[14 76]
[18 74]
[19 73]
[21 72]
[22 71]
[25 70]
[26 69]
[27 68]
[28 66]
[29 65]
[30 64]
[31 63]
[33 61]
[34 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[44 53]
[45 52]
[46 51]
[86 97]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
