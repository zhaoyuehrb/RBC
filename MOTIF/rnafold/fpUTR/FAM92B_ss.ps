%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGGCGGCCCCAUCGCCUAGCAACCGGGUGGCAGCGUCCCUUGAGCCCAGGCCACACAGCUGCACCCAGCCCUGCCCGGCUCCUCCCAGGCCUGCAGGACCCCUGGGGCCCUGUCCUUAUUCCCCAGCACCGGGACAGCCAAAGCUCUGGUCACA\
) } def
/len { sequence length } bind def

/coor [
[224.68232727 272.38488770]
[226.95710754 259.57223511]
[233.07183838 248.05561829]
[222.95336914 236.98239136]
[212.83488464 225.90916443]
[202.71641541 214.83592224]
[192.37840271 203.96737671]
[181.82499695 193.30784607]
[171.27157593 182.64831543]
[160.71817017 171.98878479]
[150.16476440 161.32925415]
[139.61135864 150.66972351]
[129.05795288 140.01019287]
[110.60042572 148.29917908]
[90.36811066 148.50161743]
[71.74842834 140.58360291]
[61.41041565 151.45216370]
[54.87507248 167.09587097]
[38.03356171 165.14654541]
[35.24451828 148.42356873]
[50.54185867 141.11415100]
[60.87987137 130.24559021]
[56.39160919 123.31284332]
[53.11978912 115.72978973]
[51.15567780 107.70795441]
[50.55406570 99.47111511]
[51.33172989 91.24902344]
[37.14190674 86.38600159]
[22.95208549 81.52297974]
[8.76226425 76.65995789]
[-5.42755747 71.79694366]
[-14.61765862 71.97034454]
[-19.85096169 66.69205475]
[-33.94063950 61.54608154]
[-48.03031540 56.40011597]
[-62.11999512 51.25414658]
[-71.23775482 60.48689270]
[-83.13477325 65.54891968]
[-96.01600647 65.71512604]
[-107.95252228 60.99618912]
[-117.17036438 52.13167572]
[-122.31415558 40.47434616]
[-122.64636230 27.78380966]
[-136.51885986 22.07823944]
[-145.70281982 21.69997978]
[-150.61003113 16.11722183]
[-164.36560059 10.13522148]
[-180.58934021 12.52735233]
[-190.55937195 -0.49302801]
[-184.01939392 -15.53166771]
[-167.69715881 -17.11810493]
[-158.38359070 -3.62034702]
[-144.62802124 2.36165357]
[-130.81329346 8.20573139]
[-116.94078827 13.91130257]
[-103.74723053 2.92121792]
[-86.72289276 0.07930353]
[-70.50926208 6.25111675]
[-59.57267380 19.83229256]
[-56.97402573 37.16446686]
[-42.88434982 42.31043625]
[-28.79467201 47.45640564]
[-14.70499420 52.60237503]
[-0.56453681 57.60712051]
[13.62528419 62.47013855]
[27.81510544 67.33316040]
[42.00492859 72.19618225]
[56.19474792 77.05920410]
[65.07263947 64.99628448]
[77.15491486 56.14475632]
[91.33308411 51.31668854]
[106.30639648 50.95502472]
[110.45378113 36.53977966]
[114.60115814 22.12453842]
[118.74854279 7.70929623]
[122.89592743 -6.70594645]
[117.33824921 -18.38581657]
[121.12935638 -30.33182907]
[131.70536804 -36.27517700]
[136.14035034 -50.60454941]
[140.57533264 -64.93392181]
[145.01031494 -79.26329803]
[136.38722229 -92.30844879]
[138.21815491 -107.83847809]
[149.63861084 -118.52056885]
[165.25621033 -119.31097412]
[177.69677734 -109.83647919]
[181.08628845 -94.57066345]
[173.82429504 -80.72156525]
[159.33969116 -74.82831573]
[154.90470886 -60.49893951]
[150.46972656 -46.16956711]
[146.03474426 -31.84019470]
[150.85873413 -14.99206543]
[137.31117249 -2.55856466]
[133.16378784 11.85667801]
[129.01640320 26.27192116]
[124.86901855 40.68716431]
[120.72164154 55.10240555]
[132.92024231 63.10232925]
[142.25378418 74.31346130]
[147.90997314 87.76010132]
[149.39654541 102.27198792]
[146.58412170 116.58613586]
[139.71746826 129.45678711]
[150.27088928 140.11631775]
[160.82429504 150.77584839]
[171.37770081 161.43537903]
[181.93110657 172.09490967]
[192.48452759 182.75444031]
[203.03793335 193.41395569]
[209.39015198 195.55107117]
[213.11260986 199.93829346]
[213.78964233 204.71745300]
[223.90812683 215.79067993]
[234.02659607 226.86390686]
[244.14506531 237.93714905]
[263.07580566 231.78637695]
[282.64483643 235.05822754]
[298.44250488 246.95530701]
[306.93679810 264.74343872]
[306.26290894 284.37985229]
[319.76812744 290.90740967]
[333.27334595 297.43496704]
[346.77856445 303.96255493]
[360.96633911 297.38677979]
[376.04806519 301.51907349]
[384.90258789 314.40829468]
[383.34906006 329.96850586]
[372.12103271 340.85269165]
[356.52001953 341.92166138]
[343.91235352 332.67065430]
[340.25100708 317.46777344]
[326.74578857 310.94018555]
[313.24057007 304.41262817]
[299.73535156 297.88507080]
[297.17825317 301.03372192]
[294.32446289 303.91619873]
[291.20153809 306.50466919]
[297.86389160 319.94390869]
[304.52624512 333.38314819]
[311.18859863 346.82238770]
[326.24291992 351.63317871]
[333.41180420 365.71798706]
[328.44213867 380.72058105]
[314.28228760 387.74017334]
[299.33306885 382.61215210]
[292.46359253 368.37890625]
[297.74938965 353.48474121]
[291.08700562 340.04550171]
[284.42465210 326.60626221]
[277.76229858 313.16705322]
[265.01187134 314.80581665]
[252.34906006 312.44186401]
[241.00253296 306.28805542]
[232.07827759 296.92590332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[13 105]
[16 22]
[17 21]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[33 63]
[34 62]
[35 61]
[36 60]
[43 55]
[44 54]
[46 53]
[47 52]
[72 99]
[73 98]
[74 97]
[75 96]
[76 95]
[79 93]
[80 92]
[81 91]
[82 90]
[122 136]
[123 135]
[124 134]
[125 133]
[139 152]
[140 151]
[141 150]
[142 149]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
