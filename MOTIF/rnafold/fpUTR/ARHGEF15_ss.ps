%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:33:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAAUCACAGGAACACACACUUGGAAACCUCAGCCCUGCAUUCCUCGCUCCAAGGGGCAGACAGGACAGGCUGAAAAUAGCAACUGGUUCCAAAAAGAUAAAGGGGAUGACUCCAGCAGAGCACCUCACUCCUUUGAAGAGCACAGAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[84.96822357 176.41651917]
[73.32604980 173.17060852]
[62.32627106 168.16252136]
[52.23380280 161.51283264]
[43.29170990 153.38172913]
[35.71533966 143.96499634]
[29.68715858 133.48944092]
[25.35234833 122.20735931]
[22.81530380 110.39044189]
[22.13712502 98.32328796]
[23.33414650 86.29651642]
[26.37753868 74.59976959]
[31.19400597 63.51474380]
[18.68016434 55.24408722]
[6.16632223 46.97343063]
[-6.34751987 38.70277405]
[-18.86136246 30.43211937]
[-27.80186462 28.29158974]
[-31.54160690 21.86679459]
[-43.88636398 13.34582424]
[-54.52552414 15.93288422]
[-64.61396790 12.28157043]
[-70.87029266 3.83831310]
[-71.40349579 -6.43614769]
[-83.39514160 -15.44728184]
[-95.38677979 -24.45841599]
[-108.48498535 -16.79598808]
[-123.47852325 -14.73763657]
[-138.07838440 -18.56616974]
[-150.06768799 -27.66805649]
[-157.63825989 -40.63151169]
[-159.66337585 -55.46540451]
[-155.86528015 -69.90505981]
[-167.85693359 -78.91619873]
[-179.84857178 -87.92733002]
[-191.84020996 -96.93846893]
[-203.83184814 -105.94960022]
[-215.82348633 -114.96073151]
[-224.61843872 -117.63716888]
[-227.96343994 -124.27604675]
[-239.77119446 -133.52682495]
[-245.05435181 -134.26858521]
[-249.09274292 -136.74432373]
[-251.42933655 -140.17411804]
[-251.99021912 -143.71011353]
[-263.21786499 -153.65695190]
[-274.44552612 -163.60379028]
[-285.87121582 -173.32252502]
[-297.49029541 -182.80920410]
[-309.20431519 -192.17840576]
[-321.01205444 -201.42919922]
[-332.81979370 -210.67997742]
[-344.62756348 -219.93075562]
[-360.93121338 -221.69790649]
[-367.30419922 -236.80807495]
[-357.19055176 -249.71720886]
[-340.99429321 -247.14550781]
[-335.37677002 -231.73851013]
[-323.56903076 -222.48773193]
[-311.76126099 -213.23693848]
[-299.95352173 -203.98616028]
[-292.70706177 -202.32714844]
[-288.00360107 -194.42828369]
[-276.38455200 -184.94158936]
[-271.57382202 -184.53176880]
[-266.98516846 -181.05767822]
[-264.49868774 -174.83145142]
[-253.27104187 -164.88461304]
[-242.04338074 -154.93777466]
[-230.52041626 -145.33457947]
[-218.71266174 -136.08380127]
[-206.81236267 -126.95237732]
[-194.82072449 -117.94123840]
[-182.82907104 -108.93010712]
[-170.83743286 -99.91897583]
[-158.84579468 -90.90783691]
[-146.85415649 -81.89670563]
[-134.04129028 -89.56220245]
[-119.22965240 -91.74409485]
[-104.67174530 -88.07907104]
[-92.59358978 -79.09544373]
[-84.85427856 -66.13717651]
[-82.65989685 -51.16293716]
[-86.37564850 -36.45005798]
[-74.38400269 -27.43892288]
[-62.39236450 -18.42778969]
[-43.10869980 -17.56999779]
[-35.36539459 1.00106621]
[-23.02063560 9.52203751]
[-10.59070587 17.91827583]
[1.92313635 26.18893242]
[14.43697834 34.45959091]
[26.95082092 42.73024750]
[39.46466446 51.00090027]
[50.43075562 39.93063354]
[63.38115692 31.26500893]
[77.79745483 25.35091782]
[93.10253906 22.42510986]
[108.68373871 22.60470772]
[123.91732025 25.88252258]
[138.19346619 32.12733841]
[150.94067383 41.08917236]
[161.64868164 52.40926743]
[169.88883972 65.63446808]
[175.33125305 80.23536682]
[177.75808716 95.62745667]
[192.74592590 96.23144531]
[207.73374939 96.83543396]
[222.72158813 97.43942261]
[231.48007202 94.64598846]
[238.00427246 98.20949554]
[252.97689819 99.11517334]
[261.78985596 96.49868011]
[268.24096680 100.19284058]
[283.19235229 101.39984131]
[298.14370728 102.60683441]
[311.24633789 93.34937286]
[326.61267090 97.95967865]
[332.45498657 112.90113068]
[324.29156494 126.71191406]
[308.38464355 128.79759216]
[296.93670654 117.55819702]
[281.98535156 116.35119629]
[267.03396606 115.14419556]
[252.07122803 114.08780670]
[237.09858704 113.18212891]
[222.11759949 112.42726135]
[207.12976074 111.82327271]
[192.14192200 111.21928406]
[177.15409851 110.61528778]
[171.48608398 130.90594482]
[160.58709717 148.93507385]
[145.25466919 163.38339233]
[152.75466919 176.37376404]
[160.25466919 189.36415100]
[167.75466919 202.35452271]
[175.25466919 215.34490967]
[182.75466919 228.33529663]
[190.25466919 241.32566833]
[205.68507385 243.86274719]
[215.83537292 255.75834656]
[215.91291809 271.39575195]
[205.88108826 283.39141846]
[190.47660828 286.08139038]
[176.97299194 278.19555664]
[171.74626160 263.45733643]
[177.26428223 248.82566833]
[169.76428223 235.83529663]
[162.26428223 222.84490967]
[154.76428223 209.85452271]
[147.26428223 196.86415100]
[139.76428223 183.87376404]
[132.26428223 170.88339233]
[120.90867615 175.02177429]
[109.04951477 177.35337830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 94]
[14 93]
[15 92]
[16 91]
[17 90]
[19 89]
[20 88]
[24 86]
[25 85]
[26 84]
[33 77]
[34 76]
[35 75]
[36 74]
[37 73]
[38 72]
[40 71]
[41 70]
[45 69]
[46 68]
[47 67]
[48 64]
[49 63]
[50 61]
[51 60]
[52 59]
[53 58]
[106 130]
[107 129]
[108 128]
[109 127]
[111 126]
[112 125]
[114 124]
[115 123]
[116 122]
[133 153]
[134 152]
[135 151]
[136 150]
[137 149]
[138 148]
[139 147]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
