%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUGAGCAUGCGCACUUCCCCAGCACAAUCAGGGAAGACACGCGUGACCCGGAAGGUCUUCCCGCCACACUCCAGAGCGGAUGUGAGGGGCGCCG\
) } def
/len { sequence length } bind def

/coor [
[25.94372940 128.82481384]
[12.66539001 132.98455811]
[-1.22622705 133.51582336]
[-14.75837231 130.38818359]
[-26.98523903 123.82714844]
[-37.05407333 114.29801941]
[-44.26464462 102.47277832]
[-48.11794662 89.18277740]
[-48.35071564 75.36029053]
[-62.86013794 71.55547333]
[-77.36956024 67.75064850]
[-91.87898254 63.94583130]
[-106.38840485 60.14101410]
[-120.89782715 56.33619690]
[-135.73200989 65.43642426]
[-152.25740051 61.16762161]
[-160.49781799 46.60482025]
[-175.12174988 43.26700592]
[-189.74566650 39.92919159]
[-204.36958313 36.59138107]
[-218.99349976 33.25356674]
[-233.61741638 29.91575050]
[-243.51904297 41.58692932]
[-257.71469116 47.30897903]
[-272.94235229 45.76701355]
[-285.70275879 37.31536102]
[-293.06369019 23.89615631]
[-293.33367920 8.59302902]
[-286.45065308 -5.07747221]
[-273.99630737 -13.97396564]
[-258.83251953 -16.05210304]
[-244.44386292 -10.83434391]
[-234.13671875 0.48030934]
[-230.27960205 15.29183292]
[-215.65568542 18.62964630]
[-201.03176880 21.96746063]
[-186.40785217 25.30527496]
[-171.78393555 28.64308929]
[-157.16001892 31.98090172]
[-147.21649170 23.61643219]
[-134.07028198 22.54887390]
[-122.57106018 29.39962387]
[-117.09300995 41.82677078]
[-102.58358765 45.63159180]
[-88.07416534 49.43640900]
[-73.56474304 53.24123001]
[-59.05531693 57.04604721]
[-44.54589462 60.85086823]
[-36.08348846 47.10883713]
[-23.81746483 36.59246445]
[-8.91052341 30.31336975]
[7.21978569 28.88083267]
[23.03585815 32.44266891]
[37.02660751 40.67007828]
[47.85182953 52.78796005]
[54.47059250 67.64791870]
[56.24130630 83.83708954]
[70.96469116 86.70446777]
[85.68807983 89.57184601]
[93.78915405 83.41679382]
[103.94042969 82.73586273]
[112.79096222 87.75383759]
[117.41919708 96.81427002]
[131.92861938 100.61908722]
[146.43804932 104.42390442]
[159.97050476 96.70963287]
[174.63093567 100.77494812]
[181.90191650 113.72363281]
[196.41134644 117.52845001]
[210.92076111 121.33326721]
[225.43019104 125.13808441]
[234.71850586 124.28985596]
[240.33985901 129.30438232]
[254.71987915 133.57229614]
[269.09988403 137.84020996]
[283.83154297 131.48742676]
[297.91494751 139.17100525]
[300.54650879 154.99674988]
[289.70751953 166.82452393]
[273.71273804 165.58103943]
[264.83197021 152.22021484]
[250.45196533 147.95230103]
[236.07194519 143.68438721]
[221.62536621 139.64750671]
[207.11593628 135.84269714]
[192.60652161 132.03787231]
[178.09709167 128.23304749]
[165.40760803 135.94747925]
[150.63877869 132.29554749]
[142.63322449 118.93332672]
[128.12379456 115.12850952]
[113.61437988 111.32369232]
[96.05957031 117.26413727]
[82.82070160 104.29523468]
[68.09731293 101.42785645]
[53.37392807 98.56047821]
[47.04077911 110.99375916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[57 96]
[58 95]
[59 94]
[63 92]
[64 91]
[65 90]
[68 87]
[69 86]
[70 85]
[71 84]
[73 83]
[74 82]
[75 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
