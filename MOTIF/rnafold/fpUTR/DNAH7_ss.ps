%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:49:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACCGCUGCAAGUCCCGGGGCCCUGCCUCUAUCGUCCUAGGGGUUCCGCGGGCAGGAGCAACCCAGAAGCACCGGUGAGGCCAGCGCGUCCUCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[121.03090668 236.84794617]
[107.24226379 243.96504211]
[91.90882874 241.58485413]
[80.92661285 230.62261963]
[78.51850891 215.29353333]
[85.61048126 201.49195862]
[99.47551727 194.52487183]
[101.77639771 179.70239258]
[104.07727051 164.87989807]
[106.37814331 150.05741882]
[108.67901611 135.23493958]
[85.77806854 129.52754211]
[73.42277527 112.23927307]
[75.11145782 93.41094208]
[62.35820007 85.51445770]
[49.60494232 77.61798096]
[36.85168457 69.72149658]
[23.97834015 62.02233887]
[10.98795891 54.52233887]
[-2.00242257 47.02233887]
[-14.99280357 39.52233887]
[-27.98318481 32.02233887]
[-40.97356415 24.52234077]
[-53.96394730 17.02234077]
[-66.95433044 9.52234077]
[-79.94470978 2.02234054]
[-91.75099182 11.56047726]
[-106.20679474 16.18587685]
[-121.35707855 15.27299213]
[-135.15289307 8.94528389]
[-145.72846985 -1.94147742]
[-151.65354919 -15.91494751]
[-152.12681580 -31.08532715]
[-147.08425903 -45.40095139]
[-137.20783997 -56.92574310]
[-123.83327484 -64.10107422]
[-108.76935577 -65.95654297]
[-94.05335236 -62.24120331]
[-81.67549133 -53.45752716]
[-73.30976868 -40.79344177]
[-70.08758545 -25.96165276]
[-72.44470978 -10.96804047]
[-59.45432663 -3.46804047]
[-46.46394730 4.03195953]
[-33.47356415 11.53195953]
[-20.48318481 19.03195953]
[-7.49280357 26.53195953]
[5.49757767 34.03195953]
[18.48795891 41.53195953]
[31.47834015 49.03195953]
[38.97442245 49.66121292]
[44.74816895 56.96823883]
[57.50142288 64.86472321]
[70.25468445 72.76119995]
[83.00794220 80.65768433]
[109.39151001 70.43894196]
[135.29269409 91.55889893]
[147.26295471 82.51937866]
[153.61296082 68.02841949]
[168.43231201 66.53302002]
[180.40257263 57.49350357]
[179.13485718 42.11831284]
[186.40101624 28.50925446]
[199.88244629 21.00893021]
[215.27725220 22.01066399]
[227.67301941 31.19480896]
[233.11430359 45.63073730]
[229.86480713 60.71199417]
[218.96144104 71.62620544]
[203.88340759 74.89069366]
[189.44209290 69.46376038]
[177.47183228 78.50328064]
[171.97801208 92.34767151]
[156.30247498 94.48963928]
[144.33221436 103.52915955]
[145.02496338 118.51315308]
[157.77821350 126.40963745]
[173.58453369 127.09609985]
[180.33230591 140.37452698]
[193.08557129 148.27101135]
[208.89187622 148.95748901]
[215.63964844 162.23591614]
[228.39291382 170.13240051]
[244.79202271 170.09631348]
[252.78767395 184.41418457]
[244.15463257 198.35700989]
[227.77383423 197.58161926]
[220.49642944 182.88565063]
[207.74316406 174.98916626]
[192.84906006 174.86750793]
[185.18908691 161.02427673]
[172.43582153 153.12779236]
[157.54171753 153.00613403]
[149.88174438 139.16288757]
[137.12847900 131.26640320]
[123.50150299 137.53581238]
[121.20063019 152.35829163]
[118.89974976 167.18077087]
[116.59887695 182.00326538]
[114.29800415 196.82574463]
[125.39849091 207.66819763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[14 55]
[15 54]
[16 53]
[17 52]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[57 75]
[58 74]
[60 72]
[61 71]
[76 95]
[77 94]
[79 92]
[80 91]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
