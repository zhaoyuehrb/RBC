%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGCUUCCUCAACAGCAGCACUUCCGGGUUGGGAGAAAGGUGGCGGCGCUUUCGGAGGGAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[95.07183075 206.43307495]
[105.43990326 195.00912476]
[101.44934845 180.54968262]
[97.45880127 166.09024048]
[93.46824646 151.63079834]
[89.47769165 137.17135620]
[76.11259460 130.36149597]
[62.06907272 135.63212585]
[48.02555084 140.90274048]
[44.02740479 155.89588928]
[31.95889473 165.64938354]
[16.46061134 166.41282654]
[3.49195910 157.89262390]
[-1.96035051 143.36500549]
[2.20020700 128.41610718]
[14.37381268 118.79410553]
[29.87946510 118.19884491]
[42.75492859 126.85922241]
[56.79845047 121.58860016]
[70.84197235 116.31797791]
[68.37378693 106.49488831]
[69.01309204 96.73067474]
[72.49085236 87.95252228]
[78.27819824 80.93123627]
[85.65506744 76.21389771]
[81.66452026 61.75445557]
[77.67396545 47.29501343]
[73.68341064 32.83556747]
[69.69285583 18.37612534]
[56.50531387 9.24003506]
[55.56969833 -6.77571249]
[67.60374451 -17.38520622]
[83.37595367 -14.44975090]
[90.78723907 -0.22117631]
[84.15230560 14.38557339]
[88.14285278 28.84501648]
[92.13340759 43.30445862]
[96.12396240 57.76390076]
[100.11450958 72.22334290]
[112.61044312 75.25061035]
[122.40447998 83.58065033]
[136.44799805 78.31002808]
[150.49151611 73.03940582]
[164.53504944 67.76878357]
[178.57856750 62.49815750]
[192.62208557 57.22753525]
[202.61383057 44.22380066]
[218.83355713 46.64298630]
[224.59580994 61.99644089]
[213.97286987 74.48984528]
[197.89271545 71.27105713]
[183.84919739 76.54167938]
[169.80566406 81.81230164]
[155.76214600 87.08292389]
[141.71862793 92.35354614]
[127.67510223 97.62416840]
[123.72201538 119.32186127]
[103.93713379 133.18080139]
[107.92768860 147.64024353]
[111.91824341 162.09968567]
[115.90879822 176.55912781]
[119.89934540 191.01856995]
[134.65914917 195.50767517]
[144.63145447 207.27867126]
[146.63417053 222.57550049]
[140.02821350 236.51696777]
[126.92152405 244.65443420]
[111.49640656 244.39125061]
[98.67494965 235.81140137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[7 20]
[8 19]
[9 18]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
