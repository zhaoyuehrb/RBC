%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAAGCCUGGGGUCAGCAGGCGCUGCGGGCGCAGCUCCGGUGCAAGCGAGGACACGACACAUGCAGUGGCUUCUGGACUGCGCGAUGACUGGACGCAAGUAACUUCUAGGUCUGCAGACAAGAGGAAGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[112.28941345 531.06988525]
[111.24306488 516.10644531]
[99.27294159 510.08068848]
[91.80287933 498.82400513]
[90.88651276 485.23651123]
[96.87210846 472.88336182]
[108.28276825 465.05929565]
[107.58489227 450.07553101]
[106.88700867 435.09176636]
[94.36206055 427.07531738]
[88.89453125 413.05496216]
[92.77646637 398.33139038]
[104.72182465 388.60437012]
[104.02394867 373.62063599]
[103.32606506 358.63687134]
[95.00500488 346.28335571]
[102.09186554 332.13815308]
[101.39398956 317.15438843]
[100.69610596 302.17062378]
[99.99822998 287.18688965]
[99.30034637 272.20312500]
[98.60247040 257.21936035]
[95.11702728 250.62380981]
[98.06679535 241.87965393]
[97.71775818 226.88372803]
[97.36872864 211.88778687]
[87.43513489 197.46839905]
[96.28159332 181.36686707]
[95.58370972 166.38311768]
[84.43437195 156.57353210]
[83.51317596 141.38781738]
[93.87796021 129.75987244]
[93.18007660 114.77611542]
[83.75347900 100.94625092]
[91.51078796 86.11553955]
[90.46443939 71.15207672]
[89.24406433 56.20180511]
[87.84981537 41.26674271]
[86.45556641 26.33168221]
[85.06131744 11.39661980]
[83.66706848 -3.53844213]
[82.27281952 -18.47350311]
[68.41633606 -24.95000076]
[59.71945190 -37.41037750]
[58.43571091 -52.45093536]
[64.81010437 -66.02381897]
[77.04006195 -74.52639008]
[75.64581299 -89.46145630]
[74.25156403 -104.39651489]
[72.68363953 -119.31434631]
[70.94224548 -134.21292114]
[58.82888031 -144.00598145]
[57.27509308 -159.14006042]
[66.68593597 -170.62796021]
[64.94454193 -185.52653503]
[60.80653000 -193.77505493]
[63.34012985 -200.79150391]
[61.94588089 -215.72656250]
[60.03125763 -230.60386658]
[57.59858704 -245.40530396]
[55.16592026 -260.20672607]
[43.02300644 -270.69143677]
[43.79325867 -286.71597290]
[56.88580322 -295.98770142]
[72.25715637 -291.39413452]
[78.11573792 -276.45904541]
[69.96734619 -262.63937378]
[72.40000916 -247.83796692]
[74.83267975 -233.03654480]
[77.56031036 -230.66746521]
[79.23177338 -226.82025146]
[79.14711761 -222.02723694]
[76.88094330 -217.12081909]
[78.27519226 -202.18576050]
[79.84311676 -187.26792908]
[81.58451080 -172.36935425]
[93.39097595 -163.36140442]
[95.36923218 -148.27694702]
[85.84082031 -135.95431519]
[87.58221436 -121.05574036]
[91.51924896 -114.71937561]
[89.18663025 -105.79076385]
[90.58087158 -90.85569763]
[91.97512054 -75.92063904]
[105.56753540 -69.82868195]
[114.34405518 -57.67020416]
[115.86643219 -42.65192413]
[109.62617493 -28.79710388]
[97.20788574 -19.86775208]
[98.60213470 -4.93269014]
[99.99638367 10.00237179]
[101.39062500 24.93743324]
[102.78487396 39.87249374]
[104.17912292 54.80755615]
[107.96765137 61.23381805]
[105.42790222 70.10572815]
[106.47425079 85.06919098]
[114.81956482 93.27501678]
[115.50008392 104.95906067]
[108.16383362 114.07823944]
[108.86171722 129.06199646]
[120.26244354 139.67619324]
[120.75674438 154.88179016]
[110.56746674 165.68522644]
[111.26535034 180.66899109]
[120.28993988 189.96768188]
[120.51374054 202.52160645]
[112.36466217 211.53874207]
[112.71369934 226.53468323]
[113.06273651 241.53062439]
[113.58622742 256.52148438]
[114.28410339 271.50524902]
[114.98198700 286.48901367]
[115.67986298 301.47274780]
[116.37774658 316.45651245]
[117.07562256 331.44027710]
[125.44660187 344.86550903]
[118.30982208 357.93899536]
[119.00769806 372.92276001]
[119.70558167 387.90649414]
[132.50335693 396.48107910]
[137.73703003 410.78009033]
[133.59635925 425.24795532]
[121.87076569 434.39389038]
[122.56864929 449.37765503]
[123.26652527 464.36141968]
[137.49656677 473.42352295]
[143.49359131 489.01489258]
[139.09234619 504.95788574]
[126.20652008 515.06011963]
[127.25286865 530.02355957]
[136.86674500 543.30908203]
[129.92201233 558.16516113]
[113.56280518 559.30908203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 131]
[2 130]
[7 126]
[8 125]
[9 124]
[13 120]
[14 119]
[15 118]
[17 116]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[24 110]
[25 109]
[26 108]
[28 105]
[29 104]
[32 101]
[33 100]
[35 97]
[36 96]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[47 84]
[48 83]
[49 82]
[50 80]
[51 79]
[54 76]
[55 75]
[57 74]
[58 73]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
