%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGAAAGCGAAAGCAGGAAGUACAGACGUGAAGCCUAGCAGAGGACUUUUUAGCUGCUCACUGGCCCCGCUUGUCUGGCCGACUCAUCCGCCCGCGACCCCUAAUCCCCUCUGCCUGCCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[90.49653625 225.40457153]
[87.61622620 210.24847412]
[93.40834045 195.94969177]
[106.02465057 187.07093811]
[105.29433441 172.08872986]
[104.56401825 157.10652161]
[103.83370209 142.12429810]
[96.73540497 139.70269775]
[85.44278717 149.57572937]
[82.53881073 134.85949707]
[75.44051361 132.43789673]
[65.70573425 143.84991455]
[63.26075363 160.06576538]
[47.89815140 165.80358887]
[35.42166138 155.16078186]
[38.66602325 139.08576965]
[54.29372025 134.11514282]
[64.02849579 122.70311737]
[56.84704590 109.53395844]
[41.98140335 111.53710938]
[27.11575890 113.54026794]
[19.69104195 127.03766632]
[5.90345478 133.49954224]
[-8.87061596 130.63758850]
[-19.00518608 119.75509644]
[-33.87083054 121.75825500]
[-48.73647308 123.76140594]
[-61.37857819 134.20693970]
[-76.64916992 128.22856140]
[-78.83917236 111.97630310]
[-65.69570160 102.16909790]
[-50.73963165 108.89576721]
[-35.87398529 106.89260864]
[-21.00834274 104.88945007]
[-14.11579037 91.71255493]
[-0.62622607 85.04204559]
[14.38001442 87.62393188]
[25.11260223 98.67462158]
[39.97824478 96.67147064]
[54.84389114 94.66831207]
[83.14345551 70.58881378]
[108.94971466 79.54330444]
[119.22856903 68.61878204]
[129.50743103 57.69425964]
[139.78628540 46.76973724]
[150.06512451 35.84521866]
[160.34397888 24.92069626]
[170.62283325 13.99617386]
[163.45793152 1.87585878]
[159.76969910 -11.69355774]
[159.81320190 -25.73724556]
[163.57580566 -39.24892044]
[170.77871704 -51.26295471]
[180.89761353 -60.92336273]
[193.20085144 -67.54482269]
[206.80227661 -70.66127014]
[207.53259277 -85.64347839]
[208.26290894 -100.62569427]
[198.19024658 -118.00803375]
[209.11387634 -133.88928223]
[209.11387634 -148.88928223]
[209.11387634 -163.88928223]
[200.45016479 -177.81307983]
[208.41429138 -192.14851379]
[224.81344604 -192.14851379]
[232.77757263 -177.81307983]
[224.11387634 -163.88928223]
[224.11387634 -148.88928223]
[224.11387634 -133.88928223]
[232.04542542 -127.24860382]
[235.02088928 -117.11090088]
[231.80503845 -106.81522369]
[223.24511719 -99.89537811]
[222.51480103 -84.91316223]
[221.78448486 -69.93095398]
[242.60891724 -60.80109024]
[257.56088257 -43.67070007]
[271.63531494 -48.85817337]
[285.70977783 -54.04564285]
[297.76809692 -70.11429596]
[316.65661621 -66.27201080]
[330.46179199 -72.13858032]
[344.26699829 -78.00515747]
[353.94183350 -90.52346039]
[368.68142700 -88.38016510]
[382.48663330 -94.24673462]
[391.91293335 -107.66600800]
[408.22128296 -105.94290161]
[414.63507080 -90.85001373]
[404.55633545 -77.91359711]
[388.35317993 -80.44154358]
[374.54800415 -74.57496643]
[365.86059570 -62.47628021]
[350.13357544 -64.19995880]
[336.32836914 -58.33338928]
[322.52319336 -52.46681976]
[319.51351929 -42.56984711]
[311.34704590 -35.86648178]
[300.61373901 -34.79948807]
[290.89724731 -39.97119522]
[276.82281494 -34.78372192]
[262.74835205 -29.59625244]
[263.90774536 -17.21549416]
[262.09957886 -4.89978027]
[257.42083740 6.64900875]
[250.13212585 16.77124786]
[240.64343262 24.88724327]
[229.49089050 30.53042603]
[217.30653381 33.37417603]
[204.78251648 33.25071716]
[192.63175964 30.16100693]
[181.54736328 24.27502632]
[171.26850891 35.19955063]
[160.98965454 46.12406921]
[150.71080017 57.04859161]
[140.43194580 67.97311401]
[130.15309143 78.89763641]
[119.87423706 89.82215881]
[132.00997925 111.15895081]
[118.81591797 141.39399719]
[119.54622650 156.37620544]
[120.27654266 171.35841370]
[121.00685883 186.34062195]
[134.42689514 193.95022583]
[141.58224487 207.61787415]
[140.18966675 222.98225403]
[130.69352722 235.14065552]
[116.12400055 240.21337891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[11 18]
[12 17]
[19 40]
[20 39]
[21 38]
[25 34]
[26 33]
[27 32]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 113]
[48 112]
[56 75]
[57 74]
[58 73]
[60 69]
[61 68]
[62 67]
[77 102]
[78 101]
[79 100]
[81 96]
[82 95]
[83 94]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
