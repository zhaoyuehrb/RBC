%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCAGGGCCCUGAAUGCCAGGACGGGAAUUUAAUCUAAUUCAACUUCAGCAAUGGGCUGAGGGACAGCUUC\
) } def
/len { sequence length } bind def

/coor [
[81.12243652 224.09626770]
[65.73353577 226.87394714]
[52.18522263 219.06515503]
[46.87460709 204.35694885]
[52.30919647 189.69409180]
[65.92294312 181.99993896]
[68.49234009 167.22164917]
[71.06173706 152.44334412]
[73.63113403 137.66503906]
[62.91103363 127.17316437]
[48.19143677 130.05993652]
[33.47183990 132.94671631]
[18.75224113 135.83348083]
[8.64597416 148.29313660]
[-7.39468718 148.01612854]
[-17.06472015 135.21495056]
[-12.94610214 119.70958710]
[1.80171490 113.39440918]
[15.86546803 121.11389160]
[30.58506584 118.22711945]
[45.30466080 115.34033966]
[60.02425766 112.45356750]
[59.13132477 100.11637115]
[61.87029266 88.35932159]
[67.82376862 78.20101929]
[76.30414581 70.46791077]
[86.42878723 65.72756958]
[83.85939026 50.94926453]
[81.28999329 36.17096329]
[78.72059631 21.39266205]
[76.15119934 6.61436033]
[63.08417130 -2.27542758]
[60.21253204 -17.81663895]
[69.23997498 -30.78894806]
[84.81067657 -33.49611282]
[97.68682098 -24.33202362]
[100.22920990 -8.73356915]
[90.92949677 4.04496336]
[93.49889374 18.82326508]
[96.06829071 33.60156631]
[98.63768768 48.37986755]
[101.20708466 63.15816879]
[116.21973419 66.89867401]
[128.37501526 76.47052765]
[135.53155518 90.18747711]
[150.50032043 89.21984863]
[165.46907043 88.25222015]
[180.43783569 87.28459930]
[195.40658569 86.31697083]
[210.37535095 85.34934235]
[225.34410095 84.38171387]
[236.97041321 73.32692719]
[252.84191895 75.66683960]
[260.78332520 89.60646820]
[254.70271301 104.45252991]
[239.26457214 108.81639099]
[226.31173706 99.35047150]
[211.34297180 100.31809998]
[196.37422180 101.28572845]
[181.40545654 102.25335693]
[166.43670654 103.22097778]
[151.46794128 104.18860626]
[136.49919128 105.15623474]
[133.54032898 117.56939697]
[126.38037872 128.54086304]
[115.66779327 136.65924072]
[102.52024841 140.79106140]
[88.40943909 140.23443604]
[85.84003448 155.01274109]
[83.27063751 169.79104614]
[80.70124054 184.56933594]
[90.91915131 196.40693665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 71]
[7 70]
[8 69]
[9 68]
[10 22]
[11 21]
[12 20]
[13 19]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
