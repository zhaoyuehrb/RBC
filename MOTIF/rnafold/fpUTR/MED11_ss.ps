%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGGCGCACACCGAGAGCCACUUCCGGAACAAGCGUCGCGUUUCUGAGGAGAAACUCUUGGUGAGAAUUCCCAGAGUGAUA\
) } def
/len { sequence length } bind def

/coor [
[154.73384094 254.46070862]
[149.72227478 268.59875488]
[153.23612976 284.61703491]
[140.94012451 295.46783447]
[125.48332977 289.98880005]
[122.76638031 273.81631470]
[135.58424377 263.58718872]
[140.59579468 249.44914246]
[138.95368958 243.50418091]
[140.59579468 236.97227478]
[135.58424377 222.83422852]
[130.57267761 208.69618225]
[125.56111145 194.55815125]
[120.54954529 180.42010498]
[115.53798676 166.28205872]
[110.52642059 152.14402771]
[105.51486206 138.00598145]
[100.50329590 123.86793518]
[86.43105316 119.64218140]
[77.49860382 107.97615051]
[77.08948517 93.28881836]
[85.35865784 81.14362335]
[80.34709930 67.00558472]
[75.33553314 52.86754227]
[70.32397461 38.72949982]
[65.04575348 24.68882942]
[59.50277710 10.75055790]
[53.95980072 -3.18771315]
[48.41682434 -17.12598419]
[42.87384796 -31.06425476]
[29.83836746 -35.00664139]
[21.63777924 -45.63269043]
[21.14285851 -58.84976578]
[28.31015015 -69.73168945]
[23.29858780 -83.86972809]
[12.30777359 -96.77857971]
[21.66957855 -110.91339111]
[37.84360504 -105.83035278]
[37.43663025 -88.88129425]
[42.44819260 -74.74324799]
[57.84894562 -68.27616119]
[64.04182434 -52.40363693]
[56.81211853 -36.60723114]
[62.35509491 -22.66896248]
[67.89807129 -8.73069096]
[73.44104767 5.20758057]
[78.98402405 19.14585114]
[84.51977539 24.32591248]
[84.46201324 33.71793747]
[89.47357941 47.85597992]
[94.48513794 61.99402237]
[99.49670410 76.13206482]
[113.56894684 80.35781860]
[122.50139618 92.02384949]
[122.91051483 106.71118164]
[114.64134216 118.85637665]
[119.65290070 132.99441528]
[124.66446686 147.13246155]
[129.67602539 161.27049255]
[134.68759155 175.40853882]
[139.69915771 189.54658508]
[144.71070862 203.68463135]
[149.72227478 217.82266235]
[154.73384094 231.96070862]
[160.10455322 217.95515442]
[169.28140259 206.08985901]
[181.48669434 197.37030029]
[195.68612671 192.53541565]
[210.67639160 191.99493408]
[225.18714905 195.79466248]
[237.98870850 203.61257935]
[247.99623108 214.78617859]
[254.36164856 228.36859131]
[256.54550171 243.20875549]
[254.36277771 258.04910278]
[247.99839783 271.63198853]
[237.99171448 282.80633545]
[225.19075012 290.62524414]
[210.68028259 294.42605591]
[195.68997192 293.88671875]
[181.49017334 289.05291748]
[169.28421021 280.33428955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 8]
[2 7]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[22 52]
[23 51]
[24 50]
[25 49]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
