%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:45:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUGUUUUUCAGCUCACUUCAAGGGUACCUGAAGCGAAUUGGCACCAAAGCAGCAGCUGUAUUGCCGCAGUUCUAGCUUCACCUUCACG\
) } def
/len { sequence length } bind def

/coor [
[38.31952286 233.77154541]
[32.02680206 237.86193848]
[25.17648125 240.91806030]
[17.93707275 242.86618042]
[10.48645210 243.65975952]
[3.00746584 243.28067017]
[-4.31654453 241.73947144]
[-11.30624104 239.07527161]
[-17.79068184 235.35459900]
[-23.61149597 230.66983032]
[-28.62676048 225.13687134]
[-32.71445465 218.89228821]
[-35.77542114 212.08990479]
[-50.50583649 214.92097473]
[-65.23625183 217.75204468]
[-79.96665955 220.58309937]
[-87.41818237 234.33116150]
[-101.98235321 240.02491760]
[-116.78242493 234.97595215]
[-124.83025360 221.56825256]
[-122.32589722 206.13250732]
[-110.45184326 195.95701599]
[-94.81465149 195.84631348]
[-82.79772186 205.85269165]
[-68.06731415 203.02162170]
[-53.33689880 200.19056702]
[-38.60648727 197.35949707]
[-32.46966171 172.12557983]
[-13.96476650 153.79154968]
[11.48061371 147.85273743]
[36.34122086 156.15147400]
[46.66967010 145.27383423]
[56.99811935 134.39617920]
[67.32656860 123.51853943]
[77.65501404 112.64089203]
[87.98345947 101.76324463]
[97.93030548 90.53558350]
[107.48368073 78.97129059]
[117.03705597 67.40699005]
[126.59043884 55.84269333]
[135.73896790 43.95553970]
[144.47174072 31.75970078]
[153.20452881 19.56385803]
[161.93730164 7.36801720]
[170.67008972 -4.82782459]
[164.44624329 -18.79961586]
[166.04093933 -33.91099548]
[174.92631531 -46.11412048]
[188.63514709 -52.19062805]
[203.44514465 -50.60012436]
[212.17793274 -62.79596710]
[220.91070557 -74.99180603]
[221.97286987 -91.35652161]
[236.79402161 -98.37543488]
[250.12745667 -88.82809448]
[248.25685120 -72.53598022]
[233.10655212 -66.25902557]
[224.37376404 -54.06318665]
[215.64099121 -41.86734390]
[221.91731262 -28.35907555]
[220.58059692 -13.42357731]
[211.89007568 -1.08091772]
[198.09783936 5.29646540]
[182.86592102 3.90495586]
[174.13314819 16.10079765]
[165.40036011 28.29663849]
[156.66758728 40.49248123]
[147.93479919 52.68832016]
[147.86857605 57.66142654]
[144.52813721 62.59327698]
[138.15473938 65.39607239]
[128.60134888 76.96037292]
[119.04798126 88.52466583]
[109.49459839 100.08896637]
[108.78682709 105.52297211]
[104.97814178 110.10181427]
[98.86110687 112.09169769]
[88.53266144 122.96934509]
[78.20420837 133.84698486]
[67.87576294 144.72462463]
[57.54731369 155.60227966]
[47.21886444 166.47991943]
[51.31167221 172.82084656]
[54.36267853 179.71916199]
[56.29825592 187.00517273]
[57.07220078 194.49986267]
[56.66683197 202.01931763]
[55.09339142 209.37919617]
[52.39173889 216.39929199]
[48.62934494 222.90791321]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 27]
[14 26]
[15 25]
[16 24]
[31 82]
[32 81]
[33 80]
[34 79]
[35 78]
[36 77]
[37 74]
[38 73]
[39 72]
[40 71]
[41 68]
[42 67]
[43 66]
[44 65]
[45 64]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
