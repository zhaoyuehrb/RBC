%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUGCUUAUAGAGGCCCGUCCUCUGUGGCCGUGUGACCUGCAAGUAUUGGGAGAGCCACAGCUAAACCCCGGGACCCCUGGAAGCCUAGAA\
) } def
/len { sequence length } bind def

/coor [
[104.01120758 270.37628174]
[102.99856567 255.41050720]
[101.98591614 240.44473267]
[93.40705872 228.26882935]
[100.19506073 213.97779846]
[99.18241119 199.01202393]
[98.16976166 184.04624939]
[97.15711975 169.08045959]
[88.57825470 156.90457153]
[95.36625671 142.61354065]
[94.35361481 127.64775848]
[93.34096527 112.68198395]
[85.70873260 100.96700287]
[91.69325256 88.33066559]
[90.68061066 73.36488342]
[89.41534424 58.41834259]
[87.89781952 43.49530411]
[86.38029480 28.57226372]
[84.86277008 13.64922428]
[67.20242310 6.79961205]
[55.31196976 -7.84427023]
[52.26004028 -26.37924385]
[58.77273178 -43.91464615]
[73.06279755 -55.86276245]
[69.54880524 -70.44535065]
[66.03480530 -85.02793884]
[62.52080917 -99.61051941]
[59.00681305 -114.19310760]
[55.49281693 -128.77569580]
[51.97882080 -143.35827637]
[39.77898788 -145.33560181]
[29.03586960 -151.37419128]
[21.05057907 -160.71496582]
[16.78065681 -172.20065308]
[16.72529411 -184.41912842]
[20.86708832 -195.87699890]
[28.67712784 -205.18217468]
[39.18239975 -211.21296692]
[37.16172791 -226.07624817]
[22.91707039 -231.81953430]
[13.46512318 -243.92556763]
[11.34841061 -259.13790894]
[17.13631821 -273.36450195]
[29.27192879 -282.77844238]
[44.49082184 -284.84747314]
[58.69919586 -279.01498413]
[68.07506561 -266.84994507]
[70.09636688 -251.62463379]
[64.21939087 -237.43460083]
[52.02500153 -228.09690857]
[54.04567337 -213.23364258]
[70.93618011 -207.34384155]
[82.69883728 -193.75740051]
[86.14167786 -176.03498840]
[80.26765442 -158.87596130]
[66.56140900 -146.87228394]
[70.07540131 -132.28968811]
[73.58940125 -117.70710754]
[77.10339355 -103.12451935]
[80.61739349 -88.54193115]
[84.13139343 -73.95934296]
[87.64538574 -59.37675858]
[99.05340576 -57.95694733]
[109.46873474 -53.02722168]
[117.83809662 -45.06738663]
[123.30928040 -34.86460114]
[125.31788635 -23.43555832]
[123.64552307 -11.92516613]
[118.44340515 -1.49186945]
[110.21883392 6.80894470]
[99.78580475 12.13169956]
[101.30332947 27.05473900]
[102.82086182 41.97777939]
[104.33838654 56.90081787]
[108.22706604 63.36922455]
[105.64638519 72.35224152]
[106.65903473 87.31801605]
[114.29126740 99.03299713]
[108.30674744 111.66933441]
[109.31938934 126.63511658]
[110.33203888 141.60089111]
[118.98332977 154.84724426]
[112.12290192 168.06782532]
[113.13554382 183.03359985]
[114.14819336 197.99937439]
[115.16083527 212.96514893]
[123.81213379 226.21150208]
[116.95169830 239.43208313]
[117.96434784 254.39785767]
[118.97698975 269.36364746]
[126.07883453 284.75845337]
[113.25164032 295.84445190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[5 86]
[6 85]
[7 84]
[8 83]
[10 81]
[11 80]
[12 79]
[14 77]
[15 76]
[16 74]
[17 73]
[18 72]
[19 71]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[38 51]
[39 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
