%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:18:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCAUAGCGUUCCUGUCCGGAAGUCCUGAGAGGGAAACGCCCGCAAAGGCUGGUUUUUAAGCGGGAGCAUCUCUUCACUCGCAGCAAGUGCGCGUGCGCUGCCUCUCAGCCCAAAUUGGAAAC\
) } def
/len { sequence length } bind def

/coor [
[-0.84606069 388.20654297]
[-6.96970034 401.89965820]
[-13.09333992 415.59274292]
[-19.21697998 429.28585815]
[-25.17079163 443.05364990]
[-30.95386696 456.89401245]
[-31.48155212 473.83975220]
[-47.91111755 478.02374268]
[-56.47974396 463.39450073]
[-44.79424667 451.11096191]
[-39.01116943 437.27056885]
[-39.33882141 429.80572510]
[-32.91007996 423.16220093]
[-26.78644180 409.46911621]
[-20.66280174 395.77600098]
[-14.53916264 382.08291626]
[-22.12249184 365.50778198]
[-15.16446972 348.31875610]
[2.40272093 341.45538330]
[7.84169292 327.47619629]
[13.28066540 313.49700928]
[18.71963692 299.51782227]
[24.15860939 285.53863525]
[13.05754280 274.11352539]
[8.00750065 258.94400024]
[10.06022835 243.02984619]
[18.85761642 229.54121399]
[32.69296265 221.18713379]
[48.84187698 219.67149353]
[53.93341827 205.56205750]
[59.02495956 191.45262146]
[64.11650085 177.34318542]
[69.20803833 163.23374939]
[74.29958344 149.12431335]
[79.39112091 135.01487732]
[84.48266602 120.90543365]
[76.18418121 110.51815796]
[74.09628296 97.38799286]
[78.76345825 84.93898010]
[88.96861267 76.41751862]
[102.05049133 74.04579926]
[107.48946381 60.06661606]
[112.92843628 46.08743286]
[108.87766266 26.41303635]
[124.26150513 14.80355835]
[129.00250244 0.57250142]
[133.74349976 -13.65855503]
[138.48448181 -27.88961220]
[129.62979126 -40.49518585]
[129.89244080 -55.71965408]
[138.96217346 -67.72814941]
[153.19351196 -72.04174042]
[157.93450928 -86.27279663]
[162.67550659 -100.50385284]
[167.41648865 -114.73490906]
[155.99427795 -124.72534180]
[149.28527832 -138.29119873]
[148.28392029 -153.35144043]
[153.11172485 -167.60906982]
[163.00350952 -178.90142822]
[176.42851257 -185.52825928]
[191.32717896 -186.50765991]
[196.06816101 -200.73870850]
[200.80915833 -214.96977234]
[197.83026123 -230.50799561]
[209.19358826 -240.13732910]
[213.93458557 -254.36839294]
[208.07231140 -269.30203247]
[216.21730042 -283.12371826]
[232.12139893 -285.23062134]
[243.58435059 -274.00653076]
[241.81275940 -258.06158447]
[228.16564941 -249.62739563]
[223.42465210 -235.39634705]
[226.74264526 -220.87600708]
[215.04022217 -210.22877502]
[210.29922485 -195.99771118]
[205.55822754 -181.76666260]
[216.89282227 -172.04780579]
[223.66127014 -158.69363403]
[224.80438232 -143.72506714]
[220.11691284 -129.42068481]
[210.28358459 -117.96996307]
[196.77919006 -111.13808441]
[181.64755249 -109.99391174]
[176.90655518 -95.76285553]
[172.16555786 -81.53179932]
[167.42457581 -67.30074310]
[176.22557068 -55.31406784]
[176.28137207 -40.26544952]
[167.36102295 -27.92524529]
[152.71554565 -23.14861679]
[147.97454834 -8.91756058]
[143.23355103 5.31349564]
[138.49255371 19.54455185]
[143.92068481 28.35643005]
[143.53620911 38.91994095]
[137.22360229 47.67244339]
[126.90761566 51.52640533]
[121.46864319 65.50559235]
[116.02967072 79.48477173]
[125.06089783 92.94476318]
[124.37817383 109.13945770]
[114.24613190 121.79157257]
[98.59210205 125.99697876]
[93.50055695 140.10641479]
[88.40901947 154.21585083]
[83.31747437 168.32528687]
[78.22593689 182.43472290]
[73.13439941 196.54415894]
[68.04285431 210.65359497]
[62.95131302 224.76303101]
[73.26081848 234.51319885]
[79.03945160 247.42550659]
[79.43878174 261.52276611]
[74.43131256 274.66027832]
[64.80958557 284.85202026]
[52.06097412 290.57092285]
[38.13779449 290.97760010]
[32.69882202 304.95678711]
[27.25984955 318.93597412]
[21.82087708 332.91516113]
[16.38190460 346.89434814]
[23.25748062 356.74951172]
[24.45867157 368.58468628]
[19.79873657 379.39883423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 14]
[4 13]
[5 11]
[6 10]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[29 112]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[41 101]
[42 100]
[43 99]
[45 95]
[46 94]
[47 93]
[48 92]
[52 88]
[53 87]
[54 86]
[55 85]
[62 78]
[63 77]
[64 76]
[66 74]
[67 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
