%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCACUAAGGACCGAGCACCAAAUAACCAAGGAAAAGGAAGUGAGUUAAGGACGUACUCGUCUUGGUGAGAGCGUGAGCUGCUGAGAUUUGGGAGUCUGCGCUAGGCCCGCUUGGAGUUCUGAGCCGAUGGAAGAGUUCACUC\
) } def
/len { sequence length } bind def

/coor [
[86.70934296 127.84294891]
[76.01153564 119.40167236]
[69.99357605 107.17536926]
[54.99445724 107.01287079]
[39.99533844 106.85037994]
[24.99621964 106.68788910]
[9.99709892 106.52539062]
[-5.00202084 106.36289978]
[-20.00114059 106.20040894]
[-35.00025940 106.03791809]
[-49.99938202 105.87541962]
[-56.04592133 108.83393860]
[-61.79928589 108.31644440]
[-65.64105225 105.36689758]
[-80.61904907 104.55481720]
[-95.59705353 103.74272919]
[-110.57505035 102.93064880]
[-124.77387238 109.90947723]
[-137.06359863 101.49448395]
[-152.04159546 100.68239594]
[-160.89985657 114.60224152]
[-175.47575378 122.13172150]
[-191.76716614 121.30952454]
[-205.35403442 112.45304871]
[-212.59754944 98.04669189]
[-227.58963013 97.55928802]
[-242.58169556 97.07188416]
[-257.57379150 96.58448029]
[-272.57025146 96.25951385]
[-287.56936646 96.09702301]
[-294.29415894 109.79884338]
[-306.30328369 119.21923065]
[-321.21234131 122.48775482]
[-336.06109619 118.95545197]
[-347.90133667 109.32365417]
[-354.38217163 95.50477600]
[-354.21682739 80.24255371]
[-347.43814087 66.56731415]
[-335.39199829 57.19429398]
[-320.47021484 53.98450851]
[-305.63546753 57.57526016]
[-293.83325195 67.25360870]
[-287.40689087 81.09790039]
[-272.40777588 81.26039886]
[-265.63510132 78.16477966]
[-257.08636475 81.59240723]
[-242.09429932 82.07980347]
[-227.10221863 82.56720734]
[-212.11013794 83.05461121]
[-205.65620422 70.97391510]
[-194.56420898 62.82620239]
[-180.97598267 60.25579834]
[-167.54618835 63.82316971]
[-156.92378235 72.88393402]
[-151.22950745 85.70439911]
[-136.25151062 86.51647949]
[-123.12401581 79.47956848]
[-109.76296997 87.95264435]
[-94.78496552 88.76473236]
[-79.80696869 89.57681274]
[-64.82896423 90.38890076]
[-49.83688736 90.87630463]
[-34.83776855 91.03879547]
[-19.83864784 91.20128632]
[-4.83952761 91.36377716]
[10.15959263 91.52627563]
[25.15871239 91.68876648]
[40.15783310 91.85125732]
[55.15695190 92.01375580]
[70.15607452 92.17624664]
[78.11331177 78.25502014]
[91.98255157 70.20751953]
[108.01744843 70.20751953]
[121.88668823 78.25502014]
[129.84393311 92.17624664]
[144.84304810 92.01375580]
[159.84216309 91.85125732]
[174.84129333 91.68876648]
[189.84040833 91.52627563]
[204.83952332 91.36377716]
[219.83865356 91.20128632]
[234.75071716 89.57950592]
[249.43409729 86.51383209]
[264.11746216 83.44815826]
[276.04501343 73.05371857]
[290.08499146 78.02652740]
[304.76837158 74.96085358]
[319.45175171 71.89517975]
[323.19348145 57.13846207]
[332.93154907 45.51705933]
[346.69338989 39.30160141]
[361.72738647 39.67607498]
[375.05294800 46.51266098]
[384.05148315 58.40770340]
[398.73486328 55.34202957]
[413.41824341 52.27635574]
[428.10162354 49.21068192]
[436.77313232 36.27072525]
[451.70782471 33.37086487]
[463.99066162 41.71757889]
[478.67404175 38.65190506]
[488.62796021 26.07019806]
[504.67080688 26.15199852]
[514.49591064 38.83455658]
[510.56625366 54.38889694]
[495.89636230 60.88306046]
[481.73971558 53.33528519]
[467.05633545 56.40095901]
[459.13937378 68.96508789]
[444.29202271 72.28328705]
[431.16729736 63.89406204]
[416.48391724 66.95973969]
[401.80053711 70.02541351]
[387.11715698 73.09108734]
[383.62991333 87.59297180]
[374.15310669 99.19035339]
[360.52490234 105.54907227]
[345.42575073 105.35936737]
[331.85116577 98.60530090]
[322.51742554 86.57855988]
[307.83404541 89.64423370]
[293.15066528 92.70989990]
[282.27337646 102.88506317]
[267.18313599 98.13153839]
[252.49977112 101.19721222]
[237.81639099 104.26288605]
[250.91372681 111.57449341]
[258.11462402 124.73302460]
[257.21228027 139.70585632]
[248.48321533 151.90435791]
[234.60258484 157.59011841]
[219.82429504 155.02066040]
[208.67736816 144.98342896]
[204.57794189 130.55447388]
[208.78233337 116.15575409]
[220.00114441 106.20040894]
[205.00201416 106.36289978]
[190.00289917 106.52539062]
[175.00378418 106.68788910]
[160.00465393 106.85037994]
[145.00553894 107.01287079]
[130.00642395 107.17536926]
[123.98846436 119.40167236]
[113.29065704 127.84294891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[8 65]
[9 64]
[10 63]
[11 62]
[14 61]
[15 60]
[16 59]
[17 58]
[19 56]
[20 55]
[25 49]
[26 48]
[27 47]
[28 46]
[29 44]
[30 43]
[75 142]
[76 141]
[77 140]
[78 139]
[79 138]
[80 137]
[81 136]
[82 126]
[83 125]
[84 124]
[86 122]
[87 121]
[88 120]
[94 114]
[95 113]
[96 112]
[97 111]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
