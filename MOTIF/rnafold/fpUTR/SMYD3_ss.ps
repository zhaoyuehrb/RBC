%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCGCCCGCCCCGCCCCUCGGGCGUACGUGUGCGCGCAGGGCGCAGGCGCGCGGGUCCCGGCAGCCCGUGAGACGCCCGCUGCUGGACGCGGGUAGCCGUCUGAGGUGCCGGAGCUGCGGGAGG\
) } def
/len { sequence length } bind def

/coor [
[117.93071747 420.85736084]
[116.43719482 405.93188477]
[114.94367981 391.00643921]
[113.45016479 376.08096313]
[111.77069855 361.17529297]
[109.90554047 346.29168701]
[107.85498810 331.43252563]
[105.61935425 316.60006714]
[103.38372040 301.76757812]
[101.08860779 299.98141479]
[99.40408325 297.12866211]
[98.75948334 293.45306396]
[99.48172760 289.35607910]
[101.74131012 285.35418701]
[100.99362183 270.37283325]
[92.63153839 258.04705811]
[99.67133331 243.87835693]
[98.92364502 228.89700317]
[98.17595673 213.91564941]
[97.42826843 198.93429565]
[96.68058014 183.95294189]
[95.93289185 168.97158813]
[95.18520355 153.99023438]
[94.43751526 139.00888062]
[93.68982697 124.02753448]
[82.42911530 119.48567200]
[74.13864136 109.73651123]
[71.16896057 96.61497498]
[74.78380585 82.97637939]
[60.82070160 77.49626160]
[45.14773178 79.65694427]
[36.12699890 67.80470276]
[22.16389465 62.32458496]
[8.20078754 56.84447098]
[-5.76231861 51.36435318]
[-19.72542381 45.88423920]
[-34.94569778 50.95601273]
[-48.32163620 42.09803009]
[-49.59236526 26.10538292]
[-37.78309250 15.24625683]
[-21.95287704 17.85084724]
[-14.24530983 31.92113304]
[-0.28220317 37.40124893]
[13.68090343 42.88136292]
[27.64400864 48.36148071]
[41.60711670 53.84159470]
[56.28135300 51.28894043]
[66.30081940 63.53315735]
[80.26392365 69.01327515]
[94.29425812 63.70765305]
[101.13742065 50.35957336]
[100.54800415 34.54935074]
[113.23952484 26.75354958]
[120.08268738 13.40547371]
[119.49326324 -2.40474987]
[132.18478394 -10.20055103]
[139.02793884 -23.54862785]
[145.87110901 -36.89670563]
[152.71426392 -50.24478149]
[153.87001038 -59.41920090]
[159.89805603 -63.83716202]
[167.07185364 -77.01049042]
[174.24566650 -90.18380737]
[181.41947937 -103.35713196]
[188.59329224 -116.53045654]
[195.76710510 -129.70378113]
[191.52372742 -144.69149780]
[198.98664856 -157.94892883]
[213.30130005 -161.90196228]
[220.47509766 -175.07528687]
[227.64891052 -188.24861145]
[229.91401672 -205.05056763]
[246.68638611 -207.52522278]
[253.70739746 -192.09338379]
[240.82223511 -181.07479858]
[233.64842224 -167.90147400]
[226.47462463 -154.72814941]
[230.92031860 -140.55877686]
[223.83271790 -127.09696198]
[208.94041443 -122.52996826]
[201.76661682 -109.35665131]
[194.59280396 -96.18332672]
[187.41899109 -83.01000214]
[180.24517822 -69.83667755]
[173.07136536 -56.66335297]
[166.06234741 -43.40162277]
[159.21917725 -30.05354500]
[152.37602234 -16.70546913]
[145.53286743 -3.35739160]
[146.61175537 11.49808788]
[133.43075562 20.24863243]
[126.58760071 33.59671021]
[127.66648865 48.45219040]
[114.48549652 57.20273590]
[107.64234161 70.55081177]
[122.49707794 81.65419769]
[127.59709930 98.58236694]
[121.92603302 114.41098785]
[108.67118073 123.27984619]
[109.41886902 138.26119995]
[110.16655731 153.24255371]
[110.91424561 168.22390747]
[111.66193390 183.20526123]
[112.40962219 198.18661499]
[113.15731049 213.16796875]
[113.90499878 228.14932251]
[114.65268707 243.13067627]
[123.06825256 256.52801514]
[115.97497559 269.62515259]
[116.72266388 284.60650635]
[118.21617889 299.53195190]
[120.45181274 314.36441040]
[122.68744659 329.19686890]
[127.10456085 337.32061768]
[124.78913116 344.42654419]
[126.65428162 359.31011963]
[130.86749268 367.54144287]
[128.37562561 374.58746338]
[129.86914062 389.51290894]
[131.36265564 404.43838501]
[132.85617065 419.36383057]
[144.31304932 430.59411621]
[142.53283691 446.53811646]
[128.88114929 454.96490479]
[113.83039856 449.41021729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 121]
[2 120]
[3 119]
[4 118]
[5 116]
[6 115]
[7 113]
[8 112]
[9 111]
[14 110]
[15 109]
[17 107]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[25 99]
[29 49]
[30 48]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[50 95]
[51 94]
[53 92]
[54 91]
[56 89]
[57 88]
[58 87]
[59 86]
[61 85]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[69 77]
[70 76]
[71 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
