%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:52:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACUAGCAGUUCUCUGCGGAGGGCCGGUUGAUACAGUUCCGGUGGGAGAACGCGGCUGCGAGGUUUUCGGCUUUGGCUCCUGAU\
) } def
/len { sequence length } bind def

/coor [
[86.45259094 290.08789062]
[74.28142548 298.85504150]
[59.46301651 301.18200684]
[45.19048309 296.56735229]
[34.53932190 286.00552368]
[29.80467224 271.77233887]
[32.00707245 256.93414307]
[20.13462448 266.10174561]
[8.26217651 275.26934814]
[-3.61027074 284.43695068]
[-9.33588505 299.80410767]
[-25.54979706 302.26196289]
[-35.57252502 289.28210449]
[-29.09354591 274.21707153]
[-12.77787685 272.56451416]
[-0.90542907 263.39688110]
[10.96701813 254.22929382]
[22.83946609 245.06167603]
[32.64353943 233.70915222]
[39.98480606 220.62840271]
[47.32607651 207.54766846]
[54.66734314 194.46691895]
[61.03419495 180.88519287]
[66.39265442 166.87495422]
[71.75112152 152.86471558]
[77.10958099 138.85447693]
[82.46804810 124.84423065]
[87.82650757 110.83399200]
[83.70514679 99.78332520]
[88.11888885 88.84615326]
[98.75585175 83.75126648]
[104.62242889 69.94607544]
[110.48899841 56.14088440]
[102.67332458 42.86603928]
[104.15560913 27.71162605]
[114.15881348 16.46885490]
[128.69013977 13.31000710]
[134.55671692 -0.49518558]
[131.81300354 -18.59196091]
[145.99612427 -28.75258446]
[151.35458374 -42.76282501]
[156.71304321 -56.77306747]
[161.81472778 -70.87883759]
[166.65794373 -85.07543945]
[159.46537781 -99.14820099]
[164.40985107 -114.15912628]
[178.55787659 -121.20249176]
[193.51568604 -116.09959412]
[200.40907288 -101.87789917]
[195.14831543 -86.97487640]
[180.85453796 -80.23223114]
[176.01132202 -66.03563690]
[176.85186768 -58.51211166]
[170.72328186 -51.41460419]
[165.36482239 -37.40436172]
[160.00636292 -23.39412117]
[164.66978455 -12.07276726]
[160.13404846 -0.26580530]
[148.36190796 5.37138510]
[142.49533081 19.17657852]
[150.30709839 31.83021164]
[149.15635681 46.83486938]
[139.27545166 58.42025757]
[124.29418945 62.00745392]
[118.42761993 75.81264496]
[112.56105042 89.61783600]
[115.11213684 106.09856415]
[101.83675385 116.19245148]
[96.47828674 130.20269775]
[91.11982727 144.21293640]
[85.76136017 158.22317505]
[80.40290070 172.23341370]
[75.04443359 186.24366760]
[76.03883362 191.04443359]
[75.36156464 195.41197205]
[73.39780426 198.83302307]
[70.66920471 200.99375916]
[67.74808502 201.80818176]
[60.40681458 214.88893127]
[53.06554794 227.96966553]
[45.72428131 241.05041504]
[60.08290482 236.71107483]
[74.85382843 239.32254028]
[86.85417175 248.32208252]
[93.49805450 261.77044678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 18]
[8 17]
[9 16]
[10 15]
[19 81]
[20 80]
[21 79]
[22 78]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[28 68]
[31 66]
[32 65]
[33 64]
[37 60]
[38 59]
[40 56]
[41 55]
[42 54]
[43 52]
[44 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
