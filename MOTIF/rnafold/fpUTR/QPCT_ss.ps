%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGAUGGGAAGGCGGGCGCAGUCGACCCAAGGGUGGAGAAGAGGGAAGGCGAAGGACGCGCGUUCCCGGGCUCGUGACCGCCAGCGGCCCGGGGAACCCGCUCCCAGACAGACUCGGAGAG\
) } def
/len { sequence length } bind def

/coor [
[113.52353668 314.04483032]
[117.27290344 298.98754883]
[129.17828369 289.03558350]
[128.03004456 274.07958984]
[126.88180542 259.12359619]
[124.40294647 244.32984924]
[120.61325073 229.81646729]
[116.82356262 215.30308533]
[113.03387451 200.78970337]
[109.24417877 186.27632141]
[105.54964447 183.08444214]
[103.89305878 177.49423218]
[105.65180969 170.92488098]
[102.60812378 156.23692322]
[99.56443787 141.54898071]
[96.52075195 126.86102295]
[93.47706604 112.17306519]
[84.53676605 100.12852478]
[71.35908508 92.96272278]
[58.18140030 85.79692841]
[53.14668655 96.39139557]
[41.26708603 104.23370361]
[24.40785408 105.59593964]
[9.40907669 105.78749847]
[-4.29116201 113.70040131]
[-17.11620331 106.12625885]
[-32.11498260 106.31781769]
[-47.11375809 106.50936890]
[-60.92578888 115.35018158]
[-75.36175537 107.56977081]
[-75.57118225 91.17195892]
[-61.33861923 83.02541351]
[-47.30531311 91.51059723]
[-32.30653763 91.31903839]
[-17.30776024 91.12748718]
[-4.68033361 83.22828674]
[9.21752167 90.78871918]
[24.21629906 90.59716797]
[28.53118896 84.46269226]
[15.27668667 77.44000244]
[2.02218533 70.41731262]
[-12.89039230 68.80020905]
[-21.75725937 56.70150375]
[-18.80846214 41.99420547]
[-5.96287870 34.24882126]
[8.42046356 38.50551605]
[14.98180580 51.99264526]
[26.07138634 62.09320068]
[37.16096878 72.19375610]
[41.47585678 66.05928040]
[36.58629990 51.87858582]
[31.69673920 37.69788742]
[17.96216011 29.40687561]
[16.02391815 13.48133659]
[27.36886597 2.13798213]
[43.29413223 4.07846212]
[51.58321381 17.81420708]
[45.87743759 32.80832672]
[50.76699829 46.98902512]
[55.65655518 61.16972351]
[65.34719849 72.61923981]
[78.52487946 79.78504181]
[91.70256805 86.95083618]
[106.67199707 85.99368286]
[118.82972717 77.20793152]
[130.98747253 68.42217255]
[143.14520264 59.63642120]
[155.30293274 50.85066605]
[167.46066284 42.06491089]
[179.61840820 33.27915573]
[191.77613831 24.49340057]
[203.93386841 15.70764637]
[209.13363647 8.05294609]
[216.51617432 6.85745573]
[228.89431763 -1.61494160]
[241.27246094 -10.08733940]
[241.57373047 -25.60149002]
[250.96328735 -37.95527267]
[265.83062744 -42.39840698]
[280.45898438 -37.22241592]
[289.22344971 -24.41757584]
[288.75390625 -8.90760708]
[279.23086548 3.34359026]
[264.31619263 7.62518120]
[249.74485779 2.29080629]
[237.36671448 10.76320362]
[224.98857117 19.23560143]
[212.71963501 27.86538124]
[200.56188965 36.65113449]
[188.40415955 45.43688965]
[176.24642944 54.22264481]
[164.08868408 63.00839996]
[151.93095398 71.79415894]
[139.77322388 80.57991028]
[127.61548615 89.36566925]
[115.45774841 98.15142059]
[113.01129913 104.91293335]
[108.16501617 109.12937927]
[111.20870209 123.81733704]
[114.25238800 138.50529480]
[117.29607391 153.19323730]
[120.33975983 167.88119507]
[123.75756073 182.48663330]
[127.54725647 197.00001526]
[131.33694458 211.51339722]
[135.12663269 226.02677917]
[138.91632080 240.54016113]
[147.16357422 228.01087952]
[161.47212219 223.50914001]
[175.40751648 229.05934143]
[182.70312500 242.16560364]
[180.07818604 256.93414307]
[168.71308899 266.72366333]
[153.71864319 267.13189697]
[141.83779907 257.97537231]
[142.98603821 272.93133545]
[144.13427734 287.88732910]
[157.41928101 295.90533447]
[163.42320251 310.21380615]
[159.83738708 325.31088257]
[148.04066467 335.39141846]
[132.56912231 336.57922363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 107]
[7 106]
[8 105]
[9 104]
[10 103]
[13 102]
[14 101]
[15 100]
[16 99]
[17 98]
[18 63]
[19 62]
[20 61]
[23 38]
[24 37]
[26 35]
[27 34]
[28 33]
[50 60]
[51 59]
[52 58]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
