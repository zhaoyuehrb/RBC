%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGCUGAGCAGUCAACAGCAUUUCUUGUUCCAAGAUCACCCUUCUGAGUACCUCUCUGGCUGCCAAAUUGCCAGGGCCUUCACAGUUUGAUUCCAUUUCUCAGCUCCAAGCAUUAGGUAAACCCACCAAGCAAUCCUAGCCUGUG\
) } def
/len { sequence length } bind def

/coor [
[182.83087158 255.28654480]
[197.67053223 257.47390747]
[211.40325928 263.50192261]
[202.79241943 251.21969604]
[194.18157959 238.93745422]
[185.57073975 226.65521240]
[176.95988464 214.37297058]
[168.34904480 202.09074402]
[159.48117065 189.99276733]
[150.36021423 178.08445740]
[141.23924255 166.17613220]
[132.11828613 154.26782227]
[121.35378265 159.33460999]
[109.82917786 162.28938293]
[97.95471191 163.02696228]
[86.15304565 161.52107239]
[74.84426117 157.82533264]
[64.43090057 152.07128906]
[55.28363037 144.46376038]
[47.72804260 135.27354431]
[34.38454819 142.12564087]
[21.04105568 148.97772217]
[7.69756222 155.82981873]
[1.43912923 170.60180664]
[-14.05029392 174.77999878]
[-26.88854790 165.15925598]
[-27.22722244 149.11978149]
[-14.80651474 138.96568298]
[0.84546947 142.48632812]
[14.18896294 135.63423157]
[27.53245735 128.78213501]
[40.87594986 121.93004608]
[37.07517242 104.12871552]
[38.51736450 85.98337555]
[45.08236313 69.00591278]
[56.22315979 54.61091995]
[71.01149750 43.99779510]
[65.74933624 29.95109749]
[60.48717499 15.90440273]
[55.22501373 1.85770679]
[49.96285248 -12.18898869]
[35.85506821 -18.79263687]
[30.71858978 -33.11294556]
[37.10110092 -46.52186584]
[31.83893776 -60.56856155]
[20.40857124 -66.63915253]
[16.33578873 -78.50002289]
[21.29817963 -89.57830811]
[16.33333397 -103.73282623]
[11.36848831 -117.88733673]
[6.40364218 -132.04185486]
[-4.17549944 -134.14828491]
[-12.83845139 -140.43833923]
[-18.03711891 -149.70411682]
[-18.87772179 -160.21395874]
[-15.27380180 -170.03591919]
[-7.94968081 -177.39291382]
[-12.00987148 -191.83296204]
[-16.07006264 -206.27299500]
[-20.13025284 -220.71304321]
[-24.19044304 -235.15309143]
[-28.25063515 -249.59312439]
[-32.31082535 -264.03317261]
[-47.09208298 -268.45108032]
[-57.12100983 -280.17388916]
[-59.19741440 -295.46087646]
[-52.65872192 -309.43405151]
[-39.59140778 -317.63458252]
[-24.16519737 -317.44573975]
[-11.30254650 -308.92776489]
[-5.10787630 -294.79873657]
[-7.55788469 -279.56713867]
[-17.87078285 -268.09335327]
[-13.81059170 -253.65332031]
[-9.75040054 -239.21327209]
[-5.69020987 -224.77323914]
[-1.63001919 -210.33319092]
[2.43017149 -195.89314270]
[6.49036217 -181.45310974]
[24.11328697 -173.28608704]
[30.24390602 -154.53713989]
[20.55815697 -137.00669861]
[25.52300453 -122.85218048]
[30.48785019 -108.69766998]
[35.45269394 -94.54315186]
[49.35641098 -83.88291168]
[45.88563538 -65.83071899]
[51.14779663 -51.78402710]
[64.76941681 -45.86903763]
[70.30609131 -31.69865036]
[64.00955200 -17.45115089]
[69.27171326 -3.40445471]
[74.53387451 10.64224148]
[79.79603577 24.68893623]
[85.05819702 38.73563385]
[99.86557770 36.94001007]
[114.68048096 38.67248917]
[128.67404175 43.83613586]
[141.06332397 52.14205170]
[151.15519714 63.12554169]
[158.38502502 76.17209625]
[162.34831238 90.55177307]
[162.82330322 105.46006775]
[159.78344727 120.06288147]
[153.39881897 133.54321289]
[144.02661133 145.14685059]
[153.14756775 157.05517578]
[162.26852417 168.96348572]
[171.38949585 180.87181091]
[177.43774414 183.80317688]
[180.57719421 188.64257812]
[180.63128662 193.47988892]
[189.24212646 205.76213074]
[197.85296631 218.04437256]
[206.46382141 230.32661438]
[215.07466125 242.60885620]
[223.68550110 254.89109802]
[231.97480774 258.64337158]
[235.57109070 265.93041992]
[248.45477295 273.61227417]
[261.33843994 281.29412842]
[276.59683228 277.17614746]
[290.25613403 285.12594604]
[294.21252441 300.42700195]
[286.11880493 314.00146484]
[270.77676392 317.79589844]
[257.28860474 309.55908203]
[253.65660095 294.17779541]
[240.77291870 286.49594116]
[227.88923645 278.81408691]
[234.91423035 292.06738281]
[238.18908691 306.70553589]
[237.48120117 321.68881226]
[232.84083557 335.95300293]
[224.59759521 348.48492432]
[213.33700562 358.39447021]
[199.85885620 364.97775269]
[185.12049866 367.76718140]
[170.16877747 366.56463623]
[156.06570435 361.45553589]
[143.81295776 352.80276489]
[134.28088379 341.22091675]
[128.14648438 327.53262329]
[125.84551239 312.71014404]
[127.54138947 297.80633545]
[133.11366272 283.87973022]
[142.16651917 271.91958618]
[154.05699158 262.77532959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[8 112]
[9 109]
[10 108]
[11 107]
[12 106]
[20 32]
[21 31]
[22 30]
[23 29]
[37 95]
[38 94]
[39 93]
[40 92]
[41 91]
[44 88]
[45 87]
[48 85]
[49 84]
[50 83]
[51 82]
[57 79]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
