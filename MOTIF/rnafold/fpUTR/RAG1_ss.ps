%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGGCAAGGAGAGAGCAGAGAACACACUUUGCCUUCUCUUUGGUAUUGAGUAAUAUCAACCAAAUUGCAGACAUCUCAACACUUUGGCCAGGCAGCCUGCUGAGCAAGGUACCUCAGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[92.45344543 187.02056885]
[104.09920502 176.90226746]
[101.84582520 162.07249451]
[99.59243774 147.24272156]
[97.33905792 132.41294861]
[82.57385254 127.45922089]
[71.80486298 116.20845032]
[57.42704010 120.48374176]
[43.04921341 124.75903320]
[28.67138672 129.03431702]
[14.29355907 133.30961609]
[-0.08426788 137.58489990]
[-14.46209431 141.86018372]
[-28.83992195 146.13548279]
[-43.21774673 150.41076660]
[-54.24023438 161.76045227]
[-68.64488220 157.97160339]
[-83.02270508 162.24688721]
[-97.40053558 166.52217102]
[-111.77835846 170.79747009]
[-126.15618896 175.07275391]
[-140.53401184 179.34803772]
[-147.83929443 193.36262512]
[-162.93957520 198.02706909]
[-176.87614441 190.57402039]
[-181.38066101 175.42527771]
[-173.78070068 161.56828308]
[-158.58515930 157.22416687]
[-144.80931091 164.97021484]
[-130.43147278 160.69493103]
[-116.05364990 156.41963196]
[-101.67582703 152.14434814]
[-87.29799652 147.86906433]
[-72.92017365 143.59376526]
[-62.92608261 132.54988098]
[-47.49303818 136.03294373]
[-33.11521149 131.75764465]
[-18.73738289 127.48236084]
[-4.35955667 123.20706940]
[10.01827049 118.93178558]
[24.39609718 114.65649414]
[38.77392197 110.38120270]
[53.15174866 106.10591888]
[67.52957916 101.83062744]
[69.10264587 89.84947968]
[74.94137573 79.26970673]
[84.23968506 71.55194092]
[95.71385193 67.76169586]
[97.21927643 52.83742905]
[98.72470093 37.91316223]
[100.23012543 22.98889732]
[101.73555756 8.06463146]
[87.56568146 0.57875866]
[77.36006165 -11.72733879]
[72.64754486 -26.96416664]
[74.11645508 -42.80677032]
[81.51428223 -56.84949112]
[93.69042969 -66.97126007]
[108.77513123 -71.65595245]
[109.90503693 -86.61333466]
[111.03493500 -101.57071686]
[101.71004486 -114.62545013]
[106.24107361 -130.01536560]
[121.15220642 -135.93463135]
[135.00489807 -127.84249878]
[137.17254639 -111.94656372]
[125.99231720 -100.44081879]
[124.86241913 -85.48343658]
[123.73251343 -70.52604675]
[136.53656006 -64.64420319]
[146.57232666 -54.71099854]
[152.61094666 -41.91383743]
[153.90315247 -27.79252434]
[150.27210999 -14.05397892]
[142.13737488 -2.36592078]
[130.46646118 5.84557343]
[116.65982056 9.57005692]
[115.15439606 24.49432182]
[113.64897156 39.41858673]
[112.14353943 54.34285355]
[110.63811493 69.26712036]
[126.06855011 80.55493927]
[132.49020386 98.56259918]
[147.22451782 101.37331390]
[161.95881653 104.18403625]
[176.69313049 106.99475861]
[191.42744446 109.80547333]
[206.16174316 112.61619568]
[219.13911438 104.00075531]
[234.04174805 107.06111908]
[242.17529297 119.48614502]
[256.90960693 122.29686737]
[271.64389038 125.10758209]
[282.86276245 114.38764954]
[298.24447632 112.34268188]
[311.87451172 119.75901794]
[318.51181030 133.78491211]
[315.60418701 149.02714539]
[304.26971436 159.62474060]
[288.86669922 161.50273132]
[275.31793213 153.93896484]
[268.83319092 139.84188843]
[254.09887695 137.03117371]
[239.36456299 134.22045898]
[227.22824097 142.77879333]
[212.24551392 140.13822937]
[203.35102844 127.35050201]
[188.61671448 124.53978729]
[173.88241577 121.72906494]
[159.14810181 118.91834259]
[144.41378784 116.10762787]
[129.67948914 113.29690552]
[122.55898285 123.42588043]
[112.16883087 130.15956116]
[114.42221832 144.98933411]
[116.67559814 159.81910706]
[118.92898560 174.64889526]
[133.05465698 180.85121155]
[141.56565857 193.71847534]
[141.74615479 209.14477539]
[133.53854370 222.20765686]
[119.56185150 228.73878479]
[104.27598572 226.65409851]
[92.55861664 216.61882019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 117]
[3 116]
[4 115]
[5 114]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[13 38]
[14 37]
[15 36]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[48 81]
[49 80]
[50 79]
[51 78]
[52 77]
[59 69]
[60 68]
[61 67]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[88 107]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
