%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCAAGCGCCUUCCUUUCCCUUCCUCUCCCCACUUGGCCUUUGCCCUAAGCCAAGACCUGGCCAUCAGCCUGGCUGCAGGGGCCUGCAGAGCCAGCUGCACUUUUUCAGGUAUGGGGGAGGGCCAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[88.89619446 454.83145142]
[74.46286011 459.79550171]
[59.30607224 457.99703979]
[46.43521500 449.79315186]
[38.40580368 436.81271362]
[36.81208801 421.63302612]
[41.97050095 407.26803589]
[52.85683441 396.56985474]
[67.30960083 391.66268921]
[69.07705688 376.76718140]
[70.84452057 361.87167358]
[72.61197662 346.97619629]
[64.80839539 331.30322266]
[75.83047485 316.60742188]
[77.24562836 301.67431641]
[78.66078186 286.74121094]
[80.07592773 271.80810547]
[81.49108124 256.87503052]
[82.90623474 241.94192505]
[84.32138824 227.00883484]
[85.73654175 212.07574463]
[87.15169525 197.14263916]
[77.78017426 180.29333496]
[89.46839142 163.94689941]
[90.17675781 148.96362305]
[90.88512421 133.98036194]
[82.11894226 130.76982117]
[74.41140747 125.31475830]
[68.33229065 117.94989014]
[64.34859467 109.15311432]
[62.78902435 99.51465607]
[63.81752396 89.69750977]
[67.41804504 80.39183807]
[73.39178467 72.26647186]
[81.36747742 65.92087555]
[90.82408142 61.84107971]
[101.12473297 60.36278534]
[97.27098083 45.86628342]
[93.41722107 31.36978340]
[89.56346130 16.87328148]
[85.70970154 2.37678075]
[81.85594940 -12.11972046]
[78.00218964 -26.61622238]
[74.14842987 -41.11272430]
[70.29467010 -55.60922241]
[66.94964600 -58.71120453]
[65.02113342 -62.36508942]
[64.50489044 -66.03715515]
[65.21697235 -69.25368500]
[66.83088684 -71.65637970]
[64.36196899 -86.45180511]
[61.89304733 -101.24722290]
[59.42412949 -116.04264069]
[56.95520782 -130.83805847]
[46.90138245 -119.70610046]
[31.93343163 -118.72608948]
[20.51395607 -128.45211792]
[19.09931946 -143.38525391]
[28.48933029 -155.08259583]
[43.37504959 -156.93066406]
[55.33966064 -147.88578796]
[54.98537827 -162.88160706]
[54.63109589 -177.87742615]
[44.06132507 -189.94636536]
[47.04875183 -205.70881653]
[61.30167770 -213.07316589]
[75.88647461 -206.39012146]
[79.61494446 -190.78634644]
[69.62691498 -178.23170471]
[69.98119354 -163.23588562]
[70.33547974 -148.24008179]
[71.75062561 -133.30697632]
[74.21955109 -118.51155853]
[76.68846893 -103.71614075]
[79.15738678 -88.92072296]
[81.62630463 -74.12530518]
[84.79117584 -59.46298218]
[88.64492798 -44.96648026]
[92.49868774 -30.46998024]
[96.35244751 -15.97347832]
[100.20620728 -1.47697723]
[104.05996704 13.01952362]
[107.91371918 27.51602554]
[111.76747894 42.01252747]
[115.62123871 56.50902939]
[128.72810364 63.80354309]
[143.07899475 59.43867874]
[157.42988586 55.07381439]
[171.78076172 50.70895004]
[186.13165283 46.34408569]
[193.34939575 32.28421783]
[208.42030334 27.52570915]
[222.40306091 34.89169312]
[227.00196838 50.01206589]
[219.48857117 63.91617584]
[204.32041931 68.35495758]
[190.49652100 60.69497299]
[176.14562988 65.05983734]
[161.79475403 69.42469788]
[147.44386292 73.78956604]
[133.09297180 78.15442657]
[136.91934204 87.14231110]
[138.39022827 96.65957642]
[137.48191833 106.10806274]
[134.31814575 114.91060638]
[129.15832520 122.54632568]
[122.37762451 128.58139038]
[114.44032288 132.69349670]
[105.86839294 134.68873596]
[105.16002655 149.67199707]
[104.45166016 164.65525818]
[112.30268097 172.35568237]
[114.52057648 182.90124512]
[110.60020447 192.70169067]
[102.08478546 198.55780029]
[100.66963196 213.49089050]
[99.25448608 228.42398071]
[97.83933258 243.35708618]
[96.42417908 258.29019165]
[95.00902557 273.22326660]
[93.59387207 288.15637207]
[92.17872620 303.08947754]
[90.76357269 318.02255249]
[98.39260101 328.49975586]
[96.84722900 340.96264648]
[87.50748444 348.74365234]
[85.74002838 363.63916016]
[83.97256470 378.53463745]
[82.20510864 393.43014526]
[95.10816956 401.58328247]
[103.18863678 414.53198242]
[104.84211731 429.70529175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 129]
[10 128]
[11 127]
[12 126]
[14 123]
[15 122]
[16 121]
[17 120]
[18 119]
[19 118]
[20 117]
[21 116]
[22 115]
[24 111]
[25 110]
[26 109]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[45 77]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[61 71]
[62 70]
[63 69]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
