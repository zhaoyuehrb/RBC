%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCGCGGACGCCUGCUCAGUGCGCGCCGGCCGGGCAACCCUAUGCUGGCGUAAUCGGGUUCCUCCGAGCCGCCGUAGGACUGGUUCCGGCGGGCUGGUGAGGA\
) } def
/len { sequence length } bind def

/coor [
[24.29551697 337.09494019]
[14.71708012 341.68829346]
[4.17648792 341.80352783]
[-3.06539488 354.93957520]
[-10.30727768 368.07559204]
[-17.54916191 381.21160889]
[-16.68435669 397.58795166]
[-30.57985878 406.29696655]
[-44.94116592 398.37957764]
[-44.99459457 381.98052979]
[-30.68518448 373.96972656]
[-23.44330215 360.83370972]
[-16.20141983 347.69769287]
[-8.95953560 334.56164551]
[-15.84894657 316.49020386]
[-7.32532787 298.79776001]
[11.66946507 292.74099731]
[17.71631622 279.01382446]
[23.76316833 265.28662109]
[29.81002045 251.55944824]
[23.04236603 236.24331665]
[29.50080681 220.43112183]
[45.67942429 213.98394775]
[51.31683731 200.08360291]
[48.93002319 185.38148499]
[61.28658295 175.50090027]
[66.92399597 161.60055542]
[72.56140900 147.70021057]
[78.19882202 133.79986572]
[83.83623505 119.89952850]
[89.47364807 105.99918365]
[94.69667816 91.93788910]
[99.50072479 77.72798920]
[104.30477142 63.51809692]
[109.10881805 49.30820084]
[103.86167145 42.35895538]
[101.90945435 33.97061157]
[103.51319122 25.60564423]
[108.32074738 18.69049454]
[115.44049072 14.37232971]
[123.60580444 13.32900715]
[130.05677795 -0.21295989]
[136.50776672 -13.75492764]
[142.95874023 -27.29689407]
[149.40971375 -40.83886337]
[155.86070251 -54.38082886]
[154.81045532 -70.16713715]
[167.26922607 -78.32975006]
[173.72019958 -91.87171936]
[180.17118835 -105.41368103]
[186.62216187 -118.95565033]
[186.04995728 -123.63921356]
[187.00297546 -127.79531097]
[189.09864807 -130.98545837]
[191.84638977 -132.95402527]
[194.72207642 -133.64804077]
[202.72941589 -146.33198547]
[210.73677063 -159.01593018]
[218.74412537 -171.69987488]
[226.75148010 -184.38380432]
[226.85833740 -200.78260803]
[241.24536133 -208.65315247]
[255.11241150 -199.89891052]
[254.19425964 -183.52548218]
[239.43540955 -176.37646484]
[231.42807007 -163.69252014]
[223.42071533 -151.00857544]
[215.41336060 -138.32463074]
[207.40600586 -125.64069366]
[200.16412354 -112.50467682]
[193.71315002 -98.96270752]
[187.26217651 -85.42073822]
[180.81118774 -71.87876892]
[182.32286072 -57.06107330]
[169.40266418 -47.92985153]
[162.95169067 -34.38788605]
[156.50070190 -20.84591675]
[150.04972839 -7.30394936]
[143.59875488 6.23801804]
[137.14778137 19.77998543]
[141.34400940 40.94828415]
[123.31871796 54.11224747]
[118.51466370 68.32214355]
[113.71061707 82.53203583]
[108.90657043 96.74193573]
[110.16328430 102.01515961]
[108.28286743 107.59592438]
[103.37399292 111.63659668]
[97.73657990 125.53694153]
[92.09916687 139.43728638]
[86.46175385 153.33763123]
[80.82434082 167.23797607]
[75.18692780 181.13832092]
[77.17051697 196.83468628]
[65.21717834 205.72102356]
[59.57976913 219.62136841]
[66.25038910 231.43316650]
[64.86794281 244.73117065]
[56.16852951 254.62445068]
[43.53720474 257.60629272]
[37.49035263 271.33346558]
[31.44350052 285.06066895]
[25.39665031 298.78784180]
[31.76972008 307.69152832]
[33.76905441 318.37387085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[17 103]
[18 102]
[19 101]
[20 100]
[23 96]
[24 95]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 85]
[33 84]
[34 83]
[35 82]
[41 80]
[42 79]
[43 78]
[44 77]
[45 76]
[46 75]
[48 73]
[49 72]
[50 71]
[51 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
