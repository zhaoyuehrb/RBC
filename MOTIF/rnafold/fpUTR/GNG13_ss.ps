%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCCCUCGCUCUCACUCGCGGUCGCCUGGCCGUUGUCAUUGUCCCUCCGCUGUCACCUUUUCAAGCCCCAGGCUGGCUGCUUCAGAAGCCCCUGACCCC\
) } def
/len { sequence length } bind def

/coor [
[90.46838379 166.15034485]
[95.59085083 152.05180359]
[95.86856079 137.05438232]
[88.39994049 137.73968506]
[80.96607208 150.76803589]
[73.53220367 163.79637146]
[74.15660095 180.18362427]
[60.13479614 188.68780518]
[45.89122009 180.56053162]
[46.07844162 164.16244507]
[60.50386429 156.36250305]
[67.93772888 143.33416748]
[75.37159729 130.30583191]
[69.15627289 121.61042023]
[65.73295593 111.88806152]
[65.17579651 101.97689056]
[67.32104492 92.67456818]
[71.79528046 84.67424011]
[78.05995941 78.51291656]
[85.46755219 74.53612518]
[93.32392120 72.88104248]
[93.78136444 57.88801956]
[94.23880768 42.89499664]
[94.69624329 27.90197372]
[95.15368652 12.90895081]
[95.61112976 -2.08407235]
[95.83988190 -17.08232880]
[95.83988190 -32.08232880]
[95.83988190 -47.08232880]
[95.83988190 -62.08232880]
[95.83988190 -77.08232880]
[95.83988190 -92.08232880]
[83.45490265 -101.24303436]
[78.89215088 -115.77006531]
[83.70146179 -130.02960205]
[95.83988190 -138.62011719]
[95.83988190 -153.62011719]
[95.83988190 -168.62011719]
[81.15129089 -171.96574402]
[67.57567596 -178.49645996]
[55.79397964 -187.88471985]
[46.39716339 -199.65959167]
[39.85657120 -213.23045349]
[36.50027466 -227.91661072]
[36.49662399 -242.98138428]
[39.84580231 -257.66915894]
[46.37981796 -271.24319458]
[55.77092743 -283.02261353]
[67.54807281 -292.41659546]
[81.12052155 -298.95388794]
[95.80748749 -302.30664062]
[110.87226868 -302.30664062]
[125.55923462 -298.95388794]
[139.13168335 -292.41659546]
[150.90882874 -283.02261353]
[160.29994202 -271.24319458]
[166.83395386 -257.66915894]
[170.18313599 -242.98138428]
[170.17948914 -227.91661072]
[166.82319641 -213.23045349]
[160.28259277 -199.65959167]
[150.88578796 -187.88471985]
[139.10408020 -178.49645996]
[125.52846527 -171.96574402]
[110.83988190 -168.62011719]
[110.83988190 -153.62011719]
[110.83988190 -138.62011719]
[122.97829437 -130.02960205]
[127.78760529 -115.77006531]
[123.22485352 -101.24303436]
[110.83988190 -92.08232880]
[110.83988190 -77.08232880]
[110.83988190 -62.08232880]
[110.83988190 -47.08232880]
[110.83988190 -32.08232880]
[110.83988190 -17.08232880]
[114.04184723 -10.27812767]
[110.60415649 -1.62662995]
[110.14671326 13.36639309]
[109.68927002 28.35941696]
[109.23182678 43.35243988]
[108.77438354 58.34546280]
[108.31694031 73.33848572]
[132.17158508 90.69595337]
[129.73236084 125.31774139]
[139.41305542 136.77566528]
[149.09376526 148.23358154]
[158.77445984 159.69151306]
[174.54220581 160.76567078]
[184.86904907 172.72944641]
[183.62825012 188.48495483]
[171.55595398 198.68472290]
[155.81445312 197.27742004]
[145.74287415 185.09796143]
[147.31654358 169.37220764]
[137.63583374 157.91429138]
[127.95513916 146.45635986]
[118.27443695 134.99844360]
[110.80580902 135.68374634]
[113.80820465 150.38020325]
[121.41085052 163.31077576]
[114.56568909 176.65782166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 13]
[5 12]
[6 11]
[21 83]
[22 82]
[23 81]
[24 80]
[25 79]
[26 78]
[27 76]
[28 75]
[29 74]
[30 73]
[31 72]
[32 71]
[36 67]
[37 66]
[38 65]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
