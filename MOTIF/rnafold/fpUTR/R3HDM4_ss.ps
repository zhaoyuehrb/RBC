%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUCACUUCCUGCCCGGCCCGGUGAAGGCCCUGCCGGGCGGCGGCGGCGGCGACAGCGUGCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[134.50875854 177.80104065]
[139.74891663 160.74223328]
[130.28260803 149.10656738]
[120.81628418 137.47088623]
[111.34996796 125.83522034]
[101.88364410 114.19955444]
[88.88875580 109.03966522]
[86.48068237 95.26676941]
[77.01436615 83.63109589]
[64.07978058 81.45719147]
[56.45246124 71.28938293]
[57.89107895 59.06847000]
[48.96416473 47.01400375]
[40.03724670 34.95953751]
[31.11033058 22.90506935]
[22.18341446 10.85060310]
[13.25649929 -1.20386386]
[4.32958317 -13.25833035]
[-4.59733343 -25.31279755]
[-13.52424908 -37.36726379]
[-28.90508270 -39.83053970]
[-37.78652573 -52.18264771]
[-35.34337997 -66.83074188]
[-44.27029800 -78.88520813]
[-53.19721222 -90.93967438]
[-68.44607544 -96.97326660]
[-70.57727051 -113.23334503]
[-57.39840317 -122.99292755]
[-42.46676636 -116.21220398]
[-41.14274597 -99.86659241]
[-32.21583176 -87.81212616]
[-23.28891563 -75.75765991]
[-8.56509495 -73.82253265]
[0.65978783 -61.72475815]
[-1.46978259 -46.29418182]
[7.45713377 -34.23971176]
[16.38405037 -22.18524742]
[25.31096649 -10.13078022]
[34.23788071 1.92368674]
[43.16479874 13.97815323]
[52.09171295 26.03261948]
[61.01863098 38.08708572]
[69.94554901 50.14155197]
[86.31268311 56.05828476]
[88.65003204 74.16477966]
[98.11635590 85.80044556]
[111.11124420 90.96033478]
[113.51931763 104.73323059]
[122.98563385 116.36890411]
[132.45195007 128.00457764]
[141.91827393 139.64024353]
[151.38459778 151.27590942]
[164.04817200 148.92512512]
[176.40295410 152.29632568]
[186.00662231 160.65689087]
[190.98957825 172.29450989]
[190.41874695 184.86763000]
[184.47154236 195.87655640]
[192.84056091 208.32482910]
[208.39613342 211.11763000]
[217.35205078 224.13941956]
[214.39494324 239.66459656]
[201.27919006 248.48234558]
[185.78614807 245.36125183]
[177.10755920 232.15301514]
[180.39227295 216.69384766]
[172.02326965 204.24555969]
[154.63966370 204.58065796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 52]
[3 51]
[4 50]
[5 49]
[6 48]
[8 46]
[9 45]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 36]
[20 35]
[23 32]
[24 31]
[25 30]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
