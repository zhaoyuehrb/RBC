%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUAUACUCAUUCAAGUAAAGGAUCAGUUUCAGGGUUCAGGCUGAAGUGUCUUAAUGACUAGAAUUCAGGUUCCAAGGAGAAGCCCACAAGGCUAAGGGUAUUGGAUAUAACGGAAAGUGGAAGCUAUACCUGACUUCCAGAGA\
) } def
/len { sequence length } bind def

/coor [
[43.90589905 567.56781006]
[34.35490036 579.59588623]
[20.06358147 585.22204590]
[4.87623453 582.93292236]
[-7.12181854 573.34423828]
[-12.70316315 559.03540039]
[-10.36644554 543.85528564]
[-0.74023068 531.88732910]
[13.58607769 526.35089111]
[15.82171154 511.51843262]
[18.05734634 496.68594360]
[7.69309521 488.20837402]
[2.84914303 475.60916138]
[4.89744568 462.15744019]
[13.40647411 451.40081787]
[26.22664642 446.22985840]
[28.77873611 431.44854736]
[31.33082390 416.66726685]
[33.88291550 401.88595581]
[27.15369797 391.78057861]
[29.20808601 379.40731812]
[39.47885132 371.52886963]
[42.34622955 356.80548096]
[45.21361160 342.08209229]
[34.94118500 331.32965088]
[32.94639587 316.41372681]
[40.20197678 303.02679443]
[54.10971069 296.40249634]
[56.97708893 281.67910767]
[59.84447098 266.95571899]
[62.71184921 252.23234558]
[65.57923126 237.50895691]
[68.44660950 222.78556824]
[57.11941528 213.11291504]
[52.12140274 198.97517395]
[54.88927078 184.13584900]
[64.77811432 172.59863281]
[79.20819092 167.52711487]
[82.07556915 152.80372620]
[84.94294739 138.08033752]
[69.21466064 127.00167084]
[60.28143311 109.96308136]
[60.11505127 90.72539520]
[68.75223541 73.53484344]
[59.27510834 61.90797424]
[49.79798126 50.28110504]
[40.32085419 38.65423584]
[30.84372711 27.02736855]
[10.83841991 26.13412285]
[-1.95227194 11.12103367]
[0.27447072 -8.17154121]
[-9.92812061 -19.16731834]
[-20.13071060 -30.16309738]
[-36.04426193 -32.19741821]
[-44.25223160 -45.98178482]
[-38.45817184 -60.94201279]
[-23.10678482 -65.60189056]
[-9.97434425 -56.38676453]
[-9.13493347 -40.36568832]
[1.06765771 -29.36990929]
[11.27024841 -18.37413216]
[21.37268448 -20.78668785]
[31.63741875 -18.73553848]
[40.16815948 -12.53038406]
[45.36009598 -3.25460887]
[46.20158386 7.42340422]
[42.47059631 17.55024147]
[51.94772339 29.17711067]
[61.42485046 40.80397797]
[70.90197754 52.43084717]
[80.37910461 64.05771637]
[94.07538605 59.48177719]
[108.50845337 59.94461823]
[121.88341522 65.38867950]
[132.08599854 54.39289856]
[142.28858948 43.39712143]
[152.49118042 32.40134430]
[162.69377136 21.40556526]
[156.12539673 5.60556984]
[157.08529663 -11.42326069]
[165.33425903 -26.28873444]
[179.18585205 -36.05049515]
[195.85101318 -38.80159760]
[211.99952698 -34.04085159]
[221.72294617 -45.46254349]
[231.44638062 -56.88423157]
[241.16979980 -68.30592346]
[241.32386780 -84.34823608]
[254.05055237 -94.11608887]
[269.58703613 -90.11642456]
[276.01504517 -75.41744232]
[268.40359497 -61.29494095]
[252.59149170 -58.58249664]
[242.86807251 -47.16080475]
[233.14463806 -35.73911667]
[223.42121887 -24.31742668]
[229.65919495 -12.83748055]
[231.60789490 0.11407443]
[229.01152039 12.98418617]
[222.16061401 24.22200775]
[211.85969543 32.46576691]
[199.33288574 36.70777893]
[186.07844543 36.41757965]
[173.68955994 31.60815620]
[163.48696899 42.60393524]
[153.28437805 53.59971237]
[143.08178711 64.59548950]
[132.87919617 75.59127045]
[138.30372620 85.52065277]
[140.80395508 96.55547333]
[140.18898010 107.85326385]
[136.50575256 118.55149841]
[130.03546143 127.83340454]
[121.27210999 134.99035645]
[110.88471985 139.47595215]
[99.66633606 140.94772339]
[96.79895782 155.67111206]
[93.93157959 170.39450073]
[105.40388489 180.51049805]
[110.24047852 194.91549683]
[107.23735809 209.70899963]
[97.29918671 220.93792725]
[83.16999817 225.65295410]
[80.30261230 240.37634277]
[77.43523407 255.09973145]
[74.56785583 269.82312012]
[71.70047760 284.54650879]
[68.83309937 299.26989746]
[79.23854065 310.62915039]
[80.94017792 325.76049805]
[73.49372101 338.83773804]
[59.93699646 344.94946289]
[57.06961823 359.67285156]
[54.20223999 374.39624023]
[60.61059952 391.62432861]
[48.66421509 404.43804932]
[46.11212540 419.21936035]
[43.56003571 434.00064087]
[41.00794601 448.78195190]
[52.95111465 460.71142578]
[55.43190765 477.24108887]
[47.67221451 491.85812378]
[32.88980865 498.92160034]
[30.65417480 513.75402832]
[28.41854095 528.58648682]
[40.47647095 538.09979248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 145]
[10 144]
[11 143]
[16 139]
[17 138]
[18 137]
[19 136]
[22 134]
[23 133]
[24 132]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[33 123]
[38 118]
[39 117]
[40 116]
[44 71]
[45 70]
[46 69]
[47 68]
[48 67]
[51 61]
[52 60]
[53 59]
[74 108]
[75 107]
[76 106]
[77 105]
[78 104]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
