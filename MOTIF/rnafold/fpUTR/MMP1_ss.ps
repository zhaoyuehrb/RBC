%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUGAGUCAGACAGCCUCUGGCUUUCUGGAAGGGCAAGGACUCUAUAUAUACAGAGGGAGCUUCCUAGCUGGGAUAUUGGAGCAGCAAGAGGCUGGGAAGCCAUCACUUACCUUGCACUGAGAAAGAAGACAAAGGCCAGU\
) } def
/len { sequence length } bind def

/coor [
[43.74538422 545.15002441]
[34.38857269 557.00866699]
[22.06902313 565.74963379]
[7.78542233 570.66448975]
[-7.30431938 571.35467529]
[-21.97694397 567.76434326]
[-35.04301071 560.18444824]
[-45.44330597 549.22949219]
[-52.33473206 535.78759766]
[-55.15862656 520.94836426]
[-53.68606949 505.91479492]
[-48.03643417 491.90557861]
[-38.66771317 480.05636597]
[-26.33938789 471.32772827]
[-12.05085850 466.42727661]
[3.03956914 465.75222778]
[6.60485744 451.18209839]
[10.17014599 436.61196899]
[13.73543453 422.04183960]
[9.24496174 407.84027100]
[20.04063416 396.27462769]
[23.60592270 381.70449829]
[17.58879852 371.15606689]
[20.49507523 358.95156860]
[31.29013252 351.80264282]
[35.17241669 337.31375122]
[39.05470276 322.82485962]
[42.93698883 308.33596802]
[46.81927490 293.84707642]
[35.13378525 282.73687744]
[30.59870338 267.16613770]
[34.53609467 251.33711243]
[45.96808624 239.57131958]
[61.85760880 235.12968445]
[65.42289734 220.55955505]
[68.82904053 205.95140076]
[72.07563782 191.30696106]
[75.32222748 176.66252136]
[78.56882477 162.01808167]
[81.81542206 147.37364197]
[85.06201172 132.72920227]
[66.32891846 112.67289734]
[67.18916321 85.24217987]
[55.09249496 76.37253571]
[42.99582672 67.50289154]
[30.89915657 58.63324738]
[16.16237068 63.49192429]
[1.39449990 58.72856140]
[-7.72590685 46.17476273]
[-7.69186735 30.65772629]
[1.48352873 18.14406395]
[16.27215576 13.44553757]
[30.98748207 18.36882401]
[39.97116852 31.02082062]
[39.76880264 46.53657532]
[51.86547089 55.40622330]
[63.96213913 64.27586365]
[76.05880737 73.14550781]
[83.25762177 68.15605164]
[91.44877625 65.05403137]
[100.14677429 64.02330017]
[108.83607483 65.12496185]
[115.47040558 51.67187500]
[122.10473633 38.21878433]
[128.73905945 24.76569176]
[135.37339783 11.31260014]
[142.00772095 -2.14049053]
[148.64205933 -15.59358120]
[155.27638245 -29.04667282]
[161.91072083 -42.49976349]
[168.54504395 -55.95285416]
[175.17938232 -69.40594482]
[169.43827820 -77.43728638]
[167.07339478 -86.96217346]
[168.37571716 -96.63069916]
[173.11953735 -105.08879852]
[180.60029602 -111.16790009]
[189.73881531 -114.04631805]
[199.23693848 -113.36014557]
[207.01853943 -126.18382263]
[214.80014038 -139.00749207]
[210.80070496 -154.29736328]
[218.85623169 -167.89456177]
[234.18753052 -171.73213196]
[247.69880676 -163.53327942]
[251.37405396 -148.16227722]
[243.03282166 -134.73843384]
[227.62380981 -131.22590637]
[219.84220886 -118.40222168]
[212.06062317 -105.57854462]
[218.66331482 -86.30312347]
[208.90026855 -68.09037018]
[188.63246155 -62.77161407]
[181.99813843 -49.31852341]
[175.36380005 -35.86543274]
[168.72947693 -22.41234207]
[162.09515381 -8.95925140]
[155.46081543 4.49383974]
[148.82649231 17.94693184]
[142.19215393 31.40002251]
[135.55783081 44.85311127]
[128.92349243 58.30620575]
[122.28916168 71.75929260]
[128.54284668 78.09909058]
[133.04779053 85.78070831]
[135.52795410 94.33351135]
[135.83139038 103.23348236]
[133.93952942 111.93534851]
[129.96826172 119.90596771]
[124.16090393 126.65698242]
[116.87326813 131.77479553]
[108.55183411 134.94581604]
[99.70645142 135.97579956]
[96.45986176 150.62023926]
[93.21326447 165.26467896]
[89.96667480 179.90911865]
[86.72007751 194.55355835]
[83.47348022 209.19799805]
[84.67353058 218.33148193]
[79.99302673 224.12484741]
[76.42774200 238.69497681]
[87.04723358 247.86233521]
[92.63902283 260.65646362]
[92.15866089 274.54455566]
[85.75761414 286.80416870]
[74.74237061 295.05679321]
[61.30816269 297.72937012]
[57.42587662 312.21826172]
[53.54359055 326.70715332]
[49.66130447 341.19601440]
[45.77901840 355.68490601]
[50.97763062 373.31344604]
[38.17605209 385.26977539]
[34.61076355 399.83990479]
[38.84622192 415.08364868]
[28.30556488 425.60711670]
[24.74027634 440.17724609]
[21.17498779 454.74737549]
[17.60969925 469.31750488]
[30.68337250 476.88427734]
[41.09466934 487.82873535]
[47.99959564 501.26373291]
[50.83839417 516.10009766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 139]
[17 138]
[18 137]
[19 136]
[21 134]
[22 133]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[34 121]
[35 120]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[43 58]
[44 57]
[45 56]
[46 55]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[72 93]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
