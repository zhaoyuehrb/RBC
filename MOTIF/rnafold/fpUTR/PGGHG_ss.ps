%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCGCGGCAGCCGGGCGGCUCCUCCUUCCUCCCGGCCCUGGCGUGGAGCAGAGGGACACAGGUUCCCACGCUGGCGCCCGGCGACCGGGUGGGGCUGCGGCCCAGCAGCUCC\
) } def
/len { sequence length } bind def

/coor [
[195.90855408 350.53643799]
[183.32910156 342.36590576]
[181.59834290 327.46609497]
[191.96995544 316.62960815]
[206.93151855 317.70590210]
[199.90539551 304.45324707]
[187.10783386 296.83276367]
[187.47972107 281.01593018]
[180.45359802 267.76324463]
[173.42745972 254.51055908]
[159.15789795 250.39776611]
[151.84361267 237.05775452]
[156.25422668 222.11840820]
[149.22810364 208.86572266]
[142.20198059 195.61305237]
[135.17585754 182.36036682]
[128.14973450 169.10768127]
[121.12360382 155.85501099]
[114.09747314 142.60232544]
[107.07135010 129.34963989]
[95.64369202 129.87353516]
[84.84154510 126.10797882]
[76.21595001 118.59366608]
[71.00543213 108.40954590]
[69.95815277 97.01792908]
[73.22447968 86.05448914]
[62.05920410 76.03767395]
[50.89392853 66.02085876]
[39.72865295 56.00404358]
[28.56337738 45.98722458]
[17.39810181 35.97040939]
[5.96567059 26.25961494]
[-5.72553015 16.86196518]
[-17.41673088 7.46431589]
[-29.10793114 -1.93333435]
[-44.61078262 -0.41698781]
[-56.33345032 -10.11408710]
[-57.68351746 -24.90303230]
[-69.37471771 -34.30068207]
[-85.65501404 -36.27147675]
[-91.83863831 -51.46012115]
[-81.56440735 -64.24183655]
[-65.40157318 -61.46789169]
[-59.97706604 -45.99188232]
[-48.28586578 -36.59423447]
[-33.55245590 -38.45491791]
[-21.56204224 -29.09090996]
[-19.71028137 -13.62453461]
[-8.01908112 -4.22688484]
[3.67212009 5.17076492]
[15.36332035 14.56841469]
[20.24809647 14.92722130]
[24.92260551 18.44791222]
[27.41491890 24.80513382]
[38.58019257 34.82194901]
[49.74547195 44.83876801]
[60.91074753 54.85558319]
[72.07601929 64.87239838]
[83.24129486 74.88921356]
[91.73196411 70.96475983]
[101.01634216 69.82762146]
[110.20314789 71.58695221]
[118.62095642 59.17161560]
[127.03876495 46.75628281]
[135.28767395 34.22809982]
[143.36619568 21.58936882]
[143.56523132 5.19142962]
[157.99627686 -2.59812570]
[171.81390381 6.23392963]
[170.80372620 22.60193443]
[156.00492859 29.66788864]
[147.92640686 42.30662155]
[146.96264648 49.73587418]
[139.45410156 55.17408752]
[131.03628540 67.58942413]
[122.61848450 80.00476074]
[130.14521790 101.63442993]
[120.32402802 122.32351685]
[127.35015869 135.57620239]
[134.37628174 148.82887268]
[141.40240479 162.08155823]
[148.42852783 175.33424377]
[155.45466614 188.58691406]
[162.48078918 201.83959961]
[169.50691223 215.09228516]
[184.34722900 219.82542419]
[191.28393555 233.36563110]
[186.68014526 247.48443604]
[193.70626831 260.73712158]
[200.73239136 273.98980713]
[214.03251648 282.55819702]
[213.15808105 297.42709351]
[220.18420410 310.67977905]
[228.09083557 323.42675781]
[236.84176636 335.60958862]
[245.59268188 347.79241943]
[254.34359741 359.97525024]
[263.09451294 372.15808105]
[271.84542847 384.34091187]
[280.59634399 396.52374268]
[289.34725952 408.70657349]
[304.98196411 411.01577759]
[314.33728027 423.75366211]
[311.86291504 439.36303711]
[299.02685547 448.58319092]
[283.44448853 445.94390869]
[274.36059570 433.01107788]
[277.16442871 417.45748901]
[268.41351318 405.27465820]
[259.66259766 393.09182739]
[250.91168213 380.90899658]
[242.16076660 368.72616577]
[233.40985107 356.54333496]
[224.65892029 344.36050415]
[215.90800476 332.17767334]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 93]
[6 92]
[8 90]
[9 89]
[10 88]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[31 54]
[32 51]
[33 50]
[34 49]
[35 48]
[38 45]
[39 44]
[62 76]
[63 75]
[64 74]
[65 72]
[66 71]
[94 115]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
