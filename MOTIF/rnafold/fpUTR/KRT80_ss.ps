%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGCUGUGACCAGAGCAACCAGAGCCUGCCACCCGACGCAACCCCAGGCUCACUCGCUCACCCCCCUGGGCCCUCCUGCUUCCGGCCGGGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[87.23834229 101.58468628]
[86.45060730 97.69478607]
[75.43173218 87.51714325]
[64.41285706 77.33950043]
[53.39397812 67.16186523]
[34.66176224 68.74259949]
[20.82920837 56.48140717]
[20.17348099 38.32305527]
[8.53128338 28.86476707]
[-3.11091375 19.40647697]
[-14.75311089 9.94818687]
[-28.01377487 12.87063599]
[-40.33363342 7.64283085]
[-47.24055099 -3.59118080]
[-46.37073517 -16.55375099]
[-57.70697784 -26.37666130]
[-69.04322052 -36.19957352]
[-76.68217468 -33.83483887]
[-84.59106445 -34.37617493]
[-91.71115875 -37.70116043]
[-97.10730743 -43.31809998]
[-100.09073639 -50.43809891]
[-100.30671692 -58.08564758]
[-97.77604675 -65.23220825]
[-107.41786194 -76.72287750]
[-117.05967712 -88.21353912]
[-126.70149231 -99.70420837]
[-136.34330750 -111.19487762]
[-145.98512268 -122.68553925]
[-155.62693787 -134.17620850]
[-169.86262512 -128.96841431]
[-185.02096558 -128.94668579]
[-199.27151489 -134.11364746]
[-210.89346313 -143.84536743]
[-218.48338318 -156.96667480]
[-221.12478638 -171.89312744]
[-218.49867249 -186.82226562]
[-210.92218018 -199.95133972]
[-199.31021118 -209.69494629]
[-185.06495667 -214.87649536]
[-169.90658569 -214.87028503]
[-155.66558838 -209.67707825]
[-144.06159973 -199.92396545]
[-136.49586487 -186.78868103]
[-133.88197327 -171.85739136]
[-136.53559875 -156.93312073]
[-144.13626099 -143.81802368]
[-134.49446106 -132.32736206]
[-124.85263824 -120.83669281]
[-115.21082306 -109.34602356]
[-105.56900787 -97.85535431]
[-95.92720032 -86.36469269]
[-86.28538513 -74.87402344]
[-64.37314606 -70.09123993]
[-59.22031021 -47.53581619]
[-47.88406754 -37.71290588]
[-36.54782486 -27.88999367]
[-19.92879868 -29.85011292]
[-6.71817493 -19.04051018]
[-5.29482079 -1.69401002]
[6.34737635 7.76427984]
[17.98957253 17.22257042]
[29.63177109 26.68086052]
[40.66824722 23.03524208]
[52.19646835 25.27645302]
[61.24792099 32.94796371]
[65.43309784 44.17972565]
[63.57162094 56.14298630]
[74.59049225 66.32062531]
[85.60936737 76.49826813]
[96.62825012 86.67591095]
[108.41904449 95.94829559]
[120.90759277 104.25709534]
[133.39613342 112.56589508]
[145.88468933 120.87469482]
[154.94189453 123.08633423]
[158.63188171 129.65049744]
[170.85052490 138.35136414]
[186.57989502 140.05361938]
[192.45915222 153.73878479]
[204.67778015 162.43963623]
[216.89642334 171.14048767]
[233.30581665 175.40289307]
[233.75257874 192.35095215]
[217.59053040 197.47193909]
[208.19557190 183.35913086]
[195.97692871 174.65827942]
[183.75828552 165.95742798]
[168.90289307 164.87750244]
[162.14967346 150.56999207]
[149.93103027 141.86914062]
[137.57588196 133.36325073]
[125.08734131 125.05444336]
[112.59879303 116.74564362]
[100.11024475 108.43684387]
[97.43280029 108.96151733]
[94.48317719 108.58692932]
[91.57232666 107.20977020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[8 63]
[9 62]
[10 61]
[11 60]
[15 57]
[16 56]
[17 55]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[72 95]
[73 94]
[74 93]
[75 92]
[77 91]
[78 90]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
