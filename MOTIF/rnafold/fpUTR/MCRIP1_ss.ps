%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUUCCGGCGGGGCCUCCCAGCUGGAAGAGGCGGUGGCGGCGGGUCGGGGCGAGAGGCUGAGGGGAUCUGGCGGUGGAGCGCUAGGAUCAGACGCCCCCGCG\
) } def
/len { sequence length } bind def

/coor [
[-68.12245178 185.24804688]
[-81.25847626 192.48992920]
[-94.39450073 199.73181152]
[-102.74428558 213.17025757]
[-117.62551117 212.53906250]
[-130.76153564 219.78094482]
[-143.89755249 227.02282715]
[-157.03358459 234.26470947]
[-170.16960144 241.50659180]
[-183.30563354 248.74847412]
[-196.44165039 255.99035645]
[-209.57768250 263.23223877]
[-222.60494995 270.66796875]
[-235.52059937 278.29595947]
[-248.43626404 285.92391968]
[-256.01950073 300.46441650]
[-272.41293335 300.89697266]
[-280.75241089 286.77658081]
[-272.45898438 272.62911987]
[-256.06420898 273.00827026]
[-243.14857483 265.38027954]
[-230.23291016 257.75231934]
[-226.00637817 251.54119873]
[-216.81956482 250.09620667]
[-203.68353271 242.85432434]
[-190.54751587 235.61244202]
[-177.41148376 228.37055969]
[-164.27546692 221.12867737]
[-151.13943481 213.88679504]
[-138.00341797 206.64491272]
[-124.86739349 199.40303040]
[-117.45718384 186.48257446]
[-101.63638306 186.59579468]
[-88.50035858 179.35391235]
[-75.36433411 172.11201477]
[-74.60729218 160.54028320]
[-68.23029327 150.71018982]
[-57.75823975 145.18923950]
[-45.80278397 145.48773193]
[-35.41126251 151.64767456]
[-21.86929703 145.19670105]
[-8.32732868 138.74571228]
[5.21463823 132.29473877]
[9.97600365 126.48345184]
[19.25483894 125.85992432]
[32.98202133 119.81307220]
[46.70920563 113.76622009]
[51.64068985 108.09857941]
[60.93392563 107.75028229]
[74.83426666 102.11286926]
[78.34183502 77.84311676]
[103.90354919 63.49453735]
[107.42683411 48.91419220]
[110.95012665 34.33384705]
[103.84868622 19.94812393]
[110.79837036 5.48847437]
[126.46797943 2.04710722]
[138.83712769 12.26394463]
[138.41726685 28.30150223]
[125.53047180 37.85713959]
[122.00717926 52.43748474]
[118.48388672 67.01782990]
[123.03488922 72.97923279]
[131.56164551 60.63846970]
[145.93327332 64.93457031]
[146.28833008 79.93036652]
[132.13688660 84.90205383]
[136.68789673 90.86345673]
[151.68130493 91.30796051]
[166.67471313 91.75245667]
[181.66813660 92.19696045]
[196.66648865 92.41923523]
[211.66648865 92.41923523]
[226.66648865 92.41923523]
[241.66648865 92.41923523]
[256.66647339 92.41923523]
[267.66317749 81.06809235]
[283.46658325 80.90100098]
[294.70080566 92.01708984]
[294.70080566 107.82138062]
[283.46658325 118.93746185]
[267.66317749 118.77037048]
[256.66647339 107.41923523]
[241.66648865 107.41923523]
[226.66648865 107.41923523]
[211.66648865 107.41923523]
[196.66648865 107.41923523]
[189.86869812 110.61795044]
[181.22363281 107.19036865]
[166.23022461 106.74587250]
[151.23680115 106.30137634]
[136.24339294 105.85687256]
[125.13604736 122.66973877]
[108.06419373 129.91609192]
[91.41296387 126.77585602]
[80.47167969 116.01321411]
[66.57134247 121.65062714]
[52.75605774 127.49340057]
[39.02887344 133.54025269]
[25.30168915 139.58711243]
[11.66561604 145.83670044]
[-1.87635100 152.28768921]
[-15.41831875 158.73866272]
[-28.96028519 165.18963623]
[-34.46905899 183.18258667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 22]
[14 21]
[15 20]
[40 104]
[41 103]
[42 102]
[43 101]
[45 100]
[46 99]
[47 98]
[49 97]
[50 96]
[52 62]
[53 61]
[54 60]
[68 92]
[69 91]
[70 90]
[71 89]
[72 87]
[73 86]
[74 85]
[75 84]
[76 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
