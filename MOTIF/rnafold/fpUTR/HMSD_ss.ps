%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGACCCGGUCUCACUUCGCUCCUGGGCAGCUGCGCGGAGAACUGGGGCUCACCGUCAUGGAUGCUCUAUCAGAAGCAAAUGGCACAUUUGCAUUAAACCUUUUGAAAAAGCUAGGGGAAAACAACUCAAACAACUUAUUUUUUUCCCC\
) } def
/len { sequence length } bind def

/coor [
[103.95635223 146.18466187]
[92.26963043 145.70466614]
[81.07511902 142.31459045]
[71.08557892 136.23027039]
[62.93707657 127.83909607]
[49.64402390 134.78852844]
[36.35096741 141.73797607]
[23.05791473 148.68742371]
[9.76486111 155.63685608]
[-3.52819252 162.58630371]
[-16.74774361 169.67456055]
[-29.89234543 176.90086365]
[-43.03694534 184.12716675]
[-44.08288193 196.04866028]
[-50.71217728 205.86721802]
[-61.16437912 211.18389893]
[-72.76335144 210.76831055]
[-82.60214996 204.84132385]
[-96.03781891 211.51084900]
[-109.47349548 218.18037415]
[-114.60147095 232.88894653]
[-128.32215881 239.46139526]
[-142.31292725 234.48200989]
[-155.74859619 241.15153503]
[-164.36813354 255.10273743]
[-180.74967957 254.34321594]
[-188.04132080 239.65429688]
[-178.74203491 226.14669800]
[-162.41813660 227.71586609]
[-148.98245239 221.04634094]
[-144.48986816 206.89175415]
[-130.95919800 199.93650818]
[-116.14302826 204.74470520]
[-102.70735168 198.07518005]
[-89.27167511 191.40565491]
[-84.54347229 173.77043152]
[-68.17827606 164.98208618]
[-50.26324844 170.98257446]
[-37.11864853 163.75627136]
[-23.97404861 156.52995300]
[-19.59881401 150.51165771]
[-10.47763348 149.29324341]
[2.81542063 142.34381104]
[16.10847473 135.39436340]
[29.40152740 128.44491577]
[42.69458008 121.49548340]
[55.98763657 114.54604340]
[54.21592712 107.24529266]
[53.64684296 99.75423431]
[54.29533005 92.26963043]
[56.14435196 84.98808289]
[59.14533997 78.10086060]
[63.21947098 71.78886414]
[52.95126343 60.85433578]
[37.02582550 58.91527557]
[28.73551559 45.18027115]
[34.43995285 30.18564224]
[49.76317978 25.43398094]
[62.95052719 34.57035828]
[63.88579178 50.58612823]
[74.15399933 61.52065659]
[87.77142334 55.28828430]
[102.66526031 53.72287750]
[117.28089905 56.98783875]
[125.05130005 44.15737152]
[132.82170105 31.32691002]
[126.97353363 17.07541656]
[130.59611511 2.28588343]
[142.09664917 -7.41986656]
[156.92953491 -8.47985077]
[164.69995117 -21.31031418]
[172.47035217 -34.14077759]
[180.24075317 -46.97124100]
[188.01115417 -59.80170822]
[195.78157043 -72.63217163]
[202.45109558 -86.06784821]
[207.97296143 -100.01449585]
[213.49482727 -113.96114349]
[219.01669312 -127.90779114]
[224.53855896 -141.85443115]
[230.06044006 -155.80108643]
[235.58230591 -169.74772644]
[235.79133606 -186.70039368]
[252.13934326 -191.19248962]
[260.98147583 -176.72691345]
[249.52894592 -164.22586060]
[244.00708008 -150.27922058]
[238.48521423 -136.33256531]
[232.96334839 -122.38591766]
[227.44148254 -108.43927002]
[221.91960144 -94.49262238]
[216.39773560 -80.54598236]
[229.97781372 -86.91632843]
[244.73837280 -84.24682617]
[255.22700500 -73.52355957]
[257.56933594 -58.70757294]
[250.90016174 -45.27172852]
[237.68296814 -38.17906952]
[222.80004883 -40.04954910]
[211.74897766 -50.19222641]
[208.61203003 -64.86176300]
[200.84162903 -52.03129959]
[193.07121277 -39.20083618]
[185.30081177 -26.37037277]
[177.53041077 -13.53990936]
[169.76000977 -0.70944583]
[175.69265747 12.92659473]
[172.41954041 27.61504936]
[160.99133301 37.67732620]
[145.65217590 39.09731293]
[137.88175964 51.92778015]
[130.11135864 64.75823975]
[143.41938782 83.76941681]
[145.84510803 106.84850311]
[136.78053284 128.21113586]
[147.04873657 139.14566040]
[157.31694031 150.08020020]
[167.58514404 161.01472473]
[177.85336304 171.94924927]
[188.12156677 182.88378906]
[198.38977051 193.81831360]
[208.65797424 204.75283813]
[222.23051453 198.09870911]
[237.16166687 195.74241638]
[252.12376404 197.89347839]
[265.78637695 204.36065674]
[276.93466187 214.56884766]
[284.57727051 227.61038208]
[288.03469849 242.32560730]
[286.99945068 257.40603638]
[281.56359863 271.51077271]
[272.21051025 283.38558960]
[259.77185059 291.97457886]
[245.35365295 296.51406860]
[230.23796082 296.60034180]
[215.76887512 292.22579956]
[203.23295593 283.77935791]
[193.74490356 272.01208496]
[188.14837646 257.97036743]
[186.94104004 242.90272522]
[190.23020935 228.14898682]
[197.72344971 215.02104187]
[187.45524597 204.08651733]
[177.18702698 193.15199280]
[166.91882324 182.21746826]
[156.65061951 171.28292847]
[146.38241577 160.34840393]
[136.11421204 149.41387939]
[125.84600067 138.47933960]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 47]
[6 46]
[7 45]
[8 44]
[9 43]
[10 42]
[11 40]
[12 39]
[13 38]
[18 35]
[19 34]
[20 33]
[23 30]
[24 29]
[53 61]
[54 60]
[64 112]
[65 111]
[66 110]
[70 106]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
[76 92]
[77 91]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
[115 149]
[116 148]
[117 147]
[118 146]
[119 145]
[120 144]
[121 143]
[122 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
