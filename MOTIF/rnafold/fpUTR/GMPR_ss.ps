%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGCCCACGCCAGCUCCCGGCCGCGGCACAGCAGCCCCGGCGCUCCCCGCGCCGCCCCGCGCAGGCGCCCCCGCCCCGCCGUCGCCGCCGCCGCAGCCAGGAGCCGCUGCACC\
) } def
/len { sequence length } bind def

/coor [
[91.86989594 366.01486206]
[82.00543976 354.71475220]
[77.79119110 340.32202148]
[71.81517029 354.08020020]
[65.83915710 367.83837891]
[68.23834229 384.06106567]
[55.22230148 394.03677368]
[40.18081665 387.50332642]
[38.58728409 371.18179321]
[52.08098602 361.86236572]
[58.05700302 348.10418701]
[64.03302002 334.34600830]
[62.66169739 325.30911255]
[68.65459442 316.93966675]
[70.29042053 302.02914429]
[71.92625427 287.11859131]
[73.56208801 272.20806885]
[75.19792175 257.29754639]
[68.89474487 243.80236816]
[78.09088135 230.92829895]
[79.72671509 216.01777649]
[81.36254120 201.10723877]
[75.05937195 187.61207581]
[84.25550842 174.73800659]
[85.89134216 159.82746887]
[87.52716827 144.91694641]
[89.16300201 130.00640869]
[90.79883575 115.09587097]
[84.03067017 107.58467102]
[82.48567200 97.59271240]
[86.66917419 88.38811493]
[95.21285248 82.98148346]
[97.66049957 68.18252563]
[92.27876282 53.30477524]
[101.98914337 42.01063156]
[104.43679047 27.21167755]
[95.50492096 14.45003891]
[98.19799805 -0.52333730]
[110.41931152 -8.95986557]
[112.86695099 -23.75881958]
[115.31459808 -38.55777359]
[117.76223755 -53.35672760]
[120.20988464 -68.15568542]
[105.83537292 -76.75838470]
[95.84277344 -90.15849304]
[91.71628571 -106.31930542]
[94.05113983 -122.79763794]
[102.46791077 -137.11318970]
[115.67381287 -147.12187195]
[131.66125488 -151.33691406]
[133.29708862 -166.24745178]
[134.93292236 -181.15798950]
[136.56875610 -196.06851196]
[138.20458984 -210.97904968]
[139.63659668 -225.91053772]
[140.86454773 -240.86019897]
[131.62544250 -253.97578430]
[136.25727844 -269.33566284]
[151.20689392 -275.15704346]
[165.00624084 -266.97424316]
[167.06962585 -251.06445312]
[155.81420898 -239.63224792]
[154.58625793 -224.68260193]
[157.21046448 -217.66365051]
[153.11511230 -209.34321594]
[151.47929382 -194.43269348]
[149.84346008 -179.52215576]
[148.20762634 -164.61161804]
[146.57179260 -149.70108032]
[158.69978333 -144.00373840]
[168.47288513 -134.80320740]
[174.91314697 -123.00053406]
[177.37002563 -109.75813293]
[175.58612061 -96.38526154]
[169.72399902 -84.20858765]
[160.35156250 -74.44058990]
[148.38699341 -68.05880737]
[135.00883484 -65.70803833]
[132.56118774 -50.90908432]
[130.11355591 -36.11013031]
[127.66590881 -21.31117630]
[125.21826172 -6.51222229]
[134.07238770 5.41003513]
[131.80093384 20.45314598]
[119.23574829 29.65932083]
[116.78810120 44.45827484]
[122.34490967 58.27750778]
[112.45944977 70.63017273]
[110.01181030 85.42912292]
[117.51432800 102.40728760]
[105.70936584 116.73170471]
[104.07353973 131.64224243]
[102.43770599 146.55276489]
[100.80187225 161.46330261]
[99.16603851 176.37384033]
[105.35221100 190.93550110]
[96.27307892 202.74307251]
[94.63724518 217.65359497]
[93.00141907 232.56413269]
[99.18758392 247.12579346]
[90.10845184 258.93334961]
[88.47261810 273.84390259]
[86.83679199 288.75442505]
[85.20095825 303.66497803]
[83.56512451 318.57550049]
[94.36647034 308.16729736]
[108.53758240 303.25000000]
[123.46431732 304.73077393]
[136.39314270 312.33639526]
[144.93907166 324.66387939]
[147.52565002 339.43917847]
[143.67572021 353.93670654]
[134.09948730 365.48208618]
[120.56347656 371.94552612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[14 105]
[15 104]
[16 103]
[17 102]
[18 101]
[20 99]
[21 98]
[22 97]
[24 95]
[25 94]
[26 93]
[27 92]
[28 91]
[32 89]
[33 88]
[35 86]
[36 85]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[50 69]
[51 68]
[52 67]
[53 66]
[54 65]
[55 63]
[56 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
