%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGCGGCCCCGCCCCCUGGCCGCGUGGCUGCGCGUCCUGGCUGUUGCCGAUAAAGUUGUUUGACGCCGGCCCGGCGGCGGGUCACGUGAGCGGAAA\
) } def
/len { sequence length } bind def

/coor [
[161.33375549 421.46304321]
[158.93974304 406.65530396]
[156.54574585 391.84759521]
[153.91471863 377.08013916]
[151.04734802 362.35675049]
[148.17996216 347.63336182]
[133.88876343 338.93038940]
[130.15182495 322.27667236]
[139.72283936 307.74179077]
[136.38502502 293.11788940]
[133.04721069 278.49395752]
[129.70939636 263.87005615]
[126.37157440 249.24612427]
[123.03376007 234.62220764]
[112.65837097 223.93574524]
[117.13085175 208.75985718]
[113.79303741 194.13594055]
[103.41764069 183.44947815]
[107.89012909 168.27359009]
[104.55231476 153.64967346]
[101.21450043 139.02575684]
[97.87668610 124.40184021]
[94.53887177 109.77791595]
[90.96709442 95.20938110]
[87.16227722 80.69995117]
[83.35746002 66.19052887]
[79.08954620 51.81051254]
[74.36292267 37.57467651]
[69.63629913 23.33884239]
[57.94461823 12.67979527]
[61.27728271 -1.83718193]
[56.55065918 -16.07301903]
[40.83129883 -23.54087639]
[35.39375687 -39.71938705]
[43.10322571 -54.57011032]
[37.92275238 -68.64713287]
[32.74227524 -82.72415924]
[27.69082642 -87.45063019]
[26.16482162 -93.17248535]
[27.71265984 -97.87255859]
[23.44474602 -112.25257874]
[19.17683220 -126.63259888]
[6.90951300 -137.51583862]
[10.46564102 -153.52476501]
[26.18697548 -158.19078064]
[37.90075684 -146.71386719]
[33.55685043 -130.90051270]
[37.82476425 -116.52049255]
[42.09267807 -102.14047241]
[46.81930161 -87.90464020]
[51.99977875 -73.82761383]
[57.18025208 -59.75058365]
[69.61495209 -55.98015594]
[77.68138123 -45.54485321]
[78.21307373 -32.17017365]
[70.78649139 -20.79964066]
[75.51311493 -6.56380510]
[86.86671448 3.07699847]
[83.87213135 18.61221886]
[88.59875488 32.84805298]
[93.32537842 47.08388901]
[97.28386688 50.05321884]
[99.30584717 55.61917877]
[97.86688232 62.38571167]
[101.67169952 76.89513397]
[105.47651672 91.40455627]
[110.49212646 97.92293549]
[109.16278839 106.44010925]
[112.50060272 121.06402588]
[115.83841705 135.68794250]
[119.17623138 150.31185913]
[122.51404572 164.93577576]
[133.12818909 176.66824341]
[128.41696167 190.79812622]
[131.75477600 205.42204285]
[142.36891174 217.15451050]
[137.65768433 231.28439331]
[140.99549866 245.90830994]
[144.33331299 260.53222656]
[147.67112732 275.15615845]
[151.00894165 289.78005981]
[154.34675598 304.40399170]
[166.59193420 310.27752686]
[173.07060242 321.99041748]
[171.58222961 335.09567261]
[162.90335083 344.76596069]
[165.77073669 359.48934937]
[168.63810730 374.21273804]
[173.43238831 382.21319580]
[171.35348511 389.45358276]
[173.74748230 404.26132202]
[176.14147949 419.06903076]
[189.10218811 428.11312866]
[191.78935242 443.68728638]
[182.60873413 456.55166626]
[167.00703430 459.07403564]
[154.24044800 449.75790405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 88]
[5 87]
[6 86]
[9 82]
[10 81]
[11 80]
[12 79]
[13 78]
[14 77]
[16 75]
[17 74]
[19 72]
[20 71]
[21 70]
[22 69]
[23 68]
[24 66]
[25 65]
[26 64]
[27 61]
[28 60]
[29 59]
[31 57]
[32 56]
[35 52]
[36 51]
[37 50]
[40 49]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
