%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[95.12076569 130.58625793]
[89.24126434 144.38595581]
[83.36177063 158.18565369]
[91.45101166 171.42738342]
[90.17848969 186.89219666]
[80.03351593 198.63354492]
[64.91703033 202.13662720]
[50.64164352 196.05444336]
[42.69652176 182.72573853]
[44.13673019 167.27563477]
[54.40848160 155.64505005]
[69.56208038 152.30615234]
[75.44157410 138.50645447]
[81.32107544 124.70676422]
[78.02860260 121.83080292]
[75.17383575 118.51993561]
[72.81365204 114.84011078]
[58.29903030 118.62505341]
[43.78440857 122.40998840]
[29.26978683 126.19492340]
[14.75516510 129.97985840]
[0.24054359 133.76480103]
[-11.04660034 145.66154480]
[-26.92774391 141.57237244]
[-31.06572723 125.70387268]
[-19.20374870 114.38020325]
[-3.54439425 119.25018311]
[10.97022724 115.46524048]
[25.48484993 111.68030548]
[39.99946976 107.89537048]
[54.51409149 104.11042786]
[69.02871704 100.32549286]
[76.38211060 79.96199036]
[95.27565002 69.38942719]
[116.47758484 73.77376556]
[127.29562378 63.38289642]
[138.11366272 52.99203110]
[148.79122925 42.45686722]
[159.32638550 31.77930641]
[169.86155701 21.10174370]
[182.46301270 -10.16248226]
[185.66044617 -24.81773758]
[188.85786438 -39.47299194]
[192.05528259 -54.12824631]
[195.05567932 -68.82510376]
[197.85847473 -83.56092072]
[200.66128540 -98.29673767]
[199.18264771 -107.44648743]
[203.74223328 -113.38821411]
[206.93965149 -128.04347229]
[209.94004822 -142.74032593]
[212.74284363 -157.47615051]
[215.54565430 -172.21195984]
[218.34846497 -186.94776917]
[221.15127563 -201.68359375]
[214.65342712 -218.84825134]
[226.47618103 -231.74118042]
[228.88235474 -246.54693604]
[231.28852844 -261.35269165]
[224.97055054 -276.48593140]
[235.13110352 -289.35818481]
[251.31788635 -286.72756958]
[256.87933350 -271.30026245]
[246.09428406 -258.94650269]
[243.68811035 -244.14076233]
[241.28193665 -229.33500671]
[248.12277222 -219.25959778]
[246.14909363 -206.83450317]
[235.88708496 -198.88078308]
[233.08427429 -184.14497375]
[230.28146362 -169.40914917]
[227.47866821 -154.67333984]
[224.67585754 -139.93751526]
[226.54162598 -132.68405151]
[221.59490967 -124.84604645]
[218.39749146 -110.19078827]
[215.39709473 -95.49393463]
[212.59429932 -80.75811768]
[209.79148865 -66.02230072]
[211.65725708 -58.76882935]
[206.71054077 -50.93082428]
[203.51312256 -36.27556610]
[200.31568909 -21.62031364]
[197.11827087 -6.96505880]
[205.19369507 -19.60576630]
[219.97297668 -22.16949272]
[231.83401489 -12.98711300]
[233.05459595 1.96314359]
[222.84007263 12.94784260]
[207.84106445 12.81552887]
[221.86631775 18.13460159]
[235.89155579 23.45367432]
[251.98272705 20.29042053]
[262.56246948 32.82042694]
[256.74725342 48.15389633]
[240.51927185 50.51707077]
[230.57247925 37.47891998]
[216.54724121 32.15984726]
[202.52198792 26.84077263]
[213.78111267 36.75199127]
[215.48753357 51.65461349]
[206.76023865 63.85437775]
[192.10513306 67.05252075]
[179.08869934 59.59783554]
[174.43133545 45.33919144]
[180.53910828 31.63690758]
[170.00395203 42.31446838]
[159.46878052 52.99203110]
[156.97843933 60.05546188]
[148.50453186 63.81007004]
[137.68649292 74.20093536]
[126.86845398 84.59179688]
[130.64465332 95.50203705]
[130.16294861 107.03724670]
[125.49027252 117.59466553]
[117.27587128 125.70740509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[35 112]
[36 111]
[37 110]
[38 108]
[39 107]
[40 106]
[41 84]
[42 83]
[43 82]
[44 81]
[45 79]
[46 78]
[47 77]
[49 76]
[50 75]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[57 66]
[58 65]
[59 64]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
