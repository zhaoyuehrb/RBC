%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUCCAAGAGGACGGAAUGUGGAGACAGUGUUGUAUUUUUGCGGGGAGUUCUAGGCCGACCGGGAGCGAGAGAACGCUCGGGGGCGAAGCGCGCCAUUGCGGCCCUCCCCGCCGCCUGCGGUAGUCCAGUCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[-82.03752136 589.06213379]
[-93.08731842 599.22418213]
[-107.14760590 604.36749268]
[-122.06513214 603.73754883]
[-128.31036377 617.37561035]
[-134.55560303 631.01367188]
[-140.80084229 644.65179443]
[-138.72093201 660.91845703]
[-151.93051147 670.63647461]
[-166.84068298 663.80871582]
[-168.11315918 647.45898438]
[-154.43891907 638.40655518]
[-148.19367981 624.76843262]
[-141.94844055 611.13037109]
[-135.70320129 597.49230957]
[-145.92584229 586.60992432]
[-151.21755981 572.60479736]
[-150.74285889 557.60015869]
[-144.54293823 543.88342285]
[-133.53421021 533.55761719]
[-119.37291718 528.21905518]
[-104.20603180 528.71020508]
[-97.96079254 515.07214355]
[-91.71555328 501.43408203]
[-91.79129028 493.98013306]
[-85.17197418 487.56085205]
[-78.62011719 474.06738281]
[-72.06826019 460.57394409]
[-79.83419800 442.78640747]
[-72.01709747 424.69216919]
[-53.17416763 417.95135498]
[-47.55157852 404.04501343]
[-41.92898560 390.13867188]
[-36.30639648 376.23233032]
[-30.68380356 362.32598877]
[-25.06121254 348.41961670]
[-19.43862152 334.51327515]
[-28.55911255 324.28771973]
[-32.38508606 311.06164551]
[-30.11050034 297.41522217]
[-22.12529373 286.03649902]
[-9.94995308 279.19195557]
[4.05374479 278.27496338]
[9.98917580 264.49923706]
[15.92460728 250.72351074]
[21.86003876 236.94778442]
[27.79546928 223.17205811]
[33.73089981 209.39633179]
[39.66633224 195.62060547]
[45.60176468 181.84487915]
[30.82120132 184.40124512]
[19.45466805 174.61340332]
[19.78887367 159.61712646]
[31.58016968 150.34536743]
[46.23217010 153.55766296]
[53.06287003 166.91075134]
[60.51388550 153.89221191]
[67.96489716 140.87367249]
[75.41590881 127.85513306]
[82.86692810 114.83659363]
[74.61164093 91.18548584]
[94.16660309 69.46649933]
[96.52986145 54.65383530]
[89.58614349 43.71901703]
[91.91471863 31.38567543]
[101.71924591 24.21095848]
[104.41665649 9.45548725]
[107.11407471 -5.29998541]
[109.81148529 -20.05545807]
[112.50889587 -34.81093216]
[103.32031250 -47.66960144]
[105.99782562 -63.24542999]
[118.95292664 -72.29755402]
[134.49957275 -69.45550537]
[143.41423035 -56.40542984]
[140.40797424 -40.88969421]
[127.26436615 -32.11351776]
[124.56695557 -17.35804558]
[121.86954498 -2.60257292]
[119.17213440 12.15289974]
[116.47471619 26.90837097]
[123.27785492 43.04598236]
[111.34252167 57.01709366]
[108.97926331 71.82975769]
[121.64781189 79.86143494]
[134.03684998 71.40496063]
[146.42588806 62.94849396]
[158.81491089 54.49202728]
[163.19000244 39.05706024]
[178.04048157 32.98722458]
[191.97433472 40.93878174]
[194.30270386 56.81197357]
[183.23945618 68.43025208]
[167.27137756 66.88105774]
[154.88235474 75.33752441]
[142.49331665 83.79399872]
[130.10427856 92.25046539]
[129.07519531 104.36776733]
[123.62708282 114.49138641]
[115.11679840 121.19411469]
[105.27804565 123.76957703]
[95.88546753 122.28760529]
[88.43445587 135.30613708]
[80.98343658 148.32469177]
[73.53242493 161.34323120]
[66.08141327 174.36177063]
[59.37749100 187.78031921]
[53.44205856 201.55604553]
[47.50662994 215.33177185]
[41.57119751 229.10749817]
[35.63576508 242.88322449]
[29.70033455 256.65893555]
[23.76490211 270.43466187]
[17.82947159 284.21041870]
[27.83139801 297.32650757]
[29.86704254 313.60061646]
[23.47731400 328.60400391]
[10.48313999 338.30126953]
[-5.53227472 340.13586426]
[-11.15486622 354.04220581]
[-16.77745628 367.94857788]
[-22.40004921 381.85491943]
[-28.02264023 395.76126099]
[-33.64522934 409.66760254]
[-39.26782227 423.57394409]
[-32.70037079 432.16741943]
[-30.35536957 442.64260864]
[-32.59791565 453.05712891]
[-38.94883728 461.50891113]
[-48.18508911 466.48364258]
[-58.57481003 467.12579346]
[-65.12667084 480.61926270]
[-71.67852783 494.11270142]
[-78.07748413 507.67932129]
[-84.32272339 521.31738281]
[-90.56796265 534.95544434]
[-80.28745270 546.11730957]
[-75.07761383 560.32647705]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[22 136]
[23 135]
[24 134]
[26 133]
[27 132]
[28 131]
[31 125]
[32 124]
[33 123]
[34 122]
[35 121]
[36 120]
[37 119]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[50 107]
[56 106]
[57 105]
[58 104]
[59 103]
[60 102]
[62 84]
[63 83]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[85 97]
[86 96]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
