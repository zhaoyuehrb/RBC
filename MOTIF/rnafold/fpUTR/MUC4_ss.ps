%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUUGUCCUCUUCCCAGGUUCCCUGGCCCCUUCGGAGAAACGCACUUGGUUCGGGCCAGCCGCCUGAGGGGACGGGCUCACGUCUGCUCCUCACACUGCAGCUGCUGGGCCGUGGAGCUUCCCCAGGGAGCCAGGGGGACUUUUGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[64.10988617 597.22479248]
[57.39169312 583.70562744]
[54.57119370 568.87500000]
[55.85769272 553.83349609]
[61.15571594 539.69720459]
[70.07212067 527.51525879]
[81.94524384 518.19152832]
[95.89403534 512.41796875]
[94.09744263 497.52597046]
[92.30084991 482.63394165]
[90.50426483 467.74194336]
[88.70767212 452.84991455]
[86.91108704 437.95788574]
[85.11449432 423.06588745]
[83.31790161 408.17385864]
[81.13700867 406.32901001]
[79.57689667 403.48510742]
[79.03099823 399.88214111]
[79.79557800 395.90118408]
[82.02260590 392.02542114]
[81.42246246 377.03744507]
[80.82231903 362.04943848]
[80.22217560 347.06146240]
[79.62203217 332.07348633]
[79.02188873 317.08547974]
[78.42174530 302.09750366]
[77.82160187 287.10949707]
[77.22145844 272.12152100]
[76.62131500 257.13351440]
[66.20686340 267.92886353]
[51.30846786 269.67178345]
[38.68351364 261.57174683]
[34.05824280 247.30265808]
[39.53051758 233.33647156]
[52.61830521 226.00778198]
[67.38543701 228.64059448]
[77.13447571 240.04188538]
[78.63273621 225.11689758]
[80.13098907 210.19190979]
[81.62924957 195.26692200]
[70.01898193 188.01885986]
[62.63895798 176.41339111]
[60.98325348 162.69343567]
[65.43302155 149.53993225]
[75.17073059 139.54806519]
[88.32966614 134.71524048]
[90.12625885 119.82322693]
[91.92284393 104.93120575]
[89.67250824 100.12615967]
[90.30699921 94.40264893]
[94.10085297 89.48373413]
[96.49182892 74.67551422]
[98.88279724 59.86729813]
[101.27377319 45.05908585]
[103.66474915 30.25086975]
[106.05572510 15.44265461]
[108.44670105 0.63443899]
[106.42912292 -5.75675201]
[107.77926636 -11.34974861]
[111.24101257 -14.71352768]
[114.22254181 -29.41422462]
[117.20407104 -44.11492157]
[120.18560791 -58.81561661]
[115.34573364 -73.87835693]
[125.45842743 -84.81374359]
[128.43995667 -99.51444244]
[120.33211517 -119.31115723]
[134.46406555 -134.31147766]
[136.55827332 -149.16456604]
[138.65246582 -164.01765442]
[140.74667358 -178.87074280]
[142.84088135 -193.72383118]
[144.93507385 -208.57693481]
[147.02928162 -223.43002319]
[145.12249756 -232.42179871]
[149.31684875 -238.55818176]
[151.70782471 -253.36640930]
[154.09880066 -268.17462158]
[156.48977661 -282.98281860]
[158.88075256 -297.79104614]
[152.54725647 -312.91781616]
[162.69459534 -325.80047607]
[178.88407898 -323.18649292]
[184.46133423 -307.76486206]
[173.68896484 -295.40008545]
[171.29798889 -280.59185791]
[168.90701294 -265.78363037]
[166.51603699 -250.97543335]
[164.12507629 -236.16720581]
[161.88237000 -221.33581543]
[159.78816223 -206.48272705]
[157.69396973 -191.62963867]
[155.59976196 -176.77655029]
[153.50556946 -161.92344666]
[151.41136169 -147.07035828]
[149.31715393 -132.21726990]
[155.80734253 -126.01666260]
[158.72994995 -117.38374329]
[157.29850769 -108.24279022]
[151.71250916 -100.69441986]
[143.14065552 -96.53290558]
[140.15913391 -81.83221436]
[145.21224976 -67.82096100]
[134.88630676 -55.83408356]
[131.90476990 -41.13338852]
[128.92323303 -26.43269348]
[125.94170380 -11.73199654]
[123.25491333 3.02541375]
[120.86393738 17.83362961]
[118.47296906 32.64184570]
[116.08199310 47.45005798]
[113.69101715 62.25827408]
[111.30004120 77.06649017]
[108.90906525 91.87470245]
[106.81486511 106.72779846]
[105.01827240 121.61981964]
[103.22168732 136.51184082]
[116.53324890 146.27488708]
[123.08251190 161.32604980]
[121.17502594 177.53482056]
[111.42320251 190.50459290]
[96.55423737 196.76518250]
[95.05597687 211.69017029]
[93.55772400 226.61515808]
[92.05946350 241.54013062]
[91.60929871 256.53338623]
[92.20944214 271.52136230]
[92.80959320 286.50936890]
[93.40973663 301.49734497]
[94.00988007 316.48535156]
[94.61002350 331.47332764]
[95.21016693 346.46130371]
[95.81031036 361.44931030]
[96.41045380 376.43728638]
[97.01059723 391.42529297]
[98.20992279 406.37725830]
[100.00651550 421.26928711]
[101.80310822 436.16131592]
[103.59969330 451.05331421]
[105.39628601 465.94534302]
[107.19287109 480.83737183]
[108.98946381 495.72937012]
[110.78604889 510.62139893]
[125.70770264 512.91198730]
[139.45755005 519.14453125]
[151.01525879 528.85644531]
[159.52317810 541.32714844]
[164.34994507 555.63116455]
[165.13740540 570.70703125]
[161.82711792 585.43609619]
[154.66470337 598.72528076]
[144.18170166 609.58850098]
[131.15599060 617.21954346]
[116.55416870 621.05224609]
[101.45980072 620.80212402]
[86.99297333 616.48779297]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 143]
[9 142]
[10 141]
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[37 125]
[38 124]
[39 123]
[40 122]
[46 117]
[47 116]
[48 115]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[60 107]
[61 106]
[62 105]
[63 104]
[65 102]
[66 101]
[68 96]
[69 95]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
