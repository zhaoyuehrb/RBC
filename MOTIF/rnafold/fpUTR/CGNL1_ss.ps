%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACUCCGGCCGGGCUCUGCUGGCUGCGGCGGGAGCUGGACGCGGGAGGAGGCGGCGGCGGCGGAAAGGCCGUGUGAGAACAUAGCAAGAAGACAGCUACCUGCAAGCCAGGAAGAGAGCCCUCACCAGGAACUGAAUUGACUGGCACCUUGGUCUUGGACUUCUUACCUCAAGAACUCUGGAACAGUGAACC\
) } def
/len { sequence length } bind def

/coor [
[533.55120850 437.08050537]
[523.61779785 426.98892212]
[517.71527100 414.08459473]
[516.57202148 399.91055298]
[520.34576416 386.16940308]
[508.23913574 377.31338501]
[496.13250732 368.45733643]
[483.95455933 359.69961548]
[471.70611572 351.04077148]
[455.27474976 354.59506226]
[441.07330322 344.98220825]
[438.15475464 327.74090576]
[425.76770020 319.28152466]
[413.38064575 310.82217407]
[400.99356079 302.36282349]
[388.60650635 293.90347290]
[376.21945190 285.44412231]
[363.83239746 276.98477173]
[343.20269775 277.24990845]
[334.18310547 257.82141113]
[321.39987183 249.97357178]
[308.61660767 242.12573242]
[295.83334351 234.27790833]
[283.05010986 226.43006897]
[270.26684570 218.58224487]
[260.56582642 221.84712219]
[250.45903015 219.16976929]
[243.35386658 211.20259094]
[241.78256226 200.42156982]
[229.26014709 192.16390991]
[216.73771667 183.90625000]
[204.21530151 175.64859009]
[191.69288635 167.39091492]
[179.10400391 159.23492432]
[166.44950867 151.18112183]
[153.79501343 143.12731934]
[141.14051819 135.07351685]
[128.48602295 127.01971436]
[106.44169617 145.03498840]
[73.95594025 144.68931580]
[46.03783798 121.14122772]
[31.04570580 121.62695312]
[16.05357361 122.11268616]
[7.45593691 135.03012085]
[-7.10405302 140.39541626]
[-22.02778435 136.14549255]
[-31.57677650 123.91452789]
[-32.07925034 108.40559387]
[-23.34198952 95.58217621]
[-8.72465324 90.37515259]
[6.15209579 94.78672028]
[15.56784439 107.12055206]
[30.55997849 106.63482666]
[45.55211258 106.14909363]
[47.47369385 98.89943695]
[36.83848190 88.32152557]
[51.31686020 84.40012360]
[53.23844528 77.15046692]
[40.45519257 69.30263519]
[27.67193985 61.45480728]
[14.88868713 53.60697556]
[2.10543513 45.75914383]
[-13.20491791 49.67942810]
[-26.76026726 41.55366516]
[-30.51846313 26.20272064]
[-22.24983788 12.73403931]
[-6.86001682 9.13835144]
[6.52049065 17.54891396]
[9.95326710 32.97589111]
[22.73651886 40.82372284]
[35.51977158 48.67155457]
[48.30302429 56.51938629]
[61.08627701 64.36721802]
[71.25490570 53.34002304]
[62.39886475 41.23338699]
[47.18566513 35.11042786]
[45.14991379 18.83812904]
[58.38581467 9.15603256]
[73.27741241 16.02425194]
[74.50550079 32.37734985]
[83.36153412 44.48398590]
[93.28218842 43.88290405]
[102.91233826 44.99725342]
[111.96483612 47.70957184]
[120.18411255 51.85599899]
[127.35338593 57.23355484]
[133.30026245 63.60854721]
[137.90068054 70.72565460]
[141.08110046 78.31746674]
[142.81874084 86.11405182]
[143.14022827 93.85230255]
[142.11851501 101.28463745]
[139.86822510 108.18693542]
[136.53982544 114.36521912]
[149.19432068 122.41902161]
[161.84881592 130.47282410]
[174.50331116 138.52662659]
[187.15780640 146.58042908]
[196.09173584 148.55261230]
[199.95054626 154.86849976]
[212.47296143 163.12615967]
[224.99537659 171.38381958]
[237.51780701 179.64147949]
[250.04022217 187.89915466]
[270.18750000 188.17149353]
[278.11468506 205.79898071]
[290.89791870 213.64682007]
[303.68118286 221.49464417]
[316.46444702 229.34248352]
[329.24768066 237.19030762]
[342.03094482 245.03814697]
[350.85147095 241.63461304]
[360.11105347 242.66459656]
[367.73910522 247.77018738]
[372.08871460 255.69644165]
[372.29174805 264.59768677]
[384.67880249 273.05706787]
[397.06585693 281.51641846]
[409.45294189 289.97576904]
[421.83999634 298.43511963]
[434.22705078 306.89447021]
[446.61410522 315.35382080]
[459.48382568 311.35192871]
[472.12271118 315.43771362]
[479.98059082 325.90454102]
[480.36492920 338.79232788]
[492.61340332 347.45117188]
[501.44100952 349.85488892]
[504.98855591 356.35070801]
[517.09521484 365.20672607]
[529.20184326 374.06277466]
[542.87731934 365.62033081]
[558.70709229 363.07540894]
[574.26470947 366.78817749]
[587.17694092 376.16189575]
[595.48583984 389.73861694]
[597.94549561 405.42590332]
[594.20880127 420.81924438]
[606.45721436 429.47808838]
[622.19232178 431.12631226]
[628.11859131 444.79119873]
[640.36700439 453.45004272]
[652.61547852 462.10885620]
[664.86395264 470.76770020]
[677.79675293 466.97473145]
[690.36785889 471.26461792]
[698.05517578 481.85733032]
[698.23083496 494.74963379]
[710.33746338 503.60568237]
[725.75524902 501.38562012]
[737.90692139 510.53936768]
[739.92840576 525.25158691]
[752.03509521 534.10760498]
[764.14172363 542.96362305]
[776.31964111 551.72137451]
[788.56811523 560.38018799]
[800.81652832 569.03900146]
[813.06500244 577.69787598]
[825.31347656 586.35668945]
[839.22863770 579.85565186]
[854.52862549 581.19909668]
[867.09790039 590.02575684]
[873.55529785 603.96124268]
[872.16387939 619.25695801]
[863.29785156 631.79852295]
[849.34222412 638.21215820]
[834.05090332 636.77282715]
[821.53723145 627.86755371]
[815.16735840 613.89184570]
[816.65466309 598.60516357]
[804.40618896 589.94628906]
[792.15771484 581.28747559]
[779.90930176 572.62866211]
[767.66082764 563.96978760]
[760.37371826 562.67395020]
[755.28564453 555.07025146]
[743.17901611 546.21423340]
[731.07238770 537.35821533]
[716.43890381 539.88726807]
[704.03491211 531.07843018]
[701.48138428 515.71234131]
[689.37475586 506.85629272]
[672.88800049 510.14404297]
[658.84405518 500.30245972]
[656.20513916 483.01614380]
[643.95666504 474.35733032]
[631.70819092 465.69848633]
[619.45977783 457.03964233]
[604.60070801 456.01077271]
[597.79840088 441.72653198]
[585.54992676 433.06771851]
[573.96746826 441.00427246]
[560.34204102 444.51580811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 131]
[6 130]
[7 129]
[8 127]
[9 126]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[41 54]
[42 53]
[43 52]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[74 81]
[75 80]
[138 191]
[139 190]
[141 188]
[142 187]
[143 186]
[144 185]
[148 182]
[149 181]
[152 178]
[153 177]
[154 176]
[155 174]
[156 173]
[157 172]
[158 171]
[159 170]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
