%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGAGGGGCCGGCAGCCUGGAAGGGAAAGGACAGCGGAGAGCAGGGCAGAGCCUGAGCAGGCAGGGCACCUCCAGGUGGGCAGGAGCUACCACUCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[95.31734467 185.06808472]
[101.37918854 171.34751892]
[112.63741302 161.43528748]
[127.01520538 157.15988159]
[141.85743713 159.30892944]
[131.98835754 148.01286316]
[122.11927795 136.71679688]
[112.25019836 125.42072296]
[102.38111877 114.12464905]
[89.21304321 109.42427826]
[86.32280731 95.74443054]
[76.45372772 84.44836426]
[66.58464813 73.15229034]
[54.59809113 74.68175507]
[43.50354767 70.20736694]
[36.08335114 60.97854614]
[34.13591003 49.42049408]
[38.04093552 38.49749756]
[28.86507225 26.63143349]
[19.68920898 14.76536751]
[10.51334381 2.89930224]
[1.33747911 -8.96676350]
[-15.97879219 -10.81294537]
[-26.46164513 -24.29615211]
[-24.07730865 -40.86880112]
[-33.60404587 -52.45505524]
[-43.13078308 -64.04131317]
[-57.03483200 -58.16275787]
[-72.01686859 -56.44203568]
[-86.86173248 -59.01010513]
[-100.36782074 -65.65042877]
[-111.44433594 -75.81716919]
[-119.19939423 -88.68011475]
[-123.01181793 -103.19239044]
[-122.58091736 -118.17571259]
[-117.95014191 -132.41606140]
[-109.50292206 -144.76197815]
[-119.02966309 -156.34823608]
[-134.79306030 -159.33061218]
[-142.16198730 -173.58117676]
[-135.48361206 -188.16812134]
[-119.88101959 -191.90158081]
[-107.32318878 -181.91757202]
[-107.44340515 -165.87496948]
[-97.91667175 -154.28871155]
[-84.17101288 -160.19076538]
[-69.30419922 -161.98220825]
[-54.52005768 -159.50938416]
[-41.01813889 -152.96423340]
[-29.89639473 -142.86953735]
[-22.06190872 -130.03704834]
[-18.15690422 -115.50228882]
[-18.50610352 -100.44097900]
[-23.08975410 -86.07392120]
[-31.54452705 -73.56804657]
[-22.01778984 -61.98179245]
[-12.49105358 -50.39553833]
[0.47813052 -50.93244171]
[11.52520943 -43.75148773]
[16.44317436 -31.31724739]
[13.20354462 -18.14262772]
[22.37940979 -6.27656221]
[31.55527306 5.58950329]
[40.73113632 17.45556831]
[49.90700150 29.32163429]
[68.05849457 30.42758179]
[79.96783447 44.58447266]
[77.88072205 63.28320694]
[87.74980164 74.57927704]
[97.61888123 85.87535095]
[110.78695679 90.57572174]
[113.67719269 104.25556946]
[123.54627228 115.55163574]
[133.41535950 126.84770966]
[143.28443909 138.14378357]
[153.15351868 149.43984985]
[162.60256958 152.73455811]
[166.73681641 160.60865784]
[179.72720337 168.10865784]
[192.71759033 175.60865784]
[205.70796204 183.10865784]
[218.69834900 190.60865784]
[231.90728760 197.71669006]
[245.32293701 204.42639160]
[261.65145874 202.90606689]
[270.91030884 216.44143677]
[263.57473755 231.10845947]
[247.19099426 231.81896973]
[238.61325073 217.84204102]
[225.19758606 211.13235474]
[220.32025146 211.82783508]
[214.97544861 209.34867859]
[211.19834900 203.59904480]
[198.20796204 196.09904480]
[185.21759033 188.59904480]
[172.22720337 181.09904480]
[159.23681641 173.59904480]
[164.21408081 187.74919128]
[162.79656982 202.68206787]
[155.24577332 215.64299011]
[142.95458984 224.24105835]
[128.19038391 226.89019775]
[113.67668152 223.10171509]
[102.09084320 213.57447815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[11 70]
[12 69]
[13 68]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[25 57]
[26 56]
[27 55]
[37 45]
[38 44]
[78 97]
[79 96]
[80 95]
[81 94]
[82 93]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
