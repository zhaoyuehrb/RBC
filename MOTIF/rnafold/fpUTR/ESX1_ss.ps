%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGAUCGCCGCGGAACCACGCACAGAGUCUGCAGAAGUGCACAGCUUUAUCGACAGCGCUUGAAGC\
) } def
/len { sequence length } bind def

/coor [
[83.02434540 128.60800171]
[72.65840149 139.44992065]
[62.53834534 150.52169800]
[52.66926575 161.81777954]
[42.80018616 173.11384583]
[42.44042969 189.15286255]
[29.58954048 198.75672913]
[14.10562229 194.55818176]
[7.86661100 179.77798462]
[15.65854168 165.75424194]
[31.50411224 163.24476624]
[41.37319183 151.94869995]
[51.24227524 140.65261841]
[53.33752823 133.30502319]
[61.81648254 129.08398438]
[72.18241882 118.24205780]
[68.54286957 110.81845856]
[66.84648132 102.72657776]
[67.19804382 94.46627808]
[69.57585144 86.54779816]
[73.83302307 79.46029663]
[79.70657349 73.64156342]
[86.83368683 69.45104980]
[84.15533447 54.69210434]
[81.47698212 39.93316269]
[78.79862213 25.17421722]
[63.99393845 21.60475159]
[51.92497253 12.31712532]
[44.68275452 -1.07952130]
[43.52203751 -16.26413918]
[48.64392471 -30.60590172]
[59.16101837 -41.62001038]
[73.25116730 -47.39820862]
[88.47317505 -46.93938446]
[102.18972015 -40.32303238]
[112.02434540 -28.69547653]
[116.27313995 -14.07126045]
[114.19995880 1.01588106]
[106.16401672 13.95201015]
[93.55757141 22.49586296]
[96.23592377 37.25480652]
[98.91427612 52.01375198]
[101.59262848 66.77269745]
[115.80759430 70.73038483]
[126.91231537 80.44705963]
[132.72187805 94.01089478]
[132.09320068 108.75312042]
[145.30212402 115.86115265]
[158.51106262 122.96917725]
[171.71998596 130.07720947]
[184.92892456 137.18524170]
[198.13786316 144.29327393]
[216.36433411 143.18496704]
[225.24955750 158.15336609]
[238.76408386 164.66162109]
[255.06803894 162.89721680]
[264.52832031 176.29255676]
[257.41299438 191.06767273]
[241.04170227 192.02319336]
[232.25582886 178.17616272]
[218.74130249 171.66790771]
[207.01148987 175.37242126]
[195.59599304 169.79280090]
[191.02983093 157.50219727]
[177.82089233 150.39418030]
[164.61196899 143.28614807]
[151.40303040 136.17811584]
[138.19409180 129.07008362]
[124.98516083 121.96205139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 16]
[2 15]
[3 13]
[4 12]
[5 11]
[23 43]
[24 42]
[25 41]
[26 40]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 64]
[54 61]
[55 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
