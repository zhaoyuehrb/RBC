%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:50:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAGCUCUGAGCGCCUGCGGUCUCCUGUGUGCUGCUCUCUGUGGGGUCCUGUAGACCCAGAGAGGCUCAGCUGCACUCGCCCGGCUGGGAGAGCUGGGUGUGGGGAAC\
) } def
/len { sequence length } bind def

/coor [
[189.70201111 133.72613525]
[176.43551636 126.72612000]
[163.16902161 119.72610474]
[149.90252686 112.72609711]
[136.63603210 105.72608948]
[123.36953735 98.72608185]
[120.32821655 109.74188995]
[112.64163971 117.61248016]
[102.51686096 120.66476440]
[92.59533691 118.53056335]
[85.26599884 112.14292145]
[70.87360382 116.36891174]
[56.48120499 120.59490204]
[42.08881378 124.82088470]
[27.69641685 129.04687500]
[22.68806076 133.72717285]
[16.93011665 134.88253784]
[12.36067772 133.07794189]
[-2.24950075 136.47538757]
[-16.85968018 139.87283325]
[-31.46985817 143.27029419]
[-43.06950760 154.86253357]
[-58.83624268 150.35231018]
[-62.55059433 134.37934875]
[-50.39155960 123.37525940]
[-34.86730957 128.66011047]
[-20.25713158 125.26265717]
[-5.64695215 121.86520386]
[8.96322632 118.46775818]
[23.47042847 114.65447998]
[37.86282349 110.42848969]
[52.25521851 106.20250702]
[66.64761353 101.97651672]
[81.04000854 97.75052643]
[88.26859283 82.28342438]
[106.53393555 77.52633667]
[102.72066498 63.01913071]
[98.90738678 48.51192856]
[95.09411621 34.00472641]
[91.28083801 19.49752235]
[87.46756744 4.99031878]
[83.56748962 1.07938087]
[81.83887482 -3.49587798]
[82.15588379 -7.75469494]
[84.00598145 -10.92232609]
[81.44815063 -25.70263290]
[78.89031219 -40.48294067]
[76.33248138 -55.26324844]
[73.77465057 -70.04355621]
[61.54344940 -80.42514038]
[62.17807007 -96.45563507]
[75.19168854 -105.83782196]
[90.60136414 -101.37448120]
[96.58612061 -86.48951721]
[88.55495453 -72.60138702]
[91.11278534 -57.82108307]
[93.67062378 -43.04077530]
[96.22845459 -28.26046753]
[98.78628540 -13.48015881]
[101.97476959 1.17704391]
[105.78804016 15.68424702]
[109.60131836 30.19145012]
[113.41458893 44.69865417]
[117.22786713 59.20585632]
[121.04114532 73.71305847]
[130.36955261 85.45958710]
[143.63603210 92.45959473]
[156.90252686 99.45960236]
[170.16902161 106.45961761]
[183.43551636 113.45962524]
[196.70201111 120.45963287]
[210.34649658 126.69085693]
[224.32446289 132.13298035]
[239.99148560 129.92967224]
[249.04443359 141.75733948]
[263.02239990 147.19944763]
[277.00033569 152.64157104]
[283.82449341 151.99357605]
[289.08975220 154.59471130]
[291.60632324 158.81410217]
[305.25079346 165.04531860]
[318.89526367 171.27655029]
[332.53976440 177.50778198]
[346.18423462 183.73899841]
[359.82870483 189.97023010]
[373.47320557 196.20144653]
[387.11767578 202.43267822]
[402.59118652 198.19598389]
[415.46569824 207.76814270]
[415.86499023 223.80622864]
[403.48275757 234.00718689]
[387.81756592 230.54571533]
[380.88644409 216.07714844]
[367.24197388 209.84593201]
[353.59747314 203.61470032]
[339.95300293 197.38348389]
[326.30853271 191.15225220]
[312.66403198 184.92103577]
[299.01956177 178.68980408]
[285.37509155 172.45857239]
[271.55822754 166.61952209]
[257.58026123 161.17741394]
[243.60231018 155.73529053]
[228.93507385 158.32785034]
[218.88233948 146.11093140]
[204.90437317 140.66882324]
[202.18685913 141.80830383]
[198.82254028 141.85610962]
[195.25788879 140.54751587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[11 34]
[12 33]
[13 32]
[14 31]
[15 30]
[18 29]
[19 28]
[20 27]
[21 26]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[72 106]
[73 105]
[75 103]
[76 102]
[77 101]
[80 100]
[81 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[87 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
