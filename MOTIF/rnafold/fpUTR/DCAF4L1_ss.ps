%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGGACGGAACUUCCUGUCACGGAAAAGAACAUCCUGUCACGGAGAAGAACAUCCUGCAGAAUUUCCUGUCACGAGGAACAUUCCGCAGGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[84.28104401 166.16227722]
[66.79187012 159.34436035]
[51.83291245 148.00483704]
[40.10543823 157.35717773]
[28.37796783 166.70951843]
[16.80189896 176.24864197]
[5.38020992 185.97206116]
[-6.04147959 195.69549561]
[-17.46316910 205.41891479]
[-28.88485909 215.14233398]
[-29.90011406 230.91398621]
[-41.82523727 241.28543091]
[-57.58526993 240.10348511]
[-67.83005524 228.06938171]
[-66.48155212 212.32272339]
[-54.33980179 202.20573425]
[-38.60828400 203.72065735]
[-27.18659401 193.99722290]
[-15.76490498 184.27380371]
[-4.34321594 174.55036926]
[7.07847357 164.82695007]
[10.18891716 157.96617126]
[19.02561951 154.98205566]
[30.75309181 145.62969971]
[42.48056412 136.27735901]
[37.76538086 127.41139221]
[34.40723038 117.94771576]
[32.47933197 108.09268951]
[32.02373123 98.06120300]
[33.05035400 88.07199097]
[35.53682327 78.34287262]
[39.42891693 69.08598328]
[44.64176941 60.50318146]
[51.06171417 52.78161240]
[58.54875946 46.08964157]
[50.77286911 33.26250076]
[42.99698257 20.43535805]
[27.58953476 16.91596413]
[19.25427818 3.48841572]
[22.93637276 -11.88096046]
[36.45129776 -20.07378578]
[51.78088379 -16.22940445]
[59.83036423 -2.62861633]
[55.82412338 12.65946960]
[63.60000992 25.48661041]
[71.37590027 38.31375122]
[85.13505554 33.64063263]
[99.57292938 31.99742699]
[114.03030396 33.45916367]
[127.84706116 37.95909882]
[140.39234924 45.29177475]
[151.09335327 55.12237930]
[159.46148682 67.00205994]
[165.11465454 80.38839722]
[167.79472351 94.67018890]
[182.78701782 95.15096283]
[197.77931213 95.63173676]
[212.77160645 96.11251068]
[227.76390076 96.59328461]
[242.75619507 97.07405853]
[256.79727173 89.78305054]
[269.27001953 97.92430115]
[284.26229858 98.40507507]
[299.25460815 98.88584900]
[314.24688721 99.36662292]
[329.24496460 99.60704041]
[344.24496460 99.60704041]
[359.24496460 99.60704041]
[374.24496460 99.60704041]
[389.24496460 99.60704041]
[400.24166870 88.25590515]
[416.04507446 88.08881378]
[427.27929688 99.20489502]
[427.27929688 115.00918579]
[416.04507446 126.12527466]
[400.24166870 125.95818329]
[389.24496460 114.60704041]
[374.24496460 114.60704041]
[359.24496460 114.60704041]
[344.24496460 114.60704041]
[329.24496460 114.60704041]
[322.42916870 117.81487274]
[313.76611328 114.35891724]
[298.77383423 113.87814331]
[283.78152466 113.39736938]
[268.78924561 112.91659546]
[255.82051086 120.24199677]
[242.27542114 112.06635284]
[227.28312683 111.58557892]
[212.29083252 111.10480499]
[197.29853821 110.62403107]
[182.30624390 110.14325714]
[167.31394958 109.66248322]
[162.10792542 127.69724274]
[152.16973877 143.62167358]
[138.25660706 156.22245789]
[121.42858887 164.53950500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[35 46]
[36 45]
[37 44]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[62 86]
[63 85]
[64 84]
[65 83]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
