%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGCUGUGCGCCGGAAGAGCACGCCCAGUCCGGGCUGCGCGGAGGAAGCGCUGGGGUCCCGGAGGGCGGGGGUGGCGGCGCCGGAGGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[102.54508209 338.36691284]
[95.05928802 323.77600098]
[104.17861938 310.14624023]
[104.67456818 295.15444946]
[105.17051697 280.16265869]
[104.67456818 265.17083740]
[103.18888855 250.24461365]
[101.70320129 235.31835938]
[97.83152771 228.84669495]
[100.42355347 219.87527466]
[99.43219757 204.90806580]
[98.44083405 189.94085693]
[97.44947815 174.97366333]
[96.45811462 160.00645447]
[95.46675873 145.03924561]
[81.70481110 141.40495300]
[69.75176239 133.67683411]
[60.78945541 122.61896515]
[55.70401382 109.32469940]
[54.99825287 95.10846710]
[58.74195099 81.37588501]
[66.56495667 69.48471832]
[77.69379425 60.61069107]
[91.02811432 55.63120651]
[90.53216553 40.63940811]
[90.03620911 25.64760971]
[89.54026031 10.65581131]
[89.04431152 -4.33598709]
[85.72456360 -10.42609310]
[86.08175659 -16.35145760]
[89.04431152 -20.32788849]
[89.54026031 -35.31968689]
[90.03620911 -50.31148529]
[90.53216553 -65.30328369]
[91.02811432 -80.29508209]
[91.52406311 -95.28688049]
[91.77207184 -110.28483582]
[91.77207184 -125.28483582]
[91.02831268 -140.26638794]
[89.54263306 -155.19262695]
[88.05695343 -170.11886597]
[86.57126617 -185.04510498]
[73.55438232 -193.71083069]
[69.20271301 -208.73071289]
[75.57098389 -223.01283264]
[89.65229797 -229.81361389]
[104.79788208 -225.92193604]
[113.85646057 -213.17532349]
[112.55084991 -197.59234619]
[101.49751282 -186.53079224]
[102.98319244 -171.60455322]
[104.46887970 -156.67831421]
[105.95455933 -141.75205994]
[108.63446045 -139.17758179]
[110.09613037 -135.09518433]
[109.60644531 -130.14450073]
[106.77207184 -125.28483582]
[106.77207184 -110.28483582]
[109.98371887 -103.46150208]
[106.51586151 -94.79093170]
[106.01991272 -79.79913330]
[105.52396393 -64.80733490]
[105.02800751 -49.81553650]
[104.53205872 -34.82373810]
[104.03610992 -19.83193779]
[104.03610992 -4.83193779]
[104.53205872 10.15986156]
[105.02800751 25.15166092]
[105.52396393 40.14345932]
[106.01991272 55.13525772]
[120.91671753 59.85556793]
[133.32081604 69.36002350]
[141.75395203 82.51594543]
[145.21113586 97.75550079]
[143.28036499 113.26254272]
[136.19172668 127.18904114]
[124.78999329 137.87533569]
[110.43395996 144.04789734]
[111.42532349 159.01509094]
[112.41667938 173.98229980]
[113.40804291 188.94950867]
[114.39939880 203.91671753]
[115.39075470 218.88391113]
[116.62944794 233.83268738]
[118.11512756 248.75892639]
[119.60081482 263.68518066]
[122.57621002 267.46377563]
[123.91921234 271.59176636]
[123.73711395 275.46755981]
[122.33600616 278.59814453]
[120.16232300 280.65859985]
[119.66636658 295.65039062]
[119.17041779 310.64221191]
[127.36901855 324.84484863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 93]
[4 92]
[5 91]
[6 86]
[7 85]
[8 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[36 60]
[37 58]
[38 57]
[39 53]
[40 52]
[41 51]
[42 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
