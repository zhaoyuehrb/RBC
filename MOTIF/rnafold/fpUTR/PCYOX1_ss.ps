%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAGCCGCGCAGCGGUGGGAGGACUGCGGGGCUCUUGAGGCCAGCUGCAGAGCUUGUGGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[95.31198120 119.81400299]
[86.72434998 132.11248779]
[78.13671112 144.41094971]
[69.54907990 156.70942688]
[68.68093109 173.08558655]
[53.94398880 180.27964783]
[40.49835587 170.89099121]
[42.17574310 154.57785034]
[57.25060272 148.12179565]
[65.83824158 135.82331848]
[74.42587280 123.52484894]
[83.01351166 111.22637177]
[80.31229401 105.19293976]
[79.68630981 98.61213684]
[66.15005493 92.14917755]
[52.61379623 85.68621826]
[39.07754135 79.22326660]
[25.54128838 72.76030731]
[10.72689342 78.26569366]
[-3.60636210 71.60736847]
[-8.95481300 56.73559570]
[-2.14531803 42.47353745]
[12.78217030 37.28261566]
[26.97143745 44.24251938]
[32.00424576 59.22405624]
[45.54050064 65.68701172]
[59.07675552 72.14996338]
[72.61300659 78.61292267]
[86.14926147 85.07588196]
[102.85472107 79.84006500]
[117.44972992 89.50814056]
[132.24818420 87.05747986]
[144.59883118 77.16950226]
[158.41918945 82.72349548]
[173.21765137 80.27283478]
[188.01611328 77.82217407]
[202.81455994 75.37151337]
[206.65092468 71.87577820]
[211.00817871 70.21656799]
[215.15051270 70.30326080]
[218.47186279 71.78319550]
[220.57977295 74.11994171]
[235.57565308 74.47158051]
[249.55342102 67.05992126]
[262.09579468 75.09345245]
[277.09167480 75.44509125]
[292.08755493 75.79673004]
[307.08343506 76.14836884]
[321.20651245 67.81346130]
[335.35131836 76.11145782]
[334.96685791 92.50610352]
[320.44866943 100.13198090]
[306.73181152 91.14424896]
[291.73593140 90.79261017]
[276.74005127 90.44097137]
[261.74417114 90.08933258]
[248.83900452 97.52614594]
[235.22401428 89.46746063]
[220.22813416 89.11582184]
[205.26522827 90.16996765]
[190.46676636 92.62062836]
[175.66830444 95.07128906]
[160.86985779 97.52194977]
[149.57769775 107.23463440]
[134.69885254 101.85593414]
[119.90039062 104.30659485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[31 66]
[32 65]
[34 63]
[35 62]
[36 61]
[37 60]
[42 59]
[43 58]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
