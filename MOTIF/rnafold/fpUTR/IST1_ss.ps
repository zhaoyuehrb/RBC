%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGUAAUUUCCUCUUUAGUAGAGACGGGGUUCCUCUGUGUUGGCCAGGCUGGUCUCGAAUUACCGACUUCAGCGAUGCGGUUUCACUAUGGUGUCCAGGCUGGUCUGCAACUCCCGGGCUCAAGCGAUCCUCCCGCCCCGCCUCUCAAAGUGCUGGGAAGGUCCCUUCCAGGCUUAAGCAGCGAUA\
) } def
/len { sequence length } bind def

/coor [
[68.01097870 171.67915344]
[79.85154724 161.65017700]
[78.60632324 146.70195007]
[77.36109161 131.75372314]
[70.14141083 129.72242737]
[66.07880402 144.16178894]
[62.01619339 158.60115051]
[57.95335007 173.04045105]
[43.51411819 168.97735596]
[47.57683182 154.53854370]
[51.63943863 140.09918213]
[55.70204544 125.65981293]
[48.48236465 123.62850952]
[39.62528992 135.73439026]
[30.76821709 147.84027100]
[21.91114426 159.94613647]
[22.93734360 175.95634460]
[10.96351051 186.63374329]
[-4.82505369 183.78755188]
[-12.31671524 169.60113525]
[-5.76451111 154.95709229]
[9.80526829 151.08906555]
[18.66234016 138.98320007]
[27.51941299 126.87731934]
[36.37648773 114.77143860]
[63.88079071 99.83189392]
[93.27079010 98.37152100]
[83.25237274 87.20767975]
[73.23395538 76.04383850]
[63.21553802 64.87999725]
[53.10468674 53.79980850]
[42.90209579 42.80403137]
[42.28729248 57.79142380]
[32.28673935 68.97127533]
[17.46023369 71.24607086]
[4.56797981 63.57862473]
[-0.51174599 49.46492767]
[4.53717852 35.34018707]
[17.41267586 27.64463043]
[32.24601364 29.88810921]
[23.38894081 17.78223228]
[14.53186798 5.67635489]
[0.13880506 -0.89253569]
[-1.13183284 -15.73284340]
[-9.98890591 -27.83872032]
[-18.84597778 -39.94459915]
[-27.70305061 -52.05047607]
[-36.56012344 -64.15634918]
[-45.41719818 -76.26222992]
[-56.66391373 -86.18751526]
[-69.77716064 -93.47056580]
[-82.89041138 -100.75360870]
[-96.00365448 -108.03665161]
[-109.11690521 -115.31969452]
[-124.13936615 -111.20103455]
[-137.33432007 -118.77388763]
[-141.16824341 -133.12089539]
[-154.28149414 -140.40393066]
[-167.39474487 -147.68698120]
[-182.51962280 -143.10292053]
[-196.41635132 -150.62997437]
[-200.84024048 -165.80247498]
[-193.16668701 -179.61883545]
[-177.94825745 -183.88208008]
[-164.21379089 -176.06286621]
[-160.11169434 -160.80023193]
[-146.99845886 -153.51718140]
[-133.88520813 -146.23413086]
[-119.67936707 -150.56192017]
[-106.27691650 -143.36268616]
[-101.83385468 -128.43295288]
[-88.72061157 -121.14990234]
[-75.60736084 -113.86685181]
[-62.49411774 -106.58380890]
[-49.38087082 -99.30076599]
[-37.57607651 -108.55532074]
[-41.51853561 -123.02795410]
[-45.46099854 -137.50057983]
[-49.40345764 -151.97320557]
[-53.34592056 -166.44583130]
[-64.43830109 -177.72721863]
[-60.31814957 -192.04063416]
[-64.26061249 -206.51325989]
[-78.10293579 -214.13989258]
[-82.41777039 -229.34376526]
[-74.64521027 -243.10469055]
[-59.39656830 -247.25854492]
[-45.71859741 -239.34092712]
[-41.72619247 -224.04920959]
[-49.78797913 -210.45571899]
[-45.84552002 -195.98309326]
[-35.03512955 -185.73689270]
[-38.87329102 -170.38830566]
[-34.93082809 -155.91566467]
[-30.98836899 -141.44303894]
[-27.04590797 -126.97041321]
[-23.10344696 -112.49777985]
[-22.15106583 -105.12760162]
[-23.05493546 -98.33728790]
[-25.49698830 -92.55312347]
[-29.06969643 -88.08692932]
[-33.31132126 -85.11930084]
[-24.45424652 -73.01342773]
[-15.59717464 -60.90754700]
[-6.74010134 -48.80167007]
[2.11697149 -36.69579315]
[10.97404385 -24.58991623]
[24.73358917 -18.88691902]
[26.63774490 -3.18071818]
[35.49481583 8.92515945]
[44.35189056 21.03103638]
[53.89787292 32.60144043]
[64.10046387 43.59721756]
[70.96775818 46.36728287]
[74.37937927 54.86158371]
[84.39779663 66.02542114]
[94.41621399 77.18926239]
[104.43463135 88.35310364]
[117.48689270 95.74488068]
[132.21366882 98.59477997]
[146.94046021 101.44467926]
[161.66723633 104.29457092]
[180.38708496 96.84935760]
[194.45089722 110.10351562]
[209.26426697 112.46234131]
[224.07763672 114.82117462]
[238.92283630 109.35028839]
[250.27502441 118.99275208]
[265.08840942 121.35158539]
[279.90176392 123.71041107]
[294.71514893 126.06924438]
[309.56033325 120.59835815]
[320.91253662 130.24082947]
[335.72589111 132.59965515]
[350.53927612 134.95848083]
[365.35263062 137.31730652]
[380.16601562 139.67614746]
[388.60684204 132.77832031]
[399.23306274 131.69763184]
[408.50015259 136.55123901]
[413.45040894 145.51678467]
[428.17718506 148.36668396]
[442.90396118 151.21656799]
[454.15130615 140.52651978]
[469.53842163 138.52246094]
[483.14868164 145.97502136]
[489.74862671 160.01852417]
[486.80050659 175.25296021]
[475.43786621 185.82037354]
[460.02990723 187.65739441]
[446.50131226 180.05763245]
[440.05407715 165.94335938]
[425.32730103 163.09346008]
[410.60052490 160.24356079]
[392.85165405 167.88829041]
[377.80718994 154.48951721]
[362.99380493 152.13067627]
[348.18045044 149.77185059]
[333.36706543 147.41302490]
[318.55371094 145.05419922]
[304.76803589 150.69380188]
[292.35629272 140.88261414]
[277.54293823 138.52378845]
[262.72955322 136.16494751]
[247.91619873 133.80612183]
[234.13055420 139.44572449]
[221.71881104 129.63453674]
[206.90544128 127.27571106]
[192.09207153 124.91688538]
[184.37394714 131.64865112]
[174.00569153 133.04002380]
[164.38995361 128.39013672]
[158.81733704 119.02135468]
[144.09056091 116.17145538]
[129.36378479 113.32156372]
[114.63699341 110.47166443]
[109.05507660 115.48087311]
[112.14966583 130.15818787]
[97.89123535 125.49929047]
[92.30931854 130.50849915]
[93.55454254 145.45672607]
[94.79977417 160.40495300]
[108.13651276 168.33659363]
[114.23311615 182.60581970]
[110.74531555 197.72584534]
[99.01423645 207.88267517]
[83.55072021 209.17083740]
[70.30080414 201.09498596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 182]
[3 181]
[4 180]
[13 25]
[14 24]
[15 23]
[16 22]
[27 118]
[28 117]
[29 116]
[30 115]
[31 113]
[32 112]
[40 111]
[41 110]
[42 109]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[49 102]
[50 75]
[51 74]
[52 73]
[53 72]
[54 71]
[57 68]
[58 67]
[59 66]
[76 97]
[77 96]
[78 95]
[79 94]
[80 93]
[82 91]
[83 90]
[119 176]
[120 175]
[121 174]
[122 173]
[124 169]
[125 168]
[126 167]
[128 165]
[129 164]
[130 163]
[131 162]
[133 160]
[134 159]
[135 158]
[136 157]
[137 156]
[141 154]
[142 153]
[143 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
