%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUCUCUCCUCUGAGCCACAACUAAAUGAUGUUUCUACUUUUCCCUUUCUACUUUCCUAGACCCUGGAUUUUGU\
) } def
/len { sequence length } bind def

/coor [
[106.62069702 197.22164917]
[88.53993225 196.77061462]
[70.85394287 192.98597717]
[54.17199326 185.99812317]
[39.06874084 176.04777527]
[26.06446838 163.47772217]
[13.96528721 172.34393311]
[1.86610544 181.21015930]
[-0.29451424 196.86605835]
[-12.94296741 206.34193420]
[-28.57515144 204.01589966]
[-37.91676712 191.26797485]
[-35.42560196 175.66125488]
[-22.57961845 166.45494080]
[-7.00011158 169.11097717]
[5.09907007 160.24475098]
[17.19825172 151.37854004]
[11.16413116 140.05087280]
[6.67106152 128.02842712]
[3.79698467 115.51978302]
[2.59175754 102.74190521]
[3.07628751 89.91646576]
[5.24216938 77.26594543]
[9.05183125 65.00979614]
[14.43918610 53.36063004]
[21.31077957 42.52052307]
[29.54740715 32.67752457]
[39.00618744 24.00237846]
[49.52303696 16.64557648]
[60.91551971 10.73473740]
[72.98600769 6.37239742]
[85.52511597 3.63423133]
[98.31531525 2.56773853]
[111.13474274 3.19141960]
[123.76100922 5.49445534]
[135.97509766 9.43689442]
[147.56510925 14.95034695]
[158.33001709 21.93916893]
[168.08305359 30.28212738]
[176.65504456 39.83449173]
[183.89727783 50.43055725]
[189.68414307 61.88651276]
[193.91523743 74.00363159]
[196.51716614 86.57170868]
[211.48908997 85.65428162]
[226.46101379 84.73686218]
[235.23190308 70.43412018]
[250.60797119 64.14246368]
[266.57019043 68.11487579]
[276.99340820 80.62681580]
[291.91543579 79.09947205]
[306.83749390 77.57212830]
[321.75952148 76.04478455]
[331.54324341 63.63292313]
[347.24749756 61.85755157]
[359.55523682 71.77195740]
[361.16445923 87.49410248]
[351.12048340 99.69631958]
[335.38220215 101.13924408]
[323.28686523 90.96681976]
[308.36483765 92.49416351]
[293.44281006 94.02150726]
[278.52075195 95.54885101]
[272.81896973 107.79260254]
[261.68103027 115.62374115]
[248.01272583 116.86605835]
[235.44703674 111.08002472]
[227.37843323 99.70877838]
[212.40650940 100.62620544]
[197.43460083 101.54362488]
[195.47109985 119.52312469]
[190.21878052 136.83007812]
[181.85858154 152.86830139]
[170.67848206 167.08529663]
[157.06361389 178.99130249]
[141.48301697 188.17620850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[44 70]
[45 69]
[46 68]
[50 63]
[51 62]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
