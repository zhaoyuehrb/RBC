%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGUGGGCGCCAUCUUCUUCUGGGCUCACUGAGGGUCUACCUGUUUUGGGGAGGCUGCUGCGACGAAGAGUUCCCUCAGCCUCCGGCCUUGUGUGUCCGACUCGGCAGCAGUGUUAAGUUGCUUUUACAGAGUUAACAGGUCUCCAAGAAAUUUUAAAAAAGGUCAUUAUUGCUGUGGUUUGAGCUCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.11324310 133.48297119]
[74.27233887 131.30409241]
[76.45092773 116.46360779]
[69.03044891 115.37439728]
[60.37161636 127.62284851]
[51.71278381 139.87130737]
[43.05395126 152.11976624]
[34.39512253 164.36820984]
[25.73629189 176.61666870]
[17.07746124 188.86512756]
[8.41862965 201.11358643]
[6.01491165 209.94119263]
[-0.48090979 213.48872375]
[-9.33694553 225.59536743]
[-18.19298172 237.70199585]
[-13.31773281 252.43331909]
[-18.06448555 267.20654297]
[-30.60801888 276.34106445]
[-46.12508392 276.32446289]
[-58.64905548 267.16314697]
[-63.36421204 252.37980652]
[-58.45747757 237.65895081]
[-45.81558990 228.66104126]
[-30.29961777 228.84596252]
[-21.44358063 216.73933411]
[-12.58754539 204.63269043]
[-3.82982540 192.45475769]
[4.82900524 180.20629883]
[13.48783588 167.95783997]
[22.14666748 155.70938110]
[30.80549812 143.46093750]
[39.46432877 131.21247864]
[48.12316132 118.96401978]
[56.78199005 106.71556854]
[48.12316132 94.46710968]
[33.68798065 98.54456329]
[19.25280190 102.62201691]
[10.19619656 115.86427307]
[-5.81363392 116.89620209]
[-16.49531937 104.92619324]
[-13.65478230 89.13661194]
[0.52895755 81.63986969]
[15.17535019 88.18683624]
[29.61052895 84.10938263]
[44.04570770 80.03192902]
[73.62757111 77.58423615]
[95.25568390 91.41014862]
[96.46888733 76.45928955]
[97.68209839 61.50843430]
[98.89530182 46.55757523]
[100.10851288 31.60671806]
[101.32171631 16.65586090]
[95.52540588 2.82102084]
[84.01741028 -6.80010271]
[72.50941467 -16.42122650]
[61.00141907 -26.04234886]
[49.49341965 -35.66347122]
[37.98542404 -45.28459549]
[26.47742844 -54.90571976]
[14.96943188 -64.52684021]
[0.57098681 -59.36621857]
[-14.37864208 -62.08750534]
[-25.88248062 -71.86135101]
[-30.91585732 -85.98654938]
[-28.22131348 -100.63594818]
[-39.72930908 -110.25707245]
[-51.23730469 -119.87819672]
[-67.28035736 -119.88911438]
[-77.16138458 -132.52813721]
[-73.30050659 -148.09968567]
[-58.65946579 -154.65859985]
[-44.46960831 -147.17344666]
[-41.61618423 -131.38618469]
[-30.10818672 -121.76506805]
[-18.60018921 -112.14394379]
[-4.66004038 -117.39159393]
[10.13351154 -114.94071960]
[21.79107666 -105.35075378]
[27.11824417 -91.11986542]
[24.59055519 -76.03483582]
[36.09855270 -66.41371918]
[47.60654831 -56.79259109]
[59.11454391 -47.17147064]
[70.62254333 -37.55034637]
[82.13053894 -27.92922211]
[93.63853455 -18.30809975]
[105.14653015 -8.68697548]
[120.03603363 -10.50430012]
[128.89207458 -22.61093521]
[137.74810791 -34.71757126]
[146.60414124 -46.82420731]
[155.46017456 -58.93084335]
[158.00653076 -67.71837616]
[164.55894470 -71.16026306]
[173.60986328 -83.12190247]
[168.47613525 -99.23124695]
[173.89707947 -115.07076263]
[187.55108643 -124.46812439]
[203.95001221 -123.88635254]
[212.80604553 -135.99298096]
[204.97566223 -148.99147034]
[202.72448730 -163.95727539]
[206.36479187 -178.60520935]
[215.31159973 -190.71067810]
[228.17652893 -198.44747925]
[242.98312378 -200.66337585]
[257.47048950 -197.05145264]
[266.32650757 -209.15809631]
[275.18255615 -221.26472473]
[284.03857422 -233.37136841]
[292.89462280 -245.47799683]
[301.75067139 -257.58462524]
[296.87539673 -272.31594849]
[301.62216187 -287.08917236]
[314.16567993 -296.22369385]
[329.68276978 -296.20709229]
[342.20672607 -287.04577637]
[346.92187500 -272.26245117]
[342.01516724 -257.54159546]
[329.37326050 -248.54368591]
[313.85729980 -248.72859192]
[305.00125122 -236.62196350]
[296.14523315 -224.51531982]
[287.28918457 -212.40869141]
[278.43313599 -200.30204773]
[269.57711792 -188.19541931]
[277.40689087 -175.48228455]
[279.77926636 -160.69995117]
[276.30194092 -146.09608459]
[267.47451782 -133.90328979]
[254.61692810 -125.99782562]
[239.67218018 -123.61088562]
[224.91268921 -127.13695526]
[216.05665588 -115.03031921]
[221.30451965 -102.74567413]
[219.78115845 -89.36521149]
[211.77854919 -78.39962006]
[199.30264282 -72.77915955]
[185.57150269 -74.07098389]
[176.52058411 -62.10934067]
[167.56681824 -50.07481003]
[158.71078491 -37.96817398]
[149.85473633 -25.86153603]
[140.99870300 -13.75490093]
[132.14266968 -1.64826453]
[127.21925354 11.51687908]
[116.27257538 17.86906815]
[115.05936432 32.81992340]
[113.84616089 47.77078247]
[112.63295746 62.72163773]
[111.41974640 77.67249298]
[110.20654297 92.62335205]
[113.18248749 77.92152405]
[119.78958130 64.45503998]
[129.59584045 53.10438919]
[141.96009827 44.61172104]
[156.07389832 39.53232193]
[171.01446533 38.19829941]
[185.80490112 40.69688034]
[199.47816467 46.86469269]
[211.14024353 56.29846573]
[220.02861023 68.38138580]
[225.56211853 82.32341003]
[227.37898254 97.21297455]
[225.36038208 112.07653046]
[219.63832092 125.94223785]
[210.58691406 137.90351868]
[198.79798889 147.17828369]
[185.04234314 153.16011047]
[170.21937561 155.45790100]
[155.29827881 153.92140198]
[141.25465393 148.65107727]
[129.00669861 139.99151611]
[119.35526276 128.50894165]
[112.93252563 114.95761108]
[117.70616913 129.17774963]
[122.47981262 143.39788818]
[127.25346375 157.61802673]
[132.95915222 164.76992798]
[131.98724365 172.10723877]
[136.52999878 186.40281677]
[141.07275391 200.69837952]
[153.54641724 211.34449768]
[150.29777527 227.41865540]
[134.66876221 232.38513184]
[122.73715973 221.13485718]
[126.77717590 205.24113464]
[122.23442841 190.94555664]
[117.69167328 176.64999390]
[113.03332520 162.39166260]
[108.25968170 148.17152405]
[103.48603058 133.95138550]
[98.71238708 119.73125458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[6 32]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[13 26]
[14 25]
[15 24]
[35 45]
[36 44]
[37 43]
[47 152]
[48 151]
[49 150]
[50 149]
[51 148]
[52 147]
[53 87]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[65 75]
[66 74]
[67 73]
[88 145]
[89 144]
[90 143]
[91 142]
[92 141]
[94 140]
[95 139]
[99 134]
[100 133]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[175 193]
[176 192]
[177 191]
[178 190]
[180 189]
[181 188]
[182 187]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
