%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:21:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGUGAAGCGCGGAGGGCGGCGCGGGCACCGGGGCCGGGCCGGGGCUGCAGCCGCAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[91.57897186 107.55273438]
[87.96450806 102.04039001]
[74.75556946 94.93235779]
[61.54663849 87.82432556]
[48.33770752 80.71630096]
[35.12877274 73.60826874]
[19.30993843 73.88223267]
[11.76882458 61.03774261]
[-1.44010890 53.92971420]
[-14.64904213 46.82168198]
[-27.85797501 39.71365356]
[-41.06690598 32.60562515]
[-57.54711914 37.98066330]
[-72.59781647 30.07375145]
[-77.33305359 14.09260368]
[-90.84758759 7.58434772]
[-104.36212158 1.07609177]
[-117.87665558 -5.43216419]
[-131.47659302 2.03920031]
[-146.86647034 0.05642216]
[-158.12855530 -10.61808014]
[-160.93235779 -25.87974167]
[-154.19975281 -39.86014557]
[-140.51956177 -47.18353653]
[-125.15209961 -45.03392410]
[-114.00646973 -34.23787689]
[-111.36840057 -18.94669724]
[-97.85386658 -12.43844128]
[-84.33933258 -5.93018532]
[-70.82479858 0.57807088]
[-59.18867874 -5.38334131]
[-46.06331635 -3.42320728]
[-36.39421082 5.95134830]
[-33.95887756 19.39669037]
[-20.74994469 26.50472069]
[-7.54101181 33.61275101]
[5.66792107 40.72077942]
[18.87685394 47.82881165]
[33.75089645 47.04643250]
[42.23680115 60.39933395]
[55.44573593 67.50736237]
[68.65467072 74.61539459]
[81.86360168 81.72342682]
[95.07253265 88.83145142]
[108.58706665 95.33971405]
[122.37998199 101.23508453]
[136.17289734 107.13046265]
[149.96582031 113.02583313]
[155.81903076 112.27906036]
[160.75437927 113.91529083]
[163.95942688 117.09041595]
[165.12902832 120.75187683]
[178.00576782 128.44537354]
[190.88249207 136.13885498]
[203.75923157 143.83235168]
[216.63595581 151.52583313]
[233.03244019 151.22999573]
[241.25387573 165.41943359]
[232.84275818 179.49725342]
[216.45173645 178.98141479]
[208.94247437 164.40257263]
[196.06573486 156.70907593]
[183.18901062 149.01559448]
[170.31227112 141.32209778]
[157.43554688 133.62861633]
[144.07043457 126.81875610]
[130.27752686 120.92337799]
[116.48461151 115.02799988]
[102.69169617 109.13262939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 44]
[3 43]
[4 42]
[5 41]
[6 40]
[8 38]
[9 37]
[10 36]
[11 35]
[12 34]
[15 30]
[16 29]
[17 28]
[18 27]
[45 69]
[46 68]
[47 67]
[48 66]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
