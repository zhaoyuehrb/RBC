%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGUGGUCUACAGCAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[81.16588593 155.09828186]
[67.73275757 148.47029114]
[56.43500519 138.63464355]
[48.02029800 126.24223328]
[43.04549789 112.11316681]
[41.83982468 97.18247986]
[27.07568359 94.53292847]
[12.31154156 91.88338470]
[-2.45260024 89.23383331]
[-17.21674156 86.58428192]
[-31.98088455 83.93473816]
[-46.74502563 81.28518677]
[-61.50916672 78.63563538]
[-76.27330780 75.98608398]
[-85.41246796 77.56006622]
[-91.40217590 73.05724335]
[-106.08843994 70.00540924]
[-120.77469635 66.95356750]
[-135.46096802 63.90172577]
[-146.94985962 74.16385651]
[-162.10136414 75.67556000]
[-175.08416748 68.06565857]
[-181.02537537 54.43333435]
[-195.71162415 51.38149261]
[-210.39788818 48.32965088]
[-225.08415222 45.27781296]
[-239.77041626 42.22597122]
[-254.45668030 39.17413330]
[-265.84973145 49.70874786]
[-281.26290894 51.50133133]
[-294.76953125 43.86259460]
[-301.17605591 29.72979164]
[-298.01901245 14.53727055]
[-286.51235962 4.12686634]
[-271.08062744 2.50159240]
[-257.65765381 10.28639984]
[-251.40483093 24.48787117]
[-236.71856689 27.53971100]
[-222.03231812 30.59155083]
[-207.34605408 33.64339066]
[-192.65979004 36.69523239]
[-177.97352600 39.74707031]
[-167.09306335 29.61033058]
[-152.15328979 27.80280113]
[-138.85842896 35.22573090]
[-132.40911865 49.21546555]
[-117.72286224 52.26730347]
[-103.03659821 55.31914520]
[-88.35033417 58.37098312]
[-73.62376404 61.22194672]
[-58.85961914 63.87149429]
[-44.09547806 66.52104187]
[-29.33133507 69.17059326]
[-14.56719303 71.82014465]
[0.19694887 74.46968842]
[14.96109104 77.11923981]
[29.72523308 79.76879120]
[44.48937607 82.41834259]
[49.07097626 70.98387909]
[55.99474716 60.69741058]
[64.98089600 52.03572464]
[75.65322113 45.40882492]
[87.55484009 41.14058304]
[100.16767883 39.45303726]
[112.93506622 40.45509720]
[125.28624725 44.13619614]
[136.66192627 50.36524963]
[146.53958130 58.89504623]
[157.77767944 48.96000671]
[169.01579285 39.02497101]
[180.25389099 29.08993340]
[188.11598206 14.06914806]
[204.72619629 17.46581078]
[206.06044006 34.36717606]
[190.18893433 40.32804108]
[178.95083618 50.26307678]
[167.71272278 60.19811249]
[156.47462463 70.13314819]
[161.88200378 84.12458801]
[176.88059998 83.91970062]
[191.87919617 83.71482086]
[205.57240295 75.78975677]
[218.40417480 83.35249329]
[233.40277100 83.14761353]
[249.15783691 76.88549805]
[259.53668213 90.29132843]
[249.52789307 103.97564697]
[233.60765076 98.14621735]
[218.60905457 98.35109711]
[205.98864746 106.26151276]
[192.08409119 98.71342468]
[177.08547974 98.91830444]
[162.08688354 99.12318420]
[158.43844604 116.79809570]
[149.98056030 132.31362915]
[137.63825989 144.42864990]
[145.77919006 157.02728271]
[153.92012024 169.62590027]
[162.06105042 182.22453308]
[170.20196533 194.82315063]
[178.34289551 207.42176819]
[186.48382568 220.02040100]
[201.31738281 227.01307678]
[202.40849304 243.37588501]
[188.63470459 252.27616882]
[174.16532898 244.55807495]
[173.88519287 228.16131592]
[165.74426270 215.56269836]
[157.60334778 202.96408081]
[149.46241760 190.36544800]
[141.32148743 177.76683044]
[133.18057251 165.16819763]
[125.03964233 152.56958008]
[110.79988098 157.21806335]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[16 49]
[17 48]
[18 47]
[19 46]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[68 78]
[69 77]
[70 76]
[71 75]
[79 93]
[80 92]
[81 91]
[83 89]
[84 88]
[96 113]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
