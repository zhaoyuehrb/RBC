%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGGGGAACCGGGCGCCGCCAUAUUGGCUGUUGUCCUGUGAGGGGAGCGGUAGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGUGUGGAGCGAGGGAGCGGCGCGAGCGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[158.14607239 219.99859619]
[146.94973755 210.01646423]
[139.82827759 212.36907959]
[134.42984009 226.36396790]
[141.06272888 240.70903015]
[135.53105164 255.51362610]
[121.11667633 261.99447632]
[106.37138367 256.30657959]
[100.04330444 241.82449341]
[105.88677216 227.14016724]
[120.43495178 220.96554565]
[125.83338165 206.97065735]
[131.31503296 198.70152283]
[138.15919495 192.78947449]
[145.68783569 189.41227722]
[153.21160889 188.57983398]
[144.57447815 176.31607056]
[135.93736267 164.05229187]
[127.30023193 151.78852844]
[118.66310883 139.52474976]
[110.02598572 127.26097870]
[101.38886261 114.99720764]
[100.40970612 129.96520996]
[89.64627075 140.41262817]
[74.65573120 140.94541931]
[63.17774963 131.28851318]
[61.13842773 116.42778015]
[69.59066772 104.03586578]
[84.17259979 100.51099396]
[70.61276245 94.09767151]
[57.05292130 87.68434143]
[43.49308395 81.27101898]
[29.93324471 74.85768890]
[16.37340355 68.44436646]
[0.59007424 69.53846741]
[-7.60712099 57.10242081]
[-21.16695976 50.68909454]
[-34.72679901 44.27576828]
[-48.28664017 37.86244202]
[-65.19018555 36.55616760]
[-68.61433411 19.95160103]
[-53.60657501 12.06467533]
[-41.87331390 24.30260277]
[-28.31347275 30.71592903]
[-14.75363445 37.12925720]
[-1.19379473 43.54258347]
[13.61964512 41.98975372]
[22.78673172 54.88452530]
[36.34656906 61.29785156]
[49.90641022 67.71118164]
[63.46624756 74.12450409]
[77.02608490 80.53783417]
[90.58592987 86.95115662]
[93.26679993 87.84306335]
[95.58695221 89.16012573]
[98.15138245 74.38095856]
[92.88729858 59.46117401]
[102.68656158 48.24406052]
[105.25099182 33.46489716]
[99.98690796 18.54511261]
[109.78617096 7.32799959]
[112.35060120 -7.45116520]
[107.08651733 -22.37095070]
[116.88578796 -33.58806229]
[119.45021057 -48.36722946]
[113.29450226 -63.56720352]
[123.59219360 -76.33002472]
[139.74990845 -73.52639771]
[145.14596558 -58.04044724]
[134.22937012 -45.80279922]
[131.66494751 -31.02363396]
[137.11245728 -17.16095543]
[127.12976837 -4.88673687]
[124.56533813 9.89242744]
[130.01284790 23.75510788]
[120.03015900 36.02932739]
[117.46572876 50.80849075]
[122.91323853 64.67117310]
[112.93054962 76.94538879]
[110.36611938 91.72455597]
[113.65263367 106.36008453]
[122.28975677 118.62385559]
[130.92687988 130.88763428]
[139.56401062 143.15139771]
[148.20112610 155.41517639]
[156.83825684 167.67893982]
[165.47537231 179.94271851]
[176.33908081 190.28582764]
[189.01188660 198.31079102]
[204.81044006 199.15696716]
[211.42369080 212.50291443]
[224.09649658 220.52787781]
[239.89505005 221.37405396]
[246.50830078 234.71998596]
[259.18109131 242.74496460]
[274.97967529 243.59112549]
[281.59289551 256.93707275]
[294.26571655 264.96203613]
[306.93850708 272.98699951]
[319.61132812 281.01196289]
[334.84573364 277.76385498]
[347.58343506 286.08285522]
[350.58612061 300.62655640]
[363.25894165 308.65151978]
[378.62237549 304.94467163]
[392.06332397 313.25830078]
[395.60751343 328.66003418]
[387.15228271 342.01235962]
[371.71389771 345.39352417]
[358.45172119 336.79757690]
[355.23397827 321.32431030]
[342.56115723 313.29934692]
[328.13000488 316.80319214]
[315.16366577 308.84527588]
[311.58636475 293.68478394]
[298.91354370 285.65982056]
[286.24075317 277.63485718]
[273.56793213 269.60989380]
[258.67581177 269.33770752]
[251.15614319 255.41775513]
[238.48333740 247.39279175]
[223.59121704 247.12062073]
[216.07153320 233.20068359]
[203.39872742 225.17572021]
[188.50660706 224.90353394]
[180.98692322 210.98359680]
[168.31411743 202.95863342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[16 87]
[17 86]
[18 85]
[19 84]
[20 83]
[21 82]
[22 81]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[38 44]
[39 43]
[55 80]
[56 79]
[58 77]
[59 76]
[61 74]
[62 73]
[64 71]
[65 70]
[88 127]
[89 126]
[91 124]
[92 123]
[94 121]
[95 120]
[97 118]
[98 117]
[99 116]
[100 115]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
