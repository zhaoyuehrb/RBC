%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:24:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACCGCCCAGAGGGAAGGAGGUCGGCAGUGUGAGGAGCUGCUAUGGUGCUGAGUUUCCUGGUAGAGCCGGCCGAGCUGAGGCGGUCGCGGCCAUGAAGGUGGGGGAGUGGUACUAAGGAUCAAGUAUACUGUUAAAAGAAAACAAAAACCCAAGC\
) } def
/len { sequence length } bind def

/coor [
[81.00155640 136.98274231]
[71.44841766 129.57530212]
[64.52777863 119.83128357]
[60.76770782 108.63086700]
[60.41516113 96.95838165]
[45.94562912 93.00457001]
[31.47609520 89.05076599]
[17.00656128 85.09695435]
[2.53702712 81.14315033]
[-11.93250656 77.18933868]
[-26.44039345 73.37866974]
[-40.98521805 69.71151733]
[-55.53004456 66.04435730]
[-61.02293396 73.74452972]
[-68.41592407 79.60655212]
[-77.12196350 83.18157959]
[-86.45430756 84.20172119]
[-95.68070221 82.60004425]
[-104.08084869 78.51484680]
[-111.00261688 72.27777863]
[-115.91269684 64.38697052]
[-118.43763733 55.46725845]
[-118.39226532 46.22071457]
[-132.40127563 40.85903168]
[-146.41029358 35.49734879]
[-160.41929626 30.13566780]
[-174.42831421 24.77398491]
[-188.43731689 19.41230202]
[-202.44633484 14.05062103]
[-216.73814392 20.24592972]
[-230.86889648 14.60885811]
[-236.68708801 0.94561917]
[-250.69610596 -4.41606283]
[-264.70510864 -9.77774525]
[-280.35922241 -7.48442602]
[-289.48001099 -19.25985909]
[-303.48901367 -24.62154198]
[-317.49801636 -29.98322296]
[-331.50701904 -35.34490585]
[-345.51605225 -40.70658875]
[-359.57733154 -45.92961121]
[-373.68954468 -51.01346970]
[-387.89944458 -55.81751633]
[-402.20147705 -60.33988190]
[-416.10873413 -52.83232117]
[-431.22717285 -57.43758774]
[-438.58728027 -71.42345428]
[-433.82241821 -86.49235535]
[-419.75952148 -93.70417786]
[-404.74185181 -88.78028107]
[-397.67910767 -74.64191437]
[-383.37707520 -70.11955261]
[-378.75866699 -71.51409912]
[-373.21575928 -69.98419952]
[-368.60568237 -65.12567902]
[-354.49346924 -60.04182053]
[-347.09527588 -60.73721695]
[-340.15435791 -54.71559906]
[-326.14535522 -49.35391617]
[-312.13632202 -43.99223328]
[-298.12731934 -38.63055038]
[-284.11831665 -33.26887131]
[-269.46621704 -35.94569397]
[-259.34344482 -23.78675461]
[-245.33442688 -18.42507362]
[-231.32540894 -13.06339073]
[-217.87155151 -19.35061264]
[-203.58804321 -14.11266804]
[-197.08464050 0.04161062]
[-183.07563782 5.40329266]
[-169.06661987 10.76497459]
[-155.05761719 16.12665749]
[-141.04859924 21.48833847]
[-127.03959656 26.85002136]
[-113.03058624 32.21170425]
[-96.56617737 19.32090950]
[-75.52773285 18.86600113]
[-58.30538559 31.18766975]
[-51.86288452 51.49953079]
[-37.31806183 55.16668701]
[-22.77323532 58.83384705]
[-15.47969437 57.41214752]
[-7.97869921 62.71980667]
[6.49083471 66.67361450]
[20.96036911 70.62742615]
[35.42990112 74.58123016]
[49.89943695 78.53504181]
[64.36897278 82.48884583]
[71.71751404 71.03486633]
[82.68769073 62.54267502]
[96.11998749 58.13327026]
[110.51770782 58.48388672]
[124.21358490 63.73064804]
[135.56282043 73.43264008]
[146.22167969 62.87855530]
[156.88055420 52.32447815]
[167.53941345 41.77039719]
[171.33770752 25.81718636]
[187.12794495 21.38993454]
[198.66647339 33.04302216]
[194.08345032 48.78874969]
[178.09349060 52.42926025]
[167.43463135 62.98334122]
[156.77575684 73.53742218]
[146.11689758 84.09149933]
[148.77024841 98.85495758]
[162.43702698 105.03712463]
[176.10380554 111.21929932]
[206.65699768 99.26341248]
[221.62113953 100.29990387]
[236.58529663 101.33639526]
[251.54943848 102.37288666]
[260.38073730 99.83425903]
[266.79806519 103.58055878]
[281.73880005 104.91249847]
[296.67956543 106.24443054]
[311.62030029 107.57637024]
[321.71783447 95.79418945]
[336.82003784 92.23013306]
[351.11987305 98.25465393]
[359.11871338 111.55120087]
[357.74084473 127.00698090]
[347.51611328 138.67892456]
[332.37612915 142.07894897]
[318.14248657 135.89965820]
[310.28836060 122.51712036]
[295.34762573 121.18518066]
[280.40686035 119.85324097]
[265.46612549 118.52130127]
[250.51295471 117.33702850]
[235.54879761 116.30053711]
[220.58465576 115.26404572]
[205.62051392 114.22755432]
[199.16952515 127.76952362]
[209.40312195 138.73646545]
[219.63670349 149.70339966]
[235.24201965 148.69921875]
[247.81115723 158.00247192]
[251.40937805 173.22045898]
[244.33769226 187.16769409]
[229.93515015 193.25872803]
[215.00218201 188.61755371]
[206.58967590 175.43560791]
[208.66976929 159.93698120]
[198.43618774 148.97004700]
[188.20259094 138.00311279]
[186.45407104 152.90084839]
[174.27574158 161.65803528]
[159.59635925 158.57325745]
[151.97300720 145.65487671]
[156.36891174 131.31346130]
[169.92164612 124.88607025]
[156.25486755 118.70390320]
[142.58808899 112.52173615]
[136.75837708 124.04056549]
[127.93896484 133.28016663]
[116.94200134 139.50431824]
[104.74783325 142.24913025]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 88]
[6 87]
[7 86]
[8 85]
[9 84]
[10 83]
[11 81]
[12 80]
[13 79]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[29 69]
[32 66]
[33 65]
[34 64]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 56]
[42 55]
[43 52]
[44 51]
[94 105]
[95 104]
[96 103]
[97 102]
[106 154]
[107 153]
[108 152]
[109 133]
[110 132]
[111 131]
[112 130]
[114 129]
[115 128]
[116 127]
[117 126]
[134 146]
[135 145]
[136 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
