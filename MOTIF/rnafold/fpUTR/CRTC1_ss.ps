%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCCGGCGCUUGCGCGGUGGCACGGGCGAGUGGGGGGGCGAGGAGGUGGAGGAGGAGGAGGAGGAGGAGGAGGUGGCGGCGAGAAG\
) } def
/len { sequence length } bind def

/coor [
[196.94641113 110.24776459]
[181.96743774 109.45391083]
[166.91374207 118.28516388]
[151.49499512 108.41011810]
[136.49732971 108.14539337]
[121.49966431 107.88066101]
[109.30052185 120.92464447]
[91.44373322 121.23983765]
[78.79185486 108.63450623]
[63.81287384 109.42835999]
[48.83389282 110.22221375]
[33.85491562 111.01606750]
[18.87593651 111.80991364]
[3.89695859 112.60376740]
[-11.08201981 113.39762115]
[-24.45336723 121.85443115]
[-37.57228851 114.80154419]
[-52.55126572 115.59539795]
[-62.93180466 127.51261139]
[-78.70421600 128.51583862]
[-90.51101685 118.00988770]
[-91.34743500 102.22774506]
[-80.71723938 90.53268433]
[-64.92713928 89.86316681]
[-53.34511948 100.61641693]
[-38.36613846 99.82256317]
[-26.06618881 91.42253876]
[-11.87587166 98.41864014]
[3.10310674 97.62478638]
[18.08208466 96.83094025]
[33.06106567 96.03708649]
[48.04004288 95.24323273]
[63.01902008 94.44937897]
[77.99800110 93.65553284]
[83.87820435 83.73875427]
[93.84526062 77.94417572]
[105.37252808 77.74069977]
[115.53786469 83.17992401]
[121.76438904 92.88300323]
[136.76205444 93.14772797]
[151.75971985 93.41245270]
[161.69493103 84.96115875]
[174.31742859 85.61959076]
[182.76129150 94.47492981]
[197.74026489 95.26878357]
[200.56930542 80.51377869]
[205.38121033 66.28144073]
[212.08633423 52.83692169]
[220.55975342 40.43067551]
[230.64361572 29.29382896]
[242.15007019 19.63385010]
[254.86476135 11.63070202]
[268.55081177 5.43347597]
[282.95327759 1.15762377]
[297.80383301 -1.11719859]
[312.82583618 -1.34861219]
[327.73941040 0.46769384]
[342.26672363 4.29788303]
[356.13717651 10.07060051]
[369.09237671 17.67830658]
[380.89093018 26.97927094]
[391.31304932 37.80022430]
[400.16458130 49.93957901]
[407.28063965 63.17118454]
[412.52865601 77.24854279]
[415.81085205 91.90940857]
[417.06610107 106.88065338]
[416.27099609 121.88336945]
[413.44033813 136.63807678]
[408.62689209 150.86988831]
[401.92031860 164.31367493]
[393.44555664 176.71900940]
[383.36050415 187.85476685]
[371.85299683 197.51350403]
[359.13742065 205.51527405]
[345.45071411 211.71101379]
[331.04779053 215.98530579]
[316.19699097 218.25852966]
[301.17495728 218.48831177]
[286.26159668 216.67039490]
[271.73468018 212.83862305]
[257.86483765 207.06440735]
[244.91049194 199.45530701]
[233.11294556 190.15306091]
[222.69198608 179.33097839]
[213.84176636 167.19067383]
[206.72712708 153.95829773]
[201.48063660 139.88035583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[4 41]
[5 40]
[6 39]
[9 34]
[10 33]
[11 32]
[12 31]
[13 30]
[14 29]
[15 28]
[17 26]
[18 25]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
