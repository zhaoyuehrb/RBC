%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUGUGUUCUCUAAAGAAUUUCUCAGGCUCAAAAUCCAAUACAGGAGUGACUUGGAACUCCAUUCUAUCACU\
) } def
/len { sequence length } bind def

/coor [
[70.10549164 310.60409546]
[56.59812546 317.31243896]
[41.84664536 320.45007324]
[26.77835083 319.81976318]
[12.34044361 315.46112061]
[-0.55949557 307.64816284]
[-11.11056614 296.87197876]
[-18.64951897 283.81002808]
[-22.70244980 269.28332520]
[-23.01458740 254.20509338]
[-19.56631088 239.52313232]
[-12.57438087 226.16035461]
[-2.47831678 214.95677185]
[10.08723450 206.61663818]
[24.33239174 201.66423035]
[39.36169434 200.41087341]
[54.23038101 202.93531799]
[60.33143234 189.23214722]
[66.43247986 175.52896118]
[72.53353119 161.82577515]
[78.63458252 148.12258911]
[83.56758118 133.95695496]
[87.29792786 119.42820740]
[91.02827454 104.89945984]
[89.81065369 96.66947937]
[95.23103333 89.84688568]
[99.56650543 75.48709869]
[103.90198517 61.12730408]
[108.23745728 46.76751328]
[107.73667145 37.34306717]
[113.06686401 31.90414047]
[117.99986267 17.73849487]
[122.93286133 3.57285023]
[117.48873901 -6.26943684]
[118.51197052 -17.24617195]
[125.39700317 -25.56834602]
[135.55879211 -28.50548363]
[141.65983582 -42.20866394]
[147.76087952 -55.91184616]
[141.86386108 -70.57474518]
[148.13903809 -85.07984161]
[162.86346436 -90.82151031]
[177.30140686 -84.39332581]
[182.88706970 -69.60901642]
[176.30661011 -55.23984909]
[161.46406555 -49.81079865]
[155.36302185 -36.10761642]
[149.26196289 -22.40443420]
[152.95797729 -3.60803199]
[137.09851074 8.50584984]
[132.16551208 22.67149544]
[127.23250580 36.83713913]
[122.59725189 51.10298920]
[118.26177979 65.46278381]
[113.92630005 79.82257080]
[109.59082031 94.18236542]
[105.55702209 108.62980652]
[101.82667542 123.15855408]
[98.09632874 137.68730164]
[99.68932343 142.47923279]
[99.48078156 147.01840210]
[97.82280731 150.70942688]
[95.24037170 153.16023254]
[92.33776093 154.22364807]
[86.23671722 167.92683411]
[80.13566589 181.63000488]
[74.03461456 195.33319092]
[67.93356323 209.03637695]
[79.75869751 218.39677429]
[88.88382721 230.40438843]
[94.73534393 244.30441284]
[96.94541931 259.22305298]
[95.37511444 274.22256470]
[90.12315369 288.36001587]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[22 59]
[23 58]
[24 57]
[26 56]
[27 55]
[28 54]
[29 53]
[31 52]
[32 51]
[33 50]
[37 48]
[38 47]
[39 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
