%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:53:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCACUAUAAAUAGCAGCCACCUCUCCCUGGCAGACAGGGACCCGCAGCUCAGCUACAGCACAGAUCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[66.64624786 148.57444763]
[55.67121887 138.81892395]
[43.22046661 147.18426514]
[30.76971245 155.54959106]
[18.31895828 163.91491699]
[14.98959923 176.56669617]
[4.21134949 183.24182129]
[-7.80597734 180.74870300]
[-20.58757973 188.59922791]
[-33.36917877 196.44975281]
[-40.69944382 211.11941528]
[-57.08293533 211.83584595]
[-65.66572571 197.86201477]
[-57.61857224 183.57301331]
[-41.21969986 183.66815186]
[-28.43809891 175.81762695]
[-15.65649700 167.96710205]
[-8.31444359 152.16268921]
[9.95362854 151.46415710]
[22.40438271 143.09883118]
[34.85513687 134.73350525]
[47.30588913 126.36817169]
[42.02991486 110.55551910]
[41.39354706 93.89806366]
[45.44771957 77.72897339]
[53.86795807 63.34233093]
[65.98035431 51.88956833]
[80.81549835 44.28730011]
[77.77667999 29.59833908]
[74.73786926 14.90937614]
[71.69905853 0.22041397]
[68.66024017 -14.46854877]
[65.62142944 -29.15751076]
[53.05795288 -39.13441086]
[53.16909409 -55.17707825]
[65.86959839 -64.97895050]
[81.41672516 -61.02087402]
[87.88404846 -46.33914185]
[80.31039429 -32.19632339]
[83.34920502 -17.50736046]
[86.38801575 -2.81839895]
[89.42683411 11.87056351]
[92.46564484 26.55952644]
[95.50445557 41.24848938]
[111.49913788 42.20969009]
[126.64344025 47.44453430]
[139.81744385 56.56589508]
[150.04690552 68.89924622]
[163.69139099 62.66802216]
[168.97889709 47.77447510]
[183.28477478 41.05751038]
[198.12158203 46.50218582]
[204.68692017 60.87827301]
[199.08569336 75.65669250]
[184.64099121 82.06967163]
[169.92262268 76.31250000]
[156.27813721 82.54373169]
[158.58613586 93.70598602]
[158.70179749 105.10377502]
[156.62080383 116.31056976]
[152.42102051 126.90701294]
[146.25959778 136.49658203]
[156.75746155 147.21081543]
[172.08717346 144.80673218]
[185.88688660 151.90231323]
[192.85034180 165.76918030]
[190.29994202 181.07522583]
[179.21636963 191.93496704]
[163.86148071 194.17262268]
[150.13954163 186.92774963]
[143.32693481 172.98616028]
[146.04322815 157.70867920]
[135.54534912 146.99444580]
[122.82155609 154.32427979]
[108.68045044 158.28034973]
[94.00025940 158.61700439]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[8 17]
[9 16]
[10 15]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[48 57]
[49 56]
[62 73]
[63 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
