%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGUCCGUCCUGCCGCUUGGCCGCGGGGCGCCUGGCUCAGUGGCUUCUGCGGGCUUCGAGGAGCGGG\
) } def
/len { sequence length } bind def

/coor [
[170.53724670 367.71536255]
[176.20576477 353.58074951]
[187.13780212 342.97836304]
[181.93826294 328.90838623]
[176.73872375 314.83837891]
[171.53918457 300.76837158]
[166.33964539 286.69839478]
[161.14010620 272.62838745]
[155.94056702 258.55838013]
[150.74102783 244.48840332]
[145.54150391 230.41839600]
[129.73339844 226.58163452]
[119.13287354 214.02726746]
[117.97640228 197.47227478]
[126.90331268 183.28813171]
[121.08650208 169.46189880]
[115.26968384 155.63566589]
[109.45287323 141.80943298]
[103.63606262 127.98320007]
[97.81925201 114.15696716]
[86.79692078 105.55464935]
[88.35452271 91.65984344]
[82.53770447 77.83361053]
[76.72089386 64.00737762]
[70.90408325 50.18114853]
[65.08727264 36.35491562]
[58.67597198 29.39288330]
[59.33398056 21.78611565]
[54.13444138 7.71611881]
[41.18140030 -2.34125471]
[43.68257523 -18.54854202]
[59.06497192 -24.23307610]
[71.50450134 -13.54709435]
[68.20443726 2.51658010]
[73.40397644 16.58657646]
[78.91349792 30.53810501]
[84.73031616 44.36433792]
[90.54712677 58.19056702]
[96.36393738 72.01679993]
[102.18074799 85.84303284]
[113.20307922 94.44535065]
[111.64547729 108.34015656]
[117.46229553 122.16638947]
[123.27910614 135.99261475]
[129.09591675 149.81884766]
[134.91273499 163.64508057]
[140.72953796 177.47131348]
[154.51976013 179.66795349]
[165.28556824 188.38873291]
[170.21879578 201.21841431]
[168.10302734 214.68942261]
[159.61149597 225.21885681]
[164.81103516 239.28886414]
[170.01057434 253.35885620]
[175.21011353 267.42886353]
[180.40965271 281.49884033]
[185.60919189 295.56884766]
[190.80873108 309.63882446]
[196.00827026 323.70883179]
[201.20780945 337.77883911]
[216.40733337 338.72433472]
[229.90522766 345.77606201]
[239.36289978 357.71224976]
[243.14172363 372.46487427]
[240.58700562 387.47799683]
[232.14138794 400.15045166]
[219.26809692 408.28668213]
[204.19752502 410.47705078]
[189.54072571 406.34204102]
[177.83709717 396.59805298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[20 42]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[28 35]
[29 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
