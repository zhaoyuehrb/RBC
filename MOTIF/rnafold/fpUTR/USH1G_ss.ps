%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGUUUCAGAUGUCUUGGUAGUCGCGGCUCUGGCGCUCCGCACCCUCCGUCUGCGGCAGCGGGGGCUGGCGGCCCCGGCCCCUGCCCGGCCCCGUCCUCCAACCUCAUGCCUCAGCCCUAAUACCGCCGCCCUCCCCUGCGGGGGGCCUUUCUCCGUGUCCCCCGCCCGCCCCGUCCACUUCGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[98.81167603 148.17318726]
[94.85881805 147.91281128]
[90.95668030 162.39636230]
[87.05453491 176.87991333]
[83.15239716 191.36346436]
[79.25025177 205.84701538]
[80.96797943 222.71371460]
[65.23594666 229.03349304]
[54.80809784 215.66575623]
[64.76670074 201.94487000]
[68.66883850 187.46131897]
[72.57098389 172.97776794]
[76.47312164 158.49421692]
[80.37526703 144.01066589]
[59.01335144 125.34094238]
[51.85848236 97.88738251]
[61.39073181 71.16611481]
[50.91577530 60.42947769]
[40.44082260 49.69284058]
[29.96586800 38.95620728]
[19.49091530 28.21957016]
[6.12414742 32.37305832]
[-7.66182566 30.36805344]
[-19.18169975 22.65277481]
[-26.21646309 10.78206062]
[-27.44074631 -2.89567089]
[-22.67218590 -15.70294571]
[-32.96913528 -26.61041451]
[-43.26608276 -37.51788330]
[-53.56303024 -48.42535019]
[-69.12763977 -49.04225540]
[-79.41483307 -60.25066376]
[-78.73078918 -75.08534241]
[-89.02773285 -85.99281311]
[-99.32468414 -96.90028381]
[-113.02451324 -103.00884247]
[-128.01994324 -103.37889099]
[-143.01538086 -103.74893188]
[-158.01335144 -103.99564362]
[-173.01284790 -104.11900330]
[-188.01234436 -104.24236298]
[-203.01184082 -104.36572266]
[-218.01132202 -104.48908234]
[-226.37220764 -91.52377319]
[-240.42485046 -85.15770721]
[-255.68510437 -87.42226410]
[-267.28347778 -97.59484100]
[-271.51898193 -112.42939758]
[-267.04006958 -127.19228363]
[-255.27593994 -137.17271423]
[-239.98051453 -139.18597412]
[-226.03446960 -132.58964539]
[-217.88796997 -119.48857117]
[-202.88847351 -119.36521149]
[-187.88897705 -119.24185944]
[-172.88949585 -119.11849976]
[-157.88999939 -118.99514008]
[-151.16404724 -122.08923340]
[-142.64533997 -118.74436951]
[-127.64990234 -118.37432098]
[-112.65447235 -118.00428009]
[-104.59208679 -130.65330505]
[-111.25866699 -144.09043884]
[-117.92524719 -157.52758789]
[-124.59182739 -170.96472168]
[-131.25840759 -184.40185547]
[-144.32289124 -193.32542419]
[-143.04823303 -208.16539001]
[-149.71481323 -221.60252380]
[-156.38139343 -235.03967285]
[-163.01016235 -241.34967041]
[-163.04507446 -248.75308228]
[-169.48974609 -262.29806519]
[-175.93441772 -275.84301758]
[-182.37908936 -289.38800049]
[-194.25917053 -294.43911743]
[-199.34403992 -305.86718750]
[-195.40274048 -317.31494141]
[-201.62376404 -330.96408081]
[-207.84478760 -344.61322021]
[-221.50294495 -353.68994141]
[-220.20144653 -370.03735352]
[-205.27917480 -376.83865356]
[-192.08686829 -367.09722900]
[-194.19564819 -350.83422852]
[-187.97462463 -337.18508911]
[-181.75360107 -323.53594971]
[-166.93971252 -314.14120483]
[-168.83412170 -295.83267212]
[-162.38945007 -282.28768921]
[-155.94477844 -268.74273682]
[-149.50010681 -255.19775391]
[-142.94425964 -241.70625305]
[-136.27767944 -228.26911926]
[-129.61109924 -214.83197021]
[-117.02346039 -206.86952209]
[-117.82127380 -191.06845093]
[-111.15469360 -177.63130188]
[-104.48810577 -164.19416809]
[-97.82152557 -150.75703430]
[-91.15494537 -137.31988525]
[-80.50573730 -147.88371277]
[-65.85427856 -151.09846497]
[-51.76054001 -145.96362305]
[-42.61093140 -134.07730103]
[-41.25308228 -119.13888550]
[-48.10960007 -105.79766846]
[-61.04652786 -98.20583344]
[-76.03749847 -98.72620392]
[-88.41721344 -107.19722748]
[-78.12026215 -96.28975677]
[-67.82331848 -85.38229370]
[-52.97385788 -85.21166229]
[-42.37590790 -74.29662323]
[-42.65555954 -58.72229767]
[-32.35861206 -47.81483078]
[-22.06166458 -36.90736008]
[-11.76471806 -25.99989319]
[3.85334730 -30.11518478]
[19.50709152 -25.77239037]
[30.90353394 -14.06434727]
[34.86788177 1.88294923]
[30.22755051 17.74461555]
[40.70250320 28.48125076]
[51.17745972 39.21788788]
[61.65241241 49.95452118]
[72.12736511 60.69115829]
[79.71087646 56.29164505]
[87.96600342 53.33897018]
[96.61947632 51.93087387]
[105.38485718 52.11396790]
[113.97198486 53.88219070]
[122.09661102 57.17700958]
[129.48979187 61.88935852]
[135.90679932 67.86325073]
[141.13522339 74.90093994]
[145.00196838 82.76946259]
[147.37905884 91.20834351]
[148.18780518 99.93825531]
[147.40144348 108.67021179]
[161.55677795 113.63271332]
[175.71211243 118.59521484]
[189.86744690 123.55771637]
[204.02278137 128.52021790]
[218.17813110 133.48272705]
[232.33346558 138.44522095]
[246.48880005 143.40773010]
[260.64413452 148.37022400]
[272.23916626 138.29794312]
[287.31994629 135.38835144]
[301.82980347 140.42413330]
[311.86572266 152.05067444]
[314.72799683 167.14050293]
[309.64675903 181.63452148]
[297.98883057 191.63392639]
[282.89010620 194.44891357]
[268.41207886 189.32226562]
[258.44927979 177.63304138]
[255.68164062 162.52555847]
[241.52629089 157.56306458]
[227.37095642 152.60055542]
[213.21562195 147.63806152]
[199.06028748 142.67555237]
[184.90495300 137.71305847]
[170.74960327 132.75054932]
[156.59426880 127.78804779]
[142.43893433 122.82554626]
[137.63926697 130.08911133]
[131.61097717 136.37051392]
[124.55086517 141.46473694]
[130.09107971 155.40409851]
[135.74574280 169.29743958]
[141.51448059 183.14379883]
[147.28320312 196.99015808]
[153.05194092 210.83651733]
[168.02845764 215.33517456]
[176.56619263 228.43637085]
[174.63388062 243.95410156]
[163.14390564 254.56138611]
[147.52148438 255.24978638]
[135.14303589 245.69425964]
[131.85330200 230.40663147]
[139.20558167 216.60525513]
[133.43684387 202.75889587]
[127.66811371 188.91253662]
[121.89938354 175.06616211]
[116.41548157 170.09237671]
[116.15171051 160.94432068]
[110.61149597 147.00494385]
[106.71472168 147.71772766]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[6 10]
[17 127]
[18 126]
[19 125]
[20 124]
[21 123]
[27 118]
[28 117]
[29 116]
[30 115]
[33 112]
[34 111]
[35 110]
[36 61]
[37 60]
[38 59]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[62 101]
[63 100]
[64 99]
[65 98]
[66 97]
[68 95]
[69 94]
[70 93]
[72 92]
[73 91]
[74 90]
[75 89]
[78 87]
[79 86]
[80 85]
[140 167]
[141 166]
[142 165]
[143 164]
[144 163]
[145 162]
[146 161]
[147 160]
[148 159]
[170 189]
[171 188]
[172 186]
[173 185]
[174 184]
[175 183]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
