%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAACUUCCUUUCCCGGCGUGCACCGCGAAUCCCUCCUCCUCUUCUUUACCUCUCUCCCUCCUCCUCAGGUUCUCUAUCGACGAGUCUGGUAGCUGAGCGUUGGGCUGUAGGUCGCUGUGCUGUGUGAUCCCCCAGAGCC\
) } def
/len { sequence length } bind def

/coor [
[140.14825439 320.05102539]
[125.26706696 321.93530273]
[110.47671509 319.43621826]
[97.04075623 312.76724243]
[86.10705566 302.49816895]
[78.60971069 289.50625610]
[75.18921661 274.90145874]
[76.13780975 259.93145752]
[81.37444305 245.87524414]
[90.45173645 233.93360901]
[102.59420776 225.12677002]
[116.76449585 220.20710754]
[131.75199890 219.59492493]
[146.27630615 223.34252930]
[159.09689331 231.13002014]
[152.41949463 217.69824219]
[145.74209595 204.26647949]
[139.06469727 190.83471680]
[132.38729858 177.40295410]
[125.70990753 163.97117615]
[119.03250885 150.53941345]
[112.35511017 137.10765076]
[105.23879242 123.90318298]
[97.69127655 110.94034576]
[90.00183105 98.06120300]
[82.17137909 85.26729584]
[74.34092712 72.47338867]
[66.51047516 59.67948532]
[59.30450821 53.93787384]
[58.65209579 46.51740265]
[51.10458374 33.55456924]
[47.09783173 31.46318245]
[44.29136658 28.47998428]
[42.81959534 25.10847092]
[42.63362885 21.84260750]
[43.52135849 19.10593987]
[37.14063263 5.53072929]
[30.75990677 -8.04448128]
[17.88720131 -17.24252510]
[19.47561836 -32.05219269]
[13.09489250 -45.62740326]
[-1.19273877 -43.56200409]
[-15.46599770 -45.61528778]
[-28.56307030 -51.61101151]
[-39.42045593 -61.05239868]
[-47.15933228 -73.16328430]
[-51.15666199 -86.95192719]
[-51.09537888 -101.29221344]
[-46.98948669 -115.01562500]
[-39.18220901 -127.00643921]
[-28.31729126 -136.29249573]
[-34.39826202 -150.00459290]
[-40.47923660 -163.71669006]
[-46.56021118 -177.42880249]
[-61.71919250 -176.67404175]
[-76.12594604 -181.45002747]
[-87.83206177 -191.11083984]
[-95.25439453 -204.34991455]
[-97.38913727 -219.37681580]
[-93.94757080 -234.15924072]
[-85.39514923 -246.69799805]
[-72.88851929 -255.29733276]
[-58.11908722 -258.79425049]
[-43.08430862 -256.71582031]
[-29.81751251 -249.34312439]
[-20.11292076 -237.67327881]
[-15.28299999 -223.28453064]
[-15.98095894 -208.12281799]
[-22.11240387 -194.23866272]
[-32.84810638 -183.50976562]
[-26.76713371 -169.79766846]
[-20.68616104 -156.08557129]
[-14.60518742 -142.37345886]
[0.92044932 -144.15432739]
[16.25792694 -141.05839539]
[29.91088676 -133.37550354]
[40.54355621 -121.84364319]
[47.11144257 -107.57799530]
[48.96392822 -91.96314240]
[45.90869904 -76.51870728]
[38.23163223 -62.75141144]
[26.67010307 -52.00812531]
[33.05082703 -38.43291473]
[45.46714401 -30.20586205]
[44.33511734 -14.42520714]
[50.71584320 -0.84999609]
[57.09656906 12.72521496]
[64.06741333 26.00705528]
[71.61492920 38.96988678]
[79.30437469 51.84903336]
[87.13482666 64.64293671]
[94.96528625 77.43684387]
[102.79573822 90.23075104]
[109.40620422 94.96004486]
[110.65411377 103.39282990]
[118.20162201 116.35566711]
[122.87180328 119.01757050]
[125.71897888 122.84472656]
[126.60608673 126.92547607]
[125.78688049 130.43025208]
[132.46427917 143.86201477]
[139.14167786 157.29377747]
[145.81907654 170.72555542]
[152.49647522 184.15731812]
[159.17387390 197.58908081]
[165.85127258 211.02085876]
[172.52865601 224.45262146]
[181.84416199 236.20938110]
[193.39344788 245.78089905]
[204.94274902 255.35241699]
[220.46655273 254.06817627]
[232.04281616 263.93957520]
[233.17147827 278.74707031]
[244.72076416 288.31857300]
[256.37451172 297.76263428]
[268.13125610 307.07815552]
[279.88803101 316.39364624]
[291.64480591 325.70913696]
[306.55285645 321.40454102]
[321.13241577 326.71646118]
[329.77731323 339.60229492]
[329.16345215 355.10723877]
[319.52682495 367.26928711]
[304.57293701 371.41189575]
[290.05187988 365.94213867]
[281.54727173 352.96325684]
[282.32931519 337.46591187]
[270.57254028 328.15039062]
[258.81576538 318.83489990]
[247.05900574 309.51940918]
[239.80691528 307.81759644]
[235.14926147 299.86785889]
[223.59996033 290.29635620]
[208.84036255 291.93640137]
[196.99139404 282.39404297]
[195.37123108 266.90170288]
[183.82194519 257.33020020]
[172.27264404 247.75868225]
[176.92253113 262.01977539]
[177.25021362 277.01617432]
[173.22769165 291.46676636]
[165.19860840 304.13696289]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[20 102]
[21 101]
[22 100]
[23 96]
[24 95]
[25 93]
[26 92]
[27 91]
[28 90]
[30 89]
[31 88]
[36 87]
[37 86]
[38 85]
[40 83]
[41 82]
[51 73]
[52 72]
[53 71]
[54 70]
[108 138]
[109 137]
[110 136]
[113 133]
[114 132]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
