%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:22:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCGCUCCGCCUCCGGCCUCCUCCGAGAGCUCCAGACCUCCCGGCUACUCAGAAGCCCUCGGACUGCCCGGACCGCGCG\
) } def
/len { sequence length } bind def

/coor [
[56.30080414 416.30709839]
[42.82088089 423.55624390]
[27.51604080 423.69903564]
[13.90321636 416.70263672]
[5.11053801 404.17477417]
[3.15849805 388.99426270]
[8.49566174 374.64944458]
[19.89558792 364.43670654]
[34.73865509 360.70281982]
[38.19789124 346.10714722]
[41.65713120 331.51147461]
[35.64874268 315.14315796]
[48.07425690 301.71929932]
[50.96493912 287.00045776]
[53.85562515 272.28161621]
[56.74630737 257.56280518]
[59.63699341 242.84396362]
[48.68316650 234.45738220]
[42.43158340 222.08468628]
[42.17601013 208.15797424]
[48.02516556 195.44306946]
[58.86959457 186.49038696]
[72.59165192 183.12330627]
[76.05088806 168.52761841]
[79.51013184 153.93194580]
[82.96936798 139.33627319]
[86.42860413 124.74060822]
[89.88784027 110.14493561]
[86.06215668 96.69667053]
[95.51648712 86.39582825]
[98.97572327 71.80015564]
[102.43495941 57.20448303]
[92.49642944 45.43453217]
[91.40682983 30.24683380]
[99.37497711 17.48076439]
[113.16731262 11.92112637]
[116.62654877 -2.67454624]
[118.94433594 -17.49439430]
[120.10671997 -32.44928741]
[112.54805756 -47.00259399]
[121.59912872 -60.67776108]
[137.94895935 -59.40695190]
[144.77825928 -44.49746323]
[135.06161499 -31.28690147]
[133.89923096 -16.33200836]
[135.90457153 -14.02447987]
[136.98753357 -10.68163109]
[136.70628357 -6.70441341]
[134.79502869 -2.66177106]
[131.22222900 0.78469175]
[127.76298523 15.38036442]
[137.59310913 26.53862572]
[138.98429871 41.52290344]
[131.19438171 54.60611343]
[117.03063202 60.66371918]
[113.57139587 75.25939178]
[110.11215973 89.85506439]
[113.93784332 103.30332947]
[104.48351288 113.60417175]
[101.02427673 128.19984436]
[97.56504059 142.79551697]
[94.10580444 157.39118958]
[90.64656067 171.98686218]
[87.18732452 186.58253479]
[99.26684570 197.68952942]
[104.14208984 213.26094055]
[100.59407806 229.09201050]
[89.66530609 240.95643616]
[74.35581970 245.73464966]
[71.46514130 260.45349121]
[68.57445526 275.17230225]
[65.68376923 289.89114380]
[62.79308701 304.60998535]
[69.37905121 315.89730835]
[66.49123383 328.22750854]
[56.25280380 334.97070312]
[52.79356766 349.56637573]
[49.33432770 364.16204834]
[60.92281342 374.16033936]
[66.52668762 388.40304565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 78]
[10 77]
[11 76]
[13 73]
[14 72]
[15 71]
[16 70]
[17 69]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[30 57]
[31 56]
[32 55]
[36 51]
[37 50]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
