%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACUAAAGACAAACCUGGCGGGUCCCCCGGAGCGGUCCCAGGCGCGCGCGCUCGGGAGCCCACGGGCCACACCCGCCUCCUAGCAACCGGAGCUCAGGUUCAGCCUAGAGAGAGAGGAGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[112.78967285 157.59457397]
[104.70494843 158.80964661]
[96.52987671 158.89540100]
[88.42144012 157.85021973]
[80.53533936 155.69413757]
[73.02301788 152.46859741]
[66.02873230 148.23550415]
[59.68677902 143.07615662]
[54.11895370 137.08963013]
[49.43217087 130.39086914]
[45.71643066 123.10853577]
[43.04307938 115.38245392]
[41.46345901 107.36098480]
[41.00790024 99.19816589]
[41.68515396 91.05074310]
[43.48220825 83.07517242]
[46.36456299 75.42459869]
[50.27685928 68.24594116]
[55.14398193 61.67705536]
[45.07059860 50.56278610]
[34.99721146 39.44852066]
[24.92382812 28.33425331]
[14.85044384 17.21998596]
[4.77705956 6.10571957]
[-5.29632473 -5.00854731]
[-24.15784836 -5.14575958]
[-36.79511261 -18.71913147]
[-35.62677383 -36.91070557]
[-46.23337555 -47.51730728]
[-56.83997726 -58.12390900]
[-67.44657898 -68.73050690]
[-79.23331451 -66.40454865]
[-90.54862213 -70.06776428]
[-98.57158661 -78.68370819]
[-101.36222839 -89.99700928]
[-98.32972717 -101.12300873]
[-108.40311432 -112.23727417]
[-118.61212921 -123.22708893]
[-128.95523071 -134.09078979]
[-139.29833984 -144.95449829]
[-149.64144897 -155.81820679]
[-164.76095581 -160.47775269]
[-167.93319702 -175.03062439]
[-178.27630615 -185.89433289]
[-188.61941528 -196.75804138]
[-198.96252441 -207.62174988]
[-214.83821106 -211.73205566]
[-218.95507812 -227.60603333]
[-207.07804871 -238.91390991]
[-191.42518616 -234.02310181]
[-188.09881592 -217.96485901]
[-177.75570679 -207.10115051]
[-167.41259766 -196.23744202]
[-157.06948853 -185.37373352]
[-142.68980408 -181.49122620]
[-138.77774048 -166.16131592]
[-128.43464661 -155.29760742]
[-118.09152985 -144.43389893]
[-107.74842072 -133.57019043]
[-100.78433228 -130.86674500]
[-97.28884888 -122.31066132]
[-87.21546173 -111.19638824]
[-68.98847198 -111.47070312]
[-56.05153275 -98.18264771]
[-56.83997726 -79.33711243]
[-46.23337555 -68.73050690]
[-35.62677383 -58.12390900]
[-25.02017403 -47.51730728]
[-13.75878239 -50.00022507]
[-2.59603667 -46.65782547]
[5.61585855 -38.22175980]
[8.71944618 -26.74034119]
[5.81794214 -15.08193207]
[15.89132690 -3.96766472]
[25.96471024 7.14660215]
[36.03809357 18.26086807]
[46.11148071 29.37513542]
[56.18486404 40.48940277]
[66.25824738 51.60366821]
[88.20014954 42.19451523]
[112.07431793 42.25122070]
[133.97126770 51.76449966]
[150.30531311 69.17652130]
[158.40165710 91.63600159]
[156.93452454 115.46511078]
[170.79272461 121.20536804]
[185.24755859 115.40057373]
[199.21995544 121.41941833]
[204.66487122 135.23567200]
[218.52305603 140.97592163]
[231.48651123 130.79330444]
[247.71899414 128.51988220]
[262.80786133 134.67872620]
[272.69891357 147.51350403]
[274.78582764 163.48809814]
[288.78073120 168.88652039]
[302.77560425 174.28494263]
[316.83569336 179.51121521]
[330.95886230 184.56457520]
[345.08203125 189.61791992]
[359.20516968 194.67126465]
[376.15536499 194.31440735]
[381.19055176 210.50340271]
[367.02813721 219.82336426]
[354.15182495 208.79443359]
[340.02868652 203.74107361]
[325.90551758 198.68772888]
[311.78234863 193.63438416]
[304.34634399 194.35072327]
[297.37719727 188.27983093]
[283.38229370 182.88140869]
[269.38742065 177.48298645]
[259.29998779 186.77270508]
[246.12431335 190.80764771]
[232.43354797 188.73977661]
[220.92752075 180.91883850]
[213.90028381 168.83476257]
[212.78280640 154.83410645]
[198.92460632 149.09385681]
[185.30493164 155.01329041]
[171.16897583 149.38928223]
[165.05247498 135.06355286]
[151.19427490 129.32330322]
[146.64906311 136.11891174]
[141.20805359 142.22093201]
[134.97573853 147.51219177]
[128.07180786 151.89108276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 79]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[28 68]
[29 67]
[30 66]
[31 65]
[36 62]
[37 61]
[38 59]
[39 58]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[46 51]
[85 123]
[86 122]
[89 119]
[90 118]
[95 112]
[96 111]
[97 110]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
