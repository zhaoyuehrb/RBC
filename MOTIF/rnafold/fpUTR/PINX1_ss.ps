%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:32:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACGUCACCAGCACGCGCCCCGUCCGCUGCAGUCCGCCGGCGAGGGAGUUACGCACGUCCUGAUUCUCCUGGAGUCUCCAGCCCGCCCAGUGGCCGCAGUCACCCAGGUCCAGAGGCGGCGGUAUCACAGGCUCUCCGAC\
) } def
/len { sequence length } bind def

/coor [
[104.09859467 137.42398071]
[87.43107605 135.48768616]
[73.26036072 126.50179291]
[64.40143585 112.25135803]
[49.52976608 114.20925140]
[34.65809250 116.16714478]
[19.78641891 118.12503815]
[4.91474628 120.08293152]
[14.71840191 131.43582153]
[12.17506790 146.21864319]
[-0.85904568 153.64237976]
[-14.87121391 148.28895569]
[-19.63489532 134.06547546]
[-11.67221546 121.35194397]
[-26.66864586 121.67916870]
[-38.49195099 134.52290344]
[-55.60874939 134.87309265]
[-67.47120667 122.99993134]
[-82.45693207 123.65422058]
[-95.90647125 131.98611450]
[-108.95912933 124.81133270]
[-123.94485474 125.46562195]
[-138.93057251 126.11991119]
[-153.90826416 126.93762970]
[-168.87615967 127.91867828]
[-183.84403992 128.89971924]
[-198.81192017 129.88076782]
[-212.07650757 138.50407410]
[-225.28256226 131.61575317]
[-240.25045776 132.59680176]
[-248.41638184 145.79138184]
[-262.79107666 151.63504028]
[-277.84713745 147.88075256]
[-287.79519653 135.97213745]
[-288.81008911 120.48828125]
[-280.50149536 107.38305664]
[-266.06427002 101.69568634]
[-251.04981995 105.61307526]
[-241.23150635 117.62891388]
[-226.26361084 116.64786530]
[-214.06964111 108.09472656]
[-199.79296875 114.91288757]
[-184.82508850 113.93183899]
[-169.85720825 112.95079041]
[-154.88931274 111.96974945]
[-148.37120056 108.36636353]
[-139.58486938 111.13418579]
[-124.59914398 110.47989655]
[-109.61341858 109.82560730]
[-97.23575592 101.54051208]
[-83.11122131 108.66849518]
[-68.12550354 108.01420593]
[-60.80169678 97.35943604]
[-48.48654556 92.82279968]
[-35.62419510 96.28138733]
[-26.99586868 106.68273926]
[-11.99943829 106.35551453]
[2.95685339 105.21125793]
[17.82852554 103.25336456]
[32.70019913 101.29547119]
[47.57187271 99.33757782]
[62.44354630 97.37968445]
[65.58859253 84.72882843]
[72.85944366 73.90893555]
[83.38434601 66.21726227]
[95.90140533 62.57601166]
[108.90987396 63.42176056]
[120.85007477 68.65310669]
[130.29043579 77.64282990]
[136.09907532 89.31308746]
[151.04199219 88.00575256]
[161.18322754 76.18234253]
[176.35610962 75.06938934]
[187.56542969 84.81037140]
[202.50834656 83.50303650]
[217.45126343 82.19569397]
[232.39418030 80.88835907]
[247.33711243 79.58102417]
[262.28002930 78.27368927]
[277.22293091 76.96635437]
[292.04837036 74.68450165]
[306.69281006 71.43790436]
[314.46337891 66.49032593]
[321.69201660 68.28391266]
[336.40380859 65.35755920]
[351.11560059 62.43120193]
[358.99224854 57.65430832]
[366.18005371 59.60515976]
[380.95214844 57.00043869]
[395.72427368 54.39571381]
[402.15762329 42.51092529]
[414.09808350 36.60947037]
[427.06164551 38.65636826]
[436.32336426 47.67760468]
[451.14880371 45.39575577]
[465.97421265 43.11390305]
[480.77386475 40.67047119]
[495.54598999 38.06575012]
[500.13659668 23.46489906]
[510.99493408 12.67807961]
[525.62579346 8.18402195]
[540.66711426 11.01542759]
[552.66253662 20.52166176]
[558.85559082 34.51825714]
[557.82312012 49.78890610]
[549.80242920 62.82451630]
[536.63659668 70.62960815]
[521.35107422 71.41062164]
[507.45825195 64.98809052]
[498.15069580 52.83786392]
[483.37860107 55.44258881]
[477.29150391 59.73416138]
[468.25607300 57.93932724]
[453.43063354 60.22117615]
[438.60522461 62.50302887]
[429.28704834 76.46229553]
[412.43081665 79.45816040]
[398.32901001 69.16783142]
[383.55688477 71.77255249]
[368.78475952 74.37727356]
[354.04193115 77.14298248]
[339.33016968 80.06933594]
[324.61837769 82.99568939]
[309.93939209 86.08234406]
[295.29495239 89.32894135]
[307.02410889 98.67918396]
[308.90628052 113.56063080]
[299.87445068 125.53668976]
[285.04895020 127.81790161]
[272.83462524 119.11100006]
[270.15600586 104.35209656]
[278.53027344 91.90927124]
[263.58737183 93.21660614]
[248.64443970 94.52394867]
[233.70152283 95.83128357]
[218.75860596 97.13861847]
[203.81567383 98.44595337]
[188.87275696 99.75328827]
[179.52523804 111.29276276]
[164.38961792 112.83145905]
[152.34933472 102.94867706]
[137.40641785 104.25601196]
[131.84184265 120.08607483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[14 57]
[15 56]
[18 52]
[19 51]
[21 49]
[22 48]
[23 47]
[24 45]
[25 44]
[26 43]
[27 42]
[29 40]
[30 39]
[70 142]
[71 141]
[74 138]
[75 137]
[76 136]
[77 135]
[78 134]
[79 133]
[80 132]
[81 125]
[82 124]
[84 123]
[85 122]
[86 121]
[88 120]
[89 119]
[90 118]
[94 115]
[95 114]
[96 113]
[97 111]
[98 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
