%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGUUAAAGCUACCGGGACGGGUCCCGGCAUCUCUAAAUCACCGCUCCCUGGCCUCUUCGGCCUCCGUCCGCCGCGGCCCAGGGGCCGGGCUUCUCAGCUGCUGACCUACUGCCACCGACUGCGCUCUCUCCCGUGGGUCGGCUUUUUGCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[111.71339417 257.10748291]
[98.58578491 246.37890625]
[105.26100159 230.79435730]
[105.86114502 215.80636597]
[106.46129608 200.81838989]
[98.83920288 193.91061401]
[96.25262451 183.72711182]
[99.79979706 173.60343933]
[108.52772522 166.99516296]
[109.72705078 152.04318237]
[110.92637634 137.09120178]
[104.24042511 133.69296265]
[90.86852264 126.89648438]
[84.18256378 123.49824524]
[72.81066132 133.27984619]
[61.43875504 143.06144714]
[50.06684875 152.84304810]
[38.69494247 162.62464905]
[27.32303619 172.40625000]
[22.41668320 188.05424500]
[6.35513926 191.36466980]
[-4.33885670 178.93202209]
[1.33576155 163.54597473]
[17.54143333 161.03434753]
[28.91333961 151.25274658]
[40.28524780 141.47114563]
[51.65715408 131.68954468]
[63.02906036 121.90794373]
[74.40096283 112.12633514]
[59.73162842 115.25852203]
[47.74215317 124.27253723]
[33.06328201 127.35973358]
[18.45856094 123.93889618]
[6.67756891 114.65406036]
[-0.06172668 101.25324249]
[-0.49054107 86.25937653]
[5.47185707 72.49529266]
[16.70294762 62.55233002]
[31.08828926 58.30239868]
[45.91960526 60.54562378]
[58.40465164 68.85968781]
[66.19292450 81.67934418]
[78.65242004 90.03165436]
[71.72249603 76.72841644]
[64.79256439 63.42517853]
[51.55487823 54.76064301]
[52.53701782 39.89845276]
[45.60709000 26.59521675]
[38.67716217 13.29197884]
[31.74723625 -0.01125785]
[24.81731033 -13.31449509]
[17.88738251 -26.61773109]
[10.95745659 -39.92097092]
[3.89477897 -53.15420532]
[-3.29994226 -66.31612396]
[-12.71897411 -67.75717163]
[-20.28702545 -73.31648254]
[-24.35713387 -81.62552643]
[-24.11764908 -90.73659515]
[-19.75093842 -98.57891083]
[-26.14305878 -112.14875793]
[-32.53517914 -125.71860504]
[-38.92729950 -139.28845215]
[-54.19529343 -142.05757141]
[-64.89536285 -153.29536438]
[-66.91310883 -168.68069458]
[-59.47267151 -182.29757690]
[-45.43504715 -188.91004944]
[-30.19799042 -185.97546387]
[-19.62046051 -174.62225342]
[-17.76973343 -159.21594238]
[-25.35745239 -145.68057251]
[-18.96533203 -132.11073303]
[-12.57321072 -118.54087830]
[-6.18109035 -104.97103119]
[11.75412464 -94.81968689]
[9.86197186 -73.51084137]
[17.05669403 -60.34892654]
[23.05810928 -55.96362305]
[24.26069260 -46.85089493]
[31.19062042 -33.54765701]
[38.12054825 -20.24442101]
[45.05047226 -6.94118452]
[51.98040009 6.36205244]
[58.91032791 19.66528893]
[65.84025574 32.96852493]
[78.58226776 40.68152618]
[78.09580231 56.49525070]
[85.02572632 69.79849243]
[91.95565796 83.10172272]
[106.88064575 84.59998322]
[116.31655884 72.93964386]
[125.75247955 61.27931213]
[127.77661896 45.00556183]
[142.98544312 38.87175369]
[155.73342896 49.18782043]
[152.90652466 65.34147644]
[137.41281128 70.71522522]
[127.97689819 82.37556458]
[118.54097748 94.03590393]
[136.23287964 96.28639984]
[153.06387329 105.69673157]
[167.73399353 108.82519531]
[182.40412903 111.95365143]
[197.07426453 115.08211517]
[211.74440002 118.21057892]
[226.41452026 121.33903503]
[241.08465576 124.46749878]
[255.75479126 127.59596252]
[270.42492676 130.72442627]
[285.09503174 133.85287476]
[299.98706055 135.64947510]
[314.98031616 136.09963989]
[329.97354126 136.54978943]
[339.36001587 124.19366455]
[354.22625732 119.74681091]
[368.85589600 124.91914368]
[377.62356567 137.72178650]
[377.15786743 153.23187256]
[367.63793945 165.48545837]
[352.72433472 169.77078247]
[338.15164185 164.44004822]
[329.52340698 151.54302979]
[314.53015137 151.09288025]
[299.53689575 150.64271545]
[310.67398071 160.69087219]
[314.74816895 175.12696838]
[310.50756836 189.51506042]
[299.25518799 199.43394470]
[284.44873047 201.83573914]
[270.63790894 195.98240662]
[262.06655884 183.67257690]
[261.36849976 168.68882751]
[268.75820923 155.63539124]
[281.96658325 148.52301025]
[267.29644775 145.39454651]
[252.62632751 142.26609802]
[237.95619202 139.13763428]
[223.28605652 136.00917053]
[208.61593628 132.88070679]
[193.94580078 129.75224304]
[179.27566528 126.62378693]
[164.60554504 123.49532318]
[149.93540955 120.36685944]
[143.92114258 124.84777832]
[156.16127014 133.51838684]
[151.69726562 147.83874512]
[136.69833374 148.01826477]
[131.89262390 133.80961609]
[125.87835693 138.29054260]
[124.67902374 153.24250793]
[123.47969818 168.19448853]
[132.97602844 185.93429565]
[121.44927979 201.41853333]
[120.84913635 216.40652466]
[120.24899292 231.39450073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 156]
[4 155]
[5 154]
[9 152]
[10 151]
[11 150]
[14 29]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[43 90]
[44 89]
[45 88]
[47 86]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[53 80]
[54 78]
[55 77]
[60 75]
[61 74]
[62 73]
[63 72]
[91 100]
[92 99]
[93 98]
[102 144]
[103 143]
[104 142]
[105 141]
[106 140]
[107 139]
[108 138]
[109 137]
[110 136]
[111 135]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
