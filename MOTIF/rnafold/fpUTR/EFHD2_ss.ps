%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAGAGGAAGAGCGCGGCCGGCGGCGCUGCGCUGAGAGCAGGGGCCCGGCCAAGGCGAGUGCCGCGCGGGCCACC\
) } def
/len { sequence length } bind def

/coor [
[64.55732727 126.42898560]
[55.57057190 134.90975952]
[44.94200516 141.19630432]
[33.19655991 144.98226929]
[20.91341209 146.08465576]
[8.69744110 144.45274353]
[-2.85056758 140.17034912]
[-13.16346645 133.45158386]
[-21.73560143 124.63008881]
[-28.14759827 114.14251709]
[-32.08688736 102.50690460]
[-33.36293793 90.29705811]
[-31.91645622 78.11431885]
[-45.94169998 72.79524231]
[-59.96694183 67.47617340]
[-73.99218750 62.15709686]
[-88.01743317 56.83802414]
[-102.04267120 51.51895142]
[-116.06791687 46.19987869]
[-125.48627472 46.04927826]
[-130.54364014 40.37390518]
[-144.34332275 34.49440384]
[-160.54881287 37.00716782]
[-170.61544800 24.06132126]
[-164.18753052 8.97444248]
[-147.87754822 7.26661873]
[-138.46382141 20.69471359]
[-124.66413116 26.57421303]
[-110.74884796 32.17463303]
[-96.72360229 37.49370575]
[-82.69835663 42.81278229]
[-68.67311096 48.13185501]
[-54.64786911 53.45092773]
[-40.62262726 58.77000046]
[-26.59738350 64.08907318]
[-15.51060295 49.78743362]
[-0.38404402 39.81794357]
[17.17068100 35.25878143]
[35.27807999 36.61084366]
[51.99915695 43.74275208]
[65.53903961 55.90349197]
[74.43964386 71.80146027]
[77.73668671 89.74166107]
[92.62731934 91.54970551]
[107.55133820 93.05754089]
[122.50270081 94.26454163]
[137.45405579 95.47153473]
[152.40542603 96.67853546]
[167.35678101 97.88553619]
[182.30813599 99.09252930]
[197.28077698 99.99820709]
[212.26860046 100.60219574]
[217.38107300 97.87899780]
[222.48597717 97.62712097]
[226.57055664 99.37418365]
[228.99481201 102.29210663]
[243.80056763 104.69828033]
[258.60632324 107.10444641]
[273.73956299 100.78647614]
[286.61181641 110.94703674]
[283.98123169 127.13381958]
[268.55389404 132.69525146]
[256.20013428 121.91020203]
[241.39439392 119.50403595]
[226.58863831 117.09786224]
[211.66461182 115.59003448]
[196.67678833 114.98604584]
[189.67472839 117.94541168]
[181.10113525 114.04389191]
[166.14978027 112.83689117]
[151.19842529 111.62989807]
[136.24705505 110.42289734]
[121.29570007 109.21589661]
[106.34434509 108.00889587]
[98.45632172 110.60410309]
[90.81926727 106.44034576]
[75.92863464 104.63229370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[21 28]
[22 27]
[43 77]
[44 76]
[45 74]
[46 73]
[47 72]
[48 71]
[49 70]
[50 69]
[51 67]
[52 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
