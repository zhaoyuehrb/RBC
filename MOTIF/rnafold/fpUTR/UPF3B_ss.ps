%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUUGUUGGGGGCGGAGCUUUGACGGGAGCUUCCCGGGAGCCGUUUGUGCCCGGGGUAACCCCGUUCCGGCCAAGCCGCUUCAGCGGGGGACGUAGCC\
) } def
/len { sequence length } bind def

/coor [
[33.23853302 179.26852417]
[20.40645790 187.03627014]
[12.60756016 200.80171204]
[-2.28701854 200.77348328]
[-15.11909389 208.54122925]
[-27.95116806 216.30897522]
[-40.78324509 224.07672119]
[-53.61531830 231.84446716]
[-66.44739532 239.61221313]
[-79.27946472 247.37995911]
[-92.11154175 255.14770508]
[-104.94361877 262.91543579]
[-117.77569580 270.68319702]
[-121.30487061 286.08840942]
[-134.73770142 294.41513062]
[-150.10473633 290.72326660]
[-158.28898621 277.20315552]
[-154.43487549 261.87600708]
[-140.82897949 253.83517456]
[-125.54343414 257.85110474]
[-112.71136475 250.08337402]
[-99.87928772 242.31562805]
[-87.04721069 234.54788208]
[-74.21514130 226.78013611]
[-61.38306427 219.01239014]
[-48.55098724 211.24464417]
[-35.71891403 203.47689819]
[-22.88683701 195.70916748]
[-10.05476284 187.94142151]
[-3.17370057 174.73156738]
[12.63871384 174.20419312]
[25.47078896 166.43644714]
[37.09364700 156.95439148]
[47.27993774 145.94352722]
[57.46623230 134.93264771]
[67.65252686 123.92176056]
[77.83882141 112.91088867]
[88.02510834 101.90000916]
[97.86403656 90.57766724]
[107.34608459 78.95481110]
[116.82813263 67.33194733]
[126.31018066 55.70909500]
[135.79222107 44.08623886]
[138.52050781 28.50204659]
[152.56118774 23.53125954]
[162.04324341 11.90840244]
[171.52528381 0.28554580]
[181.00732422 -11.33731079]
[190.48937988 -22.96016693]
[193.56689453 -31.75343323]
[200.45153809 -34.79103851]
[210.29046631 -46.11338043]
[220.12939453 -57.43572617]
[229.24539185 -69.34785461]
[237.60317993 -81.80367279]
[245.96096802 -94.25949097]
[254.31874084 -106.71530914]
[262.67651367 -119.17112732]
[266.48104858 -135.69268799]
[283.41015625 -136.61045837]
[288.97848511 -120.59703827]
[275.13235474 -110.81334686]
[266.77456665 -98.35752869]
[258.41677856 -85.90170288]
[250.05899048 -73.44588470]
[241.70121765 -60.99006653]
[242.24346924 -58.06597900]
[241.55357361 -54.73535919]
[239.46414185 -51.50903702]
[236.01225281 -48.95041275]
[231.45175171 -47.59679794]
[221.61282349 -36.27445221]
[211.77389526 -24.95210838]
[202.11222839 -13.47812080]
[192.63018799 -1.85526443]
[183.14813232 9.76759243]
[173.66609192 21.39044952]
[164.18405151 33.01330566]
[162.13397217 47.76615143]
[147.41508484 53.56828308]
[137.93302917 65.19113922]
[128.45098877 76.81399536]
[118.96894073 88.43685150]
[109.48690033 100.05970764]
[108.81399536 105.45649719]
[105.07727051 110.03405762]
[99.03598785 112.08630371]
[88.84969330 123.09717560]
[78.66340637 134.10806274]
[68.47711182 145.11894226]
[58.29081726 156.12980652]
[48.10452271 167.14068604]
[63.08791733 166.43504333]
[76.18305969 173.75057983]
[83.43783569 186.87948608]
[82.66274261 201.85945129]
[74.09171295 214.16950989]
[60.31147766 220.09446716]
[45.48092651 217.84619141]
[34.07592392 208.10319519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[4 29]
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 21]
[13 20]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 84]
[40 83]
[41 82]
[42 81]
[43 80]
[45 78]
[46 77]
[47 76]
[48 75]
[49 74]
[51 73]
[52 72]
[53 71]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
