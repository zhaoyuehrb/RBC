%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCAUUUCCGCCUGCGACGUUACCUAGGAGUCCAGCGGCGCCCGGGCCAGCAGCGAUUGGAAUUUCAA\
) } def
/len { sequence length } bind def

/coor [
[-9.94816113 161.44924927]
[-22.71168327 169.32913208]
[-35.47520828 177.20901489]
[-48.23873138 185.08888245]
[-61.00225067 192.96876526]
[-59.36198807 208.14349365]
[-64.47631836 222.52426147]
[-75.32978821 233.25575256]
[-89.76744080 238.20721436]
[-104.92266083 236.39555359]
[-117.78636932 228.18046570]
[-125.80446625 215.19305420]
[-127.38495636 200.01197815]
[-122.21403503 185.65147400]
[-111.31838989 174.96279907]
[-96.86135864 170.06822205]
[-81.71338654 171.93955994]
[-68.88213348 180.20524597]
[-56.11860657 172.32536316]
[-43.35508347 164.44548035]
[-30.59156227 156.56561279]
[-17.82803917 148.68572998]
[-19.11946106 137.06677246]
[-15.81546974 125.79821014]
[-8.38838863 116.63469696]
[2.04421401 111.01933289]
[13.88755989 109.85643768]
[25.31340790 113.36616516]
[34.54228210 121.04423523]
[48.23645020 114.92298126]
[61.93062210 108.80172729]
[75.62478638 102.68047333]
[89.31895447 96.55921936]
[102.87435913 90.13652039]
[116.28436279 83.41551971]
[129.69436646 76.69451904]
[143.10437012 69.97351837]
[156.36239624 62.95750046]
[169.46199036 55.64990997]
[173.87707520 40.71187973]
[187.26600647 33.48754883]
[201.47993469 37.78871918]
[214.57951355 30.48112679]
[216.29515076 15.05918694]
[226.77276611 3.61370134]
[241.98352051 0.54569393]
[256.07855225 7.03487587]
[263.63806152 20.58602333]
[261.75521851 35.98844528]
[251.15406799 47.31959534]
[235.91091919 50.22241592]
[221.88711548 43.58071136]
[208.78752136 50.88830185]
[204.98046875 65.24246216]
[191.79972839 72.84001160]
[176.76957703 68.74948883]
[163.66999817 76.05708313]
[159.22328186 82.26374054]
[149.82536316 83.38351440]
[136.41535950 90.10451508]
[123.00536346 96.82552338]
[109.59535980 103.54652405]
[104.16844940 109.88252258]
[95.44020844 110.25338745]
[81.74604034 116.37464142]
[68.05187225 122.49589539]
[54.35770416 128.61715698]
[40.66353607 134.73840332]
[37.81356430 153.30003357]
[24.72340965 166.56365967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 62]
[35 61]
[36 60]
[37 59]
[38 57]
[39 56]
[42 53]
[43 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
