%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUGUCCCGAGCUUCCCCCGGGCGGGCAGAGGGAAGCCGGCUGGGGAUGAGGAGUGGAGGAGGCAGGAAUGCCUGGGACACUCGCGGGGCAUGUGAGCAGGCCCAGAAGCC\
) } def
/len { sequence length } bind def

/coor [
[143.30218506 261.34768677]
[141.95822144 243.53799438]
[151.56674194 228.29843140]
[145.54132080 214.56184387]
[139.32719421 200.90956116]
[132.92553711 187.34420776]
[126.52389526 173.77885437]
[120.12224579 160.21348572]
[113.72060394 146.64813232]
[107.31895447 133.08277893]
[100.91730499 119.51741791]
[86.40331268 116.50199890]
[77.02053070 103.36710358]
[79.17913818 86.03985596]
[64.74512482 81.95830536]
[50.31110001 77.87675476]
[36.63360596 85.33087158]
[22.05360031 80.98597717]
[15.03152847 67.90064240]
[0.59750825 63.81909180]
[-13.83651161 59.73753738]
[-29.22132301 63.42781830]
[-39.36302185 52.51932907]
[-53.79704285 48.43777847]
[-68.23106384 44.35622406]
[-83.61587524 48.04650497]
[-93.75757599 37.13801575]
[-108.19159698 33.05646133]
[-122.62561035 28.97491074]
[-134.73429871 38.67849350]
[-150.23559570 39.37791824]
[-163.16896057 30.80424881]
[-168.56123352 16.25423050]
[-164.33898926 1.32264602]
[-152.12574768 -8.24900723]
[-136.61776733 -8.78023434]
[-123.77817535 -0.06676557]
[-118.54405975 14.54089165]
[-104.11003876 18.62244415]
[-89.67601776 22.70399475]
[-75.32363129 18.72177315]
[-64.14951324 29.92220497]
[-49.71549225 34.00375748]
[-35.28147125 38.08530807]
[-20.92907715 34.10308838]
[-9.75496006 45.30351639]
[4.67906046 49.38507080]
[19.11308098 53.46662140]
[31.94775772 45.99623871]
[46.64405060 49.92989349]
[54.39265442 63.44273376]
[68.82667542 67.52428436]
[83.26069641 71.60584259]
[97.57676697 67.12812042]
[107.11262512 55.54936600]
[116.64848328 43.97061539]
[126.18433380 32.39186859]
[135.72019958 20.81311798]
[130.45335388 6.45318508]
[133.06414795 -8.51613712]
[142.75274658 -20.09185791]
[156.84037781 -25.22943306]
[171.50927734 -22.64317131]
[181.04513550 -34.22192001]
[190.58099365 -45.80067062]
[200.11685181 -57.37942123]
[209.65270996 -68.95816803]
[211.81674194 -85.21390533]
[227.07775879 -91.21668243]
[239.73654175 -80.79135132]
[236.77081299 -64.66260529]
[221.23146057 -59.42231369]
[211.69560242 -47.84356308]
[202.15974426 -36.26481247]
[192.62388611 -24.68606377]
[183.08802795 -13.10731506]
[188.43850708 0.79369205]
[186.09696960 15.60494423]
[176.59338379 27.33302879]
[162.40223694 32.76516724]
[147.29895020 30.34897423]
[137.76309204 41.92772293]
[128.22723389 53.50647354]
[118.69137573 65.08522034]
[109.15551758 76.66397095]
[121.71348572 94.90441895]
[114.48266602 113.11576843]
[120.88431549 126.68112946]
[127.28595734 140.24649048]
[133.68760681 153.81184387]
[140.08924866 167.37719727]
[146.49090576 180.94256592]
[152.89254761 194.50791931]
[159.47561646 201.04356384]
[159.27792358 208.53640747]
[165.30334473 222.27301025]
[177.91693115 223.33607483]
[188.79051208 229.67344666]
[195.85054016 240.00437927]
[197.78181458 252.29373169]
[194.27209473 264.15274048]
[186.06066895 273.30337524]
[191.32023621 287.35104370]
[196.57980347 301.39871216]
[211.06611633 307.71707153]
[216.76387024 322.45855713]
[210.29267883 336.87728882]
[195.49177551 342.41885376]
[181.14230347 335.79556274]
[175.75750732 320.93692017]
[182.53213501 306.65826416]
[177.27256775 292.61059570]
[172.01300049 278.56292725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 96]
[4 95]
[5 93]
[6 92]
[7 91]
[8 90]
[9 89]
[10 88]
[11 87]
[14 53]
[15 52]
[16 51]
[19 48]
[20 47]
[21 46]
[23 44]
[24 43]
[25 42]
[27 40]
[28 39]
[29 38]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
