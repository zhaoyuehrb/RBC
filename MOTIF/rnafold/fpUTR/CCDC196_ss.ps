%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUAGCUAAGAUCAGUCCACUGCAGCAGGAGUUUCAAGAACAGCAGCACAAAAAUAAUGACUUAACUGGAUAGAAAAAAAGGCACAUAUUUUCAGGAAGGCCUCUUUAUUCUUAGAAGUUACCCUUCAAG\
) } def
/len { sequence length } bind def

/coor [
[72.54960632 157.61791992]
[63.05941010 169.23413086]
[53.56921005 180.85032654]
[44.07901001 192.46652222]
[34.58881378 204.08273315]
[25.09861374 215.69892883]
[15.60841465 227.31512451]
[22.83456230 240.68865967]
[24.38784981 255.81002808]
[20.03141594 270.37332153]
[10.42958355 282.15777588]
[-2.95343852 289.36633301]
[-18.07683563 290.89971924]
[-32.63439941 286.52413940]
[-44.40620804 276.90679932]
[-51.59714508 263.51431274]
[-53.11064529 248.38891602]
[-48.71591187 233.83712769]
[-39.08310699 222.07797241]
[-25.68116570 214.90466309]
[-10.55378723 213.41105652]
[3.99221420 217.82493591]
[13.48241329 206.20872498]
[22.97261238 194.59252930]
[32.46281052 182.97633362]
[41.95301056 171.36012268]
[51.44320679 159.74392700]
[60.93340683 148.12773132]
[69.57731628 135.86872864]
[77.33155060 123.02849579]
[85.08579254 110.18824768]
[79.05204010 98.20862579]
[82.77832031 83.30317688]
[68.15440369 79.96536255]
[53.53048325 76.62754822]
[38.90656281 73.28973389]
[22.11911392 75.65993500]
[15.19430733 60.18468857]
[28.14780235 49.24652863]
[42.24437714 58.66581345]
[56.86829376 62.00362778]
[71.49221802 65.34143829]
[86.11613464 68.67925262]
[71.99100494 63.63141632]
[60.35273361 54.16829300]
[52.52960205 41.36991119]
[49.41445541 26.69694710]
[51.36283493 11.82402420]
[58.15236282 -1.55141175]
[69.00815582 -11.90282440]
[82.69124603 -18.04880905]
[97.63997650 -19.28792572]
[112.14825439 -15.47875118]
[124.56025696 -7.05602932]
[133.45939636 5.01895714]
[137.83001709 19.36809158]
[137.17330933 34.35371017]
[131.56420898 48.26550293]
[121.64289093 59.51572037]
[108.53928375 66.82122040]
[122.41436768 61.12191010]
[136.28944397 55.42260361]
[150.16453552 49.72329330]
[164.03961182 44.02398682]
[177.91468811 38.32467651]
[180.05761719 23.18020248]
[189.43133545 11.22067928]
[203.43960571 5.59621143]
[218.28302002 7.72439909]
[229.98936462 16.93456268]
[243.86444092 11.23525333]
[257.73953247 5.53594542]
[271.61459351 -0.16336320]
[285.48968506 -5.86267185]
[299.36477661 -11.56198025]
[313.23983765 -17.26128960]
[315.01303101 -25.63602829]
[319.94515991 -32.51659775]
[327.14398193 -36.78871155]
[335.35848999 -37.79835129]
[343.19613647 -35.45093918]
[349.35888672 -30.21459007]
[363.70977783 -34.57945251]
[378.06066895 -38.94432068]
[392.41156006 -43.30918503]
[393.20193481 -58.44692230]
[399.12490845 -72.40019989]
[409.46527100 -83.48410034]
[422.97436523 -90.36018372]
[438.02087402 -92.19812775]
[452.78790283 -88.77599335]
[465.49221802 -80.50701904]
[474.59973145 -68.38972473]
[479.01068115 -53.88733292]
[478.19241333 -38.75107574]
[472.24371338 -24.80873489]
[461.88296509 -13.74390984]
[448.36123657 -6.89273596]
[433.31134033 -5.08252430]
[418.55065918 -8.53186703]
[405.86160278 -16.82423973]
[396.77642822 -28.95829582]
[382.42553711 -24.59343147]
[368.07464600 -20.22856712]
[353.72375488 -15.86370277]
[340.77243042 1.43358517]
[318.93914795 -3.38620734]
[305.06408691 2.31310129]
[291.18899536 8.01240921]
[277.31390381 13.71171856]
[263.43884277 19.41102600]
[249.56375122 25.11033440]
[235.68865967 30.80964279]
[233.83628845 45.58916473]
[224.77456665 57.53659439]
[210.85734558 63.38275909]
[195.78353882 61.46527100]
[183.61399841 52.19976044]
[169.73892212 57.89906693]
[155.86383057 63.59837723]
[141.98875427 69.29768372]
[128.11367798 74.99699402]
[114.23859406 80.69630432]
[119.56105804 107.70656586]
[97.92603302 117.94248962]
[90.17179871 130.78273010]
[82.41756439 143.62297058]
[97.29558563 141.71395874]
[109.29785156 150.71093750]
[111.63849640 165.52719116]
[102.99416351 177.78587341]
[88.25219727 180.55616760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[7 22]
[29 127]
[30 126]
[31 125]
[33 43]
[34 42]
[35 41]
[36 40]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[70 113]
[71 112]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[82 105]
[83 104]
[84 103]
[85 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
