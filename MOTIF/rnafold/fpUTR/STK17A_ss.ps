%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUAGUCUGCCUGCCGCAGUCCGAGCGCCGCGCUGGGGAGAGCGGGUGUUUGAAGGCUCCGCGGACCGGCACUAGGAGCCGGGGGCGGGUCCGUGACCCUCCGGCUGCUCGGAGUGAACAGGCGGCCAGGAAAGAAGCGGGCCUGAACACC\
) } def
/len { sequence length } bind def

/coor [
[96.72034454 143.50277710]
[93.03805542 158.04379272]
[89.35577393 172.58479309]
[85.67349243 187.12579346]
[87.64653778 203.96453857]
[72.01205444 210.52191162]
[61.38288879 197.31369019]
[71.13249207 183.44351196]
[74.81477356 168.90251160]
[78.49705505 154.36151123]
[82.17933655 139.82049561]
[69.93496704 131.61238098]
[61.12318802 119.79499817]
[56.75005722 105.71758270]
[41.76287079 105.09770966]
[26.77568245 104.47782898]
[11.78849697 103.85795593]
[-3.20829964 103.54795074]
[-18.20829964 103.54795074]
[-33.20830154 103.54795074]
[-48.20830154 103.54795074]
[-63.20509720 103.85795593]
[-78.19228363 104.47782898]
[-93.17946625 105.09770966]
[-108.16665649 105.71758270]
[-123.15383911 106.33745575]
[-138.14102173 106.95732880]
[-153.12821960 107.57720184]
[-168.11540222 108.19708252]
[-176.62272644 111.69692993]
[-183.41806030 108.67165375]
[-198.41485596 108.98165894]
[-213.41165161 109.29166412]
[-228.40844727 109.60166168]
[-239.16819763 121.17764282]
[-254.96478271 121.67131042]
[-266.42636108 110.78977203]
[-266.75299072 94.98886108]
[-255.75086975 83.64297485]
[-239.94738770 83.48342133]
[-228.71846008 94.60486603]
[-213.72166443 94.29486084]
[-198.72486877 93.98486328]
[-183.72807312 93.67485809]
[-168.73527527 93.20989227]
[-153.74809265 92.59001923]
[-138.76091003 91.97014618]
[-123.77371979 91.35027313]
[-108.78652954 90.73039246]
[-93.79934692 90.11051941]
[-78.81215668 89.49064636]
[-63.82497025 88.87077332]
[-59.95202255 85.97896576]
[-54.20660782 85.53213501]
[-48.20830154 88.54795074]
[-33.20830154 88.54795074]
[-18.20829964 88.54795074]
[-3.20829964 88.54795074]
[0.78084487 85.81866455]
[6.53981638 85.60964966]
[12.40837097 88.87077332]
[27.39555740 89.49064636]
[42.38274384 90.11051941]
[57.36993027 90.73039246]
[68.52063751 69.79572296]
[88.97662354 57.78941345]
[87.73793793 42.84064484]
[86.49924469 27.89187813]
[85.26055908 12.94311047]
[84.02186584 -2.00565672]
[71.15003967 -10.88540840]
[67.04730225 -25.97519302]
[73.65084076 -40.15007401]
[87.84267426 -46.71710587]
[102.92184448 -42.57553864]
[111.76843262 -29.68089104]
[110.20535278 -14.12162399]
[98.97063446 -3.24434686]
[100.20932007 11.70442009]
[101.44801331 26.65318871]
[102.68670654 41.60195541]
[103.92539215 56.55072403]
[118.28882599 60.39233398]
[130.52796936 68.83444977]
[139.22123718 80.89651489]
[143.35887146 95.17748260]
[158.33004761 96.10696411]
[173.30122375 97.03644562]
[188.27239990 97.96592712]
[203.24357605 98.89540863]
[218.21473694 99.82489014]
[233.18591309 100.75436401]
[248.15708923 101.68384552]
[263.12826538 102.61332703]
[270.64187622 89.37297058]
[283.10827637 80.74301910]
[298.02432251 78.39114380]
[312.42318726 82.73090363]
[323.46438599 92.85025787]
[328.99417114 106.70259094]
[343.96533203 107.63207245]
[358.93649292 108.56155396]
[373.91647339 109.33627319]
[388.90368652 109.95614624]
[403.89086914 110.57602692]
[418.87805176 111.19589996]
[433.86523438 111.81577301]
[448.85241699 112.43564606]
[463.83959961 113.05551910]
[471.45114136 99.77684784]
[484.36795044 91.56620789]
[499.62182617 90.31034088]
[513.70758057 96.29783630]
[523.38842773 108.15281677]
[526.43969727 123.15109253]
[522.16027832 137.84617615]
[511.53356934 148.86122131]
[497.00146484 153.66508484]
[481.90338135 151.15383911]
[469.70870972 141.90458679]
[463.21972656 128.04270935]
[448.23254395 127.42283630]
[433.24536133 126.80296326]
[418.25817871 126.18308258]
[403.27099609 125.56320953]
[388.28381348 124.94333649]
[373.29660034 124.32346344]
[366.44021606 127.20764923]
[358.00701904 123.53273010]
[343.03585815 122.60324860]
[328.06466675 121.67376709]
[320.86395264 134.73573303]
[308.65585327 143.41166687]
[293.83074951 145.93705750]
[279.32015991 141.75823975]
[268.01696777 131.65255737]
[262.19879150 117.58450317]
[247.22761536 116.65502167]
[232.25643921 115.72554016]
[217.28526306 114.79605865]
[202.31408691 113.86657715]
[187.34291077 112.93709564]
[172.37173462 112.00762177]
[157.40055847 111.07814026]
[142.42939758 110.14865875]
[139.98986816 117.43728638]
[136.30909729 124.18466949]
[131.50131226 130.18138123]
[125.71575165 135.24128723]
[119.13199615 139.20733643]
[111.95439911 141.95642090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[14 64]
[15 63]
[16 62]
[17 61]
[18 58]
[19 57]
[20 56]
[21 55]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[31 44]
[32 43]
[33 42]
[34 41]
[66 82]
[67 81]
[68 80]
[69 79]
[70 78]
[86 145]
[87 144]
[88 143]
[89 142]
[90 141]
[91 140]
[92 139]
[93 138]
[94 137]
[100 131]
[101 130]
[102 129]
[103 127]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
