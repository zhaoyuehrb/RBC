%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCUCUGAGCCAAGCUUUUGACGAGGGCGGGCGGGCCUGAGCGGGAAGAACGGUUUCCCUGGCGACCGUUUCCAAGACGACUCAAGGUGGAGCGGGGACAUUGCACAGGGUG\
) } def
/len { sequence length } bind def

/coor [
[67.15145111 120.30721283]
[53.10378265 125.56678009]
[39.05611420 130.82633972]
[25.00844574 136.08590698]
[23.69083405 152.23751831]
[15.51970863 166.16484070]
[2.15955615 175.13017273]
[-13.71100235 177.39660645]
[-28.93619537 172.56423950]
[-40.51060486 161.63972473]
[-54.40801620 167.28436279]
[-68.30542755 172.92900085]
[-74.09003448 184.55825806]
[-85.89086914 188.93347168]
[-97.11600494 184.19799805]
[-111.16367340 189.45756531]
[-125.21134186 194.71711731]
[-139.25900269 199.97668457]
[-153.30667114 205.23625183]
[-167.35433960 210.49581909]
[-180.06779480 221.71206665]
[-194.36515808 212.60043335]
[-189.56750488 196.33947754]
[-172.61390686 196.44815063]
[-158.56623840 191.18858337]
[-144.51856995 185.92901611]
[-130.47090149 180.66944885]
[-116.42323303 175.40989685]
[-102.37556458 170.15032959]
[-92.05299377 156.03178406]
[-73.95006561 159.03160095]
[-60.05265808 153.38694763]
[-46.15524673 147.74230957]
[-45.95114136 133.79875183]
[-40.40694046 120.95578766]
[-30.33692169 111.18373108]
[-17.25242615 105.99559021]
[-3.13506460 106.21292114]
[9.86336899 111.83589935]
[19.74888229 122.03823853]
[33.79655075 116.77867126]
[47.84421921 111.51911163]
[61.89188766 106.25954437]
[61.41333389 98.42536926]
[62.52862167 90.65622711]
[65.19168091 83.27304077]
[69.29251862 76.58076477]
[74.66173553 70.85583496]
[81.07756042 66.33470917]
[88.27499390 63.20415497]
[95.95672607 61.59346390]
[103.80547333 61.56917191]
[111.49702454 63.13228226]
[118.71369171 66.21823120]
[125.15738678 70.69955444]
[130.56193542 76.39114380]
[134.70411682 83.05790710]
[137.41282654 90.42446899]
[152.39004517 89.59815216]
[167.36726379 88.77183533]
[182.34449768 87.94551849]
[197.32171631 87.11920166]
[212.28613281 86.08660126]
[227.23489380 84.84791565]
[242.18367004 83.60922241]
[257.13244629 82.37053680]
[271.96047974 80.10570526]
[286.59741211 76.82549286]
[301.23434448 73.54527283]
[315.87130737 70.26506042]
[330.50823975 66.98484039]
[345.14520264 63.70462418]
[359.78213501 60.42440796]
[363.07934570 57.12593079]
[366.89196777 55.32205582]
[370.65588379 54.98417282]
[373.88052368 55.89323044]
[376.20764160 57.68347549]
[391.11660767 56.03335190]
[398.68368530 42.48643112]
[412.78234863 36.00513077]
[427.99139404 39.08164215]
[438.46261597 50.53298187]
[440.16961670 65.95587921]
[432.45602417 79.41991425]
[418.28787231 85.74789429]
[403.11309814 82.50656891]
[392.76672363 70.94231415]
[377.85778809 72.59243774]
[363.06234741 75.06135559]
[348.42541504 78.34156799]
[333.78845215 81.62178802]
[319.15151978 84.90200043]
[304.51458740 88.18222046]
[289.87762451 91.46244049]
[275.24069214 94.74265289]
[285.76623535 105.42969513]
[284.25360107 120.35323334]
[271.79769897 128.71090698]
[257.41470337 124.45303345]
[251.51570129 110.66166687]
[258.37112427 97.31929779]
[243.42234802 98.55799103]
[228.47358704 99.79668427]
[213.52482605 101.03536987]
[207.02915955 104.77545166]
[198.14802551 102.09642792]
[183.17080688 102.92274475]
[168.19358826 103.74906158]
[153.21636963 104.57537842]
[138.23913574 105.40169525]
[128.19836426 126.38679504]
[107.92516327 137.79684448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[10 33]
[11 32]
[12 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[58 111]
[59 110]
[60 109]
[61 108]
[62 107]
[63 105]
[64 104]
[65 103]
[66 102]
[67 96]
[68 95]
[69 94]
[70 93]
[71 92]
[72 91]
[73 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
