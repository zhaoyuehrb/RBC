%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUUCUCGCCCGUCUGGGCGUGGGCGUGGCCGGCGUGGCUGCUCGGGACCACCCGAACCCGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[25.26126671 141.06097412]
[14.93674946 145.06419373]
[3.97655845 144.24351501]
[-5.49327135 138.82934570]
[-11.66645527 129.93620300]
[-26.60606956 131.28079224]
[-41.54568481 132.62538147]
[-56.48529816 133.96997070]
[-69.53634644 142.91316223]
[-82.90595245 136.34786987]
[-97.84556580 137.69245911]
[-112.78517914 139.03704834]
[-127.72479248 140.38165283]
[-142.66441345 141.72624207]
[-155.75555420 151.60317993]
[-170.74717712 144.95613098]
[-172.21717834 128.62300110]
[-158.65335083 119.40591431]
[-144.00900269 126.78662109]
[-129.06938171 125.44203186]
[-114.12976837 124.09744263]
[-99.19015503 122.75285339]
[-84.25054169 121.40826416]
[-72.26807404 112.56124878]
[-57.82988739 119.03035736]
[-42.89027405 117.68576813]
[-27.95065880 116.34117889]
[-13.01104450 114.99658966]
[-2.12450385 99.20365906]
[17.07527733 95.95245361]
[33.02498627 107.62495422]
[47.64890671 104.28713989]
[62.27282333 100.94932556]
[76.89674377 97.61151123]
[91.52066040 94.27369690]
[98.30444336 89.40759277]
[106.87525177 91.12982941]
[121.63419342 88.45147705]
[129.82800293 83.70053101]
[137.11437988 85.99965668]
[151.97862244 83.98616028]
[156.94128418 75.28877258]
[165.34223938 70.10271454]
[175.06002808 69.57918549]
[183.71520996 73.71140289]
[189.25297546 81.36898041]
[204.25297546 81.36898041]
[219.25297546 81.36898041]
[234.25297546 81.36898041]
[249.25297546 81.36898041]
[263.17678833 72.70527649]
[277.51220703 80.66940308]
[277.51220703 97.06855011]
[263.17678833 105.03268433]
[249.25297546 96.36898041]
[234.25297546 96.36898041]
[219.25297546 96.36898041]
[204.25297546 96.36898041]
[189.25297546 96.36898041]
[172.83694458 108.54715729]
[153.99212646 98.85040283]
[139.12786865 100.86389923]
[124.31255341 103.21041870]
[109.55360413 105.88877106]
[94.85847473 108.89761353]
[80.23455811 112.23542786]
[65.61064148 115.57324219]
[50.98672104 118.91105652]
[36.36280060 122.24887085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[10 23]
[11 22]
[12 21]
[13 20]
[14 19]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[37 64]
[38 63]
[40 62]
[41 61]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
