%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCGCCGCGUGCCCGGCCGCGCCCAGCAGGGUUUCCAGGCCUGAGGUGCCCGCCCUGGCCCCAGGAGA\
) } def
/len { sequence length } bind def

/coor [
[168.56561279 212.95318604]
[168.29592896 199.73078918]
[173.17424011 187.38711548]
[162.80830383 176.54518127]
[152.44236755 165.70326233]
[142.07643127 154.86134338]
[131.71047974 144.01942444]
[117.32266235 140.16717529]
[113.37836456 124.84552002]
[103.01242065 114.00359344]
[89.64672852 109.89874268]
[86.14565277 96.36234283]
[75.77971649 85.52042389]
[65.41378021 74.67849731]
[50.28451157 70.05076599]
[47.08164978 55.50459671]
[36.71570969 44.66267395]
[24.61599159 46.74067307]
[13.18413544 42.61104965]
[5.36434746 33.46547318]
[3.10701942 21.77040863]
[6.88331175 10.60265255]
[-2.46903515 -1.12481999]
[-11.82138252 -12.85229206]
[-21.17372894 -24.57976532]
[-36.62863541 -30.06410217]
[-39.34002304 -46.23754883]
[-26.51865578 -56.46224976]
[-11.35405064 -50.21990967]
[-9.44625664 -33.93210983]
[-0.09391003 -22.20463943]
[9.25843716 -10.47716713]
[18.61078453 1.25030529]
[36.65578842 1.97028410]
[48.89929581 15.66491222]
[47.55763245 34.29673386]
[57.92357254 45.13865662]
[72.31139374 48.99090576]
[76.25569916 64.31256104]
[86.62163544 75.15447998]
[96.98757935 85.99640656]
[110.35327148 90.10125732]
[113.85434723 103.63765717]
[124.22028351 114.47957611]
[139.34954834 119.10731506]
[142.55241394 133.65347290]
[152.91835022 144.49540710]
[163.28428650 155.33732605]
[173.65022278 166.17924500]
[184.01617432 177.02117920]
[200.67860413 172.41754150]
[217.34387207 176.67289734]
[229.63481140 188.58068848]
[234.36743164 204.93623352]
[230.37536621 221.39889526]
[241.67143250 231.26797485]
[252.96751404 241.13705444]
[264.26358032 251.00613403]
[280.44940186 253.64276123]
[286.00509644 269.07214355]
[275.21545410 281.42187500]
[259.17993164 277.98760986]
[254.39450073 262.30221558]
[243.09843445 252.43312073]
[231.80235291 242.56404114]
[220.50628662 232.69496155]
[208.71961975 238.14923096]
[195.69334412 238.62675476]
[183.44998169 234.01664734]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 50]
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[12 41]
[13 40]
[14 39]
[16 37]
[17 36]
[22 33]
[23 32]
[24 31]
[25 30]
[55 66]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
