%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCUCUCUUGGGUCAGAUUCUCAGCUCCCAGCUCCCCGCUCCCGGCUCCCGGCGCCCGGCGCCCGGCGCGGAGCUGUUCCUCAAACGACACGCAGCCGAGGUGGGUGGGUGUGGGGACGCGGGAGCCAGUGUCGUCGGAUCGGCCCGCAGUCCGCUGUCCUGCUGAGCCCGGAGGCCGCCUGG\
) } def
/len { sequence length } bind def

/coor [
[110.73970795 111.32566833]
[103.70656586 113.93045807]
[99.45848846 128.31634521]
[95.21040344 142.70222473]
[90.96231842 157.08811951]
[98.73441315 170.84930420]
[94.41905212 186.05302429]
[80.57646942 193.67919922]
[65.41921997 189.20332336]
[57.93983078 175.28088379]
[62.57569504 160.17181396]
[76.57643127 152.84004211]
[80.82451630 138.45414734]
[85.07259369 124.06826019]
[89.32067871 109.68237305]
[82.05237579 122.80379486]
[69.36853027 130.81129456]
[54.39670944 131.73037720]
[40.82867050 125.33441162]
[32.01000977 113.20052338]
[30.11523247 98.32067108]
[35.61154938 84.36393738]
[47.14368057 74.77175903]
[61.86803818 71.90937042]
[76.15390015 76.48257446]
[86.47805786 87.36266327]
[78.75972748 74.50080109]
[71.04139709 61.63894653]
[63.32306671 48.77708817]
[55.60473633 35.91523361]
[47.88640594 23.05337524]
[40.77139664 17.28936386]
[40.14844513 9.90846443]
[32.64844513 -3.08191681]
[25.03900909 -16.00849724]
[17.32067680 -28.87035370]
[9.60234642 -41.73221207]
[1.88401544 -54.59406662]
[-5.83431578 -67.45592499]
[-13.55264664 -80.31777954]
[-21.27097702 -93.17964172]
[-35.00633240 -101.03142548]
[-34.92081833 -115.92578888]
[-42.63914871 -128.78764343]
[-50.35747910 -141.64950562]
[-58.07580948 -154.51135254]
[-71.81116486 -162.36314392]
[-71.72564697 -177.25750732]
[-79.44397736 -190.11935425]
[-93.17933655 -197.97114563]
[-93.09381866 -212.86550903]
[-100.81214905 -225.72735596]
[-112.02687836 -235.68878174]
[-125.70937347 -241.83609009]
[-139.39186096 -247.98339844]
[-153.07435608 -254.13069153]
[-166.75685120 -260.27801514]
[-183.68269348 -261.25393677]
[-187.43043518 -277.78845215]
[-172.57955933 -285.96694946]
[-160.60955811 -273.96051025]
[-146.92706299 -267.81320190]
[-133.24456787 -261.66589355]
[-119.56207275 -255.51858521]
[-105.87957764 -249.37127686]
[-94.83468628 -259.52069092]
[-99.80595398 -273.67294312]
[-104.77721405 -287.82522583]
[-109.74848175 -301.97747803]
[-114.83908081 -316.08724976]
[-120.04866028 -330.15353394]
[-125.25823975 -344.21981812]
[-138.78121948 -346.95129395]
[-149.10302734 -355.94100952]
[-153.59373474 -368.75643921]
[-151.17959595 -382.00949097]
[-142.59753418 -392.25219727]
[-147.56880188 -406.40444946]
[-152.54006958 -420.55670166]
[-157.51133728 -434.70898438]
[-171.29350281 -442.92065430]
[-173.32356262 -458.83474731]
[-162.04421997 -470.24331665]
[-146.10803223 -468.39474487]
[-137.73986816 -454.70703125]
[-143.35906982 -439.68023682]
[-138.38780212 -425.52798462]
[-133.41653442 -411.37570190]
[-128.44528198 -397.22344971]
[-112.58330536 -393.03454590]
[-102.23387146 -380.09179688]
[-101.62422943 -363.36502075]
[-111.19195557 -349.42938232]
[-105.98237610 -335.36309814]
[-100.77280426 -321.29681396]
[-95.48981476 -316.10491943]
[-95.59621429 -306.94873047]
[-90.62495422 -292.79647827]
[-85.65369415 -278.64422607]
[-80.68242645 -264.49194336]
[-78.46221161 -245.12986755]
[-87.95029449 -233.44569397]
[-80.23196411 -220.58383179]
[-67.04867554 -213.65202332]
[-66.58212280 -197.83769226]
[-58.86379242 -184.97583008]
[-45.68050385 -178.04400635]
[-45.21395493 -162.22969055]
[-37.49562073 -149.36782837]
[-29.77729034 -136.50596619]
[-22.05895996 -123.64411926]
[-8.87567043 -116.71229553]
[-8.40912056 -100.89797211]
[-0.69078952 -88.03610992]
[7.02754164 -75.17425537]
[14.74587250 -62.31240082]
[22.46420288 -49.45054245]
[30.18253517 -36.58868408]
[37.90086365 -23.72682762]
[44.05200958 -19.60018730]
[45.63882446 -10.58191681]
[53.13882446 2.40846419]
[60.74826431 15.33504391]
[68.46659088 28.19690132]
[76.18492889 41.05875778]
[83.90325928 53.92061615]
[91.62158966 66.78247070]
[99.33992004 79.64433289]
[139.98745728 90.91745758]
[152.58129883 99.06578064]
[165.17514038 107.21411133]
[185.31907654 107.30337524]
[193.41464233 124.84929657]
[206.27650452 132.56762695]
[219.13836670 140.28596497]
[234.95268250 140.75250244]
[241.88450623 153.93580627]
[254.74636841 161.65412903]
[267.60821533 169.37246704]
[280.47009277 177.09078979]
[298.87371826 176.96513367]
[306.80313110 192.61010742]
[319.79348755 200.11010742]
[332.78387451 207.61010742]
[345.77426147 215.11010742]
[358.76464844 222.61010742]
[375.56448364 217.77081299]
[390.38040161 226.39958191]
[394.30316162 242.74337769]
[407.41836548 250.02290344]
[420.53356934 257.30242920]
[433.64877319 264.58197021]
[450.02749634 263.76412964]
[458.69662476 277.68453979]
[450.73809814 292.02310181]
[434.33895874 292.02947998]
[426.36923218 277.69717407]
[413.25402832 270.41763306]
[400.13882446 263.13809204]
[387.02362061 255.85856628]
[375.24053955 261.10403442]
[362.39730835 258.56048584]
[353.23428345 248.93795776]
[351.26464844 235.60049438]
[338.27426147 228.10049438]
[325.28387451 220.60049438]
[312.29348755 213.10049438]
[299.30313110 205.60049438]
[287.52728271 208.42684937]
[276.63766479 202.26652527]
[272.75173950 189.95265198]
[259.88989258 182.23431396]
[247.02803040 174.51599121]
[234.16618347 166.79765320]
[219.27182007 166.88317871]
[211.42002869 153.14781189]
[198.55818176 145.42948914]
[185.69631958 137.71115112]
[176.01957703 141.07568359]
[165.87849426 138.49290466]
[158.69413757 130.58422852]
[157.02680969 119.80794525]
[144.43296814 111.65962219]
[131.83912659 103.51129913]
[124.80599213 106.11608887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 15]
[3 14]
[4 13]
[5 12]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[33 122]
[34 121]
[35 119]
[36 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[43 111]
[44 110]
[45 109]
[46 108]
[48 106]
[49 105]
[51 103]
[52 102]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[66 100]
[67 99]
[68 98]
[69 97]
[70 95]
[71 94]
[72 93]
[77 89]
[78 88]
[79 87]
[80 86]
[129 184]
[130 183]
[131 182]
[133 178]
[134 177]
[135 176]
[137 174]
[138 173]
[139 172]
[140 171]
[142 168]
[143 167]
[144 166]
[145 165]
[146 164]
[149 160]
[150 159]
[151 158]
[152 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
