%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUGGGAUGAGCAAUCCGAGUUCCCGGAUGAGGGAACAUUCUGCAGUAUAAAGGGAGCAGGGAAGGCGGGAGACAGCGCAGUUUGAAUCGCGGUGCGACGAAGGAGUAGGUGGUGGGAUCUCACCGUGGGUCCGAUUAGCCUUUUCUCUGCCUUGCUUGCUUGAGCUUCAGCGGAAUUCGAA\
) } def
/len { sequence length } bind def

/coor [
[192.36228943 116.04913330]
[190.93099976 130.98068237]
[184.19158936 144.38145447]
[173.05819702 154.43368530]
[159.04100037 159.77391052]
[144.04130554 159.67774963]
[130.09686279 154.16021729]
[129.69082642 139.16571045]
[122.85841370 152.51928711]
[116.02599335 165.87286377]
[109.19356537 179.22644043]
[112.73727417 194.87321472]
[102.60149384 207.30886841]
[86.56153870 206.99383545]
[76.92188263 194.16976929]
[81.07724762 178.67420959]
[95.83998871 172.39401245]
[102.67241669 159.04043579]
[109.50483704 145.68685913]
[116.33725739 132.33328247]
[110.94514465 127.12030792]
[100.16091156 116.69435883]
[94.76879883 111.48138428]
[81.65360260 118.76091766]
[68.53839874 126.04044342]
[55.42320251 133.31997681]
[42.30800247 140.59950256]
[29.19280243 147.87902832]
[25.08661461 163.14057922]
[11.35004997 170.95610046]
[-3.86722851 166.68878174]
[-11.53708076 152.87036133]
[-7.10911942 137.69905090]
[6.78962517 130.17572021]
[21.91327477 134.76383972]
[35.02847290 127.48430634]
[48.14367294 120.20477295]
[61.25887299 112.92524719]
[74.37406921 105.64571381]
[87.48927307 98.36618805]
[98.53415680 88.21678162]
[106.89402008 75.76235962]
[115.25389099 63.30793381]
[123.61375427 50.85351181]
[131.97361755 38.39908981]
[140.33349609 25.94466972]
[148.69335938 13.49024773]
[139.79106140 2.96377563]
[133.93153381 -9.50104237]
[131.51045227 -23.04697609]
[132.68724060 -36.74434280]
[137.37460327 -49.65480804]
[145.24504089 -60.89568329]
[155.75361633 -69.70025635]
[168.17575073 -75.47008514]
[181.65718079 -77.81569672]
[195.27267456 -76.58283234]
[208.08953857 -71.86260223]
[216.86526489 -84.02757263]
[225.64100647 -96.19253540]
[234.41673279 -108.35750580]
[243.19247437 -120.52247620]
[251.96821594 -132.68743896]
[260.74395752 -144.85241699]
[262.54278564 -160.57102966]
[276.26379395 -166.36611938]
[285.03952026 -178.53108215]
[293.81527710 -190.69606018]
[302.59100342 -202.86102295]
[311.36672974 -215.02600098]
[320.14248657 -227.19096375]
[328.91821289 -239.35592651]
[337.59091187 -251.59457397]
[346.15991211 -263.90603638]
[354.72894287 -276.21746826]
[363.29797363 -288.52893066]
[365.63983154 -297.38122559]
[372.11712646 -300.97430420]
[380.89288330 -313.13925171]
[383.38391113 -321.95071411]
[389.92098999 -325.43389893]
[398.90093994 -337.44891357]
[407.77908325 -349.53933716]
[416.55480957 -361.70431519]
[425.33053589 -373.86926270]
[434.10629272 -386.03424072]
[435.90512085 -401.75286865]
[449.62612915 -407.54794312]
[458.40188599 -419.71292114]
[460.20071411 -435.43151855]
[473.92172241 -441.22662354]
[482.69747925 -453.39160156]
[491.47320557 -465.55654907]
[500.24893188 -477.72152710]
[509.02465820 -489.88650513]
[517.80041504 -502.05145264]
[526.57611084 -514.21643066]
[535.35186768 -526.38140869]
[521.29504395 -521.14630127]
[506.35018921 -522.43103027]
[493.39309692 -529.98840332]
[484.91714478 -542.36413574]
[482.55334473 -557.17669678]
[486.75659180 -571.57574463]
[496.71804810 -582.79046631]
[510.52081299 -588.66271973]
[525.50878906 -588.06262207]
[538.79785156 -581.10552979]
[547.83074951 -569.13024902]
[550.86932373 -554.44128418]
[547.32885742 -539.86529541]
[558.37371826 -550.01470947]
[569.41864014 -560.16412354]
[580.46350098 -570.31353760]
[580.88018799 -586.11230469]
[592.40356445 -596.92834473]
[608.19708252 -596.34466553]
[618.89068604 -584.70758057]
[618.14007568 -568.92114258]
[606.39056396 -558.35113525]
[590.61291504 -559.26861572]
[579.56805420 -549.11920166]
[568.52313232 -538.96978760]
[557.47827148 -528.82037354]
[547.51684570 -517.60565186]
[538.74108887 -505.44070435]
[529.96539307 -493.27572632]
[521.18963623 -481.11074829]
[512.41387939 -468.94580078]
[503.63818359 -456.78082275]
[494.86242676 -444.61584473]
[486.08670044 -432.45089722]
[484.91555786 -417.60238647]
[470.56683350 -410.93719482]
[461.79110718 -398.77221680]
[460.61996460 -383.92370605]
[446.27124023 -377.25851440]
[437.49551392 -365.09353638]
[428.71978760 -352.92855835]
[419.94406128 -340.76361084]
[418.57757568 -333.48358154]
[410.91595459 -328.46896362]
[401.93600464 -316.45394897]
[393.05783081 -304.36352539]
[384.28210449 -292.19854736]
[375.60940552 -279.95989990]
[367.04040527 -267.64846802]
[358.47137451 -255.33700562]
[349.90234375 -243.02555847]
[348.65902710 -235.72351074]
[341.08319092 -230.58020020]
[332.30743408 -218.41522217]
[323.53170776 -206.25025940]
[314.75598145 -194.08529663]
[305.98022461 -181.92031860]
[297.20449829 -169.75535583]
[288.42877197 -157.59037781]
[287.25762939 -142.74189758]
[272.90890503 -136.07667542]
[264.13317871 -123.91171265]
[255.35743713 -111.74674225]
[246.58171082 -99.58177185]
[237.80596924 -87.41680145]
[229.03024292 -75.25183105]
[220.25450134 -63.08686447]
[230.08966064 -50.10734177]
[235.45025635 -34.71029663]
[235.80317688 -18.39197922]
[231.10260010 -2.74191761]
[221.79545593 10.71191216]
[208.77905273 20.65227318]
[193.31451416 26.10162735]
[176.90461731 26.51826096]
[161.14778137 21.85011482]
[152.78791809 34.30453491]
[144.42803955 46.75895691]
[136.06817627 59.21337891]
[127.70831299 71.66780090]
[119.34844208 84.12222290]
[110.98857880 96.57664490]
[124.29602051 89.65479279]
[137.03578186 81.73657227]
[151.77790833 78.96714783]
[166.52273560 81.72217560]
[179.27023315 89.62795258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 20]
[9 19]
[10 18]
[11 17]
[23 40]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[41 180]
[42 179]
[43 178]
[44 177]
[45 176]
[46 175]
[47 174]
[58 165]
[59 164]
[60 163]
[61 162]
[62 161]
[63 160]
[64 159]
[66 157]
[67 156]
[68 155]
[69 154]
[70 153]
[71 152]
[72 151]
[73 149]
[74 148]
[75 147]
[76 146]
[78 145]
[79 144]
[81 143]
[82 142]
[83 140]
[84 139]
[85 138]
[86 137]
[88 135]
[89 134]
[91 132]
[92 131]
[93 130]
[94 129]
[95 128]
[96 127]
[97 126]
[98 125]
[111 124]
[112 123]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
