%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAACUGUUGAGAAAACGGAACUACUGGGGAAAGGGAGGGCUCACUGAGAACCAUCCCGGUAACCCGAUCACCGCUGGUCACC\
) } def
/len { sequence length } bind def

/coor [
[97.35086823 179.84840393]
[82.41149902 181.19577026]
[68.68440247 175.14871216]
[59.59506607 163.21623230]
[57.41165924 148.37599182]
[62.67903519 134.33125305]
[74.08263397 124.58683014]
[82.34445190 112.06714630]
[69.09177399 119.09327698]
[55.83908844 126.11940002]
[42.58641052 133.14552307]
[29.33372879 140.17166138]
[23.26914597 155.02427673]
[7.83572769 159.40481567]
[-5.12732887 149.95289612]
[-5.67587614 133.91923523]
[6.61088467 123.60346222]
[22.30760193 126.91897583]
[35.56028366 119.89284515]
[48.81296539 112.86672211]
[62.06564331 105.84059143]
[75.31832123 98.81446838]
[61.45937729 93.07603455]
[53.64641190 80.27144623]
[54.88253784 65.32246399]
[64.69261932 53.97512054]
[79.30590057 50.59104919]
[93.10540009 56.47100830]
[100.78691864 69.35488129]
[99.39762115 84.29101562]
[105.69595337 70.67738342]
[111.99429321 57.06375504]
[102.36579132 43.75831223]
[100.70285797 27.51243973]
[107.35971832 12.70202351]
[120.46218109 3.26946187]
[136.43423462 1.67431128]
[142.23698425 -12.15783024]
[148.03971863 -25.98997116]
[153.84246826 -39.82211304]
[159.39454651 -53.75676346]
[164.69413757 -67.78938293]
[161.21733093 -85.76193237]
[174.97973633 -96.48878479]
[179.76925659 -110.70358276]
[184.55877686 -124.91838074]
[183.88639832 -141.85899353]
[199.97883606 -147.19471741]
[209.56086731 -133.20825195]
[198.77357483 -120.12886047]
[193.98405457 -105.91406250]
[189.19453430 -91.69926453]
[194.30995178 -80.57796478]
[190.25724792 -68.59968567]
[178.72674561 -62.48979187]
[173.42715454 -48.45717621]
[174.02368164 -40.91391373]
[167.67460632 -34.01936722]
[161.87187195 -20.18722725]
[156.06912231 -6.35508490]
[150.26637268 7.47705698]
[159.29356384 17.88886070]
[162.92333984 31.25153542]
[160.38018799 44.93065643]
[152.11148071 56.20332718]
[139.71012878 62.80017090]
[125.60792542 63.36209106]
[119.30958557 76.97572327]
[113.01125336 90.58935547]
[115.43798065 105.39175415]
[125.75347137 116.28168488]
[136.06896973 127.17161560]
[146.38446045 138.06155396]
[156.69995117 148.95147705]
[172.56515503 153.10208130]
[176.64169312 168.98646545]
[164.73599243 180.26414490]
[149.09559631 175.33361816]
[145.81001282 159.26696777]
[135.49452209 148.37704468]
[125.17903137 137.48710632]
[114.86354065 126.59717560]
[104.54804993 115.70724487]
[108.37982941 130.20956421]
[116.07511902 143.08522034]
[116.58218384 158.07666016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 22]
[9 21]
[10 20]
[11 19]
[12 18]
[30 69]
[31 68]
[32 67]
[37 61]
[38 60]
[39 59]
[40 58]
[41 56]
[42 55]
[44 52]
[45 51]
[46 50]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
