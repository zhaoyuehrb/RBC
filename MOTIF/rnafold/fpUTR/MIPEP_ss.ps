%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCGGAAGCGGGGCCGUCACGUGGGGCGGCGUGGGCUGCUGCCUUGGAAACGCGGAGCGCGCGCUCCCAGCGAAAGCAGCAGGGCAGGGAUCUGCGUUGGAGGAAGGGACUGCUCUGGUGCUAGA\
) } def
/len { sequence length } bind def

/coor [
[109.74475861 136.11322021]
[103.31576538 137.25762939]
[96.78572083 137.26651001]
[90.35363770 136.13961792]
[83.65795135 149.56228638]
[76.96225739 162.98493958]
[70.26656342 176.40759277]
[71.80392456 192.73452759]
[58.27823257 202.00747681]
[43.60355759 194.68722534]
[42.87594986 178.30422974]
[56.84391022 169.71189880]
[63.53960037 156.28924561]
[70.23529053 142.86659241]
[76.93098450 129.44393921]
[71.78486633 124.55668640]
[67.65447998 118.78541565]
[64.68850708 112.33788300]
[62.99373245 105.44618988]
[62.63116074 98.35844421]
[63.61384583 91.32978821]
[65.90641022 84.61325073]
[69.42632294 78.45063782]
[59.14747238 67.52611542]
[48.86861801 56.60159302]
[33.77686691 51.85294342]
[30.69050407 37.28161621]
[20.41165161 26.35709381]
[10.13279724 15.43257236]
[1.88326859 11.26955509]
[-0.25933379 4.11462975]
[-10.26911640 -7.05695295]
[-20.27889824 -18.22853661]
[-30.28868103 -29.40011787]
[-40.29846191 -40.57170105]
[-50.30824280 -51.74328232]
[-65.27988434 -56.85802078]
[-68.01050568 -71.50018311]
[-78.02028656 -82.67176819]
[-88.03007507 -93.84335327]
[-96.17578125 -98.20601654]
[-98.14351654 -105.41099548]
[-107.87828827 -116.82301331]
[-117.61306763 -128.23503113]
[-127.34783936 -139.64704895]
[-142.62054443 -137.46806335]
[-156.63728333 -143.91278076]
[-164.92536926 -156.92474365]
[-164.84010315 -172.35186768]
[-156.40869141 -185.27142334]
[-142.32156372 -191.56082153]
[-127.07388306 -189.21313477]
[-115.53112030 -178.97750854]
[-111.37652588 -164.12008667]
[-115.93582153 -149.38182068]
[-106.20104980 -137.96980286]
[-96.46627045 -126.55779266]
[-86.73149872 -115.14577484]
[-76.85848999 -103.85313416]
[-66.84870911 -92.68154907]
[-56.83892441 -81.50997162]
[-42.58325195 -77.19429779]
[-39.13666153 -61.75306702]
[-29.12688065 -50.58148193]
[-19.11709785 -39.40990067]
[-9.10731506 -28.23831749]
[0.90246677 -17.06673431]
[10.91224861 -5.89515257]
[21.05731964 5.15371895]
[31.33617210 16.07824135]
[41.61502457 27.00276184]
[55.97156525 30.97001457]
[59.79314041 46.32273865]
[70.07199097 57.24726105]
[80.35084534 68.17178345]
[106.13299561 63.10134125]
[128.88868713 76.23934174]
[137.38862610 101.10255432]
[151.98896790 104.54204559]
[166.58930969 107.98152924]
[181.18963623 111.42102051]
[196.39628601 107.05423737]
[207.01028442 117.50373840]
[221.61062622 120.94322968]
[236.21096802 124.38271332]
[250.81130981 127.82220459]
[265.41165161 131.26168823]
[280.01199341 134.70117188]
[294.61233521 138.14067078]
[309.21267700 141.58015442]
[319.83084106 133.19337463]
[333.14825439 132.49714661]
[344.25305176 139.52235413]
[349.17968750 151.49337769]
[363.69192505 155.28738403]
[378.20419312 159.08137512]
[388.46633911 147.72590637]
[402.83416748 142.45108032]
[418.00607300 144.46900940]
[430.49563599 153.31599426]
[437.43286133 166.95907593]
[437.22363281 182.26315308]
[429.91601562 195.71147156]
[417.18923950 204.21369934]
[401.96783447 205.81610107]
[387.74957275 200.15043640]
[377.80172729 188.51864624]
[374.41018677 173.59362793]
[359.89791870 169.79963684]
[345.38568115 166.00563049]
[331.30484009 175.11590576]
[314.65277100 171.19512939]
[305.77319336 156.18049622]
[291.17285156 152.74099731]
[276.57250977 149.30151367]
[261.97216797 145.86203003]
[247.37182617 142.42254639]
[232.77148438 138.98304749]
[218.17114258 135.54356384]
[203.57080078 132.10408020]
[189.40847778 136.71687317]
[177.75015259 126.02136230]
[163.14981079 122.58187103]
[148.54946899 119.14238739]
[133.94914246 115.70289612]
[130.70088196 121.36773682]
[126.51696014 126.38134766]
[121.52486420 130.59092712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 15]
[5 14]
[6 13]
[7 12]
[23 75]
[24 74]
[25 73]
[27 71]
[28 70]
[29 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[38 61]
[39 60]
[40 59]
[42 58]
[43 57]
[44 56]
[45 55]
[78 125]
[79 124]
[80 123]
[81 122]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[89 114]
[90 113]
[94 110]
[95 109]
[96 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
