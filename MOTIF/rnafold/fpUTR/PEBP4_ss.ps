%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAAGUACUUGUGUCCGGGUGGUGGACUGGAUUAGCUGCGGAGCCCUGGAAGCUGCCUGUCCUUCUCCCUGUGCUUAACCAGAGGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[92.86208344 297.23016357]
[77.61077118 299.55416870]
[63.53342819 293.24291992]
[55.12208557 280.31030273]
[55.06077194 264.88305664]
[63.36904907 251.88397217]
[77.39578247 245.46101379]
[79.41645050 230.59773254]
[81.43712616 215.73446655]
[83.45779419 200.87118530]
[85.47846985 186.00791931]
[87.49913788 171.14463806]
[81.54687500 157.49107361]
[91.07269287 144.85900879]
[93.09336090 129.99572754]
[78.25490570 119.14915466]
[72.96543121 102.69943237]
[78.02673340 87.33239746]
[90.27922821 78.54170990]
[88.76170349 63.61866760]
[87.24417877 48.69562912]
[78.15043640 35.74903107]
[84.56044006 22.30428696]
[83.04291534 7.38124752]
[73.94917297 -5.56535101]
[80.35917664 -19.01009369]
[78.84165192 -33.93313217]
[77.32412720 -48.85617447]
[75.80660248 -63.77921295]
[66.71286011 -76.72581482]
[73.12286377 -90.17055511]
[71.60533905 -105.09358978]
[67.87089539 -110.95385742]
[67.82830048 -116.89986420]
[70.52429199 -121.07028198]
[70.01767731 -136.06172180]
[69.51107025 -151.05317688]
[69.00445557 -166.04461670]
[68.49784088 -181.03605652]
[58.37690735 -196.30393982]
[66.98406219 -211.49519348]
[65.97141266 -226.46096802]
[64.95877075 -241.42675781]
[55.37483978 -254.73390198]
[62.35301971 -269.57427979]
[78.71475220 -270.68139648]
[87.62849426 -256.91632080]
[79.92454529 -242.43939209]
[80.93719482 -227.47361755]
[81.94984436 -212.50784302]
[90.92205048 -204.20347595]
[91.77413940 -191.60314941]
[83.48928833 -181.54266357]
[83.99589539 -166.55122375]
[84.50251007 -151.55978394]
[85.00912476 -136.56834412]
[85.51573181 -121.57689667]
[86.52838135 -106.61111450]
[88.04590607 -91.68807983]
[97.03110504 -79.80887604]
[90.72964478 -65.29673767]
[92.24716949 -50.37369919]
[93.76469421 -35.45065689]
[95.28221893 -20.52761841]
[104.26741791 -8.64841557]
[97.96595764 5.86372280]
[99.48348236 20.78676224]
[108.46868134 32.66596603]
[102.16721344 47.17810440]
[103.68473816 62.10114288]
[105.20226288 77.02418518]
[124.16432953 87.58065033]
[128.36720276 111.94770050]
[141.60346985 119.00468445]
[157.30787659 115.72575378]
[169.57057190 126.07011414]
[168.98466492 142.10246277]
[155.99961853 151.52415466]
[140.57644653 147.10766602]
[134.54649353 132.24096680]
[121.31021118 125.18397522]
[107.95663452 132.01640320]
[105.93596649 146.87966919]
[111.74369812 161.59635925]
[102.36241150 173.16531372]
[100.34174347 188.02859497]
[98.32106781 202.89186096]
[96.30039978 217.75514221]
[94.27972412 232.61840820]
[92.25905609 247.48168945]
[104.06197357 257.41619873]
[108.59838104 272.16152954]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[14 83]
[15 82]
[19 71]
[20 70]
[21 69]
[23 67]
[24 66]
[26 64]
[27 63]
[28 62]
[29 61]
[31 59]
[32 58]
[35 57]
[36 56]
[37 55]
[38 54]
[39 53]
[41 50]
[42 49]
[43 48]
[73 81]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
