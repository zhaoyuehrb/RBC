%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGCGCCAUCAGUGUGGGCUGUGCCGUGGCUGGAAGUUACUGUGAGGCGGCGGCUAAGAAGGCGGCUCUGGUGGCGGCGGUGGAGGCUGAGGCGGCGGCCGAGGCGGCGACGGAGGAAACAGAAG\
) } def
/len { sequence length } bind def

/coor [
[91.92826080 127.36647797]
[105.54485321 121.07455444]
[120.45587158 119.43804932]
[107.22705078 112.36709595]
[93.24774170 112.63259125]
[85.70199585 100.86171722]
[72.47318268 93.79077148]
[59.24436188 86.71981812]
[46.01554108 79.64886475]
[32.78672409 72.57791901]
[19.55790329 65.50696564]
[6.32908487 58.43601227]
[-6.89973402 51.36506271]
[-20.12855339 44.29411316]
[-35.94655609 44.61244583]
[-43.52367020 31.78915977]
[-56.75248718 24.71821022]
[-69.36949921 27.71072960]
[-80.27221680 21.46537018]
[-83.83670807 9.83686256]
[-96.88801575 2.44339013]
[-109.93931580 -4.95008278]
[-129.64546204 2.08345199]
[-147.98658752 -7.37393761]
[-153.52775574 -26.95292664]
[-167.24090576 -33.03154755]
[-180.95404053 -39.11016464]
[-194.66719055 -45.18878555]
[-208.38034058 -51.26740646]
[-224.13206482 -49.78628922]
[-232.63198853 -62.01742172]
[-246.34513855 -68.09603882]
[-260.05828857 -74.17465973]
[-271.04336548 -63.66768265]
[-285.21490479 -58.16896820]
[-300.41183472 -58.51702881]
[-314.31677246 -64.65879059]
[-324.80929565 -75.65767670]
[-330.28936768 -89.83644104]
[-329.92132568 -105.03292084]
[-323.76126099 -118.92976379]
[-312.74859619 -129.40780640]
[-298.56262207 -134.86921692]
[-283.36663818 -134.48117065]
[-269.47790527 -128.30285645]
[-259.01437378 -117.27639771]
[-253.57162476 -103.08326721]
[-253.97966003 -87.88780975]
[-240.26651001 -81.80918884]
[-226.55337524 -75.73056793]
[-211.78250122 -77.64646912]
[-202.30171204 -64.98055267]
[-188.58857727 -58.90193176]
[-174.87542725 -52.82331085]
[-161.16227722 -46.74469376]
[-147.44912720 -40.66607285]
[-139.99264526 -46.69538116]
[-130.77873230 -49.55517960]
[-121.10238647 -48.79831314]
[-112.34040833 -44.48914719]
[-105.75550842 -37.20055771]
[-102.31435394 -27.93809700]
[-102.54584503 -18.00138855]
[-89.49454498 -10.60791492]
[-76.44323730 -3.21444178]
[-58.97623825 -4.35008574]
[-49.68153763 11.48939037]
[-36.45272064 18.56034088]
[-21.58092880 17.73624611]
[-13.05760193 31.06529236]
[0.17121717 38.13624191]
[13.40003586 45.20719528]
[26.62885475 52.27814484]
[39.85767365 59.34909821]
[53.08649445 66.42004395]
[66.31531525 73.49099731]
[79.54412842 80.56195068]
[92.77294922 87.63290405]
[106.75225830 87.36740875]
[114.29800415 99.13828278]
[127.52681732 106.20922852]
[141.93327332 110.38702393]
[156.89263916 111.49049377]
[165.57873535 98.90086365]
[179.30955505 92.39228821]
[194.35459900 93.62223816]
[206.68150330 102.16059113]
[213.03669739 115.63192749]
[227.99606323 116.73539734]
[242.95541382 117.83886719]
[254.85983276 107.79283905]
[270.01501465 109.12501526]
[279.51901245 120.53595734]
[294.47836304 121.63942719]
[309.43774414 122.74289703]
[323.96115112 115.12696838]
[337.67187500 124.12409973]
[336.46545410 140.47880554]
[321.58300781 147.36677551]
[308.33425903 137.70225525]
[293.37490845 136.59878540]
[278.41555786 135.49531555]
[267.34008789 145.38822937]
[252.15345764 144.48225403]
[241.85194397 132.79821777]
[226.89259338 131.69476318]
[211.93324280 130.59129333]
[203.67016602 142.98431396]
[190.22384644 149.62152100]
[175.16116333 148.63059998]
[162.53396606 140.17773438]
[155.78916931 126.44985199]
[140.82980347 125.34638214]
[152.55152893 134.70593262]
[160.68954468 147.30644226]
[164.39941406 161.84042358]
[163.29620361 176.79980469]
[157.49438477 190.63232422]
[147.59594727 201.90269470]
[134.62802124 209.44145203]
[119.93618774 212.46635437]
[105.04492950 210.66351318]
[91.49939728 204.22001648]
[80.70513916 193.80445862]
[73.78219604 180.49757385]
[71.44892120 165.68016052]
[73.94741821 150.88970947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 81]
[4 80]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[13 71]
[14 70]
[16 68]
[17 67]
[20 65]
[21 64]
[22 63]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[31 50]
[32 49]
[33 48]
[82 113]
[83 112]
[88 107]
[89 106]
[90 105]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
