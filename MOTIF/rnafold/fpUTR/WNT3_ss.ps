%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUCCGCGCUGGGCUCGGGAGGGGGGCGGCUGCGGGUGGAGGUGCGCUUCUGACAAGCCCGAAAGUCAUUUCCAAUCUCAAGUGGACUUUGUUCCAACUAUUGGGGGCGUCGCUCCCCCUCUUCAUGGUCGCGGGCAAACUUCCUCCUCGGCGCCUCUUCUA\
) } def
/len { sequence length } bind def

/coor [
[283.40481567 467.96038818]
[276.49276733 454.64785767]
[269.58068848 441.33532715]
[263.67999268 436.82699585]
[262.66650391 427.70092773]
[256.01068115 414.25845337]
[249.35488892 400.81597900]
[242.69909668 387.37350464]
[236.04330444 373.93099976]
[229.25906372 360.55288696]
[222.34698486 347.24035645]
[215.43492126 333.92782593]
[205.09602356 333.57241821]
[195.77598572 328.89923096]
[189.20521545 320.70025635]
[186.63507080 310.42886353]
[188.59992981 299.94229126]
[194.80781555 291.16580200]
[188.67178345 277.47824097]
[182.53576660 263.79067993]
[176.39973450 250.10313416]
[170.26370239 236.41557312]
[164.12767029 222.72802734]
[157.99163818 209.04046631]
[151.85560608 195.35292053]
[145.71958923 181.66535950]
[139.45274353 168.03720093]
[133.05564880 154.46969604]
[126.65856171 140.90219116]
[120.26147461 127.33467865]
[113.86438751 113.76717377]
[101.81414795 121.92831421]
[85.70712280 119.85926056]
[73.84321594 106.41740417]
[59.37941360 102.44268036]
[44.91561127 98.46796417]
[30.45180893 94.49324036]
[15.98800755 90.51851654]
[1.35051048 87.24076080]
[-13.42711639 84.66748047]
[-28.20474243 82.09420776]
[-42.98236847 79.52093506]
[-57.75999832 76.94765472]
[-72.96365356 83.09426880]
[-85.72030640 72.78894043]
[-82.90700531 56.63290787]
[-67.41783142 51.24611664]
[-55.18672180 62.17003250]
[-40.40909576 64.74330902]
[-25.63146782 67.31658173]
[-10.85384178 69.88985443]
[3.92378545 72.46313477]
[-2.19469023 58.76772308]
[4.52291155 45.35601807]
[19.15496635 42.05405045]
[30.98135567 51.28099442]
[31.33752251 66.27676392]
[19.96273041 76.05471039]
[34.42653275 80.02943420]
[48.89033508 84.00415802]
[63.35413742 87.97888184]
[77.81793976 91.95360565]
[88.82302094 81.76104736]
[85.96715546 67.03542328]
[83.11128998 52.30979538]
[80.25541687 37.58417130]
[77.39955139 22.85854721]
[74.54368591 8.13292217]
[71.54691315 -6.56467390]
[68.40950012 -21.23289299]
[65.27208710 -35.90111160]
[62.13467789 -50.56933212]
[47.89699554 -56.73925781]
[40.03406525 -70.11662292]
[41.56934357 -85.55756378]
[51.91248322 -97.12471008]
[67.08634186 -100.37027740]
[81.25625610 -94.04626465]
[88.97360992 -80.58438110]
[87.27091217 -65.16101074]
[76.80290222 -53.70674133]
[79.94030762 -39.03852081]
[83.07772064 -24.37030411]
[86.21512604 -9.70208359]
[90.71026611 -3.79134703]
[89.26931000 5.27705574]
[92.12517548 20.00267982]
[94.98104095 34.72830582]
[97.83691406 49.45392990]
[100.69277954 64.17955780]
[103.54864502 78.90518188]
[118.04985046 82.74118805]
[127.81340790 71.35378265]
[137.57695007 59.96637344]
[147.34051514 48.57896423]
[157.10406494 37.19155884]
[153.37971497 22.12806511]
[159.25192261 7.76503134]
[172.46272278 -0.37466124]
[187.93226624 0.83886439]
[199.71221924 10.93898296]
[203.27293396 26.04199219]
[197.24525452 40.34047699]
[183.94694519 48.33638000]
[168.49147034 46.95511246]
[158.72792053 58.34251785]
[148.96437073 69.72992706]
[139.20080566 81.11733246]
[129.43725586 92.50473785]
[127.43190002 107.37008667]
[133.82897949 120.93759155]
[140.22607422 134.50509644]
[146.62315369 148.07261658]
[153.02024841 161.64012146]
[159.54109192 168.10470581]
[159.40713501 175.52932739]
[165.54316711 189.21688843]
[171.67919922 202.90443420]
[177.81523132 216.59199524]
[183.95126343 230.27955627]
[190.08728027 243.96710205]
[196.22331238 257.65466309]
[202.35934448 271.34222412]
[208.49537659 285.02975464]
[227.59779358 291.11492920]
[236.00607300 308.98004150]
[228.74745178 327.01577759]
[235.65951538 340.32830811]
[242.57157898 353.64083862]
[249.33525085 359.85089111]
[249.48577881 367.27520752]
[256.14157104 380.71768188]
[262.79736328 394.16018677]
[269.45318604 407.60266113]
[276.10897827 421.04513550]
[282.89321899 434.42324829]
[289.80526733 447.73577881]
[296.71734619 461.04830933]
[311.29516602 457.24899292]
[326.35293579 456.78930664]
[341.13537598 459.69235229]
[354.90097046 465.81246948]
[366.95925903 474.84271240]
[376.70544434 486.33010864]
[383.65060425 499.69842529]
[387.44638062 514.27716064]
[387.90240479 529.33508301]
[384.99578857 544.11676025]
[378.87231445 557.88092041]
[369.83917236 569.93701172]
[358.34942627 579.68041992]
[344.97940063 586.62231445]
[330.39974976 590.41455078]
[315.34173584 590.86694336]
[300.56072998 587.95672607]
[286.79809570 581.82995605]
[274.74417114 572.79388428]
[265.00357056 561.30175781]
[258.06491089 547.93005371]
[254.27616882 533.34948730]
[253.82745361 518.29138184]
[256.74124146 503.51107788]
[262.87136841 489.74990845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[5 135]
[6 134]
[7 133]
[8 132]
[9 131]
[10 129]
[11 128]
[12 127]
[18 124]
[19 123]
[20 122]
[21 121]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[34 62]
[35 61]
[36 60]
[37 59]
[38 58]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 84]
[70 83]
[71 82]
[72 81]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
