%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUUAUUUCAGGAAUCCAUCAACAUCCUUUGCAGCUACAUAGGCAGGAAAAUCUAGAAAUUGUAAUUUAUAUAGAAUUUUAAAACUCUUCAAUUACA\
) } def
/len { sequence length } bind def

/coor [
[170.16993713 180.00721741]
[155.86573792 184.52273560]
[142.42596436 177.86145020]
[137.35710144 163.74386597]
[143.49021912 150.05500793]
[157.39895630 144.44046021]
[144.65307617 136.53208923]
[131.90719604 128.62370300]
[119.16131592 120.71531677]
[106.41543579 112.80693817]
[92.44805145 112.17141724]
[85.67618561 99.93894196]
[72.93030548 92.03056335]
[60.18442154 84.12218475]
[40.15469742 84.57438660]
[31.41339111 67.45014954]
[18.19159126 60.36608505]
[4.96979094 53.28201675]
[-2.09388232 58.61728668]
[-10.41728020 61.52867889]
[-19.19791985 61.75766754]
[-27.59597778 59.30328751]
[-34.81460953 54.42022324]
[-40.17556000 47.59255219]
[-43.18287277 39.48580551]
[-43.56871796 30.88214111]
[-41.31711578 22.60486984]
[-52.95931244 13.14658070]
[-64.60150909 3.68829036]
[-80.19123840 0.99183309]
[-85.19069672 -13.03866005]
[-96.83289337 -22.49695015]
[-112.52542114 -20.62079620]
[-124.89653778 -30.45598793]
[-126.60668182 -46.16748047]
[-116.64124298 -58.43392181]
[-100.91255188 -59.97785187]
[-88.75215149 -49.88328552]
[-87.37460327 -34.13914871]
[-75.73240662 -24.68085670]
[-60.97539902 -22.66092110]
[-55.14322281 -7.95390654]
[-43.50102615 1.50438333]
[-31.85882759 10.96267319]
[-10.60847092 6.07138109]
[7.87230492 18.12878418]
[12.05385685 40.06021881]
[25.27565765 47.14428329]
[38.49745941 54.22834778]
[48.19315720 50.34966278]
[58.61918640 52.59295654]
[66.16964722 60.43560028]
[68.09280396 71.37629700]
[80.83868408 79.28468323]
[93.58456421 87.19306183]
[107.55194855 87.82858276]
[114.32381439 100.06105804]
[127.06969452 107.96943665]
[139.81558228 115.87781525]
[152.56146240 123.78620148]
[165.30734253 131.69458008]
[178.74725342 138.35557556]
[192.75946045 143.70887756]
[206.77168274 149.06216431]
[220.78390503 154.41546631]
[234.79611206 159.76875305]
[248.80833435 165.12205505]
[262.82055664 170.47534180]
[271.42706299 163.64213562]
[282.03814697 161.11648560]
[292.64007568 163.30654907]
[301.25079346 169.73214722]
[306.29058838 179.12802124]
[306.87164307 189.69245911]
[320.31155396 196.35345459]
[333.75146484 203.01445007]
[346.49420166 194.44017029]
[361.81796265 193.40199280]
[375.60073853 200.17919922]
[384.13504028 212.94874573]
[385.12518311 228.27568054]
[378.30480957 242.03715515]
[365.50857544 250.53138733]
[350.17858887 251.47348022]
[336.43856812 244.61000061]
[327.98449707 231.78721619]
[327.09045410 216.45436096]
[313.65054321 209.79336548]
[300.21063232 203.13237000]
[282.48678589 210.81956482]
[264.43453979 203.14309692]
[257.46725464 184.48756409]
[243.45504761 179.13426208]
[229.44282532 173.78097534]
[215.43060303 168.42767334]
[201.41839600 163.07438660]
[187.40617371 157.72109985]
[173.39395142 152.36779785]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 61]
[7 60]
[8 59]
[9 58]
[10 57]
[12 55]
[13 54]
[14 53]
[16 49]
[17 48]
[18 47]
[27 44]
[28 43]
[29 42]
[31 40]
[32 39]
[62 98]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
[68 92]
[74 89]
[75 88]
[76 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
