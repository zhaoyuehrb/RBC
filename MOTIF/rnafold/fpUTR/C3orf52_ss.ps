%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGGGGAGGUCGCUCGACUCGCCGGCGCUGUGGCCUCCCGCGGAGCCGCUCAGACUUUCCCUGCCGGCAC\
) } def
/len { sequence length } bind def

/coor [
[99.24883270 304.61386108]
[102.22973633 289.38580322]
[113.61507416 278.84286499]
[111.70980072 263.96435547]
[109.80453491 249.08584595]
[107.89926910 234.20733643]
[105.99400330 219.32882690]
[104.08873749 204.45033264]
[102.18346405 189.57182312]
[100.27819824 174.69331360]
[98.37293243 159.81480408]
[96.15229034 144.98008728]
[93.61727905 130.19584656]
[91.08226776 115.41161346]
[80.25292969 105.03253174]
[65.37442017 103.12726593]
[54.00610733 113.86483765]
[38.39254761 114.73127747]
[25.90598106 105.31746674]
[22.44218826 90.06833649]
[29.63666344 76.18404388]
[44.09239578 70.22033691]
[58.98382950 74.99308777]
[67.27968597 88.24875641]
[82.15819550 90.15402222]
[94.02611542 80.98056030]
[95.93138123 66.10205078]
[97.83664703 51.22354507]
[99.74191284 36.34503937]
[93.82015228 21.67386818]
[103.11137390 10.03245640]
[105.01663971 -4.84605074]
[106.92190552 -19.72455788]
[108.82717896 -34.60306168]
[110.73244476 -49.48157120]
[112.63771057 -64.36007690]
[105.81275177 -79.27154541]
[115.53322601 -92.47928619]
[131.79954529 -90.39630127]
[137.87831116 -75.16539001]
[127.51622009 -62.45481110]
[125.61094666 -47.57630157]
[123.70568085 -32.69779587]
[121.80041504 -17.81929016]
[119.89514923 -2.94078326]
[117.98988342 11.93772316]
[124.04792023 25.54468536]
[114.62042236 38.25030518]
[112.71515656 53.12881470]
[110.80989075 68.00731659]
[108.90461731 82.88582611]
[114.60366058 89.03201294]
[116.90091705 96.62147522]
[115.70477295 104.00282288]
[111.64391327 109.73674774]
[105.86650848 112.87660217]
[108.40151978 127.66084290]
[110.93653107 142.44508362]
[115.59671021 150.65936279]
[113.25144196 157.90954590]
[115.15670776 172.78804016]
[117.06197357 187.66654968]
[118.96723938 202.54505920]
[120.87250519 217.42356873]
[122.77777863 232.30207825]
[124.68304443 247.18057251]
[126.58831024 262.05908203]
[128.49357605 276.93759155]
[142.16813660 284.27148438]
[148.88998413 298.25708008]
[146.07444763 313.51657104]
[134.80416870 324.18240356]
[119.41276550 326.15335083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 68]
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[12 58]
[13 57]
[14 56]
[15 25]
[16 24]
[26 51]
[27 50]
[28 49]
[29 48]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
