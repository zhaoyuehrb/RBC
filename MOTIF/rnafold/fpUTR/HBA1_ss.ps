%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAACCCUGGCGCGCUCGCGGCCCGGCACUCUUCUGGUCCCCACAGACUCAGAGAGAACCCACC\
) } def
/len { sequence length } bind def

/coor [
[96.63938904 137.69636536]
[89.21926880 136.27789307]
[82.22871399 133.41392517]
[75.94625092 129.21859741]
[70.62220764 123.85905457]
[66.46871185 117.54885101]
[63.65127182 110.53941345]
[62.28213882 103.11003876]
[47.38508224 101.35571289]
[32.77470016 107.42590332]
[21.03969002 98.25318146]
[6.14263248 96.49885559]
[-8.75442505 94.74452209]
[-23.68851471 93.33990479]
[-38.65142822 92.28575897]
[-53.14965820 99.94953156]
[-66.88996124 90.99765015]
[-65.73748779 74.63904572]
[-50.87781143 67.70204926]
[-37.59728622 77.32284546]
[-22.63437271 78.37699127]
[-15.49514961 75.60781097]
[-7.00009537 79.84746552]
[7.89696217 81.60179901]
[22.79401970 83.35612488]
[36.33886719 77.16044617]
[49.13941193 86.45864868]
[64.03646851 88.21298218]
[79.93865967 67.90869141]
[105.15705872 62.50714493]
[127.98058319 74.51674652]
[140.85215759 66.81463623]
[153.72373962 59.11252213]
[166.59530640 51.41040802]
[172.60856628 44.06320953]
[180.25569153 43.66528702]
[193.47413635 36.57495880]
[206.69258118 29.48463058]
[219.74118042 22.08637810]
[232.61274719 14.38426399]
[245.48432922 6.68215132]
[249.09213257 -8.70483494]
[262.56732178 -16.96285820]
[277.91528320 -13.19258118]
[286.03039551 0.36915892]
[282.09805298 15.67642117]
[268.45126343 23.64768028]
[253.18644714 19.55372620]
[240.31486511 27.25584030]
[227.44328308 34.95795441]
[223.17523193 41.31566238]
[213.78291321 42.70307541]
[200.56446838 49.79340363]
[187.34602356 56.88372803]
[174.29742432 64.28198242]
[161.42584229 71.98409271]
[148.55427551 79.68621063]
[135.68269348 87.38832092]
[137.47668457 94.72669983]
[137.77742004 102.27519226]
[136.57290649 109.73302460]
[133.91116333 116.80305481]
[129.89822388 123.20356750]
[124.69400787 128.67953491]
[118.50585175 133.01277161]
[111.58033752 136.03060913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 28]
[9 27]
[11 25]
[12 24]
[13 23]
[14 21]
[15 20]
[31 58]
[32 57]
[33 56]
[34 55]
[36 54]
[37 53]
[38 52]
[39 50]
[40 49]
[41 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
