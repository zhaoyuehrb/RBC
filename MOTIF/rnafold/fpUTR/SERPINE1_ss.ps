%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCCACAGAGGAGCACAGCUGUGUUUGGCUGCAGGGCCAAGAGCGCUGUCAAGAAGACCCACACGCCCCCCUCCAGCAGCUGAAUUCCUGCAGCUCAGCAGCCGCCGCCAGAGCAGGACGAACCGCCAAUCGCAAGGCACCUCUGAGAACUUCAGG\
) } def
/len { sequence length } bind def

/coor [
[73.81449890 271.46102905]
[67.74218750 257.60525513]
[66.25077057 242.55101013]
[69.48635101 227.77311707]
[77.13193512 214.71937561]
[88.43849945 204.66865540]
[102.29833221 198.60563660]
[100.80952454 183.67970276]
[99.32071686 168.75376892]
[97.83190918 153.82783508]
[96.34310150 138.90190125]
[94.85430145 123.97597504]
[83.27805328 120.22174072]
[74.25218964 110.89554596]
[70.41669464 97.65148926]
[73.38008881 83.35678864]
[83.18888855 71.47220612]
[98.15581512 65.21804810]
[115.12192535 66.72608185]
[105.27854156 55.40761566]
[95.43515015 44.08914566]
[85.59176636 32.77067566]
[75.74838257 21.45220757]
[63.88927078 22.95147705]
[52.90074921 18.56067276]
[45.49251556 9.48796177]
[43.43033218 -1.92000163]
[47.11623383 -12.78441525]
[37.73061371 -24.48527527]
[28.34499359 -36.18613434]
[18.95937157 -47.88699341]
[9.57375050 -59.58785248]
[0.18812971 -71.28871155]
[-9.19749165 -82.98957062]
[-18.58311272 -94.69042969]
[-27.96873283 -106.39128876]
[-37.35435486 -118.09215546]
[-51.08123398 -115.25215912]
[-64.62511444 -118.59918976]
[-75.34664154 -127.42206573]
[-81.18196106 -139.94833374]
[-81.03986359 -153.70008850]
[-75.00538635 -165.98413086]
[-84.15650940 -177.86929321]
[-93.30764008 -189.75444031]
[-102.57646942 -201.54803467]
[-111.96208954 -213.24888611]
[-121.34770966 -224.94975281]
[-130.73333740 -236.65060425]
[-144.34301758 -230.17965698]
[-159.07827759 -227.02232361]
[-174.14447021 -227.34889221]
[-188.72908020 -231.14173889]
[-202.04559326 -238.19633484]
[-213.37585449 -248.13221741]
[-222.10885620 -260.41357422]
[-227.77360535 -274.37808228]
[-230.06463623 -289.27264404]
[-228.85838318 -304.29400635]
[-224.21990967 -318.63211060]
[-216.39935303 -331.51370239]
[-205.81846619 -342.24411011]
[-193.04788208 -350.24465942]
[-178.77627563 -355.08386230]
[-163.77330017 -356.50076294]
[-148.84805298 -354.41894531]
[-134.80545044 -348.95071411]
[-122.40276337 -340.39089966]
[-112.30887604 -329.20117188]
[-105.06812286 -315.98495483]
[-101.07099915 -301.45498657]
[-100.53305817 -286.39486694]
[-103.48332214 -271.61676025]
[-109.76266479 -257.91763306]
[-119.03247070 -246.03622437]
[-109.64685059 -234.33537292]
[-100.26123047 -222.63450623]
[-90.87561035 -210.93365479]
[-84.20072174 -207.66589355]
[-81.42248535 -198.90556335]
[-72.27135468 -187.02041626]
[-63.12022781 -175.13525391]
[-47.18624115 -177.66696167]
[-32.05696106 -171.79849243]
[-21.88099670 -159.03787231]
[-19.49950790 -142.79655457]
[-25.65349579 -127.47777557]
[-16.26787376 -115.77691650]
[-6.88225317 -104.07605743]
[2.50336814 -92.37519073]
[11.88898945 -80.67433167]
[21.27461052 -68.97347260]
[30.66023254 -57.27261734]
[40.04585266 -45.57175446]
[49.43147278 -33.87089539]
[58.81709671 -22.17003632]
[77.06338501 -21.30986023]
[89.13524628 -7.18003273]
[87.06684875 11.60882092]
[96.91023254 22.92728996]
[106.75362396 34.24575806]
[116.59700775 45.56422806]
[126.44039154 56.88269806]
[140.73364258 61.43277359]
[155.30868530 57.88760757]
[169.84774780 54.19771576]
[184.34942627 50.36346817]
[198.81227112 46.38523865]
[213.23483276 42.26342010]
[224.24195862 30.10713768]
[240.21400452 33.82548523]
[244.72029114 49.59334564]
[233.12513733 61.19009781]
[217.35665894 56.68599701]
[202.93408203 60.80781174]
[197.33633423 65.69631958]
[188.18367004 64.86514282]
[173.68200684 68.69939423]
[167.98815918 73.47563934]
[158.85385132 72.46264648]
[144.27880859 76.00781250]
[143.09082031 83.41313171]
[157.90141296 85.78934479]
[155.52494812 100.59989929]
[140.71484375 98.22376251]
[139.52687073 105.62907410]
[152.26161194 113.55536652]
[164.99636841 121.48165894]
[179.32203674 115.51889038]
[194.40875244 119.14807892]
[204.45533752 130.97370911]
[205.59867859 146.44860840]
[197.39915466 159.62234497]
[183.00964355 165.42935181]
[167.96319580 161.63673401]
[158.04548645 149.70280457]
[157.07006836 134.21641541]
[144.33532715 126.29011536]
[131.60057068 118.36382294]
[120.30187225 122.80893707]
[109.78022766 122.48716736]
[111.26903534 137.41310120]
[112.75784302 152.33903503]
[114.24665070 167.26496887]
[115.73545837 182.19090271]
[117.22426605 197.11682129]
[132.00863647 200.32269287]
[145.07771301 207.94203186]
[155.15113831 219.22836304]
[161.24200439 233.07597351]
[162.75360107 248.12823486]
[159.53782654 262.91046143]
[151.90974426 275.97442627]
[140.61666870 286.04028320]
[126.76496887 292.12185669]
[111.71170807 293.62338257]
[96.93164825 290.39770508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 146]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[19 103]
[20 102]
[21 101]
[22 100]
[23 99]
[28 96]
[29 95]
[30 94]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[36 88]
[37 87]
[43 82]
[44 81]
[45 80]
[46 78]
[47 77]
[48 76]
[49 75]
[104 121]
[105 120]
[106 118]
[107 117]
[108 115]
[109 114]
[126 139]
[127 138]
[128 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
