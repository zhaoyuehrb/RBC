%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACCCCGCCCCUCCCGCUGGGGCCCGGGGCGCUAGAGCGCUCCGGGAGGCUAGGGGAGCUGAAUUCUGCGUCUUCCUUUAGGCUGCGGCGAGACAAUCCCCAGAGCCCCGCGGCCCGGCCUCGGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[95.09667969 210.82514954]
[94.74504089 195.82926941]
[83.82523346 185.76481628]
[83.25499725 170.56187439]
[93.88556671 159.17640686]
[93.53392792 144.18052673]
[93.18228912 129.18464661]
[92.83065033 114.18877411]
[78.93904877 108.52984619]
[68.20884705 119.01139069]
[57.47864151 129.49293518]
[46.74843979 139.97447205]
[36.01823425 150.45600891]
[37.37877274 166.03430176]
[28.36518669 178.81275940]
[13.23341274 182.75781250]
[-0.87178761 176.00671387]
[-7.29036951 161.74713135]
[-2.99167514 146.71199036]
[9.99458313 138.00044250]
[25.53669167 139.72581482]
[36.26689529 129.24426270]
[46.99710083 118.76272583]
[57.72730637 108.28118134]
[68.45751190 97.79964447]
[63.78882217 83.54470062]
[48.93698502 81.44162750]
[34.08514786 79.33855438]
[19.23330879 77.23548126]
[4.38147163 75.13240814]
[-10.47036648 73.02933502]
[-25.32220459 70.92626190]
[-40.17404175 68.82318878]
[-55.02587891 66.72011566]
[-70.02684021 73.34605408]
[-83.10407257 63.45069504]
[-80.80483246 47.21353149]
[-65.49438477 41.33796692]
[-52.92280579 51.86827850]
[-38.07096863 53.97135162]
[-23.21913147 56.07442474]
[-8.36729336 58.17749786]
[6.48454428 60.28057098]
[21.33638191 62.38364410]
[36.18822098 64.48671722]
[51.04005814 66.58979034]
[65.89189911 68.69286346]
[104.69967651 88.56148529]
[116.36423492 79.13079834]
[128.02879333 69.70010376]
[139.69335938 60.26940918]
[151.35792542 50.83871460]
[163.02249146 41.40802383]
[167.83024597 17.83248901]
[190.27333069 11.07537174]
[198.27507019 -1.61210871]
[206.27680969 -14.29958916]
[214.27854919 -26.98707008]
[222.28028870 -39.67455292]
[220.20024109 -52.46574020]
[227.20190430 -62.88965988]
[239.04632568 -65.62003326]
[247.34329224 -78.11644745]
[244.42517090 -93.41751099]
[253.01750183 -105.97245026]
[267.62271118 -108.66013336]
[275.91967773 -121.15654755]
[284.06958008 -133.74935913]
[292.07131958 -146.43684387]
[300.07305908 -159.12431335]
[308.07479858 -171.81179810]
[315.92727661 -184.59220886]
[323.62936401 -197.46377563]
[331.33148193 -210.33535767]
[339.03359985 -223.20692444]
[334.93966675 -238.47177124]
[342.91091919 -252.11854553]
[358.21817017 -256.05087280]
[371.77990723 -247.93579102]
[375.55020142 -232.58779907]
[367.29217529 -219.11260986]
[351.90518188 -215.50482178]
[344.20306396 -202.63323975]
[336.50094604 -189.76167297]
[328.79882812 -176.89009094]
[328.05682373 -169.46575928]
[320.76226807 -163.81005859]
[312.76052856 -151.12257385]
[304.75878906 -138.43510437]
[296.75704956 -125.74761963]
[295.84118652 -118.34272766]
[288.41607666 -112.85957336]
[280.11911011 -100.36316681]
[283.31024170 -85.85964203]
[275.07397461 -73.06830597]
[259.83969116 -69.81948090]
[251.54273987 -57.32307053]
[251.43597412 -39.81435394]
[234.96777344 -31.67281151]
[226.96603394 -18.98533058]
[218.96429443 -6.29785061]
[210.96255493 6.38963032]
[202.96081543 19.07711220]
[205.50219727 23.10078621]
[207.14251709 27.56821442]
[207.80871582 32.28040695]
[207.47113037 37.02746964]
[220.51971436 44.42572403]
[233.56831360 51.82397461]
[249.95381165 51.15481949]
[258.49624634 65.15334320]
[250.40791321 79.41906738]
[234.00938416 79.27663422]
[226.17005920 64.87257385]
[213.12145996 57.47431946]
[200.07287598 50.07606506]
[191.77880859 55.07617188]
[181.98519897 56.18973541]
[172.45318604 53.07258606]
[160.78862000 62.50328064]
[149.12405396 71.93397522]
[137.45948792 81.36466217]
[125.79492950 90.79535675]
[114.13037109 100.22605133]
[107.82653046 113.83713531]
[108.17816925 128.83300781]
[108.52980804 143.82888794]
[108.88144684 158.82476807]
[120.03399658 169.69943237]
[120.17697906 184.91239929]
[109.74092102 195.47763062]
[110.09255981 210.47351074]
[112.73424530 229.67433167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 132]
[2 131]
[5 128]
[6 127]
[7 126]
[8 125]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
[53 119]
[55 103]
[56 102]
[57 101]
[58 100]
[59 99]
[62 97]
[63 96]
[66 93]
[67 92]
[68 90]
[69 89]
[70 88]
[71 87]
[72 85]
[73 84]
[74 83]
[75 82]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
