%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAUUACUCUCUUCCAUAUUGGUUAACAGUAGAAGGCUCAGUUUCUCUGCUCAUCACACGGCCUUCGGCACUGUAGCUUUGGGUGGUGGGCUGCAGAUUAAUUUUGUAACCACCUUAAGAAAAAUACGGAACUCUAACUCCUUGCCACUCAAGAA\
) } def
/len { sequence length } bind def

/coor [
[1.16108298 172.11064148]
[0.30302709 187.08609009]
[-3.92469501 201.47796631]
[-11.30233288 214.53823853]
[-21.44640541 225.58801270]
[-33.82963943 234.05297852]
[-47.80837250 239.49310303]
[-62.65600967 241.62564087]
[-77.60079193 240.33973694]
[-91.86590576 235.70222473]
[-104.70987701 227.95416260]
[-115.46508789 217.49829102]
[-123.57250214 204.87806702]
[-128.61070251 190.74949646]
[-130.31782532 175.84695435]
[-128.60511780 160.94505310]
[-123.56160736 146.81837463]
[-115.44946289 134.20120239]
[-104.69032288 123.74935913]
[-91.84345245 116.00611877]
[-77.57659912 111.37396240]
[-62.62784576 110.09376526]
[-76.13306427 103.56620026]
[-89.63827515 97.03863525]
[-103.14349365 90.51106262]
[-116.64871216 83.98349762]
[-125.79342651 83.05493927]
[-130.35685730 77.18782806]
[-143.72875977 70.39134979]
[-157.10067749 63.59486771]
[-170.47257996 56.79838562]
[-190.49107361 58.83319473]
[-200.42697144 42.28311157]
[-214.06010437 36.02707672]
[-227.69322205 29.77104187]
[-241.32633972 23.51500511]
[-254.95947266 17.25897026]
[-268.59259033 11.00293446]
[-282.22570801 4.74689913]
[-296.41552734 -0.11612153]
[-311.02014160 -3.53748822]
[-325.62472534 -6.95885468]
[-339.96051025 0.24289131]
[-354.46832275 -6.60562801]
[-358.01907349 -22.25081444]
[-347.88888550 -34.69102097]
[-331.84878540 -34.38318634]
[-322.20336914 -21.56345177]
[-307.59875488 -18.14208412]
[-292.99417114 -14.72071838]
[-302.34286499 -26.45109749]
[-304.70483398 -41.26396561]
[-299.46792603 -55.32008743]
[-287.98941040 -64.97636414]
[-273.24432373 -67.73005676]
[-259.05435181 -62.86745071]
[-249.09729004 -51.64885712]
[-245.95382690 -36.98193741]
[-250.43867493 -22.66809464]
[-261.38946533 -12.41723156]
[-275.96966553 -8.88622284]
[-262.33654785 -2.63018751]
[-248.70343018 3.62584805]
[-235.07031250 9.88188362]
[-221.43717957 16.13791847]
[-207.80406189 22.39395523]
[-194.17094421 28.64999008]
[-184.88317871 24.22834015]
[-174.48127747 25.70969772]
[-166.46778870 32.84099960]
[-163.67608643 43.42647934]
[-150.30418396 50.22296143]
[-136.93228149 57.01944351]
[-123.56037903 63.81592560]
[-110.12114716 70.47828674]
[-96.61592865 77.00585175]
[-83.11071014 83.53341675]
[-69.60549927 90.06098175]
[-56.10028076 96.58854675]
[-41.39958191 99.57007599]
[-26.41834831 98.82000732]
[-11.43711281 98.06993866]
[3.54412198 97.31987762]
[18.52535629 96.56980896]
[33.50659180 95.81974030]
[48.48782730 95.06967163]
[63.46906281 94.31960297]
[78.45029449 93.56953430]
[92.10636139 72.46164703]
[123.01571655 73.88993835]
[134.76986694 64.57115936]
[140.77702332 49.93473816]
[155.55706787 48.09091949]
[167.31121826 38.77213669]
[179.06538391 29.45335197]
[190.81953430 20.13456726]
[202.57369995 10.81578159]
[214.32785034 1.49699688]
[217.59062195 -14.21076870]
[231.97021484 -21.32460403]
[246.43585205 -14.38738537]
[249.89073181 1.27924871]
[239.68455505 13.65719604]
[223.64663696 13.25115585]
[211.89248657 22.56994057]
[200.13832092 31.88872528]
[188.38415527 41.20751190]
[176.63000488 50.52629471]
[164.87583923 59.84508133]
[159.70944214 73.81495667]
[144.08865356 76.32531738]
[132.33450317 85.64410400]
[132.18443298 93.14260101]
[146.96734619 90.59983826]
[161.75024414 88.05708313]
[176.53315735 85.51432037]
[188.54158020 76.52555847]
[203.48840332 75.26369476]
[216.83384705 82.11199951]
[224.52447510 94.99044037]
[224.22442627 109.98743439]
[216.02482605 122.54795074]
[202.41615295 128.85697937]
[187.53175354 126.99828339]
[175.89231873 117.53614044]
[161.22297668 114.40396118]
[146.55363464 111.27177429]
[131.88430786 108.13959503]
[131.73423767 115.63809204]
[143.10614014 125.41970062]
[154.47804260 135.20129395]
[169.54742432 131.50085449]
[183.90113831 137.39584351]
[192.01986694 150.61952209]
[190.78179932 166.08712769]
[180.66300964 177.85104370]
[165.55436707 181.38780212]
[151.26545715 175.33744812]
[143.29066467 162.02647400]
[144.69644165 146.57321167]
[133.32453918 136.79161072]
[121.95263672 127.01000214]
[101.88370514 130.64237976]
[85.88060760 122.53681183]
[79.20036316 108.55077362]
[64.21913147 109.30084229]
[49.23789597 110.05091095]
[34.25666046 110.80097198]
[19.27542496 111.55104065]
[4.29418945 112.30110931]
[-10.68704510 113.05117798]
[-25.66827965 113.80124664]
[-40.64951706 114.55131531]
[-27.38363838 121.55249023]
[-16.04831505 131.37646484]
[-7.23273754 143.51258850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 79]
[23 78]
[24 77]
[25 76]
[26 75]
[28 74]
[29 73]
[30 72]
[31 71]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 50]
[41 49]
[42 48]
[80 153]
[81 152]
[82 151]
[83 150]
[84 149]
[85 148]
[86 147]
[87 146]
[88 145]
[90 112]
[91 111]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
[129 142]
[130 141]
[131 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
