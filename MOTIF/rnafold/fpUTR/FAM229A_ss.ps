%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGACCCCGUCUCCAGGCGCCAUGGCCAGAGGCCUCCAGUCCCCGAUUCUGGCCCGCGCUGAGUGCCAGGGGCGGCAGGGGGCACCGUUGGGGGUUCUCCAGUGGGAGGAACGUGCUCUGUGAGGUCAGCGCGCCGCGGCCCGGGUCACA\
) } def
/len { sequence length } bind def

/coor [
[78.98043060 550.96624756]
[66.63713837 541.56292725]
[62.21060562 526.69061279]
[67.40292358 512.06805420]
[80.21753693 503.31790161]
[80.52551270 488.32107544]
[80.83349609 473.32421875]
[81.14147186 458.32739258]
[81.44944763 443.33056641]
[72.16193390 428.47164917]
[81.74430084 412.78060913]
[81.74430084 397.78060913]
[81.74430084 382.78060913]
[72.06477356 376.60662842]
[66.53526306 366.40805054]
[66.64508820 354.68713379]
[72.48328400 344.38464355]
[82.68704987 338.14193726]
[83.30287933 323.15457153]
[83.91870117 308.16723633]
[84.53453064 293.17987061]
[85.15035248 278.19253540]
[74.90207672 267.44503784]
[75.31311035 252.23695374]
[86.65555573 241.56048584]
[87.27137756 226.57313538]
[87.88719940 211.58578491]
[88.50302887 196.59843445]
[89.11885071 181.61108398]
[89.11885071 166.61108398]
[88.50302887 151.62371826]
[87.88719940 136.63636780]
[87.27137756 121.64901733]
[80.38350677 89.63024902]
[73.83563995 76.13486481]
[67.28776550 62.63948441]
[60.73989487 49.14410019]
[54.19202423 35.64871597]
[47.64415359 22.15332985]
[41.09628296 8.65794659]
[33.86458206 -4.48368502]
[25.96809959 -17.23694229]
[18.07161713 -29.99020004]
[10.17513371 -42.74345779]
[2.27865148 -55.49671173]
[-5.61783123 -68.24996948]
[-17.57215309 -68.67718506]
[-27.71724892 -74.78477478]
[-33.56885910 -84.94107819]
[-33.76038742 -96.54066467]
[-28.36035538 -106.67233276]
[-35.72659683 -119.73902893]
[-43.09283447 -132.80572510]
[-56.60992050 -141.02757263]
[-56.12000275 -155.91412354]
[-63.48624039 -168.98081970]
[-70.85247803 -182.04751587]
[-78.48545074 -194.96020508]
[-86.38193512 -207.71347046]
[-94.27841187 -220.46672058]
[-102.17489624 -233.21998596]
[-115.65383148 -243.50369263]
[-109.50334167 -259.30267334]
[-92.61917114 -257.76614380]
[-89.42163849 -241.11647034]
[-81.52516174 -228.36320496]
[-73.62867737 -215.60995483]
[-65.73219299 -202.85668945]
[-61.31308365 -200.90203857]
[-58.10422897 -196.11756897]
[-57.78578568 -189.41375732]
[-50.41954803 -176.34706116]
[-43.05330658 -163.28036499]
[-30.06310081 -155.99311829]
[-30.02614021 -140.17196655]
[-22.65990067 -127.10527039]
[-15.29366016 -114.03857422]
[2.56821275 -110.23982239]
[12.19941998 -94.35205078]
[7.13542604 -76.14645386]
[15.03190804 -63.39319611]
[22.92839050 -50.63993835]
[30.82487297 -37.88668060]
[38.72135544 -25.13342476]
[46.61783981 -12.38016796]
[52.86582184 -26.01698112]
[67.37088013 -29.83841324]
[79.52684784 -21.05021858]
[80.44524384 -6.07836008]
[69.45452118 4.12967825]
[54.59166718 2.11007571]
[61.13953781 15.60546017]
[67.68740845 29.10084343]
[74.23528290 42.59622955]
[80.78314972 56.09161377]
[87.33102417 69.58699799]
[93.87889099 83.08238220]
[107.97428131 88.21268463]
[121.66490936 82.08351135]
[135.35552979 75.95433807]
[149.04615784 69.82515717]
[162.73678589 63.69598770]
[171.90505981 50.09912491]
[188.24337769 51.51042938]
[194.94425964 66.47806549]
[185.11441040 79.60462189]
[168.86595154 77.38661194]
[155.17532349 83.51578522]
[141.48471069 89.64495850]
[127.79408264 95.77413177]
[114.10345459 101.90330505]
[129.05575562 100.70798492]
[140.94964600 109.84774780]
[143.64428711 124.60372925]
[135.74842834 137.35737610]
[121.33872223 141.52395630]
[107.85492706 134.95223999]
[102.25872803 121.03319550]
[102.87455750 136.02055359]
[103.49037933 151.00790405]
[104.10620880 165.99525452]
[106.64824677 169.68818665]
[107.73351288 173.60554504]
[107.47544098 177.24974060]
[106.14099121 180.21426392]
[104.10620880 182.22689819]
[103.49037933 197.21426392]
[102.87455750 212.20161438]
[102.25872803 227.18896484]
[101.64290619 242.17631531]
[112.07120514 253.74732971]
[111.23316956 268.93786621]
[100.13771057 278.80834961]
[99.52188110 293.79568481]
[98.90605927 308.78305054]
[98.29022980 323.77041626]
[97.67440796 338.75775146]
[111.02616882 352.13006592]
[110.43850708 370.69982910]
[96.74430084 382.78060913]
[96.74430084 397.78060913]
[96.74430084 412.78060913]
[105.31660461 422.47180176]
[104.97303009 435.00390625]
[96.44628906 443.63851929]
[96.13831329 458.63537598]
[95.83032990 473.63220215]
[95.52235413 488.62902832]
[95.21437836 503.62588501]
[107.65895081 512.89477539]
[112.24655914 527.71820068]
[107.21318054 542.39617920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 149]
[6 148]
[7 147]
[8 146]
[9 145]
[11 142]
[12 141]
[13 140]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[30 121]
[31 120]
[32 119]
[33 118]
[34 97]
[35 96]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[51 77]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[58 68]
[59 67]
[60 66]
[61 65]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
