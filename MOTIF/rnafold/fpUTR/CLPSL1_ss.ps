%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACAUGGUGUUCCCACAGCUGGGAGGACACCCACAUGGUCGGCGUGCAGGAUAUUUCGCUGGACCCUAGAAAAGCCACCACGACCUGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[18.03654861 232.09120178]
[9.90473557 244.69570923]
[-3.28751493 251.83464050]
[-18.28726196 251.74771118]
[-31.39587593 244.45632935]
[-39.38103867 231.75840759]
[-40.27376938 216.78500366]
[-33.85472488 203.22917175]
[-47.95951462 208.33357239]
[-58.30313492 220.30520630]
[-72.90378571 217.36067200]
[-87.00857544 222.46507263]
[-101.11336517 227.56947327]
[-115.21815491 232.67387390]
[-129.32295227 237.77827454]
[-143.42773438 242.88265991]
[-153.57235718 255.76748657]
[-169.76239014 253.15692139]
[-175.34291077 237.73648071]
[-164.57315063 225.36940002]
[-148.53213501 228.77787781]
[-134.42735291 223.67347717]
[-120.32255554 218.56907654]
[-106.21776581 213.46467590]
[-92.11297607 208.36029053]
[-78.00818634 203.25588989]
[-68.67343140 191.64935303]
[-53.06391144 194.22877502]
[-38.95912170 189.12437439]
[-33.31407547 181.90364075]
[-23.08278084 180.53253174]
[-11.09496212 171.51631165]
[0.89285815 162.50010681]
[12.88067818 153.48388672]
[24.86849785 144.46766663]
[36.85631943 135.45144653]
[40.37897873 128.78337097]
[49.39286041 126.34311676]
[61.67223358 117.72818756]
[73.95160675 109.11325836]
[86.23097992 100.49832916]
[97.75699615 90.89880371]
[108.45092010 80.38024902]
[119.14484406 69.86169434]
[128.16107178 57.87387848]
[135.30027771 44.68177032]
[135.06367493 28.86233330]
[147.92594910 21.35157967]
[155.06515503 8.15947437]
[162.20436096 -5.03263187]
[169.12448120 -18.34097481]
[175.82360840 -31.76191521]
[174.29043579 -48.08923340]
[187.81851196 -57.35871887]
[202.49130249 -50.03471375]
[203.21472168 -33.65153122]
[189.24455261 -25.06278229]
[182.54542542 -11.64184189]
[182.37162781 -4.10245991]
[175.39646912 2.10657883]
[168.25726318 15.29868507]
[161.11804199 28.49079132]
[161.86529541 43.36664200]
[148.49238586 51.82098389]
[141.35316467 65.01309204]
[155.74972534 60.80130768]
[170.20227051 64.81677246]
[180.36279297 75.85143280]
[183.17453003 90.58554840]
[177.79156494 104.58640289]
[165.83337402 113.64186096]
[150.89752197 115.02763367]
[137.47743225 108.32679749]
[129.61048889 95.55529022]
[129.66339111 80.55562592]
[118.96947479 91.07417297]
[108.27554321 101.59272766]
[108.24815369 104.33765411]
[107.27232361 107.16777802]
[105.30954742 109.75086212]
[102.43717957 111.74427795]
[98.84957886 112.83481598]
[94.84590912 112.77770233]
[82.56653595 121.39263153]
[70.28716278 130.00756836]
[58.00778961 138.62249756]
[45.87253571 147.43927002]
[33.88471603 156.45549011]
[21.89689445 165.47171021]
[9.90907574 174.48791504]
[-2.07874465 183.50413513]
[-14.06656456 192.52035522]
[0.79393297 194.56134033]
[12.84053135 203.49887085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 29]
[9 28]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[31 92]
[32 91]
[33 90]
[34 89]
[35 88]
[36 87]
[38 86]
[39 85]
[40 84]
[41 83]
[42 77]
[43 76]
[44 75]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
