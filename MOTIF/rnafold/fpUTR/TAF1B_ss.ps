%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCGCGUUUCCGGCCGGAAGCUUCUCCAGCCUUUCCCGGAAGCUGCGCUCGCUACCCGGGUAACGGGUCCCGGCUGUGGAAGCUCCCGCGGCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[85.52710724 306.92486572]
[70.34383392 312.10635376]
[56.90431595 303.34515381]
[55.51819611 287.36209106]
[67.24879456 276.41802979]
[69.11027527 261.53396606]
[70.97175598 246.64991760]
[72.83323669 231.76586914]
[61.85472107 221.73541260]
[58.85217667 206.98925781]
[65.18244171 193.14076233]
[78.60851288 185.58782959]
[80.47000122 170.70378113]
[82.33148193 155.81973267]
[80.04356384 151.44294739]
[80.60894775 145.56161499]
[84.79946899 140.07904053]
[87.58268738 125.33950806]
[90.36590576 110.59998322]
[85.92478943 97.34222412]
[94.89456940 86.61680603]
[97.67778015 71.87727356]
[100.46099854 57.13774490]
[103.24421692 42.39821625]
[106.02743530 27.65868759]
[108.81064606 12.91915989]
[111.59386444 -1.82036912]
[106.55151367 -16.81654358]
[116.51597595 -27.88717079]
[119.29918671 -42.62670135]
[122.08240509 -57.36623001]
[124.86562347 -72.10575867]
[127.64884186 -86.84528351]
[115.91405487 -98.90848541]
[113.63903046 -115.41671753]
[121.51589203 -129.91424561]
[136.30508423 -136.84849548]
[138.62855530 -151.66744995]
[140.95202637 -166.48640442]
[143.27549744 -181.30535889]
[135.92640686 -186.20071411]
[130.44187927 -193.07748413]
[127.32817841 -201.26733398]
[126.86251068 -209.98243713]
[129.06838989 -218.39120483]
[133.71542358 -225.69766235]
[140.34315491 -231.21676636]
[148.30664062 -234.43864441]
[156.83921814 -235.07562256]
[161.87197876 -249.20614624]
[166.90472412 -263.33663940]
[171.93746948 -277.46716309]
[176.97021484 -291.59768677]
[171.41641235 -306.64874268]
[179.84400940 -320.29995728]
[195.78808594 -322.07925415]
[207.01771545 -310.62170410]
[204.91847229 -294.71658325]
[191.10073853 -286.56494141]
[186.06799316 -272.43441772]
[181.03523254 -258.30389404]
[176.00248718 -244.17338562]
[170.96974182 -230.04287720]
[182.65789795 -211.62701416]
[177.41409302 -190.18624878]
[158.09445190 -178.98188782]
[155.77098083 -164.16293335]
[153.44750977 -149.34397888]
[151.12403870 -134.52502441]
[161.47509766 -125.93943787]
[166.22801208 -113.24276733]
[164.02421570 -99.75567627]
[155.33993530 -89.06325531]
[142.38836670 -84.06207275]
[139.60514832 -69.32254028]
[136.82192993 -54.58301163]
[134.03871155 -39.84348297]
[131.25550842 -25.10395432]
[136.49693298 -11.16205025]
[126.33339691 0.96284717]
[123.55017853 15.70237637]
[120.76696014 30.44190407]
[117.98374176 45.18143463]
[115.20053101 59.92096329]
[112.41731262 74.66049194]
[109.63409424 89.40001678]
[114.07521057 102.65777588]
[105.10543060 113.38319397]
[102.32221985 128.12272644]
[99.53900146 142.86225891]
[97.21553040 157.68121338]
[95.35404205 172.56526184]
[93.49256134 187.44931030]
[104.64497375 198.07615662]
[107.36966705 213.05712891]
[100.82794189 226.60961914]
[87.71728516 233.62734985]
[85.85580444 248.51139832]
[83.99432373 263.39544678]
[82.13284302 278.27951050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 100]
[6 99]
[7 98]
[8 97]
[12 93]
[13 92]
[14 91]
[17 90]
[18 89]
[19 88]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[29 78]
[30 77]
[31 76]
[32 75]
[33 74]
[37 69]
[38 68]
[39 67]
[40 66]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
