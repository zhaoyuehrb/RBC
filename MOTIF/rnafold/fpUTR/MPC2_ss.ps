%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:56:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCCCCCUCCCCCACUCUAGGCGGCGACCUCAGCGCCUCCGCCCCGGGGCCCCCGCUCACCCAGGUAUCGACUCCGCAGCCGGGACGGGUCCUCCAGCCCGAGGGACCUUUUCCUCACGUCCCACAACAGCCAGGGACGAGAACACAGCCACGCUCCCACCCGGCUGCCAACGAUCCCUCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-248.47087097 393.32681274]
[-262.61798096 398.45742798]
[-276.90249634 394.32333374]
[-288.62997437 403.67565918]
[-300.35745239 413.02801514]
[-312.08493042 422.38037109]
[-323.81237793 431.73272705]
[-319.94668579 440.80480957]
[-318.06658936 450.47604370]
[-318.25158691 460.31753540]
[-320.48971558 469.89361572]
[-324.67813110 478.78118896]
[-330.62802124 486.58840942]
[-338.07293701 492.97189331]
[-346.68078613 497.65197754]
[-356.06866455 500.42471313]
[-365.81985474 501.17102051]
[-375.50234985 499.86166382]
[-384.68798828 496.55831909]
[-392.97140503 491.41088867]
[-399.98782349 484.65042114]
[-412.85174561 492.36529541]
[-420.70721436 506.09854126]
[-435.60156250 506.00903320]
[-448.46548462 513.72393799]
[-461.32940674 521.43878174]
[-474.19332886 529.15368652]
[-476.47357178 544.62414551]
[-488.19882202 554.97076416]
[-503.83276367 555.30816650]
[-515.99353027 545.47711182]
[-518.93920898 530.11950684]
[-511.27886963 516.48669434]
[-496.62957764 511.01568604]
[-481.90820312 516.28973389]
[-469.04428101 508.57485962]
[-456.18035889 500.85998535]
[-443.31643677 493.14511108]
[-436.38107300 479.96368408]
[-420.56661987 479.50137329]
[-407.70269775 471.78646851]
[-410.94787598 451.47970581]
[-405.07284546 431.72573853]
[-391.19781494 416.42666626]
[-372.02722168 408.62203979]
[-351.32263184 409.88494873]
[-333.16473389 420.00524902]
[-321.43725586 410.65289307]
[-309.70977783 401.30053711]
[-297.98233032 391.94821167]
[-286.25485229 382.59585571]
[-287.10668945 367.74957275]
[-278.95669556 355.09881592]
[-264.75418091 349.60867310]
[-249.87013245 353.58001709]
[-238.14266968 344.22766113]
[-226.41519165 334.87533569]
[-214.68772888 325.52297974]
[-213.01727295 313.53033447]
[-203.30691528 305.64389038]
[-190.42626953 306.52218628]
[-178.54496765 297.36605835]
[-173.18678284 283.46859741]
[-157.53294373 281.17349243]
[-145.65164185 272.01736450]
[-133.77033997 262.86123657]
[-128.41213989 248.96377563]
[-112.75830078 246.66864014]
[-100.87699890 237.51251221]
[-88.99569702 228.35638428]
[-77.11439514 219.20025635]
[-79.25370026 207.22882080]
[-76.07413483 195.41592407]
[-68.12136078 186.02545166]
[-56.86180496 180.88414001]
[-44.41253281 181.02627563]
[-33.14324570 186.48631287]
[-20.96417618 177.73016357]
[-8.78510666 168.97401428]
[3.39396358 160.21784973]
[15.57303333 151.46170044]
[27.75210381 142.70553589]
[39.93117523 133.94938660]
[52.11024475 125.19322968]
[64.28931427 116.43707275]
[59.22549820 93.88648987]
[67.81877136 71.25687408]
[88.34577942 56.46608353]
[88.34577942 41.46608353]
[88.34577942 26.46608353]
[88.34577942 11.46608257]
[76.99463654 0.46939236]
[76.82754517 -15.33401299]
[87.94363403 -26.56825447]
[103.74792480 -26.56825447]
[114.86400604 -15.33401299]
[114.69691467 0.46939236]
[103.34577942 11.46608257]
[103.34577942 26.46608353]
[103.34577942 41.46608353]
[103.34577942 56.46608353]
[117.88193512 60.16744232]
[125.05574799 46.99412155]
[132.22955322 33.82079697]
[139.40336609 20.64747238]
[146.57717896 7.47414923]
[153.75099182 -5.69917440]
[152.80145264 -22.07080841]
[166.65170288 -30.85161972]
[181.05378723 -23.00866318]
[181.19207764 -6.61009884]
[166.92430115 1.47463524]
[159.75050354 14.64795876]
[152.57669067 27.82128334]
[145.40287781 40.99460602]
[138.22906494 54.16793060]
[131.05525208 67.34125519]
[134.68908691 68.36480713]
[138.32756042 69.74623871]
[152.10079956 63.80503845]
[165.87403870 57.86384201]
[179.64727783 51.92264557]
[193.42053223 45.98144913]
[207.19377136 40.04025269]
[208.89710999 24.77610588]
[218.01722717 12.41815853]
[232.10087585 6.29063654]
[247.35961914 8.04181290]
[259.68890381 17.20063019]
[265.77224731 31.30341339]
[263.97326660 46.55658340]
[254.77584839 58.85711288]
[240.65406799 64.89622498]
[225.40660095 63.04942703]
[213.13496399 53.81349564]
[199.36172485 59.75469208]
[185.58848572 65.69589233]
[171.81524658 71.63708496]
[158.04199219 77.57828522]
[144.26875305 83.51947784]
[144.51805115 91.01533508]
[159.50975037 90.51676178]
[173.61366272 85.40991974]
[182.82888794 97.24544525]
[174.42027283 109.66700745]
[160.00833130 105.50846863]
[145.01661682 106.00704956]
[145.26589966 113.50289917]
[159.40344238 118.51587677]
[173.54098511 123.52886200]
[190.49008179 123.12358093]
[195.57150269 139.29811096]
[181.43576050 148.65850830]
[168.52799988 137.66639709]
[154.39047241 132.65342712]
[140.25292969 127.64044189]
[127.42406464 138.07818604]
[112.40934753 143.27836609]
[97.17023468 143.02590942]
[83.54884338 137.78981018]
[73.04547119 128.61614990]
[60.86639786 137.37229919]
[48.68732834 146.12846375]
[36.50825882 154.88461304]
[24.32918930 163.64076233]
[12.15011883 172.39692688]
[-0.02895136 181.15307617]
[-12.20802116 189.90922546]
[-24.38709068 198.66539001]
[-23.92825699 216.77560425]
[-34.32925415 231.41613770]
[-51.28221893 236.84826660]
[-67.95826721 231.08155823]
[-79.83956909 240.23768616]
[-91.72087097 249.39381409]
[-103.60217285 258.54995728]
[-109.81018829 273.10229492]
[-124.61420441 274.74252319]
[-136.49551392 283.89865112]
[-148.37681580 293.05477905]
[-154.58482361 307.60714722]
[-169.38883972 309.24734497]
[-181.27014160 318.40347290]
[-187.87384033 335.58343506]
[-205.33537292 337.25045776]
[-217.06285095 346.60278320]
[-228.79031372 355.95513916]
[-240.51779175 365.30749512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[6 48]
[7 47]
[21 41]
[22 40]
[24 38]
[25 37]
[26 36]
[27 35]
[55 188]
[56 187]
[57 186]
[58 185]
[61 183]
[62 182]
[64 180]
[65 179]
[66 178]
[68 176]
[69 175]
[70 174]
[71 173]
[77 169]
[78 168]
[79 167]
[80 166]
[81 165]
[82 164]
[83 163]
[84 162]
[85 161]
[88 101]
[89 100]
[90 99]
[91 98]
[102 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
[119 140]
[120 139]
[121 138]
[122 137]
[123 136]
[124 135]
[148 156]
[149 155]
[150 154]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
