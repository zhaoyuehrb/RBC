%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGGGCGGGGAGGCGCGGGCGGGUGUGCGCGCGCCGGGCGUGGGUGUGGGUGGGGGUAACCGGCGCGGGCGCCGAGAUAGCGCCGGGCAGAGGGACCCGGCUACCCUGGACAGCGCAUCGCCGCCCGCCCGGGUCGCCGCGCCACAGCCGCUGCGGAUC\
) } def
/len { sequence length } bind def

/coor [
[138.24511719 454.26480103]
[136.91755676 443.68609619]
[138.60821533 433.13793945]
[143.19352722 423.46588135]
[150.31744385 415.44863892]
[159.41896057 409.73529053]
[156.24340820 395.07528687]
[153.06784058 380.41528320]
[149.89228821 365.75527954]
[139.63595581 354.95449829]
[144.27632141 339.82910156]
[141.10076904 325.16909790]
[130.84442139 314.36831665]
[135.48480225 299.24291992]
[132.30924988 284.58291626]
[129.13368225 269.92291260]
[118.87734985 259.12213135]
[123.51772308 243.99674988]
[120.34216309 229.33673096]
[117.16661072 214.67672729]
[113.99105072 200.01672363]
[110.81549072 185.35671997]
[107.63993073 170.69670105]
[104.46437836 156.03669739]
[101.28881836 141.37669373]
[98.11325836 126.71668243]
[94.93769836 112.05667114]
[91.19608307 97.53082275]
[86.89403534 83.16098022]
[82.59198761 68.79113770]
[78.28993988 54.42129898]
[73.98789215 40.05145264]
[59.49589157 34.82764435]
[50.95842361 22.21951294]
[51.47600937 7.17969513]
[60.64070129 -4.53125811]
[56.33865356 -18.90110016]
[52.03660583 -33.27094269]
[47.73455811 -47.64078522]
[43.43251038 -62.01062775]
[37.94737625 -69.37773132]
[39.18927383 -76.70096588]
[35.16668320 -91.15153503]
[31.14409637 -105.60209656]
[27.12150574 -120.05265808]
[17.30289459 -124.87500000]
[11.89450359 -134.12921143]
[12.48747635 -144.61097717]
[18.64165688 -152.84324646]
[15.18241882 -167.43891907]
[11.72318077 -182.03459167]
[8.26394272 -196.63027954]
[4.80470419 -211.22595215]
[-10.25622559 -212.50103760]
[-24.16679764 -218.36094666]
[-35.56959152 -228.22018433]
[-43.35612869 -241.10369873]
[-46.77462006 -255.74324036]
[-45.50252914 -270.70227051]
[-39.67698288 -284.51687622]
[-29.88008690 -295.83901978]
[-17.08079720 -303.56814575]
[-20.54003525 -318.16381836]
[-23.99927330 -332.75949097]
[-27.45851135 -347.35516357]
[-30.91774940 -361.95083618]
[-34.37698746 -376.54650879]
[-37.83622360 -391.14218140]
[-52.80974960 -393.91949463]
[-65.35543060 -402.55230713]
[-73.29965210 -415.54498291]
[-75.26602936 -430.64642334]
[-70.91387939 -445.24020386]
[-60.99723434 -456.79788208]
[-47.23421478 -463.31701660]
[-32.00934601 -463.66815186]
[-17.96043015 -457.79040527]
[-7.52152634 -446.70214844]
[-2.50123644 -432.32452393]
[-3.76935697 -417.14849854]
[-11.10617828 -403.80340576]
[-23.24055290 -394.60140991]
[-19.78131485 -380.00573730]
[-16.32207680 -365.41006470]
[-12.86283779 -350.81439209]
[-9.40359974 -336.21871948]
[-5.94436169 -321.62304688]
[-2.48512363 -307.02737427]
[12.42155838 -305.86468506]
[26.25775337 -300.14370728]
[37.66363525 -290.41302490]
[45.51401520 -277.61605835]
[49.02936172 -262.99945068]
[47.85316849 -247.99174500]
[42.08807755 -234.06362915]
[32.28705597 -222.58398438]
[19.40037727 -214.68518066]
[22.85961533 -200.08950806]
[26.31885338 -185.49383545]
[29.77809143 -170.89816284]
[33.23733139 -156.30249023]
[47.51407623 -143.30421448]
[41.57207108 -124.07524872]
[45.59465790 -109.62468719]
[49.61724854 -95.17411804]
[53.63983536 -80.72355652]
[57.80235291 -66.31267548]
[62.10440063 -51.94283295]
[66.40644836 -37.57299042]
[70.70849609 -23.20314980]
[75.01054382 -8.83330631]
[89.10280609 -4.08502817]
[97.79975891 8.19613743]
[97.59509277 23.42149544]
[88.35773468 35.74940491]
[92.65978241 50.11924744]
[96.96183014 64.48908997]
[101.26387787 78.85893250]
[105.56592560 93.22877502]
[108.17270660 94.91133881]
[110.21099091 97.59822083]
[111.30083466 101.07532501]
[111.14880371 104.98883057]
[109.59770966 108.88111877]
[112.77326965 123.54112244]
[115.94882965 138.20112610]
[119.12438202 152.86114502]
[122.29994202 167.52114868]
[125.47550201 182.18115234]
[128.65106201 196.84117126]
[131.82661438 211.50117493]
[135.00218201 226.16117859]
[138.17773438 240.82118225]
[148.66120911 252.67054749]
[143.79370117 266.74734497]
[146.96925354 281.40737915]
[150.14480591 296.06738281]
[160.62828064 307.91671753]
[155.76077271 321.99353027]
[158.93632507 336.65356445]
[169.41981506 348.50289917]
[164.55229187 362.57971191]
[167.72785950 377.23971558]
[170.90341187 391.89974976]
[174.07896423 406.55975342]
[193.26657104 411.59835815]
[207.23690796 425.57299805]
[212.22998047 444.61117554]
[206.95820618 463.49307251]
[192.93728638 477.08264160]
[197.51718140 491.36636353]
[202.09706116 505.65005493]
[212.69078064 518.88671875]
[202.90403748 532.73071289]
[186.89183044 527.15881348]
[187.81335449 510.22994995]
[183.23345947 495.94622803]
[178.65356445 481.66250610]
[168.10136414 481.37637329]
[158.03117371 478.14083862]
[149.25210571 472.20349121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 145]
[7 144]
[8 143]
[9 142]
[11 140]
[12 139]
[14 137]
[15 136]
[16 135]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[42 106]
[43 105]
[44 104]
[45 103]
[49 101]
[50 100]
[51 99]
[52 98]
[53 97]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[150 158]
[151 157]
[152 156]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
