%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGUAGCGGCAGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCAGCGGCGGCGGCCUGGGCCCGGGCGCAGCGGCGGCGGCGGCGGGGCCUGGAGCCGGAUCUAAG\
) } def
/len { sequence length } bind def

/coor [
[255.11349487 161.75410461]
[240.94215393 156.83746338]
[226.77082825 151.92080688]
[212.21057129 155.05897522]
[201.70887756 143.22573853]
[187.53755188 138.30909729]
[172.97729492 141.44726562]
[162.47560120 129.61402893]
[148.30427551 124.69739532]
[133.74401855 127.83554840]
[123.24233246 116.00232697]
[109.07099915 111.08568573]
[95.30495453 113.53262329]
[86.01235962 103.08564758]
[71.84102631 98.16900635]
[56.26713562 100.95549011]
[46.77907944 89.47393799]
[32.60774994 84.55729675]
[17.03385925 87.34378052]
[7.54580355 75.86222839]
[-6.62552738 70.94558716]
[-22.19941711 73.73207092]
[-31.68747330 62.25051880]
[-45.85880280 57.33387375]
[-61.43269348 60.12036133]
[-70.92074585 48.63880920]
[-85.09207916 43.72216415]
[-100.66596985 46.50865173]
[-110.15402222 35.02709961]
[-124.32535553 30.11045456]
[-139.89924622 32.89694214]
[-149.38729858 21.41538811]
[-163.55863953 16.49874496]
[-179.13252258 19.28523254]
[-188.62057495 7.80367899]
[-202.79191589 2.88703537]
[-218.78625488 6.50822306]
[-229.71928406 -5.71474552]
[-224.34402466 -21.20792770]
[-208.19009399 -24.03326797]
[-197.87525940 -11.28429508]
[-183.70393372 -6.36765194]
[-169.14367676 -9.50581074]
[-158.64198303 2.32741451]
[-144.47065735 7.24405813]
[-129.91040039 4.10589933]
[-119.40871429 15.93912411]
[-105.23738098 20.85576820]
[-90.67711639 17.71760941]
[-80.17543793 29.55083466]
[-66.00410461 34.46747971]
[-51.44384384 31.32931900]
[-40.94216156 43.16254425]
[-26.77082825 48.07918930]
[-12.21056747 44.94102859]
[-1.70888340 56.77425385]
[12.46244717 61.69089890]
[27.02270889 58.55273819]
[37.52439117 70.38596344]
[51.69572449 75.30260468]
[66.25598907 72.16445160]
[76.75766754 83.99767303]
[90.92900085 88.91431427]
[104.69504547 86.46737671]
[113.98764038 96.91435242]
[128.15898132 101.83099365]
[143.73286438 99.04450989]
[153.22091675 110.52606201]
[167.39225769 115.44270325]
[182.96614075 112.65621948]
[192.45419312 124.13777161]
[206.62553406 129.05441284]
[222.19941711 126.26792908]
[231.68746948 137.74948120]
[245.85881042 142.66612244]
[260.03012085 147.58276367]
[279.89990234 134.92932129]
[302.52032471 140.54374695]
[313.92013550 160.58526611]
[328.78152466 162.61978149]
[343.64291382 164.65428162]
[358.52832031 166.50482178]
[373.43548584 168.17112732]
[388.34265137 169.83741760]
[403.24981689 171.50372314]
[418.15698242 173.17001343]
[433.06411743 174.83631897]
[443.54394531 163.54562378]
[458.48791504 160.62487793]
[472.12496948 166.98846436]
[479.31387329 180.00604248]
[494.22103882 181.67233276]
[508.79531860 175.51594543]
[520.58428955 184.61918640]
[535.49145508 186.28547668]
[550.29150391 179.22213745]
[563.65350342 188.72944641]
[561.83178711 205.02709961]
[546.70037842 211.34947205]
[533.82519531 201.19264221]
[518.91802979 199.52633667]
[505.41000366 205.80192566]
[492.55474854 196.57949829]
[477.64758301 194.91320801]
[467.76184082 206.02220154]
[453.05630493 209.21769714]
[439.12603760 203.06942749]
[431.39782715 189.74348450]
[416.49066162 188.07717896]
[401.58352661 186.41088867]
[386.67636108 184.74458313]
[371.76919556 183.07829285]
[356.86203003 181.41198730]
[349.78915405 183.82150269]
[341.60839844 179.51567078]
[326.74700928 177.48115540]
[311.88565063 175.44665527]
[308.21630859 181.94847107]
[302.99951172 187.32006836]
[296.56979370 191.20082092]
[289.34365845 193.32621765]
[281.79244995 193.54586792]
[274.41180420 191.83406067]
[267.68899536 188.29228210]
[262.07077026 183.14317322]
[257.93377686 176.71659851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[5 72]
[6 71]
[8 69]
[9 68]
[11 66]
[12 65]
[14 63]
[15 62]
[17 60]
[18 59]
[20 57]
[21 56]
[23 54]
[24 53]
[26 51]
[27 50]
[29 48]
[30 47]
[32 45]
[33 44]
[35 42]
[36 41]
[79 117]
[80 116]
[81 115]
[82 113]
[83 112]
[84 111]
[85 110]
[86 109]
[87 108]
[91 104]
[92 103]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
