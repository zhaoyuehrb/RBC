%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUAGGAAGGAGCCGAGUUAUUAUCUGCCUCUCCGAUAGGAUGCCUCUUUGUCUUCACCUGCCAUUCCCGCUGUUUCGUGAAGAAUCCUCUGUAAAGGGAAAUUUGUUCAGGCGACUGCUGUGGCCACCCUCUGCCUCCUCCGGCCUCUGCCCCUGGGAGGUCCCCGGGGGCCUGGGAGUGUCAUUGGCGU\
) } def
/len { sequence length } bind def

/coor [
[175.24238586 316.51037598]
[176.63504028 301.57516479]
[183.25793457 288.11642456]
[194.24166870 277.90087891]
[208.14443970 272.26947021]
[223.14128113 271.96142578]
[237.26620483 277.01870728]
[227.64508057 265.51071167]
[218.02395630 254.00273132]
[211.31213379 250.88310242]
[208.34204102 242.22959900]
[198.90852356 230.56732178]
[189.47502136 218.90502930]
[179.94738770 207.31951904]
[170.32626343 195.81150818]
[156.22683716 191.00991821]
[153.31134033 175.45967102]
[143.69021606 163.95167542]
[134.06909180 152.44367981]
[124.87519073 157.37828064]
[114.98879242 160.71554565]
[104.68512726 162.36257935]
[94.25103760 162.27352905]
[83.97698975 160.45085144]
[74.14899445 156.94529724]
[65.04066467 151.85447693]
[56.90555191 145.32009888]
[49.97013474 137.52404785]
[44.42748260 128.68339539]
[30.36938095 133.91500854]
[26.41497803 144.06697083]
[17.70080185 150.23320007]
[7.25081491 150.57028198]
[-1.46808398 145.20838928]
[-15.68822193 149.98202515]
[-29.90835953 154.75567627]
[-40.35108948 167.40010071]
[-56.47574234 164.41218567]
[-61.69465637 148.86564636]
[-50.63906097 136.75341797]
[-34.68200302 140.53553772]
[-20.46186638 135.76188660]
[-6.24172878 130.98825073]
[5.44481993 115.59367371]
[25.13776398 119.85691071]
[39.19586563 114.62529755]
[38.02671432 108.38772583]
[37.49573517 102.06378174]
[37.60840225 95.71858978]
[38.36354446 89.41748047]
[39.75339508 83.22534943]
[41.76364136 77.20595551]
[44.37357712 71.42128754]
[47.55632782 65.93090057]
[36.04833221 56.30978012]
[24.54033470 46.68865585]
[13.03233719 37.06753540]
[1.52434075 27.44641113]
[-9.98365593 17.82528687]
[-21.49165344 8.20416451]
[-42.25386429 11.44953632]
[-58.44956970 -1.47590685]
[-59.84977341 -21.85593224]
[-71.95640564 -30.71196747]
[-87.09744263 -26.80260849]
[-101.18668365 -33.58694839]
[-107.57162476 -47.86162949]
[-103.23748779 -62.88658524]
[-90.23072815 -71.56748962]
[-74.69273376 -69.80548859]
[-63.96006775 -58.43253708]
[-63.10037231 -42.81860352]
[-50.99373627 -33.96257019]
[-42.61048889 -38.18450546]
[-33.20689774 -39.06062317]
[-24.07661629 -36.42790222]
[-16.49121666 -30.60898209]
[-11.52311897 -22.37322426]
[-9.89406300 -12.83518410]
[-11.87052917 -3.30383229]
[-0.36253259 6.31729078]
[11.14546394 15.93841457]
[22.65346146 25.55953789]
[34.16145706 35.18066025]
[45.66945267 44.80178452]
[57.17745209 54.42290878]
[73.31211090 39.98429108]
[94.32167053 31.40890503]
[93.35072327 16.44036293]
[92.37977600 1.47181964]
[88.69694519 -6.90322018]
[91.51630402 -13.74660778]
[90.78786469 -28.72891045]
[81.45821381 -42.21555710]
[88.71678925 -56.92083359]
[105.09658813 -57.71721268]
[113.74748230 -43.78544617]
[105.77017212 -29.45734406]
[106.49860382 -14.47504139]
[107.34832001 0.50087231]
[108.31926727 15.46941471]
[109.29021454 30.43795776]
[116.34021759 32.99676514]
[121.45783234 18.89676666]
[126.57545471 4.79676867]
[131.69306946 -9.30323029]
[136.81091309 -23.40315056]
[150.91075134 -18.28509521]
[145.79307556 -4.18561172]
[140.67544556 9.91438770]
[135.55783081 24.01438713]
[130.44021606 38.11438751]
[137.49021912 40.67319489]
[147.83607483 29.81210709]
[158.18193054 18.95101738]
[162.09786987 3.62209129]
[176.47853088 -0.25677750]
[186.82438660 -11.11786652]
[190.15481567 -27.17527199]
[205.80891418 -32.06211853]
[217.68309021 -20.75123596]
[213.56221008 -4.87829208]
[197.68548584 -0.77200961]
[187.33963013 10.08907890]
[184.16369629 24.64114761]
[169.04301453 29.29687500]
[158.69715881 40.15796280]
[148.35130310 51.01905060]
[161.80422974 73.47979736]
[165.67041016 98.76462555]
[159.82438660 123.04685211]
[145.57708740 142.82255554]
[155.19821167 154.33055115]
[164.81933594 165.83854675]
[179.60693359 171.46325684]
[181.83425903 186.19039917]
[191.45538330 197.69839478]
[199.37248230 202.28359985]
[201.13729858 209.47152710]
[210.57081604 221.13380432]
[220.00431824 232.79608154]
[229.53195190 244.38160706]
[239.15307617 255.88960266]
[248.77420044 267.39761353]
[259.71868896 277.65518188]
[271.82534790 286.51119995]
[283.93197632 295.36724854]
[296.10992432 304.12496948]
[308.35836792 312.78381348]
[320.60684204 321.44262695]
[332.85528564 330.10147095]
[345.31042480 338.46023560]
[357.96493530 346.51403809]
[370.61941528 354.56784058]
[383.27392578 362.62164307]
[395.92840576 370.67544556]
[408.58291626 378.72924805]
[421.23739624 386.78305054]
[433.89190674 394.83685303]
[446.54638672 402.89065552]
[462.45642090 400.82891846]
[473.88745117 412.08551025]
[472.07058716 428.02536011]
[458.39956665 436.42074585]
[443.36163330 430.83148193]
[438.49258423 415.54516602]
[425.83810425 407.49136353]
[413.18359375 399.43756104]
[400.52911377 391.38375854]
[387.87460327 383.32995605]
[375.22012329 375.27615356]
[362.56561279 367.22235107]
[349.91113281 359.16854858]
[337.25662231 351.11474609]
[333.74121094 351.52603149]
[329.85198975 350.24603271]
[326.39010620 347.11779785]
[324.19644165 342.34991455]
[311.94799805 333.69107056]
[299.69955444 325.03225708]
[287.45108032 316.37341309]
[280.16400146 315.07757568]
[275.07592773 307.47387695]
[262.96929932 298.61785889]
[250.86267090 289.76181030]
[256.82296753 303.52679443]
[257.48742676 318.51208496]
[252.76879883 332.75054932]
[243.28649902 344.37319946]
[230.28523254 351.85433960]
[215.47166443 354.21191406]
[200.79032898 351.13647461]
[188.16841125 343.03173828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 144]
[8 143]
[9 142]
[11 141]
[12 140]
[13 139]
[14 137]
[15 136]
[17 134]
[18 133]
[19 132]
[29 46]
[30 45]
[34 43]
[35 42]
[36 41]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[60 80]
[63 73]
[64 72]
[88 102]
[89 101]
[90 100]
[92 99]
[93 98]
[113 128]
[114 127]
[115 126]
[117 124]
[118 123]
[145 185]
[146 184]
[147 183]
[148 181]
[149 180]
[150 179]
[151 178]
[152 174]
[153 173]
[154 172]
[155 171]
[156 170]
[157 169]
[158 168]
[159 167]
[160 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
