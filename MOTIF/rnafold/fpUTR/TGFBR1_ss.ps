%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:09:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGCCGGAGCGAGGCCGCCGCGGCGGCUAGGGAGGUGGGGCGAGGCGAGGUUUGCUGGGGUGAGGCAGCGGCGCGGCCGGGCCGGGCCGGGCCACAGGCGGUGGCGGCGGGACC\
) } def
/len { sequence length } bind def

/coor [
[59.45549393 371.28601074]
[44.53458786 369.74765015]
[31.94790459 361.58825684]
[24.45257378 348.59518433]
[23.69077873 333.61282349]
[14.74526787 345.65350342]
[5.79975796 357.69418335]
[-3.14575243 369.73486328]
[0.65129536 384.90444946]
[-6.23726845 398.94302368]
[-20.55887604 405.22201538]
[-35.55130005 400.77664185]
[-44.13557816 387.70590210]
[-42.25847626 372.18139648]
[-30.80630302 361.53329468]
[-15.18642712 360.78933716]
[-6.24091673 348.74868774]
[2.70459366 336.70800781]
[11.65010452 324.66732788]
[18.74305725 311.45028687]
[23.83164024 297.33978271]
[28.92022324 283.22927856]
[34.00880814 269.11877441]
[39.09738922 255.00827026]
[36.13649368 240.41093445]
[48.09653091 230.05389404]
[53.18511200 215.94338989]
[50.22421646 201.34605408]
[62.18425369 190.98902893]
[67.27283478 176.87852478]
[72.36141968 162.76802063]
[67.45146179 144.14393616]
[82.76791382 131.16949463]
[87.09828949 116.80815887]
[78.96100616 102.51579285]
[83.49895477 86.70775604]
[97.97817993 78.90780640]
[101.92471313 64.43628693]
[105.87125397 49.96477127]
[98.28969574 36.35750580]
[102.49819946 21.73754883]
[115.51736450 14.59354496]
[119.46390533 0.12202717]
[123.41044617 -14.34949112]
[115.82888031 -27.95675659]
[120.03738403 -42.57671356]
[133.05656433 -49.72071838]
[137.00309753 -64.19223785]
[140.94963074 -78.66374969]
[131.41120911 -90.76022339]
[130.83131409 -105.97591400]
[139.22290039 -118.46772003]
[153.19384766 -123.56191254]
[157.14038086 -138.03343201]
[161.08692932 -152.50494385]
[160.32826233 -161.73974609]
[165.33593750 -167.30648804]
[169.66632080 -181.66783142]
[173.99668884 -196.02915955]
[178.32707214 -210.39048767]
[168.83419800 -222.66505432]
[168.40275574 -238.17611694]
[177.19863892 -250.95938110]
[191.83967590 -256.09942627]
[206.69606018 -251.61976624]
[216.05523682 -239.24295044]
[216.31837463 -223.72810364]
[207.38433838 -211.04100037]
[192.68840027 -206.06010437]
[188.35803223 -191.69877625]
[184.02764893 -177.33744812]
[179.69726562 -162.97612000]
[175.55844116 -148.55841064]
[171.61190796 -134.08689880]
[167.66535950 -119.61537933]
[177.11593628 -108.13388062]
[178.00407410 -93.11139679]
[169.77998352 -80.29664612]
[155.42115784 -74.71721649]
[151.47460938 -60.24569702]
[147.52807617 -45.77417755]
[155.11802673 -33.00984573]
[151.32182312 -18.27744865]
[137.88195801 -10.40295219]
[133.93542480 4.06856585]
[129.98889160 18.54008293]
[137.57884216 31.30441666]
[133.78263855 46.03681183]
[120.34277344 53.91130829]
[116.39623260 68.38282776]
[112.44969177 82.85434723]
[120.03452301 93.10173035]
[120.36632538 105.84647369]
[113.32496643 116.47463226]
[101.45962524 121.13854218]
[97.12924194 135.49987793]
[102.89079285 144.91520691]
[102.45438385 155.72349548]
[96.21283722 164.28598022]
[86.47192383 167.85659790]
[81.38333893 181.96710205]
[76.29475403 196.07760620]
[78.89168549 211.68421936]
[67.29561615 221.03198242]
[62.20703506 235.14248657]
[64.80396271 250.74909973]
[53.20789337 260.09686279]
[48.11931229 274.20736694]
[43.03072739 288.31787109]
[37.94214630 302.42837524]
[32.85356140 316.53887939]
[45.75800705 308.89196777]
[60.72868729 307.95452881]
[74.48625183 313.93191528]
[84.01710510 325.51480103]
[87.23348999 340.16589355]
[83.43086243 354.67590332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 19]
[6 18]
[7 17]
[8 16]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[26 105]
[27 104]
[29 102]
[30 101]
[31 100]
[33 96]
[34 95]
[37 91]
[38 90]
[39 89]
[42 86]
[43 85]
[44 84]
[47 81]
[48 80]
[49 79]
[53 75]
[54 74]
[55 73]
[57 72]
[58 71]
[59 70]
[60 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
