%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:44:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGUCCGGCCCGGUCCUGUCCCGCAGCGUCCCGCCAGCCAGCUCCUUGCACCCUUCGCGGCCGAGGCGCUCCCUGGUGCUCCCCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[103.24084473 135.28161621]
[97.05023956 148.94456482]
[90.85963440 162.60752869]
[84.66902924 176.27047729]
[86.81403351 192.52874756]
[73.64345551 202.29951477]
[58.70606995 195.53147888]
[57.36816788 179.18699646]
[71.00607300 170.07987976]
[77.19667816 156.41691589]
[83.38728333 142.75396729]
[89.57788849 129.09100342]
[84.63279724 123.45220947]
[74.74260712 112.17460632]
[69.79751587 106.53581238]
[55.44340897 110.89008331]
[48.21529388 124.94461823]
[33.14088058 129.69200134]
[19.16355324 122.31569672]
[14.57581139 107.19193268]
[22.09947968 93.29337311]
[37.27090073 88.86578369]
[51.08913803 96.53598022]
[65.44324493 92.18170929]
[87.37036133 74.86663818]
[108.43496704 80.95842743]
[119.04157257 70.35182953]
[123.32866669 55.12253571]
[137.79930115 51.59409332]
[148.40591431 40.98749161]
[159.01251221 30.38088989]
[169.61911011 19.77428818]
[167.96456909 -0.98821253]
[181.66307068 -16.30063057]
[201.91567993 -16.94126701]
[211.04710388 -28.84156799]
[220.17852783 -40.74186707]
[229.30993652 -52.64216614]
[238.44136047 -64.54246521]
[247.57278442 -76.44276428]
[245.70697021 -91.90745544]
[255.13705444 -103.84597015]
[269.89175415 -105.52943420]
[279.02319336 -117.42973328]
[288.15460205 -129.33003235]
[290.41720581 -144.98861694]
[304.30349731 -150.37567139]
[313.43490601 -162.27597046]
[322.56634521 -174.17626953]
[331.69775391 -186.07656860]
[340.82919312 -197.97686768]
[339.94006348 -210.97172546]
[347.95220947 -220.72438049]
[360.07226562 -222.27110291]
[369.58816528 -233.86627197]
[367.78982544 -249.56790161]
[377.68624878 -261.89010620]
[393.40600586 -263.52230835]
[405.62289429 -253.49618530]
[407.08880615 -237.76002502]
[396.93408203 -225.64984131]
[381.18331909 -224.35037231]
[371.66741943 -212.75520325]
[369.84591675 -195.38526917]
[352.72949219 -188.84544373]
[343.59805298 -176.94514465]
[334.46664429 -165.04484558]
[325.33520508 -153.14454651]
[316.20379639 -141.24424744]
[314.59432983 -126.43685150]
[300.05490112 -120.19860840]
[290.92349243 -108.29830933]
[281.79208374 -96.39801025]
[283.98477173 -81.71034241]
[274.89373779 -69.51166534]
[259.47308350 -67.31134796]
[250.34165955 -55.41104507]
[241.21023560 -43.51074600]
[232.07882690 -31.61044502]
[222.94740295 -19.71014595]
[213.81597900 -7.80984545]
[218.00105286 1.03847861]
[218.56730652 10.86910534]
[215.38818359 20.25079155]
[208.88558960 27.80110741]
[199.97454834 32.39011383]
[189.93449402 33.30935669]
[180.22570801 30.38088989]
[169.61911011 40.98749161]
[159.01251221 51.59409332]
[148.40591431 62.20069504]
[144.87745667 76.67133331]
[129.64817810 80.95842743]
[119.04157257 91.56503296]
[125.10223389 105.48346710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[15 24]
[16 23]
[26 94]
[27 93]
[29 91]
[30 90]
[31 89]
[32 88]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[43 73]
[44 72]
[45 71]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
