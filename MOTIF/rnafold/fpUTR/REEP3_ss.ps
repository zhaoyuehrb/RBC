%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGACCGACCUCUGCGCAGCCCAGGCCGCCGCGCGCACACACCGGGCCCGGCUCCUGAGGGCGCCAGCGCGGCCCCGGGGAGCGCGAGGAGCCGGCGAAGCGCGCGGCCUGCCGUUGGCGGCCUGGUCCGCAGCGCCCUGCGCCCACCCGCCCCGGACGUGGGGCCCAAGCCCCCGUGAAG\
) } def
/len { sequence length } bind def

/coor [
[97.67770386 197.37541199]
[96.14373779 182.45405579]
[94.60977936 167.53269958]
[93.07581329 152.61134338]
[91.54185486 137.68998718]
[83.89392090 133.60877991]
[77.61550140 128.07958984]
[72.95326233 121.50042725]
[70.04730988 114.30342865]
[68.92903900 106.92792511]
[69.52542114 99.79431915]
[71.66939545 93.28043365]
[75.11530304 87.70150757]
[79.55834961 83.29499054]
[71.11862183 70.89453888]
[62.67890167 58.49409103]
[54.23918152 46.09364319]
[45.79946136 33.69319534]
[33.88286972 33.78666687]
[23.51224518 28.16369438]
[17.21813393 18.32832336]
[16.47223091 6.79552507]
[21.34474754 -3.55148983]
[13.33331013 -16.23284912]
[5.32187414 -28.91420937]
[-2.68956208 -41.59556961]
[-10.70099831 -54.27692795]
[-18.71243477 -66.95829010]
[-26.72387123 -79.63964844]
[-55.16431046 -104.71277618]
[-65.40261078 -115.67531586]
[-75.64090729 -126.63785553]
[-85.87920380 -137.60040283]
[-96.11750031 -148.56294250]
[-106.35579681 -159.52546692]
[-116.59409332 -170.48800659]
[-126.83238983 -181.45054626]
[-137.07069397 -192.41308594]
[-150.52859497 -188.55168152]
[-164.27087402 -190.85954285]
[-175.62071228 -198.82926941]
[-182.39233398 -210.85624695]
[-183.31181335 -224.56150818]
[-178.25639343 -237.26220703]
[-188.30603027 -248.39794922]
[-198.35566711 -259.53369141]
[-208.40531921 -270.66943359]
[-226.04391479 -275.91873169]
[-229.06472778 -293.19546509]
[-239.30302429 -304.15798950]
[-249.63453674 -315.03274536]
[-260.05850220 -325.81887817]
[-270.57415771 -336.51565552]
[-281.18075562 -347.12225342]
[-291.78738403 -357.72885132]
[-302.39398193 -368.33544922]
[-313.00057983 -378.94204712]
[-323.60717773 -389.54864502]
[-339.18310547 -389.71734619]
[-349.78860474 -400.62506104]
[-349.53179932 -415.47326660]
[-360.13839722 -426.07986450]
[-370.74499512 -436.68646240]
[-381.35159302 -447.29306030]
[-392.04837036 -457.80874634]
[-402.83450317 -468.23269653]
[-418.86746216 -471.67892456]
[-423.64120483 -487.36788940]
[-412.24493408 -499.16012573]
[-396.40213013 -494.92480469]
[-392.41052246 -479.01885986]
[-381.62438965 -468.59487915]
[-374.61288452 -466.20172119]
[-370.74499512 -457.89965820]
[-360.13839722 -447.29306030]
[-349.53179932 -436.68646240]
[-338.92520142 -426.07986450]
[-324.07696533 -426.33666992]
[-313.16928101 -415.73117065]
[-313.00057983 -400.15524292]
[-302.39398193 -389.54864502]
[-291.78738403 -378.94204712]
[-281.18075562 -368.33544922]
[-270.57415771 -357.72885132]
[-259.96755981 -347.12225342]
[-252.99795532 -344.60974121]
[-249.27235413 -336.24285889]
[-238.84838867 -325.45669556]
[-231.92268372 -322.82556152]
[-228.34048462 -314.39630127]
[-218.10218811 -303.43374634]
[-206.01277161 -302.70245361]
[-197.39317322 -293.63226318]
[-197.26957703 -280.71908569]
[-187.21992493 -269.58334351]
[-177.17028809 -258.44760132]
[-167.12065125 -247.31184387]
[-151.41751099 -251.07608032]
[-135.86726379 -246.38710022]
[-124.73477936 -234.43217468]
[-121.12290955 -218.40466309]
[-126.10814667 -202.65138245]
[-115.86985016 -191.68885803]
[-105.63155365 -180.72631836]
[-95.39325714 -169.76377869]
[-85.15496063 -158.80123901]
[-74.91666412 -147.83869934]
[-64.67836761 -136.87615967]
[-54.44006729 -125.91361237]
[-44.20177078 -114.95107269]
[-39.71310425 -129.26371765]
[-24.73277664 -128.49575806]
[-21.73128128 -113.79909515]
[-10.42558575 -123.65715027]
[0.88010925 -133.51519775]
[8.84459305 -148.48194885]
[25.43121719 -144.97192383]
[26.65000153 -128.06184387]
[10.73816490 -122.20950317]
[-0.56753093 -112.35144806]
[-11.87322617 -102.49339294]
[-14.04251099 -87.65108490]
[-6.03107500 -74.96972656]
[1.98036134 -62.28836441]
[9.99179745 -49.60700607]
[18.00323486 -36.92564392]
[26.01467133 -24.24428558]
[34.02610779 -11.56292629]
[52.07894516 -8.63388538]
[62.45575714 6.81173468]
[58.19990921 25.25347519]
[66.63962555 37.65392303]
[75.07935333 50.05437088]
[83.51907349 62.45481873]
[91.95879364 74.85526276]
[121.14572144 75.30236816]
[138.16508484 105.95829773]
[151.48336792 112.85927582]
[164.80163574 119.76024628]
[178.11991882 126.66122437]
[191.43820190 133.56219482]
[204.75646973 140.46318054]
[218.07475281 147.36415100]
[231.39303589 154.26512146]
[247.20565796 153.74426270]
[254.94636536 166.46948242]
[268.26464844 173.37045288]
[281.58953857 165.59544373]
[297.00164795 166.28150940]
[309.58300781 175.20973206]
[315.31893921 189.53112793]
[312.37918091 204.67579651]
[301.70172119 215.81114197]
[286.69378662 219.38391113]
[272.14428711 214.25404358]
[262.69592285 202.05845642]
[261.36364746 186.68873596]
[248.04537964 179.78775024]
[233.18536377 180.80221558]
[224.49205017 167.58340454]
[211.17378235 160.68243408]
[197.85549927 153.78144836]
[184.53721619 146.88047791]
[171.21894836 139.97950745]
[157.90066528 133.07852173]
[144.58238220 126.17755127]
[131.26411438 119.27657318]
[125.06388855 123.49643707]
[136.92237854 132.68209839]
[131.85058594 146.79864502]
[116.85768890 146.33715820]
[112.66343689 131.93615723]
[106.46321106 136.15602112]
[107.99717712 151.07737732]
[109.53113556 165.99873352]
[111.06510162 180.92010498]
[112.59906006 195.84146118]
[125.64391327 204.46501160]
[130.04415894 219.47074890]
[123.72211456 233.77340698]
[109.66287994 240.61970520]
[94.50478363 236.77703857]
[85.40501404 224.05978394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 177]
[2 176]
[3 175]
[4 174]
[5 173]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[28 123]
[29 122]
[30 110]
[31 109]
[32 108]
[33 107]
[34 106]
[35 105]
[36 104]
[37 103]
[38 102]
[44 97]
[45 96]
[46 95]
[47 94]
[49 91]
[50 90]
[51 88]
[52 87]
[53 85]
[54 84]
[55 83]
[56 82]
[57 81]
[58 80]
[61 77]
[62 76]
[63 75]
[64 74]
[65 72]
[66 71]
[113 121]
[114 120]
[115 119]
[137 167]
[138 166]
[139 165]
[140 164]
[141 163]
[142 162]
[143 161]
[144 160]
[146 158]
[147 157]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
