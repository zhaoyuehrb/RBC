%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUCCCGCGGGCCGUGGGCCCGGCACACUGGGGCUUUGUCCGGCCCCCCGCCGCGACCCGAGGCGGGGGCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[78.49337769 139.84193420]
[67.15925598 131.16728210]
[59.08871078 119.39537048]
[55.08375168 105.69602203]
[40.09591675 105.09203339]
[25.10808372 104.48804474]
[10.12024879 103.88405609]
[-4.86758661 103.28006744]
[-19.85542107 102.67607880]
[-34.80678177 103.88307953]
[-49.50363922 106.88346100]
[-64.20050049 109.88385010]
[-78.89736176 112.88423157]
[-93.59422302 115.88462067]
[-108.29107666 118.88500214]
[-122.60069275 127.97738647]
[-135.29902649 116.74401855]
[-128.01992798 101.43222809]
[-111.29146576 104.18814850]
[-96.59460449 101.18775940]
[-81.89774323 98.18737030]
[-67.20088959 95.18698883]
[-52.50402451 92.18659973]
[-37.80716705 89.18621826]
[-48.48455811 78.65088654]
[-48.95445251 63.65824509]
[-38.95775604 52.47495270]
[-24.00645447 51.26725006]
[-12.34440041 60.70104599]
[-10.40182495 75.57472992]
[-19.25143242 87.68824768]
[-4.26359749 88.29223633]
[10.72423744 88.89622498]
[25.71207237 89.50021362]
[40.69990921 90.10420227]
[55.68774414 90.70819092]
[61.46645737 76.22858429]
[71.81398773 64.56749725]
[85.50344849 57.10753250]
[100.91172791 54.73320389]
[116.21189880 57.72603607]
[129.58987427 65.73116302]
[139.45947266 77.79945374]
[144.65046692 92.50000000]
[159.65046692 92.50000000]
[174.65046692 92.50000000]
[189.65046692 92.50000000]
[204.65046692 92.50000000]
[219.65046692 92.50000000]
[234.65046692 92.50000000]
[243.51017761 89.30101776]
[250.25140381 92.81422424]
[265.23925781 93.41821289]
[280.22708130 94.02220154]
[294.32760620 86.84684753]
[306.73300171 95.09035492]
[321.72085571 95.69434357]
[337.79058838 90.29067993]
[347.43164062 104.23653412]
[336.69967651 117.36138916]
[321.11685181 110.68217468]
[306.12902832 110.07818604]
[293.10052490 117.29673767]
[279.62307739 109.01003265]
[264.63525391 108.40604401]
[249.64741516 107.80205536]
[234.65046692 107.50000000]
[219.65046692 107.50000000]
[204.65046692 107.50000000]
[189.65046692 107.50000000]
[174.65046692 107.50000000]
[159.65046692 107.50000000]
[144.65046692 107.50000000]
[140.09713745 121.02696991]
[131.55912781 132.46437073]
[119.88490295 140.67559814]
[106.23460388 144.84466553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 36]
[5 35]
[6 34]
[7 33]
[8 32]
[9 31]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[44 73]
[45 72]
[46 71]
[47 70]
[48 69]
[49 68]
[50 67]
[52 66]
[53 65]
[54 64]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
