%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGCUGCGGCGGUGGGGCCGGGCGAGGUCCGCUGCGGUCCCGGCGGCUCCGUGGCUGCUCCGCUCUGAGCGCCUGGCGCGCCCCGCGCCCUCCCUGCCGGGGCCGCUGGGCCGGGGAUGCACGCGGGGCCCGGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[77.37615204 108.48117828]
[62.39003754 109.12651825]
[47.40392685 109.77185059]
[32.41781235 110.41718292]
[23.90726852 113.93420410]
[17.10303307 110.91165924]
[2.10650635 111.23440552]
[-12.89002132 111.55714417]
[-27.88654900 111.87989044]
[-42.88307571 112.20262909]
[-57.87960434 112.52536774]
[-72.87612915 112.84811401]
[-87.87265778 113.17085266]
[-102.86918640 113.49359131]
[-117.86571503 113.81633759]
[-132.86224365 114.13907623]
[-147.84054565 114.94560242]
[-162.78501892 116.23507690]
[-175.86897278 125.13006592]
[-189.21426392 118.51550293]
[-204.15873718 119.80497742]
[-219.10321045 121.09444427]
[-234.04768372 122.38391876]
[-248.99215698 123.67339325]
[-263.93661499 124.96286011]
[-278.88110352 126.25233459]
[-293.82556152 127.54180908]
[-308.75531006 128.99198914]
[-323.66857910 130.60270691]
[-338.58184814 132.21342468]
[-353.49511719 133.82414246]
[-364.63507080 145.36889648]
[-380.59252930 143.71397400]
[-389.12631226 130.12890625]
[-383.69003296 115.03498840]
[-368.45391846 110.01098633]
[-355.10583496 118.91088104]
[-340.19256592 117.30015564]
[-325.27929688 115.68943787]
[-310.36602783 114.07872009]
[-304.00756836 110.20529938]
[-295.11505127 112.59733582]
[-280.17056274 111.30786133]
[-265.22610474 110.01838684]
[-250.28161621 108.72891998]
[-235.33714294 107.43944550]
[-220.39266968 106.14997101]
[-205.44821167 104.86050415]
[-190.50373840 103.57102966]
[-178.48870850 94.76827240]
[-164.07449341 101.29060364]
[-149.13002014 100.00112915]
[-146.56561279 97.48229980]
[-142.62567139 96.11742401]
[-137.88368225 96.55200958]
[-133.18498230 99.14254761]
[-118.18845367 98.81980896]
[-103.19192505 98.49707031]
[-88.19539642 98.17432404]
[-73.19887543 97.85158539]
[-58.20234680 97.52883911]
[-43.20581818 97.20610046]
[-28.20928955 96.88336182]
[-13.21276283 96.56061554]
[1.78376496 96.23787689]
[16.78029251 95.91513824]
[31.77248001 95.43106842]
[46.75859070 94.78573608]
[61.74470139 94.14040375]
[76.73081207 93.49507141]
[81.54753113 84.40270996]
[89.71076965 78.13905334]
[99.74005890 75.84008789]
[109.81648254 77.92272949]
[118.11260223 84.00929260]
[123.12384033 92.99591064]
[138.12036133 93.31865692]
[152.08381653 85.88007355]
[164.64166260 93.88941956]
[179.63819885 94.21216583]
[194.63471985 94.53490448]
[209.63125610 94.85764313]
[224.62777710 95.18038940]
[229.32647705 92.58984375]
[234.06846619 92.15526581]
[238.00840759 93.52013397]
[240.57281494 96.03897095]
[255.51728821 97.32843781]
[270.46176147 98.61791229]
[285.40621948 99.90738678]
[300.35070801 101.19685364]
[315.29516602 102.48632812]
[330.23965454 103.77580261]
[345.18411255 105.06526947]
[356.05712891 92.15390015]
[372.31594849 88.27964783]
[387.53823853 94.77023315]
[395.83117676 108.89875031]
[410.79992676 109.86637878]
[425.76867676 110.83400726]
[440.73745728 111.80162811]
[455.70620728 112.76925659]
[470.67495728 113.73688507]
[485.65325928 114.54341125]
[500.63937378 115.18874359]
[514.75964355 108.05232239]
[527.14227295 116.33001709]
[542.12835693 116.97534943]
[556.41198730 108.91870117]
[570.39154053 117.49219513]
[569.68603516 133.87615967]
[555.02124023 141.21617126]
[541.48303223 131.96145630]
[526.49694824 131.31613159]
[513.44854736 138.49870300]
[499.99404907 130.17485046]
[485.00793457 129.52952576]
[478.14022827 132.40496826]
[469.70733643 128.70564270]
[454.73858643 127.73801422]
[439.76983643 126.77038574]
[424.80105591 125.80276489]
[409.83230591 124.83513641]
[394.86355591 123.86750793]
[387.29632568 134.91503906]
[375.15304565 140.81156921]
[361.57513428 139.91224670]
[350.13467407 132.34599304]
[343.89465332 120.00974274]
[328.95016479 118.72027588]
[314.00570679 117.43080139]
[299.06121826 116.14132690]
[284.11676025 114.85186005]
[269.17227173 113.56238556]
[254.22781372 112.27291107]
[239.28334045 110.98344421]
[224.30503845 110.17691803]
[209.30850220 109.85417175]
[194.31198120 109.53143311]
[179.31546021 109.20869446]
[164.31892395 108.88594818]
[151.42813110 116.34761810]
[137.79762268 108.31518555]
[122.80109406 107.99243927]
[109.81648254 122.07727051]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 52]
[18 51]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 40]
[29 39]
[30 38]
[31 37]
[76 144]
[77 143]
[79 141]
[80 140]
[81 139]
[82 138]
[83 137]
[87 136]
[88 135]
[89 134]
[90 133]
[91 132]
[92 131]
[93 130]
[94 129]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 117]
[105 116]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
