%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:47:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACUCGAGGCGGGGCUGCUGGGUCUUCCAGGAGCGCCCAGACGCGGGCAGGUGGCCGCCGGUGGCCACAGGCCUGGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[110.81154633 156.04602051]
[101.16902924 157.06732178]
[91.49277496 156.44177246]
[82.06201935 154.18740845]
[73.14892578 150.36929321]
[65.01070404 145.09761047]
[57.88220596 138.52450562]
[51.96915436 130.83964539]
[47.44218445 122.26481628]
[44.43193436 113.04745483]
[43.02528000 103.45357513]
[43.26280975 93.76003265]
[45.13766861 84.24655914]
[31.38923645 78.24817657]
[17.64080238 72.24980164]
[3.78260922 66.50954437]
[-10.18049717 61.02943420]
[-24.14360237 55.54931641]
[-39.81657410 57.70999908]
[-48.83730316 45.85775375]
[-62.80041122 40.37763977]
[-76.76351929 34.89752197]
[-90.72662354 29.41740799]
[-105.94689178 34.48917770]
[-119.32283783 25.63119888]
[-120.59356689 9.63855076]
[-108.78428650 -1.22057426]
[-92.95407867 1.38401532]
[-85.24650574 15.45430183]
[-71.28340149 20.93441582]
[-57.32029724 26.41453171]
[-43.35718918 31.89464760]
[-28.68295288 29.34199142]
[-18.66348839 41.58621216]
[-4.70038176 47.06632614]
[9.26272488 52.54644012]
[16.82381248 52.04622650]
[23.63918304 58.50136566]
[37.38761520 64.49974823]
[51.13605118 70.49812317]
[66.13203430 54.05430222]
[86.27652740 44.59501266]
[108.50722504 43.55823135]
[129.44468689 51.10156631]
[145.90603638 66.07830048]
[155.38888550 86.21171570]
[170.29457092 84.53224945]
[185.20025635 82.85278320]
[200.10594177 81.17330933]
[215.01162720 79.49384308]
[224.85494995 67.42127991]
[239.99534607 65.93039703]
[251.44403076 75.38890076]
[266.34973145 73.70943451]
[281.25540161 72.02996063]
[296.16107178 70.35049438]
[311.06677246 68.67102814]
[325.97244263 66.99156189]
[335.62905884 54.48056030]
[351.31439209 52.54509735]
[363.72259521 62.33345413]
[365.49212646 78.03836823]
[355.57312012 90.34239197]
[339.85037231 91.94577026]
[327.65191650 81.89724731]
[312.74624634 83.57671356]
[297.84054565 85.25617981]
[282.93487549 86.93564606]
[268.02917480 88.61511230]
[253.12350464 90.29457855]
[244.06657410 102.06350708]
[228.97401428 103.97906494]
[216.69108582 94.39952850]
[201.78540039 96.07899475]
[186.87973022 97.75846100]
[171.97404480 99.43792725]
[157.06835938 101.11739349]
[156.05578613 110.76083374]
[153.42553711 120.09373474]
[149.25352478 128.84677124]
[143.66015625 136.76733398]
[136.80682373 143.62687683]
[128.89132690 149.22740173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 40]
[14 39]
[15 38]
[16 36]
[17 35]
[18 34]
[20 32]
[21 31]
[22 30]
[23 29]
[46 77]
[47 76]
[48 75]
[49 74]
[50 73]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
