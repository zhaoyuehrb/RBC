%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:17:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGACCAAGAGUAGGCAGCAGCGGCGGCGGCGGAGGAGGAGGCGGUGGUGGAGGUGCGCGGCCUGAAGAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[72.52531433 339.90802002]
[57.28132629 338.03277588]
[45.02693558 328.77398682]
[39.05850220 314.62219238]
[40.98150635 299.38415527]
[50.27867508 287.15884399]
[64.44911194 281.23480225]
[66.28052521 266.34701538]
[54.74686813 258.75646973]
[47.62704849 246.84861755]
[46.38754272 232.96307373]
[51.33277893 219.85754395]
[61.53306961 210.16023254]
[74.99878693 205.84269714]
[77.43592834 191.04202271]
[79.87306976 176.24133301]
[82.31021118 161.44064331]
[84.74736023 146.63995361]
[79.18074799 132.82467651]
[89.05743408 120.46499634]
[91.49457550 105.66430664]
[89.55873108 97.58393097]
[94.34484863 90.31474304]
[97.38365936 75.62577820]
[100.42247009 60.93682098]
[101.94982147 46.01478195]
[101.94982147 31.01478195]
[94.21251678 17.21460915]
[101.94982147 4.48733711]
[101.94982147 -10.51266289]
[94.21251678 -24.31283569]
[101.94982147 -37.04010773]
[101.94982147 -52.04010773]
[88.60868835 -59.64995956]
[80.87371826 -72.91893768]
[80.82557678 -88.27775574]
[88.47721100 -101.59496307]
[101.77037048 -109.28830719]
[117.12926483 -109.28830719]
[130.42242432 -101.59496307]
[138.07406616 -88.27775574]
[138.02590942 -72.91893768]
[130.29093933 -59.64995956]
[116.94982147 -52.04010773]
[116.94982147 -37.04010773]
[124.68711853 -24.31283569]
[116.94982147 -10.51266289]
[116.94982147 4.48733711]
[124.68711853 17.21460915]
[116.94982147 31.01478195]
[116.94982147 46.01478195]
[118.94317627 47.70138550]
[120.38292694 50.29451752]
[120.92250061 53.58625412]
[120.29647827 57.24885559]
[118.35915375 60.86598969]
[115.11143494 63.97563171]
[112.07262421 78.66459656]
[109.03381348 93.35355377]
[106.29526520 108.10144806]
[103.85812378 122.90213776]
[109.25041199 137.77606201]
[99.54804230 149.07710266]
[97.11090088 163.87779236]
[94.67375946 178.67846680]
[92.23661804 193.47915649]
[89.79947662 208.27984619]
[102.61511230 218.51167297]
[108.56545258 233.69343567]
[106.14315033 249.72477722]
[96.08888245 262.32550049]
[81.16830444 268.17843628]
[79.33689117 283.06622314]
[91.64908600 292.24801636]
[97.70611572 306.36212158]
[95.87867737 321.61190796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 73]
[8 72]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[20 61]
[21 60]
[23 59]
[24 58]
[25 57]
[26 51]
[27 50]
[29 48]
[30 47]
[32 45]
[33 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
