%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGCGCGGGCGCGGGCGCGCGCGGCGGCGGCGCGUUCCGUUCCGGGCCGAGGCUCGCGGCGGAAAAGUUGCGGGGCAUAGACGAGCGGCCCCGGGACGGGCAGCUAGCGCGACCCUGAGCCGGCGCCCGUGGUCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[73.55966187 402.21078491]
[73.55966187 387.21078491]
[73.55966187 372.21078491]
[73.39489746 357.21166992]
[73.06538391 342.21530151]
[72.73587036 327.21890259]
[72.40636444 312.22253418]
[71.91214752 297.23068237]
[71.25328064 282.24514771]
[70.59442139 267.25964355]
[69.93555450 252.27410889]
[69.27669525 237.28858948]
[68.61782837 222.30307007]
[67.95896912 207.31753540]
[67.30010223 192.33201599]
[59.01123428 179.95687866]
[66.13490295 165.83016968]
[65.47604370 150.84465027]
[64.81717682 135.85913086]
[52.56676102 127.20307159]
[38.22165680 131.58689880]
[23.87654877 135.97071838]
[9.53144360 140.35455322]
[-4.81366348 144.73837280]
[-19.15876961 149.12219238]
[-25.10366821 163.58567810]
[-38.97858810 170.79820251]
[-54.23221970 167.35424805]
[-63.66225815 154.87994385]
[-62.81613541 139.26527405]
[-52.09335709 127.88299561]
[-36.55689621 126.10749054]
[-23.54259491 134.77708435]
[-9.19748783 130.39326477]
[5.14761829 126.00944519]
[19.49272537 121.62561798]
[33.83782959 117.24179077]
[48.18293762 112.85797119]
[51.45186996 98.21849823]
[40.33414459 88.14892578]
[29.21642303 78.07936096]
[18.09869766 68.00978851]
[6.98097420 57.94022369]
[-4.13675022 47.87065506]
[-19.55926895 44.34128189]
[-23.79840469 30.06266022]
[-34.91612625 19.99309158]
[-46.03385162 9.92352295]
[-57.15157700 -0.14604515]
[-68.26930237 -10.21561337]
[-84.40534973 -13.14134884]
[-89.68415833 -28.66765785]
[-78.67533112 -40.82240295]
[-62.70381546 -37.10182571]
[-58.19972992 -21.33333778]
[-47.08200836 -11.26376915]
[-35.96428299 -1.19420075]
[-24.84655952 8.87536812]
[-13.72883511 18.94493675]
[0.89846963 21.75406837]
[5.93281841 36.75292969]
[17.05054283 46.82249832]
[28.16826630 56.89206696]
[39.28599167 66.96163940]
[50.40371323 77.03120422]
[61.52143860 87.10077667]
[71.54822540 72.17997742]
[86.77616119 63.30797577]
[103.99739838 61.99786758]
[119.73538208 68.20578003]
[128.12023926 55.76816940]
[136.50509644 43.33055878]
[137.80369568 27.56273460]
[151.33369446 21.33469009]
[159.71855164 8.89707851]
[168.10340881 -3.54053187]
[176.48826599 -15.97814274]
[184.87312317 -28.41575432]
[193.25798035 -40.85336304]
[185.94062805 -54.29639435]
[185.72033691 -69.60031891]
[192.64768982 -83.24840546]
[205.13085938 -92.10442352]
[220.30130005 -94.13332367]
[234.67294312 -88.86888123]
[244.94331360 -77.52082825]
[248.75231934 -62.69686508]
[245.22471619 -47.80342484]
[235.17109680 -36.26291275]
[220.90173340 -30.72725487]
[205.69558716 -32.46850586]
[197.31072998 -20.03089523]
[188.92587280 -7.59328508]
[180.54101562 4.84432602]
[172.15615845 17.28193665]
[163.77130127 29.71954727]
[163.07244873 44.59774780]
[148.94270325 51.71541595]
[140.55784607 64.15302277]
[132.17298889 76.59063721]
[138.55372620 90.16584778]
[153.48048401 91.64635468]
[168.40724182 93.12686157]
[180.56129456 83.38434601]
[195.67805481 85.09842682]
[204.89115906 96.74550629]
[219.81791687 98.22600555]
[234.52883911 90.97888947]
[248.00820923 100.31904602]
[246.38961792 116.63812256]
[231.33811951 123.14845276]
[218.33740234 113.15276337]
[203.41064453 111.67226410]
[192.08914185 121.28262329]
[176.93019104 119.99382019]
[166.92672729 108.05361938]
[151.99996948 106.57311249]
[137.07321167 105.09260559]
[130.98136902 122.36730194]
[117.19894409 135.00529480]
[98.72216034 139.77215576]
[79.80270386 135.20027161]
[80.46156311 150.18579102]
[81.12042999 165.17131042]
[89.45642090 178.61831665]
[82.28562164 191.67315674]
[82.94448853 206.65867615]
[83.60335541 221.64419556]
[84.26221466 236.62973022]
[84.92108154 251.61524963]
[85.57994080 266.60076904]
[86.23880768 281.58630371]
[86.89766693 296.57180786]
[90.42382812 305.08404541]
[87.40274048 311.89303589]
[87.73225403 326.88940430]
[88.06176758 341.88577271]
[88.39127350 356.88217163]
[91.72959900 365.46981812]
[88.55966187 372.21078491]
[88.55966187 387.21078491]
[88.55966187 402.21078491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[4 138]
[5 137]
[6 136]
[7 135]
[8 133]
[9 132]
[10 131]
[11 130]
[12 129]
[13 128]
[14 127]
[15 126]
[17 124]
[18 123]
[19 122]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 66]
[40 65]
[41 64]
[42 63]
[43 62]
[44 61]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[70 100]
[71 99]
[72 98]
[74 96]
[75 95]
[76 94]
[77 93]
[78 92]
[79 91]
[101 118]
[102 117]
[103 116]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
