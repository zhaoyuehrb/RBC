%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCCUCUGCCCCAGUCACUGAGCCGCCGCCGAGGAUUCAGCAGCCUCCCCCUUGAGCCCCCUCGCUUCCCGACGUUCCGUUCCCCCCUGCCCGCCUUCUCCCGCCACCGCCGCCGCCGCCUUCCGCAGGCCGUUUCCACCGAGGAAAAGGAAUCGUAUCGU\
) } def
/len { sequence length } bind def

/coor [
[79.57231903 185.14376831]
[72.72988892 171.79531860]
[70.46459961 156.96734619]
[73.00941467 142.18479919]
[80.10261536 128.96789551]
[91.01420593 118.67625427]
[80.06014252 128.92361450]
[69.10607910 139.17098999]
[58.15202332 149.41835022]
[53.35995865 164.49638367]
[38.77980804 167.54078674]
[27.82574654 177.78816223]
[31.19000244 192.70892334]
[26.66401291 207.21450806]
[15.55887985 217.43910217]
[0.92486340 220.71043396]
[-13.28601456 216.24763489]
[-24.24007416 226.49499512]
[-24.51601410 242.29687500]
[-35.94262695 253.21511841]
[-51.74070740 252.77212524]
[-62.53753281 241.23072815]
[-61.92753983 225.43821716]
[-50.27262497 214.76400757]
[-34.48744202 215.54093933]
[-23.53338242 205.29357910]
[-27.03996277 190.81706238]
[-22.80141830 176.43336487]
[-11.86001778 166.03373718]
[2.91476607 162.48373413]
[17.57837868 166.83410645]
[28.53243828 156.58673096]
[32.54099274 142.24166870]
[47.90465546 138.46429443]
[58.85871506 128.21693420]
[69.81277466 117.96955872]
[80.76683044 107.72219086]
[66.79431152 113.17825317]
[53.34201813 106.54231262]
[49.16812897 92.13471985]
[56.99007416 79.33560944]
[71.71533966 76.47790527]
[83.75675964 85.42173767]
[75.88886261 72.65081787]
[68.02096558 59.87990952]
[60.15307236 47.10899353]
[49.01675797 51.07023621]
[37.10582733 52.34286118]
[25.06883812 50.78330994]
[13.57851028 46.40427780]
[3.29416227 39.37800217]
[-5.17605257 30.03052711]
[-11.31091022 18.82706833]
[-14.70779800 6.34909248]
[-15.10841656 -6.73577070]
[-12.41688156 -19.70942879]
[-6.70902014 -31.84273911]
[-16.63940620 -43.08495712]
[-26.56978989 -54.32717514]
[-36.50017548 -65.56938934]
[-52.28773117 -66.29645538]
[-62.87522507 -78.03019714]
[-61.98128128 -93.80918121]
[-50.13626480 -104.27202606]
[-34.36761093 -103.21131134]
[-24.03058434 -91.25633240]
[-25.25795746 -75.49977875]
[-15.32757282 -64.25756073]
[-5.39718771 -53.01534271]
[4.53319693 -41.77312469]
[11.35543728 -44.88873672]
[12.78096867 -59.82084656]
[24.99991608 -51.11996078]
[31.82215691 -54.23557281]
[29.82887459 -69.10254669]
[27.83559418 -83.96951294]
[25.84231186 -98.83648682]
[17.74480438 -113.73168182]
[29.81627274 -125.63613129]
[44.59720993 -117.33190155]
[40.70928192 -100.82977295]
[42.70256424 -85.96279907]
[44.69584656 -71.09582520]
[46.68912888 -56.22885513]
[67.33538818 -48.53877258]
[83.15479279 -33.90335846]
[92.01888275 -14.78832436]
[92.92656708 5.78116751]
[86.10550690 24.69773102]
[72.92398071 39.24110031]
[80.79187775 52.01201248]
[88.65977478 64.78292847]
[96.52767181 77.55384064]
[104.07157898 80.00661469]
[109.53897095 84.62423706]
[112.45896149 90.30775452]
[112.84648895 95.93073273]
[127.82949829 96.64446259]
[142.81251526 97.35819244]
[157.79551697 98.07192230]
[171.94821167 91.00002289]
[184.29292297 99.33414459]
[199.27592468 100.04787445]
[214.25894165 100.76160431]
[229.24806213 101.33266449]
[244.24194336 101.76100159]
[251.58592224 87.26598358]
[264.46313477 77.45104980]
[280.27246094 74.23513031]
[295.84814453 78.21056366]
[308.09362793 88.53479767]
[314.59719849 103.10832214]
[329.59652710 103.25112152]
[343.46972656 95.64554596]
[356.12277222 103.50365448]
[371.12210083 103.64645386]
[386.12139893 103.78925323]
[401.12139893 103.78925323]
[416.12072754 103.64645386]
[425.01147461 90.92897797]
[439.69033813 85.89801788]
[454.51300049 90.48807526]
[463.77981567 102.93418121]
[463.92755127 118.45054626]
[454.89935303 131.07083130]
[440.16677856 135.94226074]
[425.39480591 131.19168091]
[416.26351929 118.64577484]
[401.26419067 118.78857422]
[394.57522583 122.01137543]
[385.97860718 118.78857422]
[370.97927856 118.64577484]
[355.97998047 118.50297546]
[343.17962646 126.11876678]
[329.45373535 118.25044250]
[314.45440674 118.10764313]
[308.92272949 130.85610962]
[298.91250610 140.55792236]
[285.91662598 145.72007751]
[271.89093018 145.53004456]
[258.95993042 139.98350525]
[249.09495544 129.88998413]
[243.81359863 116.75489044]
[228.81971741 116.32654572]
[222.01290894 119.29235840]
[213.54521179 115.74461365]
[198.56219482 115.03088379]
[183.57919312 114.31715393]
[170.49816895 121.44010162]
[157.08178711 113.05493164]
[142.09878540 112.34120178]
[127.11576843 111.62747192]
[112.13275909 110.91374207]
[127.11271667 111.68885040]
[141.07705688 117.16584015]
[152.58966064 126.78144836]
[160.46656799 139.54679871]
[163.89773560 154.14909363]
[162.53027344 169.08663940]
[156.50482178 182.82322693]
[146.44104004 193.94619751]
[133.37388611 201.31163025]
[118.64721680 204.16209412]
[103.77552032 202.20442200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 37]
[7 36]
[8 35]
[9 34]
[11 32]
[12 31]
[17 26]
[18 25]
[43 93]
[44 92]
[45 91]
[46 90]
[57 70]
[58 69]
[59 68]
[60 67]
[74 84]
[75 83]
[76 82]
[77 81]
[97 153]
[98 152]
[99 151]
[100 150]
[102 148]
[103 147]
[104 146]
[105 144]
[106 143]
[112 136]
[113 135]
[115 133]
[116 132]
[117 131]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
