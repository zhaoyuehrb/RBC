%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUCCGAGGCCGGCCGAACUCCCGCGCUCUCCCGCCGCCUCGCCUCGCCUGGUGUCUCUCCCGACC\
) } def
/len { sequence length } bind def

/coor [
[139.96670532 151.61650085]
[129.48152161 140.88986206]
[118.99633789 130.16320801]
[108.51115417 119.43656921]
[92.16060638 119.71710205]
[80.46646118 108.28618622]
[80.37472534 91.93349457]
[69.41218567 81.69519806]
[58.44964218 71.45689392]
[47.48710632 61.21860123]
[36.52456665 50.98030472]
[25.56202507 40.74200439]
[16.85145950 37.00366592]
[14.34703732 29.77946663]
[3.86185098 19.05282402]
[-6.62333584 8.32618141]
[-20.05985641 15.25086975]
[-34.94081116 17.90579033]
[-49.94299316 16.05487061]
[-63.73242188 9.86269188]
[-75.08294678 -0.12014145]
[-82.98529053 -13.00596237]
[-86.73678589 -27.64897156]
[-86.00383759 -42.74712372]
[-80.85163879 -56.95790100]
[-71.73829651 -69.01769257]
[-59.47418594 -77.85414886]
[-45.14981079 -82.68153381]
[-30.03888512 -83.07060242]
[-15.48506641 -78.98676300]
[-2.78246760 -70.79314423]
[6.93940449 -59.21831894]
[12.81608772 -45.29151154]
[14.32503033 -30.25108147]
[11.33205891 -15.43441677]
[4.10330677 -2.15900564]
[14.58849335 8.56763744]
[25.07368088 19.29427910]
[35.80032349 29.77946663]
[46.76286316 40.01776505]
[57.72540283 50.25606155]
[68.68794250 60.49435806]
[79.65048218 70.73265839]
[90.61302185 80.97095490]
[103.33589935 79.04547882]
[114.83191681 84.82653046]
[120.87315369 96.18797302]
[119.23779297 108.95138550]
[129.72297668 119.67803192]
[140.20817566 130.40466309]
[150.69335938 141.13131714]
[162.77775574 138.91906738]
[174.26100159 142.92886353]
[182.18110657 151.99870300]
[184.55853271 163.67834473]
[180.88995361 174.89056396]
[190.35627747 186.52622986]
[199.82260132 198.16189575]
[215.56768799 199.52859497]
[225.67063904 211.68202209]
[224.13755798 227.41177368]
[211.87799072 237.38566589]
[196.16532898 235.68637085]
[186.32160950 223.32203674]
[188.18693542 207.62821960]
[178.72061157 195.99255371]
[169.25428772 184.35687256]
[151.20857239 183.81785583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 51]
[2 50]
[3 49]
[4 48]
[7 44]
[8 43]
[9 42]
[10 41]
[11 40]
[12 39]
[14 38]
[15 37]
[16 36]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
