%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:34:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUGCUUCUCCCCCUCUCCCGUCAGCCUCCCUCCGAGUUUGGCCCCUCCGGCCGGGCGAUCGACGUUCCGCGUGCGUGCGGGCGCCUGACUUCACUUCCGGCUAACGCGCUCGGCUUGCCCCCUGGCCCCGG\
) } def
/len { sequence length } bind def

/coor [
[-108.40419769 281.61975098]
[-111.88854218 289.31359863]
[-116.28166199 296.52514648]
[-121.51799011 303.14764404]
[-127.51948547 309.08300781]
[-134.19676208 314.24346924]
[-141.45048523 318.55279541]
[-149.17276001 321.94741821]
[-157.24880981 324.37731934]
[-165.55867004 325.80688477]
[-173.97892761 326.21530151]
[-182.38459778 325.59689331]
[-190.65097046 323.96136475]
[-198.65544128 321.33331299]
[-206.27934265 317.75222778]
[-213.40972900 313.27157593]
[-219.94100952 307.95828247]
[-225.77650452 301.89147949]
[-230.82994080 295.16152954]
[-235.02664185 287.86859131]
[-238.30471802 280.12106323]
[-240.61590576 272.03414917]
[-241.92631531 263.72793579]
[-256.92529297 263.55340576]
[-271.92428589 263.37887573]
[-286.92324829 263.20434570]
[-301.92224121 263.02981567]
[-315.81152344 270.60601807]
[-328.44790649 262.72116089]
[-343.44686890 262.54663086]
[-358.44586182 262.37210083]
[-370.87988281 272.50988770]
[-386.52725220 268.96868896]
[-393.38461304 254.46504211]
[-386.19161987 240.12487793]
[-370.46609497 236.94874573]
[-358.27133179 247.37310791]
[-343.27233887 247.54763794]
[-328.27337646 247.72216797]
[-315.45693970 240.13348389]
[-301.74771118 248.03082275]
[-286.74871826 248.20535278]
[-271.74975586 248.37988281]
[-256.75076294 248.55441284]
[-241.75178528 248.72894287]
[-234.86767578 225.83625793]
[-220.57797241 206.64689636]
[-200.58453369 193.46920776]
[-177.27635193 187.89419556]
[-153.44412231 190.60343933]
[-131.94604492 201.28582764]
[-115.36515808 218.67314148]
[-102.03990173 211.78564453]
[-88.71464539 204.89814758]
[-75.38939667 198.01065063]
[-62.31262589 190.66230774]
[-49.50027847 182.86206055]
[-36.68793488 175.06182861]
[-23.87558746 167.26158142]
[-11.06324005 159.46133423]
[1.74910629 151.66110229]
[14.46982765 143.71231079]
[27.09720230 135.61604309]
[39.72457504 127.51979065]
[52.35195160 119.42353058]
[64.88426971 111.18089294]
[77.31983185 102.79299927]
[89.75539398 94.40510559]
[99.39720917 82.91444397]
[105.49826050 69.21125793]
[111.59930420 55.50807953]
[117.70035553 41.80489731]
[123.80140686 28.10171509]
[117.90438080 13.43881416]
[124.17955780 -1.06627810]
[138.90399170 -6.80794764]
[153.34191895 -0.37976441]
[158.92759705 14.40454483]
[152.34712219 28.77371216]
[137.50459290 34.20276260]
[131.40353394 47.90594482]
[125.30249023 61.60912704]
[119.20143890 75.31230927]
[113.10038757 89.01549530]
[118.05368042 94.64709473]
[132.91354370 111.54189301]
[147.28338623 107.23984528]
[161.65322876 102.93779755]
[172.65457153 91.56761169]
[187.06625366 95.32963562]
[201.43609619 91.02758789]
[207.46327209 76.59820557]
[221.37904358 69.46482086]
[236.61280823 72.99559784]
[245.97164917 85.52341461]
[245.03660583 101.13301849]
[234.24917603 112.45403290]
[218.70285034 114.14101410]
[205.73814392 105.39743042]
[191.36830139 109.69947815]
[181.39479065 120.76195526]
[165.95527649 117.30764008]
[151.58543396 121.60968781]
[137.21559143 125.91173553]
[124.77264404 128.41288757]
[113.64760590 126.76527405]
[105.01787567 121.82252502]
[99.71239471 114.73728180]
[98.14328766 106.84067535]
[85.70772552 115.22856903]
[73.27216339 123.61646271]
[67.84461975 131.07991028]
[60.44821167 132.05090332]
[47.82083511 140.14717102]
[35.19346237 148.24342346]
[22.56608772 156.33969116]
[16.96635246 163.67481995]
[9.54934788 164.47344971]
[-3.26299834 172.27368164]
[-16.07534409 180.07392883]
[-28.88769150 187.87417603]
[-41.70003891 195.67440796]
[-54.51238632 203.47465515]
[-57.09467316 208.22232056]
[-60.88871002 211.15242004]
[-64.97277832 212.10908508]
[-68.50189972 211.33590698]
[-81.82714844 218.22340393]
[-95.15240479 225.11090088]
[-108.47766113 231.99839783]
[-105.92887878 240.06182861]
[-104.37982941 248.37362671]
[-103.85308075 256.81033325]
[-104.35601044 265.24673462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 39]
[30 38]
[31 37]
[52 130]
[53 129]
[54 128]
[55 127]
[56 123]
[57 122]
[58 121]
[59 120]
[60 119]
[61 118]
[62 116]
[63 115]
[64 114]
[65 113]
[66 111]
[67 110]
[68 109]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[86 104]
[87 103]
[88 102]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
