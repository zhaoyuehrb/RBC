%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAGGCUCCCUGCGGGAGCAGGCUGGGCUCAGCUCCGCUGGACCCGCGCUGGGGAACUCUGGCCUCGCUGCACUC\
) } def
/len { sequence length } bind def

/coor [
[88.71799469 187.06748962]
[98.64157104 174.76716614]
[96.81015778 159.87939453]
[94.97874451 144.99160767]
[93.14733124 130.10383606]
[79.76837158 123.32125092]
[66.67719269 130.64389038]
[53.58601379 137.96653748]
[40.49483871 145.28918457]
[27.40366173 152.61183167]
[14.31248665 159.93446350]
[3.44064045 172.94366455]
[-12.06978226 166.09800720]
[-9.78536129 149.29866028]
[6.98984337 146.84329224]
[20.08102036 139.52064514]
[33.17219543 132.19801331]
[46.26337051 124.87536621]
[59.35454941 117.55271912]
[72.44572449 110.23007965]
[77.88036346 82.44448090]
[103.41548157 73.12905884]
[100.97834015 58.32836914]
[98.54119873 43.52768326]
[95.80265045 28.77978897]
[92.76383972 14.09082699]
[89.72502136 -0.59813505]
[86.68621063 -15.28709698]
[76.31360626 -27.23363113]
[81.31208038 -41.26447296]
[78.27326965 -55.95343399]
[75.23445892 -70.64239502]
[72.19564056 -85.33135986]
[69.15682983 -100.02032471]
[60.02705383 -114.30610657]
[71.22717285 -127.03378296]
[86.55794525 -119.79474640]
[83.84579468 -103.05913544]
[86.88460541 -88.37017059]
[89.92341614 -73.68121338]
[92.96223450 -58.99224854]
[96.00104523 -44.30328751]
[106.15628815 -33.40740585]
[101.37517548 -18.32591057]
[104.41398621 -3.63694811]
[107.45279694 11.05201435]
[110.49161530 25.74097633]
[115.05934143 31.82287025]
[113.34188080 41.09054184]
[115.77902985 55.89122772]
[118.21617126 70.69191742]
[128.93040466 81.18978119]
[143.77772522 83.32450104]
[158.62504578 85.45922852]
[173.47236633 87.59394836]
[184.18981934 76.37272644]
[199.46208191 73.62725830]
[213.41665649 80.41322327]
[220.68772888 94.12129211]
[218.47941589 109.48043060]
[207.64086914 120.58472443]
[192.33972168 123.16436005]
[178.45957947 116.22740936]
[171.33764648 102.44126892]
[156.49032593 100.30654907]
[141.64300537 98.17182159]
[126.79567719 96.03710175]
[123.72095490 115.32288361]
[108.03511047 128.27241516]
[109.86652374 143.16020203]
[111.69793701 158.04797363]
[113.52935028 172.93574524]
[126.13819885 182.46426392]
[128.23355103 198.12902832]
[118.57226562 210.63642883]
[102.88621521 212.56604004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 72]
[3 71]
[4 70]
[5 69]
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[22 51]
[23 50]
[24 49]
[25 47]
[26 46]
[27 45]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[52 67]
[53 66]
[54 65]
[55 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
