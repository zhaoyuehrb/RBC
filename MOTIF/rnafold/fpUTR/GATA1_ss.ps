%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACACCCCCUGGGAUCACACUGAGCUUGCCACAUCCCCAAGGCGGCCGAACCCUCCGCAACCACCAGCCCAGGUUAAUCCCCAGAGGCUCC\
) } def
/len { sequence length } bind def

/coor [
[87.04394531 445.94851685]
[74.02119446 437.80581665]
[66.82868958 424.23513794]
[67.40116882 408.88693237]
[75.58464813 395.88977051]
[89.17781067 388.73983765]
[89.68992615 373.74856567]
[82.39165497 360.76455688]
[90.59560394 347.23660278]
[91.10771942 332.24533081]
[91.61983490 317.25408936]
[92.13195038 302.26281738]
[92.64406586 287.27157593]
[92.90016174 272.27374268]
[92.90016174 257.27374268]
[83.28648376 242.70072937]
[92.34829712 226.78356934]
[91.83618164 211.79231262]
[88.38910675 205.07470703]
[91.57134247 196.28237915]
[91.57134247 181.28237915]
[91.57134247 166.28237915]
[83.83403778 153.55511475]
[91.57134247 139.75492859]
[91.57134247 124.75493622]
[91.57134247 109.75493622]
[86.30757141 95.70884705]
[76.44951630 84.40314484]
[66.59146118 73.09745026]
[56.73340225 61.79175568]
[41.67679596 64.82395172]
[27.12642860 59.90639877]
[16.99627113 48.36189651]
[14.01128864 33.29586029]
[18.97442436 18.76097679]
[30.55062294 8.66705608]
[45.62594223 5.72931290]
[60.14519501 10.73798466]
[70.20278168 22.34576416]
[73.09325409 37.43021774]
[68.03910065 51.93370056]
[77.89715576 63.23939896]
[87.75521088 74.54508972]
[97.61326599 85.85079193]
[112.39515686 83.30213165]
[117.89797211 69.34795380]
[115.76277924 53.67149353]
[127.62967682 44.67004776]
[133.13249207 30.71586990]
[130.18083191 14.58453941]
[142.84870911 4.17026854]
[158.10447693 10.18636513]
[160.25433350 26.44398499]
[147.08666992 36.21868134]
[141.58384705 50.17285919]
[144.11264038 64.85122681]
[131.85214233 74.85076904]
[126.34933472 88.80494690]
[141.21650696 90.79668427]
[152.08793640 101.13168335]
[154.82876587 115.87915039]
[148.39659119 129.43005371]
[135.23779297 136.63047791]
[120.35717010 134.74180603]
[109.41439056 124.48239136]
[106.57134247 109.75493622]
[106.57134247 124.75493622]
[106.57134247 139.75492859]
[114.30863953 153.55511475]
[106.57134247 166.28237915]
[106.57134247 181.28237915]
[106.57134247 196.28237915]
[106.82743835 211.28019714]
[107.33955383 226.27145386]
[116.28955078 235.74865723]
[116.29247284 248.38031006]
[107.90016174 257.27374268]
[107.90016174 272.27374268]
[111.08239746 281.06610107]
[107.63532257 287.78369141]
[107.12320709 302.77493286]
[106.61109161 317.76620483]
[106.09897614 332.75744629]
[105.58685303 347.74871826]
[112.84849548 361.80499268]
[104.68118286 374.26068115]
[104.16905975 389.25195312]
[117.24260712 397.31283569]
[124.52005005 410.83816528]
[124.04379272 426.18966675]
[115.94195557 439.23788452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 87]
[7 86]
[9 84]
[10 83]
[11 82]
[12 81]
[13 80]
[14 78]
[15 77]
[17 74]
[18 73]
[20 72]
[21 71]
[22 70]
[24 68]
[25 67]
[26 66]
[27 44]
[28 43]
[29 42]
[30 41]
[45 58]
[46 57]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
