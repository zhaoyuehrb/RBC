%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACUUCCGCCCAUCCCCCUCCGGAUCCCUCUGUUCGGGCUCGGGUUUCCGCCGAGACGACAGGGACUGCCAGGUCGGAAGUAGUGUGAGGCUCGUGGGCGGAGCCAAGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[151.37539673 451.19116211]
[150.17860413 436.23898315]
[148.98181152 421.28680420]
[140.25370789 409.21743774]
[146.86528015 394.84390259]
[145.66848755 379.89172363]
[143.67761230 365.02444458]
[140.89828491 350.28417969]
[138.11894226 335.54391479]
[135.33961487 320.80364990]
[132.56028748 306.06338501]
[129.78096008 291.32312012]
[127.00162506 276.58288574]
[124.22229767 261.84262085]
[121.44296265 247.10235596]
[107.92301178 240.90971375]
[100.55484772 227.78819275]
[102.34689331 212.66728210]
[112.82003784 201.37040710]
[110.04070282 186.63014221]
[107.26137543 171.88987732]
[104.48204041 157.14961243]
[101.50674438 142.44766235]
[98.33600616 127.78660583]
[86.27936554 125.31512451]
[76.08726501 117.70240021]
[69.90446472 106.11309814]
[69.21323395 92.58119965]
[74.49464417 79.65476990]
[85.07226562 69.91616058]
[76.78026581 57.41645432]
[68.48825836 44.91674423]
[60.19625854 32.41703796]
[51.90425873 19.91732788]
[43.61225891 7.41761923]
[36.16283417 1.90735281]
[35.27107239 -5.52704763]
[27.31476021 -18.24306488]
[14.86826992 -21.93267632]
[8.52229023 -32.79393768]
[11.24063683 -44.66338348]
[3.62565017 -57.58669662]
[-3.98933697 -70.51000977]
[-11.60432434 -83.43331909]
[-19.21931076 -96.35662842]
[-34.67161942 -98.75666809]
[-44.92708969 -110.56172180]
[-45.14340210 -126.19780731]
[-35.21842194 -138.28204346]
[-19.83842087 -141.10862732]
[-6.26536369 -133.34292603]
[-0.90803444 -118.65166473]
[-6.29599953 -103.97161865]
[1.31898725 -91.04830933]
[8.93397427 -78.12499237]
[16.54896164 -65.20168304]
[24.16394806 -52.27837372]
[39.85992813 -44.55315399]
[40.03077698 -26.19937706]
[47.98709106 -13.48336124]
[56.11196899 -0.87438166]
[64.40396881 11.62532711]
[72.69596863 24.12503624]
[80.98796844 36.62474442]
[89.27996826 49.12445450]
[97.57197571 61.62416077]
[112.43926239 63.61504364]
[123.72782898 53.73737335]
[135.01638794 43.85970306]
[140.30690002 28.94926643]
[154.98016357 26.39107895]
[166.26872253 16.51340866]
[168.76614380 0.66593421]
[182.78395081 -7.13666248]
[197.56889343 -0.90889609]
[201.77922058 14.57182407]
[192.18513489 27.43001366]
[176.14639282 27.80197144]
[164.85783386 37.67964172]
[160.37477112 51.88356018]
[144.89405823 55.14826584]
[133.60549927 65.02593231]
[122.31693268 74.90361023]
[131.03067017 93.67852020]
[126.89272308 112.72695160]
[112.99705505 124.61586761]
[116.16779327 139.27691650]
[121.09909058 147.12161255]
[119.22230530 154.37028503]
[122.00163269 169.11054993]
[124.78096771 183.85081482]
[127.56029510 198.59107971]
[141.42819214 205.29835510]
[148.60363770 218.72840881]
[146.51972961 233.63215637]
[136.18322754 244.32301331]
[138.96255493 259.06329346]
[141.74188232 273.80352783]
[144.52122498 288.54379272]
[147.30055237 303.28405762]
[150.07987976 318.02432251]
[152.85920715 332.76458740]
[155.63853455 347.50485229]
[158.41787720 362.24511719]
[161.58389282 365.63647461]
[163.25256348 369.48776245]
[163.47062683 373.24359131]
[162.46949768 376.42684937]
[160.62066650 378.69494629]
[161.81745911 393.64712524]
[170.63116455 406.78598022]
[163.93399048 420.08999634]
[165.13078308 435.04217529]
[166.32757568 449.99435425]
[176.07458496 463.18252563]
[169.27960205 478.10769653]
[152.93273926 479.41610718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 114]
[2 113]
[3 112]
[5 110]
[6 109]
[7 104]
[8 103]
[9 102]
[10 101]
[11 100]
[12 99]
[13 98]
[14 97]
[15 96]
[19 92]
[20 91]
[21 90]
[22 89]
[23 87]
[24 86]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
[35 61]
[37 60]
[38 59]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[67 83]
[68 82]
[69 81]
[71 79]
[72 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
