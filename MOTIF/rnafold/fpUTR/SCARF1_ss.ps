%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCUCAGGAAAAGCCCUGAGAGGAAGCAGGGAGGGGGUUGGGAGCUGUGGGGGCCAGACGAACCCGAGCGCUCCCACCGAGCUGCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-1.27671576 193.05612183]
[-13.44168472 201.83186340]
[-25.60665321 210.60758972]
[-37.77162170 219.38333130]
[-49.78664017 228.36326599]
[-61.64827728 237.54486084]
[-73.50991058 246.72645569]
[-85.37155151 255.90803528]
[-97.23318481 265.08963013]
[-109.09481812 274.27120972]
[-110.84263611 289.97857666]
[-123.23730469 299.78405762]
[-138.92529297 297.87026978]
[-148.59919739 285.37261963]
[-146.51965332 269.70574951]
[-133.92042542 260.16452026]
[-118.27641296 262.40957642]
[-106.41477203 253.22799683]
[-94.55313873 244.04640198]
[-82.69150543 234.86480713]
[-70.82986450 225.68322754]
[-58.96823120 216.50163269]
[-55.53582764 209.77996826]
[-46.54735947 207.21835327]
[-34.38238907 198.44262695]
[-22.21742058 189.66688538]
[-10.05245113 180.89115906]
[1.80918527 171.70956421]
[13.35395432 162.13259888]
[24.89872169 152.55563354]
[36.44349289 142.97865295]
[47.98825836 133.40168762]
[52.84383011 119.32075500]
[68.40513611 116.46485901]
[79.94990540 106.88788605]
[81.04099274 90.51288605]
[93.49320984 79.82301331]
[109.84460449 81.22413635]
[121.05932617 71.26271820]
[132.27406311 61.30130005]
[136.73197937 53.08659363]
[144.03988647 51.20067215]
[155.58465576 41.62370300]
[167.12942505 32.04673386]
[178.67417908 22.46976662]
[190.21894836 12.89279938]
[201.76371765 3.31583118]
[206.49655151 -4.74362516]
[213.86396790 -6.38165331]
[225.72561646 -15.56324291]
[227.86079407 -30.99304390]
[240.02098083 -40.13550949]
[254.71777344 -38.00484848]
[266.57940674 -47.18643570]
[278.44104004 -56.36802673]
[276.99011230 -71.72701263]
[284.09350586 -85.42173004]
[297.48455811 -93.08225250]
[312.89022827 -92.26412964]
[325.39459229 -83.22842407]
[331.00759888 -68.85839081]
[327.93814087 -53.73946762]
[317.16567993 -42.69603729]
[302.12762451 -39.25201797]
[287.62261963 -44.50638962]
[275.76098633 -35.32480240]
[263.89935303 -26.14321136]
[262.27822876 -11.38152218]
[250.37962341 -1.90111101]
[234.90719604 -3.70160699]
[223.04556274 5.47998285]
[211.34069824 14.86059952]
[199.79592896 24.43756866]
[188.25115967 34.01453781]
[176.70639038 43.59150314]
[165.16162109 53.16847229]
[153.61685181 62.74544144]
[142.23547363 72.51602936]
[131.02075195 82.47744751]
[119.80602264 92.43886566]
[120.54972839 105.21133423]
[113.80923462 116.08583832]
[102.03943634 121.10189056]
[89.52687836 118.43265533]
[77.98210907 128.00962830]
[72.30078125 142.77557373]
[57.56522751 144.94645691]
[46.02045822 154.52342224]
[34.47568893 164.10038757]
[22.93092155 173.67736816]
[11.38615322 183.25433350]
[8.60170364 189.62109375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[10 17]
[28 91]
[29 90]
[30 89]
[31 88]
[32 87]
[34 85]
[35 84]
[38 80]
[39 79]
[40 78]
[42 77]
[43 76]
[44 75]
[45 74]
[46 73]
[47 72]
[49 71]
[50 70]
[53 67]
[54 66]
[55 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
