%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAUCGGUUCCCGGGUGAUCCUCGCGCCUGCCGCUGCUCGGCCGCCGCCGCUGACGAGGAGCUGCAGCGCGCCGGGCCGAGGCCUCGAGCCGCCCCGGGAGCUGGAGCUGAAGGCGCCGCGCGGAGCGCGCACCUCAGCCCUGAGCCCGGCGGCGGCAGGCGUCGCUGUCUUUUCUCCUUUUCCCCAAU\
) } def
/len { sequence length } bind def

/coor [
[138.07064819 247.50779724]
[128.63619995 259.37231445]
[115.71117401 267.29190063]
[100.85636139 270.31021118]
[85.86553192 268.06277466]
[72.54891205 260.82098389]
[62.51454926 249.45932007]
[56.97413635 235.34976196]
[56.59671021 220.19610596]
[61.42784119 205.82823181]
[70.88415527 193.98110962]
[83.82374573 186.08537292]
[98.68409729 183.09443665]
[100.90805054 168.26022339]
[103.13200378 153.42601013]
[101.01068878 146.33218384]
[105.51732635 138.36572266]
[107.98624420 123.57029724]
[91.05368042 119.84826660]
[82.79615021 107.21653748]
[67.79820251 106.96852875]
[52.80025482 106.72052002]
[38.87404251 114.22859192]
[26.27643585 106.28191376]
[11.27848721 106.03390503]
[-3.71946239 105.78589630]
[-18.71741104 105.53788757]
[-33.71689987 105.41387939]
[-48.71689987 105.41387939]
[-63.71689987 105.41387939]
[-78.71689606 105.41387939]
[-92.51707458 113.15118408]
[-105.24434662 105.41387939]
[-120.24434662 105.41387939]
[-135.24433899 105.41387939]
[-149.04450989 113.15118408]
[-161.77178955 105.41387939]
[-176.77178955 105.41387939]
[-191.77178955 105.41387939]
[-206.77178955 105.41387939]
[-215.93249512 117.79885864]
[-230.45953369 122.36161041]
[-244.71907043 117.55229950]
[-253.30957031 105.41387939]
[-268.30957031 105.41387939]
[-282.23336792 114.07758331]
[-296.56881714 106.11345673]
[-296.56881714 89.71430969]
[-282.23336792 81.75017548]
[-268.30957031 90.41387939]
[-253.30957031 90.41387939]
[-244.71907043 78.27546692]
[-230.45953369 73.46615601]
[-215.93249512 78.02890778]
[-206.77178955 90.41387939]
[-191.77178955 90.41387939]
[-176.77178955 90.41387939]
[-161.77178955 90.41387939]
[-149.04450989 82.67658234]
[-135.24433899 90.41387939]
[-120.24434662 90.41387939]
[-105.24434662 90.41387939]
[-92.51707458 82.67658234]
[-78.71689606 90.41387939]
[-63.71689987 90.41387939]
[-48.71689987 90.41387939]
[-33.71689987 90.41387939]
[-27.01599312 87.26425171]
[-18.46940231 90.53993988]
[-3.47145319 90.78794861]
[11.52649593 91.03595734]
[26.52444649 91.28396606]
[39.37790680 83.75815582]
[53.04826355 91.72257233]
[68.04621124 91.97058105]
[83.04416656 92.21858978]
[102.47466278 78.36978149]
[124.37839508 94.99670410]
[135.90440369 85.39717102]
[147.43041992 75.79764557]
[153.08287048 61.02061844]
[167.81414795 58.82091522]
[179.34016418 49.22138596]
[190.86618042 39.62185669]
[202.39219666 30.02232933]
[204.20449829 25.08889771]
[207.41398621 21.69381905]
[211.19580078 20.11220360]
[214.73603821 20.24979019]
[226.72386169 11.23357391]
[238.71168518 2.21735644]
[250.69949341 -6.79886103]
[262.68731689 -15.81507778]
[274.67514038 -24.83129501]
[286.58801270 -33.94631195]
[298.42510986 -43.15950012]
[310.26223755 -52.37269211]
[322.09933472 -61.58588409]
[333.93643188 -70.79907227]
[331.93731689 -85.96320343]
[337.75842285 -99.99928284]
[349.74392700 -109.17611694]
[364.61407471 -111.10864258]
[378.36236572 -105.37716675]
[390.19949341 -114.59035492]
[395.06085205 -122.34544373]
[402.30932617 -123.85608673]
[414.29714966 -132.87229919]
[426.28497314 -141.88851929]
[438.27279663 -150.90473938]
[450.26062012 -159.92095947]
[455.24954224 -167.59460449]
[462.52200317 -168.98518372]
[474.65725708 -177.80197144]
[481.27395630 -192.17311096]
[496.11840820 -193.39440918]
[508.25366211 -202.21118164]
[513.36877441 -209.80130005]
[520.66320801 -211.07145691]
[532.94262695 -219.68638611]
[545.22198486 -228.30131531]
[557.50134277 -236.91624451]
[566.99505615 -250.96279907]
[583.12078857 -245.72857666]
[582.55517578 -228.78405762]
[566.11627197 -224.63687134]
[553.83691406 -216.02194214]
[541.55755615 -207.40701294]
[529.27813721 -198.79208374]
[517.07043457 -190.07592773]
[504.93518066 -181.25915527]
[499.18646240 -167.51864624]
[483.47402954 -165.66671753]
[471.33877563 -156.84992981]
[459.27682495 -147.93313599]
[447.28900146 -138.91691589]
[435.30117798 -129.90069580]
[423.31335449 -120.88448334]
[411.32553101 -111.86826324]
[399.41265869 -102.75325012]
[387.57556152 -93.54005432]
[389.75665283 -78.80545807]
[384.23284912 -64.86473846]
[372.39456177 -55.49877548]
[357.35897827 -53.30144882]
[343.14962769 -58.96196747]
[331.31253052 -49.74877548]
[319.47540283 -40.53558350]
[307.63830566 -31.32239342]
[295.80120850 -22.10920334]
[292.44778442 -15.50791931]
[283.69134521 -12.84347534]
[271.70352173 -3.82725811]
[259.71572876 5.18895912]
[247.72789001 14.20517635]
[235.74008179 23.22139359]
[223.75225830 32.23760986]
[211.99171448 41.54834747]
[200.46569824 51.14787674]
[188.93968201 60.74740219]
[177.41366577 70.34693146]
[172.58564758 84.43733215]
[157.02995300 87.32366180]
[145.50393677 96.92318726]
[133.97792053 106.52272034]
[146.15063477 97.75772095]
[160.54724121 93.54611969]
[175.52467346 94.36859131]
[189.37355042 100.13127136]
[200.51332092 110.17645264]
[207.67257690 123.35768890]
[210.03425598 138.17060852]
[207.32879639 152.92460632]
[199.86500549 165.93582153]
[188.49468994 175.71926880]
[174.51556396 181.15838623]
[159.52305603 181.63240051]
[145.22825623 177.08720398]
[133.26263428 168.04154968]
[124.99182129 155.52780151]
[121.35977173 140.97418213]
[122.78166199 126.03921509]
[120.31274414 140.83464050]
[117.96622467 155.64996338]
[115.74227142 170.48417664]
[113.51831818 185.31840515]
[126.84825897 192.53562927]
[136.90354919 203.87878418]
[142.46994019 217.97810364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 186]
[14 185]
[15 184]
[17 183]
[18 182]
[20 76]
[21 75]
[22 74]
[24 72]
[25 71]
[26 70]
[27 69]
[28 67]
[29 66]
[30 65]
[31 64]
[33 62]
[34 61]
[35 60]
[37 58]
[38 57]
[39 56]
[40 55]
[44 51]
[45 50]
[78 165]
[79 164]
[80 163]
[82 161]
[83 160]
[84 159]
[85 158]
[89 157]
[90 156]
[91 155]
[92 154]
[93 153]
[94 152]
[95 150]
[96 149]
[97 148]
[98 147]
[99 146]
[104 141]
[105 140]
[107 139]
[108 138]
[109 137]
[110 136]
[111 135]
[113 134]
[114 133]
[116 131]
[117 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
