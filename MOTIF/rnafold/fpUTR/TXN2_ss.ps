%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:39:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAAGUGACGACAGGCGUGCCCUUGACAGGCAGGGAGGGCUAGGCUGUGCAUCCCUCCGCUCGCAUUGCAGGGAG\
) } def
/len { sequence length } bind def

/coor [
[23.64664650 212.90029907]
[19.66096306 219.57814026]
[14.22918987 225.12182617]
[7.66050148 229.22627258]
[0.32633367 231.66806030]
[-7.36061621 232.31752014]
[-14.96961117 231.14562988]
[-22.07601357 228.22520447]
[-28.28497696 223.72647095]
[-33.25338745 217.90707397]
[-47.27863312 223.22615051]
[-61.30387497 228.54521179]
[-69.17284393 242.52587891]
[-85.03198242 244.94813538]
[-96.71551514 233.95382690]
[-95.26083374 217.97686768]
[-81.78385162 209.27339172]
[-66.62294769 214.51997375]
[-52.59770584 209.20089722]
[-38.57246017 203.88182068]
[-32.85433960 180.52499390]
[-12.45392036 167.39849854]
[11.58929539 171.95263672]
[22.40733147 161.56176758]
[33.22536850 151.17089844]
[44.04340363 140.78002930]
[54.86144257 130.38917542]
[57.57763672 123.28923798]
[66.33055115 119.80863190]
[77.55821228 109.86179352]
[88.78587341 99.91495514]
[99.81095886 89.74403381]
[110.62899780 79.35317230]
[121.23559570 68.74656677]
[131.62646484 57.92853546]
[141.79737854 46.90345001]
[151.74421692 35.67578888]
[161.69105530 24.44812584]
[171.63789368 13.22046566]
[181.58473206 1.99280417]
[191.53157043 -9.23485661]
[188.46786499 -21.06206131]
[191.59237671 -32.74746704]
[199.97967529 -41.29358673]
[211.37059021 -44.56943512]
[222.77986145 -41.84108734]
[233.59790039 -52.23195267]
[240.83267212 -67.56474304]
[257.56903076 -64.85723877]
[259.60043335 -48.02543259]
[243.98876953 -41.41391754]
[233.17073059 -31.02305222]
[234.08135986 -12.94734192]
[221.47982788 0.47439176]
[202.75923157 0.71198285]
[192.81239319 11.93964386]
[182.86555481 23.16730499]
[172.91871643 34.39496613]
[162.97187805 45.62262726]
[153.02503967 56.85028839]
[150.88896179 64.14575958]
[142.44450378 68.31939697]
[132.05363464 79.13743591]
[129.62553406 86.34098053]
[121.01985931 90.17121124]
[110.20182037 100.56207275]
[106.91363525 108.18727875]
[98.73271179 111.14261627]
[87.50505066 121.08945465]
[76.27738953 131.03630066]
[65.25230408 141.20721436]
[54.43426895 151.59806824]
[43.61623383 161.98893738]
[32.79819870 172.37980652]
[21.98015976 182.77067566]
[25.10718346 189.95935059]
[26.45550919 197.66601562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 20]
[11 19]
[12 18]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[29 70]
[30 69]
[31 68]
[32 66]
[33 65]
[34 63]
[35 62]
[36 60]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[46 52]
[47 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
