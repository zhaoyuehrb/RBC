%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUAUCCGCCCCUGACACCAUUCCUCCCUUCCCCCCUCCACCGGCCGCGGGCAUAAAAGGCGCCAGGUGAGGGCCUCGCCGCUCCUCCCGCGAAUCGCAGCUUCUGAGACCAGGGUUGCUCCGUCCGUGCUCCGCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[-77.96710205 286.06320190]
[-74.74064636 300.73645020]
[-73.54231262 315.71234131]
[-74.39443970 330.71194458]
[-77.28113556 345.45578003]
[-82.14862823 359.66918945]
[-88.90624237 373.08740234]
[-97.42809296 385.46041870]
[-107.55541229 396.55776978]
[-119.09954071 406.17269897]
[-131.84541321 414.12609863]
[-145.55558777 420.26977539]
[-159.97465515 424.48931885]
[-174.83398438 426.70605469]
[-189.85676575 426.87875366]
[-204.76312256 425.00418091]
[-219.27537537 421.11724854]
[-233.12316895 415.29034424]
[-246.04850769 407.63204956]
[-257.81060791 398.28506470]
[-268.19036865 387.42343140]
[-276.99438477 375.24957275]
[-284.05868530 361.99026489]
[-289.25164795 347.89251709]
[-292.47650146 333.21893311]
[-293.67321777 318.24288940]
[-292.81945801 303.24337769]
[-289.93118286 288.49987793]
[-285.06213379 274.28698730]
[-278.30307007 260.86950684]
[-269.77987671 248.49739075]
[-259.65136719 237.40113831]
[-248.10620117 227.78746033]
[-235.35946655 219.83544922]
[-221.64862061 213.69323730]
[-207.22909546 209.47528076]
[-192.36953735 207.26013184]
[-177.34672546 207.08905029]
[-162.44056702 208.96525574]
[-147.92874146 212.85375977]
[-134.08158875 218.68215942]
[-121.15707397 226.34184265]
[-109.39598083 235.69012451]
[-99.01740265 246.55285645]
[-86.86280823 237.76275635]
[-74.70821381 228.97265625]
[-68.20957184 210.80932617]
[-48.19759369 208.85281372]
[-36.44083023 199.53732300]
[-24.68406296 190.22181702]
[-12.92729664 180.90632629]
[-1.27356422 171.46224976]
[10.27572727 161.89074707]
[21.82501984 152.31922913]
[33.37431335 142.74771118]
[30.74283218 128.08685303]
[35.83694458 113.98345184]
[47.38273621 104.25920105]
[62.34393692 101.60227203]
[76.72003937 106.82480621]
[88.26933289 97.25328827]
[96.37894440 84.63449097]
[100.28775024 70.15273285]
[104.19655609 55.67097855]
[102.84328461 49.07137299]
[104.78681946 43.62707901]
[108.60821533 40.64625549]
[113.14934540 26.35016823]
[112.76966858 17.14430618]
[117.95043945 11.79187202]
[122.80452728 -2.40100837]
[127.65861511 -16.59388924]
[132.51269531 -30.78676987]
[137.21058655 -45.03211212]
[141.75172424 -59.32820129]
[134.26242065 -73.24531555]
[138.88752747 -88.35768890]
[152.88304138 -95.69942474]
[167.94567871 -90.91480255]
[175.13903809 -76.84244537]
[170.19543457 -61.83124542]
[156.04780579 -54.78706741]
[151.50668335 -40.49098206]
[152.48707581 -33.10668564]
[146.70558167 -25.93268585]
[141.85148621 -11.73980427]
[136.99740601 2.45307612]
[132.14332581 16.64595604]
[127.44543457 30.89130020]
[122.90429688 45.18738937]
[118.67831421 59.57978439]
[114.76950836 74.06153870]
[110.86070251 88.54329681]
[115.18872833 94.66850281]
[127.43929291 86.01264954]
[136.09494019 98.26335144]
[123.84478760 106.91891479]
[128.17282104 113.04412842]
[143.12849426 114.19637299]
[158.08416748 115.34861755]
[173.03985596 116.50086212]
[187.99552917 117.65310669]
[202.95120239 118.80535126]
[211.82641602 116.33094025]
[218.22158813 120.15072632]
[233.14834595 121.63123322]
[248.07510376 123.11174011]
[262.78604126 115.86462402]
[276.26541138 125.20478058]
[274.64678955 141.52384949]
[259.59530640 148.03417969]
[246.59460449 138.03849792]
[231.66784668 136.55799866]
[216.74108887 135.07748413]
[201.79896545 133.76103210]
[186.84327698 132.60877991]
[171.88760376 131.45654297]
[156.93193054 130.30429077]
[141.97624207 129.15205383]
[127.02056885 127.99980164]
[106.24856567 123.15933228]
[97.84084320 108.80258179]
[86.29155731 118.37409973]
[88.75431061 133.46986389]
[83.36595154 147.67768860]
[71.66722107 157.21740723]
[56.86326218 159.60459900]
[42.94582367 154.29701233]
[31.39653206 163.86851501]
[19.84724045 173.44003296]
[8.29794884 183.01155090]
[3.64029121 190.96128845]
[-3.61180162 192.66310120]
[-15.36856747 201.97859192]
[-27.12533379 211.29408264]
[-38.88209915 220.60957336]
[-39.52088165 231.56532288]
[-45.98676682 240.15812683]
[-55.92109680 243.65930176]
[-65.91811371 241.12725830]
[-78.07270813 249.91734314]
[-90.22730255 258.70745850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[44 142]
[45 141]
[46 140]
[48 136]
[49 135]
[50 134]
[51 133]
[52 131]
[53 130]
[54 129]
[55 128]
[60 123]
[61 122]
[62 93]
[63 92]
[64 91]
[67 90]
[68 89]
[70 88]
[71 87]
[72 86]
[73 85]
[74 83]
[75 82]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
