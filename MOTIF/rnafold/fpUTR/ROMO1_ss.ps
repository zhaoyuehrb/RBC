%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGAAGCCGCUGCAGUCCUGGGCCCCAGGCUCCCGGAAGUGCUGCCCGGCGCUCCGGAAGCGAUUCAUCGGGCCGCGAGCGCCCUCCCCGUCGUUUUCCGUGAGAGACGUAGAGCUGAGCGACCCAGCCCGCGAGCGAGGUGAG\
) } def
/len { sequence length } bind def

/coor [
[80.51831818 111.87082672]
[65.85498810 115.03101349]
[51.19165802 118.19120026]
[36.52833176 121.35139465]
[21.86500168 124.51158142]
[7.20167351 127.67176819]
[-4.65866852 138.14282227]
[-18.73036957 133.26055908]
[-33.39369583 136.42074585]
[-48.05702591 139.58093262]
[-55.85068893 144.47967529]
[-63.06501389 142.64909363]
[-77.79211426 145.49732971]
[-92.51921844 148.34556580]
[-107.18254852 151.50576782]
[-121.77549744 154.97647095]
[-136.36843872 158.44718933]
[-150.96139526 161.91789246]
[-165.55433655 165.38861084]
[-179.98684692 169.47554016]
[-194.23287964 174.17131042]
[-204.91722107 185.83987427]
[-219.42695618 182.47578430]
[-233.67298889 187.17155457]
[-247.86839294 192.01826477]
[-262.01156616 197.01536560]
[-276.15472412 202.01246643]
[-289.07479858 212.99006653]
[-303.20004272 203.61380005]
[-298.10046387 187.44499207]
[-281.15182495 187.86929321]
[-267.00866699 182.87220764]
[-252.86549377 177.87510681]
[-247.56987000 172.64500427]
[-238.36877441 172.92552185]
[-224.12272644 168.22973633]
[-214.45735168 156.89704895]
[-198.92866516 159.92527771]
[-184.68261719 155.22949219]
[-183.30445862 152.71289062]
[-180.81175232 150.61076355]
[-177.36482239 149.36369324]
[-173.28504944 149.34303284]
[-169.02505493 150.79565430]
[-154.43209839 147.32495117]
[-139.83915710 143.85423279]
[-125.24620819 140.38352966]
[-110.65325928 136.91281128]
[-107.40126801 133.32939148]
[-101.83884430 131.79376221]
[-95.36746216 133.61846924]
[-80.64035797 130.77023315]
[-65.91325378 127.92198944]
[-51.21721649 124.91760254]
[-36.55388641 121.75741577]
[-21.89055824 118.59722137]
[-11.07903481 108.35221100]
[4.04148436 113.00843811]
[18.70481300 109.84825134]
[33.36814117 106.68806458]
[48.03147125 103.52787781]
[62.69479752 100.36768341]
[77.35812378 97.20749664]
[81.50622559 86.64212799]
[90.23230743 79.38339233]
[101.37629700 77.22812653]
[112.17960358 80.70985413]
[119.96794128 88.96669769]
[134.75218201 86.43168640]
[149.53642273 83.89667511]
[164.32066345 81.36166382]
[179.10490417 78.82664490]
[188.23669434 66.20729828]
[203.26612854 63.84704208]
[215.24047852 72.63058472]
[230.02471924 70.09556580]
[244.78121948 67.40379333]
[259.50830078 64.55554962]
[274.23541260 61.70730591]
[288.96252441 58.85906219]
[301.04244995 48.64211273]
[315.00735474 53.82195663]
[329.73443604 50.97371292]
[344.25042725 47.19404221]
[358.49649048 42.49826813]
[371.65008545 25.63859177]
[391.68734741 30.42666817]
[405.60568237 24.83382034]
[419.52401733 19.24097443]
[425.79220581 4.98097992]
[439.98706055 -0.49269038]
[453.54315186 5.57095957]
[467.46148682 -0.02188765]
[481.37982178 -5.61473465]
[495.29815674 -11.20758152]
[505.21829224 -23.53242111]
[519.91265869 -21.09851074]
[533.83099365 -26.69135857]
[547.74932861 -32.28420639]
[555.34289551 -46.41635895]
[571.15155029 -49.14887238]
[583.04821777 -38.38559723]
[581.90686035 -22.38319588]
[568.60296631 -13.41734123]
[553.34222412 -18.36586952]
[539.42388916 -12.77302361]
[525.50555420 -7.18017578]
[516.58093262 4.74462605]
[500.89099121 2.71075344]
[486.97265625 8.30360031]
[473.05432129 13.89644814]
[459.13598633 19.48929405]
[453.54476929 33.24697495]
[439.50927734 39.11718750]
[425.11685181 33.15930939]
[411.19851685 38.75215530]
[397.28018188 44.34500504]
[395.13580322 53.08499908]
[389.08847046 59.93505859]
[380.42352295 63.24544144]
[371.07461548 62.14014816]
[363.19226074 56.74430847]
[348.94622803 61.44008636]
[361.57534790 69.53358459]
[364.97390747 84.14350891]
[357.21350098 96.98001862]
[342.69747925 100.75954437]
[329.66238403 93.33753204]
[325.50445557 78.92532349]
[332.58267212 65.70081329]
[317.85559082 68.54905701]
[306.82904053 78.56227875]
[291.81076050 73.58616638]
[277.08364868 76.43441010]
[262.35656738 79.28264618]
[247.62945557 82.13088989]
[241.61790466 86.51937866]
[232.55972290 84.87980652]
[217.77548218 87.41481781]
[209.41128540 99.68575287]
[194.45408630 102.46722412]
[181.63990784 93.61088562]
[166.85566711 96.14589691]
[152.07142639 98.68090820]
[137.28718567 101.21592712]
[122.50295258 103.75093842]
[112.80421448 118.88133240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 63]
[2 62]
[3 61]
[4 60]
[5 59]
[6 58]
[8 56]
[9 55]
[10 54]
[12 53]
[13 52]
[14 51]
[15 48]
[16 47]
[17 46]
[18 45]
[19 44]
[20 39]
[21 38]
[23 36]
[24 35]
[25 33]
[26 32]
[27 31]
[68 146]
[69 145]
[70 144]
[71 143]
[72 142]
[75 139]
[76 138]
[77 136]
[78 135]
[79 134]
[80 133]
[82 131]
[83 130]
[84 123]
[85 122]
[87 117]
[88 116]
[89 115]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
