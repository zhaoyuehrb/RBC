%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUAGCCGAAUUCAGUCCGCCAGUGUCCCAUAAUCCUCUUCUCUCGGUUCCUCUUUCCUCGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[183.61230469 222.61404419]
[174.14598083 210.97837830]
[164.67967224 199.34269714]
[157.78666687 196.03396606]
[155.06185913 186.95515442]
[146.13494873 174.90069580]
[137.20803833 162.84622192]
[128.28111267 150.79176331]
[119.35420227 138.73728943]
[110.42728424 126.68283081]
[95.72385406 128.32695007]
[82.16093445 122.41582489]
[73.35597992 110.52604675]
[71.65740204 95.82880402]
[77.51824951 82.24408722]
[68.59133148 70.18962097]
[54.70838928 74.06604004]
[40.37050247 72.91751862]
[27.33645058 66.90581512]
[17.19786072 56.78795242]
[11.18486786 43.82096481]
[10.01688099 29.60572052]
[13.81656456 15.88930035]
[22.09732819 4.35028076]
[13.72831631 -8.09799862]
[5.35930586 -20.54627800]
[-8.49565411 -30.31748199]
[-2.94174647 -46.33592224]
[13.98816204 -45.43341064]
[17.80758476 -28.91528893]
[26.17659569 -16.46700859]
[34.54560852 -4.01872969]
[49.86913300 -7.39687538]
[65.36511230 -4.69625521]
[78.70691681 3.70700574]
[87.88018799 16.57836533]
[91.48699188 32.00616837]
[88.95878601 47.68553162]
[80.64579773 61.26270676]
[89.57271576 73.31716919]
[104.27614594 71.67304993]
[117.83906555 77.58417511]
[126.64402008 89.47395325]
[128.34259033 104.17119598]
[122.48175049 117.75591278]
[131.40866089 129.81037903]
[140.33558655 141.86483765]
[149.26249695 153.91931152]
[158.18942261 165.97378540]
[167.11633301 178.02824402]
[176.31533813 189.87638855]
[185.78164673 201.51205444]
[195.24797058 213.14772034]
[209.56105042 208.15657043]
[224.71797180 208.36489868]
[238.88847351 213.74752808]
[250.36138916 223.65449524]
[257.75131226 236.88948059]
[260.16586304 251.85429382]
[257.31350708 266.74188232]
[249.53863525 279.75445557]
[237.78012085 289.32070923]
[223.45787048 294.28546143]
[208.30136108 294.04922485]
[194.14080811 288.64047241]
[182.68615723 278.71237183]
[175.32064819 265.46380615]
[172.93367004 250.49456787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[5 50]
[6 49]
[7 48]
[8 47]
[9 46]
[10 45]
[15 40]
[16 39]
[24 32]
[25 31]
[26 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
