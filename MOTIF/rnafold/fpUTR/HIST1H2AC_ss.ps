%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGGCCAUGUUUUACAUAUUUCUUGAUUUUGUUUGUUUUCUCGUGAGCUUAGGCCGCUGGUUUUGGUGAUUUUUGUCUGAUUGCA\
) } def
/len { sequence length } bind def

/coor [
[70.84708405 118.67076111]
[65.42377472 101.72461700]
[69.13385773 84.32290649]
[57.54920959 74.79421997]
[45.96455383 65.26554108]
[34.37990189 55.73685455]
[22.79524994 46.20817184]
[11.21059704 36.67948532]
[-0.37405616 27.15080261]
[-14.73072433 32.42653275]
[-29.70166016 29.82501602]
[-41.28337860 20.14358139]
[-46.42967606 6.05913734]
[-43.85250092 -8.61136913]
[-55.43715286 -18.14005280]
[-67.02180481 -27.66873741]
[-78.60646057 -37.19742203]
[-90.19110870 -46.72610474]
[-102.03105927 -37.41859818]
[-115.59523010 -30.87434196]
[-130.24920654 -27.39942551]
[-145.30760193 -27.15637398]
[-160.06608582 -30.15655518]
[-173.83439636 -36.25964737]
[-185.96855164 -45.18019867]
[-195.90103149 -56.50097656]
[-203.16726685 -69.69248199]
[-207.42739868 -84.13774109]
[-208.48217773 -99.16110229]
[-206.28225708 -114.05991364]
[-200.93055725 -128.13731384]
[-192.67736816 -140.73489380]
[-181.90872192 -151.26342773]
[-169.12826538 -159.23049927]
[-154.93377686 -164.26344299]
[-139.98915100 -166.12687683]
[-124.99339294 -164.73364258]
[-110.64785767 -160.14891052]
[-97.62352753 -152.58709717]
[-86.52957153 -142.40191650]
[-77.88487244 -130.06970215]
[-72.09375763 -116.16729736]
[-69.42708588 -101.34491730]
[-70.00958252 -86.29583740]
[-73.81401062 -71.72393036]
[-80.66242981 -58.31075668]
[-69.07777405 -48.78207397]
[-57.49312210 -39.25339127]
[-45.90847015 -29.72470474]
[-34.32381439 -20.19602203]
[-20.42612457 -25.55510521]
[-5.61342573 -23.22274399]
[6.12054205 -13.72640991]
[11.56146812 0.46137077]
[9.15462780 15.56615067]
[20.73928070 25.09483337]
[32.32393265 34.62351990]
[43.90858459 44.15220261]
[55.49324036 53.68088531]
[67.07788849 63.20957184]
[78.66254425 72.73825073]
[89.34838104 67.06016541]
[101.33560944 65.40656281]
[113.15964508 67.97948456]
[123.37588501 74.46457672]
[130.73612976 84.06951141]
[134.34111023 95.62078094]
[133.75041199 107.70709991]
[129.03619385 118.85178375]
[139.54878235 129.55157471]
[150.06137085 140.25135803]
[160.57395935 150.95114136]
[171.08654785 161.65092468]
[181.59913635 172.35072327]
[197.17341614 170.94503784]
[209.97795105 179.92156982]
[213.96682739 195.04183960]
[207.25662231 209.16654968]
[193.01570129 215.62641907]
[177.96817017 211.37130737]
[169.21902466 198.41035461]
[170.89935303 182.86331177]
[160.38676453 172.16351318]
[149.87417603 161.46372986]
[139.36157227 150.76394653]
[128.84898376 140.06416321]
[118.33640289 129.36436462]
[101.32938385 134.59367371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 61]
[4 60]
[5 59]
[6 58]
[7 57]
[8 56]
[9 55]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[69 87]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
