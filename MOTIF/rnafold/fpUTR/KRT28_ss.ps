%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUAUUCUGUUCUCUUGGGACAUUACAGUUUUGCAUAGACAAGGUGAACAUUUCUCAAAACACC\
) } def
/len { sequence length } bind def

/coor [
[99.21376801 171.23722839]
[109.44334412 159.68910217]
[105.27874756 145.27882385]
[101.11414337 130.86854553]
[87.58607483 128.28431702]
[76.52602386 120.07687378]
[70.13285065 107.87792969]
[69.67758179 94.11276245]
[75.25074005 81.51804352]
[85.74431610 72.59774017]
[82.25973511 58.00809479]
[78.77515411 43.41844940]
[75.29057312 28.82880783]
[71.80599213 14.23916340]
[67.98035431 -0.26478285]
[63.81575012 -14.67506027]
[59.65114975 -29.08533859]
[55.48654938 -43.49561691]
[51.32194901 -57.90589523]
[36.23655701 -57.60044479]
[21.58636093 -61.21073532]
[8.37024021 -68.49060822]
[-2.51071095 -78.94371033]
[-10.31460953 -91.85733032]
[-14.50937366 -106.35099792]
[-14.80899620 -121.43650818]
[-11.19304943 -136.08531189]
[-3.90807462 -149.29861450]
[6.54922676 -160.17553711]
[19.46585846 -167.97444153]
[33.96114349 -172.16360474]
[49.04676819 -172.45741272]
[63.69417191 -168.83580017]
[76.90467072 -161.54573059]
[87.77754211 -151.08422852]
[95.57146454 -138.16458130]
[99.75503540 -123.66768646]
[100.04301453 -108.58194733]
[96.41575623 -93.93594360]
[89.12057495 -80.72826385]
[78.65487671 -69.85942841]
[65.73223114 -62.07049561]
[69.89682770 -47.66021729]
[74.06143188 -33.24993896]
[78.22602844 -18.83966064]
[82.39062500 -4.42938280]
[87.44954681 1.31901932]
[86.39563751 10.75458336]
[89.88021851 25.34422684]
[93.36479950 39.93387222]
[96.84938049 54.52351379]
[100.33395386 69.11315918]
[115.65916443 73.37483978]
[126.83165741 84.69735718]
[130.88854980 100.07804108]
[126.75398254 115.43803406]
[115.52442169 126.70394897]
[119.68902588 141.11422729]
[123.85362244 155.52450562]
[138.66647339 159.83531189]
[148.77998352 171.48522949]
[150.96697998 186.75679016]
[144.52960205 200.77690125]
[131.52197266 209.07180786]
[116.09480286 208.99461365]
[103.17083740 200.56997681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 59]
[3 58]
[4 57]
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 46]
[16 45]
[17 44]
[18 43]
[19 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
