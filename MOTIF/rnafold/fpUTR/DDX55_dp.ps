%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:00:29 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DDX55)
} def

/sequence { (\
AGCGGAAGUGCUCGUUGGGGGUGCACAAGGCGCGUUCGAGCAGCGGCGACCGACGCGGCGAAGGAGCGCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.046929794 ubox
1 16 0.033640298 ubox
2 9 0.030194587 ubox
2 11 0.054591469 ubox
2 15 0.042877966 ubox
2 24 0.047710229 ubox
2 31 0.005637032 ubox
2 71 0.004315203 ubox
3 8 0.032663893 ubox
3 10 0.054823120 ubox
3 14 0.044014821 ubox
3 23 0.047704246 ubox
3 30 0.005817679 ubox
3 52 0.034805691 ubox
3 70 0.004285263 ubox
4 9 0.048652187 ubox
4 13 0.043913306 ubox
4 22 0.025467776 ubox
4 51 0.035325006 ubox
4 72 0.008862384 ubox
5 11 0.010995880 ubox
5 12 0.036211879 ubox
5 13 0.004329864 ubox
5 50 0.035319474 ubox
5 71 0.008493317 ubox
6 12 0.004995630 ubox
8 22 0.003755912 ubox
8 24 0.785441864 ubox
8 26 0.606522584 ubox
8 47 0.034262188 ubox
8 69 0.010348157 ubox
9 21 0.013625614 ubox
9 23 0.784582317 ubox
9 25 0.607147277 ubox
9 45 0.025452075 ubox
9 46 0.024176703 ubox
9 68 0.010551652 ubox
10 22 0.787889080 ubox
10 24 0.606497500 ubox
10 44 0.035210802 ubox
10 67 0.010576680 ubox
11 18 0.004478085 ubox
11 19 0.018410347 ubox
11 20 0.071573204 ubox
11 21 0.791016831 ubox
11 23 0.601705782 ubox
11 43 0.035285155 ubox
11 66 0.010577207 ubox
12 17 0.004464266 ubox
12 18 0.021165675 ubox
12 19 0.119571910 ubox
12 20 0.796538712 ubox
12 21 0.520100275 ubox
12 42 0.035093113 ubox
12 65 0.010573032 ubox
13 17 0.020906890 ubox
13 18 0.128741383 ubox
13 19 0.799141783 ubox
13 20 0.550973872 ubox
13 29 0.003344790 ubox
13 64 0.010559293 ubox
14 22 0.005395226 ubox
14 24 0.011067161 ubox
14 26 0.014882855 ubox
14 41 0.014043132 ubox
15 21 0.010862717 ubox
15 23 0.010980039 ubox
15 25 0.010822174 ubox
15 28 0.034811828 ubox
15 39 0.033992558 ubox
15 40 0.012719261 ubox
15 62 0.005484005 ubox
16 20 0.009006585 ubox
16 25 0.019015357 ubox
16 27 0.042322581 ubox
16 38 0.034379408 ubox
16 39 0.011936075 ubox
16 61 0.004847164 ubox
17 22 0.005343451 ubox
17 24 0.024449734 ubox
17 26 0.044460320 ubox
17 37 0.035692439 ubox
18 36 0.035691678 ubox
18 37 0.009295060 ubox
19 35 0.035698419 ubox
19 36 0.008740425 ubox
20 35 0.007631164 ubox
21 33 0.037033358 ubox
22 32 0.037023129 ubox
23 31 0.037038546 ubox
24 30 0.037011641 ubox
29 72 0.990702050 ubox
30 71 0.999246104 ubox
31 70 0.999275899 ubox
32 69 0.999294062 ubox
33 68 0.999294151 ubox
34 67 0.999276824 ubox
35 62 0.004553094 ubox
35 65 0.036726748 ubox
35 66 0.998129884 ubox
36 61 0.011993903 ubox
36 64 0.044177274 ubox
36 65 0.997530600 ubox
37 60 0.012669546 ubox
37 63 0.070796480 ubox
37 64 0.996147394 ubox
38 59 0.013519847 ubox
40 56 0.018967777 ubox
40 59 0.554471793 ubox
41 55 0.018967937 ubox
41 58 0.552493956 ubox
43 56 0.552836082 ubox
43 59 0.830067462 ubox
44 52 0.026131606 ubox
44 55 0.554898021 ubox
44 57 0.015806135 ubox
44 58 0.829964340 ubox
44 60 0.014915752 ubox
45 51 0.028974853 ubox
45 54 0.554553486 ubox
45 56 0.012179474 ubox
45 59 0.014913287 ubox
46 50 0.029115966 ubox
46 56 0.830173083 ubox
47 55 0.830561455 ubox
47 57 0.014435706 ubox
47 60 0.004229846 ubox
48 54 0.820808769 ubox
48 56 0.014336702 ubox
48 59 0.004450398 ubox
50 58 0.004793715 ubox
51 57 0.004808749 ubox
52 56 0.004499912 ubox
54 70 0.019540787 ubox
55 69 0.019920702 ubox
55 71 0.027917157 ubox
56 68 0.019893644 ubox
56 70 0.027968790 ubox
57 67 0.014999344 ubox
57 69 0.027271087 ubox
57 72 0.008493318 ubox
58 67 0.029768140 ubox
58 69 0.006079566 ubox
58 71 0.008555390 ubox
59 66 0.032515223 ubox
59 68 0.008381106 ubox
59 70 0.008555302 ubox
60 67 0.008298511 ubox
60 69 0.008530763 ubox
8 24 0.9500000 lbox
9 23 0.9500000 lbox
10 22 0.9500000 lbox
11 21 0.9500000 lbox
12 20 0.9500000 lbox
13 19 0.9500000 lbox
29 72 0.9500000 lbox
30 71 0.9500000 lbox
31 70 0.9500000 lbox
32 69 0.9500000 lbox
33 68 0.9500000 lbox
34 67 0.9500000 lbox
35 66 0.9500000 lbox
36 65 0.9500000 lbox
37 64 0.9500000 lbox
43 59 0.9500000 lbox
44 58 0.9500000 lbox
46 56 0.9500000 lbox
47 55 0.9500000 lbox
48 54 0.9500000 lbox
showpage
end
%%EOF
