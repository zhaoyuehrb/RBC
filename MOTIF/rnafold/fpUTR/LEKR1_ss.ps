%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGACUGGCGGCGCGGUCGCCCGGGAGACCGGGAAAGCCGUUUCACACCCGUCCUAGUCGAAGUCGAGAUUUCCUUUGGCUUCAAAGCUCUCUCACCAUAUUUUGGGAAGUU\
) } def
/len { sequence length } bind def

/coor [
[89.15595245 119.60802460]
[81.08567047 113.32215881]
[76.44782257 103.84066010]
[76.43775940 92.96001434]
[81.34197998 82.88380432]
[66.74456024 79.43194580]
[52.14714050 75.98009491]
[37.54972076 72.52824402]
[22.95229721 69.07638550]
[8.35487652 65.62453461]
[-0.85659385 66.69708252]
[-6.59147263 61.87388611]
[-21.08916092 58.02459717]
[-35.58684921 54.17530441]
[-50.08453751 50.32601166]
[-64.94482422 48.28351212]
[-79.94342804 48.07863235]
[-94.94202423 47.87375259]
[-109.94062805 47.66887283]
[-122.17972565 60.07635117]
[-139.27064514 59.86577988]
[-150.74021912 47.65013885]
[-165.73881531 47.85501862]
[-180.73741150 48.05989838]
[-195.73602295 48.26477814]
[-210.73461914 48.46965790]
[-224.53878784 57.32273483]
[-238.98165894 49.55514908]
[-239.20565796 33.15753174]
[-224.98033142 24.99834442]
[-210.93949890 33.47105789]
[-195.94090271 33.26617813]
[-180.94229126 33.06129837]
[-165.94369507 32.85641861]
[-150.94509888 32.65153885]
[-143.27798462 22.19794083]
[-130.79039001 18.04737282]
[-118.01718903 21.94533157]
[-109.73574829 32.67027283]
[-94.73714447 32.87515259]
[-79.73854828 33.08003235]
[-64.73994446 33.28491211]
[-75.55091095 22.88669395]
[-79.21229553 8.34041405]
[-74.61228943 -5.93683767]
[-63.14771271 -15.60966206]
[-48.29988098 -17.74083138]
[-34.57745361 -11.68320084]
[-26.14734459 0.72378528]
[-25.56942940 15.71264839]
[-33.01919174 28.73190308]
[-46.23524475 35.82832718]
[-31.73755646 39.67761612]
[-17.23986816 43.52690887]
[-2.74218130 47.37619781]
[11.80673027 51.02711105]
[26.40415192 54.47896576]
[41.00157166 57.93082047]
[55.59899521 61.38267517]
[70.19641876 64.83452606]
[84.79383850 68.28638458]
[99.39125824 64.83452606]
[110.89654541 55.21016312]
[122.40183258 45.58580017]
[133.90711975 35.96143723]
[145.41239929 26.33707237]
[156.91769409 16.71270752]
[168.42297363 7.08834457]
[179.92826843 -2.53601956]
[191.43354797 -12.16038322]
[192.58505249 -27.92266655]
[204.59936523 -38.19067764]
[220.34858704 -36.87258911]
[230.48899841 -24.75039673]
[229.00447083 -9.01598549]
[216.77575684 0.99570012]
[201.05790710 -0.65509683]
[189.55262756 8.96926689]
[178.04734802 18.59363174]
[166.54205322 28.21799469]
[155.03677368 37.84235764]
[143.53147888 47.46672440]
[132.02619934 57.09108734]
[120.52090454 66.71545410]
[109.01562500 76.33981323]
[118.88250732 85.40867615]
[122.27374268 97.56111145]
[118.95697784 108.91938019]
[129.34405518 119.74105072]
[139.73112488 130.56272888]
[150.11820984 141.38439941]
[158.43710327 145.48289490]
[160.63618469 152.64640808]
[170.72380066 163.74777222]
[180.81140137 174.84912109]
[190.89901733 185.95048523]
[200.98661804 197.05184937]
[216.39587402 195.22583008]
[229.91906738 202.83523560]
[236.35623169 216.95410156]
[233.23214722 232.15344238]
[221.74810791 242.58879089]
[206.31994629 244.24754333]
[192.88011169 236.49186707]
[186.59648132 222.30400085]
[189.88525391 207.13945007]
[179.79765320 196.03810120]
[169.71003723 184.93673706]
[159.62243652 173.83537292]
[149.53482056 162.73402405]
[139.29652405 151.77148438]
[128.90945435 140.94979858]
[118.52237701 130.12812805]
[108.13529968 119.30644989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[12 55]
[13 54]
[14 53]
[15 52]
[16 42]
[17 41]
[18 40]
[19 39]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[67 80]
[68 79]
[69 78]
[70 77]
[88 114]
[89 113]
[90 112]
[91 111]
[93 110]
[94 109]
[95 108]
[96 107]
[97 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
