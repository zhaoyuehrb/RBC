%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGCACUUCCGGGGCAGAGCCUGAGAGCGCGCGCGCACGUGGGGCCGGGGCGGAGAGAGGCGAGCACCGGGAAGGGGAGCGUGGGGCCGCUGGA\
) } def
/len { sequence length } bind def

/coor [
[152.55224609 296.52688599]
[146.89054871 289.52291870]
[143.12072754 281.32611084]
[141.48197937 272.43777466]
[142.08294678 263.40359497]
[144.89450073 254.78021240]
[149.75105286 247.10087585]
[156.36030579 240.84252930]
[150.22969055 227.15255737]
[144.09906006 213.46258545]
[137.96844482 199.77259827]
[131.83781433 186.08262634]
[119.57450867 177.62918091]
[120.99583435 161.87194824]
[114.86521149 148.18197632]
[108.51371002 134.59306335]
[101.94299316 121.10878754]
[89.45079041 118.38668823]
[80.79613495 108.97595215]
[79.12738037 96.29998016]
[85.05158997 84.96998596]
[78.92096710 71.28000641]
[72.79034424 57.59003067]
[66.65972137 43.90005493]
[51.44436264 43.39594650]
[38.01145935 36.36429977]
[29.00050926 24.24724579]
[26.15580177 9.48009777]
[29.98897552 -4.99803114]
[39.68796158 -16.32918930]
[33.55733871 -30.01916695]
[27.42671585 -43.70914459]
[12.28703499 -54.03363037]
[14.53774071 -71.35479736]
[7.96702528 -84.83907318]
[1.26768231 -91.33372498]
[1.40982282 -98.86807251]
[-4.72079992 -112.55805206]
[-19.81037140 -116.66157532]
[-28.68945503 -129.53385925]
[-27.16562080 -145.09703064]
[-15.95837688 -156.00260925]
[-0.35943973 -157.10131836]
[12.26584816 -147.87440491]
[15.95621300 -132.67851257]
[8.96917629 -118.68867493]
[15.09979916 -104.99870300]
[21.45130157 -91.40979004]
[28.02201653 -77.92551422]
[39.45204544 -73.61440277]
[44.98774719 -62.27395630]
[41.11669159 -49.83976746]
[47.24731445 -36.14978790]
[53.37793732 -22.45981216]
[68.28999329 -22.14993095]
[81.64364624 -15.36837769]
[90.76601410 -3.41248012]
[93.80513763 11.37886524]
[90.10576630 26.08266068]
[80.34970093 37.76943207]
[86.48032379 51.45940781]
[92.61094666 65.14938354]
[98.74156952 78.83936310]
[114.22941589 84.28759003]
[121.18142700 99.16126251]
[115.42726898 114.53807831]
[121.99798584 128.02235413]
[128.69732666 134.51699829]
[128.55519104 142.05134583]
[134.68580627 155.74133301]
[147.38761902 165.17396545]
[145.52778625 179.95199585]
[151.65841675 193.64198303]
[157.78903198 207.33195496]
[163.91966248 221.02192688]
[170.05027771 234.71191406]
[192.16467285 236.95933533]
[208.81723022 251.50518799]
[213.96231079 272.88830566]
[205.83651733 293.19909668]
[215.27001953 304.86135864]
[224.70353699 316.52365112]
[234.13705444 328.18594360]
[249.87821960 329.59695435]
[259.94689941 341.77880859]
[258.36953735 357.50418091]
[246.08192444 367.44351196]
[230.37411499 365.69995117]
[220.56524658 353.30795288]
[222.47476196 337.61944580]
[213.04125977 325.95715332]
[203.60774231 314.29489136]
[194.17422485 302.63259888]
[185.79772949 305.71640015]
[176.90393066 306.64474487]
[168.03947449 305.35263062]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 76]
[9 75]
[10 74]
[11 73]
[12 72]
[14 70]
[15 69]
[16 67]
[17 66]
[21 63]
[22 62]
[23 61]
[24 60]
[30 54]
[31 53]
[32 52]
[34 49]
[35 48]
[37 47]
[38 46]
[80 93]
[81 92]
[82 91]
[83 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
