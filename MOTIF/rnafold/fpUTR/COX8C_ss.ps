%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAGCACUGGAGCUUGCGUUACUUGGCCUCACCUCACCUGUGCUGUCCACGCCUGGCUUUGUCUCACCUGACGCGAU\
) } def
/len { sequence length } bind def

/coor [
[131.31153870 282.52435303]
[137.71591187 268.76397705]
[148.66134644 258.24911499]
[142.85227966 244.41964722]
[137.04319763 230.59014893]
[131.39695740 225.50669861]
[131.29023743 216.09349060]
[126.03556824 202.04399109]
[120.59587860 196.74008179]
[120.86347961 187.33007812]
[116.17153168 173.08277893]
[111.47958374 158.83547974]
[106.78763580 144.58818054]
[102.09568024 130.34086609]
[97.40373230 116.09356689]
[84.62081146 105.40593719]
[87.90488434 89.07059479]
[82.65022278 75.02109528]
[77.39556122 60.97159195]
[72.14089966 46.92208862]
[63.43978500 44.79589844]
[56.47117233 39.32260895]
[52.43240738 31.54355049]
[51.97542191 22.88665199]
[55.10270691 14.90450954]
[61.18099213 8.99593449]
[58.21808243 -5.70852613]
[55.25517273 -20.41298676]
[42.37617111 -29.17478752]
[39.58082962 -44.12940979]
[48.01323700 -56.35356903]
[45.05032349 -71.05802917]
[42.08741379 -85.76248932]
[28.27316284 -93.09055328]
[22.44916153 -107.60313416]
[27.36532784 -122.44783783]
[40.70039749 -130.61544800]
[56.15795898 -128.24948120]
[66.43942261 -116.46705627]
[66.69019318 -100.83148193]
[56.79187393 -88.72540283]
[59.75478363 -74.02094269]
[62.71769714 -59.31648254]
[75.22615051 -51.31184769]
[78.44043732 -36.44164276]
[69.95963287 -23.37589836]
[72.92253876 -8.67143726]
[75.88545227 6.03302336]
[92.07784271 20.21331024]
[86.19039917 41.66742706]
[91.44506073 55.71693039]
[96.69972992 69.76643372]
[101.95439148 83.81593323]
[112.37438202 89.38781738]
[116.29285431 100.53536224]
[111.65103912 111.40161896]
[116.34298706 125.64892578]
[121.03493500 139.89622498]
[125.72688293 154.14352417]
[130.41883850 168.39082336]
[135.11077881 182.63813782]
[140.08506775 196.78933716]
[145.33973694 210.83883667]
[150.87269592 224.78108215]
[156.68176270 238.61056519]
[162.49082947 252.44006348]
[177.66175842 251.98474121]
[191.97140503 257.04421997]
[203.48451233 266.93426514]
[210.64401245 280.31732178]
[212.48165894 295.38342285]
[208.74891663 310.09500122]
[199.95060730 322.46249390]
[187.27662659 330.81320190]
[172.44104004 334.01785278]
[157.45022583 331.64300537]
[144.33157349 324.00982666]
[134.85926819 312.15063477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[7 63]
[8 62]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 53]
[18 52]
[19 51]
[20 50]
[26 48]
[27 47]
[28 46]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
