%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAGAGGCAGUUAGUCCAAGUCACGUGAUCGUCGACUCAGCUGACCCUGCGGGACCGGAAAAAGAAAUUCCCGGGCCCUGGCUUCUUGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[111.78305817 245.42277527]
[109.80467987 230.55381775]
[100.45634460 218.95822144]
[106.30591583 204.25811768]
[104.32753754 189.38916016]
[102.34915161 174.52018738]
[100.37076569 159.65122986]
[98.39238739 144.78227234]
[96.41400146 129.91331482]
[76.85000610 119.28063965]
[69.93147278 98.11611176]
[55.66562653 93.48085785]
[41.39977646 88.84559631]
[27.13392830 84.21034241]
[12.86808109 79.57508850]
[-1.39776635 74.93983459]
[-12.72665596 82.44170380]
[-26.11081123 81.99072266]
[-36.59771729 73.98086548]
[-40.43858337 61.56107330]
[-54.54337311 56.45667648]
[-68.64816284 51.35227585]
[-82.75296021 46.24787903]
[-96.94021606 41.37738800]
[-111.20606232 36.74213409]
[-125.47190857 32.10687637]
[-141.39146423 36.04385757]
[-152.56422424 24.03962708]
[-147.49661255 8.44311142]
[-131.40174866 5.29866791]
[-120.83665466 17.84103012]
[-106.57080841 22.47628593]
[-92.30496216 27.11153984]
[-84.82313538 26.16560364]
[-77.64855957 32.14308929]
[-63.54376984 37.24748611]
[-49.43897629 42.35188293]
[-35.33418655 47.45628357]
[-20.53132057 39.66621399]
[-4.32589293 45.00633240]
[3.23748851 60.67398834]
[17.50333595 65.30924225]
[31.76918411 69.94449615]
[46.03503036 74.57975006]
[60.30088043 79.21500397]
[74.56672668 83.85026550]
[81.03131866 76.59370422]
[89.46972656 71.77272797]
[99.00388336 69.88898468]
[108.64169312 71.13849640]
[117.38027191 75.39122772]
[124.31031799 82.20467377]
[138.23863220 76.63671112]
[152.16694641 71.06875610]
[162.10908508 58.76166534]
[176.79910278 61.22183990]
[190.72741699 55.65388107]
[204.65573120 50.08592224]
[218.58404541 44.51796341]
[219.57734680 29.28720284]
[227.08815002 15.99996758]
[239.62516785 7.29444933]
[254.69915771 4.89913416]
[269.31716919 9.28961372]
[280.57681274 19.59415436]
[286.24243164 33.76678467]
[285.18914795 48.99351501]
[277.62606812 62.25107193]
[265.05487061 70.90715027]
[249.97157288 73.24308777]
[235.37095642 68.79507446]
[224.15199280 58.44627380]
[210.22369385 64.01423645]
[196.29537964 69.58219147]
[182.36706543 75.15015411]
[173.42117310 87.05898285]
[157.73489380 84.99706268]
[143.80659485 90.56502533]
[129.87828064 96.13298035]
[128.69291687 109.18596649]
[122.07710266 120.50041199]
[111.28296661 127.93492889]
[113.26134491 142.80389404]
[115.23973083 157.67285156]
[117.21811676 172.54180908]
[119.19649506 187.41076660]
[121.17488098 202.27972412]
[130.66471863 214.93885803]
[124.67363739 228.57543945]
[126.65202332 243.44439697]
[138.46824646 254.29594421]
[137.20776367 270.28939819]
[123.83750916 279.15594482]
[108.61399078 274.09393311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[4 87]
[5 86]
[6 85]
[7 84]
[8 83]
[9 82]
[11 46]
[12 45]
[13 44]
[14 43]
[15 42]
[16 41]
[20 38]
[21 37]
[22 36]
[23 35]
[24 33]
[25 32]
[26 31]
[52 79]
[53 78]
[54 77]
[56 75]
[57 74]
[58 73]
[59 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
