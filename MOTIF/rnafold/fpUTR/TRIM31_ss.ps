%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACACAUUCAAAGUAUCCAUUUGUUCUCAAGAGGUAGCAAGAAACAGUAUCCACAGUGGACUCCGGGGCUCCUACAGACUUGGCACAGCUUCCUACAGUCUUGAAACAGCCCUGUUGUUCUGUC\
) } def
/len { sequence length } bind def

/coor [
[99.71828461 126.03354645]
[86.90132904 122.49999237]
[77.50019073 113.09898376]
[62.91247559 116.59164429]
[48.32476425 120.08430481]
[42.29961777 134.26188660]
[29.23427963 142.08175659]
[14.24685574 140.72488403]
[3.06610894 130.92034912]
[-11.52160263 134.41300964]
[-26.10931396 137.90567017]
[-31.82408524 150.17320251]
[-43.40936279 156.78273010]
[-56.48920059 155.49751282]
[-66.27130127 147.01515198]
[-80.94093323 150.14591980]
[-89.55496979 163.12420654]
[-104.47666931 166.09028625]
[-116.79640198 157.79814148]
[-131.46604919 160.92890930]
[-143.34736633 171.37614441]
[-157.40924072 166.46566772]
[-172.07887268 169.59645081]
[-186.74851990 172.72721863]
[-201.41815186 175.85798645]
[-213.22702026 187.23703003]
[-228.90899658 182.44036865]
[-232.33178711 166.40240479]
[-219.97433472 155.62161255]
[-204.54891968 161.18835449]
[-189.87928772 158.05757141]
[-175.20965576 154.92680359]
[-160.54000854 151.79603577]
[-149.70796204 141.57272339]
[-134.59681702 146.25927734]
[-119.92717743 143.12849426]
[-112.06602478 130.52937317]
[-97.23352814 127.14535522]
[-84.07170868 135.47627258]
[-69.40206909 132.34550476]
[-60.91770554 117.88110352]
[-44.28212357 113.89940643]
[-29.60197449 123.31795502]
[-15.01426220 119.82529449]
[-0.42655072 116.33263397]
[5.10148096 102.52760315]
[17.84926796 94.53023529]
[33.03942108 95.58504486]
[44.83210373 105.49658966]
[59.41981506 102.00392914]
[74.00753021 98.51126862]
[79.92585754 83.42128754]
[93.62519836 74.75743866]
[109.79550171 75.87795258]
[122.16893005 86.34850311]
[136.66578674 82.49609375]
[151.16265869 78.64368439]
[165.65951538 74.79127502]
[170.73614502 70.28775024]
[176.46452332 69.26314545]
[180.96885681 71.12583923]
[195.63850403 67.99506378]
[210.30813599 64.86428833]
[218.92216492 51.88599777]
[233.84387207 48.91992188]
[246.16360474 57.21207047]
[260.83325195 54.08129883]
[275.50286865 50.95052719]
[290.17251587 47.81975174]
[304.84216309 44.68898010]
[319.51177979 41.55820847]
[334.18142700 38.42743683]
[337.87338257 22.63332558]
[348.02682495 10.05892658]
[362.58404541 3.17235184]
[378.62954712 3.29709148]
[392.97393799 10.35796642]
[402.78778076 22.90608215]
[417.37548828 19.41342163]
[431.96319580 15.92076206]
[446.55093384 12.42810249]
[461.13864136 8.93544292]
[475.00161743 -5.60101461]
[493.30654907 0.42988428]
[507.70367432 -3.77991843]
[512.80761719 -18.43356323]
[525.56921387 -27.26091385]
[541.08129883 -26.86767578]
[553.37921143 -17.40505600]
[557.73413086 -2.51162457]
[552.47149658 12.08578968]
[539.61492920 20.77418327]
[524.10803223 20.21269035]
[511.91348267 10.61721897]
[497.51635742 14.82702160]
[493.36587524 24.30791855]
[484.46469116 30.00919724]
[473.67517090 29.80654335]
[464.63128662 23.52315331]
[450.04357910 27.01581383]
[435.45587158 30.50847435]
[420.86816406 34.00113297]
[406.28045654 37.49379349]
[403.98904419 51.23315048]
[396.59387207 63.08827209]
[385.19128418 71.23873901]
[371.49600220 74.41805267]
[357.58316040 72.11034393]
[345.57394409 64.63376617]
[337.31219482 53.09707260]
[322.64257812 56.22784424]
[307.97293091 59.35861969]
[293.30328369 62.48939133]
[278.63366699 65.62016296]
[263.96401978 68.75093842]
[249.29437256 71.88170624]
[241.43322754 84.48082733]
[226.60072327 87.86485291]
[213.43890381 79.53392792]
[198.76927185 82.66470337]
[184.09963989 85.79547119]
[169.51191711 89.28813171]
[155.01506042 93.14054108]
[140.51820374 96.99295044]
[126.02134705 100.84536743]
[122.21109009 113.58280182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 51]
[4 50]
[5 49]
[9 45]
[10 44]
[11 43]
[15 40]
[16 39]
[19 36]
[20 35]
[22 33]
[23 32]
[24 31]
[25 30]
[55 125]
[56 124]
[57 123]
[58 122]
[61 121]
[62 120]
[63 119]
[66 116]
[67 115]
[68 114]
[69 113]
[70 112]
[71 111]
[72 110]
[78 103]
[79 102]
[80 101]
[81 100]
[82 99]
[84 95]
[85 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
