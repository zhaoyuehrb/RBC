%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGCCGCCUGACGCCGCCCGUCGCCGGCAGCGCAGGACACGGCGCCGAGGGUGGGGCGCGGGCGUAGUGGCGCCGGGAGUCGCGGGUGCGCGCGGGCCGUGAGUGUGCGCUUUUGAGAGUCGCGGCGGAAGGAGCCCGGCCGCCGCCCGCCGGC\
) } def
/len { sequence length } bind def

/coor [
[-21.03240776 215.35783386]
[-24.09435654 217.33781433]
[-27.25993347 218.05371094]
[-30.08790779 217.64144897]
[-42.43266678 226.16242981]
[-54.77742386 234.68339539]
[-67.12218475 243.20436096]
[-79.20394897 252.09429932]
[-91.01170349 261.34509277]
[-102.81945038 270.59585571]
[-114.62720490 279.84664917]
[-119.48874664 287.64920044]
[-126.76715851 289.16195679]
[-138.75878906 298.17309570]
[-150.75044250 307.18423462]
[-157.13476562 321.66009521]
[-171.95761108 323.12039185]
[-183.94924927 332.13153076]
[-195.94088745 341.14263916]
[-196.59953308 356.76635742]
[-207.18492126 368.27651978]
[-222.69895935 370.23837280]
[-235.81637573 361.72558594]
[-240.34355164 346.75769043]
[-234.14288330 332.40197754]
[-220.14212036 325.43685913]
[-204.95202637 329.15100098]
[-192.96038818 320.13986206]
[-180.96875000 311.12875366]
[-175.44213867 297.29739380]
[-159.76156616 295.19259644]
[-147.76992798 286.18145752]
[-135.77828979 277.17031860]
[-123.87799072 268.03890991]
[-112.07023621 258.78811646]
[-100.26248169 249.53732300]
[-88.45473480 240.28654480]
[-87.68138123 236.79086304]
[-85.14196777 233.50842285]
[-80.96146393 231.28102112]
[-75.64315033 230.85960388]
[-63.29839325 222.33863831]
[-50.95363617 213.81767273]
[-38.60887909 205.29669189]
[-26.61723709 196.28555298]
[-14.99816322 186.79887390]
[-3.37908888 177.31219482]
[8.23998547 167.82551575]
[13.53656197 151.12055969]
[31.69887733 148.25096130]
[43.12456131 138.53222656]
[54.55024719 128.81349182]
[65.97592926 119.09476471]
[77.40161896 109.37603760]
[88.82730103 99.65730286]
[100.15454865 89.82402039]
[111.38220978 79.87718201]
[122.60987091 69.93033600]
[126.99143219 61.84848785]
[134.16522217 59.89903259]
[145.59091187 50.18030167]
[157.01660156 40.46157074]
[168.44227600 30.74283981]
[179.86796570 21.02410889]
[175.09364319 7.57421494]
[175.20631409 -6.66755581]
[180.17193604 -19.98416328]
[189.37260437 -30.77710342]
[201.68338013 -37.75829315]
[215.60978699 -40.10377121]
[229.46925354 -37.55090714]
[241.59439087 -30.42763901]
[253.21345520 -39.91432190]
[264.83255005 -49.40100098]
[276.45159912 -58.88768005]
[288.07067871 -68.37435913]
[293.86694336 -83.09556580]
[308.61898804 -85.15151978]
[320.23803711 -94.63819885]
[326.03430176 -109.35940552]
[340.78634644 -111.41535950]
[352.40542603 -120.90203857]
[358.20166016 -135.62324524]
[372.95370483 -137.67919922]
[384.57278442 -147.16587830]
[395.99847412 -156.88461304]
[407.22613525 -166.83145142]
[418.45379639 -176.77828979]
[429.68145752 -186.72512817]
[440.90911865 -196.67196655]
[452.13677979 -206.61882019]
[463.36444092 -216.56565857]
[474.59210205 -226.51249695]
[485.81976318 -236.45933533]
[483.35504150 -251.68853760]
[489.53607178 -265.82354736]
[502.39050293 -274.35391235]
[517.81652832 -274.55764771]
[530.89172363 -266.36975098]
[537.44390869 -252.40289307]
[535.38226318 -237.11390686]
[525.36468506 -225.38143921]
[510.58767700 -220.94924927]
[495.76660156 -225.23167419]
[484.53894043 -215.28483582]
[473.31127930 -205.33799744]
[462.08361816 -195.39115906]
[450.85595703 -185.44430542]
[439.62829590 -175.49746704]
[428.40063477 -165.55062866]
[417.17297363 -155.60379028]
[405.94531250 -145.65695190]
[404.76910400 -140.97425842]
[400.60391235 -137.00233459]
[394.05944824 -135.54681396]
[382.44036865 -126.06012726]
[377.47518921 -112.01747131]
[361.89208984 -109.28296661]
[350.27301025 -99.79628754]
[345.30783081 -85.75363159]
[329.72473145 -83.01912689]
[318.10565186 -73.53244781]
[313.14047241 -59.48979187]
[297.55737305 -56.75528717]
[285.93829346 -47.26860809]
[274.31921387 -37.78192520]
[262.70013428 -28.29524612]
[251.08106995 -18.80856514]
[255.87408447 -3.73149419]
[254.52270508 12.06987476]
[247.20373535 26.18240929]
[235.00759888 36.43957138]
[219.77593994 41.25400543]
[203.82356262 39.86313248]
[189.58670044 32.44979477]
[178.16101074 42.16852570]
[166.73532104 51.88725662]
[155.30964661 61.60598755]
[143.88395691 71.32471466]
[132.55671692 81.15799713]
[121.32904816 91.10484314]
[110.10138702 101.05168152]
[106.60987091 108.37220764]
[98.54602814 111.08298492]
[87.12034607 120.80171967]
[75.69466400 130.52044678]
[64.26897430 140.23918152]
[52.84329224 149.95791626]
[41.41761017 159.67663574]
[39.59080887 172.48263550]
[29.82598686 180.34078979]
[17.72666550 179.44459534]
[6.10759163 188.93127441]
[-5.51148272 198.41795349]
[-17.13055801 207.90463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 44]
[5 43]
[6 42]
[7 41]
[8 37]
[9 36]
[10 35]
[11 34]
[13 33]
[14 32]
[15 31]
[17 29]
[18 28]
[19 27]
[45 155]
[46 154]
[47 153]
[48 152]
[50 149]
[51 148]
[52 147]
[53 146]
[54 145]
[55 144]
[56 142]
[57 141]
[58 140]
[60 139]
[61 138]
[62 137]
[63 136]
[64 135]
[72 128]
[73 127]
[74 126]
[75 125]
[76 124]
[78 122]
[79 121]
[81 119]
[82 118]
[84 116]
[85 115]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 106]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
