%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAGCCUUGGGUCACAUGGCUCAUUGUGCCUGCGCUGCCAGCAGCCAGGAGCCAGGAGCCAAGAGCAGAGCGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[132.62150574 287.11837769]
[126.04048920 276.38598633]
[124.74916840 263.78930664]
[129.06538391 251.80711365]
[138.19726562 242.82478333]
[134.07543945 228.40220642]
[129.66769409 214.06443787]
[124.97573853 199.81713867]
[120.28379059 185.56982422]
[115.59184265 171.32252502]
[110.89989471 157.07522583]
[99.56980133 147.40681458]
[102.60219574 131.87892151]
[97.91024780 117.63162231]
[88.49143219 113.52014160]
[82.92844391 104.87886810]
[83.08511353 94.60298157]
[88.90894318 86.13530731]
[85.36377716 71.56027222]
[81.81860352 56.98522949]
[78.27343750 42.41019058]
[74.72827148 27.83514786]
[71.18310547 13.26010895]
[65.98348999 5.41257477]
[67.79900360 -1.96479177]
[64.83609772 -16.66925240]
[61.87318420 -31.37371254]
[56.98966217 -39.42176056]
[59.09704590 -46.72111511]
[56.72107315 -61.53174591]
[52.16137695 -69.76758575]
[54.55728912 -76.97738647]
[52.77201843 -91.87076569]
[50.98674393 -106.76414490]
[37.79837799 -115.16658783]
[33.14581299 -130.09600830]
[39.22585297 -144.50320435]
[53.16768646 -151.58552551]
[68.38840485 -147.99891663]
[77.70125580 -135.43687439]
[76.70899200 -119.83081055]
[65.88012695 -108.54942322]
[67.66539764 -93.65603638]
[69.45066833 -78.76265717]
[71.53170776 -63.90771866]
[73.90767670 -49.09708786]
[76.57764435 -34.33662415]
[79.54055786 -19.63216400]
[82.50346375 -4.92770290]
[85.75814819 9.71494198]
[89.30331421 24.28998184]
[92.84848022 38.86502075]
[96.39364624 53.44006348]
[99.93881226 68.01509857]
[103.48397827 82.59014130]
[117.07155609 95.12113190]
[112.15755463 112.93967438]
[116.84950256 127.18698120]
[128.51519775 137.87445068]
[125.14719391 152.38328552]
[129.83914185 166.63058472]
[134.53109741 180.87788391]
[139.22303772 195.12518311]
[143.91499329 209.37248230]
[149.72166443 216.78210449]
[148.49801636 224.28039551]
[152.61982727 238.70295715]
[169.65061951 244.21592712]
[180.04364014 258.60156250]
[179.93005371 276.19464111]
[169.53533936 290.19799805]
[174.79000854 304.24749756]
[187.78237915 314.25399780]
[185.34477234 330.47097778]
[169.98477173 336.21575928]
[157.50344849 325.57864380]
[160.74050903 309.50216675]
[155.48583984 295.45266724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 61]
[11 60]
[13 58]
[14 57]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[25 49]
[26 48]
[27 47]
[29 46]
[30 45]
[32 44]
[33 43]
[34 42]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
