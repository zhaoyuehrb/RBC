%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGGCCCCAGCAGCCGAAGGGAAACCGGCGCGUCCCCCGCCCGCCCAGGCGUCAGCUGAUGGGCUGCCUGCCGAGGAGGCCGCAGCAGUCGCCGCGCGAAC\
) } def
/len { sequence length } bind def

/coor [
[50.94371414 174.10249329]
[36.96550751 168.66101074]
[28.66130066 156.16940308]
[29.05377007 141.17453003]
[37.99886322 129.13529968]
[23.10822868 130.94335938]
[8.21759605 132.75140381]
[1.72730279 149.82604980]
[-12.36776066 161.31343079]
[-30.23629570 164.19857788]
[-47.07474136 157.79023743]
[-58.39859772 143.88429260]
[-73.06449890 147.03250122]
[-80.95309448 151.96958923]
[-88.22067261 150.04725647]
[-102.97496796 152.75108337]
[-117.72927094 155.45491028]
[-132.48356628 158.15873718]
[-138.25296021 172.46669006]
[-150.85514832 181.36547852]
[-166.26881409 182.01553345]
[-179.57550049 174.20942688]
[-186.52911377 160.43804932]
[-184.91076660 145.09580994]
[-175.23687744 133.07833862]
[-160.59434509 128.22039795]
[-145.65554810 132.07211304]
[-135.18739319 143.40443420]
[-120.43309784 140.70060730]
[-105.67879486 137.99678040]
[-90.92449951 135.29295349]
[-76.21271515 132.36660767]
[-61.54681396 129.21838379]
[-59.45966339 117.35061646]
[-53.41222000 106.88765717]
[-44.11692047 99.11011505]
[-32.68539047 94.97941589]
[-20.49549866 95.01895905]
[-9.02530575 99.24797821]
[0.32616132 107.17623138]
[6.40954638 117.86077118]
[21.30017853 116.05271912]
[36.19081116 114.24467468]
[50.75494003 110.65493774]
[64.78018188 105.33586121]
[78.80542755 100.01679230]
[82.64380646 87.83560181]
[92.78446198 80.07147217]
[105.54518127 79.54367828]
[116.29236603 86.44386292]
[130.47186279 81.55081940]
[144.65136719 76.65777588]
[158.83085632 71.76473236]
[163.45045471 57.06896973]
[175.69447327 48.01704407]
[190.74282837 47.91178131]
[202.82302856 56.58398056]
[217.00251770 51.69093704]
[231.18202209 46.79789352]
[245.36151123 41.90485382]
[252.59748840 36.05290222]
[260.04379272 37.08520889]
[274.36459351 32.62266541]
[288.68542480 28.16011810]
[299.55886841 16.66756248]
[314.01171875 20.26812363]
[328.33255005 15.80557728]
[335.74197388 10.17484283]
[343.15368652 11.43158150]
[357.60275269 7.40360355]
[372.05181885 3.37562561]
[383.13772583 -8.70885086]
[399.08523560 -4.88675928]
[403.48895264 10.91006088]
[391.81866455 22.43119431]
[376.07977295 17.82468796]
[361.63070679 21.85266495]
[347.18167114 25.88064384]
[332.79507446 30.12639046]
[318.47427368 34.58893585]
[308.62515259 45.76229858]
[293.14794922 42.48093033]
[278.82714844 46.94347763]
[264.50634766 51.40602112]
[250.25456238 56.08435059]
[236.07505798 60.97739410]
[221.89556885 65.87043762]
[207.71606445 70.76347351]
[203.55503845 85.04016876]
[191.64431763 94.23790741]
[176.42352295 94.66349792]
[163.72390747 85.94422913]
[149.54440308 90.83727264]
[135.36491394 95.73031616]
[121.18540955 100.62335968]
[114.37532806 115.57434082]
[98.92779541 121.16744232]
[84.12449646 114.04203033]
[70.09925842 119.36110687]
[56.07401276 124.68018341]
[69.59048462 131.18441772]
[76.90568542 144.27975464]
[75.35692596 159.19958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 43]
[6 42]
[7 41]
[12 33]
[13 32]
[15 31]
[16 30]
[17 29]
[18 28]
[44 100]
[45 99]
[46 98]
[50 95]
[51 94]
[52 93]
[53 92]
[57 88]
[58 87]
[59 86]
[60 85]
[62 84]
[63 83]
[64 82]
[66 80]
[67 79]
[69 78]
[70 77]
[71 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
