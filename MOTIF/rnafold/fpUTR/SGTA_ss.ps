%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAAGGGAAGCAACUCCGGGCGCCUUUCUUUUGCGCAGGCGUCGCGCCCUGGGGCCGGGGCCGGGCGGCACCGCGGUGCGCAAGCGCAACCGUCGGUGGGUCGGGGAUCGGUCGCCUGAGAGGUAUCACCUCUUCUGGGCUCAAG\
) } def
/len { sequence length } bind def

/coor [
[110.55798340 138.80299377]
[99.95137787 149.40960693]
[89.34477997 160.01620483]
[78.73817444 170.62280273]
[68.13157654 181.22940063]
[57.52497101 191.83601379]
[46.91836929 202.44261169]
[36.31176758 213.04920959]
[25.70516777 223.65580750]
[15.09856510 234.26242065]
[10.81146717 249.49169922]
[-3.65917039 253.02014160]
[-14.26577187 263.62673950]
[-10.21314907 278.44134521]
[-14.12628555 293.29336548]
[-24.95256615 304.18774414]
[-39.77977753 308.19390869]
[-54.61947632 304.23422241]
[-65.47985077 293.37384033]
[-69.43952179 278.53414917]
[-65.43335724 263.70693970]
[-54.53899002 252.88066101]
[-39.68695450 248.96752930]
[-24.87237358 253.02014160]
[-14.26577187 242.41354370]
[-10.73732948 227.94291687]
[4.49196339 223.65580750]
[15.09856510 213.04920959]
[25.70516777 202.44261169]
[36.31176758 191.83601379]
[46.91836929 181.22940063]
[57.52497101 170.62280273]
[68.13157654 160.01620483]
[78.73817444 149.40960693]
[89.34477997 138.80299377]
[99.95137787 128.19639587]
[82.12036133 117.61724854]
[77.99675751 99.71263885]
[63.96284485 94.41647339]
[49.92893600 89.12030792]
[35.89502716 83.82414246]
[21.80569649 78.67722321]
[7.66253424 73.68012238]
[-9.28610229 74.10443878]
[-14.38568211 57.93561935]
[-0.26045305 48.55936050]
[12.65963173 59.53696442]
[26.80279350 64.53405762]
[34.20862961 63.79167557]
[41.19118881 69.79022980]
[55.22510147 75.08639526]
[69.25901031 80.38256073]
[83.29292297 85.67872620]
[111.25875854 77.56588745]
[127.50689697 106.19756317]
[134.25994873 92.80367279]
[141.01301575 79.40979004]
[147.76606750 66.01589966]
[154.51911926 52.62201309]
[161.27217102 39.22812271]
[156.55632019 24.38229942]
[163.59568787 10.89519310]
[177.77796936 6.49083662]
[184.53102112 -6.90305138]
[183.83508301 -22.70894432]
[196.47378540 -30.59009171]
[203.22683716 -43.98397827]
[209.97988892 -57.37786865]
[206.68820190 -69.89571381]
[212.64294434 -80.93355560]
[224.15078735 -84.79966736]
[231.18661499 -98.04720306]
[238.22244263 -111.29473877]
[245.25827026 -124.54226685]
[252.29408264 -137.78981018]
[259.18890381 -151.11126709]
[265.94198608 -164.50515747]
[272.69503784 -177.89904785]
[279.44808960 -191.29292297]
[286.05859375 -204.75773621]
[292.52584839 -218.29194641]
[298.99310303 -231.82614136]
[297.17926025 -248.12467957]
[310.54583740 -257.62551880]
[325.34246826 -250.55503845]
[326.34762573 -234.18672180]
[312.52731323 -225.35890198]
[306.06005859 -211.82469177]
[299.59280396 -198.29049683]
[299.54647827 -190.84768677]
[292.84197998 -184.53987122]
[286.08892822 -171.14598083]
[279.33584595 -157.75209045]
[272.58279419 -144.35821533]
[272.37850952 -136.91806030]
[265.54162598 -130.75398254]
[258.50579834 -117.50644684]
[251.46997070 -104.25891113]
[244.43414307 -91.01137543]
[237.39831543 -77.76383972]
[238.99299622 -60.31713104]
[223.37377930 -50.62481308]
[216.62072754 -37.23092270]
[209.86767578 -23.83703613]
[211.04664612 -8.98916435]
[197.92491150 -0.14999501]
[191.17185974 13.24389267]
[196.06402588 27.26538658]
[189.40626526 40.94489288]
[174.66606140 45.98117828]
[167.91300964 59.37506866]
[161.15995789 72.76895905]
[154.40689087 86.16284180]
[147.65383911 99.55673218]
[140.90078735 112.95062256]
[143.43579102 127.73485565]
[154.26513672 138.11393738]
[165.09448242 148.49302673]
[175.92382812 158.87210083]
[186.97102356 169.01899719]
[198.23110962 178.92912292]
[209.49119568 188.83923340]
[220.75128174 198.74935913]
[232.01136780 208.65948486]
[243.27143860 218.56959534]
[254.53152466 228.47972107]
[270.41619873 234.40541077]
[269.11938477 251.30969238]
[252.51673889 254.74313354]
[244.62141418 239.73980713]
[233.36132812 229.82968140]
[222.10124207 219.91955566]
[210.84115601 210.00944519]
[199.58106995 200.09931946]
[188.32098389 190.18919373]
[177.06089783 180.27908325]
[172.25744629 179.69322205]
[167.79177856 176.03857422]
[165.54473877 169.70144653]
[154.71539307 159.32237244]
[143.88604736 148.94328308]
[133.05671692 138.56419373]
[142.07211304 150.55262756]
[140.72113037 165.49166870]
[129.70127869 175.66825867]
[114.70213318 175.82818604]
[103.46778107 165.88890076]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[12 25]
[13 24]
[38 53]
[39 52]
[40 51]
[41 50]
[42 48]
[43 47]
[55 115]
[56 114]
[57 113]
[58 112]
[59 111]
[60 110]
[63 107]
[64 106]
[66 104]
[67 103]
[68 102]
[71 100]
[72 99]
[73 98]
[74 97]
[75 96]
[76 94]
[77 93]
[78 92]
[79 91]
[80 89]
[81 88]
[82 87]
[116 142]
[117 141]
[118 140]
[119 139]
[120 136]
[121 135]
[122 134]
[123 133]
[124 132]
[125 131]
[126 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
