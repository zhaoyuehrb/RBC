%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGGGGCAGGGGGCGGAGCUGGAGGGGGUGGUUCGGCGUGGGGGCCGUUGGCUCCAGACAAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[111.65950012 261.45407104]
[109.99555206 246.40380859]
[113.31099701 231.62928772]
[121.24620819 218.73312378]
[132.94042969 209.11418152]
[127.66980743 195.07066345]
[122.39918518 181.02714539]
[117.12856293 166.98361206]
[111.85794067 152.94009399]
[100.14196777 143.74307251]
[102.53686523 128.10417175]
[97.26624298 114.06065369]
[86.58942413 105.03307343]
[88.69023895 91.20996857]
[83.41961670 77.16644287]
[78.14899445 63.12292480]
[59.80382919 59.14778137]
[47.36265945 45.28449249]
[45.41877365 26.90344620]
[54.54201889 10.99378967]
[47.43399048 -2.21514297]
[40.32596207 -15.42407608]
[33.21792984 -28.63300896]
[26.10990143 -41.84194183]
[19.00187111 -55.05087662]
[3.60773134 -57.00025940]
[-7.67749071 -67.65029907]
[-10.51439667 -82.90584564]
[-3.81213832 -96.90081787]
[9.85212898 -104.25387573]
[25.22421455 -102.13761139]
[36.39324188 -91.36576843]
[39.06448746 -76.08035278]
[32.21080399 -62.15890503]
[39.31883240 -48.94997025]
[46.42686462 -35.74103928]
[53.53489304 -22.53210640]
[60.64292526 -9.32317257]
[67.75095367 3.88576007]
[79.43754578 3.28707600]
[90.49928284 7.26248074]
[99.20870972 15.23418903]
[104.18916321 25.99704742]
[104.63229370 37.90062332]
[100.42898560 49.10225296]
[92.19251251 57.85230255]
[97.46313477 71.89582062]
[102.73375702 85.93934631]
[113.41057587 94.96692657]
[111.30976105 108.79003143]
[116.58038330 122.83355713]
[128.67335510 133.03506470]
[125.90145874 147.66947937]
[131.17208862 161.71299744]
[136.44270325 175.75651550]
[141.71333313 189.80003357]
[146.98394775 203.84356689]
[162.11920166 203.39323425]
[176.57987976 207.88407898]
[188.79737854 216.82899475]
[197.44644165 229.25769043]
[201.58888245 243.82199097]
[200.77537537 258.94207764]
[195.09414673 272.97781372]
[185.16145325 284.40673828]
[172.05471802 291.98913574]
[157.19567871 294.90246582]
[142.19612122 292.83078003]
[128.68309021 285.99874878]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[11 51]
[12 50]
[14 48]
[15 47]
[16 46]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
