%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCACCUGAAGCCCUUCGGGGCAGAGGAGGGCGGGGACUCGGGGCGGCUCUCAGCAUCCGCCUGGAGCUCGUGGCGCUGUGUUUCCGUGCUGUGGAGUUGCCUGGUCCGCUUCCUCCCCGCGAAUAAGAAUAAAAGAUUCUGGAGGAGUUGGAGAAGAGUGUAUUCAGCCCCCAAACCACGAGAUCAACAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[126.32340240 150.54454041]
[120.47227478 136.73278809]
[114.62114716 122.92105103]
[101.30339813 127.70806122]
[87.09195709 125.17357635]
[79.73119354 138.24336243]
[72.37042999 151.31314087]
[77.46594238 163.78916931]
[74.48519897 176.73217773]
[64.73593140 185.46286011]
[51.93042374 186.95780945]
[44.36112595 199.90792847]
[36.79182816 212.85804749]
[29.22253036 225.80818176]
[29.67603683 242.20104980]
[15.56632805 250.55857849]
[1.40826142 242.28323364]
[1.76644266 225.88800049]
[16.27240562 218.23887634]
[23.84170341 205.28875732]
[31.41100121 192.33862305]
[38.98030090 179.38850403]
[34.02128601 163.32431030]
[42.37414932 148.34611511]
[59.30064774 143.95237732]
[66.66140747 130.88259888]
[74.02217102 117.81281281]
[68.72904968 103.77775574]
[54.57079697 98.82357025]
[38.98957825 101.56877136]
[29.53198624 90.06211090]
[15.37373638 85.10792542]
[1.21548629 80.15373993]
[-12.94276333 75.19955444]
[-27.10101318 70.24536896]
[-41.25926208 65.29118347]
[-55.41751480 60.33699799]
[-69.57575989 55.38281250]
[-85.15698242 58.12801361]
[-94.61457825 46.62135315]
[-108.77282715 41.66716766]
[-122.93107605 36.71298218]
[-138.51229858 39.45818329]
[-147.96989441 27.95152092]
[-162.12814331 22.99733543]
[-176.43789673 18.49948883]
[-190.88447571 14.46260452]
[-205.33105469 10.42571926]
[-219.77763367 6.38883495]
[-234.22421265 2.35194993]
[-248.67077637 -1.68493485]
[-262.32516479 5.81145525]
[-276.91851807 1.51168275]
[-283.98104858 -11.55187225]
[-298.42761230 -15.58875751]
[-314.16934204 -10.99195385]
[-325.83251953 -22.52028084]
[-321.41906738 -38.31438065]
[-305.46920776 -42.12664032]
[-294.39074707 -30.03533363]
[-279.94415283 -25.99844933]
[-267.13265991 -33.50849915]
[-252.42427063 -29.62031937]
[-244.63389587 -16.13151169]
[-230.18731689 -12.09462643]
[-215.74075317 -8.05774117]
[-201.29417419 -4.02085638]
[-186.84759521 0.01602843]
[-172.40101624 4.05291319]
[-169.88775635 2.78484249]
[-166.71772766 2.44224405]
[-163.24324036 3.28142238]
[-159.90315247 5.42568731]
[-157.17395020 8.83908558]
[-143.01570129 13.79327202]
[-128.44717407 10.69371414]
[-117.97689056 22.55473137]
[-103.81864166 27.50891685]
[-89.66039276 32.46310425]
[-75.09186554 29.36354637]
[-64.62157440 41.22456360]
[-50.46332932 46.17874908]
[-36.30507660 51.13293457]
[-22.14682770 56.08712006]
[-7.98857784 61.04130554]
[6.16967201 65.99549103]
[20.32792282 70.94967651]
[34.48617172 75.90386200]
[49.05469894 72.80430603]
[59.52498627 84.66532135]
[73.68323517 89.61950684]
[99.97004700 72.26131439]
[125.26938629 89.96952057]
[138.09652710 82.19363403]
[150.92367554 74.41773987]
[163.75080872 66.64185333]
[167.62356567 51.55412674]
[180.74287415 43.85099792]
[195.10285950 47.63605881]
[207.92999268 39.86016846]
[220.75714111 32.08428192]
[233.52154541 24.20584297]
[246.22241211 16.22536278]
[249.85284424 1.07750058]
[262.84701538 -6.83491325]
[277.26580811 -3.28049803]
[289.96667480 -11.26097870]
[302.66754150 -19.24146080]
[315.36840820 -27.22194099]
[322.93685913 -41.11543655]
[337.82983398 -41.33539200]
[350.53070068 -49.31587219]
[363.23156738 -57.29635620]
[375.93243408 -65.27683258]
[388.63327026 -73.25731659]
[401.33413696 -81.23780060]
[414.03500366 -89.21827698]
[399.13699341 -90.96457672]
[387.47576904 -100.39936066]
[382.65789795 -114.60458374]
[386.17358398 -129.18676758]
[396.93539429 -139.63584900]
[411.61489868 -142.72006226]
[425.67190552 -137.48551941]
[434.75878906 -125.55117798]
[436.06509399 -110.60816956]
[429.18670654 -97.27803802]
[442.90289307 -103.34978485]
[456.61907959 -109.42153931]
[470.33526611 -115.49328613]
[484.05145264 -121.56504059]
[491.15075684 -135.95181274]
[506.85522461 -139.23045349]
[519.11773682 -128.88584900]
[518.53149414 -112.85350800]
[505.54629517 -103.43206787]
[490.12319946 -107.84884644]
[476.40701294 -101.77709961]
[462.69082642 -95.70534515]
[448.97463989 -89.63359833]
[435.25845337 -83.56185150]
[422.01550293 -76.51741791]
[409.31463623 -68.53693390]
[396.61376953 -60.55645370]
[383.91290283 -52.57597351]
[371.21203613 -44.59549332]
[358.51116943 -36.61500931]
[345.81030273 -28.63452911]
[339.15032959 -15.31185341]
[323.34887695 -14.52107811]
[310.64801025 -6.54059744]
[297.94714355 1.43988395]
[285.24630737 9.42036533]
[282.19262695 23.95345497]
[269.42584229 32.22772598]
[254.20289612 28.92622566]
[241.50202942 36.90670776]
[237.50607300 43.13509369]
[228.53303528 44.91142273]
[215.70588684 52.68730927]
[202.87873840 60.46319962]
[199.59254456 74.94548035]
[186.69476318 83.01406097]
[171.52670288 79.46899414]
[158.69955444 87.24488068]
[145.87242126 95.02077484]
[133.04527283 102.79666138]
[128.43289185 117.06991577]
[134.28402710 130.88166809]
[140.13514709 144.69340515]
[154.96519470 142.04434204]
[170.01286316 142.76220703]
[184.52337646 146.81100464]
[197.76889038 153.98764038]
[209.08502197 163.93214417]
[217.90414429 176.14569092]
[223.78390503 190.01567078]
[226.42936707 204.84634399]
[225.70785522 219.89384460]
[221.65554810 234.40338135]
[214.47570801 247.64715576]
[204.52845764 258.96087646]
[192.31277466 267.77703857]
[178.44137573 273.65344238]
[163.61006165 276.29531860]
[148.56272888 275.57015991]
[134.05418396 271.51431274]
[120.81214905 264.33126831]
[109.50084686 254.38128662]
[100.68763733 242.16346741]
[94.81459808 228.29064941]
[92.17631531 213.45867920]
[92.90512848 198.41152954]
[96.96446991 183.90397644]
[104.15072632 170.66368103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 170]
[2 169]
[3 168]
[5 27]
[6 26]
[7 25]
[11 22]
[12 21]
[13 20]
[14 19]
[28 91]
[29 90]
[31 88]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 82]
[38 81]
[40 79]
[41 78]
[42 77]
[44 75]
[45 74]
[46 69]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[54 61]
[55 60]
[93 167]
[94 166]
[95 165]
[96 164]
[99 161]
[100 160]
[101 159]
[102 157]
[103 156]
[106 153]
[107 152]
[108 151]
[109 150]
[111 148]
[112 147]
[113 146]
[114 145]
[115 144]
[116 143]
[117 142]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
