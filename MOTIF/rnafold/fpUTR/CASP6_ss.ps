%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGAGGGCGGGGCCGGGCCCGGGAGCCUGUGGCUUCAGGAAGAGGAGGGCAAGGUGUCUGGCUGCGCGUUUGGCUGCA\
) } def
/len { sequence length } bind def

/coor [
[143.29205322 352.82101440]
[140.32913208 338.11657715]
[137.36622620 323.41210938]
[134.40332031 308.70764160]
[131.44039917 294.00317383]
[121.34156036 283.05499268]
[126.20050812 267.99841309]
[123.23759460 253.29394531]
[120.27468109 238.58947754]
[110.17584229 227.64129639]
[115.03479004 212.58470154]
[112.07187653 197.88023376]
[109.10896301 183.17578125]
[106.14605713 168.47131348]
[103.18314362 153.76686096]
[100.22023010 139.06239319]
[97.25732422 124.35793304]
[94.29441071 109.65347290]
[91.03972626 95.01082611]
[87.49456024 80.43579102]
[76.03938293 76.20642853]
[68.22726440 66.98017120]
[65.98978424 55.22342682]
[69.78879547 44.00296783]
[78.52717590 36.18599319]
[76.15120697 21.37536430]
[73.77523804 6.56473351]
[71.39926910 -8.24589634]
[62.66995239 -12.94500065]
[57.30302429 -21.11299896]
[56.47872925 -30.71079636]
[60.26259232 -39.41688156]
[67.62152100 -45.18885040]
[67.02517700 -60.17699051]
[66.42882538 -75.16513062]
[65.83248138 -90.15327454]
[55.06922913 -102.04999542]
[57.80177307 -117.85861969]
[71.93394470 -125.45213318]
[86.62474060 -119.00543213]
[90.60465240 -103.46387482]
[80.82061768 -90.74961853]
[81.41696930 -75.76148224]
[82.01331329 -60.77333832]
[82.60966492 -45.78519821]
[95.38014221 -29.77724457]
[86.20989990 -10.62186718]
[88.58586884 4.18876314]
[90.96183777 18.99939346]
[93.33780670 33.81002426]
[108.71338654 43.36556625]
[112.55569458 61.37508774]
[102.06960297 76.89062500]
[105.61476898 91.46566010]
[110.55137634 98.13679504]
[108.99887085 106.69055939]
[111.96178436 121.39501953]
[114.92469025 136.09948730]
[117.88760376 150.80393982]
[120.85051727 165.50840759]
[123.81342316 180.21286011]
[126.77633667 194.91732788]
[129.73924255 209.62178040]
[140.05001831 221.62173462]
[134.97914124 235.62657166]
[137.94206238 250.33102417]
[140.90496826 265.03549194]
[151.21572876 277.03543091]
[146.14486694 291.04028320]
[149.10777283 305.74472046]
[152.07067871 320.44918823]
[155.03359985 335.15365601]
[157.99650574 349.85812378]
[171.29614258 358.39599609]
[174.58155823 373.85501099]
[165.90354919 387.06362915]
[150.41064453 390.18542480]
[137.29450989 381.36825562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[7 67]
[8 66]
[9 65]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 54]
[20 53]
[25 50]
[26 49]
[27 48]
[28 47]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
