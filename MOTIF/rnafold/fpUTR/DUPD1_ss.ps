%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCUAACCCCCAUCCUGCUUCUCUCUCAUAACCAGCUGCAGAAAGGAGAGAAAAUCCCUUGGCUCUAAA\
) } def
/len { sequence length } bind def

/coor [
[121.76974487 285.71624756]
[132.08004761 274.11981201]
[128.74223328 259.49591064]
[125.40442657 244.87197876]
[122.06661224 230.24806213]
[118.72879791 215.62414551]
[103.83229828 214.33763123]
[90.04412079 208.50183105]
[78.71951294 198.67669678]
[70.97575378 185.81492615]
[67.58200836 171.16961670]
[68.88288879 156.17219543]
[74.76354218 142.29248047]
[84.65962982 130.89468384]
[97.61151123 123.10325623]
[94.27369690 108.47933960]
[89.40759277 101.69555664]
[91.12982941 93.12474823]
[88.45147705 78.36580658]
[85.77312469 63.60685730]
[83.09477234 48.84791565]
[80.41641235 34.08897018]
[70.33934021 21.89212227]
[75.67975616 7.98783398]
[73.00140381 -6.77110958]
[70.32305145 -21.53005409]
[67.31420898 -36.22518539]
[63.97639465 -50.84910202]
[49.65562439 -56.82364273]
[41.61039352 -70.09217072]
[42.93425751 -85.55267334]
[53.11816406 -97.26026154]
[68.24619293 -100.71313477]
[82.50131226 -94.58359528]
[90.40213013 -81.22856903]
[88.91062927 -65.78334045]
[78.60031128 -54.18691635]
[81.93812561 -39.56299973]
[86.65090179 -33.54909134]
[85.08199310 -24.20840645]
[87.76034546 -9.44946289]
[90.43869781 5.30948067]
[100.32420349 16.45067215]
[95.17536163 31.41061783]
[97.85371399 46.16956329]
[100.53206635 60.92850494]
[103.21041870 75.68744659]
[105.88877106 90.44639587]
[108.89761353 105.14152527]
[112.23542786 119.76544189]
[127.28524017 121.16566467]
[141.14663696 127.14097595]
[152.46708679 137.09465027]
[160.14628601 150.04241943]
[163.44299316 164.70988464]
[162.04661560 179.65782166]
[156.10646057 193.42353821]
[146.21580505 204.66386414]
[133.35272217 212.28633118]
[136.69053650 226.91024780]
[140.02835083 241.53416443]
[143.36616516 256.15808105]
[146.70397949 270.78201294]
[161.02474976 276.75656128]
[169.06997681 290.02508545]
[167.74610901 305.48556519]
[157.56221008 317.19317627]
[142.43417358 320.64602661]
[128.17906189 314.51651001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[15 50]
[16 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[24 42]
[25 41]
[26 40]
[27 38]
[28 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
