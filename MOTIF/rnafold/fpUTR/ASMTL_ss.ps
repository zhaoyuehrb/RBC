%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGCCUCGCGGAGGCGGGCGGGGGCGUGGCCUCGCGGAGGCGGGACUCUGGCCGCCUGUUUUUUUUGCAGCCGCGCUGCGCGCACCGCGGGCUCCGGGCUCAGAAGUGCGGACGCCCGGCUCCCGGCGUGGACGCC\
) } def
/len { sequence length } bind def

/coor [
[114.35619354 420.12561035]
[114.01474762 405.12948608]
[113.67329407 390.13336182]
[105.64828491 377.58551025]
[113.06945038 363.61279297]
[112.72799683 348.61669922]
[104.70298767 336.06884766]
[112.12415314 322.09613037]
[111.78269958 307.10000610]
[111.44125366 292.10388184]
[110.75853729 277.11944580]
[109.73490143 262.15441895]
[108.71126556 247.18937683]
[107.68762970 232.22433472]
[99.09982300 220.05474854]
[105.87732697 205.75874329]
[104.85369110 190.79370117]
[103.83005524 175.82867432]
[102.80641937 160.86364746]
[101.78278351 145.89860535]
[100.75914764 130.93357849]
[83.19554901 120.75446320]
[77.91711426 104.13327789]
[84.18239594 90.94091034]
[73.21985626 80.70260620]
[62.25731659 70.46430969]
[51.29477692 60.22601700]
[40.33223724 49.98771667]
[29.36969757 39.74942017]
[18.40715790 29.51112366]
[7.44461870 19.27282715]
[-3.49505305 20.27289391]
[-12.96176815 15.14860058]
[-17.89919472 5.83211565]
[-16.86832237 -4.43958759]
[-27.35350800 -15.16623020]
[-37.83869553 -25.89287186]
[-48.32388306 -36.61951447]
[-59.62957764 -46.47756958]
[-71.68404388 -55.40448761]
[-83.73851013 -64.33140564]
[-95.79297638 -73.25831604]
[-107.84744263 -82.18523407]
[-119.90190887 -91.11215210]
[-134.66157532 -86.32341766]
[-149.40669250 -91.15676880]
[-158.46745300 -103.75367737]
[-158.35981750 -119.27038574]
[-149.12518311 -131.74038696]
[-134.31443787 -136.36872864]
[-119.62261963 -131.37570190]
[-110.69904327 -118.68123627]
[-110.97499847 -103.16661835]
[-98.92053223 -94.23970032]
[-86.86605835 -85.31278229]
[-74.81159210 -76.38587189]
[-62.75712967 -67.45895386]
[-50.70265961 -58.53203583]
[-52.36304092 -73.43985748]
[-44.21251297 -86.03227234]
[-29.93203926 -90.62226868]
[-15.97099781 -85.13689423]
[-8.63450432 -72.05347443]
[-11.23588467 -57.28076935]
[-22.60029793 -47.49046326]
[-37.59724045 -47.10470200]
[-27.11205292 -36.37805939]
[-16.62686729 -25.65141678]
[-6.14167976 -14.92477417]
[12.77770519 -11.18360806]
[17.68291473 8.31028748]
[28.64545441 18.54858398]
[39.60799408 28.78688240]
[50.57053375 39.02517700]
[61.53307343 49.26347733]
[72.49561310 59.50177383]
[83.45815277 69.74006653]
[94.42069244 79.97837067]
[109.41680145 79.63691711]
[119.90199280 68.91027832]
[124.01546478 53.63317490]
[138.44500732 49.94025040]
[148.93019104 39.21360779]
[159.41537476 28.48696518]
[166.16333008 12.93378353]
[182.97671509 15.11247826]
[185.53756714 31.87190437]
[170.14202881 38.97215271]
[159.65682983 49.69879532]
[149.17164612 60.42543793]
[145.80813599 74.93529510]
[130.62863159 79.39546204]
[120.14344788 90.12210846]
[125.96247864 103.94740295]
[140.96247864 103.94740295]
[155.96247864 103.94740295]
[170.96247864 103.94740295]
[184.76264954 96.21010590]
[197.48991394 103.94740295]
[212.48991394 103.94740295]
[227.48991394 103.94740295]
[241.41372681 95.28369904]
[255.74916077 103.24783325]
[255.74916077 119.64698029]
[241.41372681 127.61110687]
[227.48991394 118.94740295]
[212.48991394 118.94740295]
[197.48991394 118.94740295]
[184.76264954 126.68470764]
[170.96247864 118.94740295]
[155.96247864 118.94740295]
[140.96247864 118.94740295]
[125.96247864 118.94740295]
[115.72418213 129.90994263]
[116.74781799 144.87496948]
[117.77145386 159.84001160]
[118.79508972 174.80503845]
[119.81872559 189.77006531]
[120.84236145 204.73510742]
[129.50338745 217.97509766]
[122.65265656 231.20069885]
[123.67629242 246.16574097]
[124.69992828 261.13076782]
[125.72356415 276.09579468]
[129.16081238 281.90637207]
[129.09153748 287.69781494]
[126.43737030 291.76245117]
[126.77881622 306.75854492]
[127.12026215 321.75466919]
[135.16969299 335.37515259]
[127.72411346 348.27523804]
[128.06556702 363.27136230]
[136.11499023 376.89181519]
[128.66940308 389.79193115]
[129.01086426 404.78802490]
[129.35231018 419.78414917]
[131.98094177 438.98675537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 136]
[2 135]
[3 134]
[5 132]
[6 131]
[8 129]
[9 128]
[10 127]
[11 124]
[12 123]
[13 122]
[14 121]
[16 119]
[17 118]
[18 117]
[19 116]
[20 115]
[21 114]
[24 78]
[25 77]
[26 76]
[27 75]
[28 74]
[29 73]
[30 72]
[31 71]
[35 69]
[36 68]
[37 67]
[38 66]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[79 93]
[80 92]
[82 90]
[83 89]
[84 88]
[94 113]
[95 112]
[96 111]
[97 110]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
