%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGCGGGGCGGGGCCGGAGGCGAGCAAGGACUCGGGGCCCGCGCGGCGCCUCUCGGGGCCGGGCCGCCGCCUCUGCGCUCAGCCCCGCAGGCCGGGCAUGGGUGGGGGCGCCGGGCCGUCACG\
) } def
/len { sequence length } bind def

/coor [
[319.76437378 373.43075562]
[325.74481201 353.72750854]
[315.88369751 342.42446899]
[306.02261353 331.12139893]
[289.16796875 326.40179443]
[285.64926147 308.37783813]
[275.51159668 297.32217407]
[265.37396240 286.26651001]
[255.23631287 275.21081543]
[245.09864807 264.15515137]
[234.96099854 253.09945679]
[224.82334900 242.04379272]
[210.51896667 237.89241028]
[206.89494324 222.49186707]
[196.75729370 211.43618774]
[186.61964417 200.38050842]
[176.48199463 189.32482910]
[166.20837402 178.39538574]
[155.80036926 167.59382629]
[145.39236450 156.79228210]
[134.98435974 145.99073792]
[124.57635498 135.18919373]
[114.16834259 124.38764954]
[103.76033783 113.58609772]
[89.78115845 108.14713287]
[74.80982971 109.07417297]
[59.83850479 110.00122070]
[49.56436920 122.01028442]
[33.80150223 123.15375519]
[21.90172958 112.75322723]
[20.92497826 96.97914886]
[31.45073509 85.19000244]
[47.23425674 84.38008118]
[58.91146088 95.02989197]
[73.88278961 94.10284424]
[88.85411072 93.17580414]
[92.73719788 86.75929260]
[100.50337219 73.92626190]
[104.38645935 67.50975037]
[98.26281738 53.81665039]
[92.13917542 40.12354660]
[80.33268738 34.75823212]
[75.54228210 23.14101601]
[79.85142517 11.76599312]
[74.06835175 -2.07438374]
[61.60871124 -11.82466412]
[63.84100342 -26.55103874]
[58.05792618 -40.39141846]
[52.27485275 -54.23179245]
[46.49177551 -68.07217407]
[34.03213882 -77.82244873]
[36.26443100 -92.54882812]
[30.48135376 -106.38920593]
[17.11926651 -115.89639282]
[18.94084358 -132.19406128]
[34.07220459 -138.51655579]
[46.94749832 -128.35984802]
[44.32173157 -112.17227936]
[50.10480881 -98.33190155]
[62.15080261 -89.57157898]
[60.33215332 -73.85524750]
[66.11522675 -60.01486969]
[71.89830780 -46.17449188]
[77.68138123 -32.33411407]
[89.72737122 -23.57379150]
[87.90872955 -7.85745859]
[93.69180298 5.98291826]
[108.19071960 15.78776836]
[105.83228302 33.99990845]
[111.95591736 47.69300842]
[118.07955933 61.38611221]
[114.56188965 103.17809296]
[124.96989441 113.97964478]
[135.37789917 124.78118896]
[145.78590393 135.58273315]
[156.19390869 146.38427734]
[166.60191345 157.18582153]
[177.00991821 167.98736572]
[185.31202698 172.05430603]
[187.53767395 179.18717957]
[197.67532349 190.24285889]
[207.81297302 201.29852295]
[217.95062256 212.35420227]
[232.98011780 217.29635620]
[235.87902832 231.90612793]
[246.01667786 242.96180725]
[256.15432739 254.01748657]
[266.29199219 265.07318115]
[276.42962646 276.12884521]
[286.56729126 287.18450928]
[296.70492554 298.24020386]
[309.60198975 299.59884644]
[317.81863403 309.10644531]
[317.32565308 321.26031494]
[327.18673706 332.56335449]
[337.04785156 343.86639404]
[346.70999146 340.63470459]
[356.86779785 340.51589966]
[366.54595947 343.50317383]
[374.82086182 349.29235840]
[380.90856934 357.31280518]
[384.23925781 366.78353882]
[384.51043701 376.78942871]
[381.71426392 386.36947632]
[376.13665771 394.60919189]
[384.52795410 407.04244995]
[392.91928101 419.47570801]
[401.31057739 431.90896606]
[415.44400024 439.01928711]
[416.15057373 453.89712524]
[424.54190063 466.33038330]
[432.93319702 478.76364136]
[448.34500122 483.21969604]
[454.33679199 498.10183716]
[446.31219482 511.99377441]
[430.42697144 514.23876953]
[418.86694336 503.11468506]
[420.49993896 487.15496826]
[412.10864258 474.72171021]
[403.71731567 462.28845215]
[390.18411255 456.06741333]
[388.87731934 440.30026245]
[380.48602295 427.86700439]
[372.09469604 415.43374634]
[363.70339966 403.00048828]
[343.54360962 403.98483276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 96]
[3 95]
[4 94]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 86]
[12 85]
[14 83]
[15 82]
[16 81]
[17 80]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 36]
[26 35]
[27 34]
[39 71]
[40 70]
[41 69]
[44 67]
[45 66]
[47 64]
[48 63]
[49 62]
[50 61]
[52 59]
[53 58]
[105 125]
[106 124]
[107 123]
[108 122]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
