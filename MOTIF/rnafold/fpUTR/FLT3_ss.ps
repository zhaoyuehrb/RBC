%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUGCAGCGCGAGGCGCGCCGCUCCAGGCGGCAUCGCAGGGCUGGGCCGGCGCGGCCUGGGGACCCCGGGCUCCGGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[192.84008789 126.67100525]
[181.02764893 112.11746216]
[166.05181885 111.26628113]
[151.07598877 110.41510010]
[136.10015869 109.56392670]
[121.12432861 108.71274567]
[105.85886383 126.20131683]
[79.20941162 122.78678894]
[66.71768951 131.09082031]
[54.22596741 139.39483643]
[41.73424530 147.69886780]
[31.89097023 161.50271606]
[15.90168953 155.86540222]
[16.89241600 138.94042969]
[33.43021774 135.20713806]
[45.92193985 126.90311432]
[58.41366577 118.59909058]
[70.90538788 110.29506683]
[69.48811340 95.36217499]
[55.65723419 89.55641937]
[41.82635498 83.75066376]
[27.99547386 77.94490814]
[14.16459560 72.13915253]
[0.33371642 66.33339691]
[-16.61112976 65.77793884]
[-20.76817513 49.34153748]
[-6.12489986 40.79689789]
[6.13947105 52.50252151]
[19.97035027 58.30827332]
[33.80122757 64.11402893]
[47.63210678 69.91978455]
[61.46298599 75.72554016]
[75.29386902 81.53129578]
[89.47787476 73.14017487]
[104.86316681 73.59574127]
[116.71248627 81.61006927]
[121.97550964 93.73691559]
[136.95133972 94.58809662]
[151.92716980 95.43927002]
[166.90299988 96.29045105]
[181.87882996 97.14163208]
[189.24255371 87.43180084]
[200.31576538 82.64189911]
[212.19276428 83.89880371]
[221.82022095 90.75936127]
[226.78224182 101.35542297]
[241.65080261 103.33676910]
[256.51937866 105.31811523]
[271.38793945 107.29945374]
[283.86257935 97.97093201]
[298.91317749 100.19210815]
[307.72961426 112.14225006]
[322.59820557 114.12359619]
[337.29946899 108.27695465]
[348.89318848 117.62759399]
[363.76177979 119.60894012]
[378.63034058 121.59028625]
[393.49890137 123.57163239]
[408.36746216 125.55297852]
[423.23602295 127.53431702]
[438.10458374 129.51567078]
[452.97317505 131.49700928]
[469.47216797 127.59583282]
[477.78826904 142.37010193]
[465.89349365 154.45112610]
[450.99182129 146.36557007]
[436.12326050 144.38423157]
[421.25469971 142.40289307]
[406.38610840 140.42153931]
[391.51754761 138.44020081]
[376.64898682 136.45884705]
[361.78042603 134.47750854]
[346.91186523 132.49617004]
[333.27407837 138.48452759]
[320.61685181 128.99215698]
[305.74829102 127.01081848]
[294.11016846 136.23524475]
[279.00311279 134.43768311]
[269.40658569 122.16802216]
[254.53802490 120.18667603]
[239.66946411 118.20533752]
[224.80088806 116.22399139]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[8 18]
[9 17]
[10 16]
[11 15]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[46 82]
[47 81]
[48 80]
[49 79]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[62 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
