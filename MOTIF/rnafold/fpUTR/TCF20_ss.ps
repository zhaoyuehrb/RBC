%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCCCCGCCUCGGCUCAGGAGUUGUUUUCCUCCCCCGUGGUCGCCGGGCUGGCAAGGGGUCUGGGGCAAGGGCCAGGGAAGGAUGCGGCUGCAAAGGAGGGCUGUUGGCCUGCUGCUGUGCUGCUGAACAGU\
) } def
/len { sequence length } bind def

/coor [
[237.47151184 206.95553589]
[249.29426575 197.72392273]
[264.00057983 194.77128601]
[250.84284973 187.56892395]
[237.68511963 180.36657715]
[224.52737427 173.16421509]
[211.28851318 166.11209106]
[197.97023010 159.21112061]
[184.65194702 152.31015015]
[170.57713318 157.04672241]
[156.97219849 150.23788452]
[152.09947205 135.44281006]
[138.78118896 128.54182434]
[125.46291351 121.64085388]
[112.14463806 114.73988342]
[98.30263519 119.02301788]
[85.43760681 112.35689545]
[80.95439148 98.57839966]
[67.63610840 91.67742157]
[54.31783295 84.77644348]
[40.99955368 77.87547302]
[25.18692398 78.39633179]
[17.44622803 65.67111969]
[4.12795019 58.77014542]
[-9.19032860 51.86917114]
[-25.00295830 52.39002609]
[-32.74365234 39.66482162]
[-46.06193161 32.76384354]
[-61.87456131 33.28470230]
[-69.61525726 20.55949593]
[-82.93353271 13.65851974]
[-95.49826050 16.81183243]
[-106.47439575 10.72195053]
[-110.20109558 -0.84283352]
[-123.35883331 -8.04518795]
[-138.35571289 -3.83432221]
[-151.59693909 -11.32597065]
[-155.51892090 -25.64915276]
[-168.67666626 -32.85150528]
[-181.83441162 -40.05385971]
[-197.65480042 -39.89308167]
[-205.10382080 -52.79119492]
[-218.26155090 -59.99354935]
[-234.63520813 -59.07951355]
[-243.38597107 -72.94876862]
[-235.51181030 -87.33380890]
[-219.11299133 -87.43654633]
[-211.05920410 -73.15129089]
[-197.90145874 -65.94893646]
[-183.02220154 -66.62487030]
[-174.63204956 -53.21159744]
[-161.47431946 -46.00924683]
[-148.31657410 -38.80689240]
[-134.13758850 -43.22185898]
[-120.69116974 -36.10508728]
[-116.15647888 -21.20292664]
[-102.99874115 -14.00057220]
[-85.54111481 -15.38238430]
[-76.03256226 0.34024134]
[-62.71428299 7.24121714]
[-47.85426331 6.22675514]
[-39.16095734 19.44556618]
[-25.84267807 26.34654236]
[-10.98266029 25.33208084]
[-2.28935266 38.55089188]
[11.02892590 45.45186615]
[24.34720421 52.35284424]
[39.20722198 51.33838272]
[47.90052795 64.55718994]
[61.21880722 71.45816803]
[74.53708649 78.35914612]
[87.85536194 85.26011658]
[101.69736481 80.97698212]
[114.56239319 87.64310455]
[119.04560852 101.42160034]
[132.36389160 108.32257843]
[145.68217468 115.22355652]
[159.00044250 122.12452698]
[173.89758301 117.57337952]
[187.30590820 124.76167297]
[191.55293274 138.99186707]
[204.87120056 145.89283752]
[218.18948364 152.79382324]
[227.33500671 153.98370361]
[231.72973633 160.00648499]
[244.88746643 167.20883179]
[258.04519653 174.41117859]
[271.20294189 181.61354065]
[282.23825073 181.62660217]
[288.88351440 188.81945801]
[303.32727051 192.86640930]
[317.77102661 196.91336060]
[332.21478271 200.96031189]
[346.65853882 205.00726318]
[355.85485840 204.31155396]
[361.38302612 209.31420898]
[375.73092651 213.68890381]
[390.07882690 218.06359863]
[403.90530396 210.88960266]
[418.39379883 215.53054810]
[425.14788818 228.75619507]
[439.49578857 233.13087463]
[454.95257568 229.75471497]
[464.86999512 240.86750793]
[479.21789551 245.24218750]
[493.56576538 249.61688232]
[507.91366577 253.99156189]
[522.26159668 258.36627197]
[539.17547607 257.20217896]
[544.97631836 273.13287354]
[531.27404785 283.11706543]
[517.88690186 272.71414185]
[503.53897095 268.33947754]
[489.19110107 263.96478271]
[474.84320068 259.59008789]
[460.49530029 255.21539307]
[446.06478882 258.90447998]
[435.12109375 247.47877502]
[420.77319336 243.10408020]
[407.78903198 250.31150818]
[393.17590332 246.07934570]
[385.70413208 232.41148376]
[371.35623169 228.03680420]
[357.00833130 223.66210938]
[342.61157227 219.45101929]
[328.16781616 215.40406799]
[313.72406006 211.35711670]
[299.28030396 207.31016541]
[284.83654785 203.26321411]
[293.28930664 215.65476990]
[295.29077148 230.52064514]
[290.41625977 244.70651245]
[279.70004272 255.20236206]
[265.41595459 259.78112793]
[250.59486389 257.47125244]
[238.38159180 248.76286316]
[231.36759949 235.50375366]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 88]
[4 87]
[5 86]
[6 85]
[7 83]
[8 82]
[9 81]
[12 78]
[13 77]
[14 76]
[15 75]
[18 72]
[19 71]
[20 70]
[21 69]
[23 67]
[24 66]
[25 65]
[27 63]
[28 62]
[30 60]
[31 59]
[34 57]
[35 56]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
[90 129]
[91 128]
[92 127]
[93 126]
[94 125]
[96 124]
[97 123]
[98 122]
[101 119]
[102 118]
[104 116]
[105 115]
[106 114]
[107 113]
[108 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
