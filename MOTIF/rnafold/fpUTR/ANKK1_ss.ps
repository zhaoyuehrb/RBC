%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGACCCGAGGAGCAGGAAGCGGCGGCUCCUUCGGCCACCCAGGCAGCAGCCACAGCGGGGAGUGCGCGGCGCGGGGACAGGAAGAGAGGGGCA\
) } def
/len { sequence length } bind def

/coor [
[-44.52813721 257.78125000]
[-54.86843872 268.64764404]
[-52.21141052 283.82150269]
[-58.92029953 297.49060059]
[-72.23414612 304.50524902]
[-86.94941711 302.36077881]
[-97.28971863 313.22717285]
[-94.35064697 328.46334839]
[-100.95896912 342.50292969]
[-114.57365417 349.94738770]
[-129.95957947 347.93417358]
[-141.20053101 337.23742676]
[-143.97415161 321.97024536]
[-137.21391296 308.00320435]
[-123.51927948 300.70687866]
[-108.15609741 302.88687134]
[-97.81579590 292.02047729]
[-100.68727875 277.42965698]
[-94.34140015 263.78436279]
[-81.02176666 256.40594482]
[-65.73481750 258.30734253]
[-55.39451599 247.44096375]
[-57.50476456 234.61323547]
[-51.69909668 222.76304626]
[-39.92531586 216.38204956]
[-26.43862343 218.03460693]
[-15.74469662 207.51606750]
[-5.05076981 196.99751282]
[5.64315701 186.47895813]
[16.33708382 175.96040344]
[27.03100967 165.44184875]
[37.54956055 154.74792480]
[47.88986206 143.88154602]
[47.26490021 129.04426575]
[57.59663773 117.87691498]
[73.16358948 117.32199097]
[83.50388336 106.45561218]
[86.77057648 88.21955109]
[104.50737762 82.86873627]
[114.10690308 71.34272003]
[123.70642853 59.81669998]
[123.33760071 46.79424667]
[131.73609924 37.36903381]
[143.91088867 36.31103897]
[153.88626099 25.10871696]
[157.35113525 16.43695450]
[164.38142395 13.70792580]
[174.72172546 2.84154725]
[178.62982178 -12.48937988]
[193.00851440 -16.37560272]
[203.34881592 -27.24197960]
[213.50802612 -38.27783966]
[223.48339844 -49.48015976]
[233.45877075 -60.68248367]
[230.01754761 -75.81316376]
[236.15805054 -90.06356049]
[249.51916504 -97.95409393]
[264.96322632 -96.45070648]
[276.55172729 -86.13146973]
[279.82861328 -70.96434784]
[273.53387451 -56.78140259]
[260.08795166 -49.03627014]
[244.66108704 -50.70711517]
[234.68572998 -39.50479126]
[224.71035767 -28.30246925]
[222.57119751 -21.07083702]
[214.21519470 -16.90167809]
[203.87489319 -6.03530073]
[200.70639038 8.51838970]
[185.58810425 13.18184853]
[175.24780273 24.04822731]
[165.08857727 35.08408356]
[155.11320496 46.28640747]
[152.59529114 63.56747818]
[135.23245239 69.41622925]
[125.63291931 80.94224548]
[116.03339386 92.46826172]
[117.53049469 102.54528046]
[113.22942352 111.78044891]
[104.55274963 117.11926270]
[94.37026215 116.79591370]
[84.02996063 127.66229248]
[84.24759674 143.23760986]
[73.60626221 154.11035156]
[58.75624084 154.22184753]
[48.41593933 165.08822632]
[44.66623306 173.64068604]
[37.54956055 176.13578796]
[26.85563469 186.65432739]
[16.16170883 197.17288208]
[5.46778202 207.69143677]
[-5.22614479 218.20999146]
[-15.92007160 228.72854614]
[-15.68993759 246.12472534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[6 17]
[7 16]
[26 93]
[27 92]
[28 91]
[29 90]
[30 89]
[31 88]
[32 86]
[33 85]
[36 82]
[37 81]
[39 77]
[40 76]
[41 75]
[44 73]
[45 72]
[47 71]
[48 70]
[50 68]
[51 67]
[52 65]
[53 64]
[54 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
