%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUUUCUGAUGAAACUGGAUUGGAAUAAUUUUCAUGAUCUUUGUAUAUUUAUAUAUAUAUAUUUUUAAAUUUUGCAUUUGACUUAAAGUGCC\
) } def
/len { sequence length } bind def

/coor [
[103.90868378 150.12667847]
[96.09131622 150.12667847]
[88.36843872 148.91491699]
[80.92675018 146.52067566]
[73.94612885 143.00183105]
[64.34660339 154.52784729]
[54.74707413 166.05386353]
[45.14754868 177.57987976]
[42.89395142 193.82344055]
[27.60007858 199.74201965]
[14.99895477 189.24708557]
[18.05353546 173.13491821]
[33.62153244 167.98036194]
[43.22105789 156.45434570]
[52.82058716 144.92832947]
[62.42011642 133.40231323]
[53.41118622 118.90619659]
[49.77070618 102.23151398]
[51.91816330 85.29969788]
[38.38829422 78.82338715]
[24.85842705 72.34706879]
[11.32855892 65.87075043]
[-2.20130968 59.39443970]
[-20.42189980 61.31440735]
[-29.91314125 46.65522003]
[-43.64974213 40.62979126]
[-57.38634109 34.60435867]
[-72.79443359 39.07315826]
[-85.81137848 29.69558907]
[-86.45168304 13.66531849]
[-74.22415924 3.27939892]
[-58.50872421 6.50501871]
[-51.36090851 20.86775780]
[-37.62430954 26.89319038]
[-23.88771057 32.91862106]
[-12.37979984 28.80611610]
[-0.81725055 33.87335205]
[4.27500534 45.86457062]
[17.80487442 52.34088516]
[31.33474159 58.81719971]
[44.86461258 65.29351807]
[58.39447784 71.76982880]
[82.11109924 53.01118088]
[112.29814148 51.24840927]
[118.09562683 37.41406250]
[123.89311218 23.57971764]
[129.69059753 9.74537086]
[135.48809814 -4.08897543]
[141.28558350 -17.92332077]
[147.08306885 -31.75766754]
[140.86424255 -46.28701019]
[146.81813049 -60.92690659]
[161.41241455 -66.99177551]
[175.98854065 -60.88343048]
[181.89877319 -46.22584915]
[175.63665771 -31.71510887]
[160.91741943 -25.96018028]
[155.11991882 -12.12583447]
[149.32243347 1.70851231]
[143.52494812 15.54285908]
[137.72746277 29.37720490]
[131.92997742 43.21155167]
[126.13248444 57.04589844]
[131.66345215 60.94379044]
[136.62094116 65.54904938]
[140.91517639 70.77825928]
[144.46838379 76.53672791]
[147.21618652 82.72014618]
[149.10884094 89.21652985]
[150.11206055 95.90821838]
[150.20768738 102.67401123]
[149.39396667 109.39137268]
[147.68565369 115.93865204]
[145.11367798 122.19725037]
[141.72462463 128.05383301]
[137.57987976 133.40231323]
[147.17941284 144.92832947]
[156.77894592 156.45434570]
[166.37846375 167.98036194]
[175.97799683 179.50637817]
[185.57752991 191.03239441]
[201.33729553 192.21788025]
[211.57936096 204.25430298]
[210.22731018 220.00065613]
[198.08328247 230.11489868]
[182.35211182 228.59645081]
[172.36682129 216.34616089]
[174.05151367 200.63191223]
[164.45198059 189.10589600]
[154.85244751 177.57987976]
[145.25292969 166.05386353]
[135.65339661 154.52784729]
[126.05387115 143.00183105]
[119.07324982 146.52067566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[25 35]
[26 34]
[27 33]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[76 93]
[77 92]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
