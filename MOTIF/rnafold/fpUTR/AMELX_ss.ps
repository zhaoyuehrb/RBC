%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGAUCAAGCAUCCCUGAGUUUCAAACAGAAACUUGCACUGAAUACAUUCAAAGAACCAUCAAGAA\
) } def
/len { sequence length } bind def

/coor [
[78.56040192 152.52549744]
[71.92424011 149.29843140]
[65.76306915 145.23733521]
[60.18111801 140.41090393]
[48.33298111 149.60990906]
[36.48484039 158.80889893]
[24.63670349 168.00790405]
[21.21467209 183.68174744]
[6.76360750 190.64926147]
[-7.63086796 183.56558228]
[-10.92654610 167.86468506]
[-0.59526408 155.59095764]
[15.43770218 156.15977478]
[27.28584099 146.96076965]
[39.13397980 137.76176453]
[50.98211670 128.56275940]
[43.40490341 103.94709778]
[47.49185181 78.51794434]
[62.40064240 57.51620865]
[54.03163147 45.06792831]
[45.66262054 32.61964798]
[37.29360962 20.17136955]
[28.92459869 7.72309017]
[20.55558777 -4.72518921]
[12.18657780 -17.17346954]
[-3.21719503 -21.65714455]
[-9.18229485 -36.54999924]
[-1.13280797 -50.42750931]
[14.75638866 -52.64403915]
[26.29646301 -41.49925232]
[24.63485718 -25.54247856]
[33.00386810 -13.09420013]
[41.37287903 -0.64592069]
[49.74188995 11.80235863]
[58.11090088 24.25063896]
[66.47991180 36.69891739]
[74.84892273 49.14719772]
[91.11802673 43.96701813]
[108.19160461 43.86193848]
[124.52323914 48.84147263]
[138.63372803 58.45460892]
[149.24502563 71.83065033]
[163.13566589 66.16936493]
[177.02629089 60.50807571]
[190.91693115 54.84678650]
[200.54112244 41.56871796]
[216.82215881 43.53337097]
[223.01150513 58.71968079]
[212.74209595 71.50527191]
[196.57821655 68.73742676]
[182.68759155 74.39871216]
[168.79695129 80.05999756]
[154.90631104 85.72129059]
[156.29515076 92.96861267]
[156.73158264 100.33489990]
[156.20822144 107.69551849]
[154.73390198 114.92594147]
[152.33360291 121.90384674]
[149.04791260 128.51116943]
[144.93240356 134.63615417]
[140.05673218 140.17514038]
[134.50337219 145.03443909]
[128.36628723 149.13185120]
[121.74928284 152.39802551]
[114.76432800 154.77772522]
[107.52957916 156.23068237]
[100.16744995 156.73231506]
[92.80248260 156.27415466]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 16]
[5 15]
[6 14]
[7 13]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
