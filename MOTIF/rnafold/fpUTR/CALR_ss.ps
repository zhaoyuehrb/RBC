%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:28:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGUCCGUCCGUACUGCAGAGCCGCUGCCGGAGGGUCGUUUUAAAGGGCCCGCGCGUUGCCGCCCCCUCGGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[165.09027100 145.22502136]
[157.13664246 133.42948914]
[154.31913757 119.44020844]
[139.65913391 116.26464844]
[124.99912262 113.08908844]
[110.33911133 109.91352844]
[96.96756744 113.99927521]
[86.48532867 104.74647522]
[71.82531738 101.57091522]
[56.69992828 106.21129608]
[45.89915085 95.95495605]
[31.23914337 92.77939606]
[16.57913399 89.60383606]
[1.91912687 86.42828369]
[-2.73141646 88.16478729]
[-7.20304918 88.14513397]
[-10.91248798 86.68313599]
[-13.46112633 84.26407623]
[-14.67782402 81.45948029]
[-28.67107964 76.05681610]
[-42.66433334 70.65415192]
[-56.65758896 65.25148010]
[-71.84952545 70.40750885]
[-85.27433777 61.62377548]
[-86.63365936 45.63841248]
[-74.88473511 34.71402359]
[-59.04033279 37.23086166]
[-51.25492477 51.25822830]
[-37.26166916 56.66089249]
[-23.26841354 62.06356049]
[-9.27515793 67.46622467]
[5.09468508 71.76827240]
[19.75469208 74.94383240]
[34.41469955 78.11939240]
[49.07470703 81.29494476]
[63.15151978 76.42743683]
[75.00087738 86.91091156]
[89.66088867 90.08647156]
[103.03243256 86.00072479]
[113.51467133 95.25352478]
[128.17468262 98.42908478]
[142.83468628 101.60463715]
[157.49468994 104.78019714]
[167.29199219 91.94544220]
[181.62583923 84.63784027]
[197.65266418 84.25111389]
[212.21717834 90.81151581]
[222.47354126 102.98249054]
[226.44142151 118.33664703]
[241.21354675 120.94136810]
[255.98565674 123.54608917]
[270.75778198 126.15081787]
[285.52990723 128.75553894]
[298.37374878 114.95906830]
[316.73873901 111.41073608]
[333.53515625 119.30631256]
[342.38125610 135.45707703]
[357.35586548 136.32923889]
[372.33050537 137.20141602]
[386.73449707 129.36196899]
[400.58261108 138.14614868]
[399.62908936 154.51756287]
[384.85482788 161.63467407]
[371.45831299 152.17604065]
[356.48370361 151.30386353]
[341.50906372 150.43170166]
[335.95382690 160.60543823]
[326.88229370 167.90524292]
[315.65536499 171.18464661]
[303.97702026 169.90419006]
[293.63583374 164.21968079]
[286.23101807 154.96450806]
[282.92517090 143.52764893]
[268.15304565 140.92292786]
[253.38093567 138.31820679]
[238.60882568 135.71348572]
[223.83670044 133.10876465]
[216.20980835 144.85876465]
[204.61651611 152.79931641]
[190.81901550 155.68278503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 43]
[4 42]
[5 41]
[6 40]
[8 38]
[9 37]
[11 35]
[12 34]
[13 33]
[14 32]
[19 31]
[20 30]
[21 29]
[22 28]
[49 77]
[50 76]
[51 75]
[52 74]
[53 73]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
