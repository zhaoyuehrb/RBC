%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGAGCGCGGGUUUCCGCUCGGGGCGGGCGAUAGAGACAGCGCGUCGCGCCUUUAGCUUCUUUCCCAGACUCCGGCCCAGCUCCUGCGAUCUCCACAGCAGCCUCUGAGGCCGCCCCCAGAGAGCAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[67.22205353 118.53616333]
[52.95621109 123.17141724]
[38.69036102 127.80667877]
[24.42451477 132.44192505]
[17.15002441 138.12022400]
[9.77249336 137.01487732]
[-4.59734964 141.31692505]
[-18.91616440 145.78588867]
[-33.18201065 150.42114258]
[-47.44786072 155.05639648]
[-61.71370697 159.69165039]
[-68.29499817 170.85389709]
[-80.34285736 174.38940430]
[-91.19392395 168.91485596]
[-105.56376648 173.21690369]
[-119.93360901 177.51895142]
[-134.30345154 181.82099915]
[-148.67329407 186.12304688]
[-162.88424683 190.92398071]
[-176.91899109 196.21792603]
[-190.95373535 201.51188660]
[-204.98847961 206.80584717]
[-219.02322388 212.09980774]
[-233.05795288 217.39376831]
[-245.74389648 228.64112854]
[-260.06353760 219.56454468]
[-255.30572510 203.29188538]
[-238.35191345 203.35902405]
[-224.31716919 198.06506348]
[-210.28242493 192.77110291]
[-196.24769592 187.47714233]
[-182.21295166 182.18318176]
[-168.17820740 176.88923645]
[-166.39135742 173.74922180]
[-162.94763184 171.35430908]
[-158.23143005 170.49540710]
[-152.97534180 171.75320435]
[-138.60549927 167.45115662]
[-124.23565674 163.14910889]
[-109.86581421 158.84706116]
[-95.49597168 154.54501343]
[-84.21663666 141.15203857]
[-66.34896088 145.42579651]
[-52.08311462 140.79054260]
[-37.81726837 136.15528870]
[-23.55141830 131.52003479]
[-18.11230469 126.41456604]
[-8.89939785 126.94708252]
[5.47044468 122.64503479]
[19.78925896 118.17608643]
[34.05510712 113.54082489]
[48.32095337 108.90557098]
[62.58680344 104.27031708]
[64.44159698 87.60713959]
[73.34552002 73.40072632]
[87.53343964 64.46736908]
[104.19274139 62.57802963]
[120.02086639 68.10724640]
[131.88005066 79.95890045]
[145.91479492 74.66494751]
[159.94953918 69.37098694]
[166.95196533 63.36039352]
[174.37292480 64.12129974]
[188.52705383 59.15534592]
[202.68118286 54.18939590]
[216.83531189 49.22344589]
[216.74128723 37.27410126]
[220.02943420 25.80587006]
[226.42002869 15.75450802]
[235.38064575 7.93691540]
[246.17057800 2.98475528]
[257.90194702 1.29341960]
[269.61291504 2.99048257]
[280.34634399 7.92614603]
[289.22821045 15.68639374]
[295.53869629 25.62769890]
[310.09313965 21.99887085]
[324.64758301 18.37004089]
[339.20202637 14.74121284]
[353.75643921 11.11238480]
[368.26766968 7.31445694]
[382.73373413 3.34794474]
[397.19979858 -0.61856771]
[402.75939941 -14.98508930]
[415.56277466 -23.22686768]
[430.58648682 -22.35946083]
[442.08099365 -12.92474842]
[456.54705811 -16.89126015]
[471.01312256 -20.85777283]
[485.47918701 -24.82428551]
[489.29028320 -39.70282364]
[500.04156494 -50.67123032]
[514.84094238 -54.77905655]
[529.70745850 -50.92131424]
[540.64208984 -40.13572311]
[544.70349121 -25.32355118]
[540.79919434 -10.46919632]
[529.97937012 0.43159378]
[515.15454102 4.44656086]
[500.31250000 0.49569881]
[489.44567871 -10.35822964]
[474.97964478 -6.39171743]
[460.51358032 -2.42520499]
[446.04751587 1.54130745]
[440.97262573 15.51926613]
[428.49240112 23.92809296]
[413.27593994 23.36920357]
[401.16629028 13.84748840]
[386.70025635 17.81400108]
[372.23419189 21.78051376]
[366.56344604 26.62739563]
[357.38528442 25.66682053]
[342.83084106 29.29564857]
[328.27639771 32.92447662]
[313.72198486 36.55330658]
[299.16754150 40.18213272]
[296.31494141 58.23054504]
[285.90548706 73.30904388]
[269.95309448 82.42389679]
[251.57740784 83.74263000]
[234.39361572 76.96228790]
[221.80126953 63.37757111]
[207.64714050 68.34352112]
[193.49301147 73.30947876]
[179.33888245 78.27542877]
[165.24348450 83.40573120]
[151.20875549 88.69968414]
[137.17401123 93.99364471]
[136.99121094 107.04508972]
[132.36384583 119.25005341]
[123.84789276 129.14208984]
[112.46656036 135.53262329]
[99.58734894 137.65385437]
[86.75772095 135.25088501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 53]
[2 52]
[3 51]
[4 50]
[6 49]
[7 48]
[8 46]
[9 45]
[10 44]
[11 43]
[14 41]
[15 40]
[16 39]
[17 38]
[18 37]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[59 128]
[60 127]
[61 126]
[63 125]
[64 124]
[65 123]
[66 122]
[76 116]
[77 115]
[78 114]
[79 113]
[80 112]
[81 110]
[82 109]
[83 108]
[87 104]
[88 103]
[89 102]
[90 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
