%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGGGUCCGGCCCAGGAGGCUUGGGCGCGCGCAGCCAUCCCGGGCCUCGCCGGGGACCUAGGGACGCAGGCAACGCCUGCGCCCGCUCACC\
) } def
/len { sequence length } bind def

/coor [
[124.42310333 192.15309143]
[127.09448242 177.39289856]
[135.71107483 165.11468506]
[148.68336487 157.58343506]
[163.61531067 156.18804932]
[151.53926086 147.29035950]
[139.46321106 138.39265442]
[127.38716888 129.49496460]
[115.31111145 120.59726715]
[103.23506165 111.69956970]
[90.86843872 103.21036530]
[78.22505951 95.13912964]
[65.58167267 87.06789398]
[60.76280594 87.06710052]
[56.68237305 85.56272125]
[53.74839020 83.01374054]
[52.15909958 79.96856689]
[51.89244080 76.98159790]
[40.43765640 67.29718018]
[28.98287392 57.61276245]
[17.52808952 47.92834473]
[6.07330704 38.24392700]
[-5.38147593 28.55950737]
[-16.83625793 18.87508965]
[-28.29104233 9.19067192]
[-39.74582291 -0.49374542]
[-51.20060730 -10.17816353]
[-71.07130432 -12.63516998]
[-77.25834656 -30.82667923]
[-89.33439636 -39.72437668]
[-105.34795380 -38.75197220]
[-115.98506165 -50.76161194]
[-113.08584595 -66.54052734]
[-98.87433624 -73.98448181]
[-84.25238037 -67.38311005]
[-80.43669891 -51.80042648]
[-68.36064911 -42.90272903]
[-58.18822479 -45.36081696]
[-48.17227554 -41.63258743]
[-41.82417679 -32.76027679]
[-41.51618958 -21.63294601]
[-30.06140709 -11.94852829]
[-18.60662460 -2.26411057]
[-7.15184116 7.42030716]
[4.30294180 17.10472488]
[15.75772476 26.78914261]
[27.21250725 36.47356033]
[38.66728973 46.15797806]
[50.12207413 55.84239578]
[61.57685852 65.52681732]
[73.65290833 74.42450714]
[86.29629517 82.49574280]
[98.93967438 90.56697845]
[104.40608215 90.60764313]
[109.40585327 93.81617737]
[112.13275909 99.62351990]
[124.20880890 108.52121735]
[136.28486633 117.41891479]
[148.36091614 126.31661224]
[160.43696594 135.21430969]
[172.51301575 144.11199951]
[182.07943726 145.17634583]
[187.82669067 151.53176880]
[202.29371643 155.49468994]
[216.76075745 159.45762634]
[226.07321167 158.71116638]
[231.64076233 163.80224609]
[245.96730042 168.24638367]
[260.29382324 172.69050598]
[274.62036133 177.13464355]
[288.94689941 181.57878113]
[303.27343750 186.02291870]
[317.59997559 190.46704102]
[334.51937866 189.38491821]
[340.24295044 205.34352112]
[326.49246216 215.26119995]
[313.15585327 204.79357910]
[298.82931519 200.34945679]
[284.50277710 195.90531921]
[270.17623901 191.46118164]
[255.84970093 187.01704407]
[241.52316284 182.57292175]
[227.19662476 178.12878418]
[212.79783630 173.92466736]
[198.33079529 169.96173096]
[183.86375427 165.99879456]
[192.02381897 178.58503723]
[194.15156555 193.43336487]
[189.85450745 207.80470276]
[179.92530823 219.04797363]
[166.19561768 225.08912659]
[151.19815063 224.81376648]
[137.69947815 218.27267456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 53]
[12 52]
[13 51]
[18 50]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[29 37]
[30 36]
[63 86]
[64 85]
[65 84]
[67 83]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
