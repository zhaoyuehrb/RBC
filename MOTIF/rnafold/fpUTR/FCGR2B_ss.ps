%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACAUUUCUUUUUCACUUCCCCUUUCAGACUCCAGAAUUUGUUUGCCCUCUAGGGUAGAAUCCGCCAAGCUUUGAGAGAAGGCUGUGACUGCUGUGCUCUGGGCGCCAGCUCGCUCCAGGGAGUG\
) } def
/len { sequence length } bind def

/coor [
[85.35988617 230.69844055]
[87.72507477 245.67112732]
[84.82360840 260.54922485]
[77.00586700 273.53607178]
[65.21586609 283.06350708]
[50.87731552 287.98098755]
[35.72166061 287.69473267]
[21.57902145 282.23931885]
[10.15719032 272.27349854]
[2.83541083 259.00070190]
[0.49782172 244.02366638]
[3.42669845 229.15095520]
[11.26836491 216.17852783]
[23.07590103 206.67285156]
[37.42349243 201.78178406]
[52.57859421 202.09596252]
[57.97702026 188.10107422]
[63.37544250 174.10618591]
[68.77387238 160.11128235]
[74.17229462 146.11639404]
[79.57072449 132.12150574]
[84.96914673 118.12660980]
[76.59564209 102.59549713]
[81.36280060 85.60710144]
[73.02925110 73.13506317]
[64.69569397 60.66301727]
[56.36214066 48.19097137]
[48.02858734 35.71892548]
[39.69503403 23.24688339]
[31.36148071 10.77483845]
[23.02792549 -1.69720554]
[14.54194927 -14.06604481]
[5.90482664 -26.32981682]
[-7.19314146 -21.76450920]
[-21.01578903 -20.77582359]
[-34.60499191 -23.42558289]
[-47.02055740 -29.52363396]
[-57.40527725 -38.64149475]
[-65.04410553 -50.14243317]
[-69.41339874 -63.22595596]
[-70.21678925 -76.98349762]
[-67.40531158 -90.46154022]
[-61.18029022 -102.72767639]
[-51.97897720 -112.93511963]
[-60.00394440 -125.60792542]
[-68.02890778 -138.28073120]
[-76.05387115 -150.95353699]
[-84.07883453 -163.62634277]
[-92.10379791 -176.29913330]
[-100.12876129 -188.97193909]
[-114.89752960 -196.10046387]
[-115.83842468 -212.47259521]
[-101.98355103 -221.24609375]
[-87.58560181 -213.39553833]
[-87.45596313 -196.99690247]
[-79.43099976 -184.32411194]
[-71.40602875 -171.65130615]
[-63.38106918 -158.97850037]
[-55.35610199 -146.30569458]
[-47.33113861 -133.63288879]
[-39.30617523 -120.96009064]
[-23.67355156 -125.25385284]
[-7.45895338 -124.54521942]
[7.77415848 -118.89115906]
[20.55347633 -108.82604980]
[29.64015007 -95.31116486]
[34.14887619 -79.64292908]
[33.63414383 -63.32848740]
[28.13422966 -47.94079971]
[18.16859818 -34.96694183]
[26.80572128 -22.70316887]
[33.29776001 -19.00712585]
[35.49996948 -10.03075886]
[43.83352280 2.44128513]
[52.16707611 14.91332912]
[60.50062943 27.38537407]
[68.83418274 39.85741806]
[77.16773987 52.32946014]
[85.50128937 64.80150604]
[93.83484650 77.27355194]
[107.42436981 77.65320587]
[118.53929901 85.48121643]
[123.47492981 98.14845276]
[138.02540588 101.79315948]
[149.53717041 95.82463837]
[161.63064575 99.23368835]
[167.91381836 109.64759827]
[182.37045288 113.64829254]
[196.82710266 117.64897919]
[211.28373718 121.64967346]
[217.93681335 120.32922363]
[223.39579773 122.33728027]
[226.34237671 126.21765900]
[240.58529663 130.92288208]
[254.82821655 135.62811279]
[269.07113647 140.33334351]
[283.37072754 144.86343384]
[297.72485352 149.21769714]
[312.07894897 153.57197571]
[326.43304443 157.92623901]
[343.34530640 156.73811340]
[349.16879272 172.66053772]
[335.48071289 182.66418457]
[322.07876587 172.28034973]
[307.72467041 167.92607117]
[293.37057495 163.57180786]
[279.01647949 159.21752930]
[271.62457275 160.29788208]
[264.36590576 154.57626343]
[250.12300110 149.87103271]
[235.88006592 145.16581726]
[221.63714600 140.46058655]
[207.28305054 136.10630798]
[192.82640076 132.10562134]
[178.36976624 128.10493469]
[163.91311646 124.10424042]
[147.24552917 129.44998169]
[134.38069153 116.34362793]
[119.83023071 112.69892120]
[110.84468842 120.90199280]
[98.96403503 123.52503967]
[93.56561279 137.51992798]
[88.16719055 151.51481628]
[82.76876068 165.50971985]
[77.37033844 179.50460815]
[71.97190857 193.49949646]
[66.57348633 207.49438477]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 127]
[17 126]
[18 125]
[19 124]
[20 123]
[21 122]
[22 121]
[24 80]
[25 79]
[26 78]
[27 77]
[28 76]
[29 75]
[30 74]
[31 73]
[32 71]
[33 70]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
[83 119]
[84 118]
[87 116]
[88 115]
[89 114]
[90 113]
[93 112]
[94 111]
[95 110]
[96 109]
[97 107]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
