%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGUGUGCUGAUAUUUUUGGAUCAUUUGUUUACUCGUUUUUUGAGUUUACCUUUCUUUUUUUUCUCUCAGGUAAUAGGAA\
) } def
/len { sequence length } bind def

/coor [
[77.69014740 118.22048950]
[64.00259399 124.35651398]
[54.57497787 137.06204224]
[39.79620743 135.20806885]
[26.10865402 141.34408569]
[12.42109966 147.48011780]
[6.71870279 161.97564697]
[-7.24983358 168.00347900]
[-21.03396606 162.47778320]
[-34.72151947 168.61381531]
[-48.40907288 174.74983215]
[-62.09663010 180.88586426]
[-69.12836456 195.30578613]
[-84.81727600 198.65806580]
[-97.12816620 188.37110901]
[-96.61717987 172.33618164]
[-83.67629242 162.85392761]
[-68.23265839 167.19831848]
[-54.54510498 161.06228638]
[-40.85754776 154.92625427]
[-27.16999435 148.79022217]
[-22.12428284 134.82325745]
[-8.33056641 128.40545654]
[6.28506994 133.79257202]
[19.97262383 127.65653992]
[33.66017914 121.52050781]
[42.10877228 109.25386810]
[57.86656570 110.66896057]
[71.55412292 104.53292847]
[71.50188446 90.45314026]
[78.29165649 77.44501495]
[90.84706116 68.75864410]
[106.59242249 66.84458160]
[105.44418335 51.88859177]
[104.29594421 36.93260574]
[103.14770508 21.97661781]
[101.99946594 7.02063036]
[90.80514526 -4.47139788]
[92.95330811 -20.36998177]
[106.79606628 -28.47908783]
[121.71443939 -22.57810402]
[126.26433563 -7.19376040]
[116.95545959 5.87239170]
[118.10369873 20.82837868]
[119.25193024 35.78436661]
[120.40016937 50.74035263]
[121.54840851 65.69634247]
[132.55349731 75.88889313]
[147.55349731 75.88889313]
[162.55349731 75.88889313]
[177.55349731 75.88889313]
[192.55349731 75.88889313]
[207.55349731 75.88889313]
[212.71461487 61.63622665]
[222.44155884 50.01029587]
[235.55976868 42.41499329]
[250.48513794 39.76749039]
[265.41534424 42.38748550]
[278.54751587 49.95859909]
[288.29589844 61.56658173]
[293.48327637 75.80971527]
[293.48327637 90.96807861]
[288.29589844 105.21121216]
[278.54751587 116.81919098]
[265.41534424 124.39030457]
[250.48513794 127.01029968]
[235.55976868 124.36280060]
[222.44155884 116.76749420]
[212.71461487 105.14156342]
[207.55349731 90.88889313]
[192.55349731 90.88889313]
[177.55349731 90.88889313]
[162.55349731 90.88889313]
[147.55349731 90.88889313]
[132.55349731 90.88889313]
[133.10212708 102.26465607]
[129.86276245 112.96202850]
[123.34684753 121.78125763]
[114.42444611 127.78335571]
[104.21015930 130.38940430]
[93.92475891 129.43428040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[4 26]
[5 25]
[6 24]
[9 21]
[10 20]
[11 19]
[12 18]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[48 75]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
