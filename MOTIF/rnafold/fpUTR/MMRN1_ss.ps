%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:54:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUAUCAAAAAGGCCAUAAGGAUUUUGUCCCCAAAUUUCACAUGAGCUACCUUGCUUCAAACUACUGAG\
) } def
/len { sequence length } bind def

/coor [
[130.27668762 257.12683105]
[117.92874146 255.06811523]
[106.23270416 250.59002686]
[95.65773773 243.86982727]
[86.62850952 235.17472839]
[79.50815582 224.85130310]
[74.58364105 213.31170654]
[72.05422211 201.01715088]
[72.02338409 188.45951843]
[74.49459076 176.14167786]
[79.37107849 164.55734253]
[86.45962524 154.17126465]
[95.47822571 145.40061951]
[106.06726837 138.59822083]
[100.93696594 124.50283051]
[95.80666351 110.40744781]
[90.37009430 96.42733002]
[84.62984467 82.56912994]
[78.88959503 68.71093750]
[64.56387329 62.59444046]
[58.93986130 48.45848846]
[64.85929108 34.83880234]
[59.11904144 20.98060799]
[53.37879181 7.12241507]
[40.94935989 -2.66634488]
[43.22717667 -17.38574791]
[37.48692703 -31.24394035]
[31.74667358 -45.10213470]
[26.00642204 -58.96032715]
[12.67379665 -68.50878906]
[14.54575920 -84.80074310]
[29.69659615 -91.07642365]
[42.54042435 -80.87995148]
[39.86461639 -64.70057678]
[45.60486603 -50.84238434]
[51.34511948 -36.98419189]
[57.08536911 -23.12599945]
[69.10421753 -14.32846928]
[67.23698425 1.38216376]
[72.97723389 15.24035645]
[78.71748352 29.09854889]
[92.53372955 34.54345322]
[98.55258179 48.51585770]
[92.74778748 62.97068787]
[98.48803711 76.82888031]
[104.22828674 90.68707275]
[110.15424347 96.55051422]
[109.90205383 105.27714539]
[115.03235626 119.37252808]
[120.16265869 133.46792603]
[138.17837524 131.97657776]
[155.85987854 135.66928101]
[171.74758911 144.23287964]
[184.53234863 156.95245361]
[193.16329956 172.77102661]
[196.93432617 190.37738037]
[195.54174805 208.31474304]
[189.10876465 225.10133362]
[178.17465210 239.35276794]
[187.30607605 251.25306702]
[196.43750000 263.15335083]
[212.13732910 264.96749878]
[221.89039612 277.40344238]
[219.91038513 293.08322144]
[207.37199402 302.70425415]
[191.71403503 300.55859375]
[182.22610474 287.91918945]
[184.53720093 272.28479004]
[175.40577698 260.38449097]
[166.27435303 248.48417664]
[154.94306946 253.76535034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 50]
[15 49]
[16 48]
[17 46]
[18 45]
[19 44]
[22 41]
[23 40]
[24 39]
[26 37]
[27 36]
[28 35]
[29 34]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
