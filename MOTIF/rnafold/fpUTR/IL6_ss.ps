%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCAAUAUUAGAGUCUCAACCCCCAAUAAAUAUAGGACUGGAGAUGUCUGAGGCUCAUUCUGCCCUCGAGCCCACCGGGAACGAAAGAGAAGCUCUAUCUCCCCUCCAGGAGCCCAGCU\
) } def
/len { sequence length } bind def

/coor [
[145.46374512 167.72096252]
[143.74668884 161.13671875]
[133.84440613 149.86975098]
[123.94213104 138.60276794]
[114.03984833 127.33578491]
[100.55216980 131.76779175]
[86.03139496 129.69314575]
[73.54634094 121.13026428]
[65.91873169 107.51013947]
[65.09082031 91.44971466]
[50.11071014 90.67753601]
[35.13059998 89.90534973]
[20.15048790 89.13317108]
[5.17037582 88.36099243]
[-9.81843567 87.78174591]
[-24.81346321 87.39552307]
[-39.80849075 87.00930786]
[-54.80351639 86.62308502]
[-69.79854584 86.23686981]
[-77.87212372 99.22780609]
[-91.27568817 106.38610840]
[-106.36236572 105.87765503]
[-119.08380127 97.93907928]
[-126.07648468 84.78734589]
[-141.07151794 84.40113068]
[-148.47517395 97.79682159]
[-161.26243591 106.20777893]
[-176.49490356 107.70123291]
[-190.67227173 101.93399048]
[-200.53666687 90.23133087]
[-203.82133484 75.28242493]
[-199.77146912 60.52244186]
[-189.31771851 49.34310150]
[-174.86225891 44.31334305]
[-159.72686768 46.58896255]
[-147.38954163 55.64704132]
[-140.68530273 69.40610504]
[-125.69026947 69.79232025]
[-118.02982330 57.01800537]
[-104.91658783 49.74483490]
[-89.82373810 50.01369858]
[-76.80644989 57.85250854]
[-69.41232300 71.24184418]
[-54.41729736 71.62805939]
[-39.42227173 72.01427460]
[-24.42724419 72.40049744]
[-9.43221664 72.78671265]
[-2.58354115 69.77794647]
[5.94255733 73.38088226]
[20.92266846 74.15306091]
[35.90277863 74.92523956]
[50.88289261 75.69742584]
[65.86299896 76.46960449]
[76.46960449 65.86299896]
[75.69742584 50.88289261]
[74.92523956 35.90277863]
[62.33641815 26.62616539]
[58.70597839 11.41584396]
[65.74810028 -2.54633808]
[80.13771057 -8.66786385]
[95.08047485 -4.05833721]
[103.52088165 9.10576534]
[101.47362518 24.60875702]
[89.90534973 35.13059998]
[90.67753601 50.11071014]
[91.44971466 65.09082031]
[105.59506989 67.13713074]
[116.77612305 74.25268555]
[127.78440857 64.06359100]
[138.79269409 53.87448883]
[139.56274414 38.31669998]
[150.87185669 28.14032173]
[165.69908142 28.97033119]
[176.70736694 18.78123093]
[187.71563721 8.59213066]
[195.23263550 -6.60429001]
[211.91607666 -3.58785439]
[213.63597107 13.27863121]
[197.90473938 19.60041046]
[186.89646912 29.78951073]
[175.88818359 39.97861099]
[175.57141113 54.82567215]
[164.55259705 65.31568909]
[148.98178101 64.88276672]
[137.97351074 75.07186890]
[126.96522522 85.26097107]
[130.46150208 95.94293976]
[129.88288879 107.16763306]
[125.30682373 117.43350220]
[135.20910645 128.70048523]
[145.11138916 139.96746826]
[155.01367188 151.23443604]
[165.20277405 162.24272156]
[175.67193604 172.98500061]
[186.14109802 183.72727966]
[196.61026001 194.46957397]
[210.13369751 191.47647095]
[223.25695801 195.55378723]
[232.55505371 205.52455139]
[235.65742493 218.68872070]
[231.85171509 231.55378723]
[242.04081726 242.56207275]
[252.22991943 253.57034302]
[262.41903687 264.57861328]
[278.21920776 264.93841553]
[289.07666016 276.42279053]
[288.54986572 292.21829224]
[276.95132446 302.95373535]
[261.16226196 302.25994873]
[250.55006409 290.54855347]
[251.41073608 274.76773071]
[241.22163391 263.75946045]
[231.03254700 252.75115967]
[220.84344482 241.74288940]
[204.67097473 244.22096252]
[190.04180908 236.53210449]
[182.76712036 221.50862122]
[185.86798096 204.93873596]
[175.39881897 194.19645691]
[164.92965698 183.45416260]
[154.46049500 172.71188354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[10 53]
[11 52]
[12 51]
[13 50]
[14 49]
[15 47]
[16 46]
[17 45]
[18 44]
[19 43]
[24 38]
[25 37]
[54 66]
[55 65]
[56 64]
[68 86]
[69 85]
[70 84]
[73 81]
[74 80]
[75 79]
[93 121]
[94 120]
[95 119]
[96 118]
[101 114]
[102 113]
[103 112]
[104 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
