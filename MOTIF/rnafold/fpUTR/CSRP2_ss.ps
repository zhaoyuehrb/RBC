%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCGGCGCGCGCUUCGCCUGGGAUCUCGGACUCCCUGGACCCUCCCUCCAGCCCAGCCUCGCUAGCUCCGCCUGCGGUACGUGCUCCCGCCUCCGACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[100.74124146 320.39569092]
[96.82730103 305.76831055]
[97.87741089 290.66281128]
[103.77767181 276.71771240]
[113.88805389 265.44567871]
[127.11187744 258.06942749]
[124.43352509 243.31047058]
[121.75516510 228.55152893]
[119.07681274 213.79258728]
[105.47343445 200.18865967]
[112.11325073 181.27159119]
[108.55704498 166.69924927]
[105.00083923 152.12689209]
[101.44463348 137.55455017]
[88.05544281 135.63366699]
[76.21350098 129.09696960]
[67.45275116 118.79116058]
[62.90803909 106.05123138]
[63.16805649 92.52745819]
[68.19912720 79.97164154]
[57.35720062 69.60569763]
[46.51527786 59.23975754]
[35.67335510 48.87382126]
[24.83143425 38.50788116]
[26.49025536 53.41587448]
[21.67888641 67.62329102]
[11.30302143 78.45571899]
[-2.68417835 83.87404633]
[-17.64974976 82.85832214]
[-30.77655983 75.59974670]
[-39.59360886 63.46469116]
[-42.44116211 48.73745728]
[-38.78320312 34.19031525]
[-29.30830193 22.56163216]
[-15.80002403 16.04040146]
[-0.80118042 15.85418606]
[12.86606121 22.03895760]
[6.35780525 8.52442455]
[-0.15045081 -4.99010801]
[-6.65870667 -18.50464058]
[-13.16696262 -32.01917267]
[-28.36462212 -35.70227051]
[-37.59758377 -48.32314301]
[-36.50632477 -63.92260361]
[-25.60610771 -75.13506317]
[-10.04367924 -76.66634369]
[2.83285785 -67.79341888]
[6.94359589 -52.70581055]
[0.34757003 -38.52743149]
[6.85582590 -25.01289749]
[13.36408234 -11.49836445]
[19.87233734 2.01616883]
[26.38059425 15.53070164]
[35.19737244 27.66595650]
[46.03929520 38.03189468]
[56.88121796 48.39783478]
[67.72314453 58.76377487]
[78.56506348 69.12971497]
[95.40682983 62.69941330]
[113.30545807 64.85180664]
[128.14256287 75.09162903]
[141.13294983 67.59162903]
[154.12332153 60.09162903]
[167.11370850 52.59162903]
[171.30799866 37.59010696]
[184.58892822 30.16909218]
[198.86474609 34.26015854]
[211.85513306 26.76015854]
[222.54904175 13.60430908]
[238.15113831 20.23840523]
[236.09538269 37.06725693]
[219.35513306 39.75054169]
[206.36474609 47.25054169]
[202.76980591 61.65928650]
[189.70256042 69.45040894]
[174.61370850 65.58200836]
[161.62332153 73.08200836]
[148.63294983 80.58200836]
[135.64256287 88.08200836]
[137.55133057 101.52600861]
[134.55798340 114.77079010]
[127.05330658 126.08734131]
[116.01698303 133.99833679]
[119.57318878 148.57069397]
[123.12939453 163.14303589]
[126.68560028 177.71539307]
[136.46612549 182.92944336]
[141.57450867 192.51513672]
[140.49342346 203.10032654]
[133.83575439 211.11424255]
[136.51411438 225.87318420]
[139.19245911 240.63212585]
[141.87081909 255.39106750]
[156.84326172 257.65048218]
[170.26966858 264.65121460]
[180.69364929 275.63388062]
[186.98448181 289.40719604]
[188.45980835 304.47711182]
[184.95956421 319.20895386]
[176.86346436 332.00469971]
[165.04968262 341.47640991]
[150.79969788 346.59664917]
[135.65924072 346.80999756]
[121.27065277 342.09332275]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 93]
[7 92]
[8 91]
[9 90]
[11 86]
[12 85]
[13 84]
[14 83]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 49]
[61 79]
[62 78]
[63 77]
[64 76]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
