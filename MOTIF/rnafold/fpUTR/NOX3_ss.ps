%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGACAAAAUAAUUUACUAGGGAAGCCCUUACUAACGACCCAACAUCCAGACACAGGUGAGGGAGAAGAAAUUUCCUGACAGCCGAAGAGCAACAAGUAUC\
) } def
/len { sequence length } bind def

/coor [
[3.40656519 220.63348389]
[-9.92420864 213.75668335]
[-21.72893906 204.50202942]
[-31.58879852 193.19792175]
[-39.15396500 180.24537659]
[-44.15602875 166.10397339]
[-46.41752243 151.27543640]
[-45.85820389 136.28585815]
[-42.49792099 121.66709137]
[-36.45589066 107.93778229]
[-27.94648743 95.58504486]
[-17.27161789 85.04715729]
[-4.81002092 76.69799042]
[8.99617004 70.83376312]
[23.65711784 67.66255188]
[38.65266037 67.29685974]
[53.45075989 69.74965668]
[67.52639008 74.93392944]
[80.38014984 82.66574097]
[91.55483246 92.66950226]
[89.74678040 77.77886963]
[87.93872833 62.88823700]
[86.13068390 47.99760437]
[84.32263184 33.10696793]
[82.51457977 18.21633720]
[80.70652771 3.32570314]
[63.52858353 -14.10750961]
[71.67328644 -36.48133469]
[66.78024292 -50.66083145]
[61.88720322 -64.84033203]
[56.99416351 -79.01982880]
[52.10112000 -93.19932556]
[47.20808029 -107.37882233]
[42.31503677 -121.55831909]
[37.42199326 -135.73780823]
[22.37172890 -134.66453552]
[7.55668879 -137.52407837]
[-6.01301336 -144.12147522]
[-17.41217041 -154.00689697]
[-25.86357307 -166.50634766]
[-30.79098511 -180.76759338]
[-31.85845184 -195.81826782]
[-28.99318886 -210.63220215]
[-22.39055634 -224.19935608]
[-12.50073147 -235.59469604]
[0.00198045 -244.04127502]
[14.26512337 -248.96318054]
[29.31621361 -250.02482605]
[44.12903976 -247.15385437]
[57.69364548 -240.54597473]
[69.08516693 -230.65174866]
[77.52690887 -218.14578247]
[82.44331360 -203.88073730]
[83.49915314 -188.82923889]
[80.62245178 -174.01751709]
[74.00934601 -160.45547485]
[64.11072540 -149.06777954]
[51.60149384 -140.63085938]
[56.49453354 -126.45136261]
[61.38757706 -112.27186584]
[66.28061676 -98.09236145]
[71.17366028 -83.91286469]
[76.06670380 -69.73336792]
[80.95973969 -55.55387497]
[85.85278320 -41.37437439]
[92.31855774 -40.43898392]
[98.26325226 -37.63209915]
[103.15447235 -33.17856216]
[106.54647064 -27.45179367]
[108.12067413 -20.94255447]
[107.71549225 -14.21691036]
[105.34256744 -7.86701202]
[101.18783569 -2.45895982]
[95.59716034 1.51765299]
[97.40521240 16.40828705]
[99.21326447 31.29891968]
[101.02131653 46.18955231]
[102.82936096 61.08018494]
[104.63741302 75.97081757]
[106.44546509 90.86145020]
[118.58493042 82.05046844]
[131.85177612 89.04979706]
[131.43214417 104.04392242]
[117.79342651 110.29013824]
[129.87518311 119.18006897]
[145.45988464 116.55460358]
[158.28778076 125.78610229]
[160.74832153 141.39767456]
[151.38171387 154.12725830]
[135.74501038 156.42260742]
[123.11516571 146.92195129]
[120.98526001 131.26184082]
[108.90348816 122.37190247]
[112.12752533 137.02133179]
[112.54725647 152.01545715]
[110.14780426 166.82229614]
[105.01429749 180.91651917]
[97.32886505 193.79806519]
[87.36418915 205.00988770]
[75.47380829 214.15422058]
[62.07958603 220.90661621]
[47.65674591 225.02751160]
[32.71700287 226.37066650]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 80]
[21 79]
[22 78]
[23 77]
[24 76]
[25 75]
[26 74]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
