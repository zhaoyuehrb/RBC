%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGAGGGGGCGGGAAAUCCUCGGCCUCGGUGGCGGUGGUGGACACGUCGAGCCGGGUAGAAGUGGAGGGGCCGUUCGAAGAGUCGUGAGGGGGUGACGGGUUAAGAUUCGGAGAGAGAGGUGCUAGUGGCUGGACUUGACCUGGAAAGAAUCUUCUGCUGACUCUCAACUUUUCCUGGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[71.08370972 276.62026978]
[76.61042786 262.21682739]
[89.06038666 253.10627747]
[88.05315399 238.14013672]
[87.04591370 223.17399597]
[86.03867340 208.20785522]
[85.03143311 193.24169922]
[84.02419281 178.27555847]
[83.01695251 163.30941772]
[82.00971222 148.34327698]
[81.00247955 133.37712097]
[69.66623688 123.55421448]
[54.70907593 124.68713379]
[39.75192261 125.82005310]
[24.79476738 126.95297241]
[20.06197166 136.55517578]
[11.82591152 143.26667786]
[1.62245226 145.92268372]
[-8.68134880 144.10670471]
[-17.22884750 138.21427917]
[-22.50834656 129.36924744]
[-37.50358200 129.74720764]
[-52.49882126 130.12516785]
[-67.49405670 130.50312805]
[-81.09488678 138.58570862]
[-94.01307678 131.17155457]
[-109.00831604 131.54951477]
[-123.97446442 132.55674744]
[-138.88511658 134.19149780]
[-153.79577637 135.82623291]
[-168.70642090 137.46098328]
[-183.61708069 139.09571838]
[-198.52774048 140.73046875]
[-213.40882874 142.61546326]
[-228.25614929 144.75018311]
[-243.10346985 146.88490295]
[-257.95077515 149.01962280]
[-272.77966309 151.27899170]
[-287.58901978 153.66284180]
[-298.11370850 165.77110291]
[-314.13565063 164.94801331]
[-323.36413574 151.82496643]
[-318.71990967 136.46884155]
[-303.76559448 130.65954590]
[-289.97286987 138.85346985]
[-275.16348267 136.46961975]
[-269.04653931 132.29380798]
[-260.08551025 134.17230225]
[-245.23818970 132.03758240]
[-230.39086914 129.90286255]
[-215.54354858 127.76814270]
[-212.00463867 124.53288269]
[-206.38954163 123.49982452]
[-200.16247559 125.81980896]
[-185.25181580 124.18506622]
[-170.34117126 122.55032349]
[-155.43051147 120.91558075]
[-140.51985168 119.28083801]
[-125.60920715 117.64609528]
[-135.40556335 106.28688812]
[-132.80223083 91.51452637]
[-119.71297455 84.18844604]
[-105.75995636 89.69418335]
[-101.20028687 103.98436737]
[-109.38627625 116.55427551]
[-94.39103699 116.17631531]
[-81.86277008 108.12078094]
[-67.87201691 115.50789642]
[-52.87678146 115.12993622]
[-37.88154221 114.75197601]
[-22.88630486 114.37401581]
[-10.56400490 99.30781555]
[9.16763401 98.10988617]
[23.66184998 111.99581146]
[38.61900330 110.86289215]
[53.57616043 109.72998047]
[68.53331757 108.59706116]
[69.51364899 92.00733185]
[78.36814117 78.62158966]
[92.23331451 71.73765564]
[107.11278534 72.70471954]
[119.02319336 80.69406891]
[132.09675598 73.34002686]
[145.17031860 65.98598480]
[158.24388123 58.63194656]
[171.31744385 51.27790451]
[184.39102173 43.92386627]
[197.46458435 36.56982422]
[201.82661438 21.61621857]
[215.18983459 14.34441280]
[229.41893005 18.59510803]
[242.49249268 11.24106693]
[255.56605530 3.88702631]
[268.63961792 -3.46701455]
[281.71319580 -10.82105541]
[294.78674316 -18.17509651]
[307.86032104 -25.52913666]
[312.16787720 -46.09075165]
[329.97412109 -56.67656326]
[349.53469849 -50.80616760]
[362.08493042 -59.02149200]
[374.63516235 -67.23681641]
[387.18539429 -75.45213318]
[399.73565674 -83.66745758]
[412.28588867 -91.88278198]
[424.83612061 -100.09810638]
[437.38635254 -108.31342316]
[449.93658447 -116.52874756]
[455.41732788 -123.86293793]
[462.76739502 -124.77459717]
[475.45388794 -132.77792358]
[488.14035034 -140.78126526]
[500.82684326 -148.78459167]
[513.51330566 -156.78791809]
[512.69219971 -173.29219055]
[520.25750732 -187.87777710]
[534.06323242 -196.61276245]
[550.29595947 -197.19627380]
[564.52783203 -189.56372070]
[577.07806396 -197.77905273]
[581.75079346 -213.12652588]
[596.71588135 -218.90806580]
[610.49334717 -210.68855286]
[612.51434326 -194.77331543]
[601.22851562 -183.37113953]
[585.29339600 -185.22880554]
[572.74316406 -177.01348877]
[574.40411377 -163.44651794]
[570.03234863 -150.42639160]
[560.42810059 -140.51588440]
[547.42749023 -135.69155884]
[533.55133057 -136.94975281]
[521.51666260 -144.10144043]
[508.83016968 -136.09811401]
[496.14367676 -128.09478760]
[483.45721436 -120.09145355]
[470.77072144 -112.08811951]
[458.15191650 -103.97850800]
[445.60168457 -95.76319122]
[433.05145264 -87.54786682]
[420.50122070 -79.33254242]
[407.95095825 -71.11721802]
[395.40072632 -62.90189743]
[382.85049438 -54.68657303]
[370.30026245 -46.47125244]
[357.75003052 -38.25592804]
[358.75244141 -28.90846252]
[356.25500488 -19.78505898]
[350.56216431 -12.15841961]
[342.42712402 -7.10843277]
[332.95236206 -5.36935759]
[323.44033813 -7.22332525]
[315.21435547 -12.45557213]
[302.14080811 -5.10153151]
[289.06723022 2.25250912]
[275.99365234 9.60655022]
[262.92010498 16.96059036]
[249.84654236 24.31463051]
[236.77297974 31.66867256]
[233.01689148 46.03625488]
[219.86318970 53.68053436]
[204.81861877 49.64338684]
[191.74505615 56.99742889]
[178.67149353 64.35147095]
[165.59793091 71.70551300]
[152.52436829 79.05955505]
[139.45080566 86.41358948]
[126.37723541 93.76763153]
[127.59958649 107.03726959]
[122.22553253 119.94364929]
[110.94033813 129.26260376]
[95.96862030 132.36988831]
[96.97586060 147.33602905]
[97.98310089 162.30216980]
[98.99034119 177.26832581]
[99.99757385 192.23446655]
[101.00481415 207.20060730]
[102.01205444 222.16674805]
[103.01929474 237.13290405]
[104.02653503 252.09904480]
[117.58499146 259.45919800]
[124.99186707 272.99218750]
[123.88364410 288.37966919]
[114.61395264 300.71160889]
[100.14072418 306.05288696]
[85.08231354 302.69912720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 180]
[4 179]
[5 178]
[6 177]
[7 176]
[8 175]
[9 174]
[10 173]
[11 172]
[12 77]
[13 76]
[14 75]
[15 74]
[21 71]
[22 70]
[23 69]
[24 68]
[26 66]
[27 65]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[33 54]
[34 51]
[35 50]
[36 49]
[37 48]
[38 46]
[39 45]
[82 168]
[83 167]
[84 166]
[85 165]
[86 164]
[87 163]
[88 162]
[91 159]
[92 158]
[93 157]
[94 156]
[95 155]
[96 154]
[97 153]
[100 146]
[101 145]
[102 144]
[103 143]
[104 142]
[105 141]
[106 140]
[107 139]
[108 138]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
