%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCAGGCCCAGAAGCUGGGCAGCCUCUGCCGGGUUCCGGGAAAAGGAGCUCCUGCUGCCACUGCUCUUCCGGAGCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[101.84280396 111.36283875]
[97.66796875 112.22801208]
[93.14472198 111.49681091]
[79.56300354 117.86366272]
[65.98127747 124.23051453]
[52.39955521 130.59736633]
[47.19606400 142.56752014]
[35.56263733 147.53146362]
[24.07851601 143.28462219]
[10.27332401 149.15118408]
[-3.53186893 155.01776123]
[-17.33706093 160.88433838]
[-31.14225388 166.75090027]
[-44.94744873 172.61747742]
[-57.16017914 184.37695312]
[-71.84091949 175.89685059]
[-67.75625610 159.44232178]
[-50.81401825 158.81228638]
[-37.00882339 152.94570923]
[-23.20363235 147.07913208]
[-9.39843941 141.21257019]
[4.40675306 135.34599304]
[18.21194649 129.47943115]
[27.84779358 114.93468475]
[46.03270340 117.01564026]
[59.61442566 110.64878845]
[73.19615173 104.28193665]
[86.77787018 97.91508484]
[99.85861206 90.57382202]
[112.36858368 82.29730225]
[124.87854767 74.02079010]
[137.38851929 65.74427032]
[142.98368835 58.21909332]
[150.50996399 57.40369034]
[163.31387329 49.58958435]
[176.11776733 41.77547836]
[188.92166138 33.96137619]
[201.72555542 26.14727020]
[214.52944946 18.33316422]
[227.33334351 10.51905918]
[240.13725281 2.70495439]
[252.94114685 -5.10915089]
[265.74502563 -12.92325592]
[267.89208984 -17.33080101]
[271.09744263 -20.37376022]
[274.74261475 -21.88130951]
[278.22290039 -21.92387390]
[281.03271484 -20.78318787]
[294.83789062 -26.64975739]
[308.64309692 -32.51632690]
[322.44827271 -38.38290024]
[336.25347900 -44.24946976]
[336.47088623 -59.47683334]
[342.86889648 -73.29656982]
[354.33908081 -83.31432343]
[368.89407349 -87.79446411]
[384.01220703 -85.96076965]
[397.07412720 -78.13095093]
[405.81677246 -65.66156006]
[408.72546387 -50.71300507]
[405.29626465 -35.87520599]
[396.12322998 -23.71890259]
[382.79571533 -16.35025024]
[367.62277222 -15.04590988]
[353.23318481 -20.03186798]
[342.12005615 -30.44427681]
[328.31484985 -24.57770729]
[314.50967407 -18.71113586]
[300.70446777 -12.84456539]
[286.89926147 -6.97799444]
[273.55914307 -0.11935953]
[260.75524902 7.69474554]
[247.95135498 15.50885105]
[235.14746094 23.32295609]
[222.34355164 31.13706017]
[209.53965759 38.95116425]
[196.73576355 46.76527023]
[183.93186951 54.57937622]
[171.12797546 62.39348221]
[158.32408142 70.20758820]
[145.66503906 78.25424194]
[133.15505981 86.53075409]
[120.64509583 94.80727386]
[108.13513184 103.08378601]
[107.29859161 106.29319763]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 28]
[4 27]
[5 26]
[6 25]
[9 23]
[10 22]
[11 21]
[12 20]
[13 19]
[14 18]
[29 84]
[30 83]
[31 82]
[32 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 72]
[43 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
