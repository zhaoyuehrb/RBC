%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:41 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DWORF)
} def

/sequence { (\
AAAGAGACGCUGGAUAACAAAAGAAAGAGGUAAGCGUGGCCUGACCUAGCCACCCACCAACAGGAAUA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
3 11 0.126405709 ubox
3 42 0.016482507 ubox
4 10 0.131427974 ubox
4 41 0.016889878 ubox
5 11 0.062114323 ubox
5 42 0.007481473 ubox
6 10 0.062950445 ubox
6 41 0.007670328 ubox
7 31 0.100274609 ubox
7 37 0.501670402 ubox
8 30 0.103311910 ubox
8 36 0.552628470 ubox
9 31 0.062951158 ubox
9 35 0.736410040 ubox
9 50 0.077358946 ubox
10 23 0.138721202 ubox
10 27 0.115687397 ubox
10 29 0.082380689 ubox
10 30 0.064733290 ubox
10 34 0.736716697 ubox
10 49 0.077525987 ubox
10 63 0.200337011 ubox
10 64 0.022844676 ubox
11 19 0.304533553 ubox
11 22 0.135690226 ubox
11 26 0.114895642 ubox
11 28 0.082361273 ubox
11 29 0.063001816 ubox
11 32 0.062871277 ubox
11 33 0.727214726 ubox
11 48 0.077215700 ubox
11 52 0.013473569 ubox
11 56 0.056280775 ubox
11 59 0.036381185 ubox
11 62 0.200936912 ubox
11 63 0.018868323 ubox
12 18 0.335925291 ubox
12 31 0.086842245 ubox
12 35 0.015527664 ubox
12 46 0.023774385 ubox
12 47 0.072721788 ubox
12 51 0.015331240 ubox
12 55 0.064059155 ubox
12 58 0.039699133 ubox
12 61 0.200645452 ubox
13 45 0.024003995 ubox
13 46 0.072078395 ubox
13 50 0.015319114 ubox
13 54 0.063980879 ubox
13 57 0.039650058 ubox
14 31 0.180616589 ubox
14 67 0.006079982 ubox
15 30 0.182567926 ubox
15 32 0.057248006 ubox
15 43 0.007200366 ubox
15 48 0.003998621 ubox
15 66 0.006024561 ubox
15 68 0.003882022 ubox
16 31 0.047624499 ubox
16 42 0.004100989 ubox
16 47 0.003359505 ubox
16 67 0.004147780 ubox
17 31 0.084207518 ubox
18 30 0.096384291 ubox
18 43 0.011541332 ubox
19 42 0.008227120 ubox
22 47 0.008994323 ubox
23 46 0.009650394 ubox
26 47 0.003421912 ubox
27 46 0.003587592 ubox
28 42 0.076988540 ubox
28 47 0.029583096 ubox
29 41 0.078188656 ubox
29 46 0.030730372 ubox
29 51 0.038344667 ubox
29 54 0.055567264 ubox
29 55 0.143489018 ubox
29 58 0.591821425 ubox
30 40 0.078187357 ubox
30 45 0.030898775 ubox
30 50 0.038379291 ubox
30 53 0.055711939 ubox
30 54 0.143539921 ubox
30 57 0.592450074 ubox
30 61 0.024069780 ubox
30 67 0.007361446 ubox
31 38 0.009653432 ubox
31 39 0.076814048 ubox
31 43 0.007479543 ubox
31 44 0.028514468 ubox
31 49 0.038030802 ubox
31 52 0.053879504 ubox
31 56 0.577102659 ubox
31 60 0.023391883 ubox
31 66 0.007333799 ubox
32 37 0.012133752 ubox
32 42 0.010183502 ubox
32 67 0.003258168 ubox
33 42 0.023364385 ubox
33 47 0.037226880 ubox
34 40 0.019953454 ubox
34 41 0.022965276 ubox
34 46 0.038211841 ubox
34 50 0.064251302 ubox
35 39 0.021676741 ubox
35 49 0.064330714 ubox
36 45 0.038445019 ubox
36 53 0.822621611 ubox
36 57 0.010358090 ubox
37 44 0.038211237 ubox
37 48 0.009249680 ubox
37 52 0.848911534 ubox
37 56 0.011623816 ubox
37 68 0.003195758 ubox
38 46 0.067673120 ubox
38 47 0.010146597 ubox
38 51 0.986831446 ubox
38 54 0.011667541 ubox
38 55 0.017516213 ubox
38 58 0.006935577 ubox
38 67 0.010245116 ubox
39 45 0.067515353 ubox
39 46 0.010147182 ubox
39 50 0.987100039 ubox
39 53 0.011727048 ubox
39 54 0.017349652 ubox
39 57 0.006908564 ubox
40 49 0.964484020 ubox
40 64 0.102940179 ubox
41 49 0.208494227 ubox
41 63 0.103273207 ubox
42 48 0.291684144 ubox
42 52 0.015671657 ubox
42 56 0.004028476 ubox
42 62 0.103200618 ubox
43 47 0.244214428 ubox
43 51 0.016425488 ubox
43 55 0.004490269 ubox
43 61 0.102815170 ubox
45 64 0.012643305 ubox
46 63 0.012698163 ubox
47 62 0.012176423 ubox
50 64 0.012534581 ubox
51 63 0.012712821 ubox
53 64 0.224848148 ubox
54 63 0.226713155 ubox
54 64 0.459314349 ubox
55 63 0.460259359 ubox
57 64 0.477363820 ubox
58 63 0.478848058 ubox
29 58 0.9500000 lbox
30 57 0.9500000 lbox
31 56 0.9500000 lbox
36 53 0.9500000 lbox
37 52 0.9500000 lbox
38 51 0.9500000 lbox
39 50 0.9500000 lbox
40 49 0.9500000 lbox
showpage
end
%%EOF
