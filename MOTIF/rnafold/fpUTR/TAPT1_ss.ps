%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCGAGGCGGGGAGGGGGCCGGCCGGAGGCAGAGGCUGGAGGGAGGCGGCGGGGACAGUUUGUUGUGCUCGGAAC\
) } def
/len { sequence length } bind def

/coor [
[135.12164307 320.48934937]
[132.26577759 305.76373291]
[129.40991211 291.03811646]
[126.55404663 276.31250000]
[123.69818115 261.58685303]
[113.67925262 250.56550598]
[118.64759064 235.54464722]
[115.79172516 220.81903076]
[112.93585968 206.09339905]
[110.07999420 191.36778259]
[107.22412872 176.64215088]
[104.36825562 161.91653442]
[89.42675018 161.16325378]
[75.09946442 156.85685730]
[62.21872330 149.24746704]
[51.53280258 138.77716064]
[43.66247177 126.05419159]
[39.06494522 111.81765747]
[38.00730133 96.89459991]
[40.55098724 82.15194702]
[46.54822922 68.44613647]
[55.65063095 56.57337570]
[67.32941437 47.22338867]
[80.90611267 40.93933868]
[78.05024719 26.21371460]
[75.19438171 11.48808956]
[62.37946320 2.63283491]
[59.69297791 -12.34172535]
[68.21408844 -24.50422287]
[65.35821533 -39.22984695]
[51.45566559 -45.86499786]
[44.21055984 -59.25760269]
[46.21700668 -74.17195892]
[56.49783707 -84.91638184]
[53.64197159 -99.64200592]
[50.78610611 -114.36763000]
[39.62990570 -126.38725281]
[44.71902084 -141.97676086]
[60.81819916 -145.09901428]
[71.36598969 -132.54209900]
[65.51172638 -117.22349548]
[68.36759186 -102.49787140]
[71.22346497 -87.77224731]
[84.77540588 -81.64992523]
[92.21163177 -68.56686401]
[90.49816132 -53.43684387]
[80.08384705 -42.08571243]
[82.93971252 -27.36009026]
[95.38960266 -19.26467896]
[98.49563599 -4.37148380]
[89.92000580 8.63222313]
[92.77587128 23.35784721]
[95.63174438 38.08347321]
[110.57324982 38.83673859]
[124.90053558 43.14315033]
[137.78128052 50.75252914]
[148.46719360 61.22283173]
[156.33752441 73.94580841]
[160.93505859 88.18234253]
[161.99269104 103.10540009]
[159.44900513 117.84805298]
[153.45176697 131.55386353]
[144.34936523 143.42662048]
[132.67059326 152.77661133]
[119.09388733 159.06065369]
[121.94975281 173.78628540]
[124.80561829 188.51191711]
[127.66148376 203.23753357]
[130.51734924 217.96316528]
[133.37321472 232.68878174]
[143.59642029 244.76341248]
[138.42381287 258.73098755]
[141.27967834 273.45663452]
[144.13554382 288.18225098]
[146.99140930 302.90786743]
[149.84727478 317.63348389]
[163.08445740 326.26788330]
[166.25730896 341.75039673]
[157.48345947 354.89556885]
[141.96826172 357.90454102]
[128.91661072 348.99221802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[4 73]
[5 72]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[24 53]
[25 52]
[26 51]
[29 48]
[30 47]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
