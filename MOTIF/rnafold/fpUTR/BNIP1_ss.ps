%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAGGGGGCGCUGCCCCGAGACUGGGUGGGGAGGGAAAGAAGGUGGUGCGAAAACGCGUUUGAACUUGGGUCCUGCCGCUGCCCGUAGCCGGCGUCCCCAAC\
) } def
/len { sequence length } bind def

/coor [
[58.46578979 459.78610229]
[43.95364380 454.55148315]
[34.59344482 442.28811646]
[33.37200165 426.90917969]
[40.67906952 413.32205200]
[54.18299103 405.86230469]
[55.08005524 390.88916016]
[55.97711563 375.91601562]
[56.87417984 360.94287109]
[57.77124023 345.96969604]
[58.66830444 330.99655151]
[59.56536484 316.02340698]
[60.46242905 301.05026245]
[61.35948944 286.07708740]
[62.25655365 271.10394287]
[52.70453262 266.27368164]
[45.34047699 258.45230103]
[41.06303787 248.55583191]
[40.40724945 237.75569153]
[43.47773743 227.34008789]
[49.93309402 218.56036377]
[59.02362823 212.48065186]
[69.67835999 209.84892273]
[72.35671234 195.08998108]
[70.42252350 187.82803345]
[75.34228516 179.93243408]
[78.46096039 165.26020813]
[81.57963562 150.58799744]
[84.69831085 135.91578674]
[87.81698608 121.24356842]
[90.93566132 106.57135773]
[93.83449554 91.85413361]
[96.51285553 77.09518433]
[91.36401367 62.13524246]
[101.24951172 50.99404907]
[103.92786407 36.23510742]
[106.60621643 21.47616196]
[109.28456879 6.71721840]
[98.73432922 -4.50769424]
[96.83880615 -19.61598206]
[104.11697388 -32.78763199]
[117.59421539 -39.07268906]
[120.27256775 -53.83163071]
[122.95092010 -68.59057617]
[111.56866455 -83.57199860]
[114.53117371 -101.83325958]
[129.54605103 -112.09254456]
[131.33697510 -126.98525238]
[133.12788391 -141.87796021]
[134.91879272 -156.77066040]
[136.70971680 -171.66336060]
[138.50062561 -186.55606079]
[131.56130981 -201.41467285]
[141.18003845 -214.69668579]
[157.46188354 -212.73872375]
[163.65748596 -197.55496216]
[153.39332581 -184.76515198]
[151.60241699 -169.87245178]
[149.81150818 -154.97975159]
[148.02058411 -140.08703613]
[146.22967529 -125.19433594]
[144.43876648 -110.30163574]
[153.39341736 -102.92768860]
[157.64976501 -92.00685120]
[156.01335144 -80.27856445]
[148.78417969 -70.74715424]
[137.70986938 -65.91222382]
[135.03150940 -51.15327835]
[132.35316467 -36.39433289]
[142.76261902 -25.77448273]
[144.94850159 -10.88536167]
[137.86517334 2.59350538]
[124.04351807 9.39557171]
[121.36515808 24.15451622]
[118.68680573 38.91345978]
[116.00845337 53.67240143]
[121.34886932 67.57669067]
[111.27179718 79.77353668]
[108.59344482 94.53248596]
[110.38473511 102.53869629]
[105.60787201 109.69003296]
[102.48919678 124.36224365]
[99.37052155 139.03445435]
[96.25184631 153.70668030]
[93.13317108 168.37889099]
[90.01449585 183.05110168]
[87.11566162 197.76832581]
[84.43730927 212.52726746]
[98.97521973 225.95227051]
[102.69311523 245.24584961]
[94.30529022 262.85922241]
[77.22970581 272.00100708]
[76.33264160 286.97415161]
[75.43557739 301.94732666]
[74.53852081 316.92047119]
[73.64145660 331.89361572]
[72.74439240 346.86676025]
[71.84732819 361.83990479]
[70.95027161 376.81307983]
[70.05320740 391.78622437]
[69.15614319 406.75936890]
[81.67282104 415.77804565]
[87.30539703 430.14041138]
[84.25653076 445.26348877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[15 92]
[23 88]
[24 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 79]
[33 78]
[35 76]
[36 75]
[37 74]
[38 73]
[42 69]
[43 68]
[44 67]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
