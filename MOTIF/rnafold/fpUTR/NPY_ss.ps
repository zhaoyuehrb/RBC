%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:01:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACCCCAUCCGCUGGCUCUCACCCCUCGGAGACGCUCGCCCGACAGCAUAGUACUUGCCGCCCAGCCACGCCCGCGCGCCAGCCACC\
) } def
/len { sequence length } bind def

/coor [
[87.99488068 284.27465820]
[74.35515594 290.88778687]
[59.27585983 292.43395996]
[44.57789230 288.72647095]
[32.03610611 280.21298218]
[23.16498184 267.92156982]
[19.03575134 253.33645630]
[20.14703941 238.21888733]
[26.36465073 224.39437866]
[36.93778229 213.53230286]
[50.58967209 206.94430542]
[65.67179108 205.42593384]
[69.34056091 190.88151550]
[73.00933838 176.33709717]
[76.67810822 161.79267883]
[80.34688568 147.24826050]
[84.01565552 132.70384216]
[78.28996277 129.21838379]
[73.30045319 124.74215698]
[69.21631622 119.42691040]
[66.17605591 113.45291138]
[64.28275299 107.02272034]
[63.60062408 100.35439301]
[64.15279388 93.67404175]
[65.92053223 87.20821381]
[68.84390259 81.17614746]
[72.82376862 75.78239441]
[63.92153931 63.70968246]
[55.01930618 51.63697433]
[46.11707687 39.56426620]
[29.13666534 32.71443558]
[27.61699104 15.32780361]
[18.29424286 3.57678819]
[3.71325111 -5.07370424]
[7.98925877 -21.47955894]
[24.93768311 -21.91225243]
[30.04525757 -5.74596024]
[39.36800766 6.00505543]
[51.47739792 7.75956392]
[59.32491684 17.66801834]
[58.18978500 30.66203499]
[67.09201813 42.73474503]
[75.99424744 54.80745316]
[84.89647675 66.88016510]
[97.23655701 61.93814850]
[111.14418030 61.66397095]
[124.83583069 66.52268982]
[133.30644226 54.14332962]
[141.77706909 41.76396942]
[137.39312744 26.75347137]
[143.73066711 12.45768929]
[157.79733276 5.62664986]
[172.95124817 9.48576260]
[182.03721619 22.21287346]
[180.76510620 37.79862595]
[169.73558044 48.88391113]
[154.15643311 50.23458862]
[145.68580627 62.61394882]
[137.21519470 74.99330902]
[143.38066101 88.66762543]
[158.26632690 90.51610565]
[173.15200806 92.36457825]
[182.86674500 82.84410858]
[196.10975647 80.75946045]
[207.92883301 86.66004181]
[214.03721619 98.15161133]
[228.84837341 100.52426910]
[245.44448853 97.05944061]
[253.36817932 112.04782104]
[241.15904236 123.81104279]
[226.47570801 115.33542633]
[211.66455078 112.96276855]
[198.59567261 123.38582611]
[181.68582153 121.19570160]
[171.30352783 107.25024414]
[156.41786194 105.40177155]
[141.53219604 103.55329895]
[125.83023834 129.27655029]
[98.56007385 136.37260437]
[94.89130402 150.91702271]
[91.22252655 165.46144104]
[87.55375671 180.00585938]
[83.88497925 194.55027771]
[80.21620941 209.09469604]
[92.77366638 217.58505249]
[101.66742706 229.86010742]
[105.82352448 244.43757629]
[104.74009705 259.55715942]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[27 44]
[28 43]
[29 42]
[30 41]
[32 38]
[33 37]
[47 59]
[48 58]
[49 57]
[60 77]
[61 76]
[62 75]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
