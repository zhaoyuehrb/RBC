%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAGACGGAAAUGGGCGGGGCUGCGAGCUAGGGCGGGAGAAGGAGCGCGGGGAGGACGUACCUUGUGAG\
) } def
/len { sequence length } bind def

/coor [
[36.23275757 302.28738403]
[25.87532997 313.29714966]
[12.73204517 320.76342773]
[-2.02840710 324.02233887]
[-17.09353638 322.78408813]
[-31.12376213 317.15875244]
[-42.87152481 307.64660645]
[-51.29222488 295.09338379]
[-55.63709641 280.61535645]
[-55.51979828 265.49987793]
[-50.95075607 251.09100342]
[-42.33625412 238.66998291]
[-30.44227791 229.34127808]
[-16.32644081 223.93438721]
[-1.24390781 222.93008423]
[13.46418953 226.41766357]
[21.05978394 213.48294067]
[28.65537834 200.54823303]
[36.25097275 187.61351013]
[43.84656906 174.67878723]
[51.44216156 161.74406433]
[52.13374710 154.14028931]
[59.67068100 148.41583252]
[67.83098602 135.82975769]
[75.99129486 123.24367523]
[84.15159607 110.65760040]
[81.23133087 96.46540833]
[89.11392975 84.30765533]
[103.26232147 81.18209839]
[111.42263031 68.59601593]
[105.13256073 53.06170273]
[109.18577576 36.96895981]
[121.83113861 26.47712708]
[138.06781006 25.48361397]
[145.66339111 12.54889584]
[153.25898743 -0.38582265]
[145.60816956 -13.70349693]
[145.65724182 -29.06231117]
[153.39302063 -42.33082199]
[166.73460388 -49.93986511]
[182.09320068 -49.84264755]
[195.33738708 -42.06531906]
[202.90457153 -28.69994164]
[202.75921631 -13.34173775]
[194.94041443 -0.12198446]
[181.55139160 7.40327072]
[166.19371033 7.20977163]
[158.59811401 20.14449120]
[151.00251770 33.07920837]
[157.50749207 44.93925476]
[157.21838379 58.57233429]
[150.10333252 70.33300781]
[137.97024536 77.02201843]
[124.00870514 76.75632477]
[115.84840393 89.34239960]
[118.76866913 103.53459167]
[110.88607025 115.69234467]
[96.73767853 118.81790161]
[88.57736969 131.40397644]
[80.41706848 143.99006653]
[72.25675964 156.57614136]
[64.37688446 169.33966064]
[56.78128815 182.27438354]
[49.18569183 195.20910645]
[41.59009552 208.14382935]
[33.99450302 221.07853699]
[26.39890862 234.01325989]
[36.61002350 245.15885925]
[43.08076096 258.81979370]
[45.23574066 273.78134155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[23 61]
[24 60]
[25 59]
[26 58]
[29 55]
[30 54]
[34 49]
[35 48]
[36 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
