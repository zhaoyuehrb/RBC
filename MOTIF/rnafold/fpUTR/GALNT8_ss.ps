%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCACAAAAGCUAGGCUGGUUCUGAUUCUUAACCUGCUCCAGCAGUGACACACUCAGUCCCACAGGGAGUGGACGACCCCCAGGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[107.73071289 174.05485535]
[105.71003723 159.19158936]
[103.68936920 144.32830811]
[101.66869354 129.46504211]
[95.10103607 142.95080566]
[82.15532684 150.52764893]
[67.18103027 149.64994812]
[55.20915222 140.61256409]
[50.26197433 126.45185852]
[54.00162888 111.92550659]
[65.17168427 101.91401672]
[80.01759338 99.78076172]
[65.95130920 94.57118225]
[51.88503265 89.36160278]
[33.92119598 92.94524384]
[23.12209892 79.22531128]
[8.88789368 74.49378204]
[-5.34631252 69.76225281]
[-20.88256454 72.75148010]
[-30.51945305 61.39455795]
[-44.75365829 56.66302872]
[-58.98786545 51.93149567]
[-73.22206879 47.19996643]
[-85.16592407 56.96459579]
[-100.49546814 58.69908905]
[-114.31911469 51.84997177]
[-122.22578430 38.60277557]
[-121.69248199 23.18463516]
[-112.88938904 10.51541710]
[-98.62553406 4.63782597]
[-83.45246887 7.42738008]
[-72.21186066 17.99394226]
[-68.49053955 32.96575928]
[-54.25633621 37.69729233]
[-40.02212906 42.42882156]
[-25.78792381 47.16035080]
[-11.26979733 43.83269501]
[-0.61478251 55.52804565]
[13.61942387 60.25957489]
[27.85363007 64.99110413]
[38.93769836 59.83295822]
[50.92189026 63.81710052]
[57.09460831 75.29531860]
[71.16088867 80.50489807]
[85.22717285 85.71447754]
[98.69424438 79.10856628]
[103.18468475 64.79647827]
[107.67513275 50.48439026]
[112.16558075 36.17229843]
[111.13818359 19.24951172]
[127.11521149 13.57756996]
[136.98837280 27.36005974]
[126.47766876 40.66274643]
[121.98722076 54.97483444]
[117.49678040 69.28692627]
[113.00633240 83.59901428]
[123.70212555 94.11566162]
[137.93634033 89.38413239]
[148.59135437 77.68878174]
[163.10946655 81.01644135]
[177.34367371 76.28491211]
[191.57788086 71.55338287]
[205.81208801 66.82185364]
[218.93536377 56.08797073]
[232.88264465 65.72694397]
[227.48135376 81.79749298]
[210.54362488 81.05605316]
[196.30941772 85.78759003]
[182.07521057 90.51911926]
[167.84100342 95.25064850]
[158.20411682 106.60756683]
[142.66786194 103.61833954]
[128.43365479 108.34986877]
[143.19377136 111.02180481]
[158.00028992 108.62040710]
[172.10179138 113.73388672]
[181.92773438 125.06751251]
[184.99015808 139.75157166]
[180.51367188 154.06802368]
[169.63171387 164.39192200]
[155.09962463 168.10923767]
[140.59695435 164.27873230]
[129.79583740 153.87028503]
[125.43110657 139.51934814]
[116.53196716 127.44436646]
[118.55263519 142.30763245]
[120.57331085 157.17091370]
[122.59398651 172.03417969]
[134.44104004 182.85208130]
[133.22605896 198.84906006]
[119.88107300 207.75361633]
[104.64321136 202.73492432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 88]
[2 87]
[3 86]
[4 85]
[12 45]
[13 44]
[14 43]
[16 40]
[17 39]
[18 38]
[20 36]
[21 35]
[22 34]
[23 33]
[46 56]
[47 55]
[48 54]
[49 53]
[57 73]
[58 72]
[60 70]
[61 69]
[62 68]
[63 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
