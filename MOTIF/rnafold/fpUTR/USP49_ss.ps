%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:22:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAUAGAGAAGAGGAAACCUAACCAAUGACUGUGGAAUAAUAUGGAAGAAGAUGGAAAAAACUUGUUUAAUGGGUUGAGAAAGUGGCGACUUCUAUAAGAC\
) } def
/len { sequence length } bind def

/coor [
[150.78683472 135.85577393]
[144.59873962 143.31156921]
[137.32731628 149.71528625]
[129.14918518 154.91140747]
[120.26302338 158.77371216]
[110.88465118 161.20835876]
[101.24188995 162.15621948]
[91.56896210 161.59428406]
[82.10082245 159.53619385]
[73.06746674 156.03193665]
[64.68831635 151.16662598]
[57.16690826 145.05845642]
[50.68593216 137.85580444]
[37.77247620 145.48748779]
[24.85901642 153.11917114]
[14.29940033 166.38305664]
[-1.36932671 159.90792847]
[0.51521820 143.05905151]
[17.22733307 140.20570374]
[30.14079285 132.57402039]
[43.05425262 124.94234467]
[39.45594788 114.11936951]
[37.89541245 102.82116699]
[38.42516708 91.42801666]
[23.92646027 87.58257294]
[9.42775249 83.73712158]
[-3.25395679 92.88634491]
[-18.84585190 91.69185638]
[-29.98591995 80.71766663]
[-31.41415787 65.14543915]
[-22.45619583 52.32791519]
[-7.34171247 48.31713486]
[6.79269791 55.00686264]
[13.27319813 69.23841858]
[27.77190590 73.08386230]
[42.27061462 76.92930603]
[54.36635971 57.78022385]
[72.51907349 44.23498154]
[94.31933594 38.09144974]
[116.87359619 40.16505814]
[137.18821716 50.18057632]
[152.56683350 66.80864716]
[166.12362671 60.38885498]
[179.68040466 53.96906662]
[193.23718262 47.54927826]
[206.79396057 41.12948990]
[220.35075378 34.70970535]
[233.90753174 28.28991508]
[247.46430969 21.87012863]
[250.18421936 4.08859205]
[262.83035278 -8.48532009]
[280.32043457 -11.05820370]
[295.77832031 -2.80477428]
[308.91851807 -10.03909683]
[307.30978394 -25.12841797]
[311.58914185 -39.64496231]
[321.07464600 -51.38544083]
[334.29663086 -58.58036423]
[349.22537231 -60.16068649]
[363.58270264 -55.91656113]
[375.18960571 -46.52459335]
[388.32977295 -53.75891495]
[401.46997070 -60.99323654]
[414.61016846 -68.22756195]
[427.75036621 -75.46188354]
[440.89053345 -82.69620514]
[454.03073120 -89.93052673]
[464.98992920 -102.86621857]
[480.45391846 -95.91626740]
[478.05642700 -79.13269043]
[461.26504517 -76.79033661]
[448.12487793 -69.55601501]
[434.98468018 -62.32169342]
[421.84448242 -55.08736801]
[408.70428467 -47.85304642]
[395.56411743 -40.61872482]
[382.42391968 -33.38440323]
[384.15261841 -18.55400085]
[380.06057739 -4.15259075]
[370.74139404 7.61676455]
[357.59075928 14.94126797]
[342.59747314 16.67757416]
[328.04269409 12.53016663]
[316.15283203 3.10109305]
[303.01266479 10.33541489]
[303.28002930 22.66311264]
[298.18881226 33.97348785]
[288.67202759 42.04120255]
[276.53997803 45.24948502]
[264.13604736 42.91383362]
[253.88409424 35.42691040]
[240.32731628 41.84669876]
[226.77053833 48.26648331]
[213.21376038 54.68627167]
[199.65696716 61.10606003]
[186.10018921 67.52584839]
[172.54341125 73.94564056]
[158.98663330 80.36542511]
[161.32104492 89.76924896]
[162.16593933 99.42157745]
[161.50079346 109.08795929]
[159.34176636 118.53358459]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 21]
[14 20]
[15 19]
[24 36]
[25 35]
[26 34]
[42 98]
[43 97]
[44 96]
[45 95]
[46 94]
[47 93]
[48 92]
[49 91]
[53 85]
[54 84]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[67 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
