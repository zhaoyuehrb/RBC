%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGGAUUUUCCUUCUCCCUCUCUCUAUCUCCACAGAUCCCUUCCCAAGAGGAGUCUCCUGCUAAAACUUCAUCAUCUCAAGUUGACCUGCCACUUCACCCAAGGAGGCAAGCUCUUGCCUGUAACAGUGUAUUUGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[90.90763855 185.69189453]
[94.82765198 171.21417236]
[92.64515686 156.37380981]
[85.31020355 157.93855286]
[80.11066437 172.00854492]
[74.91112518 186.07853699]
[75.09217834 203.03152466]
[58.85184860 207.89855957]
[49.67925262 193.64022827]
[60.84112930 180.87901306]
[66.04066467 166.80900574]
[71.24020386 152.73901367]
[66.88568115 146.63261414]
[57.96171188 158.68925476]
[43.73756027 153.92758179]
[43.87086105 138.92817688]
[58.17664337 134.41981506]
[53.82212067 128.31340027]
[38.82579041 128.64523315]
[23.82946205 128.97706604]
[8.83313274 129.30889893]
[-6.16319656 129.64073181]
[-14.70536423 147.49502563]
[-30.99548531 158.59974670]
[-50.58199692 160.01452637]
[-68.15965271 151.43421936]
[-79.00648499 135.25041199]
[-93.87452698 137.23571777]
[-108.74256134 139.22102356]
[-123.61059570 141.20632935]
[-136.26522827 151.63668823]
[-151.52864075 145.63996887]
[-153.69912720 129.38508606]
[-140.54388428 119.59367371]
[-125.59590912 126.33828735]
[-110.72786713 124.35298157]
[-95.85983276 122.36767578]
[-80.99179077 120.38237000]
[-78.82715607 109.96850586]
[-73.80974579 100.56581879]
[-66.33450317 92.93971252]
[-56.99695969 87.71478271]
[-46.54585648 85.32365417]
[-35.82305908 85.97114563]
[-25.69577217 89.61684418]
[-16.98639679 95.97734833]
[-10.40574169 104.54831696]
[-6.49502802 114.64440155]
[8.50130081 114.31256866]
[23.49763107 113.98074341]
[38.49396133 113.64891052]
[53.49028778 113.31707764]
[71.56788635 73.59087372]
[105.95411682 71.38153839]
[112.67511749 57.97153854]
[119.39611816 44.56153488]
[126.11712646 31.15153503]
[132.83811951 17.74153328]
[139.55912781 4.33153200]
[146.28012085 -9.07846928]
[151.32371521 -23.20512009]
[154.61529541 -37.83951569]
[142.25959778 -51.01956940]
[140.24545288 -68.81562805]
[149.18562317 -84.15377808]
[165.37564087 -91.04916382]
[168.01666260 -105.81482697]
[170.65769958 -120.58049774]
[173.29872131 -135.34616089]
[175.93974304 -150.11183167]
[164.56300354 -160.53167725]
[160.64775085 -175.45394897]
[165.44335938 -190.11703491]
[177.41955566 -199.84196472]
[192.75477600 -201.52555847]
[206.55561829 -194.63059998]
[214.41825867 -181.35723877]
[213.83380127 -165.94094849]
[204.98869324 -153.30102539]
[190.70541382 -147.47080994]
[188.06439209 -132.70513916]
[185.42335510 -117.93946838]
[182.78233337 -103.17379761]
[180.14131165 -88.40813446]
[189.82069397 -80.93524933]
[195.40954590 -69.97726440]
[195.77986145 -57.60940552]
[190.79866028 -46.20381927]
[181.36526489 -37.97457504]
[169.24967957 -34.54793930]
[165.95809937 -19.91354370]
[177.48344421 -29.51388168]
[192.12092590 -32.79174423]
[206.63993835 -29.02368355]
[217.83602905 -19.04133797]
[223.23817444 -5.04787779]
[221.65405273 9.86824036]
[213.43330383 22.41492462]
[200.39030457 29.82303429]
[185.40373230 30.45754814]
[171.78121948 24.17842293]
[162.52937317 12.37150860]
[159.69012451 -2.35746741]
[152.96913147 11.05253410]
[146.24812317 24.46253586]
[139.52713013 37.87253571]
[132.80612183 51.28253937]
[126.08512115 64.69253540]
[119.36412048 78.10253906]
[134.71678162 92.05740356]
[138.73168945 116.23388672]
[125.37330627 141.19093323]
[135.86192322 151.91421509]
[151.12130737 149.80297852]
[164.54106140 156.99768066]
[171.07382202 170.55448914]
[168.40309143 185.18339539]
[178.89172363 195.90667725]
[189.38034058 206.62995911]
[199.98693848 217.23655701]
[210.71022034 227.72518921]
[221.43350220 238.21380615]
[236.98451233 244.96675110]
[234.80043030 261.77941895]
[218.04019165 264.33489990]
[210.94488525 248.93708801]
[200.22160339 238.44847107]
[189.49832153 227.95983887]
[182.46153259 225.51203918]
[178.65705872 217.11859131]
[168.16844177 206.39530945]
[157.67980957 195.67202759]
[142.99539185 198.01847839]
[129.58642578 191.18742371]
[122.69036102 177.61178589]
[125.13864899 162.40284729]
[114.65002441 151.67956543]
[107.31507111 153.24430847]
[111.37868500 167.68339539]
[120.86575317 179.30215454]
[115.89232635 193.45365906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 12]
[5 11]
[6 10]
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[27 38]
[28 37]
[29 36]
[30 35]
[54 109]
[55 108]
[56 107]
[57 106]
[58 105]
[59 104]
[60 103]
[61 91]
[62 90]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[112 137]
[113 136]
[117 132]
[118 131]
[119 130]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
