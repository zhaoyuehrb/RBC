%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGAGCAGCAUUGUUAGAGCCUGUGGAAAACACUUUACAACUGUGUAACUGUCUUCAUCUUUACAGAGGAAUAGUCUACAAAGGAAGACUUGUAACCUGGAGAAGAGACCUGUCAUUUACUCCAUCCUUUAUAGUGAUGCUACAGGACGAAGAGGA\
) } def
/len { sequence length } bind def

/coor [
[163.14228821 504.87203979]
[160.78114319 490.05905151]
[158.41998291 475.24603271]
[155.91261292 460.45709229]
[153.25924683 445.69363403]
[150.46017456 430.95709229]
[147.51565552 416.24896240]
[144.57113647 401.54080200]
[141.62661743 386.83264160]
[131.54147339 375.87182617]
[136.41925049 360.82131958]
[133.47473145 346.11315918]
[130.53021240 331.40502930]
[127.58568573 316.69686890]
[124.64116669 301.98870850]
[121.69664764 287.28054810]
[117.27643585 281.30737305]
[118.84226990 272.25286865]
[116.18891144 257.48941040]
[113.53556061 242.72595215]
[110.88220215 227.96249390]
[101.94998169 222.86738586]
[97.22335815 213.48753357]
[98.49472809 202.83946228]
[105.58192444 194.50028992]
[103.51389313 179.64352417]
[101.44586945 164.78677368]
[99.37783813 149.93000793]
[97.30980682 135.07325745]
[82.94126129 130.76312256]
[71.67507172 120.85829926]
[65.56015778 107.16011810]
[50.56088638 107.01193237]
[35.56161880 106.86374664]
[20.56235313 106.71556091]
[12.18002224 119.66700745]
[-1.88313580 126.00981140]
[-17.13961983 123.71999359]
[-28.72113991 113.52823639]
[-32.93207932 98.68669128]
[-28.42873573 83.93123627]
[-16.64811516 73.97028351]
[-1.34936905 71.98234558]
[12.58572865 78.60175323]
[20.71053886 91.71629333]
[35.70980453 91.86447906]
[50.70907593 92.01266479]
[65.70834351 92.16085052]
[76.77403259 73.58174133]
[96.61738586 64.98674774]
[98.39148712 50.09202957]
[90.73386383 33.37269592]
[101.72334290 19.71975136]
[103.20281982 4.79289198]
[104.68228912 -10.13396835]
[106.16176605 -25.06082916]
[107.64124298 -39.98768997]
[100.06890106 -50.47198105]
[101.64157104 -62.90429306]
[110.96926117 -70.65851593]
[112.74335480 -85.55323029]
[114.51745605 -100.44794464]
[116.29154968 -115.34266663]
[114.01190186 -121.64038086]
[115.12619781 -127.28154755]
[118.44129944 -130.78648376]
[120.80245209 -145.59947205]
[123.16360474 -160.41247559]
[110.26744843 -168.41029358]
[101.43962097 -180.70306396]
[98.00003052 -195.39941406]
[100.44251251 -210.25276184]
[108.36412811 -223.00474548]
[120.53130341 -231.72856140]
[135.07180786 -235.12019348]
[137.43296814 -249.93318176]
[139.79411316 -264.74618530]
[142.15527344 -279.55917358]
[144.51641846 -294.37219238]
[133.46012878 -305.25970459]
[130.94815063 -320.57211304]
[137.94638062 -334.42144775]
[151.76385498 -341.48239136]
[167.08747864 -339.03985596]
[178.02500916 -328.03302002]
[180.37074280 -312.69427490]
[173.22268677 -298.92166138]
[159.32942200 -292.01104736]
[156.96826172 -277.19802856]
[154.60711670 -262.38504028]
[152.24595642 -247.57203674]
[149.88481140 -232.75903320]
[162.65029907 -225.01490784]
[171.50233459 -212.94067383]
[175.06684875 -198.35784912]
[172.77044678 -183.48121643]
[164.93228149 -170.58250427]
[152.72015381 -161.64343262]
[137.97660828 -158.05133057]
[135.61544800 -143.23832703]
[133.25430298 -128.42532349]
[131.18626404 -113.56856537]
[129.41217041 -98.67385101]
[127.63807678 -83.77913666]
[125.86397552 -68.88441467]
[133.65084839 -53.18294907]
[122.56809998 -38.50821304]
[121.08862305 -23.58135414]
[119.60915375 -8.65449429]
[118.12967682 6.27236557]
[116.65019989 21.19922638]
[124.08635712 30.78240395]
[122.94117737 43.26135635]
[113.28620148 51.86612701]
[111.51210022 66.76084137]
[121.01524353 71.79132080]
[128.55479431 79.45751190]
[133.42628479 89.04311371]
[135.17456055 99.65248871]
[133.63624573 110.29434204]
[128.95507812 119.97431946]
[121.56845856 127.78797150]
[112.16656494 133.00521851]
[114.23459625 147.86198425]
[116.30262756 162.71873474]
[118.37065125 177.57550049]
[120.43868256 192.43225098]
[133.55139160 207.69694519]
[125.64566040 225.30912781]
[128.29901123 240.07258606]
[130.95237732 254.83604431]
[133.60572815 269.59951782]
[136.40480042 284.33602905]
[139.34931946 299.04418945]
[142.29383850 313.75234985]
[145.23835754 328.46051025]
[148.18287659 343.16864014]
[151.12739563 357.87680054]
[161.42315674 369.88964844]
[156.33477783 383.88812256]
[159.27929688 398.59628296]
[162.22381592 413.30444336]
[165.16833496 428.01257324]
[169.94499207 435.86239624]
[168.02270508 443.04028320]
[170.67607117 457.80374146]
[175.29670715 465.74639893]
[173.23298645 472.88488770]
[175.59413147 487.69787598]
[177.95529175 502.51089478]
[192.12568665 508.61032104]
[200.73002625 521.41534424]
[201.02267456 536.83996582]
[192.91026306 549.96215820]
[178.98143005 556.59472656]
[163.68081665 554.62127686]
[151.89077759 544.67144775]
[147.37348938 529.92028809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 150]
[2 149]
[3 148]
[4 146]
[5 145]
[6 143]
[7 142]
[8 141]
[9 140]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 127]
[26 126]
[27 125]
[28 124]
[29 123]
[32 48]
[33 47]
[34 46]
[35 45]
[50 115]
[51 114]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[60 105]
[61 104]
[62 103]
[63 102]
[66 101]
[67 100]
[68 99]
[75 92]
[76 91]
[77 90]
[78 89]
[79 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
