%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGGCGGAGAGAGCCGCCGAGCCGAGCCGAGCCCCAGCUCCAGCAAGAGCGCGGGCGGGUGGCCCAGGCACGCAGCGGUGAGGACCGCGGCCACAGCUCGGCGCCAACCACCGCGGGCCUCCCAGCCAGCCCCGCGGCGGGGCAGCCGCAGGAGCCCUGGCUGUGGUCGGGGGGCAGUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[23.34804153 290.07562256]
[16.97052193 303.65234375]
[10.59300423 317.22906494]
[12.57987881 335.52557373]
[-2.18262053 344.99707031]
[-8.32992554 358.67953491]
[-14.47723007 372.36203003]
[-20.62453461 386.04452515]
[-26.77183914 399.72702026]
[-20.92438126 414.40975952]
[-27.24852180 428.89358521]
[-41.99225998 434.58547974]
[-56.40840149 428.10855103]
[-61.94409943 413.30545044]
[-55.31512833 398.95861816]
[-40.45433426 393.57971191]
[-34.30702972 379.89724731]
[-28.15972519 366.21475220]
[-22.01241875 352.53225708]
[-15.86511421 338.84976196]
[-19.86830521 327.42028809]
[-14.84127331 315.96328735]
[-2.98371315 310.85153198]
[3.39380527 297.27484131]
[9.77132320 283.69812012]
[4.49065781 269.81826782]
[10.76496220 255.95869446]
[25.35922813 250.51394653]
[31.73674583 236.93724060]
[38.11426544 223.36051941]
[30.86903763 206.56634521]
[38.30736160 189.50842285]
[56.14480209 183.17634583]
[62.06013870 169.39198303]
[67.97547913 155.60760498]
[73.89081573 141.82324219]
[79.80615234 128.03887939]
[63.98496628 130.88995361]
[46.23596954 127.39521027]
[31.24452591 127.90181732]
[16.25308418 128.40843201]
[1.26164103 128.91503906]
[-9.34540081 140.63110352]
[-25.13414764 141.33184814]
[-36.73741531 130.60153198]
[-37.27119064 114.80626678]
[-26.41879654 103.31709290]
[-10.61876297 102.95034027]
[0.75502884 113.92359924]
[15.74647141 113.41699219]
[30.73791313 112.91037750]
[45.72935486 112.40376282]
[47.42471695 105.09789276]
[50.81543732 90.48615265]
[52.51079941 83.18028259]
[39.27452087 76.12329865]
[26.03824615 69.06631470]
[12.80197048 62.00933456]
[-2.90242887 65.28826904]
[-15.16512394 54.94390488]
[-14.57922459 38.91155243]
[-1.59418321 29.48986244]
[13.82898808 33.90634537]
[19.85895157 48.77305603]
[33.09523010 55.83003998]
[46.33150482 62.88702011]
[59.56777954 69.94400787]
[64.68894196 64.46461487]
[60.31922150 50.11520386]
[74.93125916 53.50583649]
[80.05242157 48.02644348]
[72.11796570 35.29677963]
[64.18350220 22.56711769]
[48.73357010 19.23918343]
[40.23233795 5.91610003]
[43.72343063 -9.49778366]
[57.13565063 -17.85768318]
[72.51176453 -14.20381927]
[80.72939301 -0.70396441]
[76.91316986 14.63265705]
[84.84762573 27.36232185]
[92.78208923 40.09198380]
[112.07918549 49.68412781]
[124.04701233 64.17214203]
[128.03887939 79.80615234]
[141.82324219 73.89081573]
[155.60760498 67.97547913]
[169.39198303 62.06013870]
[183.17634583 56.14480209]
[196.96070862 50.22946167]
[210.74507141 44.31412506]
[224.52944946 38.39878845]
[238.31381226 32.48344803]
[252.09817505 26.56811142]
[265.88253784 20.65277290]
[271.81707764 6.25072575]
[285.88067627 0.44809550]
[299.57424927 6.19452858]
[313.35861206 0.27919066]
[327.14297485 -5.63614702]
[340.92733765 -11.55148506]
[354.50405884 -17.92900276]
[367.85763550 -24.76142502]
[381.21121216 -31.59384727]
[394.50662231 -38.53879547]
[407.74288940 -45.59577942]
[420.97915649 -52.65275955]
[424.81488037 -58.08113861]
[430.03619385 -60.39382172]
[434.78381348 -59.71597672]
[448.25088501 -66.32188416]
[457.23327637 -79.34598541]
[472.06735229 -78.00441742]
[485.53442383 -84.61032867]
[499.00146484 -91.21623993]
[512.46856689 -97.82215881]
[525.93560791 -104.42807007]
[539.40270996 -111.03398132]
[552.86975098 -117.63989258]
[561.85217285 -130.66398621]
[576.68621826 -129.32241821]
[590.15325928 -135.92832947]
[593.72625732 -151.15225220]
[606.27996826 -160.47633362]
[621.88690186 -159.49803162]
[633.17797852 -148.67926025]
[634.82189941 -133.12831116]
[626.04241943 -120.18788910]
[610.98492432 -115.96804810]
[596.75921631 -122.46126556]
[583.29211426 -115.85535431]
[575.27301025 -103.30375671]
[559.47564697 -104.17282104]
[546.00860596 -97.56690979]
[532.54150391 -90.96099854]
[519.07446289 -84.35508728]
[505.60739136 -77.74917603]
[492.14031982 -71.14326477]
[478.67324829 -64.53735352]
[470.65411377 -51.98575211]
[454.85678101 -52.85482025]
[441.38973999 -46.24890518]
[428.03616333 -39.41648483]
[414.79986572 -32.35950089]
[401.56359863 -25.30252075]
[397.13070679 -19.36828232]
[388.04364014 -18.24027061]
[374.69006348 -11.40784836]
[361.33648682 -4.57542658]
[360.35171509 -1.92869413]
[358.24768066 0.48284468]
[355.11032104 2.22662592]
[351.18197632 2.90981460]
[346.84268188 2.23288226]
[333.05831909 8.14822006]
[319.27395630 14.06355762]
[305.48959351 19.97889519]
[300.22012329 33.86300659]
[286.32507324 40.05836105]
[271.79788208 34.43714142]
[258.01351929 40.35247803]
[244.22915649 46.26781464]
[230.44477844 52.18315506]
[216.66041565 58.09849167]
[202.87605286 64.01383209]
[189.09167480 69.92916870]
[175.30731201 75.84450531]
[161.52294922 81.75984192]
[147.73858643 87.67517853]
[133.95420837 93.59051514]
[130.94046021 115.38369751]
[115.38369751 130.94046021]
[93.59051514 133.95420837]
[87.67517853 147.73858643]
[81.75984192 161.52294922]
[75.84450531 175.30731201]
[69.92916870 189.09167480]
[76.41579437 199.08570862]
[77.25376892 210.85046387]
[72.34990692 221.44514465]
[63.03186417 228.27752686]
[51.69098282 229.73803711]
[45.31346512 243.31475830]
[38.93594360 256.89147949]
[44.06331635 271.60025024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[5 20]
[6 19]
[7 18]
[8 17]
[9 16]
[28 184]
[29 183]
[30 182]
[33 177]
[34 176]
[35 175]
[36 174]
[37 173]
[39 52]
[40 51]
[41 50]
[42 49]
[55 67]
[56 66]
[57 65]
[58 64]
[71 82]
[72 81]
[73 80]
[85 170]
[86 169]
[87 168]
[88 167]
[89 166]
[90 165]
[91 164]
[92 163]
[93 162]
[94 161]
[95 160]
[98 157]
[99 156]
[100 155]
[101 154]
[102 149]
[103 148]
[104 147]
[105 145]
[106 144]
[107 143]
[110 142]
[111 141]
[113 139]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[121 131]
[122 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
