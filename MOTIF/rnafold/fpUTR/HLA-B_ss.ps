%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGAGAAGCCAAUCAGCGUCGCCGCGGUCCCAGUUCUAAAGUCCCCACGCACCCACCCGGACUCAGAGUCUCCUCAGACGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[42.50883102 299.69869995]
[38.19544601 314.23040771]
[29.16955948 326.40863037]
[16.52109146 334.76278687]
[1.77740443 338.28408813]
[-13.28112698 336.54730225]
[-26.83611298 329.76217651]
[-37.25072479 318.74801636]
[-43.26734543 304.83483887]
[-44.15943527 289.70275879]
[-39.81927872 275.17901611]
[-30.77096367 263.01745605]
[-18.10712051 254.68661499]
[-3.35696959 251.19250488]
[11.69833565 252.95703125]
[18.41259384 239.54365540]
[17.19065094 224.69926453]
[30.28673553 215.82214355]
[37.00099182 202.40876770]
[43.71525192 188.99539185]
[50.42950821 175.58200073]
[57.14376831 162.16862488]
[49.89803314 152.11355591]
[47.69135284 139.84361267]
[51.01842880 127.75319672]
[59.28779221 118.22940063]
[70.92584229 113.18074036]
[83.67602539 113.65487671]
[91.33007812 100.75466919]
[90.69074249 97.51102448]
[91.33246613 93.95067596]
[93.37826538 90.59365845]
[96.73903656 87.99825287]
[101.10550690 86.67536926]
[110.51753998 74.99574280]
[119.71960449 63.14999008]
[128.70877075 51.14186859]
[137.69793701 39.13375092]
[146.68710327 27.12563324]
[145.64619446 14.12087154]
[153.56867981 4.26868391]
[165.69369507 2.60537028]
[175.10572815 -9.07425308]
[184.51776123 -20.75387573]
[193.92979431 -32.43349838]
[203.34182739 -44.11312103]
[196.02610779 -57.43785858]
[194.37138367 -72.54846191]
[198.62998962 -87.14067078]
[208.15252686 -98.98928833]
[221.48687744 -106.28748322]
[236.59963989 -107.92232513]
[251.18624878 -103.64452362]
[263.02230835 -94.10641479]
[270.30297852 -80.76247406]
[271.91793823 -65.64756775]
[267.62094116 -51.06661224]
[258.06726074 -39.24308777]
[244.71376038 -31.98000336]
[229.59675598 -30.38492393]
[215.02145386 -34.70108795]
[205.60942078 -23.02146339]
[196.19738770 -11.34184074]
[186.78535461 0.33778238]
[177.37332153 12.01740551]
[175.72340393 29.39023972]
[158.69522095 36.11479568]
[149.70605469 48.12291718]
[140.71688843 60.13103485]
[131.72772217 72.13915253]
[130.20590210 79.54784393]
[122.19716644 84.40778351]
[112.78512573 96.08740234]
[104.23028564 108.40871429]
[96.57624054 121.30892944]
[104.26148987 137.51885986]
[100.87991333 154.97962952]
[87.92534637 166.93907166]
[70.55714417 168.88288879]
[63.84288788 182.29626465]
[57.12863159 195.70964050]
[50.41437149 209.12301636]
[43.70011520 222.53640747]
[44.44180679 238.34020996]
[31.82597351 246.25791931]
[25.11171532 259.67129517]
[35.54660416 270.66622925]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 86]
[16 85]
[18 83]
[19 82]
[20 81]
[21 80]
[22 79]
[28 75]
[29 74]
[34 73]
[35 72]
[36 70]
[37 69]
[38 68]
[39 67]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
