%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGAAUGAGUUAGGUUCCCGGUUGCGGGACAGUUUUUUUUUCUUUUUUAAAACAGACACAGCUACUGAGUGCA\
) } def
/len { sequence length } bind def

/coor [
[178.00161743 166.15100098]
[176.84591675 141.89755249]
[163.10932922 135.87211609]
[149.37272644 129.84667969]
[135.63612366 123.82125092]
[121.89952087 117.79582214]
[108.16292572 111.77039337]
[94.24613953 113.11748505]
[85.81164551 101.96620941]
[72.07504272 95.94078064]
[58.33844376 89.91534424]
[45.95346832 98.89084625]
[30.83856392 100.45177460]
[17.06331444 94.27853394]
[8.28629684 82.12040710]
[6.78351402 67.30125427]
[-6.95308590 61.27582550]
[-16.36344910 60.64442062]
[-21.12474251 54.70705414]
[-34.60060883 48.11910629]
[-48.07647324 41.53115463]
[-61.55233765 34.94320679]
[-77.86642456 36.61131287]
[-87.24742889 23.16033745]
[-80.04498291 8.42749119]
[-63.66833878 7.56866360]
[-54.96438599 21.46734238]
[-41.48852158 28.05529213]
[-28.01265907 34.64324188]
[-14.53679371 41.23118973]
[-0.92765468 47.53922653]
[12.80894566 53.56465912]
[24.72955704 44.63355255]
[39.61909103 42.85654449]
[53.49061203 48.81029892]
[62.57924652 60.98788452]
[64.36387634 76.17874908]
[78.10047913 82.20417786]
[91.83707428 88.22960663]
[105.75386047 86.88251495]
[114.18835449 98.03379059]
[127.92495728 104.05921936]
[141.66156006 110.08465576]
[155.39814758 116.11008453]
[169.13475037 122.13551331]
[182.87135315 128.16094971]
[188.29954529 121.56098175]
[194.90316772 116.14901733]
[202.42759705 112.12997437]
[210.58343506 109.65513611]
[219.05763245 108.81645966]
[227.52551270 109.64315796]
[235.66319275 112.10069275]
[243.16001892 116.09220123]
[249.73037720 121.46233368]
[255.12458801 128.00326538]
[259.13839722 135.46275330]
[261.62072754 143.55389404]
[262.47933960 151.96607971]
[261.68423462 160.37701416]
[259.26876831 168.46499634]
[255.32817078 175.92124939]
[250.01585388 182.46170044]
[258.73199463 194.66943359]
[274.24908447 194.66304016]
[286.78659058 203.80581665]
[291.52362061 218.58215332]
[286.63870239 233.31025696]
[274.01013184 242.32687378]
[258.49392700 242.16491699]
[246.05632019 232.88667297]
[241.47985840 218.05982971]
[246.52427673 203.38557434]
[237.80812073 191.17785645]
[214.14134216 195.22438049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[9 39]
[10 38]
[11 37]
[16 32]
[17 31]
[19 30]
[20 29]
[21 28]
[22 27]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
