%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACUCCCACCCCAGCCUCCCCGUGGGACAGGACCCAGGUGCUGGGGGAGAACAGACCUCGGGAGCAGCCAGGAGUCCUCGGUCCUGGGAGGGUUUAAAAGCCAGGGGGCCGUCUCGACCUCAGUCUGACCUUCCCUCCCGGCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[81.12696838 135.91517639]
[74.30965424 131.40219116]
[68.53555298 125.61405945]
[64.03912354 118.78582001]
[61.00295258 111.19474030]
[46.06864548 112.59704590]
[31.13433838 113.99935150]
[16.20003128 115.40164948]
[1.26572311 116.80395508]
[-4.61830425 130.70124817]
[-22.02133179 137.42568970]
[-36.14613342 142.47445679]
[-50.27093887 147.52320862]
[-64.39574432 152.57196045]
[-78.52054596 157.62072754]
[-92.64534760 162.66947937]
[-106.77014923 167.71823120]
[-113.01188660 179.05377197]
[-124.93072510 182.94738770]
[-135.93203735 177.82113647]
[-150.15881348 182.57495117]
[-153.69874573 186.58598328]
[-158.00288391 188.59268188]
[-162.16207886 188.64454651]
[-165.42366028 187.15135193]
[-179.91925049 191.00849915]
[-194.41484070 194.86566162]
[-208.91044617 198.72282410]
[-216.61846924 212.51998901]
[-231.84748840 216.74522400]
[-245.56239319 208.89175415]
[-249.62637329 193.61891174]
[-241.62834167 179.98780823]
[-226.31338501 176.08552551]
[-212.76760864 184.22723389]
[-198.27200317 180.37007141]
[-183.77641296 176.51290894]
[-169.28080750 172.65574646]
[-154.91262817 168.34815979]
[-140.68585205 163.59434509]
[-129.81809998 149.85055542]
[-111.81890869 153.59342957]
[-97.69410706 148.54467773]
[-83.56929779 143.49592590]
[-69.44449615 138.44715881]
[-55.31969452 133.39840698]
[-41.19489288 128.34965515]
[-27.07008934 123.30089569]
[-24.27776337 108.56308746]
[-35.57677078 98.69736481]
[-46.87577438 88.83164215]
[-62.29722214 91.42257690]
[-75.74987793 83.45011902]
[-80.88180542 68.67861176]
[-75.26986694 54.08271790]
[-61.56384659 46.55416489]
[-46.23531342 49.64770889]
[-36.52192688 61.90267181]
[-37.01005173 77.53263855]
[-25.71104622 87.39836121]
[-14.41204071 97.26408386]
[-0.13658048 101.86964417]
[14.79772758 100.46734619]
[29.73203468 99.06504059]
[44.66634369 97.66273499]
[59.60065079 96.26042938]
[65.13916016 79.24394226]
[77.45960999 66.26540375]
[94.16513824 59.84970474]
[94.78911591 44.86268616]
[95.41309357 29.87567139]
[95.88114166 14.88297558]
[96.19319153 -0.11377792]
[96.50524902 -15.11053181]
[90.78973389 -31.07202339]
[104.54522705 -40.98275757]
[117.87654877 -30.50839424]
[111.50200653 -14.79847527]
[111.18994904 0.19827831]
[110.87789154 15.19503212]
[113.90272522 21.99179840]
[110.40010834 30.49964905]
[109.77613831 45.48666382]
[109.15216064 60.47368240]
[129.99983215 72.68513489]
[140.20881653 94.58311462]
[155.18853760 95.36296082]
[170.16824341 96.14280701]
[185.14796448 96.92265320]
[200.12767029 97.70249939]
[215.10739136 98.48234558]
[230.08711243 99.26219177]
[245.06681824 100.04203033]
[260.04653931 100.82187653]
[266.63427734 87.15157318]
[277.92352295 77.07207489]
[292.17318726 72.09612274]
[307.20162964 72.95256805]
[320.72052002 79.47980499]
[330.68328857 90.65515900]
[335.59506226 104.75494385]
[350.57476807 105.53478241]
[358.45025635 94.17803955]
[370.81817627 88.25790405]
[384.38665771 89.23100281]
[395.60284424 96.73487854]
[401.58322144 108.71115112]
[416.54348755 109.80245972]
[431.50372314 110.89377594]
[446.46395874 111.98508453]
[460.79049683 105.27230835]
[472.92111206 113.91506195]
[487.88134766 115.00637054]
[504.11840820 110.12841797]
[513.30059814 124.38056946]
[502.14730835 137.14929199]
[486.79003906 129.96661377]
[471.82980347 128.87530518]
[458.57333374 135.66615295]
[445.37265015 126.94533539]
[430.41241455 125.85401917]
[415.45214844 124.76271057]
[400.49191284 123.67140198]
[390.33880615 136.53295898]
[374.36639404 140.87443542]
[358.79058838 134.80191040]
[349.79492188 120.51450348]
[334.81521606 119.73465729]
[328.46591187 133.24818420]
[317.39654541 143.32859802]
[303.27297974 148.41677856]
[288.23684692 147.70805359]
[274.58087158 141.27932739]
[264.39932251 130.08206177]
[259.26669312 115.80158997]
[244.28697205 115.02175140]
[229.30726624 114.24190521]
[214.32754517 113.46205902]
[199.34783936 112.68221283]
[184.36811829 111.90236664]
[169.38839722 111.12252045]
[154.40869141 110.34267426]
[139.42897034 109.56283569]
[136.71121216 117.27364349]
[132.50271606 124.28302002]
[126.97439575 130.30633545]
[120.35071564 135.09899902]
[112.90065765 138.46641541]
[104.92674255 140.27182007]
[96.75276947 140.44189453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 66]
[6 65]
[7 64]
[8 63]
[9 62]
[11 48]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[20 40]
[21 39]
[25 38]
[26 37]
[27 36]
[28 35]
[49 61]
[50 60]
[51 59]
[69 84]
[70 83]
[71 82]
[72 80]
[73 79]
[74 78]
[86 143]
[87 142]
[88 141]
[89 140]
[90 139]
[91 138]
[92 137]
[93 136]
[94 135]
[101 128]
[102 127]
[107 123]
[108 122]
[109 121]
[110 120]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
