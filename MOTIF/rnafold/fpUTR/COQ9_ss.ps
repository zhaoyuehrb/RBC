%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGACGACUUCCGCCCUCCUUAGGGCCGUGGUCCCGUAGCUACCGGUCGCGUCGCCGUGGGCGACGUGCCCGCUUCCAAA\
) } def
/len { sequence length } bind def

/coor [
[141.50553894 110.70864105]
[126.54956055 109.56040192]
[111.59357452 108.41216278]
[98.90351105 114.28191376]
[87.25818634 106.54382324]
[72.30220032 105.39558411]
[57.31320953 104.82104492]
[42.31320953 104.82104492]
[27.31320953 104.82104492]
[12.31320858 104.82104492]
[3.15250349 117.20602417]
[-11.37452984 121.76877594]
[-25.63407135 116.95946503]
[-34.22457886 104.82104492]
[-49.22457886 104.82104492]
[-64.22457886 104.82104492]
[-79.22457886 104.82104492]
[-94.22457886 104.82104492]
[-108.14838409 113.48474884]
[-122.48381805 105.52062225]
[-122.48381805 89.12146759]
[-108.14838409 81.15734100]
[-94.22457886 89.82104492]
[-79.22457886 89.82104492]
[-64.22457886 89.82104492]
[-49.22457886 89.82104492]
[-34.22457886 89.82104492]
[-25.63407135 77.68262482]
[-11.37452984 72.87331390]
[3.15250349 77.43606567]
[12.31320858 89.82104492]
[27.31320953 89.82104492]
[42.31320953 89.82104492]
[57.31320953 89.82104492]
[61.42068481 86.94826508]
[67.42942810 86.80825806]
[73.45043945 90.43959808]
[88.40642548 91.58783722]
[101.09648895 85.71808624]
[112.74181366 93.45617676]
[127.69779968 94.60441589]
[142.65377808 95.75265503]
[158.00016785 78.78836823]
[180.60566711 77.68554688]
[197.17037964 92.74810791]
[211.89601135 89.89224243]
[226.62162781 87.03637695]
[238.69625854 76.81317139]
[252.66384888 81.98578644]
[267.38946533 79.12992096]
[282.11508179 76.27405548]
[296.84072876 73.41819000]
[311.56634521 70.56231689]
[326.29196167 67.70645142]
[341.01760864 64.85058594]
[355.74322510 61.99472046]
[370.46884155 59.13885498]
[384.86709595 50.18748093]
[397.45446777 61.54504395]
[390.02529907 76.78459167]
[373.32470703 73.86447906]
[358.59909058 76.72034454]
[343.87347412 79.57621002]
[329.14782715 82.43207550]
[314.42221069 85.28794861]
[299.69659424 88.14381409]
[284.97094727 90.99967957]
[270.24533081 93.85554504]
[255.51971436 96.71141052]
[244.49835205 106.73034668]
[229.47749329 101.76200104]
[214.75187683 104.61786652]
[200.02624512 107.47373199]
[198.33197021 115.69915009]
[194.34603882 123.12228394]
[188.38668823 129.11730957]
[180.93920898 133.17378235]
[172.61650085 134.93995667]
[164.10862732 134.25335693]
[156.12559509 131.15554810]
[149.33808899 125.88993835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[5 38]
[6 37]
[7 34]
[8 33]
[9 32]
[10 31]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[45 73]
[46 72]
[47 71]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
