%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:07:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCAUUGGCUGAUGUUGGCGCGAAGGUGCGCGAGUCAGCCCUCGCGCUGGGGGCGCAGGAAACAAUAGAGGCCGCGCGCACAGAGCGAGCUCUUGCAGCCUCCCCGCCCCUCCCGCAACGCUCGACCCCAGGAUUCCCCCGGCUCGCCUGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[102.43686676 225.49525452]
[87.50173950 226.88877869]
[73.12562561 222.60775757]
[61.38590622 213.27078247]
[53.97901154 200.22708130]
[51.97525406 185.36152649]
[55.66418457 170.82220459]
[64.51274109 158.71009827]
[77.24079132 150.77601624]
[84.96121979 137.91542053]
[72.02021027 145.50028992]
[59.07918930 153.08514404]
[46.13817596 160.67001343]
[33.19715881 168.25486755]
[20.25614357 175.83973694]
[7.31512785 183.42459106]
[6.59998989 195.35345459]
[0.25926760 205.34072876]
[-10.02089119 210.94783020]
[-21.61032104 210.87278748]
[-31.60744286 205.25082397]
[-44.83626175 212.32177734]
[-58.06507874 219.39273071]
[-71.29389954 226.46368408]
[-84.52272034 233.53463745]
[-92.71837616 247.73896790]
[-109.11536407 247.47291565]
[-116.84587097 233.01016235]
[-107.95740509 219.22874451]
[-91.59366608 220.30581665]
[-78.36485291 213.23486328]
[-65.13603210 206.16390991]
[-51.90721130 199.09295654]
[-38.67839432 192.02200317]
[-34.47137451 174.24447632]
[-18.35642624 164.98342896]
[-0.26973298 170.48358154]
[12.67128277 162.89871216]
[25.61229897 155.31385803]
[38.55331421 147.72898865]
[51.49433136 140.14413452]
[64.43534851 132.55926514]
[77.37635803 124.97441101]
[69.15465546 108.67256927]
[70.85434723 91.41124725]
[80.98018646 78.46961212]
[95.60936737 73.28676605]
[97.37242889 58.39073563]
[99.13549042 43.49470901]
[89.62501526 31.15823746]
[91.62520599 16.07666206]
[103.44475555 7.08590031]
[105.20781708 -7.81012630]
[106.97087860 -22.70615387]
[108.73394012 -37.60218048]
[110.49700165 -52.49820709]
[112.26006317 -67.39423370]
[114.02312469 -82.29026031]
[111.73956299 -88.58422852]
[112.84847260 -94.22471619]
[116.15901184 -97.73225403]
[118.50553131 -112.54758453]
[106.71498871 -103.27487183]
[91.73241425 -102.55193329]
[79.10387421 -110.64636993]
[73.50402832 -124.56189728]
[77.00576019 -139.14743042]
[88.31283569 -149.00390625]
[103.23976135 -150.48275757]
[116.26107025 -143.03659058]
[122.55668640 -129.42187500]
[127.19194031 -143.68771362]
[131.82719421 -157.95356750]
[136.46244812 -172.21940613]
[141.09770203 -186.48526001]
[138.00358582 -202.00096130]
[149.29513550 -211.71435547]
[153.93038940 -225.98020935]
[158.56564331 -240.24604797]
[144.13499451 -236.15263367]
[131.82104492 -244.71806335]
[130.63908386 -259.67141724]
[141.45445251 -270.06506348]
[156.34901428 -268.28958130]
[164.41833496 -255.64324951]
[170.42956543 -269.38607788]
[176.44081116 -283.12890625]
[182.45204163 -296.87170410]
[180.09440613 -313.10049438]
[193.13595581 -323.04284668]
[208.16065979 -316.47088623]
[209.71238708 -300.14532471]
[196.19485474 -290.86047363]
[190.18362427 -277.11764526]
[184.17239380 -263.37484741]
[178.16116333 -249.63201904]
[172.83149719 -235.61079407]
[168.19624329 -221.34495544]
[163.56098938 -207.07910156]
[166.98664856 -192.58378601]
[155.36355591 -181.85000610]
[150.72830200 -167.58415222]
[146.09304810 -153.31831360]
[141.45779419 -139.05245972]
[136.82254028 -124.78661346]
[133.32084656 -110.20106506]
[130.97433472 -95.38574219]
[128.91915894 -80.52719879]
[127.15608978 -65.63117218]
[125.39302826 -50.73514557]
[123.62996674 -35.83911896]
[121.86690521 -20.94309235]
[120.10384369 -6.04706526]
[118.34078217 8.84896183]
[127.73490906 20.35052681]
[126.15911865 35.48233414]
[114.03151703 45.25777054]
[112.26845551 60.15379715]
[110.50539398 75.04982758]
[123.35739136 83.27447510]
[130.30912781 97.85697937]
[128.41676331 114.80324554]
[117.31666565 128.90818787]
[128.52929688 138.87197876]
[148.41189575 141.98196411]
[153.81953430 160.51512146]
[165.41468811 170.03102112]
[177.00984192 179.54692078]
[192.58601379 182.32064819]
[197.51583862 196.37576294]
[209.11099243 205.89166260]
[224.62844849 204.53283691]
[236.25202942 214.34848022]
[237.45182800 229.15037537]
[249.04699707 238.66627502]
[265.30642700 240.80230713]
[271.33547974 256.05297852]
[260.93197632 268.72967529]
[244.79814148 265.79174805]
[239.53109741 250.26142883]
[227.93592834 240.74552917]
[213.18438721 242.45649719]
[201.28968811 232.97119141]
[199.59509277 217.48681641]
[187.99993896 207.97091675]
[173.25314331 205.87783813]
[167.49395752 191.14207458]
[155.89878845 181.62619019]
[144.30363464 172.11029053]
[134.20204163 174.02565002]
[124.52183533 169.95362854]
[118.58261871 161.02684021]
[118.56550598 150.08459473]
[107.35288239 140.12081909]
[112.41599274 154.24047852]
[123.35254669 164.50653076]
[129.66757202 178.11242676]
[130.44853210 193.09207153]
[125.58257294 207.28089905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[47 119]
[48 118]
[49 117]
[52 114]
[53 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[61 107]
[62 106]
[71 105]
[72 104]
[73 103]
[74 102]
[75 101]
[77 99]
[78 98]
[79 97]
[85 96]
[86 95]
[87 94]
[88 93]
[123 154]
[124 153]
[126 149]
[127 148]
[128 147]
[130 145]
[131 144]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
