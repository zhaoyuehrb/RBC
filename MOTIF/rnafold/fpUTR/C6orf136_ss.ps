%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAGCCGCUUCCCUCGAGCCUGCAGUGCGCAAGCGCGGGACAUCUCCGUUUCCCUCCCUCAGCCCCUUCCCCCCCUACCCCCCCGCCCCGGCCUCCUUUCCCCUUCACGAAGCCGGCUCUGGGGCGCGCUCACCCCUGUGAGGAGGCCGGAGGUCGGACUCAGGAGGCUCCUUCUCCACUCCCGGAAGAUC\
) } def
/len { sequence length } bind def

/coor [
[136.20680237 308.69830322]
[132.83946228 303.16152954]
[130.72912598 297.01815796]
[129.97962952 290.55026245]
[130.63223267 284.05639648]
[132.66328430 277.83770752]
[135.98507690 272.18395996]
[140.44956970 267.36007690]
[145.85505676 263.59375000]
[142.24717712 249.03410339]
[138.63929749 234.47447205]
[135.03143311 219.91482544]
[131.42355347 205.35517883]
[127.81568146 190.79553223]
[118.61085510 186.31889343]
[113.28441620 177.32196045]
[113.80764008 166.65960693]
[120.24896240 157.87275696]
[117.11444855 143.20391846]
[113.97993469 128.53507996]
[107.13494873 125.46976471]
[108.67055511 140.39096069]
[96.51615906 149.18133545]
[82.82631683 143.05041504]
[81.29103851 128.12919617]
[93.44496918 119.33914185]
[86.59998322 116.27383423]
[73.56930542 123.70360565]
[60.53863144 131.13337708]
[47.50795364 138.56314087]
[39.70347214 152.98611450]
[23.30533600 153.16818237]
[15.18254185 138.92204285]
[23.69112587 124.90291595]
[40.07818604 125.53246307]
[53.10886002 118.10269928]
[66.13953400 110.67292786]
[79.17021179 103.24315643]
[75.09276581 88.80797577]
[60.10062790 89.29370880]
[45.10849380 89.77943420]
[30.11636162 90.26515961]
[16.57397461 98.44528198]
[3.60282922 91.12416840]
[-11.38930416 91.60990143]
[-25.02525902 100.71994019]
[-39.61106873 93.22419739]
[-40.14210510 76.83364868]
[-26.07208061 68.40948486]
[-11.87503242 76.61776733]
[3.11710095 76.13203430]
[15.58714962 67.98666382]
[29.63063431 75.27302551]
[44.62276840 74.78730011]
[59.61489868 74.30157471]
[74.60703278 73.81584167]
[61.21732712 67.05449677]
[46.21770477 66.94847107]
[31.57163239 63.70923996]
[17.92627525 57.47993851]
[5.88457155 48.53581238]
[-4.02139759 37.27207565]
[-11.35392189 24.18643188]
[-15.78900337 9.85708904]
[-17.13067055 -5.08278799]
[-15.31964016 -19.97305870]
[-10.43593502 -34.15577316]
[-2.69534922 -47.00424957]
[7.56008768 -57.95075607]
[19.87722397 -66.51160431]
[33.71180725 -72.30852509]
[48.45253754 -75.08537292]
[63.44807434 -74.71943665]
[78.03581238 -71.22689819]
[91.57118225 -64.76207733]
[103.45608521 -55.61063004]
[113.16538239 -44.17692947]
[120.27005005 -30.96618652]
[124.45616150 -16.56214142]
[125.53874207 -1.60125923]
[123.46995544 13.25539303]
[118.34121704 27.35135269]
[110.37915039 40.06376648]
[99.93072510 50.83495331]
[95.35929108 65.12138367]
[106.22038269 54.77552414]
[117.08147430 44.42966843]
[127.85843658 33.99621201]
[138.55056763 23.47583580]
[149.15716553 12.86923409]
[159.67755127 2.17710066]
[170.19792175 -8.51503277]
[180.71829224 -19.20716667]
[191.23866272 -29.89929962]
[201.75904846 -40.59143448]
[212.27941895 -51.28356552]
[222.79978943 -61.97570038]
[233.32017517 -72.66783142]
[243.84054565 -83.35997009]
[232.88520813 -91.11902618]
[227.20736694 -106.65308380]
[231.01751709 -126.33520508]
[238.86535645 -139.11845398]
[246.71318054 -151.90170288]
[254.56101990 -164.68496704]
[246.53503418 -179.13322449]
[246.88430786 -195.56347656]
[255.41902161 -209.49754333]
[269.73123169 -217.18528748]
[285.87356567 -216.61375427]
[293.51336670 -229.52241516]
[293.14926147 -245.91751099]
[307.30432129 -254.19796753]
[321.41705322 -245.84555054]
[320.96948242 -229.45251465]
[306.42202759 -221.88261414]
[298.78222656 -208.97395325]
[306.25558472 -197.53395081]
[308.07656860 -183.92431641]
[303.83288574 -170.79603577]
[294.29922485 -160.73120117]
[281.29650879 -155.73516846]
[267.34426880 -156.83712769]
[259.49642944 -144.05387878]
[251.64860535 -131.27062988]
[243.80076599 -118.48737335]
[248.47015381 -112.61823273]
[257.80892944 -100.87995148]
[262.47833252 -95.01081085]
[276.69845581 -99.78445435]
[290.91860962 -104.55809784]
[295.44137573 -119.40141296]
[307.84533691 -128.72459412]
[323.36087036 -128.94268799]
[336.02197266 -119.97183990]
[340.96017456 -105.26150513]
[336.27664185 -90.46812439]
[323.77227783 -81.28005219]
[308.25527954 -81.23028564]
[295.69223022 -90.33795929]
[281.47210693 -85.56431580]
[267.25195312 -80.79067230]
[254.53266907 -72.83959198]
[244.01229858 -62.14746094]
[233.49192810 -51.45532608]
[222.97155762 -40.76319122]
[212.45117188 -30.07105827]
[201.93080139 -19.37892532]
[191.41043091 -8.68679237]
[180.89006042 2.00534177]
[170.36967468 12.69747543]
[159.84930420 23.38960838]
[157.39550781 30.37241554]
[149.07093811 34.16796875]
[138.37881470 44.68834305]
[135.81225586 51.63050079]
[127.42733002 55.29075623]
[116.56623840 65.63661194]
[105.70515442 75.98246765]
[130.02307129 90.51165771]
[128.64877319 125.40056610]
[131.78329468 140.06939697]
[134.91780090 154.73823547]
[149.08795166 169.06283569]
[142.37532043 187.18765259]
[145.98320007 201.74729919]
[149.59106445 216.30694580]
[153.19894409 230.86659241]
[156.80682373 245.42623901]
[160.41468811 259.98587036]
[182.68727112 270.16598511]
[190.22245789 293.20474243]
[178.51324463 314.14370728]
[184.42138672 327.93118286]
[190.32951355 341.71862793]
[196.23765564 355.50607300]
[202.14578247 369.29354858]
[217.30627441 372.60095215]
[227.60215759 384.21020508]
[229.07444763 399.65728760]
[221.15701294 413.00247192]
[206.89427185 419.11425781]
[191.77055359 415.64257812]
[181.60122681 403.92233276]
[180.29660034 388.46017456]
[188.35833740 375.20166016]
[182.45019531 361.41421509]
[176.54205322 347.62677002]
[170.63392639 333.83929443]
[164.72578430 320.05184937]
[158.33154297 320.39254761]
[151.99717712 319.35537720]
[146.01684570 316.98187256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 170]
[10 169]
[11 168]
[12 167]
[13 166]
[14 165]
[18 163]
[19 162]
[20 161]
[27 38]
[28 37]
[29 36]
[30 35]
[39 56]
[40 55]
[41 54]
[42 53]
[44 51]
[45 50]
[85 159]
[86 158]
[87 157]
[88 155]
[89 154]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
[96 146]
[97 145]
[98 144]
[99 143]
[102 126]
[103 125]
[104 124]
[105 123]
[110 117]
[111 116]
[129 142]
[130 141]
[131 140]
[173 190]
[174 189]
[175 188]
[176 187]
[177 186]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
