%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:37:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGGUGAGGGUGAGGAGGCCGGAGGGCGCCUCAUCCCACUCUGGAAGCUGAGCCGGCGGCGGGAGGAGCUAGGGCUGGAGCCUCUCCAGCCUCCCGCGAAGGUUUGAGCACAAA\
) } def
/len { sequence length } bind def

/coor [
[84.77921295 139.72026062]
[73.19740295 133.03016663]
[64.26560974 123.07431793]
[50.42710114 128.86186218]
[36.58858871 134.64939880]
[22.75007820 140.43693542]
[15.92826843 146.71900940]
[8.45365334 146.18785095]
[-5.53777981 151.59523010]
[-19.52921295 157.00262451]
[-33.52064514 162.41000366]
[-47.51207733 167.81738281]
[-61.50350952 173.22477722]
[-75.49494171 178.63215637]
[-89.48637390 184.03955078]
[-95.46688843 195.56733704]
[-107.33840179 199.74197388]
[-118.48084259 194.81910706]
[-132.61476135 199.84230042]
[-146.74867249 204.86549377]
[-156.96722412 217.69175720]
[-173.14196777 214.98812866]
[-178.63371277 199.53584290]
[-167.79301453 187.23091125]
[-151.77186584 190.73158264]
[-137.63795471 185.70838928]
[-123.50403595 180.68519592]
[-112.94444275 166.74162292]
[-94.89376068 170.04811096]
[-80.90232849 164.64073181]
[-66.91089630 159.23333740]
[-52.91946411 153.82595825]
[-38.92802811 148.41857910]
[-24.93659782 143.01118469]
[-10.94516468 137.60380554]
[3.04626799 132.19641113]
[16.96253777 126.59843445]
[30.80104828 120.81089020]
[44.63956070 115.02335358]
[58.47806931 109.23580933]
[58.08719635 92.74135590]
[64.00210571 77.33897400]
[75.33288574 65.34593201]
[90.37483978 58.56659317]
[106.86489105 58.02090836]
[122.32212830 63.79097366]
[134.42098999 75.00868225]
[147.92280579 68.47406769]
[161.42460632 61.93945312]
[174.83590698 55.22103119]
[188.15419006 48.32005692]
[201.47245789 41.41908264]
[214.79074097 34.51810455]
[228.10902405 27.61713028]
[229.17195129 13.79759789]
[236.89286804 2.41799116]
[249.14616394 -3.58094907]
[262.65261841 -2.71391344]
[273.85687256 4.68276501]
[287.35870361 -1.85184956]
[300.86050415 -8.38646412]
[314.36230469 -14.92107868]
[327.86410522 -21.45569420]
[341.36590576 -27.99030876]
[327.23895264 -33.03303146]
[318.60153198 -45.29657745]
[318.61199951 -60.29657364]
[327.26660156 -72.54801941]
[341.40060425 -77.57096863]
[355.84567261 -73.52869415]
[365.31973267 -61.89932251]
[366.35842896 -46.93532944]
[358.58258057 -34.10911560]
[373.18002319 -37.56097031]
[387.77743530 -41.01282120]
[402.37484741 -44.46467590]
[416.97229004 -47.91653061]
[431.56970215 -51.36838531]
[446.16711426 -54.82024002]
[460.76455688 -58.27209091]
[474.78717041 -67.80111694]
[487.82565308 -56.96439362]
[481.02182007 -41.43556595]
[464.21640015 -43.67467117]
[449.61898804 -40.22281647]
[435.02154541 -36.77096176]
[420.42413330 -33.31911087]
[405.82672119 -29.86725616]
[391.22927856 -26.41540146]
[376.63186646 -22.96354866]
[362.03445435 -19.51169395]
[347.90054321 -14.48850060]
[334.39871216 -7.95388556]
[320.89691162 -1.41927099]
[307.39511108 5.11534357]
[293.89331055 11.64995861]
[280.39151001 18.18457222]
[278.04876709 34.36920166]
[266.43948364 46.12038422]
[249.95788574 48.71097565]
[235.00999451 40.93540955]
[221.69171143 47.83638382]
[208.37344360 54.73735809]
[195.05516052 61.63833618]
[181.73687744 68.53931427]
[177.18412781 74.49115753]
[167.95922852 75.44126129]
[154.45741272 81.97587585]
[140.95561218 88.51049042]
[142.49874878 101.79636383]
[139.83996582 114.90462494]
[133.24214172 126.53923798]
[123.35759735 135.54988098]
[111.16365051 141.04563904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[18 27]
[19 26]
[20 25]
[47 109]
[48 108]
[49 107]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[73 91]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
