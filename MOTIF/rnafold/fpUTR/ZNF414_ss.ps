%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:52:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUGAGAGGUGGAAAAUGGCGCUGACGUGAGCGCGAACUCGCACUGCCCAGAGGGUGGCCGCCGCCUAAGCUGCAGCCGCCGGAGCCGCAGAAACAAGAGGCCGAGCCGUGUCGAAG\
) } def
/len { sequence length } bind def

/coor [
[77.90012360 285.70486450]
[70.77522278 298.90469360]
[58.98524475 308.17813110]
[44.47840500 311.99276733]
[29.65184593 309.71832275]
[16.95554543 301.73059082]
[8.48747349 289.34948730]
[5.64691162 274.62088013]
[8.90219116 259.98095703]
[-2.57432222 269.63961792]
[-14.05083466 279.29824829]
[-25.52734756 288.95690918]
[-24.28794861 304.42440796]
[-32.40553284 317.64880371]
[-46.75872040 323.54504395]
[-61.82842636 319.84588623]
[-71.82003021 307.97375488]
[-72.89156342 292.49371338]
[-64.63100433 279.35818481]
[-50.21469116 273.61801147]
[-35.18600464 277.48040771]
[-23.70949173 267.82174683]
[-12.23297882 258.16308594]
[-0.75646585 248.50444031]
[8.90219116 237.02792358]
[16.45927620 224.07066345]
[24.01636124 211.11340332]
[31.57344437 198.15615845]
[39.13053131 185.19889832]
[46.68761444 172.24163818]
[47.34767532 164.78495789]
[54.61906815 159.04586792]
[62.51555252 146.29261780]
[62.63721085 131.39849854]
[76.48045349 123.73852539]
[84.37693787 110.98526764]
[81.16180420 96.85695648]
[88.78955841 84.53771973]
[102.86981201 81.11824799]
[110.76628876 68.36499023]
[118.66277313 55.61173630]
[110.64143372 38.38391495]
[114.44582367 19.91565323]
[128.40264893 7.45728540]
[146.88856506 5.79239321]
[153.75129700 -7.54563332]
[160.61402893 -20.88365936]
[167.47676086 -34.22168732]
[157.71774292 -45.84223938]
[153.16352844 -60.27491760]
[154.47840881 -75.31103516]
[161.43098450 -88.66203308]
[172.93418884 -98.30781555]
[187.21508789 -102.80238342]
[202.08816528 -101.49053192]
[208.95089722 -114.82855988]
[215.81362915 -128.16658020]
[222.67636108 -141.50460815]
[229.53909302 -154.84263611]
[236.40180969 -168.18066406]
[235.83558655 -183.99172974]
[248.53852844 -191.76890564]
[255.40126038 -205.10693359]
[254.83502197 -220.91801453]
[267.53796387 -228.69519043]
[274.40069580 -242.03321838]
[273.06726074 -258.37805176]
[286.70767212 -267.48144531]
[301.28982544 -259.97857666]
[301.81286621 -243.58778381]
[287.73873901 -235.17048645]
[280.87600708 -221.83245850]
[281.93310547 -206.97541809]
[268.73928833 -198.24420166]
[261.87655640 -184.90618896]
[262.93365479 -170.04913330]
[249.73983765 -161.31793213]
[242.87710571 -147.97990417]
[236.01438904 -134.64187622]
[229.15165710 -121.30385590]
[222.28892517 -107.96582794]
[215.42619324 -94.62779999]
[225.14018250 -83.28903198]
[229.78553772 -69.05645752]
[228.62477112 -54.08924484]
[221.80371094 -40.67056656]
[210.33404541 -30.85933304]
[195.94331360 -26.17428398]
[180.81478882 -27.35895538]
[173.95205688 -14.02092934]
[167.08932495 -0.68290347]
[160.22659302 12.65512276]
[167.15705872 21.66416359]
[170.18067932 32.67465973]
[168.81086731 44.06243515]
[163.21212769 54.13228226]
[154.18139648 61.37030792]
[143.03483582 64.67147827]
[131.41603088 63.50822067]
[123.51954651 76.26147461]
[115.62306213 89.01473236]
[118.83819580 103.14304352]
[111.21044159 115.46228027]
[97.13018799 118.88175201]
[89.23371124 131.63500977]
[88.54724121 147.44131470]
[75.26880646 154.18908691]
[67.37232971 166.94235229]
[59.64487076 179.79872131]
[52.08778381 192.75598145]
[44.53070068 205.71324158]
[36.97361755 218.67048645]
[29.41653061 231.62774658]
[21.85944557 244.58500671]
[35.73102188 238.87716675]
[50.72831726 239.16201782]
[64.37313843 245.39248657]
[74.41078949 256.53903198]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 24]
[10 23]
[11 22]
[12 21]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[32 108]
[33 107]
[35 105]
[36 104]
[39 101]
[40 100]
[41 99]
[45 92]
[46 91]
[47 90]
[48 89]
[55 82]
[56 81]
[57 80]
[58 79]
[59 78]
[60 77]
[62 75]
[63 74]
[65 72]
[66 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
