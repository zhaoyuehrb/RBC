%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAGACUCUGUCCUGGGACUUGGUGGUGCUACCCUUGGCCUCCCACAGUCCUGCCACCCUGCUGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[125.91687012 355.55761719]
[131.67247009 341.42126465]
[142.99736023 331.18850708]
[138.71731567 316.81210327]
[134.43727112 302.43569946]
[130.15722656 288.05926514]
[125.87718201 273.68286133]
[112.26668549 271.34164429]
[100.97473145 263.27523804]
[94.28280640 251.04208374]
[93.57389832 237.04940796]
[99.04708862 224.07957458]
[109.66639709 214.73687744]
[105.98411560 200.19587708]
[102.85404205 198.03224182]
[100.75241089 194.10034180]
[100.56893158 188.97225952]
[102.86614990 183.62774658]
[101.01075745 168.74293518]
[99.15536499 153.85812378]
[97.29998016 138.97332764]
[95.44458771 124.08851624]
[93.58920288 109.20370483]
[91.42658234 94.36042023]
[88.95766449 79.56500244]
[86.48874664 64.76958466]
[76.58554077 52.43114471]
[82.12247467 38.60393524]
[79.65354919 23.80851746]
[75.03516388 15.58513165]
[77.40155029 8.35170364]
[75.54615784 -6.53310537]
[73.69076538 -21.41791344]
[71.83538055 -36.30272293]
[61.51593781 -49.04796219]
[67.64572144 -64.25841522]
[83.91893005 -66.28686523]
[93.59508514 -53.04662323]
[86.72018433 -38.15811157]
[88.57557678 -23.27330399]
[90.43096924 -8.38849449]
[92.28635406 6.49631405]
[94.44897461 21.33959770]
[96.91789246 36.13501740]
[106.64450836 47.41518784]
[101.28416443 62.30066299]
[103.75308228 77.09608459]
[106.22200012 91.89150238]
[110.66390991 98.91972351]
[108.47400665 107.34831238]
[110.32939911 122.23312378]
[112.18478394 137.11793518]
[114.04017639 152.00274658]
[115.89556885 166.88754272]
[117.75095367 181.77235413]
[120.52512360 196.51359558]
[124.20740509 211.05459595]
[140.04209900 215.30903625]
[151.56481934 226.84278870]
[155.75608826 242.50209045]
[151.58337402 258.07019043]
[140.25360107 269.40280151]
[144.53364563 283.77923584]
[148.81369019 298.15563965]
[153.09371948 312.53204346]
[157.37376404 326.90847778]
[172.45138550 329.28085327]
[185.00161743 337.96731567]
[192.53260803 351.24313354]
[193.54907227 366.47235107]
[187.84918213 380.63125610]
[176.56468201 390.90853882]
[161.93608093 395.26364136]
[146.86793518 392.83187866]
[134.35200500 384.09609985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 66]
[4 65]
[5 64]
[6 63]
[7 62]
[13 57]
[14 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 48]
[25 47]
[26 46]
[28 44]
[29 43]
[31 42]
[32 41]
[33 40]
[34 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
