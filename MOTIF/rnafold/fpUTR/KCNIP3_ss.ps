%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAUUACGUCUGGGUCCAAGCAAACAUGAGGCAGCUGCCAGCCGGCCUGGGCAGUCUUGUCUGCCUCGGCUGUGAAGUGGGGAGGCUGGCAACAGUUUUCUUCAGCGCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[52.28571701 320.92910767]
[46.72118378 335.10498047]
[35.86732101 345.78738403]
[21.60462379 351.12548828]
[6.40419388 350.19445801]
[-7.10040283 343.15557861]
[-16.56941414 331.22839355]
[-20.36227608 316.47937012]
[-17.82185364 301.46383667]
[-9.38828754 288.78332520]
[3.47725272 280.63485718]
[18.54573631 278.43017578]
[22.55866051 263.97689819]
[26.57158661 249.52366638]
[30.58451080 235.07040405]
[34.59743500 220.61715698]
[38.61036301 206.16390991]
[37.22054291 203.58334351]
[36.84033966 200.26148987]
[37.77143860 196.60783386]
[40.15105820 193.13807678]
[43.91848373 190.40997314]
[49.47055435 176.47531128]
[34.71331024 179.16300964]
[23.23073006 169.51156616]
[23.34016991 154.51197815]
[34.96236038 145.02911377]
[49.67881775 147.93185425]
[56.82975006 161.11785889]
[64.21217346 148.06030273]
[71.59459686 135.00274658]
[78.97702026 121.94519043]
[86.35945129 108.88763428]
[85.72055817 92.18000031]
[100.14219666 83.72011566]
[107.16832733 70.46743774]
[114.19445038 57.21475601]
[121.22058105 43.96207809]
[127.70267487 30.43497849]
[133.63005066 16.65578461]
[139.55743408 2.87659121]
[145.48481750 -10.90260315]
[151.41218567 -24.68179703]
[157.33956909 -38.46099091]
[163.26695251 -52.24018478]
[166.88700867 -66.79679871]
[168.10440063 -81.74732208]
[169.32177734 -96.69783783]
[170.53915405 -111.64835358]
[163.94738770 -126.03095245]
[172.69209290 -138.08828735]
[173.90946960 -153.03880310]
[175.12684631 -167.98933411]
[176.34423828 -182.93984985]
[177.56161499 -197.89036560]
[178.77899170 -212.84088135]
[168.35777283 -224.72253418]
[169.47381592 -240.48736572]
[181.46499634 -250.78237915]
[197.21714783 -249.49972534]
[207.38481140 -237.40037537]
[205.93568420 -221.66267395]
[193.72950745 -211.62350464]
[192.51213074 -196.67298889]
[191.29475403 -181.72245789]
[190.07737732 -166.77194214]
[188.85998535 -151.82142639]
[187.64260864 -136.87091064]
[194.32145691 -123.55767059]
[185.48966980 -110.43097687]
[184.27229309 -95.48045349]
[183.05491638 -80.52993774]
[181.83753967 -65.57942200]
[192.11572266 -76.50457001]
[206.05961609 -82.03338623]
[221.03178406 -81.12010956]
[234.20030212 -73.93748474]
[243.07438660 -61.84407425]
[245.97555542 -47.12730789]
[242.35504150 -32.57080078]
[232.89765930 -20.92786407]
[219.39224243 -14.40071297]
[204.39328003 -14.22393608]
[190.73777771 -20.43096924]
[181.00862122 -31.84777451]
[177.04614258 -46.31280518]
[171.11875916 -32.53361130]
[165.19139099 -18.75441933]
[159.26400757 -4.97522449]
[153.33662415 8.80396938]
[147.40925598 22.58316422]
[141.48187256 36.36235809]
[142.53234863 39.86082458]
[141.85440063 44.05567551]
[139.13426208 48.08752823]
[134.47325134 50.98820496]
[127.44712830 64.24088287]
[120.42100525 77.49356842]
[113.39488220 90.74624634]
[116.13779449 102.15089417]
[110.50360107 112.43901062]
[99.41700745 116.27005768]
[92.03458405 129.32762146]
[84.65215302 142.38517761]
[77.26972961 155.44273376]
[69.88730621 168.50028992]
[63.40520859 182.02738953]
[57.85313416 195.96203613]
[53.06361008 210.17683411]
[49.05068588 224.63008118]
[45.03776169 239.08334351]
[41.02483749 253.53659058]
[37.01190948 267.98983765]
[32.99898529 282.44308472]
[44.77388382 292.10079956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 114]
[13 113]
[14 112]
[15 111]
[16 110]
[17 109]
[22 108]
[23 107]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[35 99]
[36 98]
[37 97]
[38 96]
[39 92]
[40 91]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 73]
[47 72]
[48 71]
[49 70]
[51 68]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
