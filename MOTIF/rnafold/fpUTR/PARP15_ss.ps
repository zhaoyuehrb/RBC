%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAAAAGAAGUUCGAGGCACAAGCCUGUUGGGUGGGGCGCAACUGCAGUCCCAGCGAGCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[81.26476288 262.29501343]
[66.65092468 266.39379883]
[51.54364395 264.93280029]
[37.98605728 258.10958862]
[27.81171036 246.84695435]
[22.39660645 232.66806030]
[22.47309113 217.49049377]
[28.03082085 203.36689758]
[38.31815720 192.20736694]
[51.94382477 185.52113342]
[67.06506348 184.21247864]
[71.22966003 169.80220032]
[75.39426422 155.39192200]
[79.55886078 140.98164368]
[83.72346497 126.57135773]
[87.88806152 112.16107941]
[82.39236450 98.20410156]
[69.52079010 90.50199127]
[56.64921188 82.79988098]
[43.77763367 75.09776306]
[27.38096237 75.38262177]
[19.16902733 61.18768311]
[27.58956718 47.11549377]
[43.98025131 47.64230728]
[51.47974777 62.22618866]
[64.35132599 69.92829895]
[77.22290039 77.63041687]
[90.09447479 85.33252716]
[81.49253082 73.04405975]
[83.35142517 58.15968704]
[94.71141815 48.36425018]
[109.70731354 48.71515274]
[120.59669495 59.03121948]
[121.75736237 73.98625183]
[112.58829498 85.85998535]
[125.80673218 78.76966095]
[139.02517700 71.67932892]
[152.24362183 64.58900452]
[165.46206665 57.49867630]
[178.68051147 50.40834808]
[191.72911072 43.01009369]
[204.60067749 35.30798340]
[212.10017395 20.72410202]
[228.49085999 20.19728470]
[236.91140747 34.26947403]
[228.69946289 48.46440887]
[212.30279541 48.17955780]
[199.43121338 55.88167191]
[195.16316223 62.23937988]
[185.77084351 63.62679291]
[172.55239868 70.71711731]
[159.33395386 77.80744934]
[146.11550903 84.89777374]
[132.89706421 91.98810577]
[119.67861938 99.07843018]
[113.93062592 111.54598999]
[102.29833984 116.32568359]
[98.13374329 130.73596191]
[93.96913910 145.14624023]
[89.80454254 159.55651855]
[85.63993835 173.96679688]
[81.47534180 188.37707520]
[93.56726074 197.55039978]
[101.52552795 210.47442627]
[104.27384186 225.40129089]
[101.44052124 240.31224060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 62]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 28]
[18 27]
[19 26]
[20 25]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[40 50]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
