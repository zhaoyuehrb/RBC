%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:59:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCCGCCCCGAGACCGGGCCCGGGGGCGCGGGGCGGCGGGAUGCGGCGCCCGGGGCGGCGAUGACCGCGGAGCGCACGCCGCGGGCCCGGCCCUGACCCCGCCGCCCGCCCGCUGAGCCCCCCGCCGAGGUCCGGACAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[96.61676025 482.17477417]
[81.50833893 484.08666992]
[66.93033600 479.68191528]
[55.40848923 469.72366333]
[48.93902206 455.93722534]
[48.64280701 440.71118164]
[54.57117081 426.68356323]
[65.69699097 416.28472900]
[80.09263611 411.31631470]
[81.34780884 396.36889648]
[82.60297394 381.42150879]
[83.38801575 366.44207764]
[83.70214844 351.44537354]
[84.01628876 336.44866943]
[80.99189758 329.65042114]
[84.49731445 321.14205933]
[85.12545013 306.15521240]
[85.75358582 291.16836548]
[86.38172150 276.18151855]
[77.41278076 261.13043213]
[87.32213593 245.64630127]
[87.63627625 230.64959717]
[87.95040894 215.65287781]
[79.78773499 206.66950989]
[79.96683502 194.13111877]
[88.93904114 184.80485535]
[89.56717682 169.81802368]
[90.19530487 154.83117676]
[90.82344055 139.84432983]
[91.45157623 124.85749054]
[92.07971191 109.87065125]
[92.23678589 94.87146759]
[91.92265320 79.87476349]
[91.60852051 64.87805176]
[91.29438019 49.88134003]
[90.98024750 34.88462830]
[90.19520569 19.90518570]
[88.94004059 4.95779324]
[87.68486786 -9.98960018]
[86.42970276 -24.93699265]
[85.17453766 -39.88438416]
[83.91936493 -54.83177948]
[82.66419983 -69.77917480]
[81.40903473 -84.72656250]
[63.07693481 -94.22360992]
[54.14819717 -112.68694305]
[58.03435898 -132.68469238]
[73.02496338 -146.27612305]
[70.21424103 -161.01042175]
[67.40352631 -175.74473572]
[62.69278336 -183.64974976]
[64.69161987 -190.81686401]
[62.19009018 -205.60679626]
[59.68856049 -220.39674377]
[57.18702698 -235.18667603]
[54.68549728 -249.97662354]
[44.75511169 -262.29318237]
[50.26154709 -276.13256836]
[47.76001740 -290.92251587]
[45.25848770 -305.71246338]
[42.75695419 -320.50241089]
[40.10068512 -335.26531982]
[37.28996277 -349.99963379]
[34.47924423 -364.73394775]
[19.71713638 -368.61245728]
[8.10533333 -378.51846313]
[1.94936872 -392.48510742]
[2.47151279 -407.73928833]
[9.56809425 -421.25228882]
[21.83008003 -430.34109497]
[36.82284546 -433.20111084]
[51.56956482 -429.26449585]
[63.14226913 -419.31283569]
[69.24318695 -405.32208252]
[68.66097260 -390.07006836]
[61.51123428 -376.58511353]
[49.21355438 -367.54467773]
[52.02427292 -352.81036377]
[54.83499146 -338.07604980]
[59.20672226 -332.05520630]
[57.54689407 -323.00393677]
[60.04842758 -308.21398926]
[62.54995728 -293.42404175]
[65.05149078 -278.63409424]
[74.80294800 -267.37539673]
[69.47544098 -252.47814941]
[71.97696686 -237.68821716]
[74.47850037 -222.89826965]
[76.98003387 -208.10833740]
[79.48155975 -193.31838989]
[82.13783264 -178.55545044]
[84.94855499 -163.82115173]
[87.75926971 -149.08683777]
[97.41394806 -147.19799805]
[106.06407166 -142.45028687]
[112.88278961 -135.27691650]
[117.21209717 -126.34397888]
[118.62628937 -116.48849487]
[116.97373962 -106.64006042]
[112.39297485 -97.73316956]
[105.30120850 -90.61850739]
[96.35642242 -85.98173523]
[97.61159515 -71.03433990]
[98.86676025 -56.08694458]
[100.12192535 -41.13955307]
[101.37709808 -26.19215965]
[102.63226318 -11.24476719]
[103.88742828 3.70262551]
[105.14260101 18.65001869]
[107.64938354 21.21787071]
[109.00314331 25.15301895]
[108.56345367 29.88407898]
[105.97695160 34.57049179]
[106.29109192 49.56720352]
[106.60522461 64.56391144]
[106.91936493 79.56062317]
[107.23349762 94.55733490]
[109.66979218 97.64186859]
[110.70355225 101.80052185]
[109.88033295 106.36803436]
[107.06655884 110.49877930]
[106.43842316 125.48562622]
[105.81028748 140.47247314]
[105.18215179 155.45930481]
[104.55401611 170.44615173]
[103.92588043 185.43299866]
[112.84342957 201.50878906]
[102.94712067 215.96701050]
[102.63298035 230.96372986]
[102.31884766 245.96043396]
[110.68774414 255.83166504]
[110.07920074 268.35653687]
[101.36856079 276.80966187]
[100.74042511 291.79650879]
[100.11228943 306.78335571]
[99.48416138 321.77020264]
[99.01299286 336.76278687]
[98.69886017 351.75949097]
[98.38472748 366.75622559]
[100.97122192 371.44262695]
[101.41091156 376.17367554]
[100.05715179 380.10882568]
[97.55036926 382.67669678]
[96.29519653 397.62408447]
[95.04003143 412.57147217]
[108.40550995 419.87106323]
[117.64131927 431.97970581]
[121.14729309 446.79956055]
[118.31600189 461.76296997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 145]
[10 144]
[11 143]
[12 139]
[13 138]
[14 137]
[16 136]
[17 135]
[18 134]
[19 133]
[21 130]
[22 129]
[23 128]
[26 126]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 109]
[38 108]
[39 107]
[40 106]
[41 105]
[42 104]
[43 103]
[44 102]
[48 93]
[49 92]
[50 91]
[52 90]
[53 89]
[54 88]
[55 87]
[56 86]
[58 84]
[59 83]
[60 82]
[61 81]
[62 79]
[63 78]
[64 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
