%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUUUCAUGUUAAGAGCAAGAAGGCUUUUGUUCUUGGAGCAGGCAGAGAGUAUUGUACAUUCUUUUGGCCGAGGAAACAGAAUGAGCUGCGACAGUCUUAAGGACAAACAUUUGUGAAACCGAUCUGCUCCUCCGUAUAAAGGACAUCAGUCAUUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[65.38603210 439.43286133]
[51.00183105 435.17907715]
[39.52304459 425.52313232]
[32.86916733 412.07971191]
[32.15313339 397.09521484]
[24.40264320 409.93771362]
[16.65215111 422.78021240]
[16.14603233 438.59332275]
[2.94543791 445.49215698]
[-4.80505276 458.33465576]
[-12.55554295 471.17715454]
[-20.30603409 484.01965332]
[-23.31342697 500.70474243]
[-40.17897797 502.43374634]
[-46.50928116 486.70596313]
[-33.14853668 476.26916504]
[-25.39804649 463.42666626]
[-17.64755630 450.58416748]
[-9.89706516 437.74163818]
[-9.94531250 422.84713745]
[3.80964828 415.02972412]
[11.56013870 402.18722534]
[19.31062889 389.34472656]
[25.38509369 375.62973022]
[29.68714142 361.25988770]
[33.98918915 346.89004517]
[38.29124069 332.52020264]
[31.01821899 319.57266235]
[35.17640305 304.93832397]
[48.80628967 297.39749146]
[53.10833740 283.02764893]
[57.41038513 268.65780640]
[61.71243286 254.28796387]
[66.01448059 239.91812134]
[70.31652832 225.54827881]
[74.61857605 211.17843628]
[77.79413605 196.51843262]
[79.82410431 181.65643311]
[81.85408020 166.79441833]
[83.88404846 151.93241882]
[85.91401672 137.07040405]
[87.94398499 122.20840454]
[89.97395325 107.34639740]
[87.08326721 92.62757111]
[79.58326721 79.63718414]
[72.08326721 66.64680481]
[64.58326721 53.65642548]
[49.27721405 51.91551208]
[38.06223679 41.61610413]
[35.09745407 26.86232567]
[41.31437683 13.35351944]
[33.81437683 0.36313796]
[20.21359253 -7.71951151]
[20.55065536 -22.61030197]
[13.05065441 -35.60068512]
[5.55065489 -48.59106445]
[-1.94934523 -61.58144760]
[-6.55881596 -64.23464966]
[-9.37627411 -68.02572632]
[-10.26934052 -72.06775665]
[-9.48245907 -75.55248260]
[-16.21444702 -88.95697021]
[-22.94643402 -102.36145782]
[-29.67842293 -115.76594543]
[-36.41041183 -129.17044067]
[-43.14239883 -142.57492065]
[-57.85758591 -148.96575928]
[-61.89651108 -164.49208069]
[-52.16086197 -177.24342346]
[-36.11898804 -177.43804932]
[-26.07684708 -164.92665100]
[-29.73790741 -149.30691528]
[-23.00592041 -135.90242004]
[-16.27393341 -122.49793243]
[-9.54194546 -109.09344482]
[-2.80995750 -95.68895721]
[3.92203021 -82.28446960]
[11.04103565 -69.08144379]
[18.54103661 -56.09106445]
[26.04103661 -43.10068512]
[33.54103470 -30.11030197]
[46.60536957 -22.95681190]
[46.80475616 -7.13686228]
[54.30475616 5.85351896]
[69.11219025 7.22390747]
[80.40694427 17.16837692]
[83.71900177 32.03053284]
[77.57365417 46.15642548]
[85.07365417 59.14680481]
[92.57365417 72.13718414]
[100.07365417 85.12757111]
[107.51414490 86.07045746]
[109.40014648 71.18949127]
[124.28108215 73.07572174]
[122.39513397 87.95622253]
[129.83563232 88.89910889]
[140.33889771 78.19016266]
[150.84214783 67.48121643]
[161.34541321 56.77227020]
[168.11958313 41.23049164]
[184.92926025 43.43753433]
[187.46185303 60.20125580]
[172.05435181 67.27552795]
[161.55110168 77.98447418]
[151.04783630 88.69342041]
[140.54457092 99.40236664]
[154.89619446 95.03991699]
[169.24781799 90.67745972]
[183.92791748 93.75878143]
[197.07192993 100.98616028]
[207.53781128 111.73163605]
[214.41621399 125.06158447]
[217.10951233 139.81781006]
[215.38368225 154.71820068]
[209.38868713 168.46810913]
[199.64540100 179.87286377]
[187.00038147 187.94152832]
[172.55232239 191.97308350]
[157.55653381 191.61720276]
[143.31597900 186.90483093]
[131.06794739 178.24540710]
[121.87663269 166.39131165]
[116.54062653 152.37249756]
[115.52348328 137.40808105]
[110.17971802 123.39222717]
[104.83596039 109.37636566]
[102.80599213 124.23837280]
[100.77602386 139.10037231]
[98.74605560 153.96238708]
[96.71607971 168.82438660]
[94.68611145 183.68640137]
[92.65614319 198.54840088]
[104.23228455 189.00938416]
[119.19461823 187.94702148]
[132.00241089 195.75474548]
[137.91278076 209.54124451]
[134.73704529 224.20121765]
[123.65121460 234.30589294]
[108.76051331 236.11338806]
[95.57914734 228.95436096]
[88.98841858 215.48048401]
[84.68637085 229.85032654]
[80.38432312 244.22016907]
[76.08227539 258.59002686]
[71.78022766 272.95986938]
[67.47817993 287.32971191]
[63.17613220 301.69955444]
[70.41998291 315.48956299]
[65.85238647 330.00134277]
[52.66108322 336.82226562]
[48.35903168 351.19210815]
[44.05698395 365.56195068]
[39.75493622 379.93179321]
[51.33135605 370.39309692]
[65.75808716 366.28585815]
[80.62266541 368.29687500]
[93.43942261 376.08987427]
[102.06512451 388.36169434]
[105.05735016 403.06021118]
[101.91575623 417.72753906]
[93.16567230 429.91094971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 23]
[6 22]
[7 21]
[9 19]
[10 18]
[11 17]
[12 16]
[24 153]
[25 152]
[26 151]
[27 150]
[30 147]
[31 146]
[32 145]
[33 144]
[34 143]
[35 142]
[36 141]
[37 132]
[38 131]
[39 130]
[40 129]
[41 128]
[42 127]
[43 126]
[44 91]
[45 90]
[46 89]
[47 88]
[51 84]
[52 83]
[54 81]
[55 80]
[56 79]
[57 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
