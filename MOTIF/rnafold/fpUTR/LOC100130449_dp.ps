%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:36 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (LOC100130449)
} def

/sequence { (\
GUGCCAGGCUGAGCAGACUCAGGAGGCGUCUCUCCGAGGGUGUGGGCUGUG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.009835432 ubox
1 47 0.042276548 ubox
1 50 0.022254099 ubox
2 8 0.009803134 ubox
2 15 0.005162342 ubox
2 28 0.009557546 ubox
2 46 0.040002194 ubox
2 49 0.011726779 ubox
2 51 0.167032878 ubox
3 9 0.010759484 ubox
3 14 0.006166073 ubox
3 27 0.020011520 ubox
3 47 0.076082743 ubox
3 48 0.004200148 ubox
3 50 0.378486893 ubox
4 8 0.010707701 ubox
4 13 0.006318881 ubox
4 26 0.020030814 ubox
4 45 0.062873895 ubox
4 46 0.072152871 ubox
4 49 0.344299495 ubox
5 11 0.006613053 ubox
5 25 0.019966496 ubox
5 44 0.067670505 ubox
5 45 0.067600596 ubox
5 49 0.808731583 ubox
5 51 0.234724809 ubox
6 10 0.005520318 ubox
6 43 0.071505105 ubox
6 48 0.822463096 ubox
6 50 0.216259376 ubox
7 47 0.794417500 ubox
7 48 0.515838752 ubox
8 14 0.007209568 ubox
8 41 0.071822833 ubox
8 43 0.011436630 ubox
8 47 0.597889898 ubox
8 50 0.023162170 ubox
9 13 0.007932341 ubox
9 22 0.020359428 ubox
9 40 0.071933185 ubox
9 42 0.011203437 ubox
9 45 0.760955781 ubox
9 46 0.635491833 ubox
9 49 0.023891603 ubox
10 21 0.025503383 ubox
10 38 0.003386239 ubox
10 39 0.069358359 ubox
10 44 0.716648513 ubox
10 45 0.617172724 ubox
11 20 0.032366571 ubox
11 34 0.032199386 ubox
11 43 0.122902971 ubox
12 19 0.032358060 ubox
12 33 0.032303206 ubox
12 48 0.018575810 ubox
13 18 0.032091093 ubox
13 32 0.032301837 ubox
13 41 0.121957708 ubox
13 43 0.941836184 ubox
13 47 0.019158162 ubox
13 50 0.004300660 ubox
14 40 0.121925776 ubox
14 42 0.966438797 ubox
14 44 0.201420214 ubox
14 46 0.018390013 ubox
14 49 0.004517404 ubox
15 31 0.032228096 ubox
15 41 0.963959138 ubox
15 43 0.206259603 ubox
15 48 0.004521296 ubox
16 30 0.032354745 ubox
16 47 0.004522377 ubox
17 29 0.032348867 ubox
17 41 0.210924537 ubox
18 28 0.032315226 ubox
18 38 0.974483566 ubox
18 39 0.037265665 ubox
18 40 0.214481968 ubox
18 46 0.003222109 ubox
19 26 0.027826204 ubox
19 37 0.974380711 ubox
19 38 0.035757845 ubox
19 39 0.214212079 ubox
19 45 0.003219103 ubox
20 25 0.028080937 ubox
20 36 0.970195092 ubox
20 38 0.212821713 ubox
20 39 0.003256956 ubox
20 44 0.003216534 ubox
21 33 0.005559906 ubox
21 43 0.003168000 ubox
22 32 0.005503456 ubox
22 33 0.059805967 ubox
22 34 0.055899599 ubox
22 35 0.995240987 ubox
23 30 0.005320630 ubox
23 32 0.082828108 ubox
23 33 0.007034333 ubox
23 34 0.995753301 ubox
24 29 0.005222762 ubox
24 31 0.083200590 ubox
24 33 0.995566434 ubox
25 30 0.083204273 ubox
25 31 0.016277419 ubox
25 32 0.994114814 ubox
25 33 0.005433312 ubox
26 30 0.138394481 ubox
26 31 0.696243499 ubox
26 32 0.012386397 ubox
28 47 0.014855379 ubox
29 39 0.004518583 ubox
29 46 0.014660482 ubox
30 38 0.007163510 ubox
30 40 0.004187240 ubox
30 45 0.014605161 ubox
30 46 0.003405791 ubox
31 37 0.007180893 ubox
31 39 0.004240894 ubox
31 44 0.013679870 ubox
31 45 0.003407940 ubox
32 36 0.007124932 ubox
32 38 0.004372604 ubox
32 40 0.007164378 ubox
32 44 0.004562882 ubox
33 37 0.003940670 ubox
33 39 0.007064998 ubox
33 40 0.005858449 ubox
33 46 0.006884521 ubox
34 38 0.006831438 ubox
34 39 0.006194173 ubox
34 40 0.010454208 ubox
34 45 0.009278394 ubox
35 39 0.010393863 ubox
35 42 0.004444467 ubox
35 44 0.009316737 ubox
36 43 0.007338801 ubox
39 48 0.006196229 ubox
40 47 0.006749125 ubox
41 46 0.006675183 ubox
5 49 0.9500000 lbox
6 48 0.9500000 lbox
7 47 0.9500000 lbox
9 45 0.9500000 lbox
10 44 0.9500000 lbox
13 43 0.9500000 lbox
14 42 0.9500000 lbox
15 41 0.9500000 lbox
18 38 0.9500000 lbox
19 37 0.9500000 lbox
20 36 0.9500000 lbox
22 35 0.9500000 lbox
23 34 0.9500000 lbox
24 33 0.9500000 lbox
25 32 0.9500000 lbox
26 31 0.9500000 lbox
showpage
end
%%EOF
