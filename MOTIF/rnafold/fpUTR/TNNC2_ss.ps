%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUUUGGGUGGUGGAGUGCAAAGGAGGCGACCUGCAACAGAGGAGUCCCGGUCACCAGCAACC\
) } def
/len { sequence length } bind def

/coor [
[69.50228119 310.23327637]
[54.15012360 311.75476074]
[40.42291260 304.71435547]
[32.70095062 291.35864258]
[33.44828415 275.94940186]
[42.42644501 263.40362549]
[56.77053452 257.72467041]
[59.56743240 242.98773193]
[62.36433411 228.25079346]
[55.75194168 217.86218262]
[58.20960999 205.38182068]
[68.92890167 197.80696106]
[72.41348267 183.21731567]
[75.89806366 168.62767029]
[79.38264465 154.03802490]
[82.86722565 139.44839478]
[86.35180664 124.85874176]
[79.20857239 119.28591919]
[74.18737030 111.74472046]
[71.80068207 103.00481415]
[72.29210663 93.95822906]
[75.61148071 85.52828217]
[81.42002106 78.57537079]
[89.12489319 73.80911255]
[97.93970490 71.71598053]
[106.96480560 72.50960541]
[114.36306000 59.46100998]
[115.97026825 50.10379410]
[122.42628479 45.98594666]
[130.42802429 33.29846573]
[138.42976379 20.61098480]
[136.35809326 7.64989662]
[143.56854248 -2.82908535]
[155.62054443 -5.35817814]
[164.20817566 -17.65665436]
[172.79582214 -29.95513153]
[168.55441284 -45.00652695]
[175.02725220 -59.24156570]
[189.15805054 -65.93890381]
[204.27468872 -61.93625641]
[213.23954773 -49.12355423]
[211.81970215 -33.55056381]
[200.68554688 -22.57037544]
[185.09429932 -21.36749649]
[176.50665283 -9.06901932]
[167.91902161 3.22945690]
[167.52453613 20.62216377]
[151.11724854 28.61272430]
[143.11550903 41.30020523]
[135.11376953 53.98768616]
[127.41165161 66.85926056]
[120.01339722 79.90785980]
[128.35678101 99.64901733]
[120.50457001 119.59062958]
[100.94145203 128.34332275]
[97.45687103 142.93296814]
[93.97229004 157.52261353]
[90.48770905 172.11225891]
[87.00312805 186.70190430]
[83.51854706 201.29154968]
[89.26744080 218.61201477]
[77.10127258 231.04769897]
[74.30437469 245.78463745]
[71.50746918 260.52157593]
[82.77348328 271.06103516]
[86.53083801 286.02386475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 64]
[8 63]
[9 62]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[26 52]
[27 51]
[29 50]
[30 49]
[31 48]
[34 46]
[35 45]
[36 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
