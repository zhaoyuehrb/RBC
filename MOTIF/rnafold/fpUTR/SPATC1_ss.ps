%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUCUGCACCCUCCUUCAGCCCAGGCAAGGCCUGGGGCCCUGGGCAGCCUCCAGGUGCAGUGCCCUCCCGUGGGCCGCACCCUUGCCACUGCCCCAGGGC\
) } def
/len { sequence length } bind def

/coor [
[26.67339325 163.55723572]
[37.41269302 174.02944946]
[45.16668701 186.86984253]
[49.43498230 201.24974060]
[49.94212341 216.24116516]
[46.65538788 230.87664795]
[39.78687668 244.21170044]
[29.77984428 255.38575745]
[17.28009415 263.67770386]
[3.09428430 268.55239868]
[-11.86211205 269.69531250]
[-26.62389374 267.03262329]
[-40.23841858 260.73623657]
[-51.82708359 251.21241760]
[-60.64202118 239.07583618]
[-66.11436462 225.10968018]
[-67.89096069 210.21525574]
[-65.85715485 195.35377502]
[-60.14420700 181.48429871]
[-51.12078857 169.50190735]
[-39.36922073 160.17985535]
[-25.64619827 154.11923218]
[-40.14490509 150.27378845]
[-54.64361572 146.42834473]
[-69.14232635 142.58290100]
[-83.64102936 138.73744202]
[-98.13973999 134.89199829]
[-112.63845062 131.04655457]
[-129.49830627 132.83026123]
[-135.87957764 117.12307739]
[-122.55274200 106.64300537]
[-108.79299927 116.54784393]
[-94.29429626 120.39329529]
[-79.79558563 124.23873901]
[-65.29687500 128.08418274]
[-50.79816818 131.92962646]
[-36.29946136 135.77508545]
[-21.80075073 139.62052917]
[-6.84433842 138.47784424]
[6.90191650 132.47447205]
[20.64817238 126.47110748]
[34.39442825 120.46773529]
[48.14068222 114.46436310]
[61.88693619 108.46099091]
[75.63319397 102.45761871]
[89.37944794 96.45424652]
[103.03255463 90.24194336]
[116.58933258 83.82215118]
[130.14611816 77.40236664]
[129.23200989 61.43045807]
[134.47126770 46.35519791]
[145.04283142 34.44998169]
[159.32388306 27.49831772]
[175.13888550 26.52667236]
[190.09101868 31.65300560]
[201.92544556 42.07331848]
[215.28013611 35.24308777]
[228.63484192 28.41285515]
[241.98953247 21.58262444]
[255.34423828 14.75239182]
[258.15744019 4.02356243]
[266.31045532 -3.16539264]
[276.86740112 -4.55526114]
[286.20593262 0.08162680]
[299.95217896 -5.92174530]
[313.69842529 -11.92511749]
[327.44467163 -17.92848969]
[332.97921753 -32.73201370]
[347.39486694 -39.21005630]
[362.13903809 -33.51930618]
[368.46432495 -19.03598785]
[362.61801147 -4.35279512]
[348.06860352 1.81899345]
[333.44805908 -4.18223476]
[319.70181274 1.82113743]
[305.95553589 7.82450962]
[292.20928955 13.82788181]
[282.10931396 30.19734383]
[262.17446899 28.10708809]
[248.81976318 34.93732071]
[235.46507263 41.76755142]
[222.11036682 48.59778595]
[208.75567627 55.42801666]
[210.40705872 69.45123291]
[207.13847351 83.21867371]
[199.32690430 95.05320740]
[187.90406799 103.50588226]
[174.24528503 107.53336334]
[160.00390625 106.62664795]
[146.91120911 100.87532043]
[136.56590271 90.95914459]
[123.00912476 97.37893677]
[109.45233917 103.79872131]
[103.98382568 109.92205048]
[95.38282013 110.20050049]
[81.63656616 116.20387268]
[67.89030457 122.20724487]
[54.14405441 128.21061707]
[40.39779663 134.21398926]
[26.65154266 140.21736145]
[12.90528870 146.22073364]
[-0.84096617 152.22410583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[39 102]
[40 101]
[41 100]
[42 99]
[43 98]
[44 97]
[45 96]
[46 95]
[47 93]
[48 92]
[49 91]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[64 77]
[65 76]
[66 75]
[67 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
