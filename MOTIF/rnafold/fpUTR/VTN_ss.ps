%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCAAACAGAGCAGCAGAAAAGGCAGUUCCUCUUCUCCAGUGCCCUCCUUCCCUGUCUCUGCCUCUCCCUCCCUUCCUCAGGCAUCAGAGCGGAGACUUCAGGGAGACCAGAGCCCAGCUUGCCAGGCACUGAGCUAGAAGCCCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-34.75508881 449.12719727]
[-48.69966888 464.86608887]
[-69.15867615 469.11407471]
[-74.09167480 483.27972412]
[-65.92967987 496.61822510]
[-68.30217743 512.07476807]
[-80.08893585 522.35125732]
[-95.72460938 522.59545898]
[-107.82651520 512.69201660]
[-110.68050385 497.31707764]
[-102.93900299 483.73022461]
[-88.25731659 478.34671021]
[-83.32431793 464.18106079]
[-90.45326996 458.22763062]
[-95.66056824 450.50830078]
[-98.52529144 441.62365723]
[-98.80937195 432.26931763]
[-96.47736359 423.18154907]
[-91.70020294 415.07922363]
[-84.84281158 408.60705566]
[-76.43620300 404.28424072]
[-67.13638306 402.46282959]
[-57.67318726 403.29910278]
[-51.00365829 389.86343384]
[-44.33412933 376.42776489]
[-37.66460419 362.99209595]
[-30.99507523 349.55639648]
[-39.35132980 337.22601318]
[-40.42085266 322.26901245]
[-33.81652451 308.69515991]
[-21.22198486 300.19372559]
[-5.96362352 299.13088989]
[0.70590430 285.69519043]
[7.37543201 272.25952148]
[5.30372524 254.86167908]
[20.65434265 244.74670410]
[27.04103088 231.17430115]
[33.42771912 217.60189819]
[33.42988968 210.16128540]
[40.09291840 203.81427002]
[46.76244354 190.37860107]
[53.43197250 176.94291687]
[60.10150146 163.50724792]
[66.77102661 150.07156372]
[73.44055176 136.63589478]
[63.41320801 126.62704468]
[56.97245026 114.00794983]
[54.74966812 100.01566315]
[56.96276093 86.02184296]
[63.39477921 73.39829254]
[73.41519928 63.38250351]
[86.04170990 56.95631409]
[100.03655243 54.74967957]
[114.02780914 56.97891998]
[120.97724915 43.68586731]
[127.92668915 30.39281273]
[126.70259857 12.05008793]
[141.81304932 3.18153834]
[148.48258972 -10.25413799]
[155.15211487 -23.68981361]
[161.82164001 -37.12549210]
[168.49116516 -50.56116867]
[165.12171936 -63.05621719]
[171.00518799 -74.12997437]
[182.48597717 -78.06977081]
[189.43540955 -91.36282349]
[196.38485718 -104.65587616]
[203.33428955 -117.94892883]
[210.28373718 -131.24198914]
[217.23316956 -144.53503418]
[224.18261719 -157.82809448]
[217.12055969 -176.57151794]
[225.88890076 -194.24293518]
[244.50653076 -199.78398132]
[250.60758972 -213.48715210]
[256.70864868 -227.19033813]
[262.80969238 -240.89352417]
[268.76690674 -254.65983582]
[274.57965088 -268.48779297]
[280.39236450 -282.31573486]
[272.23922729 -295.51821899]
[273.43698120 -310.98901367]
[283.52508545 -322.77923584]
[298.62448120 -326.35534668]
[312.92907715 -320.34222412]
[320.93853760 -307.05206299]
[319.57302856 -291.59521484]
[309.35760498 -279.91510010]
[294.22030640 -276.50299072]
[288.40759277 -262.67504883]
[282.59484863 -248.84710693]
[282.90426636 -241.41293335]
[276.51287842 -234.79246521]
[270.41180420 -221.08929443]
[264.31076050 -207.38610840]
[258.20971680 -193.68292236]
[264.39437866 -185.34844971]
[266.54397583 -175.11209106]
[264.19827271 -164.83566284]
[257.72094727 -156.41731262]
[248.24513245 -151.44100952]
[237.47566223 -150.87864685]
[230.52622986 -137.58560181]
[223.57678223 -124.29254150]
[216.62734985 -110.99948883]
[209.67790222 -97.70643616]
[202.72846985 -84.41338348]
[195.77902222 -71.12033081]
[197.48593140 -53.68290710]
[181.92684937 -43.89163971]
[175.25730896 -30.45596313]
[168.58778381 -17.02028656]
[161.91825867 -3.58461046]
[155.24873352 9.85106564]
[158.80960083 21.45496750]
[153.30895996 32.72378159]
[141.21974182 37.34225464]
[134.27030945 50.63530731]
[127.32086182 63.92835999]
[137.99537659 75.42473602]
[144.10301208 89.87495422]
[144.90965271 105.54216003]
[140.31834412 120.54322052]
[130.88093567 133.07507324]
[117.73177338 141.63143921]
[102.45131683 145.18388367]
[86.87622833 143.30541992]
[80.20670319 156.74110413]
[73.53717804 170.17677307]
[66.86764526 183.61245728]
[60.19812012 197.04812622]
[53.52859497 210.48381042]
[47.00012589 223.98858643]
[40.61343765 237.56098938]
[34.22674942 251.13339233]
[37.85712814 263.55514526]
[32.20686340 274.74969482]
[20.81110764 278.92904663]
[14.14158058 292.36471558]
[7.47205305 305.80041504]
[15.85064793 318.59674072]
[16.69365120 333.76864624]
[9.87464905 347.23590088]
[-2.68568802 355.42700195]
[-17.55939865 356.22595215]
[-24.22892761 369.66162109]
[-30.89845467 383.09729004]
[-37.56798172 396.53295898]
[-44.23751068 409.96865845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 13]
[4 12]
[23 149]
[24 148]
[25 147]
[26 146]
[27 145]
[32 140]
[33 139]
[34 138]
[36 135]
[37 134]
[38 133]
[40 132]
[41 131]
[42 130]
[43 129]
[44 128]
[45 127]
[54 119]
[55 118]
[56 117]
[58 114]
[59 113]
[60 112]
[61 111]
[62 110]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[74 96]
[75 95]
[76 94]
[77 93]
[78 91]
[79 90]
[80 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
