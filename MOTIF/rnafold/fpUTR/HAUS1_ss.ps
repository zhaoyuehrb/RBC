%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:28:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGUGUGGGCGGGGCCUAGGGAGUGAGCGGGGCGCAUCUCCCGCUAGGAGUUCCUAGUAAAGUGGCGGGAGCCGCAGCU\
) } def
/len { sequence length } bind def

/coor [
[64.21076965 156.67961121]
[64.21076965 141.67961121]
[64.21076965 126.67961884]
[57.64408112 123.05627441]
[44.80173874 130.80702209]
[44.51070786 115.80958557]
[37.94402313 112.18624115]
[25.25422478 120.18430328]
[12.56442928 128.18237305]
[-0.12536708 136.18043518]
[-12.81516361 144.17849731]
[-22.99091911 157.73912048]
[-38.83851242 151.71499634]
[-37.43685532 134.81907654]
[-20.81323051 131.48870850]
[-8.12343311 123.49063873]
[4.56636286 115.49257660]
[17.25615883 107.49450684]
[29.94595528 99.49644470]
[32.26373672 84.67659760]
[22.62192345 73.18592834]
[12.98010921 61.69526291]
[3.33829498 50.20459366]
[-6.30351925 38.71392822]
[-16.16633987 27.41238976]
[-26.24645805 16.30422974]
[-41.25009155 11.28412151]
[-44.07310867 -3.34051037]
[-54.15322495 -14.44867039]
[-69.27482605 -22.11505699]
[-66.09412384 -38.76796722]
[-49.21150589 -40.32155228]
[-43.04506683 -24.52878761]
[-32.96494675 -13.42062855]
[-18.68231010 -9.19505024]
[-15.13829708 6.22411156]
[-5.05817938 17.33227158]
[1.95022368 20.24410057]
[5.18714762 29.07211494]
[14.82896137 40.56278229]
[24.47077560 52.05344772]
[34.11259079 63.54411316]
[43.75440598 75.03478241]
[58.70929718 76.19716644]
[70.01083374 66.33434296]
[81.31237793 56.47152710]
[92.61391449 46.60870361]
[103.91545105 36.74588394]
[115.21698761 26.88306427]
[120.01111603 11.20032215]
[136.04852295 7.77492762]
[146.83131409 20.13063431]
[141.26707458 35.55694962]
[125.07981110 38.18460464]
[113.77827454 48.04742432]
[102.47673035 57.91024399]
[91.17519379 67.77306366]
[79.87365723 77.63588715]
[68.57212067 87.49870300]
[87.42861176 70.43071747]
[111.52198029 71.82656860]
[126.56155396 89.00793457]
[124.94103241 110.48130798]
[136.61650085 119.89849091]
[148.29197693 129.31567383]
[159.96745300 138.73284912]
[171.64292908 148.15003967]
[187.91990662 150.14804077]
[194.07812500 165.34700012]
[183.78254700 178.11152649]
[167.62437439 175.31056213]
[162.22573853 159.82551575]
[150.55027771 150.40832520]
[138.87480164 140.99114990]
[127.19932556 131.57395935]
[115.52384949 122.15678406]
[99.22714996 130.42861938]
[79.21076965 126.67961884]
[79.21076965 141.67961121]
[79.21076965 156.67961121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[20 43]
[21 42]
[22 41]
[23 40]
[24 39]
[25 37]
[26 36]
[28 34]
[29 33]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
