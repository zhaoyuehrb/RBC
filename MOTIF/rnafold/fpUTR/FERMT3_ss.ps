%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCCUGCUCGUGAUAAGGCACAAGCAAGGGCUGCCCUGAAGGAAGCUCCAAAGAGAAAGGAGGGCAGGAAGCCCACGGCCCACAGGGGUGUAGCCCGAGACCCACCUGCAGCCCCCAGCCCUUGCCAGGAAAGCAGCAGCCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.05876923 151.03297424]
[85.02376556 136.32940674]
[77.67173004 134.84696960]
[67.40351868 145.78150940]
[57.13531494 156.71603394]
[46.86710739 167.65055847]
[36.59890366 178.58509827]
[26.44576263 189.62655640]
[16.40880394 200.77372742]
[6.37184477 211.92089844]
[2.88766193 227.35368347]
[-11.37847996 231.63462830]
[-21.41543961 242.78179932]
[-31.45239830 253.92897034]
[-30.37508011 269.69650269]
[-40.82544708 281.55252075]
[-56.60348511 282.46307373]
[-68.34835815 271.88793945]
[-69.09204865 256.10116577]
[-58.39333344 244.46875000]
[-42.59957123 243.89201355]
[-32.56261063 232.74484253]
[-22.52565193 221.59767151]
[-19.75938034 206.96220398]
[-4.77532768 201.88394165]
[5.26163149 190.73675537]
[15.29859066 179.58958435]
[17.45123863 172.46717834]
[25.66437340 168.31687927]
[35.93257904 157.38235474]
[46.20078659 146.44783020]
[56.46899414 135.51330566]
[66.73719788 124.57876587]
[61.36645508 102.01461029]
[68.96699524 81.72634888]
[85.36759186 70.04143524]
[103.97370148 69.59002686]
[109.49557495 55.64338303]
[115.01744080 41.69673538]
[120.53930664 27.75008774]
[111.47540283 18.46050072]
[108.04466248 4.88908052]
[112.14311981 -9.56021976]
[98.31517029 -15.37295341]
[84.48722076 -21.18568611]
[67.54266357 -21.74970055]
[63.39390945 -38.18819809]
[78.04149628 -46.72544098]
[90.29995728 -35.01363373]
[104.12790680 -29.20090103]
[117.95585632 -23.38816643]
[104.34372711 -29.68976021]
[95.44102478 -41.76211929]
[93.44297028 -56.62844849]
[98.84223938 -70.62301636]
[110.30748749 -80.29504395]
[125.01161957 -83.25960541]
[139.32888794 -78.78570557]
[149.72894287 -67.97650909]
[153.64736938 -53.49735260]
[150.11793518 -38.91849518]
[140.01194763 -27.83545685]
[150.50689697 -38.55254745]
[161.00186157 -49.26963806]
[171.49681091 -59.98672867]
[181.99176025 -70.70381927]
[192.48670959 -81.42090607]
[196.61408997 -96.69425964]
[211.04698181 -100.37403870]
[221.54193115 -111.09113312]
[210.77680969 -115.58306885]
[202.10682678 -125.90184784]
[197.96493530 -140.96630859]
[199.22010803 -155.91369629]
[200.47528076 -170.86109924]
[195.77552795 -187.15061951]
[210.12742615 -196.17608643]
[222.77319336 -184.88356018]
[215.42266846 -169.60592651]
[214.16749573 -154.65853882]
[212.91233826 -139.71113586]
[219.11543274 -135.49551392]
[223.30032349 -149.89991760]
[238.29292297 -150.37101746]
[243.37393188 -136.25778198]
[231.52165222 -127.06426239]
[237.72474670 -122.84864044]
[251.16043091 -129.51815796]
[264.59609985 -136.18769836]
[273.51681519 -149.25411987]
[288.35705566 -147.98272705]
[301.79272461 -154.65225220]
[315.22839355 -161.32177734]
[328.66409302 -167.99131775]
[342.09976196 -174.66084290]
[341.86557007 -189.92216492]
[348.28402710 -203.77012634]
[360.08068848 -213.45523071]
[374.91336060 -217.05447388]
[389.83700562 -213.85322571]
[401.88848877 -204.48710632]
[408.67501831 -190.81575012]
[408.84909058 -175.55361938]
[402.37615967 -161.73103333]
[390.54144287 -152.09246826]
[375.69470215 -148.55166626]
[360.78378296 -151.81164551]
[348.76928711 -161.22515869]
[335.33361816 -154.55563354]
[321.89791870 -147.88610840]
[308.46224976 -141.21658325]
[295.02658081 -134.54705811]
[287.06689453 -121.95766449]
[271.26562500 -122.75201416]
[257.82995605 -116.08248901]
[244.39428711 -109.41296387]
[232.25901794 -100.59618378]
[221.76406860 -89.87908936]
[218.38735962 -75.37229919]
[203.20379639 -70.92595673]
[192.70884705 -60.20886612]
[182.21389771 -49.49177551]
[171.71894836 -38.77468872]
[161.22399902 -28.05759621]
[150.72904968 -17.34050751]
[163.86433411 4.49937916]
[155.45567322 26.69118500]
[134.48596191 33.27195740]
[128.96408081 47.21860504]
[123.44222260 61.16525269]
[117.92034912 75.11190033]
[130.00025940 85.45327759]
[135.97901917 101.57621002]
[133.20030212 119.85823059]
[121.13909149 135.54811096]
[126.36767578 149.60734558]
[138.43005371 159.84498596]
[135.61439514 174.47103882]
[140.84298706 188.53027344]
[153.81675720 198.56088257]
[151.34906006 214.77330017]
[135.97843933 220.48957825]
[123.51686859 209.82929993]
[126.78375244 193.75885010]
[121.55516815 179.69961548]
[109.86676788 170.46759033]
[112.30844116 154.83592224]
[107.07986450 140.77670288]
[99.72782898 139.29426575]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 33]
[4 32]
[5 31]
[6 30]
[7 29]
[8 27]
[9 26]
[10 25]
[12 23]
[13 22]
[14 21]
[37 131]
[38 130]
[39 129]
[40 128]
[43 51]
[44 50]
[45 49]
[62 125]
[63 124]
[64 123]
[65 122]
[66 121]
[67 120]
[69 118]
[70 117]
[73 81]
[74 80]
[75 79]
[87 116]
[88 115]
[89 114]
[91 112]
[92 111]
[93 110]
[94 109]
[95 108]
[135 148]
[136 147]
[138 145]
[139 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
