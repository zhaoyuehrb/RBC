%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUGUUUCCGGCUCCGCUGCGGAAGGCGGACGACUAGAGUCGUUGGGCCCGGCGCGACCCGCAGGAGCGUAGAGAGCGCGGGACUAGAGUGCAGAGCUCCGGGACGUGGAUCGGAGCCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[60.68852997 397.50631714]
[53.07860947 382.97976685]
[62.08140945 369.27276611]
[62.44952774 354.27728271]
[62.81764603 339.28179932]
[49.99394989 347.06338501]
[35.82988739 342.12582397]
[30.62256622 328.05871582]
[38.15764618 315.08865356]
[52.95721436 312.64471436]
[64.26244354 322.50427246]
[66.46340179 307.66662598]
[68.66435242 292.82897949]
[70.86531067 277.99133301]
[73.06626892 263.15368652]
[75.26722717 248.31604004]
[77.46818542 233.47839355]
[79.66914368 218.64074707]
[81.87010193 203.80310059]
[83.70626068 188.91590881]
[85.17651367 173.98812866]
[86.64677429 159.06036377]
[88.11702728 144.13259888]
[89.58728790 129.20481873]
[79.41682434 124.59947205]
[71.23353577 116.46310425]
[66.25415802 105.63833618]
[65.34331512 93.38161469]
[68.87554169 81.21809387]
[55.01734543 75.47784424]
[36.87677002 78.34140015]
[26.67368889 64.11878204]
[12.67879677 58.72035599]
[-1.31609511 53.32192993]
[-15.31098747 47.92350388]
[-29.30587959 42.52507782]
[-43.30076981 37.12665558]
[-59.40960312 40.19871902]
[-69.91821289 27.60899162]
[-64.01623535 12.30870533]
[-47.77513123 10.03748226]
[-37.90234375 23.13176155]
[-23.90745354 28.53018761]
[-9.91256142 33.92861176]
[4.08233023 39.32703781]
[18.07722282 44.72546387]
[32.07211304 50.12388992]
[43.32236099 45.50223160]
[55.06670380 49.96813583]
[60.75759888 61.61964798]
[74.61579132 67.35990143]
[87.93038940 60.45182037]
[91.21690369 45.81628799]
[86.69123840 30.65617752]
[97.02909851 19.93340302]
[100.31562042 5.29787207]
[103.60213470 -9.33765984]
[106.88865662 -23.97319221]
[93.73160553 -35.48641968]
[88.18476105 -51.97323227]
[91.67124176 -68.92499542]
[103.15653229 -81.75298309]
[119.45328522 -87.03045654]
[122.01771545 -101.80962372]
[124.58214569 -116.58878326]
[118.42642975 -131.78875732]
[128.72412109 -144.55158997]
[144.88183594 -141.74795532]
[150.27789307 -126.26200867]
[139.36131287 -114.02436066]
[136.79687500 -99.24519348]
[134.23245239 -84.46602631]
[144.83494568 -77.38692474]
[151.96838379 -66.76425171]
[154.52774048 -54.17930603]
[152.09219360 -41.52196503]
[144.99372864 -30.70692062]
[134.27243042 -23.38403130]
[121.52418518 -20.68667412]
[118.23767090 -6.05114126]
[114.95114899 8.58439064]
[111.66463470 23.21992302]
[116.42536926 37.33320236]
[105.85243988 49.10280609]
[102.56591797 63.73833847]
[121.65952301 74.20974731]
[130.08482361 92.50000000]
[145.08482361 92.50000000]
[158.88499451 84.76270294]
[171.61225891 92.50000000]
[186.61225891 92.50000000]
[201.61225891 92.50000000]
[216.61225891 92.50000000]
[228.92749023 82.21823120]
[244.61497498 85.57711029]
[251.64064026 100.00000000]
[244.61497498 114.42288971]
[228.92749023 117.78176880]
[216.61225891 107.50000000]
[201.61225891 107.50000000]
[186.61225891 107.50000000]
[171.61225891 107.50000000]
[158.88499451 115.23729706]
[145.08482361 107.50000000]
[130.08482361 107.50000000]
[124.91082001 118.46069336]
[115.93010712 126.60033417]
[104.51506042 130.67507935]
[103.04479980 145.60284424]
[101.57454681 160.53062439]
[100.10428619 175.45838928]
[98.63402557 190.38616943]
[101.07246399 196.71554565]
[100.02725220 202.43746948]
[96.70774841 206.00405884]
[94.50679016 220.84170532]
[92.30583191 235.67935181]
[90.10487366 250.51699829]
[87.90391541 265.35464478]
[85.70295715 280.19229126]
[83.50200653 295.02993774]
[81.30104828 309.86758423]
[79.10009003 324.70523071]
[77.81312561 339.64993286]
[77.44500732 354.64541626]
[77.07688904 369.64089966]
[85.39627838 383.77313232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 126]
[4 125]
[5 124]
[11 123]
[12 122]
[13 121]
[14 120]
[15 119]
[16 118]
[17 117]
[18 116]
[19 115]
[20 112]
[21 111]
[22 110]
[23 109]
[24 108]
[29 51]
[30 50]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[52 85]
[53 84]
[55 82]
[56 81]
[57 80]
[58 79]
[63 72]
[64 71]
[65 70]
[87 105]
[88 104]
[90 102]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
