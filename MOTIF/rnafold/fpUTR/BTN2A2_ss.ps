%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUUUGUUGUCUGGUGGUGACUGUGCCCAUGGGUGAGUUGUAUCGGAAAAUCGUCAUGUGAGGAUCAGAGGGGAAAAGAAAACAGAGGUUAGUUCUAGAAGGCCUCUGGUCUCUGCCUGCCCUGGGUGCUC\
) } def
/len { sequence length } bind def

/coor [
[138.15153503 128.70864868]
[127.41848755 139.08905029]
[114.00397491 145.64663696]
[99.21991730 147.74011230]
[84.51214600 145.16473389]
[71.31904602 138.17236328]
[60.93087006 127.44685364]
[54.36354065 114.03710175]
[39.51170349 116.14017487]
[24.65986633 118.24324799]
[12.08081245 127.83898163]
[-1.60555339 121.96252441]
[-16.45739174 124.06559753]
[-31.30922890 126.16867065]
[-46.16106796 128.27174377]
[-61.01290512 130.37481689]
[-75.86473846 132.47789001]
[-90.71658325 134.58096313]
[-99.12691498 144.44033813]
[-111.60554504 145.84216309]
[-121.34857941 138.57452393]
[-136.24563599 140.32885742]
[-151.14270020 142.08317566]
[-166.03974915 143.83750916]
[-174.67890930 153.49702454]
[-187.18696594 154.60592651]
[-196.75695801 147.11187744]
[-211.69104004 148.51649475]
[-226.62513733 149.92112732]
[-239.67646790 159.85060120]
[-254.69468689 153.26385498]
[-256.23034668 136.93676758]
[-242.70365906 127.66524506]
[-228.02975464 134.98703003]
[-213.09567261 133.58241272]
[-198.16157532 132.17779541]
[-184.47901917 121.25285339]
[-167.79408264 128.94046021]
[-152.89701843 127.18612671]
[-137.99996948 125.43179321]
[-123.10291290 123.67746735]
[-109.68022156 112.43478394]
[-92.81965637 119.72912598]
[-77.96781158 117.62605286]
[-63.11597824 115.52297974]
[-48.26414108 113.41990662]
[-33.41230011 111.31683350]
[-18.56046486 109.21376038]
[-3.70862651 107.11068726]
[7.80812502 97.66539001]
[22.55679321 103.39141083]
[37.40863037 101.28833771]
[52.26046753 99.18526459]
[54.84651947 84.47937012]
[61.84845734 71.29135132]
[72.58151245 60.91095734]
[85.99602509 54.35336685]
[100.78008270 52.25989151]
[115.48785400 54.83526611]
[128.68095398 61.82763290]
[139.06913757 72.55314636]
[145.63645935 85.96289825]
[160.48829651 83.85982513]
[175.34013367 81.75675201]
[187.91918945 72.16101837]
[201.60556030 78.03747559]
[216.45739746 75.93440247]
[231.30923462 73.83132935]
[239.71957397 63.97194672]
[252.19819641 62.57012939]
[261.94122314 69.83776855]
[276.83828735 68.08344269]
[291.73535156 66.32910919]
[306.63241577 64.57478333]
[312.98040771 49.35543823]
[326.04595947 39.44888687]
[342.22811890 37.46733856]
[357.12594604 43.85490036]
[366.73544312 56.79243469]
[381.58728027 54.68936157]
[396.43911743 52.58628845]
[403.77288818 39.03926849]
[417.51672363 32.48482513]
[432.30969238 35.24737167]
[442.51721191 46.06146240]
[457.36904907 43.95838928]
[472.22088623 41.85531616]
[487.07272339 39.75224304]
[501.92456055 37.64916992]
[516.77642822 35.54609680]
[531.62823486 33.44302368]
[546.48010254 31.33995056]
[552.14428711 17.06366158]
[564.19769287 7.54471779]
[579.39807129 5.34366989]
[593.65655518 11.05258751]
[603.13763428 23.13580132]
[605.29107666 38.34298706]
[599.53747559 52.58348465]
[587.42462158 62.02667999]
[572.21075439 64.13239288]
[557.98834229 58.33420181]
[548.58319092 46.19178772]
[533.73132324 48.29486084]
[518.87945557 50.39793396]
[504.02764893 52.50100708]
[489.17581177 54.60408020]
[474.32397461 56.70715332]
[459.47213745 58.81022644]
[444.62030029 60.91329956]
[437.81649780 74.13625336]
[424.37210083 80.89731598]
[409.34884644 78.41639709]
[398.54217529 67.43812561]
[383.69033813 69.54119873]
[368.83850098 71.64427185]
[364.55758667 84.66554260]
[355.02380371 94.60585785]
[342.06829834 99.47312927]
[328.21554565 98.25766754]
[316.19140625 91.14109802]
[308.38671875 79.47183990]
[293.48968506 81.22616577]
[278.59262085 82.98049927]
[263.69555664 84.73482513]
[250.27287292 95.97750854]
[233.41230774 88.68316650]
[218.56047058 90.78623962]
[203.70863342 92.88931274]
[192.19187927 102.33460999]
[177.44320679 96.60858917]
[162.59136963 98.71166229]
[147.73953247 100.81473541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 53]
[9 52]
[10 51]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[18 43]
[21 41]
[22 40]
[23 39]
[24 38]
[27 36]
[28 35]
[29 34]
[62 133]
[63 132]
[64 131]
[66 129]
[67 128]
[68 127]
[71 125]
[72 124]
[73 123]
[74 122]
[79 116]
[80 115]
[81 114]
[85 110]
[86 109]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
