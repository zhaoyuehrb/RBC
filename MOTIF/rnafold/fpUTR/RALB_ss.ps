%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUCGGGGGGUGGGAAAGCGAGCCCGGCAGCUCAAUGACAAAUCGGUGGAGGACGGCUGGGGUCCGGCCCCGGGAGGGGGCGGGGCGCGUUUAAGAGCUGCGGGCCGGGUGCGGACGGCGGAGGCGGCGGGACUGGUCCCUGCUCUUCAGUGGGUCAUCUGUGUGUCACAGCCUCAGAAGACCAGCGAG\
) } def
/len { sequence length } bind def

/coor [
[274.28491211 415.29757690]
[265.70935059 402.99069214]
[257.13378906 390.68377686]
[248.55824280 378.37689209]
[242.14379883 374.68005371]
[239.94480896 365.79629517]
[231.57283020 353.35000610]
[223.20085144 340.90371704]
[214.82887268 328.45742798]
[206.45689392 316.01113892]
[198.08491516 303.56488037]
[189.71293640 291.11859131]
[181.34095764 278.67230225]
[172.96899414 266.22601318]
[164.59701538 253.77973938]
[154.41270447 252.72210693]
[146.32791138 246.08708191]
[143.17362976 235.88493347]
[146.22557068 225.42254639]
[138.26748657 212.70764160]
[124.95656586 206.02416992]
[124.19363403 190.22137451]
[116.23554993 177.50646973]
[108.17316437 164.85743713]
[100.00702667 152.27514648]
[91.84089661 139.69284058]
[83.67475891 127.11054230]
[73.02462769 116.54764557]
[60.37559891 108.48526764]
[47.72657013 100.42288208]
[35.07753754 92.36049652]
[22.42850876 84.29811096]
[9.77947903 76.23572540]
[-2.86955142 68.17334747]
[-17.25131607 73.69339752]
[-31.95395279 69.73285675]
[-41.39361191 58.01292038]
[-42.11341095 43.15964127]
[-54.76243973 35.09725952]
[-67.41146851 27.03487587]
[-80.41762543 33.07867813]
[-94.54096985 31.59933281]
[-105.78656006 23.16107941]
[-111.04837036 10.27580738]
[-125.86562347 7.94147539]
[-140.68287659 5.60714340]
[-155.50012207 3.27281141]
[-170.31736755 0.93847948]
[-181.18486023 12.01445961]
[-196.49269104 14.55416012]
[-210.35467529 7.58101368]
[-217.44062805 -6.22366190]
[-215.02581787 -21.55168724]
[-204.03881836 -32.50912476]
[-188.70434570 -34.88261414]
[-174.91880798 -27.75950241]
[-167.98304749 -13.87877083]
[-153.16578674 -11.54443836]
[-138.34854126 -9.21010685]
[-123.53128815 -6.87577438]
[-108.71404266 -4.54144239]
[-107.77204895 -6.31750107]
[-106.69561005 -8.01543999]
[-116.06172943 -19.73191643]
[-125.42784882 -31.44839287]
[-134.79396057 -43.16486740]
[-149.45449829 -49.11293030]
[-151.35791016 -63.88541412]
[-160.72402954 -75.60189056]
[-170.09014893 -87.31836700]
[-179.45626831 -99.03484344]
[-188.82238770 -110.75131989]
[-204.54318237 -113.95070648]
[-211.71496582 -128.30149841]
[-204.83615112 -142.79499817]
[-189.18357849 -146.31301880]
[-176.76455688 -136.15686035]
[-177.10591125 -120.11743927]
[-167.73979187 -108.40096283]
[-158.37367249 -96.68448639]
[-149.00755310 -84.96800995]
[-139.64143372 -73.25153351]
[-125.65083313 -68.14151001]
[-123.07749176 -52.53098679]
[-113.71137238 -40.81451035]
[-104.34525299 -29.09803581]
[-94.97913361 -17.38155937]
[-75.90242767 -17.87273216]
[-61.37240601 -5.10785437]
[-59.34908676 14.38584518]
[-46.70005798 22.44822884]
[-34.05102539 30.51061249]
[-20.28261566 24.89199638]
[-5.67302275 28.50084877]
[4.12472582 40.15664291]
[5.19283247 55.52431488]
[17.84186363 63.58669662]
[30.49089241 71.64907837]
[43.13992310 79.71146393]
[55.78895187 87.77384949]
[68.43798065 95.83623505]
[81.08701324 103.89862061]
[83.54563904 92.13857269]
[92.13483429 84.74729156]
[102.76750183 84.15340424]
[111.93965149 72.28446198]
[121.11179352 60.41551971]
[117.87245178 47.33132935]
[122.69507599 34.95309067]
[133.60775757 27.72420311]
[146.49740601 28.10025597]
[155.86352539 16.38377953]
[165.22964478 4.66730309]
[164.88829041 -11.37211800]
[177.30731201 -21.52828217]
[192.95988464 -18.01024818]
[199.83869934 -3.51675272]
[192.66691589 10.83403683]
[176.94612122 14.03342247]
[167.58000183 25.74989891]
[158.21388245 37.46637344]
[160.79356384 54.07739639]
[150.36245728 67.68751526]
[132.98072815 69.58766937]
[123.80858612 81.45660400]
[114.63644409 93.32554626]
[116.37741089 105.12701416]
[109.31578827 115.67686462]
[96.25705719 118.94441223]
[104.42318726 131.52670288]
[112.58932495 144.10900879]
[120.75546265 156.69129944]
[128.06524658 162.19799805]
[128.95045471 169.54838562]
[136.90853882 182.26329041]
[150.78868103 189.85621643]
[150.98239136 204.74955750]
[158.94047546 217.46446228]
[177.15191650 226.08175659]
[177.04328918 245.40776062]
[185.41526794 257.85403442]
[193.78724670 270.30032349]
[202.15922546 282.74661255]
[210.53120422 295.19290161]
[218.90318298 307.63916016]
[227.27516174 320.08544922]
[235.64714050 332.53173828]
[244.01911926 344.97802734]
[252.39109802 357.42431641]
[260.86514282 369.80133057]
[269.44070435 382.10821533]
[278.01626587 394.41513062]
[286.59179688 406.72204590]
[295.86126709 418.51513672]
[305.79388428 429.75537109]
[315.72650146 440.99560547]
[325.65914917 452.23583984]
[340.59521484 457.45355225]
[343.22494507 472.11416626]
[353.15756226 483.35440063]
[363.09020996 494.59463501]
[373.02282715 505.83486938]
[390.60772705 511.27209473]
[393.44049072 528.58361816]
[403.55664062 539.65893555]
[419.35412598 540.12310791]
[430.13546753 551.67895508]
[429.50433350 567.47064209]
[417.83511353 578.12921143]
[402.05099487 577.33117676]
[391.51638794 565.54992676]
[392.48129272 549.77514648]
[382.36514282 538.69976807]
[370.28875732 537.83599854]
[361.77020264 528.67681885]
[361.78259277 515.76751709]
[351.84997559 504.52728271]
[341.91732788 493.28704834]
[331.98471069 482.04678345]
[317.75909424 477.63308716]
[314.41888428 462.16848755]
[304.48626709 450.92825317]
[294.55364990 439.68798828]
[284.62103271 428.44775391]
[283.65655518 443.41671753]
[273.39657593 454.35897827]
[258.52059937 456.28387451]
[245.81343079 448.31344604]
[241.07069397 434.08297729]
[246.45552063 420.08285522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 153]
[2 152]
[3 151]
[4 150]
[6 149]
[7 148]
[8 147]
[9 146]
[10 145]
[11 144]
[12 143]
[13 142]
[14 141]
[15 140]
[19 138]
[20 137]
[22 135]
[23 134]
[24 132]
[25 131]
[26 130]
[27 129]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[38 92]
[39 91]
[40 90]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[63 87]
[64 86]
[65 85]
[66 84]
[68 82]
[69 81]
[70 80]
[71 79]
[72 78]
[105 126]
[106 125]
[107 124]
[111 121]
[112 120]
[113 119]
[154 184]
[155 183]
[156 182]
[157 181]
[159 179]
[160 178]
[161 177]
[162 176]
[164 173]
[165 172]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
