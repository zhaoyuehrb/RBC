%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCUGGAGACUGAUGUGAACUUCAUCUCUCUCCCCAGAAAAGGCUCAACAUCAACUAUAUAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[150.98207092 145.16734314]
[138.72752380 136.51713562]
[126.47296906 127.86692810]
[114.21842194 119.21672058]
[101.96387482 110.56652069]
[88.34529877 104.27886963]
[73.81316376 100.56175232]
[59.28102493 96.84463501]
[44.74888611 93.12751770]
[30.21674919 89.41040039]
[16.73111916 97.20626831]
[2.04641700 93.22956848]
[-5.30264473 80.32504272]
[-19.83478355 76.60792542]
[-34.36692047 72.89080811]
[-48.89905930 69.17369080]
[-61.49938583 78.43466949]
[-77.10123444 77.37807465]
[-88.33788300 66.50279999]
[-89.90373993 50.94380951]
[-81.05944061 38.04758835]
[-65.98101044 33.90333939]
[-51.78800583 40.46784592]
[-45.18194199 54.64155197]
[-30.64980507 58.35866928]
[-16.11766624 62.07578659]
[-1.58552790 65.79290009]
[11.05714035 58.00197601]
[25.84774780 61.56464767]
[33.93386459 74.87826538]
[48.46600342 78.59538269]
[62.99814224 82.31250000]
[77.53028107 86.02961731]
[92.06241608 89.74673462]
[85.97894287 76.03573608]
[88.77704620 61.29903030]
[99.46266174 50.77203369]
[114.23957062 48.19461823]
[127.85805511 54.48245239]
[135.47994995 67.40168762]
[134.39747620 82.36257935]
[124.99519348 94.05004883]
[110.61407471 98.31196594]
[122.86862946 106.96217346]
[135.12316895 115.61238098]
[147.37771606 124.26258087]
[159.63227844 132.91279602]
[171.22059631 123.24981689]
[184.91543579 116.91625977]
[199.78303528 114.34396362]
[214.80972290 115.70829773]
[228.97091675 120.91624451]
[241.30111694 129.61271667]
[250.95960999 141.20477295]
[257.28787231 154.90205383]
[259.85443115 169.77064514]
[258.48431396 184.79679871]
[253.27088928 198.95599365]
[244.56965637 211.28283691]
[232.97387695 220.93684387]
[219.27415466 227.25982666]
[204.40457153 229.82064819]
[189.37895203 228.44470215]
[175.22177124 223.22583008]
[162.89828491 214.51983643]
[153.24874878 202.92031860]
[146.93106079 189.21815491]
[144.37597656 174.34757996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 34]
[7 33]
[8 32]
[9 31]
[10 30]
[13 27]
[14 26]
[15 25]
[16 24]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
