%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGGCGGUUCCUCUGGCCACUUUCUCACAGUGUCUUUGGGCGUCUUCUUGACUGAAUCUGACUCCAUUGGAGGCUGUGAUCC\
) } def
/len { sequence length } bind def

/coor [
[-39.16012192 269.32858276]
[-53.17481232 268.41961670]
[-65.72567749 262.21560669]
[-77.09525299 271.99990845]
[-88.46482849 281.78421021]
[-99.83440399 291.56854248]
[-96.90020752 306.64453125]
[-101.91230011 321.16262817]
[-113.52244568 331.21746826]
[-128.60757446 334.10440063]
[-143.10987854 329.04684448]
[-153.12828064 317.40521240]
[-155.96791077 302.31112671]
[-150.86491394 287.82473755]
[-139.19195557 277.84286499]
[-124.08901978 275.05056763]
[-109.61872101 280.19897461]
[-98.24914551 270.41464233]
[-86.87956238 260.63034058]
[-75.50998688 250.84602356]
[-79.94097137 235.61167908]
[-77.33298492 219.90338135]
[-68.15055084 206.82379150]
[-54.16175079 198.97827148]
[-38.09791183 197.95587158]
[-23.12039948 204.00784302]
[-12.12462139 193.80525208]
[-1.12884355 183.60266113]
[9.86693478 173.40007019]
[20.86271286 163.19747925]
[31.85848999 152.99488831]
[42.85426712 142.79229736]
[46.92131805 128.46369934]
[62.30026245 124.74904633]
[73.29603577 114.54645538]
[84.29181671 104.34386444]
[88.69326782 88.26228333]
[104.92817688 84.46522522]
[115.53477478 73.85861969]
[126.14138031 63.25202179]
[136.74798584 52.64542007]
[140.73390198 44.14656448]
[147.95506287 41.84982681]
[158.95085144 31.64723587]
[169.94662476 21.44464493]
[180.35304260 10.64156628]
[190.13734436 -0.72800958]
[199.92166138 -12.09758568]
[198.49082947 -27.83697128]
[208.67253113 -39.92449570]
[224.42616272 -41.18885040]
[236.40536499 -30.87991142]
[237.50309753 -15.11379147]
[227.06808472 -3.24424958]
[211.29124451 -2.31327438]
[201.50692749 9.05630112]
[191.72261047 20.42587662]
[191.72920227 24.18840027]
[189.74861145 28.11724854]
[185.73808289 31.19665909]
[180.14921570 32.44042206]
[169.15344238 42.64301300]
[158.15765381 52.84560394]
[147.35458374 63.25202179]
[136.74798584 73.85861969]
[126.14138031 84.46522522]
[115.53477478 95.07182312]
[114.78906250 106.84834290]
[106.29057312 115.03479004]
[94.49440765 115.33964539]
[83.49862671 125.54223633]
[72.50285339 135.74482727]
[67.64930725 150.80316162]
[53.05685806 153.78807068]
[42.06108093 163.99066162]
[31.06530380 174.19325256]
[20.06952477 184.39584351]
[9.07374763 194.59843445]
[-1.92203057 204.80102539]
[-12.91780853 215.00361633]
[-8.21506977 228.46829224]
[-9.04349995 242.66279602]
[-15.24248314 255.41050720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[34 72]
[35 71]
[36 70]
[38 67]
[39 66]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[46 57]
[47 56]
[48 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
