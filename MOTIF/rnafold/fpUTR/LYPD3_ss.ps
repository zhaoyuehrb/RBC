%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCUGGGGUUGCCUGGGGCGAGGUUACUCAUCCUGGGCUCAGGUAAGAGGGCCCGAGCUCGGAGGCGGCACAUCCAGGGGGGACGCCAAGGGAGCAGGACGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[68.24547577 216.71604919]
[55.30897141 205.75779724]
[62.25779343 190.29330444]
[63.12197113 175.31822205]
[63.98615265 160.34313965]
[64.85033417 145.36805725]
[50.81333160 140.08009338]
[41.58219528 151.90319824]
[32.35105896 163.72631836]
[30.61102104 180.03289795]
[15.51147556 186.43099976]
[2.58553839 176.33882141]
[5.13030624 160.13832092]
[20.52793884 154.49519348]
[29.75907516 142.67207336]
[38.99021149 130.84895325]
[32.12263870 117.51342010]
[17.13665390 118.16171265]
[2.15066934 118.81000519]
[-12.83531475 119.45829773]
[-26.28819084 127.78479767]
[-39.33797073 120.60479736]
[-54.32395554 121.25308990]
[-69.30993652 121.90138245]
[-82.84629059 131.15876770]
[-97.51253510 123.82164764]
[-98.22129822 107.43782806]
[-84.24346161 98.86156464]
[-69.95822906 106.91539764]
[-54.97224808 106.26710510]
[-39.98626328 105.61881256]
[-27.60528564 97.33867645]
[-13.48360634 104.47231293]
[1.50237739 103.82402039]
[16.48836136 103.17572784]
[31.47434616 102.52743530]
[39.09880066 89.60970306]
[32.42411041 76.17659760]
[25.74942017 62.74348068]
[19.07472801 49.31036758]
[12.40003872 35.87725830]
[5.72534800 22.44414520]
[-9.59725094 19.99514580]
[-20.53014374 8.98372173]
[-22.86940956 -6.35601330]
[-15.71555328 -20.12561607]
[-1.81937921 -27.03039360]
[13.47575092 -24.41531944]
[24.28854752 -13.28594112]
[26.46126938 2.07826710]
[19.15846062 15.76945400]
[25.83315086 29.20256615]
[32.50784302 42.63567734]
[39.18253326 56.06879044]
[45.85722351 69.50190735]
[52.53191376 82.93501282]
[80.69950867 58.34906387]
[114.48857117 61.25165176]
[133.61203003 84.94023895]
[148.26293945 81.72296143]
[162.91384888 78.50568390]
[177.56475830 75.28840637]
[184.07194519 59.75495529]
[198.38473511 51.19703293]
[214.81912231 52.78481674]
[226.98292542 63.70379639]
[241.53503418 60.06564713]
[256.08712769 56.42749786]
[270.63925171 52.78934860]
[259.91021729 42.30660629]
[261.12301636 27.35571671]
[273.40133667 18.73930359]
[287.87362671 22.68307686]
[294.08303833 36.33749771]
[287.54309082 49.83664703]
[302.46682739 48.32606125]
[317.39056396 46.81547165]
[328.60775757 35.34576035]
[344.55374146 37.10774231]
[352.99615479 50.74978256]
[347.45867920 65.80686951]
[332.18920898 70.72850037]
[318.90115356 61.73921585]
[303.97741699 63.24980545]
[289.05368042 64.76039124]
[274.27740479 67.34145355]
[259.72528076 70.97960663]
[245.17318726 74.61775970]
[230.62107849 78.25590515]
[226.75740051 91.12294006]
[216.93501282 100.44726562]
[203.67323303 103.68841553]
[190.44825745 99.88565063]
[180.78202820 89.93931580]
[166.13111877 93.15659332]
[151.48020935 96.37387085]
[136.82929993 99.59114838]
[137.44610596 109.08710480]
[135.55215454 118.83723450]
[131.06944275 128.16532898]
[124.10415649 136.37547302]
[114.95059967 142.80236816]
[104.08143616 146.86227417]
[92.12424469 148.10052490]
[79.82541656 146.23223877]
[78.96123505 161.20732117]
[78.09706116 176.18240356]
[77.23287964 191.15748596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 108]
[4 107]
[5 106]
[6 105]
[7 16]
[8 15]
[9 14]
[17 36]
[18 35]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[59 97]
[60 96]
[61 95]
[62 94]
[66 89]
[67 88]
[68 87]
[69 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
