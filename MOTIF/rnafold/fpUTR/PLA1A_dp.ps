%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:33 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PLA1A)
} def

/sequence { (\
GGGUUAUAUGAUCUCUUUGGCUUUAGGGAAUUACUCCAUACCAGCUCUGAGAUUUCCAGCUCAGCG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.011230379 ubox
1 15 0.008909269 ubox
1 36 0.006147007 ubox
1 37 0.009203944 ubox
1 42 0.008012634 ubox
1 47 0.003535351 ubox
1 57 0.048494571 ubox
1 61 0.006843866 ubox
1 62 0.993372832 ubox
2 13 0.013926052 ubox
2 14 0.007455144 ubox
2 35 0.006271273 ubox
2 36 0.009188287 ubox
2 37 0.003774287 ubox
2 41 0.007977137 ubox
2 42 0.011982255 ubox
2 46 0.004266059 ubox
2 56 0.048519058 ubox
2 57 0.009117796 ubox
2 60 0.008482870 ubox
2 61 0.996526048 ubox
2 62 0.030168753 ubox
3 12 0.013968291 ubox
3 13 0.007452367 ubox
3 34 0.009167812 ubox
3 35 0.005886727 ubox
3 36 0.003791273 ubox
3 41 0.012016757 ubox
3 45 0.004351904 ubox
3 55 0.047648964 ubox
3 56 0.009114118 ubox
3 60 0.997977895 ubox
3 61 0.010419992 ubox
3 65 0.011292545 ubox
4 11 0.014383900 ubox
4 33 0.008670535 ubox
4 40 0.011563580 ubox
4 44 0.004329908 ubox
4 59 0.993962780 ubox
4 64 0.011244473 ubox
5 10 0.013493283 ubox
5 33 0.004612794 ubox
5 43 0.003842968 ubox
5 58 0.894969350 ubox
5 63 0.010022383 ubox
6 31 0.006201282 ubox
6 32 0.004679376 ubox
6 39 0.003640308 ubox
7 30 0.006589333 ubox
7 38 0.003482742 ubox
7 40 0.004453876 ubox
8 31 0.004271490 ubox
8 39 0.004973504 ubox
8 53 0.003682910 ubox
9 30 0.004108266 ubox
9 33 0.012718903 ubox
9 38 0.004966528 ubox
9 58 0.027420263 ubox
10 32 0.014027157 ubox
10 36 0.003812454 ubox
10 37 0.004371041 ubox
10 54 0.980652507 ubox
10 55 0.027363956 ubox
10 56 0.066322586 ubox
10 57 0.027147935 ubox
11 31 0.014160704 ubox
11 35 0.004424151 ubox
11 53 0.994903991 ubox
11 54 0.020968311 ubox
11 55 0.065832991 ubox
12 29 0.015644482 ubox
12 30 0.010498684 ubox
12 52 0.997239355 ubox
13 28 0.018455440 ubox
13 51 0.997571799 ubox
14 27 0.018431771 ubox
14 29 0.005263750 ubox
14 50 0.997316575 ubox
14 52 0.063857009 ubox
15 26 0.018452625 ubox
15 28 0.005340503 ubox
15 49 0.995839973 ubox
15 51 0.064349525 ubox
16 25 0.018373275 ubox
16 27 0.005334300 ubox
16 44 0.005803899 ubox
16 50 0.064498625 ubox
17 26 0.005359883 ubox
17 43 0.004218532 ubox
17 44 0.064116364 ubox
17 49 0.062642059 ubox
18 25 0.005303575 ubox
18 43 0.087156830 ubox
18 49 0.003960830 ubox
19 24 0.004899476 ubox
19 42 0.088566838 ubox
19 46 0.912076864 ubox
19 47 0.199213271 ubox
19 48 0.008087071 ubox
20 41 0.088454220 ubox
20 45 0.994589893 ubox
20 46 0.023104358 ubox
20 47 0.004841465 ubox
21 44 0.994879577 ubox
22 43 0.960847122 ubox
22 44 0.006992733 ubox
23 43 0.035062259 ubox
24 40 0.534770938 ubox
24 43 0.009544630 ubox
25 35 0.011344744 ubox
25 39 0.519987465 ubox
26 34 0.011825838 ubox
26 35 0.030335239 ubox
26 36 0.057037335 ubox
26 37 0.301816657 ubox
26 42 0.124749215 ubox
26 57 0.003186319 ubox
27 34 0.032396905 ubox
27 35 0.057349431 ubox
27 36 0.301609101 ubox
27 37 0.939693048 ubox
27 41 0.122803542 ubox
27 42 0.047940740 ubox
27 56 0.003188410 ubox
28 34 0.085273644 ubox
28 35 0.250786097 ubox
28 36 0.941614911 ubox
28 41 0.047969973 ubox
28 55 0.003185230 ubox
29 35 0.913316145 ubox
29 54 0.003185949 ubox
30 39 0.046923657 ubox
30 53 0.003173400 ubox
31 38 0.045611701 ubox
32 40 0.006294032 ubox
33 39 0.006081220 ubox
44 65 0.010577585 ubox
45 64 0.010022270 ubox
46 63 0.007157630 ubox
47 64 0.022760986 ubox
48 63 0.024251046 ubox
49 62 0.025339297 ubox
50 61 0.025343497 ubox
51 60 0.025325407 ubox
53 59 0.004664251 ubox
54 58 0.003610606 ubox
59 65 0.028527114 ubox
60 64 0.028354489 ubox
1 62 0.9500000 lbox
2 61 0.9500000 lbox
3 60 0.9500000 lbox
4 59 0.9500000 lbox
5 58 0.9500000 lbox
10 54 0.9500000 lbox
11 53 0.9500000 lbox
12 52 0.9500000 lbox
13 51 0.9500000 lbox
14 50 0.9500000 lbox
15 49 0.9500000 lbox
19 46 0.9500000 lbox
20 45 0.9500000 lbox
21 44 0.9500000 lbox
22 43 0.9500000 lbox
27 37 0.9500000 lbox
28 36 0.9500000 lbox
29 35 0.9500000 lbox
showpage
end
%%EOF
