%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGUGUCUUACGCUCCAGGUGCUGGUCUACGCGGGCCUGGACAGUCAGGGGUAGGAGCGGGAGCCGAGAGGAGGCGGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[121.63199615 153.42898560]
[136.62126160 154.05267334]
[126.83694458 142.68309021]
[112.67044830 138.08312988]
[109.53342438 122.57604218]
[99.74911499 111.20646667]
[89.75391388 100.02183533]
[79.55132294 89.02605438]
[69.34873199 78.03027344]
[59.14614105 67.03450012]
[48.94355011 56.03871918]
[38.74095917 45.04294205]
[23.68261719 40.18939972]
[20.69771576 25.59694862]
[10.49512482 14.60117149]
[-1.05541837 5.03116894]
[-13.75628090 -2.94931221]
[-26.45714378 -10.92979336]
[-39.15800858 -18.91027451]
[-51.85887146 -26.89075470]
[-64.55973053 -34.87123489]
[-73.73245239 -36.86605072]
[-77.57846832 -43.39509583]
[-89.97205353 -51.84489822]
[-102.36563110 -60.29469681]
[-117.36873627 -55.88552094]
[-131.67515564 -62.19903564]
[-138.52983093 -76.25419617]
[-134.69619751 -91.41458130]
[-121.98437500 -100.52191925]
[-106.39649963 -99.27600861]
[-95.29269409 -88.26512909]
[-93.91583252 -72.68827820]
[-81.52224731 -64.23847961]
[-69.12866974 -55.78867722]
[-56.57925034 -47.57210159]
[-43.87838745 -39.59161758]
[-31.17752647 -31.61113739]
[-18.47666359 -23.63065720]
[-5.77580023 -15.65017509]
[6.92506266 -7.66969395]
[5.30897522 -22.58238220]
[13.39550686 -35.21598816]
[27.61454201 -39.99291611]
[41.68853378 -34.80420303]
[49.40396881 -21.94060707]
[47.35456848 -7.08126783]
[36.44512177 3.21358132]
[21.49090385 4.39858007]
[31.69349480 15.39435863]
[46.02207947 19.46140862]
[49.73674011 34.84035110]
[59.93933105 45.83612823]
[70.14192200 56.83190536]
[80.34451294 67.82768250]
[90.54710388 78.82346344]
[100.74969482 89.81924438]
[108.29284668 93.22452545]
[111.11869049 101.42215729]
[120.90299988 112.79173279]
[135.76933289 118.20492554]
[138.20651245 132.89878845]
[147.99082947 144.26835632]
[159.54138184 153.83836365]
[172.53175354 161.33836365]
[185.52214050 168.83836365]
[200.15379333 163.32032776]
[214.89201355 168.54707336]
[222.77786255 182.05067444]
[220.08789062 197.45515442]
[208.09220886 207.48698425]
[192.45481873 207.40943909]
[180.55920410 197.25914001]
[178.02214050 181.82873535]
[165.03175354 174.32873535]
[152.04138184 166.82873535]
[155.44096375 181.43841553]
[150.65145874 195.65322876]
[139.10368347 205.22656250]
[124.24746704 207.29847717]
[110.52101135 201.24996948]
[102.02500153 188.88801575]
[101.29757690 173.90567017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[5 60]
[6 59]
[7 57]
[8 56]
[9 55]
[10 54]
[11 53]
[12 52]
[14 50]
[15 49]
[16 41]
[17 40]
[18 39]
[19 38]
[20 37]
[21 36]
[23 35]
[24 34]
[25 33]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
