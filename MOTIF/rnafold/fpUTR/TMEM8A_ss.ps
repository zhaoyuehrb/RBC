%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCGGGCCAUGGGCGCCGGGGGCAGAGGCGGAGGCGGCAGAGGCGGAGGCGGCAGAGGCUGCCCGGGCGGCGGCGGGGGCCGGCGGCGCGGGACGCGGGCCGGGUAGCGCCGGGCCGAGCGCGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[-61.19704056 391.78671265]
[-69.07277679 398.82562256]
[-79.31184387 400.28094482]
[-87.22644806 413.02294922]
[-95.14105225 425.76498413]
[-103.05565643 438.50698853]
[-110.81571960 451.34371948]
[-118.42012024 464.27325439]
[-126.02452087 477.20281982]
[-128.84255981 493.92089844]
[-145.68742371 495.84103394]
[-152.19563293 480.18600464]
[-138.95405579 469.59841919]
[-131.34967041 456.66885376]
[-123.74526978 443.73931885]
[-123.05912018 436.30361938]
[-115.79767609 430.59240723]
[-107.88307190 417.85037231]
[-99.96846771 405.10836792]
[-92.05386353 392.36633301]
[-92.95143127 373.11065674]
[-75.21961212 363.66384888]
[-67.92985535 350.55432129]
[-60.64010620 337.44479370]
[-67.38342285 325.85751343]
[-67.49579620 312.34274292]
[-60.84003448 300.45541382]
[-49.07334900 293.37567139]
[-35.23603058 293.05834961]
[-27.63163185 280.12881470]
[-20.02723503 267.19927979]
[-25.25601387 256.92633057]
[-24.82557678 245.28671265]
[-18.72746658 235.22184753]
[-8.40025139 229.33219910]
[3.60822463 229.20567322]
[11.82841206 216.65861511]
[20.04859924 204.11157227]
[28.26878738 191.56451416]
[23.89482498 179.38194275]
[27.41920471 166.72425842]
[37.76258087 158.30876160]
[51.26206970 157.40635681]
[59.78303909 145.06159973]
[68.30400848 132.71684265]
[76.82498169 120.37209320]
[69.73368835 106.00447083]
[70.80307007 90.01787567]
[79.74479675 76.72274780]
[94.14791870 69.70384979]
[110.12893677 70.85367584]
[118.34912109 58.30662155]
[126.56930542 45.75957108]
[134.78948975 33.21252060]
[130.10974121 22.15270996]
[131.38499451 10.33268261]
[138.17700195 0.72243577]
[148.67622375 -4.32063961]
[160.18255615 -3.62958145]
[168.99934387 -15.76483631]
[166.72935486 -31.17538071]
[175.84368896 -43.35665512]
[190.54927063 -45.42577744]
[199.36605835 -57.56103134]
[208.18283081 -69.69628906]
[216.99961853 -81.83154297]
[218.85154724 -97.54398346]
[232.59205627 -103.29269409]
[241.40882874 -115.42794800]
[243.26075745 -131.14039612]
[257.00128174 -136.88909912]
[265.81805420 -149.02435303]
[274.48754883 -161.26525879]
[283.00851440 -173.61001587]
[291.52951050 -185.95477295]
[292.30902100 -202.33538818]
[307.00683594 -209.60906982]
[320.50308228 -200.29328918]
[318.91397095 -183.97132874]
[303.87426758 -177.43380737]
[295.35330200 -165.08905029]
[286.83230591 -152.74429321]
[285.60937500 -145.37782288]
[277.95330811 -140.20758057]
[269.13653564 -128.07232666]
[267.91522217 -113.22787476]
[253.54408264 -106.61116791]
[244.72731018 -94.47591400]
[243.50601196 -79.63146973]
[229.13487244 -73.01476288]
[220.31808472 -60.87950897]
[211.50131226 -48.74425507]
[202.68452454 -36.60899734]
[205.26095581 -21.98375893]
[196.49235535 -9.55128670]
[181.13459778 -6.94805765]
[172.31781006 5.18719721]
[176.31552124 22.97562599]
[165.94952393 38.35745621]
[147.33654785 41.43270493]
[139.11636353 53.97975922]
[130.89617920 66.52680969]
[122.67598724 79.07386017]
[129.48257446 90.89606476]
[130.52661133 104.49767303]
[125.60407257 117.22019196]
[115.67706299 126.57692719]
[102.68589020 130.73905945]
[89.16973877 128.89306641]
[80.64876556 141.23782349]
[72.12779999 153.58258057]
[63.60682678 165.92733765]
[67.09282684 183.02027893]
[57.37123871 197.09817505]
[40.81583786 199.78469849]
[32.59565353 212.33175659]
[24.37546349 224.87881470]
[16.15527725 237.42585754]
[20.76927376 255.71823120]
[10.80714321 271.36465454]
[-7.09768963 274.80368042]
[-14.70208740 287.73321533]
[-22.30648613 300.66275024]
[-15.34223652 316.02365112]
[-18.83450699 332.35473633]
[-31.22394180 343.30462646]
[-47.53058624 344.73455811]
[-54.82033920 357.84408569]
[-62.11008835 370.95361328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 20]
[4 19]
[5 18]
[6 17]
[7 15]
[8 14]
[9 13]
[22 129]
[23 128]
[24 127]
[29 123]
[30 122]
[31 121]
[36 118]
[37 117]
[38 116]
[39 115]
[43 112]
[44 111]
[45 110]
[46 109]
[51 103]
[52 102]
[53 101]
[54 100]
[59 97]
[60 96]
[63 93]
[64 92]
[65 91]
[66 90]
[68 88]
[69 87]
[71 85]
[72 84]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
