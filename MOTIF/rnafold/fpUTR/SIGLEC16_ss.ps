%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGCCCCUCCACCAGGCUUCCUGCUGGAGGAGUUUCCUUCCCAGCCAGGCCGGCCCAGAAGCCAG\
) } def
/len { sequence length } bind def

/coor [
[82.04871368 127.42897797]
[74.25408936 120.29151154]
[69.13563538 111.04483795]
[67.22539520 100.65009308]
[52.55807495 97.50849152]
[37.44346619 102.18387604]
[26.61896896 91.95257568]
[11.95164776 88.81097412]
[-2.71567345 85.66937256]
[-17.38299561 82.52776337]
[-32.05031586 79.38616180]
[-46.71763992 76.24456024]
[-61.83224487 80.91994476]
[-72.65674591 70.68864441]
[-87.32406616 67.54703522]
[-101.99138641 64.40543365]
[-116.65870667 61.26383209]
[-133.41290283 63.85871887]
[-140.54440308 48.47762680]
[-127.73860168 37.36691666]
[-113.51710510 46.59650803]
[-98.84978485 49.73811340]
[-84.18245697 52.87971878]
[-69.51513672 56.02132034]
[-55.44963837 51.12122726]
[-43.57603455 61.57723618]
[-28.90871239 64.71884155]
[-14.24139118 67.86044312]
[0.42593047 71.00204468]
[15.09325218 74.14365387]
[29.76057434 77.28525543]
[43.82607651 72.38516235]
[55.69967651 82.84117126]
[70.36699677 85.98277283]
[83.78035736 71.51280212]
[103.06966400 67.36299133]
[121.24691772 75.03670502]
[131.72695923 91.75397491]
[146.72283936 91.40233612]
[161.71871948 91.05069733]
[176.71459961 90.69905853]
[185.58245850 78.10272980]
[199.99853516 73.20068359]
[214.36689758 77.67439270]
[223.23959351 89.60809326]
[238.23547363 89.25645447]
[253.23135376 88.90481567]
[265.30215454 78.33716583]
[281.06408691 81.32737732]
[288.42593384 95.58159637]
[281.74029541 110.16522217]
[266.13586426 113.89093781]
[253.58299255 103.90068817]
[238.58711243 104.25232697]
[223.59123230 104.60396576]
[215.28764343 116.94043732]
[201.14476013 122.08270264]
[186.51475525 117.86175537]
[177.06623840 105.69493103]
[162.07035828 106.04656982]
[147.07447815 106.39820862]
[132.07859802 106.74984741]
[128.26365662 116.60610962]
[121.51083374 124.73623657]
[112.52205658 130.29513550]
[102.23166656 132.70500183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 34]
[5 33]
[7 31]
[8 30]
[9 29]
[10 28]
[11 27]
[12 26]
[14 24]
[15 23]
[16 22]
[17 21]
[38 62]
[39 61]
[40 60]
[41 59]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
