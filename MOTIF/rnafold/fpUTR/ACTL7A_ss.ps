%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAAAAUUCUCAGGGUAUCCUCUGAUGUAGGCCUUUCAGGCCUUGAAUCCAGUGGGAUUGAGAACUUUCUAAGAGUGGUGCGGCUCUUGACAAC\
) } def
/len { sequence length } bind def

/coor [
[193.67280579 226.54954529]
[208.67388916 226.42935181]
[198.41999817 215.48138428]
[188.16612244 204.53343201]
[177.91223145 193.58546448]
[167.65835571 182.63749695]
[153.31091309 178.63748169]
[149.52439880 163.27607727]
[139.27050781 152.32810974]
[129.01663208 141.38015747]
[118.76274109 130.43218994]
[108.50885773 119.48423004]
[98.25497437 108.53627014]
[95.00063324 108.23476410]
[91.80118561 106.64619446]
[89.17125702 103.79653931]
[87.60456085 99.91604614]
[87.49433136 95.42439270]
[78.75717163 83.23168945]
[70.02000427 71.03899384]
[61.28283691 58.84629440]
[52.54567337 46.65359116]
[43.61018372 34.60548019]
[34.47875977 22.70517921]
[25.34733963 10.80487919]
[16.02243233 -0.94442213]
[6.50653219 -12.53957939]
[-10.84179592 -13.87349796]
[-21.71990585 -27.02112770]
[-19.85607338 -43.64622498]
[-29.74625969 -54.92382431]
[-39.63644791 -66.20142365]
[-49.52663422 -77.47901917]
[-59.41682053 -88.75661469]
[-69.30700684 -100.03421021]
[-84.29635620 -107.95606995]
[-80.83354187 -124.55261993]
[-63.92699814 -125.81951904]
[-58.02941132 -109.92440033]
[-48.13922501 -98.64680481]
[-38.24903870 -87.36920166]
[-28.35885048 -76.09160614]
[-18.46866417 -64.81401062]
[-8.57847595 -53.53641510]
[4.38502884 -54.48228836]
[15.66275501 -47.63481140]
[20.95845985 -35.33703995]
[18.10168839 -22.05547905]
[27.61758804 -10.46032143]
[34.42626572 -7.22442770]
[37.24763870 1.67345762]
[46.37906265 13.57375813]
[55.51048279 25.47405815]
[62.20964050 28.93099213]
[64.73837280 37.91642761]
[73.47554016 50.10912704]
[82.21270752 62.30182648]
[90.94986725 74.49452972]
[99.68703461 86.68722534]
[109.20293427 98.28238678]
[119.45681763 109.23034668]
[129.71070862 120.17830658]
[139.96458435 131.12626648]
[150.21847534 142.07423401]
[160.47235107 153.02218628]
[175.55322266 157.80528259]
[178.60630798 172.38362122]
[188.86019897 183.33157349]
[199.11407471 194.27954102]
[209.36796570 205.22750854]
[219.62185669 216.17546082]
[231.21701050 225.69136047]
[243.95504761 233.61238098]
[256.69308472 241.53340149]
[269.43109131 249.45442200]
[282.16912842 257.37542725]
[294.90716553 265.29644775]
[310.23974609 261.46405029]
[323.74829102 269.66741943]
[327.41836548 285.03967285]
[319.07263184 298.46069336]
[303.66244507 301.96804810]
[290.33038330 293.48089600]
[286.98614502 278.03448486]
[274.24810791 270.11346436]
[261.51010132 262.19244385]
[248.77204895 254.27142334]
[236.03402710 246.35041809]
[223.29598999 238.42939758]
[226.10485840 253.16406250]
[219.94439697 266.84063721]
[207.04792786 274.50097656]
[192.09077454 273.36804199]
[180.49530029 263.85253906]
[176.46517944 249.40406799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 53]
[24 52]
[25 51]
[26 49]
[27 48]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
