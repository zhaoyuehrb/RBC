%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:31:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCGCUGGCGCCGCCGCCGCCGGCAGACCCCGCGCUCCGGCUCCGGCUCGGCUCGCUCGGCUCCGGUGCGCGCCGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[90.42536926 404.29531860]
[89.85082245 389.30630493]
[89.27628326 374.31732178]
[80.96575165 367.85040283]
[77.65171051 357.62081909]
[80.71546173 347.08123779]
[89.33997345 339.93789673]
[89.91451263 324.94891357]
[90.48905182 309.95989990]
[91.06359100 294.97091675]
[91.63813782 279.98193359]
[92.21267700 264.99291992]
[92.50000000 249.99568176]
[92.50000000 234.99568176]
[92.50000000 219.99568176]
[92.50000000 204.99568176]
[92.50000000 189.99568176]
[81.81912994 179.67800903]
[81.60544586 164.46586609]
[92.50000000 153.33274841]
[92.50000000 138.33274841]
[92.50000000 123.33274078]
[92.50000000 108.33274078]
[92.21267700 93.33549500]
[91.63813782 78.34650421]
[90.77658844 63.37126541]
[89.62834930 48.41527939]
[85.76755524 39.84757996]
[88.73379517 32.86634445]
[88.15925598 17.87735176]
[86.72474670 2.94610238]
[84.43500519 -11.87810421]
[82.14527130 -26.70231056]
[70.27600098 -40.62364960]
[76.95130157 -56.73395538]
[74.09543610 -71.45957947]
[62.93923950 -83.47920227]
[68.02835083 -99.06871796]
[84.12753296 -102.19097137]
[94.67532349 -89.63405609]
[88.82106018 -74.31544495]
[91.67693329 -59.58982468]
[101.62722015 -52.43377304]
[104.00779724 -39.99900818]
[96.96947479 -28.99205017]
[99.25921631 -14.16784382]
[101.54895020 0.65636301]
[104.42469025 3.09783077]
[106.12998962 7.16839743]
[105.85752106 12.23477173]
[103.14824677 17.30281067]
[103.72278595 32.29180145]
[104.58433533 47.26704025]
[105.73257446 62.22302628]
[109.47988129 68.81802368]
[106.62712860 77.77196503]
[107.20166779 92.76095581]
[110.70769501 100.26753235]
[107.50000000 108.33274078]
[107.50000000 123.33274078]
[107.50000000 138.33274841]
[107.50000000 153.33274841]
[118.39455414 164.46586609]
[118.18087006 179.67800903]
[107.50000000 189.99568176]
[107.50000000 204.99568176]
[107.50000000 219.99568176]
[107.50000000 234.99568176]
[107.50000000 249.99568176]
[110.69361877 258.83377075]
[107.20166779 265.56747437]
[106.62712860 280.55645752]
[106.05258942 295.54547119]
[105.47805023 310.53445435]
[104.90350342 325.52343750]
[104.32896423 340.51242065]
[114.65776825 357.62081909]
[104.26527405 373.74276733]
[104.83982086 388.73178101]
[105.41436005 403.72076416]
[108.34120941 422.88018799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[7 76]
[8 75]
[9 74]
[10 73]
[11 72]
[12 71]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[20 62]
[21 61]
[22 60]
[23 59]
[24 57]
[25 56]
[26 54]
[27 53]
[29 52]
[30 51]
[31 47]
[32 46]
[33 45]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
