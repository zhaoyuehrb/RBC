%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:58:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGACAACAAAACAGAUUACUUUGAAGGGACUAGAAGGAGGACACAGGGUCCUGGAGGAAGGCAGCUGGCAAGUUACAGAGCAGAAAGACUUUGCACCUCUGGCUCCAGGGAGCUCACAGGCAGGGGCUGGUCCAGCCCAGAGGCG\
) } def
/len { sequence length } bind def

/coor [
[83.24626923 390.65570068]
[79.09645844 405.15499878]
[71.47048950 418.16635132]
[60.84772110 428.87185669]
[47.89591980 436.59854126]
[33.42924118 440.86071777]
[18.35707283 441.39041138]
[3.62686706 438.15438843]
[-9.83542442 431.35604858]
[-21.18355179 421.42272949]
[-29.70415878 408.97885132]
[-34.86163712 394.80667114]
[-36.33178329 379.79699707]
[-34.02217865 364.89343262]
[-28.07800865 351.03277588]
[-18.87293053 339.08633423]
[-6.98558092 329.80508423]
[6.83678913 323.77243042]
[21.72529602 321.36761475]
[36.74403381 322.74176025]
[41.77379227 308.61019897]
[46.80355453 294.47860718]
[51.83331299 280.34704590]
[56.86307526 266.21545410]
[47.16466522 253.01118469]
[47.22270203 236.46224976]
[57.21154404 223.06050110]
[73.37126160 218.18038940]
[78.09788513 203.94454956]
[82.82450867 189.70872498]
[87.55113220 175.47288513]
[92.27775574 161.23704529]
[97.00437927 147.00120544]
[101.73100281 132.76536560]
[89.60632324 132.53269958]
[77.92377472 127.79358673]
[68.35885620 118.86053467]
[62.40904236 106.66630554]
[61.16623306 92.67223358]
[47.32342529 86.89498138]
[33.48061371 81.11773682]
[19.63780594 75.34048462]
[5.79499674 69.56323242]
[-9.53018188 74.30858612]
[-22.71377373 65.16679382]
[-23.64245415 49.15063858]
[-11.60381985 38.54635620]
[4.16711950 41.48863983]
[11.57224846 55.72042084]
[25.41505814 61.49767303]
[39.25786591 67.27492523]
[53.10067749 73.05217743]
[66.94348145 78.82942963]
[73.09477997 74.53855133]
[63.71633148 62.83193970]
[54.33788681 51.12532806]
[44.95943832 39.41871643]
[32.48177338 31.09358788]
[32.32627869 16.09439278]
[44.62866974 7.51237106]
[58.65147400 12.83787441]
[62.15546417 27.42351532]
[69.90276337 40.26794434]
[77.65006256 53.11237335]
[85.39736176 65.95680237]
[91.54865265 61.66592789]
[90.90770721 46.67963028]
[90.26676178 31.69332886]
[77.26098633 23.22991371]
[71.74521637 8.72626209]
[75.84037781 -6.24067640]
[87.97180176 -15.91580868]
[103.47470093 -16.57884979]
[116.38790131 -7.97484541]
[121.74600983 6.58778811]
[117.48872375 21.50942230]
[105.25305939 31.05238152]
[105.89400482 46.03868103]
[106.53495026 61.02498245]
[108.65850067 67.25203705]
[109.70144653 73.49203491]
[118.41416931 61.28185654]
[127.12688446 49.07167435]
[135.83959961 36.86149216]
[144.55232239 24.65131187]
[143.33612061 8.65442467]
[155.18232727 -2.16438532]
[171.00357056 0.49414694]
[178.66314697 14.59062290]
[172.28526306 29.31143188]
[156.76251221 33.36402893]
[148.04978943 45.57421112]
[139.33706665 57.78439331]
[130.62434387 69.99457550]
[121.91162872 82.20475769]
[130.31071472 96.43820190]
[129.57095337 114.21704865]
[144.52900696 115.33800507]
[159.48707581 116.45895386]
[174.44512939 117.57990265]
[189.40318298 118.70085907]
[204.36123657 119.82180786]
[218.70103455 113.13742828]
[230.81451416 121.80420685]
[245.77256775 122.92515564]
[258.78237915 111.28133392]
[275.85510254 112.58787537]
[286.51361084 125.55551910]
[301.49221802 126.35655975]
[315.85882568 118.44879150]
[329.74850464 127.16711426]
[328.87271118 143.54286194]
[314.13244629 150.73007202]
[300.69116211 141.33515930]
[285.71258545 140.53411865]
[277.39303589 150.42726135]
[264.69952393 153.75051880]
[252.23422241 149.06631470]
[244.65161133 137.88320923]
[229.69355774 136.76226807]
[216.42366028 143.52682495]
[203.24029541 134.77986145]
[188.28222656 133.65892029]
[173.32417297 132.53796387]
[158.36611938 131.41700745]
[143.40806580 130.29606628]
[128.45001221 129.17510986]
[115.96684265 137.49198914]
[111.24021912 151.72782898]
[106.51359558 165.96366882]
[101.78697205 180.19950867]
[97.06034851 194.43533325]
[92.33372498 208.67117310]
[87.60710144 222.90701294]
[96.46882629 233.51670837]
[98.89347076 247.01593018]
[94.35025024 259.84182739]
[84.13314056 268.66308594]
[70.99465179 271.24520874]
[65.96488953 285.37680054]
[60.93513107 299.50836182]
[55.90537262 313.63995361]
[50.87561035 327.77154541]
[63.38521194 336.19534302]
[73.40626526 347.46606445]
[80.30884552 360.87521362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[28 134]
[29 133]
[30 132]
[31 131]
[32 130]
[33 129]
[34 128]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[66 79]
[67 78]
[68 77]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[104 120]
[105 119]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
