%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCGCAGCCCAUGUUAGUGAUGGAGGAGAGAAGAUGGCGGAAGCGGAGUGAGUGACUAGAUGAUUUAAGGACCAUAGUACAGCU\
) } def
/len { sequence length } bind def

/coor [
[100.80303955 118.86978149]
[91.88086700 117.05265808]
[84.84574127 111.27217102]
[81.33274841 102.87181091]
[66.82049561 99.07781219]
[52.30823898 95.28380585]
[38.78152847 103.00817108]
[24.11808395 98.95378113]
[16.83744431 86.01052856]
[2.32518911 82.21652985]
[-12.31594944 78.95507050]
[-27.06643486 76.23052216]
[-41.81691742 73.50596619]
[-56.79291534 78.60794067]
[-67.90309906 68.68760681]
[-82.65357971 65.96305084]
[-90.59090424 78.89994812]
[-102.66796112 88.09284210]
[-117.25141144 92.29846954]
[-132.36897278 90.94805145]
[-145.97613525 84.22422028]
[-156.23260498 73.03632355]
[-161.75131226 58.89743042]
[-161.78588867 43.71970749]
[-156.33164978 29.55582237]
[-146.12623596 18.32131958]
[-132.54985046 11.53557396]
[-117.43859863 10.11630440]
[-102.83613586 14.25545311]
[-90.71733093 23.39323616]
[-82.72116089 36.29384232]
[-79.92903137 51.21257019]
[-65.17854309 53.93712234]
[-51.25760269 48.64026642]
[-39.09236526 58.75548172]
[-24.34188080 61.48003769]
[-9.59139633 64.20458984]
[-5.04492807 62.13802719]
[0.86554629 63.08003235]
[6.11918974 67.70426941]
[20.63144493 71.49827576]
[33.31518173 63.77438736]
[48.08671951 67.41531372]
[56.10224152 80.77155304]
[70.61449432 84.56555176]
[85.12675476 88.35955811]
[103.76918793 81.49306488]
[118.24117279 95.10375977]
[133.08131409 97.28777313]
[147.92146301 99.47179413]
[158.86592102 92.35982513]
[171.30711365 94.63886261]
[178.54156494 104.51728058]
[193.29205322 107.24183655]
[208.04254150 109.96638489]
[217.29354858 108.43244934]
[223.27770996 113.06923676]
[237.91883850 116.33068848]
[252.55998230 119.59214020]
[260.69659424 106.80264282]
[272.71865845 97.56977844]
[287.17446899 93.00848389]
[302.31838989 93.66954803]
[316.32177734 99.47313690]
[327.49359131 109.71845245]
[334.48480225 123.16831207]
[336.45117188 138.19857788]
[333.15530396 152.99429321]
[324.99511719 165.76878357]
[312.95605469 174.97946167]
[298.49188232 179.51411438]
[283.34918213 178.82514954]
[269.35653687 172.99575806]
[258.20364380 162.72987366]
[251.23721313 149.26715088]
[249.29852295 134.23327637]
[234.65739441 130.97183228]
[220.01625061 127.71037292]
[205.31799316 124.71687317]
[190.56750488 121.99232483]
[175.81701660 119.26776886]
[159.75541687 126.08130646]
[145.73745728 114.31194305]
[130.89730835 112.12792969]
[116.05715179 109.94390869]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[9 41]
[10 40]
[11 37]
[12 36]
[13 35]
[15 33]
[16 32]
[48 85]
[49 84]
[50 83]
[53 81]
[54 80]
[55 79]
[57 78]
[58 77]
[59 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
