%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGAGGCCGGGCAGGCCGGGCAGGGAGUGCGGGUCGGUUCUGCGUGCGCUGCCGGACGAGGCUCCCGCCGCCGAUUGACCCGCGCUCCGCCCGUAGUCGGGCCGUUCUGUUCCAAGAGAUAACCAUUGGGACCUUGGUAGCUA\
) } def
/len { sequence length } bind def

/coor [
[205.08663940 261.35971069]
[219.89712524 258.98278809]
[234.53262329 262.27734375]
[224.51167297 251.11579895]
[214.49070740 239.95423889]
[200.23072815 235.65283203]
[196.76869202 220.21505737]
[186.74772644 209.05349731]
[176.72677612 197.89193726]
[166.70581055 186.73037720]
[152.44583130 182.42898560]
[148.98377991 166.99121094]
[138.96282959 155.82965088]
[128.94186401 144.66809082]
[116.83956146 143.68844604]
[108.40038300 134.40814209]
[108.58177185 121.46393585]
[98.80329132 110.08935547]
[91.52436829 106.48216248]
[88.93998718 98.36322021]
[79.40850067 86.78086853]
[69.87701416 75.19852448]
[60.34553146 63.61617279]
[54.19149399 60.89482880]
[50.88400269 56.16135406]
[50.66611862 51.32430267]
[41.64175797 39.34261322]
[32.61739731 27.36091995]
[23.59303665 15.37923050]
[14.56867504 3.39753962]
[5.54431438 -8.58415127]
[-3.48004675 -20.56584167]
[-12.50440788 -32.54753113]
[-21.52876854 -44.52922440]
[-30.55312920 -56.51091385]
[-39.57749176 -68.49260712]
[-48.60185242 -80.47429657]
[-57.62621307 -92.45598602]
[-66.65057373 -104.43767548]
[-75.67493439 -116.41936493]
[-84.69929504 -128.40106201]
[-97.38372040 -130.98770142]
[-104.64806366 -141.21380615]
[-103.02101898 -153.24618530]
[-111.78548431 -165.41928101]
[-120.54995728 -177.59236145]
[-128.16088867 -182.77624512]
[-129.36871338 -190.12298584]
[-137.86924744 -202.48182678]
[-146.36976624 -214.84066772]
[-163.59585571 -217.68118286]
[-173.27760315 -231.80293274]
[-169.85397339 -248.23516846]
[-178.61845398 -260.40826416]
[-187.38291931 -272.58132935]
[-203.02015686 -274.87313843]
[-212.38966370 -287.60058594]
[-209.93267822 -303.21270752]
[-197.10687256 -312.44714355]
[-181.52159119 -309.82522583]
[-172.42329407 -296.90249634]
[-175.20983887 -281.34582520]
[-166.44537354 -269.17272949]
[-157.68089294 -256.99963379]
[-144.75672913 -256.71804810]
[-134.21067810 -248.90942383]
[-130.04811096 -236.25938416]
[-134.01092529 -223.34120178]
[-125.51039886 -210.98236084]
[-117.00987244 -198.62350464]
[-108.37687683 -186.35682678]
[-99.61240387 -174.18374634]
[-90.84793091 -162.01066589]
[-74.49846649 -155.71955872]
[-72.71760559 -137.42541504]
[-63.69324493 -125.44372559]
[-54.66888428 -113.46203613]
[-45.64452362 -101.48034668]
[-36.62015915 -89.49865723]
[-27.59580040 -77.51696777]
[-18.57143974 -65.53527069]
[-9.54707813 -53.55358505]
[-0.52271712 -41.57189178]
[8.50164413 -29.59020233]
[17.52600479 -17.60851288]
[26.55036545 -5.62682152]
[35.57472610 6.35486937]
[44.59908676 18.33655930]
[53.62344742 30.31825066]
[62.64780807 42.29994202]
[71.92787933 54.08469009]
[81.45936584 65.66703796]
[90.99085236 77.24938965]
[100.52233124 88.83173370]
[110.17787933 100.31086731]
[119.95635986 111.68545532]
[137.44834900 117.33142853]
[140.10342407 134.64712524]
[150.12438965 145.80868530]
[160.14533997 156.97024536]
[175.12210083 162.07000732]
[177.86737061 176.70942688]
[187.88833618 187.87098694]
[197.90928650 199.03254700]
[207.93025208 210.19410706]
[222.90699768 215.29385376]
[225.65226746 229.93327332]
[235.67323303 241.09483337]
[245.69418335 252.25639343]
[255.62872314 255.66673279]
[259.71228027 264.04754639]
[272.42538452 272.00851440]
[285.13851929 279.96945190]
[297.85162354 287.93041992]
[310.56472778 295.89135742]
[323.27786255 303.85229492]
[335.99096680 311.81326294]
[349.52114868 304.54489136]
[364.87234497 305.03143311]
[377.91513062 313.14199829]
[385.14105225 326.69491577]
[384.60638428 342.04452515]
[376.45495605 355.06179810]
[362.87945557 362.24520874]
[347.53164673 361.66244507]
[334.53994751 353.47024536]
[327.39913940 339.87231445]
[328.02999878 324.52636719]
[315.31689453 316.56542969]
[302.60379028 308.60446167]
[289.89065552 300.64352417]
[277.17755127 292.68255615]
[264.46444702 284.72161865]
[251.75132751 276.76068115]
[257.50381470 290.61380005]
[257.69961548 305.61251831]
[252.31077576 319.61108398]
[242.10820007 330.60690308]
[228.55148315 337.02682495]
[213.58006287 337.95242310]
[199.33578491 333.25134277]
[187.85643005 323.59603882]
[180.78427124 310.36788940]
[179.13104248 295.45925903]
[183.13327026 281.00305176]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 109]
[4 108]
[5 107]
[7 105]
[8 104]
[9 103]
[10 102]
[12 100]
[13 99]
[14 98]
[17 96]
[18 95]
[20 94]
[21 93]
[22 92]
[23 91]
[26 90]
[27 89]
[28 88]
[29 87]
[30 86]
[31 85]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[38 78]
[39 77]
[40 76]
[41 75]
[44 73]
[45 72]
[46 71]
[48 70]
[49 69]
[50 68]
[53 64]
[54 63]
[55 62]
[111 134]
[112 133]
[113 132]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
