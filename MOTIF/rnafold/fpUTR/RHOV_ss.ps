%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCCCUACACAAACCCGCUGGUAGCGCUGGGCCGACUCGCCCAGCCUGGACCCAUUCAGUCAGAGGCAGCCAGCGGGACCUGCUUCACCGAGCGCAGCGAAGCCGAGACCCGGGCUGGCCCCUCUGCUGCCCCCGGAGCGGGCC\
) } def
/len { sequence length } bind def

/coor [
[147.54306030 273.45007324]
[150.13406372 254.24234009]
[150.44612122 239.24557495]
[150.75817871 224.24882507]
[148.11930847 209.48277283]
[142.63227844 195.52238464]
[137.14524841 181.56199646]
[131.65821838 167.60160828]
[126.17118835 153.64122009]
[120.68415070 139.68081665]
[110.39602661 143.03286743]
[99.71842194 143.79252625]
[89.28758240 141.97050476]
[79.71165466 137.72973633]
[71.53517914 131.37243652]
[65.20819855 123.31927490]
[61.06160355 114.08179474]
[59.29010773 104.23013306]
[59.94371796 94.35789490]
[62.92798996 85.04638672]
[50.31686020 76.92485046]
[37.70573425 68.80330658]
[25.09460449 60.68176270]
[12.48347664 52.56022263]
[-0.12765154 44.43867874]
[-12.73878002 36.31713486]
[-25.34990692 28.19559479]
[-37.96103668 20.07405281]
[-53.75267410 19.10721207]
[-60.26377106 5.71113539]
[-72.87490082 -2.41040707]
[-86.89160919 -7.75191927]
[-101.70936584 -10.08302307]
[-116.52713013 -12.41412735]
[-131.34487915 -14.74523067]
[-146.16264343 -17.07633591]
[-160.98040771 -19.40743828]
[-175.79815674 -21.73854256]
[-188.42529297 -12.23427582]
[-204.06266785 -14.52517223]
[-213.43289185 -27.25208282]
[-210.97679138 -42.86435699]
[-198.15153503 -52.09951401]
[-182.56610107 -49.47849274]
[-173.46705627 -36.55630112]
[-158.64929199 -34.22519684]
[-143.83154297 -31.89409256]
[-129.01377869 -29.56298828]
[-114.19602203 -27.23188591]
[-99.37826538 -24.90078163]
[-84.56050873 -22.56967735]
[-77.24140167 -35.66283035]
[-86.98905182 -47.06385422]
[-96.73670197 -58.46487427]
[-106.48435974 -69.86589813]
[-116.23200989 -81.26691437]
[-131.86531067 -86.21990204]
[-135.12780762 -102.29124451]
[-122.66334534 -112.94812775]
[-107.29427338 -107.22765350]
[-104.83098602 -91.01456451]
[-95.08333588 -79.61354828]
[-85.33568573 -68.21252441]
[-75.58803558 -56.81150436]
[-65.84037781 -45.41048431]
[-52.80041504 -52.82394028]
[-38.00923920 -50.32973480]
[-28.12146759 -39.05001831]
[-27.58565903 -24.05959129]
[-36.64287186 -12.10271549]
[-51.21822739 -8.55884647]
[-64.75335693 -15.02153492]
[-52.14222717 -6.89999294]
[-37.25262070 -6.51406050]
[-29.83949471 7.46292400]
[-17.22836494 15.58446598]
[-4.61723757 23.70600891]
[7.99389076 31.82755089]
[20.60501862 39.94909286]
[33.21614838 48.07063675]
[45.82727432 56.19217682]
[58.43840408 64.31372070]
[71.04953003 72.43526459]
[86.69464874 62.30501175]
[105.23233795 60.36962128]
[122.63252258 67.04983521]
[133.29414368 56.49854660]
[143.95578003 45.94725418]
[154.61740112 35.39596558]
[165.16868591 24.73433876]
[175.60850525 13.96353054]
[186.04832458 3.19272208]
[192.73056030 -12.38880539]
[209.55297852 -10.28110600]
[212.18455505 6.46736050]
[196.81912231 13.63253498]
[186.37931824 24.40334320]
[175.93949890 35.17415237]
[173.52691650 42.21155548]
[165.16868591 46.05759048]
[154.50706482 56.60888290]
[143.84544373 67.16017151]
[133.18380737 77.71146393]
[137.85221863 83.81373596]
[141.37040710 90.89145660]
[143.53598022 98.72225952]
[144.19059753 107.04224396]
[159.17030334 107.82208252]
[174.15002441 108.60192871]
[189.12974548 109.38177490]
[198.78572083 97.23509979]
[213.74617004 93.11632538]
[228.25851440 98.60919952]
[236.74243164 111.60160828]
[235.93571472 127.09770203]
[226.14852905 139.13891602]
[211.14427185 143.09515381]
[196.69238281 137.44515991]
[188.34989929 124.36148834]
[173.37017822 123.58164215]
[158.39047241 122.80179596]
[143.41075134 122.02195740]
[134.64454651 134.19378662]
[140.13157654 148.15417480]
[145.61860657 162.11457825]
[151.10563660 176.07496643]
[156.59266663 190.03535461]
[162.07969666 203.99574280]
[177.06369019 201.52262878]
[193.30616760 213.39981079]
[200.76107788 226.41612244]
[208.21598816 239.43243408]
[215.67089844 252.44874573]
[223.12580872 265.46505737]
[230.15258789 271.40444946]
[230.59719849 278.83059692]
[237.77970886 291.99917603]
[250.67213440 303.00924683]
[243.66131592 318.44573975]
[226.88731384 315.98214722]
[224.61111450 299.18170166]
[217.42861938 286.01312256]
[210.10951233 272.91995239]
[202.65460205 259.90365601]
[195.19969177 246.88734436]
[187.74478149 233.87103271]
[180.28987122 220.85472107]
[165.75492859 224.56088257]
[165.44287109 239.55763245]
[165.13081360 254.55439758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 150]
[3 149]
[4 148]
[5 128]
[6 127]
[7 126]
[8 125]
[9 124]
[10 123]
[20 83]
[21 82]
[22 81]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[28 75]
[30 73]
[31 72]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[52 65]
[53 64]
[54 63]
[55 62]
[56 61]
[86 103]
[87 102]
[88 101]
[89 100]
[90 98]
[91 97]
[92 96]
[107 122]
[108 121]
[109 120]
[110 119]
[130 147]
[131 146]
[132 145]
[133 144]
[134 143]
[136 142]
[137 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
