%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGUUUUGCGGCGGAGCGGGCGGGCUGCGCGUGCGGCGGCUUCAACUGUCGCGGUAGGCAGCAGCAGGCUGAAGGGAUC\
) } def
/len { sequence length } bind def

/coor [
[8.41218185 283.60736084]
[-1.46910894 294.89276123]
[-11.35039997 306.17816162]
[-21.23169136 317.46356201]
[-16.20737839 331.97738647]
[-19.12887764 347.05587769]
[-29.21031952 358.64294434]
[-43.73984909 363.62173462]
[-58.80909348 360.65298462]
[-70.36450195 350.53527832]
[-75.29772949 335.99020386]
[-72.28176117 320.93035889]
[-62.12787628 309.40670776]
[-47.56742096 304.51910400]
[-32.51708221 307.58224487]
[-22.63579178 296.29687500]
[-12.75450134 285.01147461]
[-2.87321019 273.72607422]
[-9.93439770 253.69418335]
[-4.15719795 233.13088989]
[12.48832130 219.55635071]
[34.03168488 218.01679993]
[40.61291885 204.53764343]
[47.19415665 191.05850220]
[42.12309647 177.10070801]
[48.60538864 163.33718872]
[63.27998734 158.11283875]
[69.86122131 144.63369751]
[76.44245911 131.15455627]
[83.02369690 117.67540741]
[89.60493469 104.19625854]
[95.92990875 90.59498596]
[101.99636078 76.87644958]
[100.50127411 61.12604904]
[112.72486115 52.61527634]
[118.79131317 38.89674377]
[124.85776520 25.17821121]
[123.36267853 9.42780495]
[135.58625793 0.91703540]
[141.65270996 -12.80149841]
[147.71916199 -26.52003098]
[153.78561401 -40.23856354]
[159.85206604 -53.95709991]
[152.79960632 -67.91405487]
[156.41877747 -83.12706757]
[169.00071716 -92.41300964]
[184.60462952 -91.38734436]
[195.86282349 -80.53435516]
[197.45950317 -64.97850800]
[188.64079285 -52.06477737]
[173.57060242 -47.89064789]
[167.50415039 -34.17211151]
[161.43769836 -20.45357895]
[155.37124634 -6.73504591]
[149.30479431 6.98348761]
[151.23379517 21.75265121]
[138.57629395 31.24466324]
[132.50984192 44.96319580]
[126.44339752 58.68172836]
[128.37239075 73.45089722]
[115.71489716 82.94290161]
[109.64844513 96.66143799]
[109.50220490 104.94067383]
[103.08407593 110.77749634]
[96.50284576 124.25664520]
[89.92160797 137.73577881]
[83.34037018 151.21493530]
[76.75913239 164.69407654]
[81.66443634 179.47837830]
[74.79811096 193.05439758]
[60.67330170 197.63973999]
[54.09206390 211.11888123]
[47.51082611 224.59803772]
[54.20980835 231.59988403]
[58.78073883 240.12236023]
[60.89914322 249.53842163]
[60.42055893 259.15847778]
[57.39031601 268.28088379]
[52.03948975 276.24301147]
[44.76729202 282.46951294]
[36.11132431 286.51376343]
[26.70781898 288.09005737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 18]
[2 17]
[3 16]
[4 15]
[22 73]
[23 72]
[24 71]
[27 68]
[28 67]
[29 66]
[30 65]
[31 64]
[32 62]
[33 61]
[35 59]
[36 58]
[37 57]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
