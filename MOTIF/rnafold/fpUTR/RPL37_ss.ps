%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCCCGCAGGAAGUGCUUCCCUGGGCGGAAGCUUCUGAGCGUGAUAUAGCGGAAGUGCCUUCUCUUCCGGUCUUUCUGGUCUCGGCCGCAGAAGCGAG\
) } def
/len { sequence length } bind def

/coor [
[-16.30699158 213.68383789]
[-27.23588753 207.95809937]
[-39.56022263 216.50857544]
[-51.88455582 225.05906677]
[-64.20889282 233.60954285]
[-76.53322601 242.16003418]
[-76.34877014 254.25770569]
[-82.04427338 264.79504395]
[-92.06181335 271.13845825]
[-103.78094482 271.76858521]
[-114.20372772 266.64266968]
[-127.03580475 274.41040039]
[-139.86787415 282.17816162]
[-152.69995117 289.94589233]
[-160.12487793 304.56787109]
[-176.51264954 305.17840576]
[-185.00494385 291.14938354]
[-176.86561584 276.91271973]
[-160.46769714 277.11383057]
[-147.63562012 269.34606934]
[-134.80354309 261.57833862]
[-121.97147369 253.81059265]
[-118.81989288 235.91053772]
[-103.42188263 225.67448425]
[-85.08370972 229.83569336]
[-72.75937653 221.28521729]
[-60.43504333 212.73472595]
[-48.11070633 204.18424988]
[-35.78637314 195.63375854]
[-36.30510712 178.12355042]
[-26.23054886 163.60348511]
[-9.35335445 157.85980225]
[7.78222847 163.31411743]
[19.55114174 154.01397705]
[31.32005692 144.71383667]
[43.08897018 135.41369629]
[54.85788345 126.11354828]
[66.62680054 116.81340790]
[78.39571381 107.51326752]
[79.59706879 89.66004944]
[93.28445435 78.13459778]
[111.08157349 79.99017334]
[122.24954224 69.97635651]
[127.35886383 55.00286484]
[142.00003052 52.26694870]
[153.16799927 42.25312424]
[164.33596802 32.23930359]
[168.73838806 24.02886963]
[176.01046753 22.09434700]
[187.48445129 12.43269157]
[198.95845032 2.77103496]
[209.48225403 -7.91772461]
[218.96429443 -19.54058075]
[228.44633484 -31.16343689]
[237.92839050 -42.78629303]
[247.41043091 -54.40914917]
[256.89248657 -66.03200531]
[252.80073547 -80.99987793]
[258.31979370 -95.50227356]
[271.32751465 -103.96272278]
[286.82211304 -103.12800598]
[298.84564209 -93.31909943]
[302.77478027 -78.30772400]
[297.09869385 -63.86605072]
[283.99996948 -55.54721069]
[268.51535034 -56.54996109]
[259.03329468 -44.92710495]
[249.55123901 -33.30424881]
[240.06919861 -21.68139076]
[230.58715820 -10.05853462]
[221.10510254 1.56432199]
[236.08673096 2.30641127]
[246.36607361 13.23047447]
[246.19656372 28.22951698]
[235.67294312 38.91846466]
[220.67837524 39.32176208]
[209.59539795 29.21394730]
[208.62010193 14.24502277]
[197.14611816 23.90667915]
[185.67213440 33.56833649]
[174.34977722 43.40726471]
[163.18182373 53.42108536]
[152.01385498 63.43490982]
[147.70333862 77.69214630]
[132.26336670 81.14431763]
[121.09539795 91.15813446]
[122.73459625 102.51641846]
[118.65108490 113.24127960]
[109.87274933 120.63305664]
[98.60926819 122.83112335]
[87.69585419 119.28218079]
[75.92694092 128.58232117]
[64.15802765 137.88246155]
[52.38911438 147.18260193]
[40.62020111 156.48275757]
[28.85128593 165.78289795]
[17.08237076 175.08303833]
[19.24293709 187.60015869]
[15.82640743 199.75862122]
[7.55819607 209.20863342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 29]
[3 28]
[4 27]
[5 26]
[6 25]
[11 22]
[12 21]
[13 20]
[14 19]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[42 86]
[43 85]
[45 83]
[46 82]
[47 81]
[49 80]
[50 79]
[51 78]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
