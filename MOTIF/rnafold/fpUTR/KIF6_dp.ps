%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:31 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (KIF6)
} def

/sequence { (\
GUAGUGUCCCUAGCUACUGUUGCUAAGACUGUGGGUCGCCGGAGGUGGUGGGAGUUAGUUUUGGCAGCCCGGGCCUGAGAGAGGUCAAGGGUCAUUGCAGAGCCAGGGAGGAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 98 0.019921229 ubox
2 6 0.009075127 ubox
2 97 0.019928658 ubox
3 96 0.019901968 ubox
4 95 0.019919472 ubox
5 94 0.019933350 ubox
6 93 0.019917528 ubox
7 109 0.934821180 ubox
7 111 0.010982463 ubox
7 112 0.013970270 ubox
8 91 0.019919279 ubox
8 107 0.003402939 ubox
8 108 0.999356301 ubox
8 110 0.007624562 ubox
8 111 0.013125721 ubox
9 90 0.019931275 ubox
9 107 0.999674655 ubox
9 108 0.008930275 ubox
9 110 0.011958422 ubox
10 89 0.019924367 ubox
10 106 0.999665711 ubox
10 107 0.008975622 ubox
10 108 0.010623292 ubox
11 88 0.019202891 ubox
11 105 0.980760630 ubox
11 106 0.008596285 ubox
11 107 0.010476162 ubox
12 18 0.003543078 ubox
13 17 0.003638659 ubox
13 74 0.004260540 ubox
13 103 0.999142816 ubox
14 73 0.004378942 ubox
14 102 0.999762000 ubox
15 72 0.004353116 ubox
15 101 0.995921281 ubox
17 100 0.997032860 ubox
18 99 0.999091570 ubox
19 68 0.027153768 ubox
19 95 0.003811430 ubox
19 98 0.998815968 ubox
20 67 0.093835265 ubox
20 94 0.007649713 ubox
20 97 0.946965215 ubox
21 66 0.925352134 ubox
21 94 0.022614977 ubox
21 97 0.021032662 ubox
22 65 0.999805253 ubox
22 93 0.006851803 ubox
23 64 0.999979406 ubox
24 63 0.999455900 ubox
25 62 0.998780371 ubox
26 61 0.997742668 ubox
27 60 0.998747279 ubox
28 59 0.999700531 ubox
29 58 0.999952613 ubox
30 57 0.997480676 ubox
31 55 0.025486079 ubox
31 56 0.971298618 ubox
32 54 0.029353089 ubox
32 57 0.013480613 ubox
33 56 0.026509313 ubox
33 70 0.003664497 ubox
34 55 0.042808637 ubox
34 56 0.004447117 ubox
34 69 0.003666860 ubox
35 49 0.010658128 ubox
35 55 0.007626294 ubox
35 68 0.003666954 ubox
36 48 0.014985341 ubox
36 51 0.978416118 ubox
36 52 0.040366428 ubox
36 53 0.049233069 ubox
36 67 0.003644256 ubox
37 47 0.016269074 ubox
37 50 0.997629037 ubox
37 51 0.030279689 ubox
37 52 0.046604029 ubox
38 46 0.016564004 ubox
38 49 0.998883399 ubox
38 65 0.003864747 ubox
39 45 0.016598549 ubox
39 48 0.999402374 ubox
39 51 0.029744233 ubox
39 64 0.003867791 ubox
40 44 0.016492859 ubox
40 47 0.999190211 ubox
40 50 0.029767049 ubox
40 63 0.003867664 ubox
41 46 0.885599144 ubox
41 49 0.028336271 ubox
41 62 0.003854559 ubox
42 61 0.003861856 ubox
43 60 0.003862387 ubox
44 59 0.003812200 ubox
46 57 0.003847108 ubox
47 56 0.003828936 ubox
66 96 0.013986673 ubox
67 92 0.958858847 ubox
67 95 0.007631329 ubox
67 98 0.003349563 ubox
68 90 0.050354607 ubox
68 91 0.997834155 ubox
68 97 0.003806354 ubox
69 89 0.050923643 ubox
69 90 0.998281612 ubox
69 91 0.007717936 ubox
70 89 0.997825105 ubox
70 90 0.007783148 ubox
71 86 0.016392064 ubox
71 93 0.005596541 ubox
72 85 0.011901255 ubox
72 86 0.992156321 ubox
72 92 0.005511533 ubox
72 93 0.016603723 ubox
73 85 0.999144248 ubox
73 92 0.016728661 ubox
74 84 0.999821200 ubox
74 90 0.005565722 ubox
74 91 0.016752065 ubox
75 83 0.999802361 ubox
75 84 0.003163477 ubox
75 89 0.005596870 ubox
75 90 0.016741018 ubox
76 80 0.003636477 ubox
76 82 0.995316565 ubox
76 83 0.003966769 ubox
76 87 0.005400495 ubox
76 88 0.004411756 ubox
76 89 0.016546829 ubox
77 86 0.006991489 ubox
78 85 0.006886250 ubox
79 86 0.016622180 ubox
80 85 0.016201207 ubox
91 98 0.007950192 ubox
92 97 0.007994734 ubox
92 101 0.003914250 ubox
93 100 0.008077290 ubox
103 111 0.016132711 ubox
104 110 0.016175083 ubox
7 109 0.9500000 lbox
8 108 0.9500000 lbox
9 107 0.9500000 lbox
10 106 0.9500000 lbox
11 105 0.9500000 lbox
13 103 0.9500000 lbox
14 102 0.9500000 lbox
15 101 0.9500000 lbox
17 100 0.9500000 lbox
18 99 0.9500000 lbox
19 98 0.9500000 lbox
20 97 0.9500000 lbox
21 66 0.9500000 lbox
22 65 0.9500000 lbox
23 64 0.9500000 lbox
24 63 0.9500000 lbox
25 62 0.9500000 lbox
26 61 0.9500000 lbox
27 60 0.9500000 lbox
28 59 0.9500000 lbox
29 58 0.9500000 lbox
30 57 0.9500000 lbox
31 56 0.9500000 lbox
36 51 0.9500000 lbox
37 50 0.9500000 lbox
38 49 0.9500000 lbox
39 48 0.9500000 lbox
40 47 0.9500000 lbox
41 46 0.9500000 lbox
67 92 0.9500000 lbox
68 91 0.9500000 lbox
69 90 0.9500000 lbox
70 89 0.9500000 lbox
72 86 0.9500000 lbox
73 85 0.9500000 lbox
74 84 0.9500000 lbox
75 83 0.9500000 lbox
76 82 0.9500000 lbox
showpage
end
%%EOF
