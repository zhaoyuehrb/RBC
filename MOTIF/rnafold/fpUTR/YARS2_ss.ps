%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:55:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCCCUAGGAGCUGUAAGUAGGUGGGUGUGGUGGGAGCCUCUGCAAUCCCAGCAUUCCCUUCGUGCCGCUACCAAG\
) } def
/len { sequence length } bind def

/coor [
[81.51312256 301.75305176]
[68.25525665 309.18927002]
[53.16027451 310.98089600]
[38.53005600 306.85476685]
[26.59559822 297.44003296]
[19.17682266 284.17239380]
[17.40503883 269.07507324]
[21.55043030 254.45028687]
[30.98085403 242.52821350]
[44.25823975 235.12690735]
[59.35787964 233.37498474]
[63.42948914 218.93815613]
[67.21685791 204.42416382]
[70.71854401 189.83862305]
[74.22022247 175.25306702]
[69.66782379 161.07121277]
[80.41293335 149.45858765]
[83.91461182 134.87303162]
[87.41629028 120.28748322]
[77.91936493 109.07617950]
[76.78637695 94.42690277]
[84.44651031 81.88866425]
[97.99816132 76.21083832]
[101.49983978 61.62528610]
[105.00151825 47.03973770]
[103.95927429 37.68944168]
[108.93761444 31.95582581]
[113.00922394 17.51899719]
[117.08082581 3.08216929]
[121.15243530 -11.35465908]
[125.22403717 -25.79148865]
[129.29565430 -40.22831726]
[127.95609283 -47.14861679]
[130.16825867 -52.75173569]
[134.29486084 -55.61431503]
[139.48661804 -69.68717957]
[144.67837524 -83.76005554]
[149.87013245 -97.83292389]
[155.06188965 -111.90579224]
[159.69714355 -126.17163849]
[163.76875305 -140.60847473]
[159.20980835 -156.36119080]
[170.76614380 -167.99661255]
[186.54957581 -163.54522705]
[190.32348633 -147.58622742]
[178.20558167 -136.53686523]
[174.13397217 -122.10003662]
[175.78987122 -117.35860443]
[174.28613281 -111.52530670]
[169.13475037 -106.71403503]
[163.94299316 -92.64116669]
[158.75123596 -78.56829834]
[153.55949402 -64.49542999]
[148.36773682 -50.42255783]
[143.73248291 -36.15670776]
[139.66087341 -21.71988106]
[135.58926392 -7.28305244]
[131.51765442 7.15377617]
[127.44605255 21.59060478]
[123.37444305 36.02743149]
[119.58706665 50.54141998]
[116.08538818 65.12696838]
[112.58370972 79.71251678]
[122.08063507 90.92382050]
[123.21362305 105.57309723]
[115.55348969 118.11133575]
[102.00183868 123.78916168]
[98.50016022 138.37471008]
[94.99848175 152.96026611]
[99.30041504 168.18536377]
[88.80577087 178.75474548]
[85.30409241 193.34030151]
[81.80241394 207.92584229]
[82.84465790 217.27613831]
[77.86631775 223.00976562]
[73.79470825 237.44659424]
[85.75389099 246.82989502]
[93.20755005 260.07797241]
[95.01905060 275.17056274]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 76]
[12 75]
[13 73]
[14 72]
[15 71]
[17 69]
[18 68]
[19 67]
[23 63]
[24 62]
[25 61]
[27 60]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
