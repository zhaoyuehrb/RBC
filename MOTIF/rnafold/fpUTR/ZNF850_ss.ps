%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUGCUGUGCCGAUUUAGCUGCCGCCGCGCCUUGGAGUCCUGAGGAACUUGGCUAGGCUGGCCCCGAGCGGAACCAGAGAAUGCUGAGGCUCUAACCAUGGAAUAUUCGGAAUGUCCCAUUCUAUGAAGGAGGUUUGCUGGCUGCAACAGGAAUAUUC\
) } def
/len { sequence length } bind def

/coor [
[94.18951416 331.20172119]
[81.32643127 323.48541260]
[71.59984589 312.06640625]
[66.02770996 298.13977051]
[65.19305420 283.16418457]
[58.12210464 296.39300537]
[51.05115509 309.62182617]
[43.98020172 322.85061646]
[50.87290955 336.75280762]
[48.24454880 352.04565430]
[37.10578156 362.84878540]
[21.73969078 365.00814819]
[8.05485344 357.69345093]
[1.31336546 343.71731567]
[4.10746861 328.45388794]
[15.36277294 317.77224731]
[30.75138283 315.77969360]
[37.82233429 302.55087280]
[44.89328766 289.32205200]
[51.96423721 276.09323120]
[56.73932266 261.87356567]
[59.08583832 247.05824280]
[61.43235397 232.24291992]
[55.78129578 218.46195984]
[65.58216095 206.04206848]
[67.92868042 191.22674561]
[70.27519226 176.41142273]
[72.47615051 161.57377625]
[74.53133392 146.71522522]
[76.58652496 131.85668945]
[66.40451050 120.84185791]
[51.43052673 121.72491455]
[36.45654297 122.60797882]
[21.48255920 123.49104309]
[6.50857496 124.37409973]
[-8.46540928 125.25716400]
[-21.85502434 134.72554016]
[-36.63444901 127.61917114]
[-37.59988022 111.24846649]
[-23.75816345 102.45420837]
[-9.34847164 110.28318024]
[5.62551260 109.40011597]
[20.59949684 108.51705933]
[35.57348251 107.63399506]
[50.54746628 106.75093079]
[65.52144623 105.86786652]
[67.45675659 94.04629517]
[73.09431458 84.21862793]
[81.33023071 77.41644287]
[75.05033112 63.79429626]
[68.77043915 50.17214966]
[62.49053955 36.55000305]
[56.21064377 22.92785454]
[49.93074799 9.30570698]
[33.47466278 7.97283173]
[20.00461388 -1.41074097]
[13.13055706 -16.21522713]
[14.63667393 -32.37401962]
[24.01934052 -45.50061417]
[17.47320175 -58.99683762]
[10.92706299 -72.49306488]
[4.38092470 -85.98928833]
[-10.28002930 -91.25181580]
[-16.72648621 -105.03215790]
[-11.61912060 -118.97670746]
[-18.16526031 -132.47293091]
[-32.03688812 -141.21992493]
[-31.12729263 -157.59382629]
[-16.37218666 -164.75056458]
[-2.95036006 -155.32791138]
[-4.66903543 -139.01907349]
[1.87710345 -125.52284241]
[15.98993206 -120.90075684]
[22.82090569 -107.30692291]
[17.87714958 -92.53542328]
[24.42328835 -79.03919983]
[30.96942711 -65.54297638]
[37.51556396 -52.04675293]
[51.20005798 -51.95920181]
[63.56629562 -45.94527435]
[72.16732025 -35.13137436]
[75.27384949 -21.59980965]
[72.22172546 -7.98794937]
[63.55289459 3.02581048]
[69.83279419 16.64795876]
[76.11268616 30.27010536]
[82.39258575 43.89225388]
[88.67247772 57.51440048]
[94.95237732 71.13655090]
[111.74253845 73.15432739]
[124.62141418 84.11405182]
[138.88726807 79.47879791]
[153.15310669 74.84354401]
[167.41896057 70.20829010]
[172.12806702 57.55619049]
[183.11352539 50.04976654]
[196.22215271 50.25459290]
[206.65280151 57.87081146]
[221.00691223 53.51654434]
[235.36102295 49.16227341]
[249.71511841 44.80800247]
[264.06921387 40.45373154]
[278.42333984 36.09946060]
[292.77743530 31.74519157]
[307.13153076 27.39092255]
[310.05560303 24.02245331]
[313.55700684 21.99574471]
[317.13229370 21.32596207]
[320.32650757 21.85965919]
[322.78515625 23.30616570]
[337.43664551 20.09152794]
[345.74517822 6.64743137]
[361.14559937 3.09740663]
[374.50109863 11.54762077]
[377.88812256 26.98471069]
[369.29718018 40.25012589]
[353.82513428 43.47372818]
[340.65127563 34.74301529]
[325.99978638 37.95765305]
[311.48580933 41.74502563]
[297.13171387 46.09929657]
[282.77758789 50.45356750]
[268.42349243 54.80783844]
[254.06939697 59.16210938]
[239.71528625 63.51637650]
[225.36117554 67.87065125]
[211.00708008 72.22491455]
[203.74426270 87.36770630]
[187.46415710 92.70123291]
[172.05421448 84.47413635]
[157.78836060 89.10939026]
[143.52252197 93.74464417]
[129.25666809 98.37989807]
[128.13694763 112.32929230]
[120.44459534 124.79643250]
[107.36201477 132.73855591]
[91.44506073 133.91188049]
[89.38987732 148.77041626]
[87.33469391 163.62895203]
[89.26462555 172.61151123]
[85.09052277 178.75793457]
[82.74400330 193.57325745]
[80.39748383 208.38858032]
[85.88070679 223.22923279]
[76.24768066 234.58943176]
[73.90116119 249.40475464]
[71.55464935 264.22009277]
[81.25963593 252.78273010]
[94.10811615 245.04214478]
[108.75540924 241.80845642]
[123.66858673 243.42005920]
[137.28688049 249.70831299]
[148.18504333 260.01510620]
[155.22253418 273.26174927]
[157.66281128 288.06192017]
[155.25050354 302.86666870]
[148.23805237 316.12661743]
[137.35937500 326.45397949]
[123.75299072 332.76794434]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 20]
[6 19]
[7 18]
[8 17]
[21 147]
[22 146]
[23 145]
[25 143]
[26 142]
[27 141]
[28 139]
[29 138]
[30 137]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[49 89]
[50 88]
[51 87]
[52 86]
[53 85]
[54 84]
[59 78]
[60 77]
[61 76]
[62 75]
[65 72]
[66 71]
[91 133]
[92 132]
[93 131]
[94 130]
[98 127]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
[104 121]
[105 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
