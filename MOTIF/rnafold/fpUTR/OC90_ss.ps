%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUCAUUCAUCCAGCUGCACUCCAGUGGAGCCUUCACGGAGUCCGUUCCAGUUGCUGCCUAAGCCCCAUCCUUUGUUCUCCUGCU\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 165.71553040]
[92.50000000 150.71553040]
[92.50000000 135.71553040]
[92.50000000 120.71552277]
[85.30861664 133.87925720]
[82.99259949 148.69938660]
[73.74837494 160.51226807]
[59.91959763 166.32304382]
[45.01224136 164.65849304]
[32.80571365 155.94065857]
[26.39470673 142.37971497]
[27.40457344 127.41374969]
[35.57929230 114.83702850]
[48.84634781 107.83808136]
[63.84005737 108.19072723]
[78.07149506 103.45087433]
[63.30982208 100.78757477]
[48.54815674 98.12427521]
[33.59346771 103.28837585]
[22.44219971 93.41424561]
[7.68053246 90.75094604]
[-7.08113527 88.08764648]
[-22.32197380 94.14147949]
[-35.01557922 83.75859070]
[-32.10385895 67.62000275]
[-16.58213997 62.32772064]
[-4.41783762 73.32598114]
[10.34383011 75.98928070]
[25.10549927 78.65258026]
[39.00433350 73.29798126]
[51.21145248 83.36260986]
[65.97312164 86.02590942]
[80.73478699 88.68920898]
[85.96850586 84.39469910]
[91.90937042 82.11302185]
[97.86247253 81.84799957]
[103.20185852 83.38247681]
[107.43558502 86.32141113]
[110.25106049 90.15250397]
[111.53640747 94.31648254]
[125.76879120 89.57949066]
[140.00119019 84.84249115]
[154.23356628 80.10549927]
[161.35647583 66.25263214]
[175.85762024 61.65139008]
[189.02032471 68.52735901]
[203.25270081 63.79036713]
[203.05244446 48.07925034]
[207.67694092 33.08299637]
[216.66873169 20.24490547]
[229.15061951 10.79677105]
[243.91123962 5.64068460]
[259.52264404 5.26291943]
[274.47842407 9.68809223]
[287.33898926 18.47793007]
[296.87033081 30.77464294]
[310.92459106 25.53268051]
[324.97882080 20.29071808]
[332.92446899 6.35348749]
[348.79666138 4.01837397]
[360.41964722 15.07667732]
[358.87722778 31.04541397]
[345.35263062 39.67473602]
[330.22079468 34.34496307]
[316.16653442 39.58692551]
[302.11230469 44.82888794]
[303.06762695 59.16335297]
[299.91113281 73.19497681]
[292.89355469 85.76737213]
[282.58432007 95.84174347]
[269.82522583 102.58274841]
[255.66175842 105.42775726]
[241.25733948 104.13378143]
[227.79788208 98.79821777]
[216.39405823 89.85157776]
[207.98970032 78.02275085]
[193.75730896 82.75975037]
[187.34063721 96.15235901]
[172.97445679 101.15908813]
[158.97056580 94.33789062]
[144.73817444 99.07488251]
[130.50578308 103.81187439]
[116.27339935 108.54887390]
[107.50000000 120.71552277]
[107.50000000 135.71553040]
[107.50000000 150.71553040]
[107.50000000 165.71553040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[16 33]
[17 32]
[18 31]
[20 29]
[21 28]
[22 27]
[40 83]
[41 82]
[42 81]
[43 80]
[46 77]
[47 76]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
