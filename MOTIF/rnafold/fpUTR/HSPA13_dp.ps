%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:07 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (HSPA13)
} def

/sequence { (\
UGCCGGGAGGAGUGGGGGCGGUGCCUCACGUCUGGUACAGUCAUCACAAGCCUGUUCGGCGGGACUGUG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 37 0.166826595 ubox
1 39 0.007638677 ubox
1 61 0.732793159 ubox
1 67 0.003769499 ubox
2 36 0.256609784 ubox
2 38 0.007455006 ubox
2 60 0.962225137 ubox
3 10 0.014946044 ubox
3 15 0.003880542 ubox
3 35 0.268041752 ubox
3 59 0.962678929 ubox
3 62 0.004572839 ubox
4 9 0.015010283 ubox
4 14 0.003895930 ubox
4 34 0.268064502 ubox
4 54 0.003292765 ubox
4 58 0.962659115 ubox
4 61 0.004585485 ubox
5 13 0.003714550 ubox
5 33 0.240542602 ubox
5 53 0.008527337 ubox
5 56 0.061748160 ubox
5 57 0.959876118 ubox
5 60 0.004486090 ubox
6 32 0.228034957 ubox
6 33 0.046679347 ubox
6 52 0.016628120 ubox
6 53 0.003704606 ubox
6 55 0.317569443 ubox
6 56 0.895535102 ubox
6 57 0.011814302 ubox
7 31 0.140166057 ubox
7 32 0.066144142 ubox
7 51 0.016776487 ubox
7 52 0.004285031 ubox
7 55 0.765431594 ubox
7 56 0.015238216 ubox
8 31 0.077245452 ubox
8 33 0.105545780 ubox
8 53 0.955773411 ubox
8 55 0.011318815 ubox
9 32 0.121533990 ubox
9 33 0.034026669 ubox
9 52 0.961873165 ubox
9 53 0.031542818 ubox
10 31 0.149601102 ubox
10 32 0.039345223 ubox
10 51 0.961446271 ubox
10 52 0.031423754 ubox
11 31 0.041061316 ubox
12 29 0.267733772 ubox
12 47 0.884039709 ubox
12 51 0.007247927 ubox
13 28 0.268715620 ubox
13 30 0.016259909 ubox
13 46 0.887212305 ubox
13 48 0.369746685 ubox
13 50 0.006233046 ubox
14 27 0.266947525 ubox
14 29 0.016554838 ubox
14 45 0.887030828 ubox
14 47 0.370250849 ubox
15 25 0.005900124 ubox
15 26 0.264791541 ubox
15 27 0.041211711 ubox
15 44 0.720976946 ubox
15 45 0.330156475 ubox
16 24 0.005901991 ubox
16 25 0.263060320 ubox
16 26 0.052012825 ubox
16 42 0.039823415 ubox
16 44 0.300123462 ubox
16 45 0.041939889 ubox
17 24 0.260985101 ubox
17 25 0.061183703 ubox
17 41 0.030993331 ubox
17 42 0.955562102 ubox
17 44 0.020738786 ubox
17 45 0.004583575 ubox
18 24 0.068895100 ubox
18 41 0.960645864 ubox
18 44 0.003240263 ubox
19 23 0.075272932 ubox
19 40 0.959287794 ubox
21 38 0.954264569 ubox
22 37 0.962043312 ubox
23 36 0.962555740 ubox
24 35 0.962797861 ubox
25 34 0.962686482 ubox
25 35 0.003373219 ubox
27 34 0.009331753 ubox
28 33 0.015344309 ubox
34 45 0.003369340 ubox
35 44 0.003395432 ubox
36 43 0.003315456 ubox
36 69 0.064590932 ubox
37 68 0.188231215 ubox
38 67 0.219094482 ubox
39 66 0.219305338 ubox
40 65 0.219381791 ubox
41 64 0.219185464 ubox
42 63 0.218368436 ubox
42 69 0.003325663 ubox
44 59 0.005794939 ubox
44 62 0.135209128 ubox
44 63 0.003322449 ubox
44 64 0.008097341 ubox
45 58 0.006307688 ubox
45 61 0.149453183 ubox
45 62 0.014387305 ubox
45 63 0.010551626 ubox
45 69 0.153505347 ubox
46 55 0.009693841 ubox
46 68 0.156968379 ubox
47 54 0.010035578 ubox
47 67 0.157318124 ubox
47 69 0.004304810 ubox
48 53 0.009045853 ubox
48 66 0.150475131 ubox
48 68 0.004177932 ubox
49 66 0.045283991 ubox
50 60 0.218249779 ubox
50 65 0.062539256 ubox
51 59 0.218336771 ubox
51 62 0.005784963 ubox
51 63 0.158790581 ubox
52 58 0.218165972 ubox
52 61 0.005771286 ubox
52 62 0.159109761 ubox
53 61 0.158983865 ubox
54 60 0.158957455 ubox
54 65 0.004687405 ubox
55 59 0.148707803 ubox
55 64 0.004795255 ubox
56 63 0.004818661 ubox
57 62 0.004964418 ubox
60 67 0.004982960 ubox
60 69 0.003472616 ubox
61 66 0.013255378 ubox
61 68 0.024514427 ubox
1 61 0.9500000 lbox
2 60 0.9500000 lbox
3 59 0.9500000 lbox
4 58 0.9500000 lbox
5 57 0.9500000 lbox
6 56 0.9500000 lbox
7 55 0.9500000 lbox
8 53 0.9500000 lbox
9 52 0.9500000 lbox
10 51 0.9500000 lbox
12 47 0.9500000 lbox
13 46 0.9500000 lbox
14 45 0.9500000 lbox
15 44 0.9500000 lbox
17 42 0.9500000 lbox
18 41 0.9500000 lbox
19 40 0.9500000 lbox
21 38 0.9500000 lbox
22 37 0.9500000 lbox
23 36 0.9500000 lbox
24 35 0.9500000 lbox
25 34 0.9500000 lbox
showpage
end
%%EOF
