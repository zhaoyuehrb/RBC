%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUGCGCGAAGCCGCCACGCUAUUGUCCUGACCAGGAAGGCGGGGCCGGCGCGGGGCGGGGCUGGCGGCGCCGGCGCAGCCCGGGGGCGGCGGGAGGAGGAGGUGGCGGCGGUGGCGCUGGGAGCUCCUGUCACCGCUGGGGCCGGGCCGGGCGGGAGUGCAGGGGACGUGAGGGCGCAAGGGCCGGGAC\
) } def
/len { sequence length } bind def

/coor [
[180.13667297 360.52017212]
[187.15956116 344.50625610]
[181.44750977 330.63641357]
[175.73547363 316.76657104]
[170.02342224 302.89672852]
[164.31138611 289.02688599]
[158.59934998 275.15704346]
[152.88729858 261.28720093]
[147.17526245 247.41735840]
[135.92597961 245.41136169]
[126.95349884 238.14356995]
[122.56505585 227.33374023]
[123.96082306 215.63005066]
[130.90832520 205.96055603]
[125.65076447 191.91212463]
[120.39321136 177.86370850]
[115.13565063 163.81529236]
[109.87809753 149.76687622]
[104.58113861 144.59645081]
[104.65132904 135.44676208]
[99.62313843 121.31462860]
[92.83589172 118.12349701]
[96.30975342 132.71569824]
[87.06716919 144.52986145]
[72.06782532 144.66990662]
[62.60625839 133.03038025]
[65.80705261 118.37585449]
[79.26141357 111.74122620]
[72.47416687 108.55008698]
[58.38342285 113.69313812]
[44.29267883 118.83618164]
[30.20193481 123.97922516]
[23.20055580 129.87010193]
[15.83976460 129.08926392]
[1.66717386 134.00227356]
[-6.60110664 147.75054932]
[-22.52341652 149.71513367]
[-33.88552475 138.38897705]
[-31.97138977 122.46051788]
[-18.24937630 114.14872742]
[-3.24583697 119.82968903]
[10.92675400 114.91667938]
[25.05888939 109.88848114]
[39.14963150 104.74543762]
[53.24037552 99.60239410]
[67.33112335 94.45934296]
[68.06332397 79.47722626]
[54.54123688 72.98468781]
[41.01914597 66.49214935]
[27.49705315 59.99961090]
[13.97496223 53.50707245]
[0.45287117 47.01453400]
[-13.06921959 40.52199554]
[-26.59131050 34.02945709]
[-44.19874954 40.98971558]
[-61.02088165 33.02071381]
[-66.59374237 15.59492970]
[-80.31999207 9.54596996]
[-94.04624939 3.49701047]
[-110.97865295 2.64256620]
[-114.84495544 -13.86464500]
[-100.05315399 -22.14950371]
[-87.99729156 -10.22924519]
[-74.27103424 -4.18028545]
[-60.54478073 1.86867380]
[-51.04084778 -4.47526360]
[-39.53509140 -5.44677448]
[-28.88289261 -0.68844980]
[-21.78405380 8.72064590]
[-20.09877205 20.50736427]
[-6.57668114 26.99990273]
[6.94540977 33.49244308]
[20.46750069 39.98498154]
[33.98958969 46.47751999]
[47.51168442 52.97005844]
[61.03377533 59.46259689]
[74.55586243 65.95513153]
[87.85657501 68.34437561]
[97.70576477 74.79687500]
[103.06941223 83.57454681]
[103.60327911 92.73194122]
[112.30111694 80.51115417]
[120.99895477 68.29037476]
[129.69679260 56.06958771]
[138.39463806 43.84880066]
[147.09246826 31.62801743]
[142.31408691 16.98311424]
[147.02032471 2.50192523]
[159.20703125 -6.32688665]
[174.07769775 -6.28720188]
[182.77552795 -18.50798607]
[191.47337341 -30.72877121]
[200.17120361 -42.94955444]
[208.86904907 -55.17034149]
[217.56689453 -67.39112854]
[226.16497803 -79.68229675]
[234.66275024 -92.04303741]
[233.08645630 -104.85451508]
[240.43116760 -114.97785950]
[252.31246948 -117.29974365]
[261.01031494 -129.52052307]
[269.70816040 -141.74131775]
[278.40597534 -153.96209717]
[287.10382080 -166.18287659]
[280.84002686 -180.13681030]
[282.39144897 -195.25268555]
[291.24188232 -207.48118591]
[304.93325806 -213.59690857]
[319.74774170 -212.04879761]
[328.44558716 -224.26957703]
[337.14343262 -236.49037170]
[345.84127808 -248.71115112]
[354.53912354 -260.93194580]
[355.55444336 -277.29962158]
[370.35543823 -284.36093140]
[383.71615601 -274.85177612]
[381.89218140 -258.55438232]
[366.75988770 -252.23410034]
[358.06207275 -240.01330566]
[349.36422729 -227.79252625]
[340.66638184 -215.57174683]
[331.96853638 -203.35095215]
[338.28350830 -189.86070251]
[336.98953247 -174.92144775]
[328.33438110 -162.55397034]
[314.56042480 -156.13713074]
[299.32461548 -157.48504639]
[290.62677002 -145.26425171]
[281.92892456 -133.04347229]
[273.23110962 -120.82268524]
[264.53326416 -108.60190582]
[263.82061768 -91.07385254]
[247.02348328 -83.54526520]
[238.52572632 -71.18452454]
[237.32527161 -63.88042450]
[229.78767395 -58.69328690]
[221.08982849 -46.47249985]
[212.39199829 -34.25171661]
[203.69415283 -22.03093147]
[194.99632263 -9.81014633]
[186.29847717 2.41063809]
[191.20661926 16.44802094]
[186.85636902 30.85424805]
[174.71542358 40.04396057]
[159.31326294 40.32585907]
[150.61541748 52.54664230]
[141.91758728 64.76742554]
[133.21974182 76.98821259]
[124.52190399 89.20899963]
[115.82405853 101.42977905]
[113.75527191 116.28643036]
[118.78347015 130.41856384]
[123.92651367 144.50930786]
[129.18406677 158.55773926]
[134.44163513 172.60615540]
[139.69918823 186.65457153]
[144.95674133 200.70298767]
[162.47831726 207.87667847]
[169.09378052 225.27566528]
[161.04510498 241.70532227]
[166.75714111 255.57516479]
[172.46919250 269.44500732]
[178.18122864 283.31484985]
[183.89328003 297.18469238]
[189.60531616 311.05453491]
[195.31735229 324.92437744]
[201.02940369 338.79421997]
[213.98449707 342.51242065]
[222.30740356 352.86511230]
[223.13096619 365.92791748]
[216.37797546 376.91217041]
[221.86349487 390.87313843]
[236.74067688 394.87008667]
[246.29994202 406.72225952]
[247.03849792 421.75283813]
[238.88244629 434.18734741]
[244.36798096 448.14834595]
[249.85350037 462.10931396]
[264.43988037 468.19314575]
[270.37472534 482.84078979]
[264.13702393 497.36203003]
[249.42745972 503.14169312]
[234.97297668 496.75079346]
[229.34916687 481.98095703]
[235.89251709 467.59484863]
[230.40699768 453.63385010]
[224.92146301 439.67288208]
[210.48228455 436.11645508]
[200.79136658 424.60342407]
[199.72550964 409.41403198]
[207.90251160 396.35867310]
[202.41699219 382.39767456]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 167]
[3 166]
[4 165]
[5 164]
[6 163]
[7 162]
[8 161]
[9 160]
[14 157]
[15 156]
[16 155]
[17 154]
[18 153]
[20 152]
[21 151]
[29 46]
[30 45]
[31 44]
[32 43]
[34 42]
[35 41]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[57 65]
[58 64]
[59 63]
[81 150]
[82 149]
[83 148]
[84 147]
[85 146]
[86 145]
[90 141]
[91 140]
[92 139]
[93 138]
[94 137]
[95 136]
[96 134]
[97 133]
[100 131]
[101 130]
[102 129]
[103 128]
[104 127]
[109 122]
[110 121]
[111 120]
[112 119]
[113 118]
[171 192]
[172 191]
[176 187]
[177 186]
[178 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
