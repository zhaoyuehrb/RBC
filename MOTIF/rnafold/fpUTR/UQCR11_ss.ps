%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGCCGCGGCCGCGCCUGCGCAGUGUAGCCGGGUCAGCUGGACAGGGUCAUCCUGAGGGUGCGACUCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[88.13623810 367.04248047]
[75.47804260 355.76391602]
[82.81171417 340.47817993]
[84.05040741 325.52941895]
[85.28909302 310.58065796]
[78.62923431 297.25790405]
[87.47971344 284.14379883]
[88.71840668 269.19503784]
[89.95709229 254.24626160]
[91.19578552 239.29750061]
[81.50912476 222.76625061]
[92.50000000 206.10366821]
[92.50000000 191.10366821]
[92.50000000 176.10366821]
[92.50000000 161.10366821]
[92.50000000 146.10366821]
[92.50000000 131.10366821]
[92.50000000 116.10366821]
[84.82567596 109.23677063]
[82.25065613 99.26588440]
[85.64027405 89.54168701]
[93.85544586 83.33199310]
[95.09413910 68.38322449]
[96.33282471 53.43445587]
[89.76156616 39.04247665]
[98.52344513 26.99761772]
[99.76213837 12.04884911]
[93.19087219 -2.34312940]
[101.95275879 -14.38799000]
[103.19144440 -29.33675766]
[104.43013763 -44.28552628]
[94.49215698 -56.28028870]
[95.96131897 -71.42282104]
[107.45773315 -80.82324219]
[108.69642639 -95.77201080]
[109.93511963 -110.72077942]
[100.70545197 -123.84300232]
[105.34832001 -139.19953918]
[120.30212402 -145.01017761]
[134.09556580 -136.81747437]
[136.14752197 -120.90618896]
[124.88388824 -109.48208618]
[123.64519501 -94.53331757]
[122.40650177 -79.58454895]
[132.19886780 -68.42008972]
[131.15560913 -53.24226761]
[119.37890625 -43.04683304]
[118.14021301 -28.09806824]
[116.90151978 -13.14929962]
[123.56138611 0.17344306]
[114.71090698 13.28753948]
[113.47221375 28.23630714]
[120.13208008 41.55905151]
[111.28159332 54.67314529]
[110.04290771 69.62191772]
[108.80421448 84.57067871]
[117.74934387 100.73411560]
[107.50000000 116.10366821]
[107.50000000 131.10366821]
[107.50000000 146.10366821]
[107.50000000 161.10366821]
[107.50000000 176.10366821]
[107.50000000 191.10366821]
[107.50000000 206.10366821]
[115.87294006 213.60255432]
[118.51871490 224.29698181]
[114.76307678 234.41615295]
[106.14455414 240.53619385]
[104.90586090 255.48495483]
[103.66717529 270.43371582]
[102.42848206 285.38250732]
[108.99974823 299.77447510]
[100.23786163 311.81933594]
[98.99917603 326.76809692]
[97.76048279 341.71685791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 75]
[4 74]
[5 73]
[7 71]
[8 70]
[9 69]
[10 68]
[12 64]
[13 63]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[22 56]
[23 55]
[24 54]
[26 52]
[27 51]
[29 49]
[30 48]
[31 47]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
