%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAACACAGGCUGGAAGCAAGACCUGACCUGAGGGAGUUCUUCAGCCUUAACCUAAGGUCUCAUACUCGGAGCACU\
) } def
/len { sequence length } bind def

/coor [
[103.38890839 147.62606812]
[88.51251221 146.34397888]
[74.75955200 140.52957153]
[63.47504425 130.75149536]
[55.76257706 117.96599579]
[52.37640762 103.42347717]
[53.64769745 88.54615021]
[59.45211411 74.78897858]
[48.11587143 64.96606445]
[36.77962494 55.14315796]
[25.44338226 45.32024765]
[14.10713959 35.49733353]
[2.77089596 25.67442322]
[-8.56534767 15.85151291]
[-19.90159035 6.02860212]
[-31.43584824 -3.56102228]
[-43.16332245 -12.91336918]
[-54.89079285 -22.26571655]
[-66.55021667 -18.59259224]
[-78.38751984 -21.11284637]
[-87.35724640 -29.05556107]
[-91.21218872 -40.27077484]
[-89.06571960 -51.81039429]
[-99.99186707 -62.08752060]
[-110.91801453 -72.36464691]
[-126.70525360 -71.63065338]
[-138.33108521 -82.33651733]
[-138.89813232 -98.13063049]
[-128.06994629 -109.64263153]
[-112.27072144 -110.04264832]
[-100.87384796 -99.09336090]
[-100.64089203 -83.29079437]
[-89.71474457 -73.01366425]
[-78.78859711 -62.73654175]
[-60.78713226 -64.56607056]
[-46.74076080 -52.67187881]
[-45.53844833 -33.99318695]
[-33.81097412 -24.64084244]
[-22.08350182 -15.28849506]
[-14.68293953 -13.53200531]
[-10.07868004 -5.30764151]
[1.25756335 4.51526928]
[12.59380722 14.33818054]
[23.93004990 24.16109085]
[35.26629257 33.98400116]
[46.60253906 43.80691528]
[57.93878174 53.62982559]
[69.27502441 63.45273590]
[82.06611633 55.74954987]
[96.61109161 52.37393570]
[111.48748779 53.65602112]
[125.24044800 59.47042465]
[136.52494812 69.24850464]
[144.23742676 82.03400421]
[147.62359619 96.57652283]
[146.35231018 111.45384979]
[140.54788208 125.21102142]
[151.88412476 135.03393555]
[163.22036743 144.85684204]
[174.75463867 154.44647217]
[186.48210144 163.79881287]
[198.20957947 173.15116882]
[213.50022888 169.87550354]
[227.29483032 177.24047852]
[233.07998657 191.76858521]
[228.12414551 206.60009766]
[214.76727295 214.73200989]
[199.31610107 212.32470703]
[189.06617737 200.51481628]
[188.85722351 184.87863159]
[177.12976074 175.52629089]
[165.40228271 166.17393494]
[158.00172424 164.41744995]
[153.39746094 156.19308472]
[142.06121826 146.37017822]
[130.72497559 136.54727173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 42]
[15 41]
[16 39]
[17 38]
[18 37]
[23 34]
[24 33]
[25 32]
[57 76]
[58 75]
[59 74]
[60 72]
[61 71]
[62 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
