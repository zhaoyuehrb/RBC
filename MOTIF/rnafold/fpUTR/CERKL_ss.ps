%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCGCUGGACGCGGCUAGAGCUGGGGCUGCCGCGCCCUCCACCUCCUUCUCCAAAGGCCUCCCCGGACCCCUGGCUCGGGCCCAGCCUGCGACUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[140.71595764 285.97695923]
[136.61102295 271.54959106]
[132.50607300 257.12219238]
[128.40112305 242.69482422]
[123.45764160 237.02479553]
[124.39927673 227.75968933]
[120.74057007 213.21273804]
[117.08186340 198.66578674]
[113.42315674 184.11883545]
[109.76445007 169.57186890]
[95.89730835 164.20155334]
[87.75515747 151.54574585]
[88.63675690 136.34455872]
[98.41324615 124.43966675]
[94.75453949 109.89271545]
[90.87225342 95.40383148]
[86.76731110 80.97644806]
[82.66236115 66.54905701]
[78.55741882 52.12167358]
[74.45247650 37.69429016]
[57.63413239 29.27708626]
[52.22651291 11.59292507]
[61.15221786 -4.24272299]
[56.16689682 -18.39003944]
[51.18157578 -32.53735733]
[46.19625473 -46.68467331]
[41.21092987 -60.83198929]
[36.22560883 -74.97930908]
[22.25021553 -81.85870361]
[17.39592361 -96.27711487]
[24.04050446 -109.55812073]
[19.05518341 -123.70543671]
[14.06986141 -137.85275269]
[-0.93350929 -136.38227844]
[-15.85271645 -138.54576111]
[-29.82037926 -144.21743774]
[-42.02443314 -153.06755066]
[-51.75535202 -164.58157349]
[-58.44739151 -178.09008789]
[-61.71148682 -192.80772400]
[-61.35786819 -207.87884521]
[-57.40709305 -222.42720032]
[-50.08885574 -235.60699463]
[-39.82862473 -246.65194702]
[-27.22292328 -254.91995239]
[-13.00462627 -259.93026733]
[1.99963343 -261.39166260]
[16.91752625 -259.21911621]
[30.88174629 -253.53898621]
[43.08043289 -244.68147278]
[52.80437088 -233.16156006]
[59.48822021 -219.64898682]
[62.74338913 -204.92936707]
[62.38063431 -189.85847473]
[58.42103958 -175.31251526]
[51.09481430 -162.13716125]
[40.82789230 -151.09841919]
[28.21717834 -142.83807373]
[33.20249939 -128.69076538]
[38.18782043 -114.54344177]
[51.69066620 -108.36211395]
[56.94802475 -94.08573914]
[50.37292480 -79.96463013]
[55.35824585 -65.81731415]
[60.34357071 -51.66999435]
[65.32888794 -37.52267838]
[70.31421661 -23.37536240]
[75.29953766 -9.22804546]
[86.60350800 -6.57475376]
[95.25785828 1.34649956]
[98.97464752 12.60185146]
[96.69331360 24.35667229]
[88.87985992 33.58934402]
[92.98480225 48.01673126]
[97.08975220 62.44411469]
[101.19469452 76.87149811]
[105.29963684 91.29888153]
[110.44274902 97.70164490]
[109.30149078 106.23400879]
[112.96019745 120.78096771]
[127.20553589 126.64411926]
[135.17381287 139.61947632]
[133.98786926 154.62139893]
[124.31140137 165.91316223]
[127.97010803 180.46012878]
[131.62881470 195.00708008]
[135.28752136 209.55403137]
[138.94622803 224.10098267]
[142.82850647 238.58987427]
[146.93345642 253.01725769]
[151.03840637 267.44464111]
[155.14334106 281.87203979]
[170.05772400 285.54040527]
[181.12864685 296.18606567]
[185.37808228 310.94540405]
[181.66297913 325.84820557]
[170.98265076 336.88571167]
[156.21008301 341.08886719]
[141.31900024 337.32705688]
[130.31503296 326.61218262]
[126.15819550 311.82650757]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[6 88]
[7 87]
[8 86]
[9 85]
[10 84]
[14 80]
[15 79]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[23 68]
[24 67]
[25 66]
[26 65]
[27 64]
[28 63]
[31 60]
[32 59]
[33 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
