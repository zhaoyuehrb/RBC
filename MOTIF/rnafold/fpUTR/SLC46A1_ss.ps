%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAGCGCAAGCCCCACGCCACGCGUCGCUGGUCCCAGGCAGCGAGUCGCUCGCGCGCCCCGCCGCCCGCCUGGCGACAGCUCCGCCGCGCACGCAC\
) } def
/len { sequence length } bind def

/coor [
[82.65351105 227.38520813]
[72.77637482 215.74885559]
[68.93452454 200.97715759]
[71.89075470 186.00306702]
[81.05810547 173.79969788]
[94.61640167 166.79002380]
[94.14048004 151.79757690]
[93.66455841 136.80513000]
[93.18864441 121.81267548]
[90.49882507 120.78256989]
[87.95995331 119.42227173]
[85.61237335 117.75341034]
[72.86648560 125.66179657]
[67.82273865 140.89137268]
[52.72178650 146.30809021]
[39.14779282 137.75669861]
[37.51356125 121.79710388]
[49.07273483 110.67213440]
[64.95810699 112.91590881]
[77.70398712 105.00753021]
[77.79597473 94.59918976]
[82.49479675 85.31138611]
[90.82554626 79.07114410]
[101.05979156 77.17316437]
[106.63472748 63.24764633]
[112.20966339 49.32212830]
[106.23327637 34.93739700]
[112.08542633 20.89435577]
[125.83590698 15.28543091]
[131.41084290 1.35991204]
[136.98577881 -12.56560707]
[142.56071472 -26.49112511]
[142.87048340 -35.80930328]
[148.53977966 -40.76546097]
[154.55374146 -54.50708771]
[160.34892273 -68.34239960]
[165.92385864 -82.26792145]
[171.49879456 -96.19344330]
[177.07373047 -110.11895752]
[182.64866638 -124.04447937]
[188.22360229 -137.97000122]
[177.42390442 -157.79086304]
[190.09556580 -180.73368835]
[189.61964417 -195.72613525]
[189.14372253 -210.71859741]
[188.66780090 -225.71104431]
[188.19187927 -240.70349121]
[181.64604187 -256.34280396]
[194.86210632 -266.96221924]
[208.72508240 -257.20239258]
[203.18432617 -241.17941284]
[203.66024780 -226.18695068]
[204.13616943 -211.19450378]
[204.61209106 -196.20205688]
[205.08801270 -181.20960999]
[219.10021973 -175.85632324]
[229.45141602 -186.71232605]
[239.80259705 -197.56834412]
[239.17597961 -213.36019897]
[249.96064758 -224.91297913]
[265.75823975 -225.37258911]
[277.19635010 -214.46638489]
[277.48892212 -198.66481018]
[266.46240234 -187.34265137]
[250.65859985 -187.21716309]
[240.30741882 -176.36114502]
[229.95623779 -165.50512695]
[228.69575500 -146.96713257]
[217.21871948 -134.56086731]
[202.14912415 -132.39506531]
[196.57418823 -118.46954346]
[190.99925232 -104.54402161]
[185.42431641 -90.61850739]
[179.84938049 -76.69298553]
[174.27444458 -62.76746750]
[174.71907043 -55.25037384]
[168.29536438 -48.49312973]
[162.28141785 -34.75150299]
[156.48623657 -20.91618919]
[150.91130066 -6.99067020]
[145.33636475 6.93484879]
[139.76142883 20.86036873]
[145.84251404 34.40865326]
[140.38710022 48.61052704]
[126.13518524 54.89706421]
[120.56024933 68.82258606]
[114.98531342 82.74810028]
[122.50425720 103.96810913]
[108.18109131 121.33676147]
[108.65700531 136.32920837]
[109.13292694 151.32165527]
[109.60884857 166.31410217]
[123.58441925 172.44973755]
[133.50730896 184.04711914]
[137.40730286 198.80355835]
[134.51005554 213.78918457]
[125.39083099 226.02856445]
[111.86025238 233.09156799]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 92]
[7 91]
[8 90]
[9 89]
[12 20]
[13 19]
[24 87]
[25 86]
[26 85]
[29 82]
[30 81]
[31 80]
[32 79]
[34 78]
[35 77]
[36 75]
[37 74]
[38 73]
[39 72]
[40 71]
[41 70]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
