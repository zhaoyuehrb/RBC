%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:14:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAAUUUGGCCGGGACCCGGGCGCUAUUCGCGGCUGCUGACUCGCGGCGGCCGGCUGCCUUUCGCUCAUCUCUAUUCUGGGGCCGUUGGGUCACCGCGCUCCGCCGGCCCCCUCCCCCGGGCCCGGAGGGUGUGUCCCCCGCUCCGGGGCUCGCCGCGCCUAUAAGGGGCCGAGCGGCGGGCAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[-67.61260223 282.36355591]
[-75.21672821 283.51565552]
[-82.80066681 282.48065186]
[-90.58521271 295.30255127]
[-98.36975098 308.12445068]
[-106.15429688 320.94635010]
[-106.12519073 339.35217285]
[-121.81429291 347.19760132]
[-129.38577271 360.14645386]
[-129.67234802 375.96505737]
[-142.77590942 383.04644775]
[-150.34739685 395.99530029]
[-157.91888428 408.94412231]
[-165.49037170 421.89297485]
[-168.26586914 438.61819458]
[-185.10580444 440.58117676]
[-191.65380859 424.94274902]
[-178.43920898 414.32150269]
[-170.86772156 401.37265015]
[-163.29624939 388.42379761]
[-155.72476196 375.47494507]
[-155.97975159 360.58251953]
[-142.33462524 352.57498169]
[-134.76313782 339.62612915]
[-137.52465820 327.83743286]
[-131.30766296 316.98291016]
[-118.97618866 313.16180420]
[-111.19164276 300.33990479]
[-103.40709686 287.51800537]
[-95.62255859 274.69613647]
[-98.17134857 271.44046021]
[-100.18889618 267.83145142]
[-115.02311707 270.05538940]
[-129.85733032 272.27935791]
[-144.69155884 274.50329590]
[-159.52577209 276.72726440]
[-174.35998535 278.95120239]
[-189.19419861 281.17517090]
[-204.02842712 283.39910889]
[-218.86264038 285.62307739]
[-229.51734924 297.61709595]
[-245.52946472 296.62124634]
[-254.61585999 283.39941406]
[-249.80624390 268.09426880]
[-234.79013062 262.44662476]
[-221.08659363 270.78884888]
[-206.25238037 268.56491089]
[-191.41816711 266.34094238]
[-176.58393860 264.11700439]
[-161.74972534 261.89303589]
[-146.91551208 259.66909790]
[-132.08128357 257.44512939]
[-117.24707031 255.22117615]
[-102.41284943 252.99722290]
[-87.31549835 231.80932617]
[-60.83941650 233.18064880]
[-49.63709259 223.20527649]
[-38.43477249 213.22990417]
[-27.23244858 203.25453186]
[-16.03012657 193.27915955]
[-4.82780457 183.30380249]
[-0.46829918 169.06146240]
[14.98346043 165.66239929]
[26.18578339 155.68702698]
[37.38810349 145.71165466]
[48.59042740 135.73629761]
[59.79274750 125.76092529]
[70.99507141 115.78555298]
[66.46179962 106.84167480]
[64.72736359 96.60562134]
[66.15273285 85.96371460]
[70.81597900 75.89951324]
[78.48756409 67.40316772]
[88.63481140 61.37512589]
[100.45629883 58.53359985]
[112.94441223 59.33494186]
[124.97113800 63.91547012]
[135.38990784 72.06142426]
[143.80062866 59.64129257]
[152.21136475 47.22116089]
[160.62208557 34.80102921]
[169.03280640 22.38089561]
[177.44354248 9.96076393]
[185.85426331 -2.45936847]
[181.37184143 -13.49361134]
[182.76663208 -25.20076942]
[189.57606506 -34.67810822]
[200.00959778 -39.63227463]
[211.41824341 -38.93378448]
[220.23501587 -51.06904221]
[229.05180359 -63.20429611]
[230.90373230 -78.91674042]
[244.64424133 -84.66545105]
[253.46101379 -96.80070496]
[262.27780151 -108.93595886]
[264.79708862 -117.73524475]
[271.34204102 -121.19734955]
[280.35824585 -133.18516541]
[282.46972656 -148.86483765]
[296.30340576 -154.38557434]
[305.31961060 -166.37339783]
[314.33584595 -178.36122131]
[323.35205078 -190.34904480]
[332.36825562 -202.33686829]
[333.55072021 -208.87124634]
[337.30120850 -213.17108154]
[341.88610840 -214.56539917]
[351.29376221 -226.24855042]
[360.70141602 -237.93171692]
[370.10906982 -249.61486816]
[379.51669312 -261.29803467]
[375.32946777 -276.23947144]
[380.75582886 -290.77682495]
[393.70925903 -299.32012939]
[409.20889282 -298.58438110]
[421.29479980 -288.85241699]
[425.31967163 -273.86642456]
[419.73593140 -259.38882446]
[406.69058228 -250.98652649]
[391.19985962 -251.89039612]
[381.79220581 -240.20722961]
[372.38458252 -228.52406311]
[362.97692871 -216.84091187]
[353.56927490 -205.15774536]
[344.35607910 -193.32064819]
[335.33987427 -181.33282471]
[326.32363892 -169.34500122]
[317.30743408 -157.35717773]
[308.29122925 -145.36936951]
[306.82464600 -130.54713440]
[292.34606934 -124.16895294]
[283.32986450 -112.18112946]
[274.41305542 -100.11917877]
[265.59628296 -87.98392487]
[256.77947998 -75.84867096]
[255.55819702 -61.00421906]
[241.18705750 -54.38751602]
[232.37026978 -42.25226212]
[223.55349731 -30.11700630]
[227.50944519 -12.25669384]
[216.98898315 3.09681559]
[198.27439880 5.95135736]
[189.86366272 18.37149048]
[181.45294189 30.79162216]
[173.04222107 43.21175385]
[164.63148499 55.63188553]
[156.22076416 68.05201721]
[147.81004333 80.47215271]
[152.56307983 94.69918823]
[166.75033569 99.56968689]
[182.73280334 95.89645386]
[193.70555115 108.08377075]
[188.38076782 123.59436798]
[172.23611450 126.47227478]
[161.87983704 113.75694275]
[147.69258118 108.88645172]
[140.22840881 121.89745331]
[151.59413147 131.68623352]
[167.09997559 134.82936096]
[171.69436646 148.99766541]
[183.06008911 158.78645325]
[194.42581177 168.57524109]
[210.37312317 174.33023071]
[209.25769043 191.24745178]
[192.69282532 194.85876465]
[184.63702393 179.94096375]
[173.27130127 170.15217590]
[161.90557861 160.36338806]
[147.21269226 157.92042542]
[141.80534363 143.05195618]
[130.43962097 133.26316833]
[102.47743988 138.97692871]
[80.97044373 126.98787689]
[69.76811981 136.96324158]
[58.56579590 146.93861389]
[47.36347198 156.91398621]
[36.16115189 166.88934326]
[24.95882988 176.86471558]
[19.79805946 191.82055664]
[5.14756441 194.50611877]
[-6.05475807 204.48149109]
[-17.25708008 214.45686340]
[-28.45940208 224.43222046]
[-39.66172409 234.40759277]
[-50.86404800 244.38296509]
[-48.55997849 251.95097351]
[-48.48485184 259.82492065]
[-50.62408447 267.36492920]
[-54.78398895 273.96417236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 30]
[4 29]
[5 28]
[6 27]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[56 185]
[57 184]
[58 183]
[59 182]
[60 181]
[61 180]
[63 178]
[64 177]
[65 176]
[66 175]
[67 174]
[68 173]
[78 148]
[79 147]
[80 146]
[81 145]
[82 144]
[83 143]
[84 142]
[89 139]
[90 138]
[91 137]
[93 135]
[94 134]
[95 133]
[97 132]
[98 131]
[100 129]
[101 128]
[102 127]
[103 126]
[104 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[149 156]
[150 155]
[157 171]
[158 170]
[160 168]
[161 167]
[162 166]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
