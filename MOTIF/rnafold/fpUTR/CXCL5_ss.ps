%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGGAGAGAUGAGUGUAGAUAAAAGGAGUGCAGAAGGCACGAGGAAGCCACAGUGCUCCGGAUCCUCCAAUCUUCGCUCCUCCAAUCUCCGCUCCUCCACCCAGUUCAGGAACCCGCGACCGCUCGCAGCGCUCUCUUGACCACU\
) } def
/len { sequence length } bind def

/coor [
[239.09948730 257.08407593]
[239.03182983 248.63493347]
[241.49235535 240.51625061]
[230.28892517 230.54212952]
[219.08549500 220.56800842]
[207.88206482 210.59388733]
[193.07368469 211.71072388]
[181.56973267 201.75512695]
[180.49868774 186.21516418]
[169.29527283 176.24104309]
[158.09184265 166.26690674]
[153.29327393 165.65347290]
[148.84962463 161.97517395]
[146.63775635 155.62837219]
[135.86476135 145.19081116]
[125.09175873 134.75325012]
[114.31876373 124.31570435]
[103.54576874 113.87814331]
[90.03286743 110.28745270]
[86.01667023 96.89485168]
[75.24367523 86.45729065]
[64.47068024 76.01973724]
[53.69768906 65.58218384]
[38.50054550 68.10270691]
[24.89230537 61.27122498]
[17.99760246 47.89486313]
[20.27426529 33.19946289]
[9.50127029 22.76190567]
[-1.27172494 12.32435036]
[-12.04471970 1.88679361]
[-22.81771469 -8.55076218]
[-33.59070969 -18.98831940]
[-38.78759003 -20.28378105]
[-42.55442429 -23.18403053]
[-44.51546860 -26.85676575]
[-44.68836975 -30.44263077]
[-54.78004837 -41.54029083]
[-64.87172699 -52.63794708]
[-74.96340179 -63.73560715]
[-85.05508423 -74.83326721]
[-100.38115692 -73.27841187]
[-113.53035736 -80.95642853]
[-119.56573486 -94.74185944]
[-116.36470795 -109.26396179]
[-126.45638275 -120.36162567]
[-136.54806519 -131.45927429]
[-146.63973999 -142.55694580]
[-156.73141479 -153.65460205]
[-167.39378357 -164.20513916]
[-178.59721375 -174.17927551]
[-189.80064392 -184.15339661]
[-205.56185913 -182.98744202]
[-217.47645569 -193.37098694]
[-218.47570801 -209.14364624]
[-207.96678162 -220.94779968]
[-192.18443298 -221.78024292]
[-180.49205017 -211.14709473]
[-179.82652283 -195.35682678]
[-168.62309265 -185.38270569]
[-157.41966248 -175.40856934]
[-155.28256226 -190.25555420]
[-142.45289612 -198.02726746]
[-128.30432129 -193.04550171]
[-123.17416382 -178.95005798]
[-130.81062317 -166.03942871]
[-145.63375854 -163.74627686]
[-135.54208374 -152.64862061]
[-125.45040894 -141.55096436]
[-115.35872650 -130.45330811]
[-105.26705170 -119.35564423]
[-90.50700378 -121.16647339]
[-77.35535431 -113.85224152]
[-70.95759583 -100.03478241]
[-73.95742035 -84.92494202]
[-63.86574554 -73.82728577]
[-53.77406693 -62.72962570]
[-43.68238831 -51.63196564]
[-33.59070969 -40.53430939]
[-23.15315247 -29.76131439]
[-12.38015842 -19.32375717]
[-1.60716355 -8.88620090]
[9.16583157 1.55135500]
[19.93882561 11.98891163]
[30.71182060 22.42646790]
[45.32788086 19.68625450]
[58.91557693 26.15452576]
[66.17395782 39.53993988]
[64.13524628 54.80918503]
[74.90824127 65.24674225]
[85.68123627 75.68429565]
[96.45423126 86.12185669]
[109.96713257 89.71254730]
[113.98332977 103.10514832]
[124.75632477 113.54270935]
[135.52931213 123.98026276]
[146.30230713 134.41781616]
[157.07530212 144.85537720]
[168.06596375 155.06349182]
[179.26939392 165.03761292]
[190.47282410 175.01173401]
[206.03233337 174.27752686]
[217.25212097 184.55230713]
[217.85620117 199.39045715]
[229.05963135 209.36457825]
[240.26306152 219.33869934]
[251.46647644 229.31283569]
[273.64974976 225.97154236]
[290.98031616 239.78672791]
[292.62692261 261.61764526]
[304.99926758 270.09854126]
[317.37161255 278.57940674]
[329.74392700 287.06030273]
[342.11627197 295.54119873]
[354.48861694 304.02206421]
[369.04693604 298.98605347]
[383.60888672 303.43606567]
[392.65133667 315.46511841]
[392.87399292 330.33416748]
[405.24633789 338.81506348]
[417.61868286 347.29592896]
[431.11795044 340.08288574]
[446.42309570 339.98104858]
[460.01715088 347.01385498]
[468.77627563 359.56518555]
[470.68768311 374.75088501]
[465.31216431 389.08132935]
[453.88494873 399.26354980]
[439.03195190 402.95770264]
[424.16625977 399.31491089]
[412.70391846 389.17227173]
[407.27886963 374.86047363]
[409.13778687 359.66827393]
[396.76544189 351.18737793]
[384.39312744 342.70651245]
[370.44451904 347.86154175]
[355.96377563 343.76611328]
[346.56130981 331.78918457]
[346.00772095 316.39440918]
[333.63537598 307.91351318]
[321.26306152 299.43264771]
[308.89071655 290.95175171]
[296.51840210 282.47085571]
[284.14605713 273.98999023]
[277.15884399 278.30435181]
[269.17117310 280.35144043]
[260.90237427 279.92608643]
[253.10325623 277.04663086]
[246.48806763 271.95529175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 106]
[4 105]
[5 104]
[6 103]
[9 100]
[10 99]
[11 98]
[14 97]
[15 96]
[16 95]
[17 94]
[18 93]
[20 91]
[21 90]
[22 89]
[23 88]
[27 84]
[28 83]
[29 82]
[30 81]
[31 80]
[32 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 60]
[50 59]
[51 58]
[109 143]
[110 142]
[111 141]
[112 140]
[113 139]
[114 138]
[118 134]
[119 133]
[120 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
