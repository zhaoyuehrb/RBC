%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:57:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGGGGAGCGGAACUGCAAGAGGAAAGGCUCGGGUAGGCUUCUGGGAGCGACCGCUCCGCUCGUCUCGUUGGUUCCGGAGGUCGCUGCGGCGGUGGGAA\
) } def
/len { sequence length } bind def

/coor [
[253.19790649 196.84455872]
[250.03416443 193.94728088]
[247.83906555 189.73596191]
[234.84869385 182.23596191]
[221.85830688 174.73596191]
[208.86791992 167.23596191]
[195.76359558 159.93688965]
[182.54840088 152.84049988]
[169.33322144 145.74409485]
[156.11804199 138.64768982]
[142.90286255 131.55128479]
[129.68766785 124.45487976]
[116.47248840 117.35847473]
[99.75712585 126.40258789]
[79.74038696 120.57754517]
[68.65911102 100.77643585]
[53.77280426 98.93311310]
[38.88649750 97.08979034]
[24.00018883 95.24646759]
[11.61263466 104.69031525]
[-3.45793915 102.60885620]
[-12.38486385 90.74102020]
[-27.27117157 88.89769745]
[-42.15747833 87.05437469]
[-54.46574402 96.96810913]
[-70.16989899 95.19187927]
[-79.95295715 82.77949524]
[-78.01078796 67.09499359]
[-65.49566650 57.44371796]
[-49.83257294 59.55159760]
[-40.31415558 72.16806030]
[-25.42784691 74.01139069]
[-10.54153919 75.85471344]
[1.01049352 66.52272034]
[16.13358498 68.18004608]
[25.84351349 80.36016083]
[40.72982025 82.20348358]
[55.61612701 84.04680634]
[70.50243378 85.89012909]
[79.90629578 74.20392609]
[74.92097473 60.05660629]
[69.93564606 45.90929031]
[64.95032501 31.76197243]
[52.15147400 21.50909996]
[54.89842987 5.34165430]
[70.36535645 -0.10868115]
[82.64121246 10.76493073]
[79.09764099 26.77665138]
[84.08296967 40.92396927]
[89.06829071 55.07128525]
[94.05361176 69.21859741]
[112.67442322 74.05300903]
[123.52636719 88.01393890]
[123.56889343 104.14329529]
[136.78407288 111.23970032]
[149.99926758 118.33609772]
[163.21444702 125.43250275]
[176.42962646 132.52890015]
[189.64480591 139.62530518]
[202.85998535 146.72171021]
[212.07493591 148.06840515]
[216.36791992 154.24559021]
[229.35830688 161.74559021]
[242.34869385 169.24559021]
[255.33906555 176.74559021]
[268.76651001 183.43165588]
[282.58010864 189.27844238]
[296.39367676 195.12522888]
[310.20727539 200.97201538]
[324.02084351 206.81881714]
[337.83444214 212.66560364]
[351.64801025 218.51239014]
[365.46160889 224.35917664]
[370.99069214 223.65270996]
[375.70434570 225.10557556]
[378.88803101 228.00050354]
[380.24002075 231.43608093]
[393.45520020 238.53248596]
[406.67041016 245.62889099]
[422.48898315 245.34100342]
[430.04141235 258.17886353]
[443.25659180 265.27526855]
[459.62237549 264.22967529]
[468.48428345 278.02819824]
[460.72595215 292.47604370]
[444.32849121 292.71054077]
[436.16018677 278.49044800]
[422.94500732 271.39404297]
[408.07165527 272.18951416]
[399.57400513 258.84408569]
[386.35879517 251.74766541]
[373.14361572 244.65126038]
[359.61480713 238.17276001]
[345.80123901 232.32597351]
[331.98764038 226.47918701]
[318.17407227 220.63240051]
[304.36047363 214.78559875]
[290.54690552 208.93881226]
[276.73330688 203.09202576]
[262.91973877 197.24523926]
[260.15356445 198.32841492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 65]
[4 64]
[5 63]
[6 62]
[7 60]
[8 59]
[9 58]
[10 57]
[11 56]
[12 55]
[13 54]
[16 39]
[17 38]
[18 37]
[19 36]
[22 33]
[23 32]
[24 31]
[40 51]
[41 50]
[42 49]
[43 48]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 94]
[73 93]
[77 92]
[78 91]
[79 90]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
