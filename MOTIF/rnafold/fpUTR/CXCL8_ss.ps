%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGUGCAUAAGUUCUCUAGUAGGGUGAUGAUAUAAAAAGCCACCGGAGCACUCCAUAAGGCACAAACUUUCAGAGACAGCAGAGCACACAAGCUUCUAGGACAAGAGCCAGGAAGAAACCACCGGAAGGAACCAUCUCACUGUGUGUAAAC\
) } def
/len { sequence length } bind def

/coor [
[97.37404633 151.74794006]
[85.52439117 149.75140381]
[79.29315948 163.39588928]
[73.06193542 177.04035950]
[66.83071136 190.68484497]
[68.13600922 206.45211792]
[55.81081390 214.81506348]
[49.57958984 228.45953369]
[51.67621231 244.72410583]
[38.47663116 254.45565796]
[23.55944252 247.64320374]
[22.27017021 231.29481506]
[35.93510818 222.22831726]
[42.16633224 208.58383179]
[40.41533661 193.79251099]
[53.18623352 184.45361328]
[59.41745758 170.80914307]
[65.64868164 157.16465759]
[71.87990570 143.52017212]
[66.80930328 139.78848267]
[62.22871780 135.46936035]
[58.20577240 130.62658691]
[54.79985809 125.33165741]
[52.06126404 119.66273499]
[50.03041840 113.70352173]
[35.14264297 115.53494263]
[20.25486374 117.36635590]
[5.36708689 119.19776917]
[1.34186733 133.85607910]
[-7.99038935 145.85513306]
[-21.20658302 153.36517334]
[-36.29133606 155.24096680]
[-50.94433975 151.19647217]
[-62.93111038 141.84843445]
[-70.42375946 128.62237549]
[-72.27970886 113.53517151]
[-68.21593475 98.88749695]
[-58.85214233 86.91303253]
[-45.61623764 79.43778992]
[-30.52659988 77.60169220]
[-15.88428974 81.68473053]
[-3.92215276 91.06426239]
[3.53567195 104.30998993]
[18.42345047 102.47857666]
[33.31122589 100.64716339]
[48.19900513 98.81575012]
[49.94469452 86.61299896]
[54.52347565 75.16793823]
[61.67619324 65.12835693]
[70.99800873 57.06248474]
[64.48975372 43.54795074]
[47.34057999 33.02784729]
[49.46966934 13.84458447]
[42.41559219 0.60676056]
[35.36151123 -12.63106346]
[20.12347984 -14.89127636]
[9.26509762 -25.56596375]
[6.80355644 -40.41199875]
[13.47609711 -53.70166397]
[6.42201900 -66.93949127]
[-0.63205963 -80.17731476]
[-15.96729946 -83.23744965]
[-25.70736504 -95.47122192]
[-25.25329590 -111.10221100]
[-14.81948948 -122.74994659]
[0.66752994 -124.91471863]
[13.89526558 -116.57439423]
[18.61798477 -101.66701508]
[12.60576439 -87.23139191]
[19.65984344 -73.99356842]
[26.71392059 -60.75574493]
[41.46620941 -58.88279343]
[52.41639328 -48.56012344]
[55.22132111 -33.59396744]
[48.59933472 -19.68514252]
[55.65341568 -6.44731808]
[62.70749283 6.79050541]
[72.78013611 8.90297318]
[80.15858459 16.39048004]
[82.20748901 26.92552567]
[78.00428772 37.03969574]
[84.51254272 50.55422974]
[107.69841003 48.76056290]
[129.33355713 57.28831100]
[145.05989075 74.41969299]
[151.70957947 96.70384216]
[166.65966797 97.92648315]
[181.60975647 99.14912415]
[196.55984497 100.37175751]
[211.50993347 101.59439850]
[226.46002197 102.81703949]
[241.41011047 104.03968048]
[255.51914978 81.18088531]
[283.56002808 73.33506775]
[311.51974487 87.57060242]
[325.40701294 81.90110016]
[339.29431152 76.23159790]
[353.18161011 70.56210327]
[367.06887817 64.89260101]
[376.92089844 52.51325226]
[391.62850952 54.86610794]
[405.51577759 49.19660950]
[410.12149048 34.25266647]
[423.28344727 25.80890465]
[438.78695679 27.85220718]
[449.31176758 39.41778946]
[449.88833618 55.04473877]
[440.24447632 67.35448456]
[424.93371582 70.53474426]
[411.18530273 63.08389664]
[397.29800415 68.75339508]
[388.43930054 80.72722626]
[372.73837280 78.77989197]
[358.85110474 84.44938660]
[344.96380615 90.11888885]
[331.07653809 95.78839111]
[317.18923950 101.45789337]
[316.80691528 108.94813538]
[331.78738403 109.71280670]
[346.76788330 110.47770691]
[346.00274658 125.45817566]
[331.02273560 124.69330597]
[316.04223633 123.92863464]
[315.65991211 131.41888428]
[328.89773560 138.47296143]
[345.26007080 137.37503052]
[354.16610718 151.14509583]
[346.45404053 165.61770630]
[330.05740356 165.90466309]
[321.84365845 151.71078491]
[308.60583496 144.65670776]
[301.84017944 149.73127747]
[294.36791992 153.36532593]
[286.48483276 155.47692871]
[278.49197388 156.04315186]
[270.68405151 155.09893799]
[263.33862305 152.73397827]
[256.70620728 149.08743286]
[251.00184631 144.34104919]
[246.39808655 138.71080017]
[243.02003479 132.43759155]
[240.94218445 125.77714539]
[240.18746948 118.98976898]
[225.23738098 117.76712799]
[210.28729248 116.54448700]
[195.33720398 115.32185364]
[180.38711548 114.09921265]
[165.43702698 112.87657166]
[150.48693848 111.65393066]
[146.44468689 122.97032928]
[139.90438843 133.05125427]
[131.21780396 141.35449219]
[120.85214996 147.43347168]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[7 14]
[8 13]
[25 46]
[26 45]
[27 44]
[28 43]
[50 82]
[51 81]
[53 77]
[54 76]
[55 75]
[59 71]
[60 70]
[61 69]
[86 149]
[87 148]
[88 147]
[89 146]
[90 145]
[91 144]
[92 143]
[95 117]
[96 116]
[97 115]
[98 114]
[99 113]
[101 111]
[102 110]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
