%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCGUACUGCCGGGCUGCCGGGUCCCUGCUCUGGGUACUUCUCUGCUUUCGGGCGUCUCGUCUAGAAGCUGCAGCUUGGCCUGUCUCACCUCUACACAGAGGGGCUGCUGGCGCCUGACGGAAAAAGGUCCACACACCCG\
) } def
/len { sequence length } bind def

/coor [
[166.50605774 184.47476196]
[157.58297729 172.41744995]
[148.65989685 160.36015320]
[139.73683167 148.30284119]
[130.81375122 136.24552917]
[121.89067078 124.18822479]
[107.37600708 130.54782104]
[92.17831421 129.19876099]
[79.99192810 121.03479767]
[73.50834656 108.53725433]
[73.82804108 95.05065155]
[60.47043228 88.22612000]
[47.11281967 81.40158081]
[33.75521088 74.57704926]
[20.39760208 67.75251770]
[7.03999329 60.92798233]
[-6.31761646 54.10344696]
[-19.67522621 47.27891159]
[-33.03283691 40.45438004]
[-46.39044571 33.62984467]
[-64.72352600 45.06027222]
[-89.63808441 34.98785782]
[-104.37731171 37.77267838]
[-113.29426575 50.54474640]
[-128.28160095 53.15898514]
[-140.40287781 44.57932281]
[-155.14208984 47.36414337]
[-169.88131714 50.14896011]
[-178.57943726 63.34434891]
[-194.07708740 66.44251251]
[-207.17977905 57.60536575]
[-210.11390686 42.07583237]
[-201.13873291 29.06731033]
[-185.57904053 26.29752159]
[-172.66613770 35.40973663]
[-157.92691040 32.62491608]
[-143.18768311 29.84009743]
[-135.03233337 17.42938614]
[-120.12433624 14.39521694]
[-107.16213226 23.03345299]
[-92.42290497 20.24863434]
[-89.38242340 13.39258194]
[-104.30252838 11.84648132]
[-107.44264221 -2.82115936]
[-94.46321869 -10.34011364]
[-83.30144501 -0.31952068]
[-80.26096344 -7.17557192]
[-88.09141541 -19.96947670]
[-95.92186737 -32.76338196]
[-103.75231934 -45.55728912]
[-111.58277130 -58.35119247]
[-125.38623047 -66.08262634]
[-125.43090057 -80.97716522]
[-133.26135254 -93.77107239]
[-141.09181213 -106.56497955]
[-148.92225647 -119.35887909]
[-156.75271606 -132.15278625]
[-170.17829895 -142.50604248]
[-163.94622803 -158.27302551]
[-147.07022095 -156.64923096]
[-143.95880127 -139.98324585]
[-136.12835693 -127.18933105]
[-128.29789734 -114.39543152]
[-120.46744537 -101.60152435]
[-112.63699341 -88.80761719]
[-99.39362335 -81.99128723]
[-98.78886414 -66.18164825]
[-90.95841217 -53.38774109]
[-83.12796021 -40.59383392]
[-75.29750824 -27.79993057]
[-67.46705627 -15.00602531]
[-42.13394547 -2.32209492]
[-39.56591034 20.27223396]
[-26.20830154 27.09676933]
[-12.85069180 33.92130280]
[0.50691801 40.74583817]
[13.86452770 47.57037354]
[27.22213745 54.39490509]
[40.57974625 61.21944046]
[53.93735504 68.04397583]
[67.29496765 74.86850739]
[80.65257263 81.69304657]
[95.71110535 71.69143677]
[115.01303864 73.30457306]
[130.10058594 87.42121124]
[143.30505371 80.30488586]
[156.50952148 73.18856812]
[159.32386780 68.60862732]
[163.24273682 65.88909912]
[167.35050964 65.13691711]
[170.82638550 66.07115936]
[184.47087097 59.83993530]
[198.11535645 53.60870743]
[211.75982666 47.37748337]
[225.40431213 41.14625931]
[234.47080994 27.48132133]
[250.81919861 28.77059174]
[257.63165283 43.68778229]
[247.90010071 56.88736343]
[231.63552856 54.79073715]
[217.99105835 61.02196503]
[204.34657288 67.25318909]
[190.70208740 73.48441315]
[177.05761719 79.71563721]
[163.62585449 86.39303589]
[150.42137146 93.50935364]
[137.21690369 100.62567902]
[133.94798279 115.26514435]
[142.87104797 127.32245636]
[151.79412842 139.37976074]
[160.71720886 151.43707275]
[169.64028931 163.49438477]
[178.56336975 175.55168152]
[188.45570374 180.10873413]
[191.54461670 189.26623535]
[203.09391785 198.83773804]
[214.64320374 208.40925598]
[226.19248962 217.98077393]
[240.86444092 213.21235657]
[255.77943420 217.15525818]
[266.17816162 228.55131531]
[268.74243164 243.76406860]
[262.65399170 257.93920898]
[249.85563660 266.55346680]
[234.43127441 266.85809326]
[221.30278015 258.75588989]
[214.65937805 244.83221436]
[216.62098694 229.53005981]
[205.07168579 219.95854187]
[193.52239990 210.38703918]
[181.97311401 200.81552124]
[185.15174866 215.47486877]
[181.88790894 230.11547852]
[172.78369141 242.03659058]
[159.51853943 249.03915405]
[144.53947449 249.83137512]
[130.60969543 244.26712036]
[120.29879761 233.37281799]
[115.50885773 219.15817261]
[117.12347412 204.24531555]
[124.84478760 191.38525391]
[137.24845886 182.95025635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[6 108]
[11 82]
[12 81]
[13 80]
[14 79]
[15 78]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[22 41]
[23 40]
[26 37]
[27 36]
[28 35]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[85 107]
[86 106]
[87 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[115 131]
[116 130]
[117 129]
[118 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
