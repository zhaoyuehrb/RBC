%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:07:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCAGUGGUAGCGCGGGGACUGGCUGGGAAGCGGUCGGUCGAGUGUGGCCUGUGUGGACUCGCAUCUUGCCCGAAGCCGGGCGGAGGAGAGCUCAAGCUAAGGGUGAUCAGCCCAUGACCUAAACCUCCAGACAAAAUAAAACGGAAAAUUUGCUAGAAUCAAGA\
) } def
/len { sequence length } bind def

/coor [
[88.35073090 226.36782837]
[100.37825775 216.70645142]
[98.69879150 201.80076599]
[97.01932526 186.89508057]
[93.12941742 180.57402039]
[95.45050049 171.69534302]
[94.05004120 156.76086426]
[92.64958954 141.82637024]
[79.65921021 134.32637024]
[66.02533722 140.58079529]
[52.39147186 146.83520508]
[43.07431030 159.62194824]
[28.28003120 157.89610291]
[14.64616299 164.15051270]
[1.01229596 170.40492249]
[-12.62157154 176.65933228]
[-15.83287239 189.76559448]
[-25.86875534 198.49180603]
[-38.90635681 199.81172180]
[-50.14812088 193.46545410]
[-63.89655685 199.46383667]
[-77.64498901 205.46221924]
[-91.39342499 211.46058655]
[-105.14186096 217.45896912]
[-118.89028931 223.45735168]
[-132.63873291 229.45573425]
[-146.38716125 235.45411682]
[-160.13558960 241.45249939]
[-167.31166077 255.80113220]
[-183.03341675 258.99581909]
[-195.24047852 248.58584595]
[-194.56861877 232.55686951]
[-181.53324890 223.20494080]
[-166.13397217 227.70405579]
[-152.38554382 221.70567322]
[-138.63710022 215.70730591]
[-124.88867188 209.70892334]
[-111.14023590 203.71054077]
[-97.39180756 197.71215820]
[-83.64337158 191.71377563]
[-69.89493561 185.71539307]
[-56.14650345 179.71701050]
[-50.69464874 163.82725525]
[-35.13980103 156.63711548]
[-18.87598228 163.02546692]
[-5.24211597 156.77105713]
[8.39175129 150.51664734]
[22.02561951 144.26223755]
[30.36759758 131.92283630]
[46.13706207 133.20133972]
[59.77092743 126.94692230]
[73.40479279 120.69251251]
[74.38374329 113.25667572]
[77.32057953 90.94916534]
[65.77003479 81.37915802]
[54.21949387 71.80915833]
[42.66895294 62.23915482]
[31.11840820 52.66915512]
[14.86913109 50.45713043]
[8.91144276 35.17845154]
[19.37410164 22.55051613]
[35.49402237 25.56385803]
[40.68841171 41.11861038]
[52.23895264 50.68861389]
[63.78949738 60.25861359]
[75.34004211 69.82862091]
[86.89058685 79.39862061]
[93.24101257 75.40837860]
[92.68011475 60.41886902]
[105.94187927 67.42789459]
[112.29231262 63.43765640]
[108.68163300 48.87870789]
[105.07094574 34.31975937]
[101.46026611 19.76081276]
[97.84958649 5.20186329]
[86.08899689 -6.22707415]
[90.36824036 -22.05805969]
[106.28520203 -26.00553322]
[117.46586609 -14.00867081]
[112.40853119 1.59118235]
[116.01921844 16.15013123]
[119.62989807 30.70907974]
[123.24057770 45.26802826]
[126.85125732 59.82697678]
[141.05520630 64.64856720]
[152.78268433 55.29622269]
[164.51016235 45.94387436]
[176.23762512 36.59152603]
[187.96510315 27.23917961]
[181.95867920 3.75553417]
[193.15409851 -20.25271988]
[219.04255676 -32.74249649]
[225.80238342 -46.13296890]
[232.56221008 -59.52344131]
[231.10296631 -75.85753632]
[244.67286682 -85.06568146]
[259.31234741 -77.67532349]
[259.96157837 -61.28902817]
[245.95268250 -52.76361847]
[239.19285583 -39.37314224]
[232.43302917 -25.98266983]
[238.07183838 -21.03757668]
[249.34942627 -11.14738941]
[254.98822021 -6.20229578]
[267.38180542 -14.65209675]
[279.77539062 -23.10189819]
[292.16897583 -31.55169868]
[296.55236816 -46.98431015]
[311.40609741 -53.04615021]
[325.33566284 -45.08709717]
[327.65551758 -29.21265221]
[316.58602905 -17.60033417]
[300.61877441 -19.15811729]
[288.22518921 -10.70831585]
[275.83160400 -2.25851512]
[263.43801880 6.19128561]
[262.73464966 15.79322624]
[260.02398682 24.82191658]
[255.51762390 32.87252426]
[249.50549316 39.60375595]
[242.33847046 44.75219345]
[234.40881348 48.14220047]
[226.12918091 49.69111252]
[217.91125488 49.40956497]
[210.14552307 47.39712143]
[203.18260193 43.83359528]
[197.31744385 38.96665192]
[185.58998108 48.31900024]
[173.86250305 57.67134476]
[162.13502502 67.02369690]
[150.40756226 76.37603760]
[164.75746155 72.00793457]
[179.70710754 70.77996063]
[194.57745361 72.74790192]
[208.69303894 77.82237244]
[221.41270447 85.77287292]
[232.15866089 96.23825836]
[240.44281006 108.74317169]
[245.88885498 122.71959686]
[248.24943542 137.53268433]
[247.41731262 152.50959778]
[243.43029785 166.97000122]
[236.46946716 180.25711060]
[226.85102844 191.76734924]
[215.01187134 200.97790527]
[201.48976135 207.47039795]
[186.89891052 210.94992065]
[171.90208435 211.25843811]
[157.18048096 208.38192749]
[143.40280151 202.45103455]
[131.19485474 193.73518372]
[121.11117554 182.63024902]
[113.60978699 169.64067078]
[109.03143311 155.35646057]
[107.58406830 140.42591858]
[108.98452759 155.36039734]
[110.38497925 170.29489136]
[111.92500305 185.21562195]
[113.60447693 200.12130737]
[115.28394318 215.02699280]
[129.15977478 221.76976013]
[137.16792297 234.95585632]
[136.75302124 250.37763977]
[128.04747009 263.11407471]
[113.82916260 269.10101318]
[98.63512421 266.42803955]
[87.31371307 255.94810486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 160]
[3 159]
[4 158]
[6 157]
[7 156]
[8 155]
[9 52]
[10 51]
[11 50]
[13 48]
[14 47]
[15 46]
[16 45]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[85 131]
[86 130]
[87 129]
[88 128]
[89 127]
[92 101]
[93 100]
[94 99]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
