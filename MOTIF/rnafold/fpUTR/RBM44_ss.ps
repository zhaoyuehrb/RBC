%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUACCCAACAGGCGCCGCGGCUGCUCCGGUGGCGCCACUGACUCGGAGGCGGCUGCGGAGAGCGGGGCGCUGGCCCGUGGAGGCGGCAGCGGCGGCGGCUUUCUAGCGGAUCCGAGAUUAUAUAUCUUUGA\
) } def
/len { sequence length } bind def

/coor [
[254.82908630 390.89437866]
[246.77374268 378.24084473]
[238.71839905 365.58734131]
[230.66305542 352.93383789]
[219.43917847 354.37173462]
[208.45112610 351.46014404]
[199.32946777 344.59088135]
[193.44294739 334.74597168]
[191.69316101 323.35739136]
[194.37664795 312.09893799]
[201.13549805 302.64007568]
[193.99629211 289.44796753]
[181.13401794 281.93722534]
[181.37062073 266.11776733]
[174.23139954 252.92567444]
[167.09219360 239.73356628]
[159.95298767 226.54145813]
[152.81378174 213.34934998]
[145.67456055 200.15724182]
[132.81230164 192.64648438]
[133.04888916 176.82705688]
[125.90968323 163.63494873]
[118.77047729 150.44284058]
[111.63126373 137.25073242]
[104.49205017 124.05863190]
[97.35284424 110.86652374]
[90.05832672 97.75965118]
[82.60952759 84.73984528]
[74.25756836 72.28012085]
[65.04438019 60.44300842]
[55.83118820 48.60590363]
[38.64132309 42.12809753]
[36.80744171 24.71619225]
[27.31724167 13.09999180]
[17.82704163 1.48379052]
[8.33684349 -10.13241005]
[-1.15335536 -21.74861145]
[-9.08513165 -26.47307968]
[-10.72660923 -33.75309372]
[-19.93980026 -45.59019852]
[-29.15299034 -57.42730713]
[-36.97096634 -62.33779526]
[-38.44004059 -69.65454865]
[-47.37108612 -81.70595551]
[-56.30212784 -93.75737000]
[-70.09182739 -92.60700226]
[-82.54005432 -98.39734650]
[-90.41847992 -109.50804901]
[-91.74293518 -122.95489502]
[-86.27219391 -135.19094849]
[-94.91610718 -147.44993591]
[-110.02039337 -153.83683777]
[-111.77252960 -170.14210510]
[-98.37006378 -179.59230042]
[-83.60030365 -172.46585083]
[-82.65711212 -156.09384155]
[-74.01320648 -143.83485413]
[-57.64422989 -144.14778137]
[-44.15925217 -134.57458496]
[-38.95282364 -118.70359802]
[-44.25071716 -102.68840790]
[-35.31967545 -90.63700104]
[-26.38863182 -78.58558655]
[-17.31588364 -66.64049530]
[-8.10269165 -54.80339050]
[1.11049867 -42.96628189]
[10.46284580 -31.23880959]
[19.95304489 -19.62261009]
[29.44324303 -8.00640869]
[38.93344116 3.60979271]
[48.42364120 15.22599411]
[60.48091507 16.77412415]
[68.47740936 26.45752716]
[67.66829681 39.39271164]
[76.88148499 51.22982025]
[86.09467316 63.06692886]
[89.63851929 48.49156570]
[102.33601379 40.50571823]
[117.00821686 43.62443161]
[125.35974121 56.08444977]
[122.66879272 70.84110260]
[110.45677948 79.55125427]
[95.62933350 77.29104614]
[103.07813263 90.31085205]
[109.55751038 95.24431610]
[110.54494476 103.72731018]
[117.68415833 116.91941833]
[124.82337189 130.11152649]
[131.96258545 143.30363464]
[139.10179138 156.49574280]
[146.24099731 169.68783569]
[159.61390686 178.14218140]
[158.86666870 193.01803589]
[166.00587463 206.21014404]
[173.14509583 219.40225220]
[180.28430176 232.59436035]
[187.42350769 245.78645325]
[194.56272888 258.97857666]
[207.93563843 267.43289185]
[207.18838501 282.30874634]
[214.32760620 295.50085449]
[233.29467773 297.13317871]
[247.41184998 309.68295288]
[251.19502258 328.03781128]
[243.31657410 344.87847900]
[251.37191772 357.53201294]
[259.42724609 370.18551636]
[267.48260498 382.83901978]
[278.33642578 384.60809326]
[286.22601318 391.94851685]
[288.66964722 402.21725464]
[285.08493042 411.91033936]
[292.53372192 424.93014526]
[306.10260010 433.06628418]
[305.70690918 447.95562744]
[313.15570068 460.97543335]
[320.60452271 473.99523926]
[328.05331421 487.01504517]
[335.50210571 500.03485107]
[350.54214478 505.61853027]
[355.41687012 520.90307617]
[346.38684082 534.16345215]
[330.37911987 535.22747803]
[319.67343140 523.27893066]
[322.48229980 507.48367310]
[315.03350830 494.46386719]
[307.58471680 481.44406128]
[300.13589478 468.42425537]
[292.68710327 455.40444946]
[279.65103149 448.19958496]
[279.51391602 432.37896729]
[272.06512451 419.35916138]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 108]
[2 107]
[3 106]
[4 105]
[11 101]
[12 100]
[14 98]
[15 97]
[16 96]
[17 95]
[18 94]
[19 93]
[21 91]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 84]
[28 83]
[29 76]
[30 75]
[31 74]
[33 71]
[34 70]
[35 69]
[36 68]
[37 67]
[39 66]
[40 65]
[41 64]
[43 63]
[44 62]
[45 61]
[50 57]
[51 56]
[112 132]
[113 131]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
