%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCGGUUCAGACACUCUGGUGGGAAAGGCUCACGCUGCUGCUGGAGGGUCUUUAAUAGCCAACAUGUGUUAAUACCCCUUUUAAAUCAGUAUCGAAUAGGGGACCGAAUUUUUGGUUGGUAGAAGAAUCUAGCCUGGCUUUGC\
) } def
/len { sequence length } bind def

/coor [
[5.42882633 216.62585449]
[-1.92819405 222.07273865]
[-10.14067078 226.10278320]
[-18.93902588 228.58605957]
[-28.03487778 229.44340515]
[-37.13048935 228.64889526]
[-45.92852402 226.23062134]
[-54.14174652 222.26977539]
[-61.50242996 216.89782715]
[-67.77104950 210.29222107]
[-72.74409485 202.67050171]
[-76.26068878 194.28314209]
[-91.06841278 196.67713928]
[-105.87613678 199.07115173]
[-120.68386841 201.46514893]
[-133.07226562 211.30577087]
[-146.87127686 205.69891357]
[-161.67900085 208.09291077]
[-176.48672485 210.48692322]
[-191.29446411 212.88092041]
[-206.10218811 215.27491760]
[-220.90991211 217.66891479]
[-235.71763611 220.06291199]
[-250.52536011 222.45690918]
[-265.33309937 224.85090637]
[-269.84542847 233.27345276]
[-277.63726807 238.56150818]
[-286.85604858 239.61282349]
[-295.38046265 236.31457520]
[-301.30862427 229.54019165]
[-316.23931885 230.98052979]
[-331.17001343 232.42088318]
[-344.19754028 242.38156128]
[-359.23147583 235.83076477]
[-360.80618286 219.50738525]
[-347.30172729 210.20353699]
[-332.61035156 217.49018860]
[-317.67965698 216.04985046]
[-302.74896240 214.60951233]
[-287.16601562 201.13537598]
[-267.72708130 210.04318237]
[-252.91935730 207.64918518]
[-238.11163330 205.25518799]
[-223.30390930 202.86119080]
[-208.49618530 200.46719360]
[-193.68846130 198.07318115]
[-178.88072205 195.67918396]
[-164.07299805 193.28518677]
[-149.26527405 190.89118958]
[-137.93601990 181.22180176]
[-123.07786560 186.65740967]
[-108.27014160 184.26341248]
[-93.46240997 181.86941528]
[-78.65468597 179.47541809]
[-74.28559875 158.21537781]
[-61.34418106 140.74150085]
[-42.21145630 130.32531738]
[-20.43145752 128.93466187]
[-0.05478860 136.86190796]
[15.11471272 152.66339111]
[28.95752144 146.88613892]
[42.80033112 141.10888672]
[56.64313889 135.33163452]
[70.48594666 129.55438232]
[55.59235001 131.33782959]
[40.92686844 128.18763733]
[28.07942963 120.44532776]
[18.44285011 108.95026398]
[13.06185436 94.94866180]
[12.51980972 79.95845795]
[16.87547874 65.60478210]
[25.65665436 53.44373703]
[37.91135025 44.79374313]
[52.31100464 40.59255600]
[67.29451752 41.29563904]
[81.23749542 46.82677460]
[92.62834167 56.58631134]
[100.23149109 69.51448059]
[110.66672516 58.73923874]
[121.10196686 47.96399689]
[131.53720093 37.18875885]
[141.97244263 26.41351700]
[134.87321472 13.05476856]
[132.25152588 -1.84428966]
[134.36422729 -16.82399940]
[141.00431824 -30.41680145]
[151.52130127 -41.29101181]
[164.88479614 -48.38128662]
[179.78561401 -50.99298859]
[194.76390076 -48.87025833]
[208.35224915 -42.22105026]
[219.21940613 -31.69679451]
[226.30073547 -18.32854271]
[228.90245056 -3.42598486]
[226.76968384 11.55088043]
[220.11137390 25.13477135]
[209.57983398 35.99487686]
[196.20684814 43.06723404]
[181.30253601 45.65896988]
[166.32710266 43.51616669]
[152.74768066 36.84875488]
[142.31243896 47.62399673]
[131.87721252 58.39923477]
[121.44197083 69.17447662]
[111.00672913 79.94971466]
[116.18720245 94.02674103]
[131.11788940 95.46708679]
[146.04858398 96.90743256]
[160.97926331 98.34777832]
[175.90995789 99.78812408]
[190.60133362 92.50146484]
[204.10578918 101.80532074]
[202.53108215 118.12869263]
[187.49716187 124.67948914]
[174.46960449 114.71881104]
[159.53892517 113.27846527]
[144.60823059 111.83811951]
[129.67755127 110.39777374]
[114.74686432 108.95742798]
[108.23831940 122.47256470]
[101.73034668 135.98649597]
[112.16558838 146.76173401]
[122.60082245 157.53697205]
[133.15060425 168.20008850]
[143.81372070 178.74987793]
[154.47685242 189.29965210]
[170.46826172 192.93371582]
[175.05764771 208.67759705]
[163.52381897 220.33534241]
[147.73179626 215.91445923]
[143.92706299 199.96278381]
[133.26394653 189.41299438]
[122.60082245 178.86322021]
[115.58408356 176.37710571]
[111.82558441 167.97221375]
[101.39035034 157.19697571]
[90.95510864 146.42173767]
[76.26319885 143.39718628]
[62.42039108 149.17443848]
[48.57758331 154.95169067]
[34.73477554 160.72894287]
[20.89196587 166.50619507]
[22.29398155 175.58805847]
[22.03740120 184.76800537]
[20.13274765 193.74578857]
[16.64440918 202.22819519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 54]
[13 53]
[14 52]
[15 51]
[17 49]
[18 48]
[19 47]
[20 46]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[30 39]
[31 38]
[32 37]
[60 142]
[61 141]
[62 140]
[63 139]
[64 138]
[78 105]
[79 104]
[80 103]
[81 102]
[82 101]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
[121 137]
[122 136]
[123 135]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
