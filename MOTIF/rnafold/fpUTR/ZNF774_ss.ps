%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUCCGGCCGCUGGCUGUCGAAGCCGGAGUCCCACCUGUGUCCCCACAGCCCUGUCACGAAUCCCGGUCGGGUUCUGGGAGGCACAGCCUCGGGGUUGCGGGCCGGGUGCGGCUCGGCGGUGGAGGACUCACUUCCUGCUCCAUCCCCGGCUGGGCCCUGGGGCGGAACUGAUGACGCUUGAUA\
) } def
/len { sequence length } bind def

/coor [
[196.19819641 205.67233276]
[210.57881165 201.40641785]
[225.53929138 202.46179199]
[213.41886902 193.62463379]
[201.29844666 184.78749084]
[189.17802429 175.95033264]
[177.05758667 167.11317444]
[164.93716431 158.27603149]
[157.66490173 156.87286377]
[152.68904114 149.18721008]
[140.71878052 140.14768982]
[128.74851990 131.10816956]
[116.77825928 122.06864929]
[104.80799866 113.02912903]
[89.89734650 114.66387177]
[80.17000580 126.08222198]
[70.44266510 137.50057983]
[60.71532440 148.91893005]
[60.55575562 164.96119690]
[47.82572174 174.72468567]
[32.29061127 170.71969604]
[25.86763573 156.01850891]
[33.48394775 141.89862061]
[49.29696655 139.19158936]
[59.02431107 127.77323914]
[68.75164795 116.35488129]
[78.47898865 104.93653107]
[84.79863739 101.91153717]
[91.44038391 100.21147919]
[81.90623474 88.63132477]
[72.37207794 77.05117035]
[62.83793259 65.47101593]
[53.30378342 53.89085770]
[38.55897903 48.15488815]
[36.44267273 33.41139603]
[26.90852356 21.83124161]
[17.37437439 10.25108719]
[7.84022427 -1.32906783]
[-1.69392550 -12.90922260]
[-11.22807503 -24.48937798]
[-19.11588669 -29.13815308]
[-20.82314873 -36.34509277]
[-30.16141510 -48.08377838]
[-39.49968338 -59.82246399]
[-48.83795166 -71.56114960]
[-59.72426987 -72.16888428]
[-68.29560089 -78.54602051]
[-71.85624695 -88.38515472]
[-69.45388794 -98.34323120]
[-78.39253998 -110.38899994]
[-87.33119202 -122.43476868]
[-96.26984406 -134.48052979]
[-105.20849609 -146.52630615]
[-114.14714813 -158.57206726]
[-123.08580017 -170.61784363]
[-136.58418274 -164.50169373]
[-154.87507629 -171.20870972]
[-166.04470825 -181.22067261]
[-177.21434021 -191.23263550]
[-185.71237183 -194.64027405]
[-188.48570251 -201.50782776]
[-199.48554993 -211.70602417]
[-210.48541260 -221.90422058]
[-221.48527527 -232.10241699]
[-232.48512268 -242.30059814]
[-243.48498535 -252.49879456]
[-259.50640869 -253.33180237]
[-268.72677612 -266.46054077]
[-264.07302856 -281.81381226]
[-249.11512756 -287.61383057]
[-235.32748413 -279.41137695]
[-233.28678894 -263.49865723]
[-222.28694153 -253.30046082]
[-211.28707886 -243.10226440]
[-200.28721619 -232.90408325]
[-189.28736877 -222.70588684]
[-178.28750610 -212.50769043]
[-167.20237732 -202.40225220]
[-156.03274536 -192.39028931]
[-144.86311340 -182.37832642]
[-131.91493225 -189.95095825]
[-135.16494751 -204.59463501]
[-138.41496277 -219.23832703]
[-141.66497803 -233.88200378]
[-144.91497803 -248.52568054]
[-154.24951172 -262.67852783]
[-143.23384094 -275.56616211]
[-127.80041504 -268.54861450]
[-130.27130127 -251.77569580]
[-127.02129364 -237.13201904]
[-123.77127838 -222.48832703]
[-120.52127075 -207.84465027]
[-117.27125549 -193.20097351]
[-111.04003143 -179.55648804]
[-102.10137939 -167.51072693]
[-93.16272736 -155.46495056]
[-84.22407532 -143.41918945]
[-75.28542328 -131.37341309]
[-66.34677124 -119.32765198]
[-57.40811920 -107.28188324]
[-39.15466309 -100.93907166]
[-37.09926224 -80.89942169]
[-27.76099586 -69.16073608]
[-18.42272949 -57.42204666]
[-9.08446217 -45.68336105]
[0.35207963 -34.02352905]
[9.88622952 -22.44337273]
[19.42037964 -10.86321735]
[28.95452881 0.71693730]
[38.48867798 12.29709244]
[48.02282715 23.87724686]
[62.08568573 28.78492737]
[64.88393402 44.35670853]
[74.41808319 55.93686295]
[83.95223999 67.51702118]
[93.48638916 79.09717560]
[103.02053833 90.67733002]
[113.84751892 101.05886841]
[125.81777954 110.09838867]
[137.78804016 119.13790894]
[149.75830078 128.17742920]
[161.72856140 137.21694946]
[173.77432251 146.15559387]
[185.89474487 154.99275208]
[198.01516724 163.82991028]
[210.13560486 172.66705322]
[222.25602722 181.50421143]
[234.37644958 190.34136963]
[242.27172852 190.44561768]
[248.28379822 194.23249817]
[251.05741882 199.90995789]
[264.80465698 205.91108704]
[278.55187988 211.91221619]
[294.29501343 210.34222412]
[302.86383057 222.52519226]
[316.61105347 228.52632141]
[330.35827637 234.52745056]
[344.10552979 240.52857971]
[353.24365234 241.09735107]
[358.03195190 246.74772644]
[371.67645264 252.97895813]
[385.32092285 259.21017456]
[398.96539307 265.44140625]
[412.60986328 271.67263794]
[426.25436401 277.90383911]
[442.51867676 271.48962402]
[458.08779907 278.67187500]
[463.54537964 294.56958008]
[477.29260254 300.57070923]
[491.03985596 306.57183838]
[507.26690674 304.20227051]
[517.21881104 317.23651123]
[510.65792847 332.26605225]
[494.33349609 333.82977295]
[485.03869629 320.31909180]
[471.29147339 314.31793213]
[457.54425049 308.31680298]
[446.31311035 314.65740967]
[433.28692627 313.34552002]
[423.25140381 304.63763428]
[420.02313232 291.54833984]
[406.37866211 285.31710815]
[392.73416138 279.08587646]
[379.08969116 272.85464478]
[365.44522095 266.62344360]
[351.80072021 260.39221191]
[338.10440063 254.27581787]
[324.35714722 248.27468872]
[310.60992432 242.27355957]
[296.86270142 236.27243042]
[282.10287476 238.27165222]
[272.55075073 225.65945435]
[258.80352783 219.65832520]
[245.05628967 213.65719604]
[253.52095032 226.04063416]
[257.09768677 240.60795593]
[255.33087158 255.50354004]
[248.44558716 268.82992554]
[237.31889343 278.88958740]
[223.36814880 284.40106201]
[208.37042236 284.66232300]
[194.23617554 279.64004517]
[182.76588440 269.97399902]
[175.42065430 256.89547729]
[173.13613892 242.07048035]
[176.20335388 227.38742065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 128]
[4 127]
[5 126]
[6 125]
[7 124]
[8 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 27]
[16 26]
[17 25]
[18 24]
[29 117]
[30 116]
[31 115]
[32 114]
[33 113]
[35 111]
[36 110]
[37 109]
[38 108]
[39 107]
[40 106]
[42 105]
[43 104]
[44 103]
[45 102]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[57 80]
[58 79]
[59 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
[81 93]
[82 92]
[83 91]
[84 90]
[85 89]
[131 174]
[132 173]
[133 172]
[135 170]
[136 169]
[137 168]
[138 167]
[140 166]
[141 165]
[142 164]
[143 163]
[144 162]
[145 161]
[148 157]
[149 156]
[150 155]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
