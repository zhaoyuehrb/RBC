%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUGCAGUUGAUCCAGCAGCAGGAGGCAGCUGUACCCAUCACUGUCCUCAGAGUACUUUUAAGAACAAGGAGGUCUCUGCCCACGGCAGCCCAAGCAGAUUCCCAUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[56.75844955 107.50000000]
[41.75844955 107.50000000]
[26.75844765 107.50000000]
[11.75844765 107.50000000]
[-3.24155188 107.50000000]
[-18.24155235 107.50000000]
[-33.21877289 108.32631683]
[-48.12773514 109.97644043]
[-63.03669357 111.62656403]
[-77.94565582 113.27668762]
[-86.26469421 117.38095093]
[-93.28736877 114.76103973]
[-108.23613739 115.99972534]
[-123.18490601 117.23841858]
[-131.70742798 131.77192688]
[-147.04103088 138.34410095]
[-163.12127686 134.56912231]
[-173.71424866 122.11199188]
[-188.62321472 123.76211548]
[-203.53216553 125.41223907]
[-218.44113159 127.06236267]
[-233.35008240 128.71247864]
[-240.91716003 142.25939941]
[-255.01582336 148.74070740]
[-270.22485352 145.66419983]
[-280.69607544 134.21284485]
[-282.40307617 118.78995514]
[-274.68951416 105.32592010]
[-260.52136230 98.99794769]
[-245.34658813 102.23926544]
[-235.00021362 113.80352020]
[-220.09124756 112.15339661]
[-205.18229675 110.50327301]
[-190.27333069 108.85314941]
[-175.36437988 107.20302582]
[-169.81166077 94.97797394]
[-158.83480835 87.05809021]
[-145.26637268 85.62011719]
[-132.67427063 91.15068817]
[-124.42359161 102.28964996]
[-109.47483063 101.05095673]
[-94.52606201 99.81227112]
[-79.59577942 98.36772919]
[-64.68682098 96.71760559]
[-49.77785873 95.06748199]
[-34.86889648 93.41735840]
[-32.98957825 91.16153717]
[-30.04178429 89.56932068]
[-26.29508591 89.07592773]
[-22.18026161 90.00239563]
[-18.24155235 92.50000000]
[-3.24155188 92.50000000]
[11.75844765 92.50000000]
[26.75844765 92.50000000]
[41.75844955 92.50000000]
[56.75844955 92.50000000]
[59.18923569 83.85802460]
[63.32765961 75.89146423]
[69.00055695 68.93367767]
[75.97055054 63.27579117]
[83.94600677 59.15454483]
[92.59320068 56.74238586]
[101.55032349 56.14024353]
[110.44256592 57.37331009]
[118.89787292 60.38999939]
[126.56243134 65.06407166]
[133.11555481 71.19996643]
[138.28302002 78.54093170]
[141.84863281 86.77980042]
[143.66317749 95.57183838]
[143.65074158 104.54916382]
[158.08476257 108.63071442]
[172.51878357 112.71227264]
[187.05978394 116.39455414]
[201.69673157 119.67476654]
[214.94282532 111.47850800]
[229.74003601 115.01361847]
[237.47229004 127.69226074]
[252.10923767 130.97247314]
[266.74618530 134.25268555]
[281.38311768 137.53291321]
[296.02008057 140.81312561]
[304.76132202 132.51441956]
[316.32217407 129.55998230]
[327.73971558 132.58554077]
[336.14669800 140.70950317]
[339.49145508 151.78559875]
[353.92547607 155.86715698]
[369.68133545 151.31906128]
[381.30880737 162.88340759]
[376.84652710 178.66378784]
[360.88494873 182.42669678]
[349.84393311 170.30117798]
[335.40991211 166.21961975]
[320.13452148 176.12251282]
[302.13137817 171.77738953]
[292.73986816 155.45007324]
[278.10290527 152.16986084]
[263.46597290 148.88963318]
[248.82902527 145.60942078]
[234.19207764 142.32920837]
[221.78840637 150.49528503]
[206.89773560 147.37718201]
[198.41650391 134.31172180]
[183.77957153 131.03149414]
[179.23306274 132.86621094]
[173.47901917 131.76394653]
[168.43722534 127.14629364]
[154.00320435 123.06473541]
[139.56918335 118.98318481]
[125.46330261 135.74494934]
[105.01258850 143.59994507]
[83.31285095 140.59089661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[5 52]
[6 51]
[7 46]
[8 45]
[9 44]
[10 43]
[12 42]
[13 41]
[14 40]
[18 35]
[19 34]
[20 33]
[21 32]
[22 31]
[71 110]
[72 109]
[73 108]
[74 105]
[75 104]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
