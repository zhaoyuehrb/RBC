%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGUGGGAGGAGAGCGCGAAGGGGCGAGGCCCGUUUGCAGGGGCCGCUCGGCCCGGGGAAGCCCGCGCCCCGCUCAGCCUUGCAGCCCCGCGCCCGGAGCAUCUCCCUGGAGGAACGGAGACAAAGGAGGAUUC\
) } def
/len { sequence length } bind def

/coor [
[341.31665039 256.27777100]
[329.74169922 246.73733521]
[318.16671753 237.19688416]
[306.59176636 227.65643311]
[294.70007324 218.51380920]
[282.50531006 209.77951050]
[270.31054688 201.04522705]
[258.01785278 192.44929504]
[245.62882996 183.99282837]
[230.75491333 183.20814514]
[223.71887207 169.03758240]
[211.32984924 160.58111572]
[198.94081116 152.12464905]
[186.55177307 143.66818237]
[169.04199219 143.33259583]
[161.12078857 126.75251770]
[148.54380798 118.57819366]
[135.96682739 110.40386963]
[123.38985443 102.22955322]
[78.89278412 139.69084167]
[64.10777283 142.22132874]
[49.32275772 144.75183105]
[34.53774643 147.28231812]
[19.75273323 149.81282043]
[7.45563269 159.76731873]
[-6.39450598 154.28799438]
[-21.17951775 156.81849670]
[-35.96453094 159.34898376]
[-50.74954224 161.87948608]
[-65.34164429 170.51123047]
[-77.67554474 158.87889099]
[-69.91217041 143.80685425]
[-53.28004074 147.09446716]
[-38.49502563 144.56398010]
[-23.71001434 142.03347778]
[-8.92500305 139.50299072]
[2.31457448 129.72949219]
[17.22223663 135.02781677]
[32.00724792 132.49731445]
[46.79225922 129.96681213]
[61.57727432 127.43631744]
[76.36228180 124.90582275]
[78.53434753 117.72723389]
[82.87847900 103.37005615]
[85.05054474 96.19146729]
[74.14855957 85.88871765]
[63.24657822 75.58596039]
[52.34459305 65.28321075]
[41.44261169 54.98045349]
[25.37213898 51.71365356]
[20.42332458 36.07903671]
[31.68708229 24.16015434]
[47.57622528 28.21813202]
[51.74536514 44.07846832]
[62.64735031 54.38122177]
[73.54933167 64.68397522]
[84.45131683 74.98673248]
[95.35330200 85.28948212]
[108.77185059 78.58556366]
[107.08035278 63.68124008]
[105.38885498 48.77692032]
[103.69735718 33.87259674]
[89.81608582 27.14102936]
[81.79729462 13.96140385]
[82.19974518 -1.46070981]
[90.89501953 -14.20417023]
[105.10848236 -20.20258713]
[120.30467224 -17.54188538]
[131.63453674 -7.07108736]
[135.48277283 7.86861467]
[130.62139893 22.51001549]
[118.60167694 32.18109894]
[120.29317474 47.08542252]
[121.98467255 61.98974228]
[123.67617035 76.89406586]
[131.56417847 89.65257263]
[144.14115906 97.82689667]
[156.71813965 106.00121307]
[169.29512024 114.17553711]
[182.10740662 112.27008057]
[192.43272400 119.40598297]
[195.00823975 131.27914429]
[207.39727783 139.73561096]
[219.78631592 148.19209290]
[232.17533875 156.64855957]
[247.93540955 158.03808594]
[254.08529663 171.60379028]
[266.47433472 180.06025696]
[275.40792847 182.34355164]
[279.04483032 188.85046387]
[291.23959351 197.58476257]
[303.43435669 206.31906128]
[308.79916382 206.83520508]
[312.97232056 209.16931152]
[315.45251465 212.54026794]
[316.13220215 216.08146667]
[327.70718384 225.62191772]
[339.28213501 235.16235352]
[350.85711670 244.70280457]
[364.88696289 250.00968933]
[379.87835693 250.51812744]
[394.86972046 251.02655029]
[409.86111450 251.53498840]
[425.89608765 246.02900696]
[435.62582397 259.91311646]
[424.97775269 273.10610962]
[409.35266113 266.52636719]
[394.36129761 266.01794434]
[379.36990356 265.50949097]
[364.37854004 265.00106812]
[360.03439331 279.35824585]
[372.79290771 287.24624634]
[385.55142212 295.13424683]
[400.87402344 291.26214600]
[414.40374756 299.43051147]
[418.11361694 314.79318237]
[409.80267334 328.23580933]
[394.40161133 331.78305054]
[381.04763794 323.33044434]
[377.66339111 307.89276123]
[364.90490723 300.00476074]
[352.14639282 292.11676025]
[359.56134033 305.15588379]
[355.64764404 319.63632202]
[347.52865601 332.24908447]
[335.96835327 341.80731201]
[322.05459595 347.41156006]
[307.09671021 348.53445435]
[292.50219727 345.07034302]
[279.64440918 337.34521484]
[269.73333740 326.08596802]
[263.70156860 312.35214233]
[262.11672974 297.43609619]
[265.12796021 282.74145508]
[272.45184326 269.65100098]
[283.39926147 259.39654541]
[296.94003296 252.94303894]
[311.79995728 250.89776611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 92]
[6 91]
[7 90]
[8 88]
[9 87]
[11 85]
[12 84]
[13 83]
[14 82]
[16 79]
[17 78]
[18 77]
[19 76]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[26 36]
[27 35]
[28 34]
[29 33]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[59 75]
[60 74]
[61 73]
[62 72]
[100 110]
[101 109]
[102 108]
[103 107]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
