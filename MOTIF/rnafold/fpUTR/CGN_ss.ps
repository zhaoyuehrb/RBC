%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:28:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGCUCCGAGGACGAGGGGGAGGGCCGGAGCUGCGCGUGCUGCUUUGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAGCCCGAACGCAAGCCUGGGAGCGCGGAGCCCGGCUAGGGACUCCUCCUAUUU\
) } def
/len { sequence length } bind def

/coor [
[-11.16273117 601.85455322]
[-14.70390034 616.43060303]
[-18.24506950 631.00659180]
[-13.11335659 646.58215332]
[-24.23665237 658.63220215]
[-40.17226410 654.76074219]
[-44.52700043 638.95037842]
[-32.82108307 627.46545410]
[-29.27991295 612.88940430]
[-25.73874283 598.31341553]
[-36.06803894 591.53942871]
[-43.81384277 581.88592529]
[-48.20607758 570.28826904]
[-48.80058670 557.87640381]
[-45.52401352 545.86462402]
[-38.68244553 535.43280029]
[-28.93291092 527.61035156]
[-17.22028542 523.17486572]
[-4.68573666 522.57476807]
[-0.20529367 508.25952148]
[4.27514935 493.94430542]
[8.75559235 479.62905884]
[13.23603535 465.31384277]
[17.71647835 450.99862671]
[22.19692039 436.68341064]
[26.67736435 422.36816406]
[30.37622452 407.83139038]
[33.28265381 393.11566162]
[36.18908691 378.39993286]
[39.09551620 363.68420410]
[42.00194550 348.96847534]
[44.90837860 334.25274658]
[43.10533905 327.02774048]
[48.04047012 319.25122070]
[51.26502609 304.60192871]
[54.48958206 289.95260620]
[49.66916656 275.85961914]
[60.19219971 264.04537964]
[63.41675568 249.39605713]
[66.64131165 234.74674988]
[69.86586761 220.09744263]
[73.09042358 205.44813538]
[68.27000427 191.35513306]
[78.79304504 179.54089355]
[82.01760101 164.89157104]
[84.76444244 150.14523315]
[87.03067780 135.31741333]
[89.29691315 120.48959351]
[91.56314850 105.66177368]
[89.56134796 97.78711700]
[94.04245758 90.53867340]
[96.62939453 75.76342773]
[88.81486511 57.23429108]
[101.69351196 42.86922455]
[103.63798523 27.99579048]
[97.75489807 13.30906487]
[107.07676697 1.69217682]
[109.02123260 -13.18125725]
[103.13814545 -27.86798286]
[112.46001434 -39.48487091]
[114.40447998 -54.35830688]
[108.52139282 -69.04502869]
[117.84326172 -80.66191864]
[119.78772736 -95.53535461]
[113.90464020 -110.22207642]
[123.22650909 -121.83896637]
[125.17097473 -136.71240234]
[119.28789520 -151.39912415]
[128.60975647 -163.01602173]
[130.55422974 -177.88945007]
[124.67114258 -192.57617188]
[133.99301147 -204.19306946]
[135.93746948 -219.06649780]
[129.15182495 -233.99589539]
[138.90707397 -247.17797852]
[155.16786194 -245.05213928]
[161.20646667 -229.80526733]
[150.81091309 -217.12202454]
[148.86643982 -202.24859619]
[154.88861084 -188.62571716]
[145.42765808 -175.94497681]
[143.48318481 -161.07154846]
[149.50535583 -147.44866943]
[140.04440308 -134.76792908]
[138.09994507 -119.89450073]
[144.12210083 -106.27162170]
[134.66116333 -93.59088898]
[132.71669006 -78.71745300]
[138.73886108 -65.09457397]
[129.27790833 -52.41383743]
[127.33345032 -37.54040527]
[133.35560608 -23.91752625]
[123.89466095 -11.23679066]
[121.95019531 3.63664341]
[127.97236633 17.25952148]
[118.51141357 29.94025612]
[116.56694794 44.81369019]
[123.55019379 52.39674377]
[125.20182800 62.79555511]
[120.72855377 72.57027435]
[111.40464020 78.35037231]
[108.81769562 93.12561035]
[106.39096832 107.92800903]
[104.12473297 122.75582886]
[101.85849762 137.58364868]
[99.59226227 152.41146851]
[101.55247498 157.40962219]
[101.36699677 162.17056274]
[99.49989319 165.90118408]
[96.66690826 168.11613464]
[93.44235229 182.76544189]
[98.03212738 197.90626526]
[87.73973846 208.67268372]
[84.51517487 223.32199097]
[81.29061890 237.97131348]
[78.06606293 252.62062073]
[74.84150696 267.26992798]
[79.43128967 282.41073608]
[69.13889313 293.17718506]
[65.91433716 307.82647705]
[62.68977737 322.47579956]
[59.62410736 337.15917969]
[56.71767426 351.87490845]
[53.81124496 366.59063721]
[50.90481567 381.30636597]
[47.99838257 396.02209473]
[45.09195328 410.73782349]
[58.98249817 405.07629395]
[72.17653656 412.21194458]
[75.04228973 426.93563843]
[65.48773193 438.49896240]
[50.48777771 438.46057129]
[40.99258804 426.84860229]
[36.51214600 441.16384888]
[32.03170013 455.47906494]
[27.55125809 469.79428101]
[23.07081604 484.10949707]
[18.59037209 498.42474365]
[14.10993004 512.73999023]
[9.62948704 527.05517578]
[23.03676987 538.87231445]
[29.95580292 555.29345703]
[29.05354500 573.03723145]
[20.55489159 588.57971191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[34 121]
[35 120]
[36 119]
[38 117]
[39 116]
[40 115]
[41 114]
[42 113]
[44 111]
[45 110]
[46 106]
[47 105]
[48 104]
[49 103]
[51 102]
[52 101]
[54 97]
[55 96]
[57 94]
[58 93]
[60 91]
[61 90]
[63 88]
[64 87]
[66 85]
[67 84]
[69 82]
[70 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
