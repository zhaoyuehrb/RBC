%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:32 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SRMS)
} def

/sequence { (\
GGCUCCCAUGGCCCUCGGGCCCAGCGUGGUGACCCCGGGGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 7 0.497205090 ubox
1 13 0.231407154 ubox
1 34 0.157017557 ubox
1 35 0.211656995 ubox
1 36 0.104932144 ubox
2 6 0.489539303 ubox
2 12 0.356089898 ubox
2 25 0.011537169 ubox
2 30 0.007250054 ubox
2 33 0.157939585 ubox
2 34 0.212968252 ubox
2 35 0.102894978 ubox
3 11 0.368616772 ubox
3 24 0.011560271 ubox
3 29 0.007393986 ubox
3 39 0.006263930 ubox
3 40 0.021963673 ubox
3 41 0.122650010 ubox
4 10 0.341354083 ubox
4 11 0.056788158 ubox
4 23 0.011127774 ubox
4 28 0.007000594 ubox
4 32 0.297815114 ubox
4 38 0.006139445 ubox
4 39 0.018674845 ubox
4 40 0.125077283 ubox
4 41 0.041499223 ubox
5 10 0.112375768 ubox
5 11 0.186268917 ubox
5 29 0.004606637 ubox
5 31 0.304049631 ubox
5 37 0.006048477 ubox
5 38 0.018671842 ubox
5 39 0.127085499 ubox
5 40 0.072063356 ubox
5 41 0.018832485 ubox
6 10 0.187297115 ubox
6 28 0.004162653 ubox
6 29 0.308660778 ubox
6 37 0.017487198 ubox
6 38 0.127075159 ubox
6 39 0.072176679 ubox
6 40 0.019198928 ubox
6 41 0.003198180 ubox
7 28 0.308795851 ubox
7 31 0.004744936 ubox
7 37 0.125612435 ubox
7 38 0.072092448 ubox
7 39 0.019101815 ubox
8 27 0.308613354 ubox
8 30 0.005185470 ubox
9 23 0.054405625 ubox
9 26 0.303616524 ubox
9 29 0.005100306 ubox
9 37 0.005441473 ubox
10 21 0.324522726 ubox
10 22 0.053831611 ubox
10 25 0.092770346 ubox
10 34 0.021022136 ubox
10 35 0.007491485 ubox
10 36 0.006331190 ubox
11 20 0.340101692 ubox
11 21 0.038602414 ubox
11 33 0.020846734 ubox
11 34 0.007187342 ubox
11 35 0.005791629 ubox
12 19 0.342291382 ubox
12 29 0.003602416 ubox
12 39 0.004607776 ubox
12 40 0.089218937 ubox
12 41 0.848070386 ubox
13 18 0.342250566 ubox
13 19 0.003903103 ubox
13 28 0.003540105 ubox
13 29 0.015026708 ubox
13 38 0.004695212 ubox
13 39 0.089844310 ubox
13 40 0.905501583 ubox
13 41 0.011446221 ubox
14 18 0.004164386 ubox
14 28 0.015017726 ubox
14 29 0.003338833 ubox
14 37 0.004621718 ubox
14 38 0.090028288 ubox
14 39 0.934357462 ubox
14 40 0.021743738 ubox
15 29 0.014672279 ubox
15 32 0.003241535 ubox
15 37 0.036529578 ubox
15 38 0.934052965 ubox
15 39 0.018115057 ubox
16 26 0.015080364 ubox
16 28 0.016219650 ubox
16 31 0.003274788 ubox
16 37 0.938273460 ubox
16 38 0.013674610 ubox
17 25 0.015059075 ubox
17 27 0.016318176 ubox
17 34 0.005032950 ubox
17 35 0.069704293 ubox
17 36 0.936645850 ubox
18 33 0.005306597 ubox
18 34 0.091909471 ubox
18 35 0.934742273 ubox
18 36 0.003667172 ubox
19 25 0.017571132 ubox
19 30 0.065393602 ubox
19 33 0.109345645 ubox
19 34 0.929890234 ubox
19 35 0.003821334 ubox
20 24 0.017680868 ubox
20 26 0.006123798 ubox
20 29 0.197683195 ubox
20 40 0.003722189 ubox
20 41 0.005141061 ubox
21 28 0.196124544 ubox
21 29 0.383026958 ubox
21 39 0.003837687 ubox
21 40 0.006114824 ubox
22 28 0.384478215 ubox
22 31 0.818246510 ubox
22 38 0.004407051 ubox
22 39 0.006711754 ubox
22 40 0.007233467 ubox
23 27 0.312082130 ubox
23 30 0.795496215 ubox
24 30 0.148372354 ubox
25 29 0.172531667 ubox
25 31 0.034310786 ubox
25 37 0.072270148 ubox
26 30 0.021328001 ubox
26 33 0.070080361 ubox
26 36 0.094741043 ubox
27 32 0.069490465 ubox
27 37 0.016434678 ubox
28 34 0.048401026 ubox
28 35 0.097223089 ubox
28 36 0.077967440 ubox
29 33 0.047833975 ubox
29 34 0.096661961 ubox
29 35 0.077713200 ubox
31 36 0.010175614 ubox
33 39 0.018161774 ubox
33 40 0.034599268 ubox
33 41 0.108099883 ubox
34 38 0.018094544 ubox
34 39 0.034556962 ubox
34 40 0.109648231 ubox
34 41 0.013254684 ubox
35 39 0.109053565 ubox
35 40 0.018272290 ubox
35 41 0.036479532 ubox
36 40 0.037880123 ubox
12 41 0.9500000 lbox
13 40 0.9500000 lbox
14 39 0.9500000 lbox
15 38 0.9500000 lbox
16 37 0.9500000 lbox
17 36 0.9500000 lbox
18 35 0.9500000 lbox
19 34 0.9500000 lbox
22 31 0.9500000 lbox
23 30 0.9500000 lbox
showpage
end
%%EOF
