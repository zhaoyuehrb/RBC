%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUCACGUGGGUCCCCCCGGUUCCGGCGCGGUUGAGGCCUUCGGUGGUGAACGAGUCUCCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[106.97606659 129.85665894]
[98.62886047 130.63014221]
[90.38416290 129.11393738]
[82.85826874 125.42137146]
[76.61376953 119.82849884]
[72.11745453 112.75338745]
[69.70543671 104.72492981]
[54.76942825 103.34090424]
[39.83341599 101.95687866]
[25.37820244 108.38784790]
[13.41913128 99.50923157]
[-1.51688099 98.12520599]
[-13.60773659 107.94605255]
[-28.73526192 106.32968140]
[-38.02342224 94.74237823]
[-52.95943451 93.35835266]
[-69.28888702 97.91744995]
[-78.19025421 83.48824310]
[-66.78909302 70.94033813]
[-51.57540894 78.42234039]
[-36.63939667 79.80636597]
[-25.38022232 70.12304688]
[-10.21326637 71.31388092]
[-0.13285561 83.18919373]
[14.80315685 84.57321930]
[28.19004440 78.04325104]
[41.21744156 87.02086639]
[56.15345383 88.40489197]
[71.08946228 89.78890991]
[86.05879974 72.69197845]
[108.68598938 70.59526062]
[126.54199219 84.65048218]
[140.96937561 80.54553223]
[155.39675903 76.44058990]
[169.82414246 72.33564758]
[184.15286255 67.89855194]
[198.37527466 63.13168335]
[212.59768677 58.36481094]
[226.82009888 53.59793854]
[231.87274170 48.50264740]
[237.85694885 47.20546722]
[242.58009338 49.11383438]
[257.18167114 45.67957687]
[271.78323364 42.24531555]
[277.66314697 27.88542557]
[290.87826538 19.75279999]
[306.34716797 20.97459602]
[318.12173462 31.08101273]
[321.67437744 46.18592453]
[315.63903809 60.48118591]
[302.33645630 68.46997070]
[286.88171387 67.08044434]
[275.21749878 56.84688950]
[260.61593628 60.28114700]
[246.01435852 63.71540451]
[231.58697510 67.82035065]
[217.36456299 72.58721924]
[203.14215088 77.35409546]
[188.91973877 82.12096405]
[183.39324951 87.41298676]
[173.92909241 86.76303101]
[159.50170898 90.86797333]
[145.07432556 94.97292328]
[130.64694214 99.07786560]
[129.75122070 107.41283417]
[126.63151550 115.19367218]
[121.52102661 121.83874512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 29]
[8 28]
[9 27]
[11 25]
[12 24]
[15 21]
[16 20]
[32 64]
[33 63]
[34 62]
[35 61]
[36 59]
[37 58]
[38 57]
[39 56]
[42 55]
[43 54]
[44 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
