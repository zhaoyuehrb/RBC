%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:57:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCGCUGGGCUUGGUAGUUGGGGCGCAGCCGCGGUGGCUGGGCGCGGAGUGUGCGUGGCCUGAGCCGUGCGGGUGACUGCUUCAGGGCUUCUCCGCGACUGGACCGGGCGCCGCUCGAAAGCACGCCCUCCAUUCGCACUGCUUGUUGGGCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[88.44638824 378.50152588]
[77.00158691 368.33908081]
[71.60129547 354.01794434]
[73.48645782 338.82894897]
[82.22387695 326.26248169]
[95.80575562 319.20620728]
[95.80575562 304.20620728]
[95.80575562 289.20620728]
[88.06845093 276.47894287]
[95.80575562 262.67877197]
[95.80575562 247.67875671]
[95.80575562 232.67875671]
[87.46065521 223.87574768]
[87.36943054 211.34469604]
[96.12863159 201.82958984]
[96.42498779 186.83251953]
[96.72134399 171.83544922]
[97.01770020 156.83837891]
[97.31405640 141.84130859]
[97.61041260 126.84423828]
[78.65303802 98.87885284]
[65.81336975 91.12366486]
[52.97370148 83.36847687]
[40.13403320 75.61328888]
[27.29436684 67.85809326]
[14.45470047 60.10290909]
[1.61503386 52.34771729]
[-11.37534714 44.84771729]
[-24.51137161 37.60583496]
[-40.33217239 37.71904373]
[-47.74238205 24.79859161]
[-60.87840652 17.55670929]
[-74.01442719 10.31482601]
[-87.15045166 3.07294297]
[-100.28647614 -4.16894007]
[-112.90639496 -1.34079945]
[-123.71299744 -7.68533134]
[-127.16407776 -19.31390572]
[-140.15446472 -26.81390572]
[-153.14483643 -34.31390381]
[-166.13522339 -41.81390381]
[-179.27124023 -49.05578613]
[-192.54779053 -56.03672791]
[-208.36326599 -55.61096573]
[-216.02729797 -68.38249207]
[-229.30383301 -75.36343384]
[-242.58036804 -82.34436798]
[-255.85690308 -89.32530975]
[-270.25915527 -83.23353577]
[-285.19235229 -87.87393951]
[-293.60552979 -101.05546570]
[-291.52621460 -116.55419159]
[-279.93621826 -127.05210114]
[-264.30798340 -127.59239197]
[-252.02066040 -117.91996765]
[-248.87597656 -102.60184479]
[-235.59942627 -95.62091064]
[-222.32289124 -88.63996887]
[-209.04635620 -81.65902710]
[-194.18051147 -82.58411407]
[-185.56684875 -69.31326294]
[-172.29029846 -62.33232880]
[-167.49804688 -62.88792801]
[-162.31317139 -60.40167236]
[-158.63522339 -54.80428696]
[-145.64483643 -47.30428696]
[-132.65446472 -39.80428696]
[-119.66407776 -32.30428696]
[-102.16459656 -33.27370834]
[-93.04459381 -17.30496407]
[-79.90856934 -10.06308079]
[-66.77254486 -2.82119799]
[-53.63652039 4.42068481]
[-40.50049973 11.66256809]
[-25.61927223 11.03137112]
[-17.26948738 24.46981049]
[-4.13346434 31.71169472]
[0.66883457 31.25088310]
[5.80357933 33.83909225]
[9.37022305 39.50805283]
[22.20989037 47.26324081]
[35.04955673 55.01842880]
[47.88922501 62.77362061]
[60.72888947 70.52880859]
[73.56855774 78.28399658]
[86.40822601 86.03918457]
[100.83798981 81.94262695]
[107.68743134 68.59777069]
[114.53686523 55.25291443]
[113.18715668 38.90940475]
[126.81848145 29.79243660]
[141.40809631 37.28076553]
[141.94746399 53.67104340]
[127.88172150 62.10235214]
[121.03228760 75.44721222]
[114.18284607 88.79206848]
[122.31510925 101.39627838]
[137.29681396 100.65563965]
[152.27851868 99.91500092]
[167.26022339 99.17436218]
[180.66152954 90.76509857]
[193.75531006 97.86454010]
[208.73701477 97.12390137]
[223.71871948 96.38326263]
[238.70042419 95.64261627]
[244.52847290 92.34232330]
[250.27653503 92.49797821]
[254.28628540 95.18055725]
[269.28555298 95.03237152]
[284.28482056 94.88418579]
[299.28408813 94.73600006]
[314.28335571 94.58781433]
[323.88452148 85.92303467]
[336.41406250 86.13805389]
[345.13421631 94.56970978]
[360.13348389 94.71789551]
[375.13275146 94.86608124]
[389.14144897 86.34035492]
[403.39752197 94.44571686]
[403.23550415 110.84407043]
[388.82208252 118.66618347]
[374.98455811 109.86534882]
[359.98529053 109.71716309]
[344.98602295 109.56897736]
[330.22174072 119.01287079]
[314.43154907 109.58708191]
[299.43228149 109.73526764]
[284.43301392 109.88345337]
[269.43374634 110.03163910]
[254.43447876 110.17982483]
[239.44107056 110.62432098]
[224.45936584 111.36495972]
[209.47766113 112.10560608]
[194.49595642 112.84624481]
[182.16624451 121.20252991]
[168.00086975 114.15606689]
[153.01916504 114.89670563]
[138.03746033 115.63734436]
[123.05575562 116.37798309]
[112.60749054 127.14059448]
[112.31112671 142.13766479]
[112.01477051 157.13473511]
[111.71841431 172.13180542]
[111.42205811 187.12887573]
[111.12570190 202.12596130]
[120.39503479 218.00848389]
[110.80575562 232.67875671]
[110.80575562 247.67875671]
[110.80575562 262.67877197]
[118.54305267 276.47894287]
[110.80575562 289.20620728]
[110.80575562 304.20620728]
[110.80575562 319.20620728]
[124.38763428 326.26248169]
[133.12504578 338.82894897]
[135.01020813 354.01794434]
[129.60992432 368.33908081]
[118.16512299 378.50152588]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 153]
[7 152]
[8 151]
[10 149]
[11 148]
[12 147]
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[27 80]
[28 77]
[29 76]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[38 68]
[39 67]
[40 66]
[41 65]
[42 62]
[43 61]
[45 59]
[46 58]
[47 57]
[48 56]
[87 96]
[88 95]
[89 94]
[97 139]
[98 138]
[99 137]
[100 136]
[102 134]
[103 133]
[104 132]
[105 131]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
