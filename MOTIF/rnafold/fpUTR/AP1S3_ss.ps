%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUUUCAGUGCCAGGGCAUUGUGGGAAGCAGCCAUGGUCUAAGCCGGGCGCCUCACCUGUCAGCCGCACCGGCUCCAGCGCUCGCCUCUCGCCCUCGCUUCUCCAGCGCUCCUUGCUCGCAAGGCGGGGGAGGCGGCGGCCCAGCCACG\
) } def
/len { sequence length } bind def

/coor [
[104.01985931 270.54708862]
[97.97068787 284.56030273]
[86.43484497 294.55465698]
[71.70277405 298.54574585]
[56.69954300 295.74114990]
[44.40404892 286.69772339]
[37.25757217 273.21105957]
[36.67905426 257.95889282]
[42.78335571 243.96961975]
[54.35846710 234.02076721]
[69.10614014 230.08770752]
[71.86238098 215.34310913]
[74.61862183 200.59852600]
[64.26538849 189.92385864]
[62.15814972 175.02340698]
[69.31254578 161.58212280]
[83.16992188 154.85311890]
[85.92616272 140.10853577]
[88.68240356 125.36392975]
[91.43865204 110.61933899]
[87.96906281 111.51841736]
[84.16329193 111.66829681]
[80.16034698 111.00248718]
[76.11007690 109.47827148]
[61.24348068 107.48221588]
[46.37688065 105.48615265]
[31.51028252 103.49009705]
[16.64368439 101.49404144]
[10.29967403 103.68404388]
[4.66643953 102.47799683]
[1.21253693 99.09868622]
[-13.55957985 96.49396515]
[-22.61759949 98.09022522]
[-28.60692596 93.68112183]
[-43.32244873 90.77365112]
[-58.03797150 87.86618042]
[-67.12685394 89.27613068]
[-73.02439117 84.74498749]
[-87.67711639 81.53598785]
[-102.32984161 78.32699585]
[-116.98256683 75.11799622]
[-132.43746948 80.60235596]
[-144.73721313 69.75579071]
[-141.22889709 53.73630905]
[-125.52156067 49.02338791]
[-113.77356720 60.46527481]
[-99.12084198 63.67427063]
[-84.46812439 66.88326263]
[-69.81539917 70.09226227]
[-55.13049698 73.15065765]
[-40.41497421 76.05812836]
[-25.69945335 78.96559906]
[-10.95485687 81.72184753]
[3.81725955 84.32656860]
[18.63974190 86.62744141]
[33.50634003 88.62349701]
[48.37294006 90.61956024]
[63.23953629 92.61561584]
[78.10614014 94.61167145]
[88.09723663 83.42337036]
[84.43852997 68.87641907]
[80.77982330 54.32946396]
[70.10261536 47.02187729]
[67.37905884 34.78449249]
[73.54216003 24.33086205]
[70.18290710 9.71185493]
[66.82364655 -4.90715265]
[63.46438599 -19.52616119]
[60.10512543 -34.14516830]
[50.66518021 -48.22791290]
[61.58432770 -61.19743729]
[77.06971741 -54.29533386]
[74.72413635 -37.50442505]
[78.08339691 -22.88541985]
[81.44264984 -8.26641178]
[84.80191040 6.35259581]
[88.16117096 20.97160339]
[100.79245758 33.11635971]
[95.32677460 50.67076111]
[98.98548126 65.21771240]
[102.64418793 79.76467133]
[115.06250000 88.17807770]
[129.92910767 86.18202209]
[144.79570007 84.18596649]
[152.94355774 79.91885376]
[159.98767090 82.30479431]
[174.89212036 80.61439514]
[189.79655457 78.92399597]
[204.70100403 77.23359680]
[219.60545349 75.54319763]
[223.10632324 72.74255371]
[226.93563843 71.37879944]
[230.58895874 71.37453461]
[233.64166260 72.49268341]
[235.79521179 74.37769318]
[250.78810120 73.91576385]
[265.78097534 73.45384216]
[280.77386475 72.99191284]
[295.76675415 72.52999115]
[310.75964355 72.06806183]
[325.75253296 71.60614014]
[340.74542236 71.14421082]
[355.73828125 70.68228912]
[363.06472778 57.25579071]
[376.04226685 49.35135269]
[391.13357544 49.00628662]
[404.28335571 56.21315384]
[412.00820923 68.94863129]
[427.00109863 68.48670197]
[441.99398804 68.02478027]
[456.98684692 67.56285095]
[468.97961426 56.90671158]
[484.76309204 59.78090286]
[492.22958374 73.98059082]
[485.65142822 88.61299133]
[470.07479858 92.45338440]
[457.44879150 82.55574036]
[442.45590210 83.01766205]
[427.46301270 83.47959137]
[412.47012329 83.94151306]
[405.54394531 97.12837982]
[392.86276245 105.13109589]
[377.77883911 105.71571350]
[364.33929443 98.62518311]
[356.20022583 85.67517090]
[341.20733643 86.13710022]
[326.21444702 86.59902191]
[311.22155762 87.06095123]
[296.22866821 87.52287292]
[281.23577881 87.98480225]
[266.24291992 88.44672394]
[251.25001526 88.90865326]
[236.25714111 89.37058258]
[221.29585266 90.44764709]
[206.39140320 92.13804626]
[191.48695374 93.82844543]
[176.58250427 95.51884460]
[161.67807007 97.20923615]
[146.79176331 99.05256653]
[131.92515564 101.04862213]
[117.05855560 103.04467773]
[106.18324280 113.37557983]
[103.42700195 128.12017822]
[100.67076111 142.86477661]
[97.91452026 157.60937500]
[108.40534210 168.88983154]
[110.22106934 184.00791931]
[102.87345886 197.14096069]
[89.36322021 203.35476685]
[86.60697937 218.09936523]
[83.85073853 232.84394836]
[96.18174744 241.83889771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 151]
[12 150]
[13 149]
[17 145]
[18 144]
[19 143]
[20 142]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[31 54]
[32 53]
[34 52]
[35 51]
[36 50]
[38 49]
[39 48]
[40 47]
[41 46]
[60 81]
[61 80]
[62 79]
[65 77]
[66 76]
[67 75]
[68 74]
[69 73]
[82 141]
[83 140]
[84 139]
[86 138]
[87 137]
[88 136]
[89 135]
[90 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
