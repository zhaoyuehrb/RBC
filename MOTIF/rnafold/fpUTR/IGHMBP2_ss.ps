%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:46:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGUAACGCACGGGCCCGGCGGGGAACACCGGUCCGCUGUAACACCGGCCCGGCGCAGAAGCGGGACGUCGGCUUCUAGGGGCCCAGGCCGGCGGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[109.42198944 219.40458679]
[103.20968628 233.05769348]
[96.99738312 246.71080017]
[90.78508759 260.36389160]
[84.57278442 274.01699829]
[83.51637268 290.93801880]
[66.96420288 294.60708618]
[58.85642242 279.71746826]
[70.91967773 267.80471802]
[77.13198090 254.15159607]
[83.34428406 240.49848938]
[89.55657959 226.84538269]
[95.76888275 213.19227600]
[98.49867249 198.44276428]
[97.58421326 183.47065735]
[96.66975403 168.49856567]
[95.75528717 153.52645874]
[94.84082794 138.55436707]
[93.92636871 123.58226776]
[77.83477783 110.08540344]
[78.23050690 89.08663940]
[67.54333496 78.56121826]
[52.28179932 74.39037323]
[48.64311600 59.94705963]
[37.95594788 49.42164612]
[27.26877594 38.89622879]
[22.63297462 37.90225601]
[19.00302696 35.62859344]
[16.67138672 32.58668518]
[15.71890450 29.33054161]
[16.02075195 26.37846184]
[6.69397783 14.63064194]
[-2.63279724 2.88282251]
[-11.95957184 -8.86499691]
[-21.28634644 -20.61281776]
[-36.46665192 -18.27744865]
[-50.77503967 -23.86006737]
[-60.36262512 -35.85897446]
[-62.65039825 -51.04652405]
[-57.02295685 -65.33734131]
[-44.99406052 -74.88726807]
[-29.79941177 -77.12742615]
[-15.52630329 -71.45522308]
[-6.01412630 -59.39644623]
[-3.82160902 -44.19485092]
[-9.53852749 -29.93959236]
[-0.21175238 -18.19177246]
[9.11502266 -6.44395256]
[18.44179726 5.30386734]
[27.76857185 17.05168724]
[37.79419327 28.20905876]
[48.48136520 38.73447418]
[59.16853333 49.25989151]
[73.66565704 52.67789078]
[78.06875610 67.87405396]
[88.75592804 78.39946747]
[98.33367920 75.70523834]
[108.18959808 77.06655884]
[116.67841339 82.25618744]
[129.81860352 75.02186584]
[142.95878601 67.78754425]
[156.09898376 60.55322266]
[169.23916626 53.31890106]
[182.37936401 46.08457947]
[190.73687744 32.65094757]
[205.61773682 33.29070663]
[218.75793457 26.05638504]
[229.71713257 13.12069035]
[245.18110657 20.07064629]
[242.78361511 36.85421753]
[225.99224854 39.19657516]
[212.85206604 46.43089676]
[205.43441772 59.34708405]
[189.61367798 59.22476959]
[176.47349548 66.45909119]
[163.33329773 73.69341278]
[150.19311523 80.92773438]
[137.05293274 88.16205597]
[123.91273499 95.39637756]
[123.45581818 106.54498291]
[118.07447052 116.31948853]
[108.89846802 122.66780853]
[109.81292725 137.63990784]
[110.72738647 152.61199951]
[111.64185333 167.58410645]
[112.55631256 182.55619812]
[113.47077179 197.52830505]
[125.68461609 194.31655884]
[140.29119873 198.95260620]
[152.87580872 212.32130432]
[159.50158691 225.77861023]
[166.12736511 239.23591614]
[172.75314331 252.69322205]
[186.67622375 261.35809326]
[185.86340332 277.73709106]
[171.15084839 284.98089600]
[157.67356873 275.63769531]
[159.29583740 259.31900024]
[152.67005920 245.86169434]
[146.04428101 232.40438843]
[139.41850281 218.94708252]
[131.91937256 219.06146240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[14 87]
[15 86]
[16 85]
[17 84]
[18 83]
[19 82]
[21 56]
[22 55]
[24 53]
[25 52]
[26 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[59 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[66 72]
[67 71]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
