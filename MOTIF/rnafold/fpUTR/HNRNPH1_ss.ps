%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAGGGACCUUAUUUAGGUUGCGCAGGCGCCCGCUGGCCAUUUCGUCUUAGCCACGCAGAAGUCGCGUGUCUAGGUGAGUCGCGGUGGGUCCUCGCUUGCAGUUCAGCGACCACGUUUGUUUCGACGCCGGACCGCGUAAGAGACG\
) } def
/len { sequence length } bind def

/coor [
[203.00219727 387.13540649]
[193.74394226 386.74349976]
[184.65916443 384.89816284]
[175.97465515 381.64422607]
[167.90747070 377.06170654]
[160.65939331 371.26394653]
[154.41194153 364.39456177]
[149.32183838 356.62411499]
[145.51702881 348.14575195]
[143.09347534 339.17047119]
[142.11280823 329.92181396]
[142.60063171 320.63031006]
[144.54600525 311.52780151]
[147.90153503 302.84155273]
[152.58465576 294.78866577]
[158.47958374 287.57058716]
[165.44020081 281.36807251]
[173.29371643 276.33673096]
[167.99754333 262.30282593]
[162.70138550 248.26892090]
[157.40521240 234.23501587]
[152.10905457 220.20109558]
[146.81288147 206.16719055]
[140.63436890 192.49876404]
[133.59854126 179.25123596]
[126.56271362 166.00369263]
[119.52688599 152.75616455]
[112.49106598 139.50862122]
[105.45523834 126.26109314]
[98.41941071 113.01355743]
[90.82768250 100.07656860]
[82.69374084 87.47344208]
[74.55979156 74.87030792]
[66.42584229 62.26717758]
[58.29189301 49.66404724]
[50.15794754 37.06091690]
[42.02399826 24.45778847]
[29.48096657 25.41737366]
[17.79778099 20.95259094]
[9.19174957 11.97704411]
[5.26778746 0.25397375]
[6.71934986 -11.94991684]
[13.20675182 -22.30270386]
[5.61502457 -35.23969269]
[-1.97670245 -48.17668152]
[-9.56842899 -61.11367035]
[-16.66076088 -66.98203278]
[-17.18064690 -74.40680695]
[-24.49607277 -87.50202179]
[-31.81149673 -100.59722900]
[-39.12691879 -113.69244385]
[-46.44234467 -126.78765106]
[-59.92739105 -135.06195068]
[-59.37964630 -149.94648743]
[-66.69506836 -163.04170227]
[-74.01049042 -176.13691711]
[-81.32592010 -189.23211670]
[-88.64134216 -202.32733154]
[-104.03429413 -205.08250427]
[-114.01525116 -217.12055969]
[-113.87150574 -232.75747681]
[-103.67092896 -244.61000061]
[-88.22992706 -247.08172607]
[-74.83926392 -239.00556946]
[-69.82160187 -224.19487000]
[-75.54612732 -209.64276123]
[-68.23070526 -196.54754639]
[-60.91528320 -183.45233154]
[-53.59985733 -170.35711670]
[-46.28443146 -157.26191711]
[-33.32263565 -149.92427063]
[-33.34713364 -134.10307312]
[-26.03170776 -121.00786591]
[-18.71628380 -107.91265106]
[-11.40085983 -94.81744385]
[-4.08543587 -81.72222900]
[3.36855936 -68.70539856]
[10.96028614 -55.76840973]
[18.55201340 -42.83142090]
[26.14373970 -29.89443207]
[43.72748566 -29.02821922]
[57.42504501 -17.72137451]
[61.68185425 -0.31660748]
[54.62712860 16.32384109]
[62.76107788 28.92696953]
[70.89502716 41.53010178]
[79.02896881 54.13323212]
[87.16291809 66.73635864]
[95.29686737 79.33949280]
[103.43081665 91.94261932]
[106.42687225 92.83139038]
[109.15419769 94.86083221]
[111.17821503 97.92886353]
[112.11014557 101.77014160]
[111.66694641 105.97772980]
[118.70277405 119.22526550]
[125.73859406 132.47280884]
[132.77442932 145.72033691]
[139.81024170 158.96786499]
[146.84606934 172.21540833]
[153.88189697 185.46293640]
[159.72463989 171.64764404]
[173.55006409 165.82888794]
[187.51344299 171.30828857]
[193.69181824 184.97677612]
[188.57951355 199.07870483]
[175.07730103 205.61247253]
[160.84678650 200.87103271]
[166.14295959 214.90493774]
[171.43911743 228.93884277]
[176.73529053 242.97276306]
[182.03144836 257.00665283]
[187.32762146 271.04058838]
[209.19073486 270.07681274]
[229.87876892 277.13534546]
[246.55473328 291.22872925]
[256.93896484 310.40618896]
[259.62063599 332.02355957]
[254.24960327 353.10797119]
[241.58178711 370.76657104]
[250.50129700 382.82653809]
[259.42077637 394.88647461]
[268.34027100 406.94644165]
[277.25979614 419.00640869]
[294.29235840 425.91964722]
[295.66909790 443.38488770]
[304.84259033 455.25280762]
[314.01605225 467.12072754]
[323.18951416 478.98864746]
[338.89566040 480.74722290]
[348.69265747 493.14862061]
[346.76812744 508.83529663]
[334.26385498 518.50061035]
[318.59841919 516.41033936]
[309.06579590 503.80459595]
[311.32159424 488.16213989]
[302.14813232 476.29421997]
[292.97467041 464.42630005]
[283.80117798 452.55834961]
[271.80551147 450.69268799]
[264.07101440 440.81997681]
[265.19982910 427.92590332]
[256.28033447 415.86593628]
[247.36082458 403.80596924]
[238.44132996 391.74603271]
[229.52183533 379.68606567]
[221.11682129 383.56094360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 96]
[30 95]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
[37 84]
[43 80]
[44 79]
[45 78]
[46 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[120 146]
[121 145]
[122 144]
[123 143]
[124 142]
[126 139]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
