%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:49:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACAGUAUCUGGGUCCAGCCUGCAGCCCUAGGGUCCAGGUGAUGUUUCCGUGUGUGUGGCCCUUCUUCACAGUGGCCUCCUAGAAAAACAAGACCCUGACUCAAAGAACACCUCUCACUACAUUCAGAGUCUGUCAUCUGAACC\
) } def
/len { sequence length } bind def

/coor [
[67.84687805 101.21875000]
[53.52238083 105.66944122]
[39.19787979 110.12013245]
[24.87337685 114.57083130]
[10.54887581 119.02152252]
[8.05967236 129.52566528]
[1.45362198 137.96057129]
[-8.00357246 142.82026672]
[-18.54541588 143.27333069]
[-28.23447227 139.30448914]
[-35.31843567 131.70487976]
[-49.90021133 135.22224426]
[-64.48197937 138.73962402]
[-79.06375885 142.25698853]
[-83.59889221 159.17129517]
[-95.98178864 171.42820740]
[-112.77008057 175.74604797]
[-129.35966492 171.03285217]
[-141.24729919 158.66085815]
[-155.66424561 162.80232239]
[-170.08119202 166.94377136]
[-184.49813843 171.08522034]
[-198.91508484 175.22668457]
[-205.86779785 186.14662170]
[-218.01574707 189.27249146]
[-228.67004395 183.44912720]
[-243.17276001 187.27941895]
[-257.67547607 191.10972595]
[-268.92535400 203.04170227]
[-284.81921387 199.00219727]
[-289.00680542 183.14671326]
[-277.18026733 171.78601074]
[-261.50576782 176.60700989]
[-247.00305176 172.77670288]
[-232.50033569 168.94641113]
[-220.77729797 155.92898560]
[-203.05653381 160.80973816]
[-188.63958740 156.66827393]
[-174.22264099 152.52682495]
[-159.80569458 148.38537598]
[-145.38874817 144.24391174]
[-143.65487671 131.64994812]
[-137.24142456 120.61923981]
[-127.07991791 112.82489777]
[-114.67343140 109.46476746]
[-101.87427521 111.07745361]
[-90.60745239 117.45631409]
[-82.58112335 127.67521667]
[-67.99935150 124.15784454]
[-53.41757965 120.64047241]
[-38.83580780 117.12310028]
[-30.02204895 99.81919098]
[-11.06468391 94.38271332]
[6.09818363 104.69702148]
[20.42268562 100.24632263]
[34.74718475 95.79563141]
[49.07168961 91.34494019]
[63.39619064 86.89424896]
[71.08175659 74.01278687]
[68.19498444 59.29319382]
[65.30821228 44.57359695]
[62.42144012 29.85399818]
[59.37646866 15.16631126]
[56.17365646 0.51223415]
[42.24149323 -6.58909607]
[36.18110657 -21.00456429]
[40.85402679 -35.92762756]
[54.05384064 -44.31207275]
[69.54800415 -42.19902039]
[80.02063751 -30.58618927]
[80.52689362 -14.95680237]
[70.82773590 -2.69057965]
[74.03054810 11.96349812]
[78.56434631 17.86925697]
[77.14103699 26.96722603]
[80.02780914 41.68682098]
[82.91458130 56.40641785]
[85.80136108 71.12601471]
[100.03232574 69.12098694]
[113.10935974 73.48150635]
[122.45499420 82.80128479]
[126.47316742 94.75634766]
[141.41763306 96.04582214]
[156.36210632 97.33529663]
[171.30657959 98.62476349]
[180.58335876 88.80006409]
[193.63906860 86.17349243]
[205.63674927 91.48853302]
[212.26325989 102.58820343]
[227.17652893 104.19892120]
[242.08979797 105.80964661]
[251.03172302 103.60949707]
[257.30535889 107.61882782]
[272.18054199 109.55004883]
[287.05569458 111.48126984]
[301.73718262 105.58511353]
[313.36236572 114.89662933]
[328.23751831 116.82785797]
[343.11267090 118.75907898]
[357.98782349 120.69029999]
[367.30377197 105.43633270]
[382.27969360 95.77628326]
[399.91363525 93.59222412]
[416.69430542 99.27304077]
[429.30029297 111.64613342]
[435.25747681 128.21911621]
[450.22622681 129.18675232]
[465.19500732 130.15437317]
[478.14782715 120.68845367]
[493.58596802 125.05231476]
[499.66659546 139.89837646]
[491.72518921 153.83801270]
[475.85369873 156.17791748]
[464.22738647 145.12312317]
[449.25860596 144.15550232]
[434.28985596 143.18788147]
[429.40509033 154.53053284]
[421.23855591 163.82740784]
[410.57800293 170.15870667]
[398.45889282 172.89179993]
[386.06387329 171.74443054]
[374.60723877 166.81378174]
[365.21615601 158.56838989]
[358.81961060 147.80372620]
[356.05661011 135.56546021]
[341.18145752 133.63423157]
[326.30630493 131.70301819]
[311.43112183 129.77178955]
[297.81362915 135.80609131]
[285.12448120 126.35643005]
[270.24929810 124.42520905]
[255.37414551 122.49398804]
[240.47908020 120.72291565]
[225.56581116 119.11219025]
[210.65254211 117.50147247]
[198.05374146 128.59245300]
[180.99301147 127.14628601]
[170.01710510 113.56923676]
[155.07264709 112.27976227]
[140.12817383 110.99029541]
[125.18369293 109.70082092]
[118.92616272 120.43402863]
[108.24208832 127.50886536]
[95.14405060 129.18057251]
[82.28707123 124.76387787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 58]
[2 57]
[3 56]
[4 55]
[5 54]
[11 51]
[12 50]
[13 49]
[14 48]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[26 35]
[27 34]
[28 33]
[59 78]
[60 77]
[61 76]
[62 75]
[63 73]
[64 72]
[82 141]
[83 140]
[84 139]
[85 138]
[89 135]
[90 134]
[91 133]
[93 132]
[94 131]
[95 130]
[97 128]
[98 127]
[99 126]
[100 125]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
