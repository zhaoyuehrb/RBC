%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCGCACUCUCAGUUUCACCGCUCGAUCUUGGGACCCACCGCUGCCCUCAGCUCCGAGUCCAGGGCGAGUGCAGAGCAGAGCGGGCGGAGGACCCCGGGCGCGGGCGCGGACGGCACGCGGGGC\
) } def
/len { sequence length } bind def

/coor [
[55.08097839 593.16534424]
[61.12731934 577.32623291]
[61.12731934 562.32623291]
[61.12731934 547.32623291]
[61.12731934 532.32623291]
[61.12731934 517.32623291]
[61.12731934 502.32620239]
[48.90120697 497.61019897]
[39.00297546 488.97384644]
[32.64234543 477.44351196]
[30.60665512 464.40090942]
[33.16343689 451.41763306]
[40.02552032 440.06576538]
[50.38307190 431.72744751]
[62.99914551 427.42672729]
[63.74095154 412.44506836]
[64.48275757 397.46340942]
[65.22456360 382.48178101]
[57.62786102 375.45297241]
[55.15914154 365.17480469]
[58.88715363 355.04776001]
[67.78778839 348.56304932]
[69.26958466 333.63641357]
[70.75138092 318.70980835]
[72.23317719 303.78317261]
[73.71497345 288.85653687]
[75.19676971 273.92990112]
[65.58738708 262.60757446]
[66.87750244 247.44873047]
[78.81856537 237.44630432]
[80.30036163 222.51966858]
[81.78215790 207.59303284]
[83.26395416 192.66641235]
[84.74575043 177.73977661]
[86.22754669 162.81314087]
[76.61816406 151.49081421]
[77.90827942 136.33197021]
[89.84934998 126.32953644]
[91.33114624 111.40290833]
[85.74611664 98.58499146]
[93.74222565 87.11529541]
[95.22402191 72.18866730]
[96.70581818 57.26203537]
[98.18761444 42.33540344]
[95.75282288 36.00091171]
[96.80433655 30.27741432]
[100.12969971 26.71362877]
[102.34786224 11.87854290]
[104.38237000 -2.98284268]
[106.23291779 -17.86825371]
[108.08345795 -32.75366592]
[102.10778809 -47.40296555]
[111.35614014 -59.07846069]
[113.20668793 -73.96387482]
[115.05722809 -88.84928894]
[116.90777588 -103.73469543]
[103.64656067 -113.52468109]
[97.14013672 -128.56781006]
[99.06546021 -144.75006104]
[108.80742645 -157.69715881]
[123.65083313 -163.95690918]
[125.13262939 -178.88354492]
[114.92333221 -190.94778442]
[116.31822205 -206.69039917]
[128.48973083 -216.77157593]
[144.21670532 -215.21032715]
[154.16864014 -202.93290710]
[152.44119263 -187.22331238]
[140.05926514 -177.40174866]
[138.57746887 -162.47511292]
[150.21635437 -155.22103882]
[157.61032104 -143.59176636]
[159.25724792 -129.84288025]
[154.77636719 -116.67059326]
[144.99429321 -106.68311310]
[131.79318237 -101.88415527]
[129.94264221 -86.99874115]
[128.09210205 -72.11332703]
[126.24155426 -57.22791672]
[132.34959412 -43.64332199]
[122.96887207 -30.90312195]
[121.11832428 -16.01770973]
[119.26778412 -1.13229823]
[121.58963776 5.96983004]
[117.18294525 14.09670353]
[114.96479034 28.93178940]
[113.11424255 43.81719971]
[111.63244629 58.74383163]
[110.15065002 73.67046356]
[108.66885376 88.59709167]
[114.25388336 101.41500854]
[106.25777435 112.88470459]
[104.77597809 127.81133270]
[114.51744080 139.96623230]
[112.80205536 155.08285522]
[101.15417480 164.29493713]
[99.67237854 179.22157288]
[98.19058228 194.14820862]
[96.70878601 209.07482910]
[95.22698975 224.00146484]
[93.74519348 238.92810059]
[103.48665619 251.08299255]
[101.77127075 266.19961548]
[90.12339783 275.41171265]
[88.64160156 290.33831787]
[87.15980530 305.26495361]
[85.67800903 320.19158936]
[84.19621277 335.11822510]
[82.71441650 350.04486084]
[91.90385437 367.90667725]
[80.20620728 383.22357178]
[79.46440125 398.20523071]
[78.72259521 413.18688965]
[77.98078918 428.16851807]
[93.14796448 436.01959229]
[103.36815643 449.63421631]
[106.65166473 466.28240967]
[102.39374542 482.65173340]
[91.48538971 495.50622559]
[76.12731934 502.32620239]
[76.12731934 517.32623291]
[76.12731934 532.32623291]
[76.12731934 547.32623291]
[76.12731934 562.32623291]
[76.12731934 577.32623291]
[82.17366028 593.16534424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[15 114]
[16 113]
[17 112]
[18 111]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[38 93]
[39 92]
[41 90]
[42 89]
[43 88]
[44 87]
[47 86]
[48 85]
[49 83]
[50 82]
[51 81]
[53 79]
[54 78]
[55 77]
[56 76]
[61 70]
[62 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
