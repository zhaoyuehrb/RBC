%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCUUCAGGUAGGAGGUCCUGGGUGACUUUGGAAGUCCGUAGUGUCUCAUUGCAGAUAAUUUUUAGCUUAGGGCCUGGUGGCUAGGUCGGUUCUCUCCUUUCCAGUCGGAGACCUCUGCCGCAAAC\
) } def
/len { sequence length } bind def

/coor [
[114.95610046 164.33871460]
[101.25415039 158.23490906]
[92.70382690 145.91046143]
[91.78419495 130.93867493]
[98.76020813 117.66220856]
[91.47045898 130.77172852]
[84.18070221 143.88124084]
[88.75702667 159.00846863]
[81.22286987 172.90133667]
[66.04811096 177.31747437]
[52.23566818 169.63685608]
[47.98021698 154.41625977]
[55.80644226 140.68579102]
[71.07118225 136.59149170]
[78.36093903 123.48197174]
[85.65068817 110.37245178]
[83.30416870 95.55712891]
[72.32013702 85.34188843]
[61.33610916 75.12665558]
[50.35208130 64.91141510]
[39.36804962 54.69617844]
[28.38401985 44.48093796]
[17.39999008 34.26570129]
[6.41596031 24.05046272]
[-4.56806946 13.83522606]
[-15.55209923 3.61998773]
[-26.53612900 -6.59525013]
[-38.40486908 0.57526797]
[-51.72083282 4.39795446]
[-65.56011200 4.61454153]
[-78.96430969 1.21672213]
[-91.00689697 -5.55373621]
[-100.85727692 -15.22218323]
[-107.83804321 -27.11435509]
[-111.47159576 -40.40339661]
[-111.51277924 -54.16734695]
[-107.96543884 -67.45310974]
[-101.08166504 -79.34243774]
[-111.55934143 -90.07642365]
[-122.03701019 -100.81040955]
[-137.21339417 -105.28120422]
[-140.56672668 -119.79341888]
[-151.04440308 -130.52740479]
[-161.52206421 -141.26138306]
[-171.99974060 -151.99537659]
[-182.47741699 -162.72935486]
[-192.95507812 -173.46334839]
[-208.34565735 -180.57437134]
[-205.77305603 -197.33200073]
[-188.95816040 -199.49891663]
[-182.22109985 -183.94100952]
[-171.74342346 -173.20703125]
[-161.26576233 -162.47305298]
[-150.78808594 -151.73905945]
[-140.31040955 -141.00508118]
[-129.83274841 -130.27108765]
[-115.40579987 -126.56806183]
[-111.30302429 -111.28807831]
[-100.82535553 -100.55410004]
[-90.34768677 -89.82011414]
[-75.94111633 -97.26217651]
[-59.92789078 -99.92867279]
[-43.85049438 -97.55123138]
[-29.26115608 -90.34792328]
[-17.57194138 -79.00326538]
[-9.91810322 -64.60324097]
[-7.04782677 -48.53129578]
[-9.24910641 -32.33547592]
[-16.32089233 -17.57928085]
[-5.33686161 -7.36404228]
[5.64716816 2.85119581]
[16.63119888 13.06643391]
[27.61522865 23.28167152]
[38.59925842 33.49691010]
[49.58329010 43.71214676]
[60.56731796 53.92738342]
[71.55134583 64.14262390]
[82.53537750 74.35786438]
[93.51940918 84.57309723]
[109.24881744 81.80809021]
[123.43570709 94.45326233]
[137.90884399 98.39387512]
[152.38197327 102.33448792]
[166.85510254 106.27510071]
[181.32824707 110.21570587]
[198.96302795 105.08095551]
[210.88150024 117.90272522]
[225.44563293 121.49246216]
[240.00975037 125.08219910]
[254.57388306 128.67193604]
[269.13800049 132.26167297]
[293.50006104 95.44193268]
[308.48254395 94.71723175]
[318.91796875 82.84806061]
[334.69485474 81.91764832]
[346.45303345 92.47798920]
[347.21658325 108.26382446]
[336.53253174 119.90969086]
[320.73950195 120.50630951]
[309.20724487 109.69971466]
[294.22476196 110.42441559]
[292.42990112 117.70648193]
[288.84014893 132.27059937]
[287.04528809 139.55267334]
[299.97485352 147.15707397]
[312.90438843 154.76145935]
[329.29843140 154.35243225]
[337.61764526 168.48475647]
[329.30392456 182.62031555]
[312.90972900 182.21766663]
[305.29998779 167.69100952]
[292.37045288 160.08660889]
[279.44088745 152.48220825]
[265.54827881 146.82579041]
[250.98414612 143.23605347]
[236.42002869 139.64631653]
[221.85589600 136.05659485]
[207.29176331 132.46685791]
[196.71707153 138.47024536]
[184.50512695 135.52468872]
[177.38763428 124.68884277]
[162.91450500 120.74822998]
[148.44136047 116.80761719]
[133.96823120 112.86701202]
[119.49510193 108.92639923]
[133.87062073 113.20944214]
[143.94105530 124.32637024]
[146.78663635 139.05398560]
[141.58230591 153.12220764]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 69]
[38 60]
[39 59]
[40 58]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[47 51]
[81 125]
[82 124]
[83 123]
[84 122]
[85 121]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[92 101]
[93 100]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
