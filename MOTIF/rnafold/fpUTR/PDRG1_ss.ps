%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUCUUUUAACUGCGCAGGCGCGCCGGAAGCACCUAGAGAGCGGCGCGUGCGCAGCGGGAGUCGAAGCGGAGAUCCCGGGGUCGCGCGAGAGCCGCAAGCGGAGUUGGUGGGCGCU\
) } def
/len { sequence length } bind def

/coor [
[69.51391602 381.36529541]
[66.15502930 365.67779541]
[76.43679810 353.36257935]
[76.43679810 338.36257935]
[76.43679810 323.36257935]
[76.43679810 308.36257935]
[76.43679810 293.36257935]
[68.07054138 284.51919556]
[68.02115631 271.94311523]
[76.86550903 262.44448853]
[77.25815582 247.44963074]
[77.65081024 232.45475769]
[78.04346466 217.45989990]
[78.43611908 202.46504211]
[78.82877350 187.47018433]
[71.42729187 174.54473877]
[79.52318573 160.95182800]
[79.91584015 145.95697021]
[80.30849457 130.96211243]
[69.56396484 120.49525452]
[54.58451843 121.28029633]
[39.60507584 122.06533051]
[26.22875595 130.51426697]
[13.11398792 123.45367432]
[-1.86545503 124.23870850]
[-11.13125992 136.83549500]
[-26.33846092 140.47898865]
[-40.30668259 133.44885254]
[-46.44055557 119.06449890]
[-41.84385681 104.11778259]
[-28.68700409 95.66608429]
[-13.18226242 97.70003510]
[-2.65049434 109.25926971]
[12.32894897 108.47422791]
[24.63383865 100.08143616]
[38.82003784 107.08589172]
[53.79948044 106.30084991]
[68.77892303 105.51580811]
[69.71807861 94.89067078]
[74.05406952 85.51526642]
[81.07039642 78.40030670]
[89.77776337 74.22717285]
[99.04909515 73.28553009]
[107.76381683 75.46219635]
[116.25991058 63.10030746]
[124.75600433 50.73841095]
[133.25209045 38.37651825]
[141.74818420 26.01462746]
[142.29515076 5.94567299]
[159.90461731 -1.86352384]
[167.74209595 -14.65312672]
[175.57957458 -27.44272804]
[183.41705322 -40.23233032]
[191.25453186 -53.02193451]
[199.09201050 -65.81153870]
[192.40736389 -81.28461456]
[196.18043518 -97.54241180]
[208.74516296 -108.27487946]
[225.06292725 -109.43648529]
[232.56292725 -122.42686462]
[240.06292725 -135.41725159]
[247.56292725 -148.40762329]
[255.06292725 -161.39801025]
[254.58428955 -179.74861145]
[270.00064087 -188.02217102]
[277.15802002 -201.20443726]
[272.42962646 -216.28480530]
[279.82351685 -230.25283813]
[294.95303345 -234.82154846]
[308.84210205 -227.28039551]
[313.25061035 -212.10340881]
[305.56301880 -198.29483032]
[290.34027100 -194.04704285]
[283.18289185 -180.86479187]
[286.31561279 -169.10105896]
[280.35821533 -158.02540588]
[268.05331421 -153.89801025]
[260.55331421 -140.90762329]
[253.05331421 -127.91724396]
[245.55331421 -114.92686462]
[238.05331421 -101.93648529]
[244.61279297 -90.23025513]
[244.49914551 -76.70333862]
[237.63455200 -64.92118835]
[225.73478699 -58.04280853]
[211.88160706 -57.97405624]
[204.04412842 -45.18445587]
[196.20664978 -32.39485168]
[188.36917114 -19.60524940]
[180.53169250 -6.81564808]
[172.69421387 5.97395468]
[175.99171448 15.80444622]
[173.21130371 26.02285957]
[165.05398560 33.11773682]
[154.11007690 34.51071930]
[145.61398315 46.87261200]
[137.11788940 59.23450470]
[128.62179565 71.59639740]
[120.12570953 83.95829010]
[127.51134491 103.44363403]
[117.95475006 123.67754364]
[95.30335236 131.35476685]
[94.91069794 146.34962463]
[94.51804352 161.34448242]
[101.89144897 175.34246826]
[93.82363892 187.86283875]
[93.43098450 202.85769653]
[93.03833008 217.85255432]
[92.64567566 232.84741211]
[92.25302124 247.84228516]
[91.86036682 262.83712769]
[101.03715515 278.73556519]
[91.43679810 293.36257935]
[91.43679810 308.36257935]
[91.43679810 323.36257935]
[91.43679810 338.36257935]
[91.43679810 353.36257935]
[101.71856689 365.67779541]
[98.35968781 381.36529541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 117]
[4 116]
[5 115]
[6 114]
[7 113]
[10 111]
[11 110]
[12 109]
[13 108]
[14 107]
[15 106]
[17 104]
[18 103]
[19 102]
[20 38]
[21 37]
[22 36]
[24 34]
[25 33]
[44 99]
[45 98]
[46 97]
[47 96]
[48 95]
[50 91]
[51 90]
[52 89]
[53 88]
[54 87]
[55 86]
[59 81]
[60 80]
[61 79]
[62 78]
[63 77]
[65 74]
[66 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
