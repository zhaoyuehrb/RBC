%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUUCCCCUCUCUACAACCCUCUCUCCUCAGCGCUUCUUCUUUCUUGGUUUGGUGCUUCUGAGAUGUGGGCUUGCACACGCUGUUGCUAUAGUACGUGUUGAUCCUGACUGCUGUC\
) } def
/len { sequence length } bind def

/coor [
[95.11877441 146.96496582]
[87.15487671 159.67623901]
[75.57688141 169.21301270]
[61.57547379 174.59451294]
[46.59057236 175.26731873]
[32.16322708 171.16223145]
[19.77716064 162.70141602]
[10.70616150 150.75500488]
[5.88309765 136.55154419]
[5.80397558 121.55175781]
[10.47693253 107.29821777]
[19.42139816 95.25676727]
[31.71751785 86.66575623]
[46.10075378 82.40869141]
[61.09191895 82.92337799]
[75.14932251 88.15687561]
[86.82684326 97.57049561]
[77.32051086 85.96749115]
[67.81418610 74.36448669]
[58.15552902 62.88797379]
[48.34622574 51.53995132]
[38.53692627 40.19192886]
[21.12771988 39.28112411]
[9.93563557 26.35663795]
[11.46161842 9.66539669]
[1.35618412 -1.41973734]
[-8.74925041 -12.50487137]
[-18.85468483 -23.59000397]
[-34.17882156 -22.01614380]
[-47.33753204 -29.67784500]
[-53.39000320 -43.45578384]
[-50.20698929 -57.98184586]
[-60.31242371 -69.06697845]
[-70.41786194 -80.15211487]
[-80.52329254 -91.23724365]
[-90.62873077 -102.32238007]
[-100.73416138 -113.40751648]
[-116.05829620 -111.83364868]
[-129.21701050 -119.49535370]
[-135.26948547 -133.27330017]
[-132.08647156 -147.79934692]
[-142.19190979 -158.88449097]
[-157.98892212 -159.36392212]
[-168.75907898 -170.93022156]
[-168.11265564 -186.72128296]
[-156.43315125 -197.36856079]
[-140.64979553 -196.55522156]
[-130.12660217 -184.76379395]
[-131.10676575 -168.98992920]
[-121.00133514 -157.90478516]
[-106.24354553 -159.73393250]
[-93.08283234 -152.43600464]
[-86.66794586 -138.62649536]
[-89.64903259 -123.51294708]
[-79.54359436 -112.42781830]
[-69.43816376 -101.34268188]
[-59.33272552 -90.25754547]
[-49.22729111 -79.17241669]
[-39.12185669 -68.08728027]
[-24.36407089 -69.91641998]
[-11.20335579 -62.61849976]
[-4.78847027 -48.80898666]
[-7.76955128 -33.69543839]
[2.33588314 -22.61030579]
[12.44131756 -11.52517223]
[22.54675293 -0.44003823]
[35.44904709 -1.64117384]
[46.83749390 4.94034863]
[52.40148544 17.07429695]
[49.88494873 30.38262749]
[59.69425201 41.73065186]
[69.50354767 53.07867432]
[76.34400177 56.11939621]
[79.41719055 64.85815430]
[88.92351532 76.46115875]
[98.42984772 88.06416321]
[109.21892548 75.88816833]
[130.03311157 74.20568085]
[145.03179932 74.40367126]
[160.03048706 74.60166931]
[175.02919006 74.79965973]
[190.02787781 74.99765778]
[205.02656555 74.79965973]
[220.01481628 74.20581818]
[235.00305176 73.61197662]
[249.99128723 73.01812744]
[263.56118774 63.80998230]
[278.20068359 71.20033264]
[278.84991455 87.58662415]
[264.84100342 96.11204529]
[250.58512878 88.00637054]
[235.59689331 88.60021210]
[220.60865784 89.19406128]
[205.62040710 89.78790283]
[201.70596313 92.72035980]
[195.87844849 93.13858795]
[189.82987976 89.99634552]
[174.83119202 89.79835510]
[159.83250427 89.60035706]
[144.83380127 89.40236664]
[129.83511353 89.20437622]
[125.31535339 95.18949890]
[138.38302612 102.55401611]
[151.90452576 109.04776764]
[151.05229187 124.02353668]
[136.88137817 128.94137573]
[126.93534851 117.71318054]
[116.27583313 107.15975952]
[111.75607300 113.14488983]
[116.05109406 127.51683044]
[120.34611511 141.88877869]
[132.63394165 152.74887085]
[129.10800171 168.76448059]
[113.39549255 173.46012878]
[101.66009521 162.00532532]
[105.97417450 146.18380737]
[101.67915344 131.81185913]
[97.38412476 117.43991089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 76]
[18 75]
[19 74]
[20 72]
[21 71]
[22 70]
[25 66]
[26 65]
[27 64]
[28 63]
[32 59]
[33 58]
[34 57]
[35 56]
[36 55]
[37 54]
[41 50]
[42 49]
[78 101]
[79 100]
[80 99]
[81 98]
[82 97]
[83 94]
[84 93]
[85 92]
[86 91]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
