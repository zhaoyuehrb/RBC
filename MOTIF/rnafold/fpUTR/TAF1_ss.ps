%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:03:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUCCGGUAGAGGCUGGUAGGGUAAGGGAGCUCAGUAAGUCACUUCUGGGCGACUGUUGUUUUAUUUCCGGUCU\
) } def
/len { sequence length } bind def

/coor [
[28.70939827 333.57757568]
[26.08009911 348.57778931]
[17.57159042 361.20812988]
[4.65802145 369.28027344]
[-10.42325401 371.39569092]
[-25.05931282 367.18789673]
[-36.71437073 357.38586426]
[-43.36911774 343.68789673]
[-43.87057877 328.46725464]
[-38.13187027 314.36096191]
[-27.14726257 303.81307983]
[-12.81990337 298.65103149]
[2.36790657 299.76919556]
[9.42198563 286.53137207]
[16.47606468 273.29354858]
[23.53014183 260.05572510]
[30.58422089 246.81791687]
[37.63829803 233.58009338]
[44.69237900 220.34226990]
[50.92360306 206.69778442]
[56.30864334 192.69773865]
[61.69368362 178.69769287]
[67.07872772 164.69764709]
[72.46376801 150.69760132]
[77.84880829 136.69754028]
[83.23384857 122.69750214]
[88.61888885 108.69744873]
[86.63093567 94.85766602]
[97.38106537 85.91751099]
[102.76610565 71.91745758]
[99.38208771 53.95196915]
[113.15649414 43.27718353]
[117.96601105 29.06913757]
[122.77552795 14.86109352]
[127.58504486 0.65304816]
[132.39456177 -13.55499744]
[137.20408630 -27.76304245]
[137.01521301 -37.18661499]
[142.51042175 -42.44554901]
[147.89546204 -56.44559479]
[153.28050232 -70.44564056]
[153.32351685 -87.39953613]
[169.62675476 -92.05149841]
[178.61010742 -77.67319489]
[167.28054810 -65.06060028]
[161.89550781 -51.06055450]
[156.51046753 -37.06050873]
[151.41212463 -22.95352554]
[146.60261536 -8.74548054]
[141.79309082 5.46256495]
[136.98358154 19.67061043]
[132.17405701 33.87865448]
[127.36454010 48.08670044]
[132.46925354 59.24795914]
[128.35987854 71.24133301]
[116.76615143 77.30249786]
[111.38111115 91.30255127]
[113.36906433 105.14233398]
[102.61893463 114.08248901]
[97.23389435 128.08253479]
[91.84885406 142.08258057]
[86.46381378 156.08264160]
[81.07877350 170.08268738]
[75.69373322 184.08273315]
[70.30869293 198.08277893]
[64.92365265 212.08282471]
[65.86354065 217.81095886]
[64.45677185 222.73504639]
[61.48051834 226.04371643]
[57.93020248 227.39634705]
[50.87612152 240.63417053]
[43.82204437 253.87199402]
[36.76796722 267.10980225]
[29.71388817 280.34762573]
[22.65980911 293.58544922]
[15.60573006 306.82327271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[29 57]
[30 56]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[37 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
