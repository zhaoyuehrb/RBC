%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:46 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (G6PC)
} def

/sequence { (\
AUAGCAGAGCAAUCACCACCAAGCCUGGAAUAACUGCAAGGGCUCUGCUGACAUCUUCCUGAGGUGCCAAGGAAAUGAGG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 54 0.015150668 ubox
1 76 0.006667873 ubox
2 50 0.812295705 ubox
2 53 0.013372974 ubox
2 75 0.006410696 ubox
3 49 0.980390143 ubox
4 48 0.999813778 ubox
5 47 0.999981820 ubox
6 46 0.999748198 ubox
7 45 0.999973833 ubox
8 44 0.999686669 ubox
9 37 0.018393143 ubox
9 43 0.999382007 ubox
10 36 0.020741929 ubox
10 42 0.998203303 ubox
11 35 0.026540146 ubox
12 31 0.038736730 ubox
13 28 0.022500972 ubox
13 29 0.026167128 ubox
13 30 0.039765502 ubox
13 41 0.097638935 ubox
13 42 0.006797767 ubox
14 27 0.028419042 ubox
14 28 0.023039089 ubox
14 36 0.323399635 ubox
14 40 0.115512085 ubox
14 41 0.044844034 ubox
15 26 0.026117180 ubox
15 35 0.314801385 ubox
16 28 0.331151436 ubox
16 41 0.229291642 ubox
16 42 0.015886794 ubox
17 27 0.332158479 ubox
17 36 0.367508991 ubox
17 40 0.228904035 ubox
17 41 0.022688605 ubox
18 26 0.310706368 ubox
18 35 0.364955837 ubox
19 28 0.698414687 ubox
19 41 0.437921168 ubox
19 42 0.013983002 ubox
20 27 0.700045326 ubox
20 36 0.055867411 ubox
20 40 0.437985764 ubox
20 41 0.020351922 ubox
21 26 0.630690868 ubox
21 35 0.048568551 ubox
22 35 0.136256725 ubox
22 44 0.017381665 ubox
23 34 0.138674991 ubox
23 37 0.445805828 ubox
23 43 0.027846526 ubox
24 36 0.444670566 ubox
24 41 0.383618751 ubox
24 42 0.029935427 ubox
25 40 0.383918663 ubox
25 41 0.032174457 ubox
26 32 0.069498285 ubox
26 36 0.033351669 ubox
26 38 0.167968101 ubox
26 39 0.344287690 ubox
26 40 0.030491747 ubox
27 31 0.059433003 ubox
27 35 0.315656846 ubox
27 37 0.236042078 ubox
28 34 0.338267992 ubox
34 40 0.182970083 ubox
34 41 0.446494491 ubox
34 42 0.015907163 ubox
35 39 0.165638057 ubox
35 40 0.436081665 ubox
35 41 0.038588600 ubox
36 43 0.008053892 ubox
37 42 0.009009773 ubox
48 71 0.004700816 ubox
48 79 0.005536095 ubox
48 80 0.010239086 ubox
49 69 0.074317675 ubox
49 70 0.006145442 ubox
49 78 0.008321776 ubox
49 79 0.035820323 ubox
50 68 0.123887791 ubox
51 65 0.016035538 ubox
52 64 0.016294335 ubox
52 66 0.239121355 ubox
52 77 0.838535479 ubox
53 65 0.239973469 ubox
53 76 0.840678949 ubox
54 62 0.016391961 ubox
54 64 0.239844688 ubox
54 72 0.003332722 ubox
54 73 0.012681170 ubox
54 75 0.821242976 ubox
54 78 0.188142550 ubox
54 80 0.060654844 ubox
55 61 0.017427512 ubox
55 63 0.240013851 ubox
55 64 0.006593764 ubox
55 71 0.005121503 ubox
55 72 0.013685375 ubox
55 77 0.200360495 ubox
55 79 0.093591457 ubox
55 80 0.016228435 ubox
56 62 0.238253177 ubox
56 63 0.006535392 ubox
56 70 0.005120085 ubox
56 71 0.013544664 ubox
56 73 0.072200504 ubox
56 74 0.912466400 ubox
56 75 0.046301623 ubox
56 78 0.084079375 ubox
56 79 0.014929498 ubox
57 61 0.214698179 ubox
57 62 0.007392195 ubox
57 69 0.004528754 ubox
57 70 0.011698104 ubox
57 72 0.060046344 ubox
57 73 0.962593915 ubox
57 74 0.036354708 ubox
57 77 0.043920861 ubox
57 78 0.007402624 ubox
58 64 0.006667003 ubox
58 71 0.059885211 ubox
58 72 0.968427512 ubox
58 77 0.005828009 ubox
58 80 0.008850080 ubox
59 63 0.006643385 ubox
59 71 0.968386520 ubox
59 72 0.004037439 ubox
59 79 0.009052222 ubox
60 66 0.003808590 ubox
60 69 0.431382875 ubox
60 70 0.864383632 ubox
60 71 0.004077609 ubox
60 78 0.008951014 ubox
61 65 0.008279652 ubox
61 68 0.607725552 ubox
67 80 0.056123131 ubox
68 77 0.061248975 ubox
68 79 0.057118162 ubox
69 76 0.056258619 ubox
2 50 0.9500000 lbox
3 49 0.9500000 lbox
4 48 0.9500000 lbox
5 47 0.9500000 lbox
6 46 0.9500000 lbox
7 45 0.9500000 lbox
8 44 0.9500000 lbox
9 43 0.9500000 lbox
10 42 0.9500000 lbox
19 28 0.9500000 lbox
20 27 0.9500000 lbox
21 26 0.9500000 lbox
34 41 0.9500000 lbox
35 40 0.9500000 lbox
52 77 0.9500000 lbox
53 76 0.9500000 lbox
54 75 0.9500000 lbox
56 74 0.9500000 lbox
57 73 0.9500000 lbox
58 72 0.9500000 lbox
59 71 0.9500000 lbox
60 70 0.9500000 lbox
showpage
end
%%EOF
