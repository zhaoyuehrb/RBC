%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:01:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAGGGAGAAAGAAAGCGUGCGACAGGGAGUGGGAGCCCCAAGUCAAGAGGAGCCCCACAGAGGCAGCCCUGGACUUCGGGACCACAGAGGUGCUGAGUGCUGCCCGAUUCUGGAUCCCACUCUGCUUAGCUCAGAACUUUGUCAGCGAGCAAGAACA\
) } def
/len { sequence length } bind def

/coor [
[92.49933624 419.81359863]
[80.23000336 428.56347656]
[66.27331543 434.24743652]
[51.38191986 436.55895996]
[36.35889816 435.37338257]
[22.01442719 430.75460815]
[9.12208176 422.95178223]
[-1.62286949 412.38568115]
[-9.64096451 399.62609863]
[-14.49979782 385.36114502]
[-15.93733788 370.36013794]
[-13.87606144 355.43206787]
[-8.42712879 341.38195801]
[0.11560458 328.96749878]
[11.29144096 318.85821533]
[24.49768066 311.59930420]
[39.02212906 307.58218384]
[54.08149719 307.02352905]
[56.98990631 292.30819702]
[51.86718369 278.32223511]
[62.13342285 266.28417969]
[65.04183197 251.56884766]
[67.95024109 236.85351562]
[70.71495056 222.11050415]
[73.33568573 207.34121704]
[75.95642090 192.57192993]
[78.57715607 177.80264282]
[81.19788361 163.03337097]
[83.81861877 148.26408386]
[86.43935394 133.49479675]
[69.68761444 119.67108154]
[63.88618088 98.74121094]
[49.33017349 95.11869812]
[34.77416611 91.49617767]
[20.21815681 87.87366486]
[5.66214895 84.25114441]
[-3.47325039 85.21559906]
[-9.14114761 80.41333008]
[-23.62370300 76.50749207]
[-38.96253204 80.38446808]
[-49.23604965 69.60002899]
[-63.71860504 65.69419098]
[-75.08166504 76.12895966]
[-90.28622437 78.74139404]
[-104.48056793 72.69787598]
[-113.13533783 59.92686844]
[-113.48881531 44.50355530]
[-105.42821503 31.34945869]
[-91.52564240 24.66200256]
[-76.21736145 26.57512856]
[-64.38818359 36.47837067]
[-59.81276321 51.21163177]
[-45.33020782 55.11747360]
[-31.02726936 50.96112823]
[-19.71786308 62.02493668]
[-5.23530722 65.93077850]
[9.28466606 69.69513702]
[23.84067345 73.31764984]
[38.39668274 76.94017029]
[52.95269012 80.56269073]
[67.50869751 84.18520355]
[72.72550964 72.96297455]
[81.88034821 63.58604431]
[94.27645111 57.44142532]
[108.73181915 55.64085770]
[111.92679596 40.98507309]
[115.12177277 26.32928467]
[118.31675720 11.67349625]
[121.51173401 -2.98229122]
[124.70671082 -17.63807869]
[110.75691223 -12.12418652]
[97.64990234 -19.41844940]
[94.98345947 -34.17955017]
[104.71012115 -45.59848404]
[119.70741272 -45.31358719]
[128.99346924 -33.53306580]
[133.60089111 -47.80792999]
[138.20829773 -62.08279419]
[137.86950684 -71.26271057]
[143.04736328 -76.58968353]
[147.93243408 -90.77192688]
[152.81748962 -104.95417786]
[149.99630737 -120.52182007]
[161.45669556 -130.03543091]
[166.34176636 -144.21768188]
[171.22682190 -158.39993286]
[165.51628113 -173.39224243]
[173.80101013 -187.13061523]
[189.72566223 -189.07614136]
[201.07420349 -177.73638916]
[199.14102173 -161.81024170]
[185.40907288 -153.51487732]
[180.52400208 -139.33262634]
[175.63894653 -125.15037537]
[178.80953979 -110.59713745]
[166.99974060 -100.06911469]
[162.11468506 -85.88687134]
[157.22961426 -71.70462036]
[152.48315430 -57.47538757]
[147.87574768 -43.20051956]
[143.26834106 -28.92565536]
[139.36250305 -14.44309998]
[136.16752625 0.21268786]
[132.97254944 14.86847496]
[129.77755737 29.52426338]
[126.58258057 44.18004990]
[123.38760376 58.83583832]
[128.39883423 64.41594696]
[133.05274963 50.15617752]
[147.72904968 47.05680084]
[157.75125122 58.21723938]
[153.09703064 72.47691345]
[138.42127991 75.57616425]
[143.43251038 81.15628052]
[158.34620667 79.54954529]
[173.25990295 77.94281006]
[188.36024475 70.23464203]
[199.94737244 82.61102295]
[191.26229858 97.17144012]
[174.86663818 92.85650635]
[159.95294189 94.46324158]
[145.03923035 96.06997681]
[140.61817932 102.11219025]
[135.47898865 106.85812378]
[149.29479980 112.69962311]
[163.11062622 118.54113007]
[176.92643738 124.38262939]
[190.76631165 117.10307312]
[206.03642273 120.47319794]
[215.52668762 132.90174866]
[214.75610352 148.52032471]
[204.08851624 159.95433044]
[188.56082153 161.80497742]
[175.50474548 153.19842529]
[171.08494568 138.19845581]
[157.26911926 132.35694885]
[143.45330811 126.51544189]
[129.63748169 120.67394257]
[117.24765015 131.75390625]
[101.20864105 136.11553955]
[98.58790588 150.88481140]
[95.96717072 165.65409851]
[93.34643555 180.42338562]
[90.72570038 195.19267273]
[88.10496521 209.96194458]
[85.48423004 224.73123169]
[87.06986237 233.77952576]
[82.66558075 239.76191711]
[79.75717163 254.47726440]
[76.84876251 269.19259644]
[81.76345062 284.23107910]
[71.70524597 295.21661377]
[68.79683685 309.93194580]
[82.51136780 316.17761230]
[94.41549683 325.41821289]
[103.86726379 337.15536499]
[110.35692596 350.75613403]
[113.53452301 365.48703003]
[113.22868347 380.55364990]
[109.45589447 395.14349365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 153]
[19 152]
[21 150]
[22 149]
[23 148]
[24 146]
[25 145]
[26 144]
[27 143]
[28 142]
[29 141]
[30 140]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[38 56]
[39 55]
[41 53]
[42 52]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[70 102]
[76 101]
[77 100]
[78 99]
[80 98]
[81 97]
[82 96]
[84 94]
[85 93]
[86 92]
[114 122]
[115 121]
[116 120]
[124 138]
[125 137]
[126 136]
[127 135]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
