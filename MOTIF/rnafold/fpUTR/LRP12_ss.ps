%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCGCAGGGAGCAGCCGGUGGCUCGGCGGCGGCGGCGGCGGCGGCGGCGGCGUCGGCGUCGUCUACCUCCAGCUUCUCCUCCCUCCUCCUCCGUCUCCUCCUCUCUCUCUCCAUCUGCUGUGGUU\
) } def
/len { sequence length } bind def

/coor [
[285.58932495 295.69628906]
[292.94985962 271.77072144]
[281.35470581 262.25482178]
[269.75955200 252.73890686]
[259.59194946 254.65740967]
[249.86602783 250.52378845]
[243.94831848 241.50273132]
[244.03355408 230.49334717]
[232.91928101 220.41995239]
[221.80502319 210.34657288]
[210.69075012 200.27319336]
[199.57649231 190.19979858]
[188.46221924 180.12641907]
[168.02122498 177.73167419]
[161.39476013 157.42651367]
[149.56954956 148.19804382]
[137.74435425 138.96957397]
[122.95063019 137.23902893]
[116.83154297 122.64904785]
[105.00634766 113.42057800]
[91.18745422 111.29222870]
[85.76517487 98.40461731]
[73.93997955 89.17614746]
[55.33268738 92.26555634]
[40.56093979 81.05250549]
[38.60201263 62.92901611]
[26.33824158 54.29189301]
[14.07446957 45.65476990]
[1.81069756 37.01764679]
[-10.45307446 28.38052368]
[-26.19108772 26.76016998]
[-32.14151001 13.10580349]
[-44.40528107 4.46868086]
[-56.66905594 -4.16844177]
[-68.93282318 -12.80556488]
[-81.19660187 -21.44268799]
[-96.93460846 -23.06303978]
[-102.88503265 -36.71740723]
[-115.14880371 -45.35453033]
[-130.88682556 -46.97488403]
[-136.83724976 -60.62924957]
[-149.10101318 -69.26637268]
[-165.47354126 -70.20050049]
[-172.60815430 -84.96631622]
[-163.16539001 -98.37400818]
[-146.85914612 -96.63089752]
[-140.46389771 -81.53014374]
[-128.20011902 -72.89302063]
[-113.33929443 -71.89045715]
[-106.51168060 -57.61830139]
[-94.24790955 -48.98117828]
[-79.38708496 -47.97861099]
[-72.55947876 -33.70645905]
[-60.29570389 -25.06933784]
[-48.03193283 -16.43221474]
[-35.76815796 -7.79509115]
[-23.50438690 0.84203166]
[-8.64356232 1.84459984]
[-1.81595182 16.11675072]
[10.44782066 24.75387383]
[22.71159172 33.39099884]
[34.97536469 42.02811813]
[47.23913574 50.66524124]
[57.91024780 46.29360962]
[69.48007965 47.67839813]
[79.01332092 54.58634186]
[84.03409576 65.36813354]
[83.16845703 77.35095215]
[94.99365234 86.57942200]
[108.81254578 88.70777130]
[114.23482513 101.59538269]
[126.06002045 110.82385254]
[141.69956970 113.21448517]
[146.97283936 127.14437866]
[158.79803467 136.37284851]
[170.62322998 145.60131836]
[179.92697144 143.16728210]
[189.15765381 145.31939697]
[196.21598816 151.43557739]
[199.55885315 160.00779724]
[198.53559875 169.01214600]
[209.64987183 179.08554077]
[220.76412964 189.15892029]
[231.87840271 199.23229980]
[242.99267578 209.30569458]
[254.10693359 219.37907410]
[273.93142700 222.62530518]
[279.27545166 241.14375305]
[290.87060547 250.65965271]
[302.46575928 260.17556763]
[308.37207031 255.54049683]
[314.87670898 251.79785156]
[321.84591675 249.02346802]
[329.13659668 247.27328491]
[336.59915161 246.58226013]
[344.08053589 246.96359253]
[351.42755127 248.40849304]
[358.48983765 250.88642883]
[365.12301636 254.34573364]
[371.19165039 258.71466064]
[376.57192993 263.90295410]
[381.15429688 269.80358887]
[384.84561157 276.29507446]
[387.57107544 283.24398804]
[389.27575684 290.50756836]
[389.92562866 297.93673706]
[389.50836182 305.37927246]
[388.03344727 312.68270874]
[385.53204346 319.69757080]
[382.05630493 326.28045654]
[377.67831421 332.29699707]
[372.48849487 337.62442017]
[366.59390259 342.15426636]
[373.00723267 355.71408081]
[379.42056274 369.27392578]
[385.83386230 382.83377075]
[400.39392090 389.57058716]
[404.06478882 405.18801880]
[394.03051758 417.70571899]
[377.98852539 417.52117920]
[368.24487305 404.77593994]
[372.27404785 389.24710083]
[365.86071777 375.68725586]
[359.44738770 362.12741089]
[353.03405762 348.56756592]
[328.25228882 350.05413818]
[305.56085205 339.85598755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 90]
[3 89]
[4 88]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[15 76]
[16 75]
[17 74]
[19 72]
[20 71]
[22 69]
[23 68]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[33 56]
[34 55]
[35 54]
[36 53]
[38 51]
[39 50]
[41 48]
[42 47]
[113 125]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
