%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUCAGGGGACAUUCAGAGGCAUCAGCCCCUUCCUCCUCACCAGCUCCCAGAGUUCCCAUCUCCAUCCCCAAUCCUAAAGAAGGAAAUCG\
) } def
/len { sequence length } bind def

/coor [
[136.88954163 269.60699463]
[132.92065430 263.88836670]
[130.20317078 257.46737671]
[128.85670471 250.61460876]
[128.94296265 243.61993408]
[130.46298218 236.78015137]
[133.35684204 230.38648987]
[137.50601196 224.71214294]
[142.73823547 220.00062561]
[136.88240051 206.19087219]
[131.02656555 192.38111877]
[125.17072296 178.57138062]
[119.31488037 164.76162720]
[97.62522888 167.53883362]
[76.18419647 163.24508667]
[57.23655701 152.32992554]
[42.76601028 135.93611145]
[34.28755188 115.77997589]
[32.68883133 93.97176361]
[17.98940468 90.98397064]
[2.92460203 95.81742859]
[-8.00647545 85.70008087]
[-22.70590019 82.71228790]
[-37.40532684 79.72449493]
[-52.77580643 85.44116974]
[-65.23764038 74.78121185]
[-61.97116089 58.71067429]
[-46.33664322 53.76155090]
[-34.41753769 65.02507019]
[-19.71811104 68.01286316]
[-5.01868534 71.00064850]
[8.99471569 65.95349121]
[20.97719383 76.28454590]
[35.67662048 79.27233887]
[38.72005463 71.50611115]
[42.69704056 64.17397308]
[47.54699326 57.38761139]
[53.19602966 51.25041962]
[59.55808640 45.85588837]
[66.53623962 41.28620148]
[74.02419281 37.61097336]
[81.90786743 34.88619232]
[90.06716156 33.15336990]
[98.37776947 32.43890381]
[106.71309662 32.75368118]
[114.94615173 34.09289932]
[119.86652374 19.92286301]
[124.78689575 5.75282717]
[129.70727539 -8.41720867]
[134.62763977 -22.58724594]
[134.11148071 -39.53333282]
[150.25242615 -44.72046661]
[159.70509338 -30.64626122]
[148.79768372 -17.66687202]
[143.87730408 -3.49683619]
[138.95693970 10.67319965]
[134.03656006 24.84323692]
[129.11618042 39.01327133]
[140.57298279 45.95404053]
[150.43576050 55.01815033]
[158.31703186 65.84949493]
[163.90715027 78.02254486]
[166.98651123 91.05903625]
[167.43411255 104.44679260]
[165.23237610 117.65985107]
[160.46780396 130.17909241]
[153.32759094 141.51266479]
[144.09225464 151.21528625]
[133.12463379 158.90579224]
[138.98046875 172.71553040]
[144.83630371 186.52528381]
[150.69215393 200.33503723]
[156.54798889 214.14477539]
[181.39140320 219.49826050]
[195.50276184 240.38490295]
[191.26808167 265.02355957]
[202.05043030 275.45144653]
[212.83279419 285.87933350]
[223.61514282 296.30722046]
[239.61543274 297.47787476]
[248.55690002 310.79815674]
[243.58042908 326.04986572]
[228.50354004 331.53317261]
[214.89192200 323.04180908]
[213.18725586 307.08956909]
[202.40490723 296.66168213]
[191.62254333 286.23379517]
[180.84019470 275.80590820]
[174.73789978 278.98544312]
[168.10261536 280.85034180]
[161.21459961 281.31695557]
[154.36578369 280.36087036]
[147.84739685 278.01797485]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 73]
[10 72]
[11 71]
[12 70]
[13 69]
[19 34]
[20 33]
[22 31]
[23 30]
[24 29]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[76 88]
[77 87]
[78 86]
[79 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
