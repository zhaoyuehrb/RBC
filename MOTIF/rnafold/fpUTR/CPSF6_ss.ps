%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCGGAAGUGACGCAAGCGCCCCCCCACCGCCGCUAGAUCCGCUGCUGCUGCCGCGGCGGGCAGACCUGCAGGAGGCGGCGGCGGCGGCGGCGGCCGAGGCUGAAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[141.25619507 179.83544922]
[136.66133118 165.55653381]
[132.06648254 151.27761841]
[127.47161865 136.99871826]
[122.87675476 122.71980286]
[115.73730469 120.42237091]
[112.92399597 135.15618896]
[111.38253784 150.07678223]
[96.97387695 154.24696350]
[87.70153809 142.45613098]
[95.15102386 129.43696594]
[101.45838928 115.82751465]
[94.31893921 113.53008270]
[82.25897980 122.44957733]
[76.21601105 137.69473267]
[59.95462418 139.81591797]
[50.20314789 126.63105011]
[56.99306107 111.70359039]
[73.33948517 110.38962555]
[85.39943695 101.47012329]
[70.49375153 103.14955902]
[57.67893219 95.35337830]
[52.31777191 81.34416962]
[56.65383148 66.98455811]
[68.87253571 58.28379822]
[83.86056519 58.88302612]
[95.34566498 68.53147125]
[98.52136230 83.19267273]
[103.11621857 68.91376495]
[107.71108246 54.63485336]
[112.30593872 40.35594559]
[116.90080261 26.07703590]
[121.49565887 11.79812622]
[126.09052277 -2.48078346]
[111.93421173 2.47893381]
[98.30606079 -3.78793383]
[92.85693359 -17.76316261]
[98.64597321 -31.60104752]
[112.42320251 -37.53298950]
[126.45407867 -32.22879410]
[132.86169434 -18.66563606]
[139.80360413 -31.96262169]
[146.74551392 -45.25960541]
[153.68743896 -58.55659103]
[160.62934875 -71.85357666]
[167.57125854 -85.15056610]
[174.51318359 -98.44754791]
[181.45509338 -111.74452972]
[188.39700317 -125.04151917]
[195.33892822 -138.33850098]
[202.28083801 -151.63548279]
[209.22274780 -164.93247986]
[216.16467285 -178.22946167]
[208.43556213 -193.19558716]
[211.06997681 -209.66505432]
[222.84619141 -221.24172974]
[239.03108215 -223.54762268]
[245.59393311 -237.03572083]
[252.15678406 -250.52383423]
[258.71963501 -264.01193237]
[265.28247070 -277.50006104]
[263.58398438 -293.81100464]
[277.01748657 -303.21704102]
[291.76370239 -296.04202271]
[292.65301514 -279.66702271]
[278.77056885 -270.93719482]
[272.20773315 -257.44909668]
[265.64489746 -243.96098328]
[259.08203125 -230.47288513]
[252.51919556 -216.98477173]
[259.89462280 -205.75946045]
[260.72979736 -192.24502563]
[254.69647217 -180.00195312]
[243.29034424 -172.30949402]
[229.46165466 -171.28755188]
[222.51974487 -157.99055481]
[215.57781982 -144.69357300]
[208.63591003 -131.39659119]
[201.69400024 -118.09960175]
[194.75207520 -104.80261993]
[187.81016541 -91.50563049]
[180.86825562 -78.20864868]
[173.92633057 -64.91165924]
[166.98442078 -51.61467743]
[160.04251099 -38.31769180]
[153.10058594 -25.02070618]
[146.15867615 -11.72372150]
[140.36943054 2.11407685]
[135.77456665 16.39298630]
[131.17970276 30.67189598]
[126.58484650 44.95080566]
[121.98999023 59.22971344]
[117.39512634 73.50862122]
[112.80027008 87.78753662]
[137.15567017 118.12494659]
[141.75053406 132.40385437]
[146.34538269 146.68276978]
[150.94024658 160.96166992]
[155.53511047 175.24058533]
[170.66120911 177.28115845]
[183.39924622 185.68978882]
[191.22009277 198.79692078]
[192.57089233 214.00015259]
[187.18345642 228.28085327]
[176.12747192 238.80357361]
[161.59808350 243.47903442]
[146.48014832 241.37890625]
[133.77531433 232.92018127]
[126.00614929 219.78234863]
[124.71522522 204.57391357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 99]
[2 98]
[3 97]
[4 96]
[5 95]
[13 20]
[14 19]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[47 81]
[48 80]
[49 79]
[50 78]
[51 77]
[52 76]
[53 75]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
