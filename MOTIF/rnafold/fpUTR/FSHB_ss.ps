%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCUCUUGCCAGGCAAGGCAGCCGACCACAGGUGAGUCUUGGCAUCUACCGUUUUCAAGUGACCAGG\
) } def
/len { sequence length } bind def

/coor [
[116.70320892 116.48782349]
[106.18273926 121.63796234]
[94.97986603 120.94458008]
[85.99538422 115.06864166]
[72.48085022 121.57689667]
[65.84626007 128.33648682]
[58.21080780 128.05865479]
[44.41789246 133.95402527]
[30.62497520 139.84941101]
[16.83205795 145.74478149]
[3.03914118 151.64015198]
[-9.14901829 163.42510986]
[-23.84742928 154.97566223]
[-19.79711914 138.51263428]
[-2.85623431 137.84724426]
[10.93668270 131.95187378]
[24.72959900 126.05648804]
[38.52251434 120.16111755]
[52.31543350 114.26573944]
[65.97259521 108.06236267]
[79.48712921 101.55410767]
[83.68965149 83.80197906]
[101.74395752 74.65754700]
[96.47333527 60.61402512]
[82.36157227 54.01887512]
[77.21646881 39.70166397]
[83.59089661 26.28890038]
[78.32027435 12.24537754]
[73.04965210 -1.79814529]
[61.82338715 -14.50276184]
[70.92375946 -28.80728912]
[87.18849945 -24.02244759]
[87.09317780 -7.06876755]
[92.36380005 6.97475529]
[97.63442230 21.01827812]
[111.25959778 26.92506218]
[116.80481720 41.09210968]
[110.51685333 55.34339905]
[115.78747559 69.38692474]
[127.30214691 79.00006104]
[142.06109619 81.67841339]
[156.82003784 84.35676575]
[171.57897949 87.03511810]
[186.33792114 89.71347046]
[201.15324402 92.05998993]
[216.01750183 94.07348633]
[230.88174438 96.08699036]
[238.85140991 83.10991669]
[251.41397095 74.50168610]
[266.39291382 71.75371552]
[281.19302368 75.34210968]
[293.25009155 84.64516449]
[300.47518921 98.05106354]
[301.61648560 113.23715210]
[296.47625732 127.57235718]
[285.94506836 138.57299805]
[271.84756470 144.33317566]
[256.62615967 143.85488892]
[242.91807556 137.22099304]
[233.09832764 125.58087158]
[228.86824036 110.95123291]
[214.00399780 108.93773651]
[199.13975525 106.92423248]
[191.85336304 109.22336578]
[183.65957642 104.47241211]
[168.90061951 101.79405975]
[154.14167786 99.11570740]
[139.38273621 96.43735504]
[124.62379456 93.75900269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 21]
[5 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[23 39]
[24 38]
[27 35]
[28 34]
[29 33]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[45 63]
[46 62]
[47 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
