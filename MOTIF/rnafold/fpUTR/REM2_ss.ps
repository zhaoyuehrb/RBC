%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:02:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGAGGGAGAGGGUGCUGCGAGCUGCUGGGCUGCACACGCACACGCACACGCACACGCACACUG\
) } def
/len { sequence length } bind def

/coor [
[17.66827202 300.70858765]
[10.08512783 313.88296509]
[-1.96544981 323.14862061]
[-16.64583588 327.09255981]
[-31.71737671 325.11340332]
[-44.88177109 317.51290894]
[-54.13154984 305.45016479]
[-58.05618286 290.76461792]
[-56.05719376 275.69567871]
[-48.43941498 262.54129028]
[-36.36450195 253.30738831]
[-21.67379189 249.40208435]
[-6.60751057 251.42089844]
[0.89248949 238.43051147]
[8.39248943 225.44012451]
[15.89248943 212.44975281]
[16.52956200 204.81280518]
[24.07108498 199.03192139]
[32.18069839 186.41311646]
[40.29030991 173.79431152]
[48.39992142 161.17550659]
[43.90190125 148.88114929]
[47.46773529 136.08039856]
[57.98101044 127.63564301]
[71.64252472 126.89273834]
[80.34337616 114.67410278]
[89.04422760 102.45545959]
[97.45184326 90.03321838]
[105.56145477 77.41442108]
[106.51335907 61.62187576]
[119.90327454 55.09811401]
[128.01289368 42.47930908]
[135.20162964 29.31412506]
[141.43284607 15.66964436]
[147.66407776 2.02516484]
[145.56744385 -14.23940372]
[158.76702881 -23.97095490]
[173.68421936 -17.15850258]
[174.97349548 -0.81011468]
[161.30854797 8.25638962]
[155.07733154 21.90086937]
[148.84609985 35.54534912]
[149.98559570 39.24759674]
[149.14025879 43.72109222]
[145.95515442 47.89738846]
[140.63168335 50.58892059]
[132.52207947 63.20772552]
[132.15022278 78.09768677]
[118.18025970 85.52403259]
[110.07064819 98.14283752]
[108.62342072 106.39183807]
[101.26287079 111.15631104]
[92.56201172 123.37495422]
[83.86116028 135.59359741]
[87.14283752 152.59982300]
[77.44625092 166.54740906]
[61.01872635 169.28512573]
[52.90911102 181.90393066]
[44.79949951 194.52272034]
[36.68988800 207.14152527]
[28.88286972 219.94975281]
[21.38286972 232.94012451]
[13.88287067 245.93051147]
[6.38287067 258.92089844]
[15.66435146 270.95925903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 64]
[14 63]
[15 62]
[16 61]
[18 60]
[19 59]
[20 58]
[21 57]
[25 54]
[26 53]
[27 52]
[28 50]
[29 49]
[31 47]
[32 46]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
