%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAACCCAACUCACUAUCUCUGACACCGUGAGCUACUAGGGCAGCUACUGUGGAGGUCUGGGCUAUGGCUGUGGAGGCUUUGGUGGC\
) } def
/len { sequence length } bind def

/coor [
[-3.45364213 200.24681091]
[-3.98277569 215.23747253]
[-10.78457737 228.60667419]
[-22.59011841 237.86027527]
[-37.19698334 241.27195740]
[-51.88014221 238.20523071]
[-63.90034103 229.23222351]
[-71.01511383 216.02691650]
[-71.89714813 201.05287170]
[-66.38188934 187.10360718]
[-55.49758911 176.78108215]
[-70.49525452 177.04580688]
[-85.49291992 177.31053162]
[-100.49057770 177.57525635]
[-115.48824310 177.83998108]
[-121.39703369 191.87586975]
[-132.50833130 202.29023743]
[-146.89704895 207.27871704]
[-162.07022095 205.97705078]
[-175.39904785 198.61073303]
[-184.57418823 186.45603943]
[-188.00602722 171.61885071]
[-185.09996033 156.66978455]
[-176.35948181 144.19885254]
[-163.29893494 136.36674500]
[-148.18113708 134.53039551]
[-133.62535095 139.00796509]
[-122.15342712 149.02371216]
[-115.75296783 162.84231567]
[-100.75531006 162.57759094]
[-85.75764465 162.31286621]
[-70.75997925 162.04814148]
[-55.76231766 161.78341675]
[-41.15541458 158.37190247]
[-27.59204102 151.96604919]
[-14.02866554 145.56021118]
[-0.46529120 139.15435791]
[13.09808350 132.74851990]
[26.66145706 126.34266663]
[40.22483063 119.93682098]
[53.78820801 113.53097534]
[67.35158539 107.12512970]
[80.91495514 100.71927643]
[85.90252686 87.11521912]
[99.00431061 80.92737579]
[112.67919922 85.71734619]
[126.24256897 79.31150055]
[139.80595398 72.90565491]
[153.36932373 66.49980927]
[162.54351807 53.61009216]
[177.35609436 55.17108917]
[190.91947937 48.76524353]
[193.91372681 33.65430069]
[205.10087585 23.32468224]
[220.04856873 21.58375168]
[233.00010681 28.89098167]
[246.56347656 22.48513412]
[260.12686157 16.07928848]
[269.01721191 2.29910231]
[285.38079834 3.37842679]
[292.38415527 18.20694542]
[282.82284546 31.53034973]
[266.53268433 29.64266205]
[252.96932983 36.04850769]
[239.40594482 42.45435715]
[236.82199097 57.09884644]
[225.98199463 67.53717804]
[210.89773560 69.61528778]
[197.32531738 62.32861710]
[183.76194763 68.73446655]
[175.55789185 81.16598511]
[159.77516174 80.06317902]
[146.21179199 86.46902466]
[132.64842224 92.87487030]
[119.08504486 99.28072357]
[114.09747314 112.88478088]
[100.99568939 119.07262421]
[87.32080078 114.28265381]
[73.75743103 120.68849945]
[60.19405365 127.09434509]
[46.63068008 133.50019836]
[33.06730270 139.90603638]
[19.50392914 146.31188965]
[5.94055557 152.71772766]
[-7.62281895 159.12358093]
[-21.18619347 165.52943420]
[-34.74956894 171.93527222]
[-20.41960526 176.36834717]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[34 87]
[35 86]
[36 85]
[37 84]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[43 78]
[46 75]
[47 74]
[48 73]
[49 72]
[51 70]
[52 69]
[56 65]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
