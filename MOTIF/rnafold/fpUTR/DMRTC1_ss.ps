%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:29:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACGCCUCAGGGUCUUGCCUGCUGUGAGUGCCUUGAAGAGGGAGCAGCGGGCACGAUCAAAGAGACACCUGGCUCAAGGACCAAUAAGGAGU\
) } def
/len { sequence length } bind def

/coor [
[116.06438446 196.77967834]
[103.03826904 204.21743774]
[88.03897095 204.36257935]
[74.87136841 197.17826843]
[66.87568665 184.48696899]
[66.08020020 169.50808716]
[72.68669891 156.04130554]
[85.01930237 147.50274658]
[99.94960022 146.05841064]
[113.69097137 152.07524109]
[107.89347839 138.24090576]
[102.09599304 124.40655518]
[96.29850769 110.57221222]
[90.27307129 96.83560944]
[84.02134705 83.20050812]
[77.76962280 69.56541443]
[71.51789093 55.93031693]
[63.31366730 43.37281799]
[53.33829880 32.17049789]
[43.36293030 20.96817398]
[33.38756180 9.76585197]
[23.41219521 -1.43647027]
[13.43682575 -12.63879204]
[3.46145725 -23.84111404]
[-6.51391125 -35.04343796]
[-16.48928070 -46.24575806]
[-26.46464920 -57.44808197]
[-37.27569580 -55.33987045]
[-47.88063812 -57.99726486]
[-56.29314804 -64.85095215]
[-60.96799850 -74.55245209]
[-61.08468246 -85.23905182]
[-56.69058609 -94.89129639]
[-65.50736237 -107.02655029]
[-74.32414246 -119.16180420]
[-83.14092255 -131.29705811]
[-97.34252167 -140.55723572]
[-92.37563324 -156.76730347]
[-75.42408752 -156.48191833]
[-71.00566864 -140.11383057]
[-62.18888855 -127.97858429]
[-53.37210846 -115.84333038]
[-44.55533218 -103.70807648]
[-25.30015373 -102.31385040]
[-12.84658813 -87.17563629]
[-15.26232624 -67.42344666]
[-5.28695774 -56.22112656]
[4.68841076 -45.01880646]
[14.66377926 -33.81648254]
[24.63914871 -22.61416054]
[34.61451721 -11.41183853]
[44.58988571 -0.20951664]
[54.56525421 10.99280548]
[64.54061890 22.19512749]
[74.51599121 33.39744949]
[75.45462036 18.42684555]
[84.14854431 6.20327234]
[97.98220825 0.40415746]
[112.79379272 2.77414942]
[124.12728119 12.60024261]
[128.57301331 26.92628288]
[124.79351044 41.44232178]
[113.92581940 51.78124619]
[99.23946381 54.83261871]
[85.15299225 49.67858887]
[91.40471649 63.31368637]
[97.65644836 76.94878387]
[103.90817261 90.58388519]
[109.97996521 96.14618683]
[110.13285065 104.77471924]
[115.93034363 118.60906982]
[121.72782898 132.44342041]
[127.52531433 146.27775574]
[135.52079773 158.96919250]
[145.49615479 170.17150879]
[155.47152710 181.37384033]
[165.44689941 192.57615662]
[179.94329834 187.90986633]
[195.08367920 189.54968262]
[208.24485779 197.21148682]
[217.14659119 209.56781006]
[220.24661255 224.47787476]
[217.00779724 239.35839844]
[207.99131775 251.63124084]
[194.75930786 259.17007446]
[179.60432434 260.66873169]
[165.15202332 255.86758423]
[153.90637207 245.59844971]
[147.81576538 231.64050293]
[147.93539429 216.41204834]
[154.24456787 202.55152893]
[144.26921082 191.34919739]
[134.29383850 180.14688110]
[124.31846619 168.94456482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 73]
[11 72]
[12 71]
[13 70]
[14 68]
[15 67]
[16 66]
[17 65]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[33 43]
[34 42]
[35 41]
[36 40]
[74 94]
[75 93]
[76 92]
[77 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
