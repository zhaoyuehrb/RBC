%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACUCUGUGGAUGAACCUUGAAGGAGCCUCCAAGCCUGAACCAAAGCACUACAGAUCACCUGCUAUCUUCAUAGCACC\
) } def
/len { sequence length } bind def

/coor [
[163.45266724 236.29685974]
[154.66319275 227.06179810]
[149.21537781 215.50765991]
[147.67680359 202.80149841]
[150.21931458 190.23220825]
[156.60000610 179.07974243]
[146.95819092 167.58906555]
[137.31637573 156.09840393]
[127.67456055 144.60774231]
[118.03274536 133.11706543]
[108.39093018 121.62640381]
[98.74911499 110.13574219]
[91.37380219 106.35137177]
[88.96671295 98.00746155]
[79.77770233 86.15156555]
[65.71007538 91.62713623]
[50.68468857 92.91555023]
[35.91996384 89.92089081]
[22.61077118 82.89424896]
[11.83173275 72.41263580]
[4.45044899 59.33162308]
[1.05767262 44.71554565]
[1.92003655 29.75084877]
[6.95911884 15.64982224]
[15.75849152 3.55236936]
[6.56948280 -8.30352020]
[-1.37316382 -13.33600044]
[-2.73528695 -20.80199623]
[-11.45766830 -33.00527573]
[-27.08689880 -35.35105896]
[-36.41239166 -48.11079025]
[-33.90149689 -63.71434784]
[-21.04388618 -72.90441132]
[-5.46774912 -70.22869110]
[3.58586717 -57.27463531]
[0.74561304 -41.72765732]
[9.46799374 -29.52437592]
[18.42537308 -17.49252892]
[27.61438179 -5.63663864]
[41.52435684 -11.14025974]
[56.43660736 -12.50268078]
[71.14337921 -9.60497379]
[84.45114136 -2.67359185]
[95.27746582 7.73731089]
[102.73902130 20.79016876]
[106.22369385 35.43138885]
[105.44075775 50.47639084]
[100.44512177 64.70544434]
[91.63359070 76.96256256]
[100.82260132 88.81845093]
[110.23978424 100.49392700]
[119.88159943 111.98458862]
[129.52340698 123.47525787]
[139.16522217 134.96592712]
[148.80703735 146.45658875]
[158.44885254 157.94726562]
[168.09066772 169.43792725]
[185.02340698 164.49475098]
[202.39445496 167.25022888]
[216.88151550 177.13296509]
[225.73287964 192.21278381]
[227.28999329 209.57743835]
[221.29806519 225.89511108]
[232.20866394 236.18873596]
[243.11927795 246.48236084]
[254.02987671 256.77600098]
[264.94049072 267.06961060]
[275.85107422 277.36325073]
[291.92428589 280.61657715]
[296.88619995 296.24707031]
[285.63241577 308.17535400]
[269.73986816 304.13067627]
[265.55746460 288.27383423]
[254.64685059 277.98022461]
[243.73625183 267.68658447]
[232.82565308 257.39297485]
[221.91503906 247.09934998]
[211.00444031 236.80572510]
[199.72785950 242.53727722]
[187.19599915 244.43324280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[11 52]
[12 51]
[14 50]
[15 49]
[25 39]
[26 38]
[28 37]
[29 36]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[68 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
