%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGUGGGGCGGGGGUGGGGCGGGACUGAGGGCGGAGUGUGAGCGGGCUCGGUUUUGGGCCGCGGCGGGAGCGGGAGUCGCCGCCACUCGAGUGCGCAGGCGCCUGGCGAUUACCGGUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[100.68043518 629.71691895]
[86.62876892 621.97546387]
[84.06233215 606.13903809]
[94.94989014 594.35595703]
[95.70355225 579.37487793]
[96.45721436 564.39385986]
[97.21088409 549.41278076]
[97.96454620 534.43176270]
[98.71820831 519.45068359]
[99.47187805 504.46963501]
[92.38381958 491.36968994]
[100.80473328 477.97567749]
[101.55839539 462.99462891]
[89.64002991 444.97817993]
[101.48356628 426.02468872]
[100.72990417 411.04364014]
[92.36290741 398.72119141]
[99.39704895 384.54971313]
[98.64338684 369.56866455]
[97.88972473 354.58758545]
[97.13605499 339.60653687]
[96.38239288 324.62548828]
[88.11979675 318.38430786]
[84.64112854 308.39694214]
[87.34904480 297.94522095]
[95.56929016 290.60900879]
[95.56929016 275.60900879]
[95.56929016 260.60900879]
[83.43087769 252.01850891]
[78.62156677 237.75895691]
[83.18431854 223.23193359]
[95.56929016 214.07122803]
[95.56929016 199.07122803]
[85.97072601 184.43714905]
[95.16261292 168.54125977]
[94.78565979 153.54600525]
[94.40871429 138.55073547]
[94.03176117 123.55547333]
[93.65480804 108.56021118]
[92.14011383 123.48353577]
[81.37825012 133.93257141]
[66.41674042 135.00650024]
[54.27284622 126.20162201]
[50.64229202 111.64761353]
[57.22788620 98.17060089]
[70.94114685 92.09154510]
[64.38441467 78.60047150]
[57.82767487 65.10939026]
[51.27093887 51.61831284]
[44.71420288 38.12723160]
[38.15746689 24.63615417]
[24.27897263 15.90005398]
[25.17570686 -0.47455779]
[39.92518616 -7.64288378]
[53.35440826 1.76923525]
[51.64854431 18.07941818]
[58.20528030 31.57049751]
[64.76201630 45.06157684]
[71.31875610 58.55265427]
[77.87548828 72.04373169]
[84.43222809 85.53481293]
[99.42156982 86.10016632]
[106.97591400 73.14131165]
[114.53026581 60.18246078]
[122.08460999 47.22360992]
[129.63896179 34.26475906]
[137.19331360 21.30590820]
[144.74765015 8.34705734]
[137.64448547 -5.34778118]
[139.09567261 -20.70674133]
[148.63812256 -32.82883453]
[163.22688293 -37.84594345]
[178.20675659 -34.15712738]
[188.79768372 -22.93947792]
[191.62016296 -7.77250147]
[185.77354431 6.50407267]
[173.12345886 15.33464241]
[157.70651245 15.90140533]
[150.15216064 28.86025620]
[142.59780884 41.81910706]
[135.04345703 54.77795792]
[127.48911285 67.73680878]
[119.93476868 80.69566345]
[112.38041687 93.65451050]
[108.65007019 108.18325806]
[109.02702332 123.17852020]
[109.40397644 138.17378235]
[109.78092957 153.16905212]
[110.15787506 168.16430664]
[118.98834229 177.66566467]
[118.93211365 190.23443604]
[110.56929016 199.07122803]
[110.56929016 214.07122803]
[122.95426941 223.23193359]
[127.51702118 237.75895691]
[122.70771027 252.01850891]
[110.56929016 260.60900879]
[110.56929016 275.60900879]
[110.56929016 290.60900879]
[121.48033142 307.47088623]
[111.36344910 323.87182617]
[112.11711121 338.85287476]
[112.87077332 353.83392334]
[113.62444305 368.81500244]
[114.37810516 383.79605103]
[122.79901123 397.19003296]
[115.71096039 410.28997803]
[116.46462250 425.27102661]
[123.80288696 429.75036621]
[128.66168213 436.72784424]
[130.28079224 444.97817993]
[128.46087646 453.08941650]
[123.58465576 459.70449829]
[116.53945160 463.74829102]
[115.78578186 478.72933960]
[122.81993103 492.90084839]
[114.45293427 505.22329712]
[113.69926453 520.20434570]
[112.94560242 535.18542480]
[112.19194031 550.16644287]
[111.43827057 565.14752197]
[110.68460846 580.12854004]
[109.93093872 595.10961914]
[119.58095551 607.92590332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[9 118]
[10 117]
[12 115]
[13 114]
[15 108]
[16 107]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[26 99]
[27 98]
[28 97]
[32 93]
[33 92]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[51 56]
[62 84]
[63 83]
[64 82]
[65 81]
[66 80]
[67 79]
[68 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
