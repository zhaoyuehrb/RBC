%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGACUACACAUUUUAGGUAUGUGAUUAGAAAACAUACUUGUCAGAAUUGUCUGGCUGGAUUAAUUUGCUAAUUUGACCUUCUUCAUCAUUUGAUGUG\
) } def
/len { sequence length } bind def

/coor [
[89.92412567 175.23704529]
[83.17669678 161.84031677]
[76.42926788 148.44358826]
[69.68184662 135.04685974]
[62.93441772 121.65013885]
[67.74576569 135.85755920]
[66.15361786 150.77282715]
[58.45168686 163.64451599]
[46.06074142 172.09817505]
[31.26653671 174.57437134]
[16.79816246 170.61631775]
[5.32459831 160.95416260]
[-1.03763044 147.37026978]
[-1.11488283 132.37046814]
[5.10709143 118.72177124]
[16.48052597 108.94194794]
[30.90736389 104.83508301]
[45.72343826 107.15765381]
[31.37357140 102.78942871]
[17.02370644 98.42121124]
[2.67384005 94.05299377]
[-11.67602539 89.68476868]
[-26.02589226 85.31655121]
[-40.37575912 80.94832611]
[-54.72562408 76.58010864]
[-66.41743469 86.64514923]
[-81.69794464 88.76869965]
[-95.69120789 82.27314758]
[-103.93201447 69.23118591]
[-103.79075623 53.80447006]
[-95.31250763 40.91560364]
[-81.20265198 34.67737961]
[-65.96358490 37.08038712]
[-54.45804596 47.35784149]
[-50.35740280 62.23024368]
[-36.00753784 66.59846497]
[-21.65767097 70.96668243]
[-7.30780506 75.33490753]
[7.04206085 79.70312500]
[21.39192581 84.07134247]
[35.74179077 88.43956757]
[50.09165955 92.80778503]
[62.14411163 83.87815094]
[62.14411163 68.87815094]
[62.14411163 53.87815475]
[62.14411163 38.87815475]
[62.14411163 23.87815475]
[62.14411163 8.87815380]
[53.48041153 -5.04564905]
[61.44453812 -19.38108444]
[77.84368896 -19.38108444]
[85.80781555 -5.04564905]
[77.14411163 8.87815380]
[77.14411163 23.87815475]
[77.14411163 38.87815475]
[77.14411163 53.87815475]
[77.14411163 68.87815094]
[77.14411163 83.87815094]
[97.89057159 74.46694946]
[116.55667114 83.64805603]
[130.05671692 77.10978699]
[143.55674744 70.57151794]
[157.05679321 64.03325653]
[170.55682373 57.49498749]
[184.05686951 50.95672226]
[189.00613403 35.94738007]
[203.15640259 28.90853882]
[218.11257935 34.01621628]
[225.00143433 48.24011993]
[219.73591614 63.14145660]
[205.43997192 69.87953186]
[190.59513855 64.45676422]
[177.09509277 70.99502563]
[163.59506226 77.53329468]
[150.09501648 84.07156372]
[136.59497070 90.60982513]
[123.09494019 97.14809418]
[120.80467224 112.83484650]
[108.60176086 124.13288879]
[91.23525238 125.32083893]
[76.33114624 114.90270996]
[83.07856750 128.29943848]
[89.82599640 141.69616699]
[96.57342529 155.09288025]
[103.32084656 168.48960876]
[120.64488220 178.56245422]
[119.15051270 197.73483276]
[126.71775055 210.68615723]
[134.28498840 223.63748169]
[141.85223389 236.58880615]
[156.35699463 244.24023438]
[156.71257019 260.63552856]
[142.55319214 268.90859985]
[128.44480896 260.54885864]
[128.90090942 244.15605164]
[121.33367157 231.20472717]
[113.76642609 218.25340271]
[106.19918060 205.30207825]
[95.91432190 203.54199219]
[88.20214844 196.18832397]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 81]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
[65 72]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
