%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCUGGUGUGGGCGGGAGUGAGCCAAAGUGUGCUAAAGGAAACCAACAGCGGCCUAGGGGUGAAAGGACAGCCAGGGUUAGAUGUUCUGAGGAGGCGGGAGCAACCGAGAGAGCACGUGAGCAUCUGUCCUUUCUACCCGUUCCUCUUUAUCUUUAGUGUUCAGUAGCAGCGGGGAUAGCCCGGGGCCCGGUGU\
) } def
/len { sequence length } bind def

/coor [
[163.91918945 445.16363525]
[163.91918945 430.16363525]
[163.91918945 415.16363525]
[163.91918945 400.16363525]
[163.91918945 385.16363525]
[156.18190002 372.43637085]
[163.91918945 358.63619995]
[163.91918945 343.63619995]
[163.91918945 328.63619995]
[154.33662415 313.94030762]
[163.66082764 298.06756592]
[163.42163086 283.06948853]
[163.18243408 268.07138062]
[162.94323730 253.07330322]
[162.70404053 238.07521057]
[175.41316223 213.98629761]
[168.29611206 200.78222656]
[161.17904663 187.57815552]
[154.06199646 174.37408447]
[146.94494629 161.17001343]
[140.99700928 156.76855469]
[139.82157898 147.69815063]
[132.91598511 134.38226318]
[126.01039886 121.06637573]
[119.10480499 107.75048828]
[112.09684753 115.59651947]
[102.51921844 118.68972778]
[93.13570404 116.61767578]
[86.42151642 110.39468384]
[71.71855164 113.36501312]
[62.96325302 126.24842834]
[48.01004410 129.05131531]
[35.78162766 120.62508392]
[21.07866478 123.59541321]
[6.37570047 126.56574249]
[-8.32726288 129.53607178]
[-14.85406494 143.48982239]
[-28.18990135 150.83889771]
[-43.11941910 148.94851685]
[-53.94348907 138.75158691]
[-68.64645386 141.72192383]
[-82.97462463 150.78501892]
[-95.64997101 139.52572632]
[-88.33956909 124.22884369]
[-71.61678314 127.01895142]
[-56.91381836 124.04862213]
[-50.89710236 110.44946289]
[-37.87228394 102.91168976]
[-22.72939491 104.50740814]
[-11.29759407 114.83311462]
[3.40536928 111.86278534]
[18.10833359 108.89244843]
[32.81129456 105.92211914]
[40.80961227 93.40962219]
[55.67819595 90.18783569]
[68.74822235 98.66204834]
[83.45117950 95.69171906]
[89.37577057 85.13342285]
[101.45982361 80.61001587]
[114.36372375 85.20989990]
[115.31990814 70.24040985]
[116.27608490 55.27091599]
[117.23226929 40.30142212]
[118.06906128 25.32478142]
[118.78640747 10.34194469]
[119.50376129 -4.64089203]
[120.22110748 -19.62372971]
[120.93845367 -34.60656738]
[121.65580750 -49.58940506]
[122.37315369 -64.57224274]
[123.09050751 -79.55507660]
[123.80785370 -94.53791809]
[124.52519989 -109.52075195]
[113.03750610 -115.44884491]
[104.67856598 -125.24839783]
[100.66523743 -137.43832397]
[101.56108093 -150.19374084]
[107.19748688 -161.61918640]
[116.70406342 -170.03027344]
[128.64282227 -174.20193481]
[129.83758545 -189.15426636]
[131.03236389 -204.10661316]
[121.05918884 -216.07212830]
[122.48385620 -231.21891785]
[133.95260620 -240.65306091]
[135.14738464 -255.60540771]
[136.34214783 -270.55773926]
[137.53692627 -285.51010132]
[138.73168945 -300.46243286]
[139.92646790 -315.41476440]
[128.34062195 -328.51416016]
[129.77915955 -345.60397339]
[142.86630249 -356.15814209]
[143.82249451 -371.12762451]
[133.65977478 -382.93258667]
[134.84272766 -398.10015869]
[146.15959167 -407.71600342]
[147.11576843 -422.68548584]
[139.35726929 -437.13323975]
[148.21900940 -450.93185425]
[164.58480835 -449.88647461]
[171.61892700 -435.07254028]
[162.08526611 -421.72930908]
[161.12907410 -406.75982666]
[171.13052368 -395.78225708]
[170.37406921 -380.58746338]
[158.79197693 -370.17144775]
[157.83580017 -355.20196533]
[167.62149048 -346.80892944]
[170.83078003 -334.12194824]
[166.07357788 -321.72189331]
[154.87881470 -314.22000122]
[153.68403625 -299.26766968]
[152.48927307 -284.31530762]
[151.29449463 -269.36297607]
[150.09973145 -254.41064453]
[148.90495300 -239.45829773]
[158.73007202 -228.32264709]
[157.73141479 -213.14183044]
[145.98469543 -202.91183472]
[144.78993225 -187.95950317]
[143.59515381 -173.00715637]
[158.11242676 -163.76809692]
[165.99745178 -148.37300110]
[165.00103760 -131.01571655]
[155.30737305 -116.47601318]
[139.50804138 -108.80340576]
[138.79069519 -93.82056427]
[138.07334900 -78.83773041]
[137.35598755 -63.85489273]
[136.63864136 -48.87205505]
[135.92129517 -33.88921738]
[135.20394897 -18.90637970]
[134.48660278 -3.92354321]
[133.76924133 11.05929375]
[133.05189514 26.04213142]
[135.87548828 32.88157654]
[132.20176697 41.25760651]
[131.24557495 56.22709656]
[130.28939819 71.19659424]
[129.33322144 86.16608429]
[132.42068481 100.84489441]
[139.32627869 114.16078186]
[146.23187256 127.47666931]
[153.13746643 140.79255676]
[160.14901733 154.05294800]
[167.26606750 167.25701904]
[174.38311768 180.46109009]
[181.50018311 193.66516113]
[188.61723328 206.86923218]
[198.83651733 217.84950256]
[211.49630737 225.89498901]
[224.15609741 233.94046021]
[236.81588745 241.98594666]
[249.47567749 250.03141785]
[262.13546753 258.07690430]
[274.79525757 266.12237549]
[290.03491211 262.89895630]
[302.75912476 271.23855591]
[305.73825073 285.78710938]
[318.39804077 293.83258057]
[331.05783081 301.87808228]
[343.71762085 309.92355347]
[360.11602783 310.07974243]
[367.94326782 324.49038696]
[359.14730835 338.33105469]
[342.77673340 337.36361694]
[335.67214966 322.58334351]
[323.01235962 314.53787231]
[310.35256958 306.49237061]
[297.69277954 298.44689941]
[283.25595093 301.92736816]
[270.30252075 293.94845581]
[266.74978638 278.78216553]
[254.08998108 270.73669434]
[241.43019104 262.69122314]
[228.77040100 254.64573669]
[216.11061096 246.60025024]
[203.45082092 238.55477905]
[190.79103088 230.50929260]
[177.70213318 237.83601379]
[177.94132996 252.83410645]
[178.18052673 267.83218384]
[178.41972351 282.83029175]
[178.65892029 297.82836914]
[187.36758423 307.35293579]
[187.25166321 319.85714722]
[178.91918945 328.63619995]
[178.91918945 343.63619995]
[178.91918945 358.63619995]
[186.65649414 372.43637085]
[178.91918945 385.16363525]
[178.91918945 400.16363525]
[178.91918945 415.16363525]
[178.91918945 430.16363525]
[178.91918945 445.16363525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 196]
[2 195]
[3 194]
[4 193]
[5 192]
[7 190]
[8 189]
[9 188]
[11 185]
[12 184]
[13 183]
[14 182]
[15 181]
[16 150]
[17 149]
[18 148]
[19 147]
[20 146]
[22 145]
[23 144]
[24 143]
[25 142]
[29 57]
[30 56]
[33 53]
[34 52]
[35 51]
[36 50]
[40 46]
[41 45]
[60 141]
[61 140]
[62 139]
[63 138]
[64 136]
[65 135]
[66 134]
[67 133]
[68 132]
[69 131]
[70 130]
[71 129]
[72 128]
[73 127]
[80 122]
[81 121]
[82 120]
[85 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[93 108]
[94 107]
[97 104]
[98 103]
[151 180]
[152 179]
[153 178]
[154 177]
[155 176]
[156 175]
[157 174]
[160 171]
[161 170]
[162 169]
[163 168]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
