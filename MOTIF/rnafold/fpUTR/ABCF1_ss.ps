%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:17:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCAGCUUGGAGAGCCAGCCCCAUCGGGGUUCCCCGCCGCCGGAAGCGGAAAUAGCACCGGGCGCCGCCACAGUAGCUGUAACUGCCACCGCG\
) } def
/len { sequence length } bind def

/coor [
[90.99773407 109.08781433]
[76.19808197 111.53124237]
[61.39843369 113.97467804]
[57.07115936 117.55743408]
[52.27314758 118.84741211]
[48.01140213 118.07524109]
[45.03433228 115.85721588]
[30.06644821 116.83826447]
[19.66969681 128.43762207]
[4.47615957 129.21932983]
[-6.51799393 119.23612976]
[-21.48587799 120.21717834]
[-36.45376205 121.19822693]
[-26.87724686 132.74337769]
[-27.96917725 147.70356750]
[-39.12060547 157.73580933]
[-54.11258316 157.24526978]
[-64.58435822 146.50553894]
[-64.69602203 131.50595093]
[-54.38467026 120.61122894]
[-69.25634003 118.65333557]
[-84.12801361 116.69544220]
[-98.99968719 114.73754883]
[-113.87136078 112.77965546]
[-130.36419678 116.70684814]
[-138.70358276 101.94571686]
[-126.82788849 89.84594727]
[-111.91346741 97.90798187]
[-97.04179382 99.86587524]
[-82.17012024 101.82376862]
[-67.29844666 103.78166199]
[-52.42677689 105.73955536]
[-37.43480682 106.23033905]
[-22.46692467 105.24929810]
[-7.49904060 104.26824951]
[2.09798765 92.93543243]
[17.26357460 91.72729492]
[29.08540154 101.87037659]
[44.05328369 100.88932800]
[58.95500183 99.17502594]
[73.75465393 96.73159027]
[88.55429840 94.28816223]
[103.21623230 91.12149048]
[117.70511627 87.23920441]
[132.19400024 83.35691833]
[140.12806702 69.95212555]
[154.87715149 66.22132874]
[167.60768127 73.86785126]
[182.09657288 69.98556519]
[196.58546448 66.10327911]
[211.07434082 62.22099304]
[219.00840759 48.81619644]
[233.75749207 45.08540726]
[246.48802185 52.73192596]
[260.97692871 48.84963989]
[275.46578979 44.96735382]
[289.95468140 41.08506775]
[304.44357300 37.20278168]
[318.86700439 33.08395386]
[333.22109985 28.72968292]
[341.09240723 13.21238708]
[357.40209961 8.19370270]
[372.04843140 16.27781105]
[386.25238037 11.45621872]
[400.45632935 6.63462687]
[413.51135254 -4.18215656]
[427.51940918 5.36828423]
[422.22003174 21.47271729]
[405.27792358 20.83857918]
[391.07397461 25.66017151]
[376.87002563 30.48176193]
[372.78298950 42.82044983]
[362.14093018 50.61929321]
[348.75271606 50.80573273]
[337.57537842 43.08378983]
[323.22128296 47.43805695]
[317.62612915 52.49013519]
[308.32586670 51.69166946]
[293.83697510 55.57395554]
[279.34808350 59.45624161]
[264.85919189 63.33852768]
[250.37031555 67.22080994]
[243.16860962 80.20815277]
[228.53012085 84.35174561]
[214.95663452 76.70987701]
[200.46774292 80.59216309]
[185.97885132 84.47444916]
[171.48997498 88.35673523]
[164.28826904 101.34407806]
[149.64978027 105.48767090]
[136.07629395 97.84580231]
[121.58740234 101.72808838]
[107.09851837 105.61037445]
[104.62190247 108.84964752]
[100.66184235 110.89977264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 42]
[2 41]
[3 40]
[7 39]
[8 38]
[11 35]
[12 34]
[13 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[43 93]
[44 92]
[45 91]
[48 88]
[49 87]
[50 86]
[51 85]
[54 82]
[55 81]
[56 80]
[57 79]
[58 78]
[59 76]
[60 75]
[63 71]
[64 70]
[65 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
