%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGUCGGGGGCCCGGAGGGGGACUCGGAGCGGGCCAAGGGGCGGCUCCGGCGGGCGGACUCGGAGCGGGCGGCGGAGUGACCCGGACAGCUGUCCUCUCUGACACCACCCCGGCCUGCCUCUUUGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[-75.13160706 465.74972534]
[-80.29860687 479.83172607]
[-85.46561432 493.91369629]
[-90.63261414 507.99566650]
[-95.79961395 522.07763672]
[-92.46243286 538.13366699]
[-104.87722778 548.84832764]
[-120.27272034 543.19940186]
[-122.81135559 526.99792480]
[-109.88159180 516.91064453]
[-104.71459198 502.82867432]
[-99.54759216 488.74667358]
[-94.38058472 474.66470337]
[-89.21358490 460.58273315]
[-93.86958313 454.90237427]
[-96.23831177 447.87759399]
[-95.96778107 440.40045166]
[-93.04444885 433.43862915]
[-87.80121613 427.91027832]
[-80.88021088 424.56289673]
[-73.15433502 423.87255859]
[-66.37583160 410.49154663]
[-67.52657318 395.64144897]
[-54.38807297 386.82723999]
[-47.60956573 373.44622803]
[-40.83106232 360.06518555]
[-45.69656754 346.03442383]
[-39.01281738 332.36761475]
[-24.26306725 327.35934448]
[-17.48456383 313.97833252]
[-10.70605850 300.59729004]
[-3.92755389 287.21627808]
[2.69363165 273.75671387]
[9.15658760 260.22045898]
[15.61954403 246.68418884]
[22.08250046 233.14793396]
[28.54545593 219.61167908]
[35.00841141 206.07542419]
[34.25224304 201.27331543]
[36.57120895 195.95565796]
[42.10472870 192.06703186]
[49.19505692 178.84858704]
[56.28538513 165.63014221]
[63.37570953 152.41169739]
[62.57341003 137.53871155]
[75.91493225 129.03492737]
[83.00525665 115.81648254]
[76.79835510 100.81626892]
[81.93575287 85.41694641]
[73.93401337 72.72946167]
[65.93227386 60.04198456]
[57.93053436 47.35450363]
[42.66433716 42.42269135]
[37.13690567 27.36191368]
[45.58841324 13.72550774]
[61.53558731 11.97415733]
[72.74511719 23.45134926]
[70.61801910 39.35276413]
[78.61975861 52.04024506]
[86.62149811 64.72772980]
[94.62322998 77.41520691]
[102.71523285 76.94332886]
[110.47624207 79.28211212]
[121.20644379 68.80057526]
[131.93664551 58.31903076]
[142.66685486 47.83749008]
[153.39706421 37.35594559]
[164.12725830 26.87440491]
[168.59259033 11.69641304]
[183.10359192 8.33783913]
[193.83380127 -2.14370275]
[204.56399536 -12.62524414]
[215.29420471 -23.10678482]
[226.02441406 -33.58832550]
[236.75460815 -44.06987000]
[247.48481750 -54.55141068]
[241.49041748 -68.49528503]
[240.94181824 -83.66312408]
[245.91322327 -98.00361633]
[255.73228455 -109.57731628]
[269.07104492 -116.81897736]
[284.12557983 -118.74922943]
[298.85983276 -115.10701752]
[311.28118896 -106.38491821]
[319.70968628 -93.76253510]
[323.00549316 -78.94692993]
[320.72283936 -63.94179535]
[313.17047119 -50.77645493]
[301.36978149 -41.23141098]
[286.91668701 -36.59755325]
[271.76586914 -37.50157166]
[257.96636963 -43.82120514]
[247.23616028 -33.33966446]
[236.50595093 -22.85812187]
[225.77574158 -12.37658119]
[215.04554749 -1.89503956]
[204.31533813 8.58650208]
[193.58512878 19.06804276]
[189.88731384 33.49632645]
[174.60881042 37.60461044]
[163.87860107 48.08615112]
[153.14839172 58.56769180]
[142.41819763 69.04923248]
[131.68798828 79.53077698]
[120.95778656 90.01231384]
[122.30169678 106.45109558]
[112.38932037 119.63382721]
[96.22370148 122.90681458]
[89.13336945 136.12525940]
[89.42852783 151.94371033]
[76.59415436 159.50202942]
[69.50382996 172.72047424]
[62.41349792 185.93891907]
[55.32317352 199.15734863]
[48.54466629 212.53837585]
[42.08171082 226.07463074]
[35.61875534 239.61088562]
[29.15579796 253.14714050]
[22.69284248 266.68341064]
[16.22988701 280.21966553]
[15.33736992 289.40664673]
[9.45347309 293.99478149]
[2.67496824 307.37579346]
[-4.10353661 320.75683594]
[-10.88204098 334.13784790]
[-6.19441700 348.99261475]
[-13.25940228 362.46630859]
[-27.45003510 366.84368896]
[-34.22853851 380.22473145]
[-41.00704575 393.60574341]
[-40.34114456 409.41293335]
[-52.99480438 417.27005005]
[-59.77330780 430.65109253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 14]
[2 13]
[3 12]
[4 11]
[5 10]
[21 133]
[22 132]
[24 130]
[25 129]
[26 128]
[29 125]
[30 124]
[31 123]
[32 122]
[33 120]
[34 119]
[35 118]
[36 117]
[37 116]
[38 115]
[41 114]
[42 113]
[43 112]
[44 111]
[46 109]
[47 108]
[49 61]
[50 60]
[51 59]
[52 58]
[63 105]
[64 104]
[65 103]
[66 102]
[67 101]
[68 100]
[70 98]
[71 97]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
