%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:39:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCGCCCCGAAGAGUCGGCCAGCCCCGAACUGCCGGAGUAGGGGUGGGAACCAAACUUUUUCCUGCCCCGGGACAGACACGUUUACCCAAGGUCCAGCCUAGCCCCUAGGCACC\
) } def
/len { sequence length } bind def

/coor [
[135.47369385 127.42304993]
[121.92192841 120.99266815]
[108.37017822 114.56227875]
[93.59806061 117.16699982]
[83.06289673 127.84455872]
[85.44501495 143.06401062]
[78.48997498 156.60952759]
[65.05142212 163.38220215]
[50.37734985 160.97190857]
[39.84218597 171.64945984]
[29.30702209 182.32702637]
[18.77186012 193.00459290]
[15.15970516 209.00097656]
[-0.57787019 213.61192322]
[-12.25139809 202.09407043]
[-7.85215378 186.29600525]
[8.09429646 182.46942139]
[18.62945938 171.79187012]
[29.16462326 161.11430359]
[39.69978714 150.43673706]
[37.09269714 135.79634094]
[43.68435669 122.26808167]
[57.13527298 115.13181305]
[72.38533020 117.30939484]
[82.92049408 106.63183594]
[78.36170959 92.34066772]
[73.80334473 78.05076599]
[59.03122330 75.44604492]
[44.25910950 72.84132385]
[31.45837784 82.11045837]
[15.86604691 79.53077698]
[6.73276758 66.63276672]
[9.47715378 51.06857681]
[22.47100830 42.07217407]
[38.00531006 44.98096085]
[46.86383057 58.06920624]
[61.63594818 60.67392731]
[76.40806580 63.27865219]
[81.95462036 58.23031235]
[71.85812378 47.13703156]
[82.95156860 37.04072571]
[93.04772949 48.13363647]
[98.59428406 43.08529663]
[97.38729095 28.13393593]
[96.18029022 13.18257713]
[94.97328949 -1.76878273]
[93.76628876 -16.72014236]
[92.55929565 -31.67150116]
[91.35229492 -46.62285995]
[90.14529419 -61.57422256]
[88.93830109 -76.52558136]
[87.73130035 -91.47694397]
[74.07576752 -98.65538025]
[66.48884583 -112.08824921]
[67.39149475 -127.48918915]
[76.49568176 -139.94380188]
[90.89629364 -145.47785950]
[105.99814606 -142.32548523]
[116.98229980 -131.49256897]
[120.34374237 -116.43586731]
[115.00985718 -101.95991516]
[102.68265533 -92.68393707]
[103.88965607 -77.73258209]
[105.09665680 -62.78121948]
[106.30365753 -47.82986069]
[107.51065063 -32.87850189]
[108.71765137 -17.92714119]
[109.92465210 -2.97578120]
[111.13164520 11.97557831]
[112.33864594 26.92693710]
[113.54564667 41.87829590]
[114.80056000 101.01052094]
[128.35232544 107.44091034]
[141.90408325 113.87129974]
[134.51101685 100.81976318]
[131.39874268 86.14618683]
[132.85716248 71.21725464]
[138.75041199 57.42343140]
[148.52961731 46.04946136]
[161.28395081 38.15470886]
[175.82546997 34.47448349]
[190.79980469 35.35155487]
[204.81227112 40.70423508]
[216.55772400 50.03398132]
[224.94223022 62.47182846]
[229.18486023 76.85932922]
[228.89045715 91.85643768]
[224.08644104 106.06634521]
[215.22026062 118.16555023]
[203.11769104 127.02713776]
[188.90596008 131.82575989]
[173.90873718 132.11447144]
[159.52215576 127.86605072]
[168.85198975 139.61143494]
[178.18183899 151.35682678]
[183.28948975 153.35517883]
[186.69868469 156.81797791]
[188.13328552 160.81422424]
[187.74382019 164.44372559]
[196.09828186 176.90176392]
[204.45275879 189.35981750]
[212.80723572 201.81785583]
[221.16171265 214.27589417]
[229.51617432 226.73393250]
[243.35972595 236.52130127]
[237.78712463 252.53324890]
[220.85827637 251.61097717]
[217.05813599 235.08840942]
[208.70365906 222.63037109]
[200.34919739 210.17233276]
[191.99472046 197.71427917]
[183.64024353 185.25624084]
[175.28578186 172.79820251]
[166.43644714 160.68666077]
[157.10661316 148.94128418]
[147.77676392 137.19589233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 74]
[2 73]
[3 72]
[4 25]
[5 24]
[9 20]
[10 19]
[11 18]
[12 17]
[27 38]
[28 37]
[29 36]
[43 71]
[44 70]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[93 116]
[94 115]
[95 114]
[99 113]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
