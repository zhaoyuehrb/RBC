%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAUCCUGGAGACUCCUGCGGAUGCCAUUAUGAGGAGCAAGAACGCGAAGGGGCCUCGGGUCCGCUAGGCCGGGAUCCGGAGCCGCCCGAAGCCGGUGCCGCAGCCCCCUGCGCCCCCGGUGCCCCCGAC\
) } def
/len { sequence length } bind def

/coor [
[119.31514740 163.04151917]
[101.96562195 165.90481567]
[84.47628784 164.08059692]
[79.30928040 178.16256714]
[74.14228058 192.24455261]
[77.47946167 208.30055237]
[65.06466675 219.01525879]
[49.66917419 213.36628723]
[47.13054276 197.16482544]
[60.06030273 187.07754517]
[65.22730255 172.99555969]
[70.39431000 158.91358948]
[60.15125656 152.52984619]
[51.24348068 144.38592529]
[43.96946716 134.75466919]
[38.57295990 123.95884705]
[24.06901169 127.78449249]
[9.56506538 131.61013794]
[-4.93888140 135.43577576]
[-19.44282722 139.26141357]
[-25.14188766 153.57318115]
[-38.02481079 161.69006348]
[-53.03936768 160.67658997]
[-64.44159698 151.13053894]
[-78.94554901 154.95617676]
[-93.44949341 158.78182983]
[-107.22274780 168.66786194]
[-120.53525543 158.16960144]
[-114.13253784 142.47114563]
[-97.27513885 144.27787781]
[-82.77118683 140.45223999]
[-68.26724243 136.62658691]
[-63.05664062 122.69864655]
[-50.49524307 114.41159058]
[-35.28492737 115.11843872]
[-23.26846886 124.75746918]
[-8.76452255 120.93182373]
[5.73942375 117.10618591]
[20.24337006 113.28054047]
[34.74731827 109.45490265]
[34.20856857 95.66464996]
[36.55222702 82.06433868]
[41.67561722 69.24980927]
[49.35427475 57.78248596]
[59.25178909 48.16476822]
[70.93453217 40.81802368]
[83.89067841 36.06411362]
[97.55258942 34.11132050]
[111.32172394 35.04519653]
[124.59484100 38.82482910]
[136.79043579 45.28462601]
[147.37417603 54.14157486]
[155.88240051 65.00763702]
[169.41865540 58.54468536]
[182.95491028 52.08172989]
[196.49116516 45.61877060]
[210.02742004 39.15581512]
[219.14720154 26.22755051]
[233.96623230 27.72610092]
[247.50248718 21.26314545]
[261.03875732 14.80018902]
[274.57501221 8.33723354]
[288.11126709 1.87427711]
[293.46389771 -12.75401306]
[307.28366089 -19.11553955]
[321.19650269 -13.92245388]
[334.73275757 -20.38541031]
[348.26901245 -26.84836578]
[354.73904419 -33.43136978]
[362.19921875 -33.29999542]
[375.88323975 -39.44384766]
[389.56729126 -45.58770370]
[393.83517456 -50.83426666]
[399.30267334 -52.77379227]
[404.03976440 -51.68201828]
[417.99673462 -57.17771912]
[431.95373535 -62.67341995]
[435.93981934 -77.55351257]
[447.78503418 -87.12140656]
[462.81506348 -87.87092590]
[475.25552368 -79.72393799]
[489.21249390 -85.21963501]
[503.16946411 -90.71533966]
[513.17529297 -102.97073364]
[527.85235596 -100.43446350]
[541.80932617 -105.93016052]
[555.76629639 -111.42586517]
[569.72326660 -116.92156219]
[573.47985840 -131.97705078]
[585.39001465 -141.92329407]
[600.87402344 -142.93577576]
[613.97796631 -134.62515259]
[619.66314697 -120.18705750]
[615.74340820 -105.17321777]
[603.72607422 -95.35675812]
[588.23199463 -94.51231384]
[575.21899414 -102.96458435]
[561.26202393 -97.46888733]
[547.30499268 -91.97318268]
[533.34802246 -86.47748566]
[524.34057617 -74.61517334]
[508.66519165 -76.75835419]
[494.70819092 -71.26265717]
[480.75122070 -65.76696014]
[477.20532227 -51.32519150]
[465.69934082 -41.62588120]
[450.51074219 -40.54895020]
[437.44943237 -48.71644211]
[423.49243164 -43.22074127]
[409.53546143 -37.72504044]
[395.71115112 -31.90366173]
[382.02709961 -25.75980568]
[368.34307861 -19.61595154]
[354.73199463 -13.31211185]
[341.19573975 -6.84915543]
[327.65948486 -0.38619936]
[322.95062256 13.69791603]
[309.31500244 20.44510269]
[294.57421875 15.41053200]
[281.03796387 21.87348747]
[267.50170898 28.33644485]
[253.96545410 34.79940033]
[240.42919922 41.26235580]
[232.27760315 53.72834778]
[216.49037170 52.69207001]
[202.95411682 59.15502548]
[189.41786194 65.61798096]
[175.88160706 72.08094025]
[162.34535217 78.54389191]
[165.79928589 95.78556061]
[164.57321167 113.32697296]
[158.75433350 129.92050171]
[148.75651550 144.38592529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 12]
[4 11]
[5 10]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[24 32]
[25 31]
[26 30]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[59 123]
[60 122]
[61 121]
[62 120]
[63 119]
[66 116]
[67 115]
[68 114]
[70 113]
[71 112]
[72 111]
[75 110]
[76 109]
[77 108]
[81 104]
[82 103]
[83 102]
[85 100]
[86 99]
[87 98]
[88 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
