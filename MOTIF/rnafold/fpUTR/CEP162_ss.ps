%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAACUGGUGGACCCGCACAGACCUUCCGGGAAAGCGCGGAAUUCAGAGGCAGAGUGUUUCCAAUGUUUGAGGUACUUUAGAAUGUUUACUUUGGGAGGUCAAAAUUGUUGACU\
) } def
/len { sequence length } bind def

/coor [
[92.54584503 207.30145264]
[92.28492737 191.49931335]
[103.33412170 180.19927979]
[102.92793274 165.20477295]
[102.52174377 150.21028137]
[102.11554718 135.21577454]
[95.14822388 132.43974304]
[81.21357727 126.88767242]
[74.24624634 124.11163330]
[63.63964462 134.71823120]
[53.03304291 145.32484436]
[53.28367615 161.12713623]
[42.22713470 172.41998291]
[26.42306709 172.50354004]
[15.24774647 161.32821655]
[15.33129406 145.52413940]
[26.62414169 134.46760559]
[42.42644119 134.71823120]
[53.03304291 124.11163330]
[63.63964462 113.50503540]
[72.71945190 82.52832031]
[98.02793121 74.07067108]
[101.25248718 59.42136002]
[104.47704315 44.77205276]
[107.70160675 30.12274551]
[110.92616272 15.47343636]
[114.15071869 0.82412827]
[117.37527466 -13.82518005]
[120.59983063 -28.47448921]
[123.82438660 -43.12379837]
[126.85028076 -57.81542587]
[129.67695618 -72.54668427]
[124.67886353 -87.55766296]
[134.67593384 -98.59885406]
[137.50260925 -113.33010864]
[140.32929993 -128.06135559]
[143.15597534 -142.79261780]
[139.33912659 -157.29887390]
[129.62832642 -168.73130798]
[114.70859528 -165.31661987]
[99.91390991 -169.23782349]
[88.64398193 -179.59385681]
[83.48856354 -194.00497437]
[85.63232422 -209.15960693]
[94.58264923 -221.57533264]
[108.28282166 -228.39910889]
[123.58463287 -228.06288147]
[136.97184753 -220.64390564]
[145.36817932 -207.84703064]
[146.84420776 -192.61285400]
[141.06076050 -178.44210815]
[150.77156067 -167.00967407]
[165.66029358 -168.83323669]
[172.32498169 -182.27131653]
[178.98965454 -195.70939636]
[185.65432739 -209.14749146]
[192.31900024 -222.58557129]
[198.98367310 -236.02365112]
[205.64836121 -249.46173096]
[212.31303406 -262.89981079]
[218.97770691 -276.33789062]
[225.64237976 -289.77600098]
[218.32936096 -303.46173096]
[220.49063110 -318.82754517]
[231.29513550 -329.96499634]
[246.58831787 -332.59146118]
[260.48962402 -325.69705200]
[267.65374756 -311.93276978]
[265.32592773 -296.59130859]
[254.40122986 -285.57174683]
[239.08045959 -283.11132812]
[232.41578674 -269.67321777]
[225.75111389 -256.23513794]
[219.08644104 -242.79705811]
[212.42176819 -229.35897827]
[205.75708008 -215.92089844]
[199.09240723 -202.48280334]
[192.42773438 -189.04472351]
[185.76306152 -175.60664368]
[179.09838867 -162.16856384]
[178.09202576 -156.26086426]
[175.74240112 -150.91987610]
[172.26019287 -146.43601990]
[167.91484070 -143.03263855]
[163.01498413 -140.85520935]
[157.88722229 -139.96594238]
[155.06054688 -125.23468018]
[152.23387146 -110.50342560]
[149.40719604 -95.77217102]
[154.60746765 -81.81486511]
[144.40821838 -69.72000122]
[141.58154297 -54.98874664]
[143.43608093 -47.73041534]
[138.47369385 -39.89923859]
[135.24914551 -25.24993134]
[132.02458191 -10.60062313]
[128.80001831 4.04868507]
[125.57546997 18.69799232]
[122.35091400 33.34730148]
[119.12635803 47.99660873]
[115.90180206 62.64591980]
[112.67723846 77.29522705]
[120.34843445 81.01391602]
[126.83193970 87.36837769]
[131.22030640 95.94365692]
[132.76124573 106.01519012]
[130.96151733 116.60893250]
[125.66725922 126.59555817]
[117.11004639 134.80958557]
[117.51624298 149.80409241]
[117.92243195 164.79858398]
[118.32862091 179.79309082]
[129.97338867 190.47836304]
[130.56835938 206.27145386]
[119.76056671 217.80258179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[9 20]
[10 19]
[11 18]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[28 96]
[29 95]
[30 94]
[31 92]
[32 91]
[34 89]
[35 88]
[36 87]
[37 86]
[38 52]
[39 51]
[53 80]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
