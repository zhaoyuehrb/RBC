%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAUAACAGCACUCCCAAAGAACUGGGUACUCAACACUGAGCAGAUCUGUUCUUUGAGCUAAAAACC\
) } def
/len { sequence length } bind def

/coor [
[56.44068527 354.93344116]
[41.44304276 356.18118286]
[26.49018288 354.47875977]
[12.15685844 349.89160156]
[-1.00599575 342.59600830]
[-12.49243641 332.87243652]
[-21.86095428 321.09463501]
[-28.75144768 307.71527100]
[-32.89906693 293.24862671]
[-34.14438629 278.25079346]
[-32.43954086 263.29818726]
[-27.85005951 248.96562195]
[-20.55234909 235.80393982]
[-10.82691383 224.31907654]
[0.95242518 214.95246887]
[14.33290195 208.06413269]
[28.80020714 203.91885376]
[43.79825592 202.67596436]
[58.75056076 204.38323975]
[63.32264709 190.09701538]
[67.89473724 175.81079102]
[72.46681976 161.52458191]
[77.03890991 147.23835754]
[81.61099243 132.95214844]
[86.18308258 118.66592407]
[90.75516510 104.37970734]
[90.02037048 96.06969452]
[95.85839844 89.57067871]
[101.05793762 75.50067902]
[106.25747681 61.43068314]
[111.45701599 47.36068726]
[106.89808655 27.95076561]
[121.64900208 15.75494957]
[125.58468628 1.28047574]
[129.52037048 -13.19399834]
[133.45605469 -27.66847229]
[128.74919128 -43.37762451]
[140.19561768 -55.12119675]
[156.02021790 -50.81840515]
[159.94401550 -34.89559555]
[147.93052673 -23.73278809]
[143.99484253 -9.25831413]
[140.05915833 5.21615982]
[136.12347412 19.69063377]
[142.15425110 28.41886711]
[142.20878601 39.25141525]
[136.01591492 48.41057968]
[125.52700806 52.56022644]
[120.32746887 66.63022614]
[115.12792969 80.70021820]
[109.92839050 94.77021790]
[105.04138184 108.95178986]
[100.46929932 123.23801422]
[95.89720917 137.52423096]
[91.32512665 151.81044006]
[86.75303650 166.09666443]
[82.18095398 180.38288879]
[77.60886383 194.66909790]
[73.03678131 208.95532227]
[86.20199585 216.24664307]
[97.69158173 225.96649170]
[107.06391144 237.74128723]
[113.95874023 251.11840820]
[118.11103821 265.58370972]
[119.36121368 280.58114624]
[117.66120911 295.53427124]
[113.07637024 309.86834717]
[105.78292084 323.03237915]
[96.06120300 334.52038574]
[84.28489685 343.89080811]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[24 54]
[25 53]
[26 52]
[28 51]
[29 50]
[30 49]
[31 48]
[33 44]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
