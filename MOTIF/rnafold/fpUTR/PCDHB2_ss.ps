%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACCCAGAUACUCAGCUAAAGAAGCAGCAAGCAGGAAGAGGAGGCUUUCUAAGGCGGUCGCUCCGGGAAAUCCGGGCCCUAGGAUUGUCCACUCAUCCCAGUAUCAGCGAGAUACGGGGAGAUAGAGUUAGCGACAACGUGAGCCAGAGCUGGAGCACGUUUGGUGAGAGACCAGAAAGCA\
) } def
/len { sequence length } bind def

/coor [
[0.02143913 224.17018127]
[-10.35764408 234.99951172]
[-20.73672676 245.82885742]
[-31.11581039 256.65820312]
[-30.95386314 272.23419189]
[-41.63399506 283.06881714]
[-56.48432159 283.12722778]
[-66.86340332 293.95657349]
[-59.81632996 306.52471924]
[-56.60384369 320.55468750]
[-57.47806168 334.90524292]
[-62.35902023 348.41156006]
[-70.84191895 359.97994995]
[-82.23065948 368.67633057]
[-95.59499359 373.80166626]
[-109.84645081 374.94812012]
[-123.82704926 372.03158569]
[-136.40333557 365.29766846]
[-146.96481323 375.94921875]
[-157.52629089 386.60073853]
[-158.89631653 402.58520508]
[-172.32699585 411.35992432]
[-187.51548767 406.19375610]
[-192.81045532 391.04968262]
[-184.15007019 377.54495239]
[-168.17782593 376.03927612]
[-157.61634827 365.38772583]
[-147.05487061 354.73620605]
[-154.36785889 340.89715576]
[-157.05322266 325.45709229]
[-154.83668518 309.92315674]
[-147.92303467 295.81546021]
[-136.97726440 284.51824951]
[-123.06071472 277.14416504]
[-107.52805328 274.42459106]
[-91.89549255 276.63717651]
[-77.69274902 283.57748413]
[-67.31366730 272.74813843]
[-67.88558197 257.90872192]
[-57.51398087 246.77838135]
[-41.94515228 246.27911377]
[-31.56606865 235.44976807]
[-21.18698502 224.62043762]
[-10.80790234 213.79109192]
[-11.37981796 198.95166016]
[-1.00822020 187.82131958]
[14.56061077 187.32205200]
[24.93969345 176.49272156]
[35.31877518 165.66337585]
[45.69786072 154.83403015]
[56.07694244 144.00469971]
[66.45602417 133.17535400]
[76.83510590 122.34600830]
[70.07561493 111.20632172]
[68.31938171 98.39038849]
[71.78201294 86.02474213]
[79.81941223 76.13109589]
[91.04602814 70.29590607]
[103.57330322 69.41613770]
[115.32723999 73.56217194]
[118.61181641 58.92620468]
[121.89639282 44.29023743]
[125.18096924 29.65426826]
[128.46554565 15.01830101]
[131.75012207 0.38233340]
[120.73796082 -9.69681931]
[117.95209503 -25.84796906]
[126.28828430 -41.63560486]
[120.34275818 -55.40697861]
[114.39723206 -69.17835236]
[101.82373047 -78.78134918]
[103.88259125 -93.53297424]
[97.93705750 -107.30434418]
[91.99153137 -121.07572174]
[86.04600525 -134.84709167]
[80.10047913 -148.61846924]
[64.93106842 -151.88473511]
[54.60372543 -163.46600342]
[53.08953094 -178.90902710]
[60.97072220 -192.27563477]
[75.21681976 -198.42611694]
[90.34989929 -194.99548340]
[100.55100250 -183.30285645]
[101.89757538 -167.84432983]
[93.87184906 -154.56399536]
[99.81737518 -140.79261780]
[105.76290894 -127.02124786]
[111.70843506 -113.24987030]
[117.65396118 -99.47850037]
[129.80220032 -90.86051941]
[128.16860962 -75.12387848]
[134.11413574 -61.35250473]
[140.05966187 -47.58113480]
[154.92144775 -45.54960632]
[164.34475708 -57.22014236]
[173.76805115 -68.89067841]
[183.19134521 -80.56121826]
[185.18049622 -101.88312531]
[204.69610596 -108.56186676]
[213.51287842 -120.69712067]
[222.32966614 -132.83238220]
[231.14643860 -144.96763611]
[232.99836731 -160.68006897]
[246.73887634 -166.42878723]
[255.55566406 -178.56404114]
[264.37243652 -190.69929504]
[273.18920898 -202.83454895]
[282.00598145 -214.96980286]
[280.92657471 -230.97650146]
[292.86483765 -241.69364929]
[308.66278076 -238.89996338]
[316.20156860 -224.73852539]
[309.69808960 -210.07278442]
[294.14126587 -206.15303040]
[285.32446289 -194.01777649]
[276.50769043 -181.88252258]
[267.69091797 -169.74725342]
[258.87414551 -157.61199951]
[257.65283203 -142.76754761]
[243.28169250 -136.15084839]
[234.46492004 -124.01559448]
[225.64813232 -111.88034058]
[216.83135986 -99.74508667]
[219.64013672 -91.28040314]
[218.20401001 -82.33866882]
[212.72160339 -74.95793152]
[204.32809448 -70.87949371]
[194.86189270 -71.13791656]
[185.43858337 -59.46738052]
[176.01528931 -47.79684448]
[166.59199524 -36.12630844]
[167.27944946 -8.48190308]
[146.38609314 3.66691041]
[143.10151672 18.30287743]
[139.81694031 32.93884659]
[136.53236389 47.57481384]
[133.24778748 62.21078110]
[129.96321106 76.84674835]
[136.60229492 90.29749298]
[150.21777344 96.59184265]
[163.83325195 102.88619232]
[177.44873047 109.18054199]
[191.06419373 115.47489166]
[204.67967224 121.76924133]
[219.35679626 116.55199432]
[233.07516479 123.12931824]
[237.95855713 137.15386963]
[251.57403564 143.44822693]
[265.18951416 149.74256897]
[281.46362305 147.72129822]
[291.13394165 160.96580505]
[284.25247192 175.85128784]
[267.89828491 177.06483459]
[258.89517212 163.35804749]
[245.27967834 157.06369019]
[231.66421509 150.76934814]
[217.81692505 156.13481140]
[203.91923523 149.94540405]
[198.38531494 135.38471985]
[184.76985168 129.09036255]
[171.15437317 122.79602051]
[157.53889465 116.50167084]
[143.92341614 110.20732117]
[130.30795288 103.91296387]
[126.02975464 117.51313782]
[115.84452820 128.01620483]
[122.71105957 141.35226440]
[129.57759094 154.68833923]
[144.35635376 160.93077087]
[148.55131531 176.41566467]
[138.94447327 189.26432800]
[122.90537262 189.62036133]
[112.73783875 177.21066284]
[116.24153137 161.55487061]
[109.37499237 148.21879578]
[102.50846100 134.88273621]
[87.66445160 132.72509766]
[77.28536987 143.55442810]
[66.90628052 154.38377380]
[56.52720261 165.21311951]
[46.14811707 176.04246521]
[35.76903534 186.87179565]
[25.38995171 197.70114136]
[25.55189896 213.27713013]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 44]
[2 43]
[3 42]
[4 41]
[7 38]
[8 37]
[18 28]
[19 27]
[20 26]
[47 183]
[48 182]
[49 181]
[50 180]
[51 179]
[52 178]
[53 177]
[60 138]
[61 137]
[62 136]
[63 135]
[64 134]
[65 133]
[68 93]
[69 92]
[70 91]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
[94 131]
[95 130]
[96 129]
[97 128]
[99 123]
[100 122]
[101 121]
[102 120]
[104 118]
[105 117]
[106 116]
[107 115]
[108 114]
[139 164]
[140 163]
[141 162]
[142 161]
[143 160]
[144 159]
[147 156]
[148 155]
[149 154]
[166 176]
[167 175]
[168 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
