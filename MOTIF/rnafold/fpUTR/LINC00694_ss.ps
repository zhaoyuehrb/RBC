%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGAGUUCUCCCUGUGUUGCCCAAGCUGGUCUGGAACUCCUGGGCUCAAGCAAUCCUCCCACCUCCCAGUGUUGAGAUUAUAGGU\
) } def
/len { sequence length } bind def

/coor [
[78.27961731 252.17358398]
[72.48094940 266.22506714]
[61.74287415 276.98434448]
[47.70286942 282.81072998]
[32.50193405 282.81573486]
[18.45810127 276.99856567]
[7.71295166 266.24636841]
[1.90504384 252.19869995]
[1.92004108 236.99777222]
[7.75565624 222.96160889]
[18.52200127 212.23060608]
[32.57728577 206.44119263]
[47.77817917 206.47618103]
[53.51843262 192.61799622]
[59.25868225 178.75979614]
[64.99893188 164.90159607]
[70.73918915 151.04341125]
[76.47943878 137.18521118]
[68.44814301 130.66654968]
[62.16062546 122.45303345]
[57.96437836 112.99860382]
[56.09132004 102.82578278]
[56.64496613 92.49678802]
[59.59471893 82.58246613]
[64.77754974 73.63076782]
[71.90702820 66.13642120]
[80.58911896 60.51361084]
[76.36313629 46.12121582]
[72.13714600 31.72882080]
[67.40015411 17.49643135]
[62.15818787 3.44218612]
[56.91622543 -10.61205959]
[51.67426300 -24.66630554]
[46.43230057 -38.72055054]
[41.19033813 -52.77479553]
[35.94837570 -66.82904053]
[22.01114464 -74.77468109]
[19.67603111 -90.64688110]
[30.73433495 -102.26985168]
[46.70307159 -100.72744751]
[55.33238983 -87.20286560]
[50.00262070 -72.07100677]
[55.24458313 -58.01676178]
[60.48654556 -43.96251297]
[65.72850800 -29.90826797]
[70.97047424 -15.85402203]
[76.21243286 -1.79977655]
[81.45439911 12.25446892]
[85.55502319 15.09012604]
[87.78289795 20.63241577]
[86.52954102 27.50283241]
[90.75553131 41.89522552]
[94.98151398 56.28762054]
[109.47380066 57.03252029]
[122.93558502 62.45114899]
[133.90258789 71.95410919]
[141.18186951 84.50772095]
[143.98165894 98.74648285]
[158.82897949 100.88120270]
[173.67630005 103.01593018]
[190.47201538 95.73016357]
[203.92314148 106.84794617]
[218.83718872 108.45137787]
[233.75125122 110.05480194]
[245.89831543 99.94419098]
[261.62902832 101.46736908]
[271.61065674 113.72064972]
[269.92123413 129.43438721]
[257.56311035 139.28588867]
[241.86811829 137.43045044]
[232.14781189 124.96885681]
[217.23376465 123.36543274]
[202.31970215 121.76200104]
[192.56990051 129.15953064]
[180.00129700 127.79503632]
[171.54158020 117.86325073]
[156.69425964 115.72853088]
[141.84693909 113.59380341]
[130.43954468 131.77091980]
[111.79104614 142.39019775]
[90.33763123 142.92546082]
[84.59738159 156.78366089]
[78.85712433 170.64186096]
[73.11687469 184.50004578]
[67.37662506 198.35824585]
[61.63637161 212.21643066]
[72.40977478 222.94033813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[18 81]
[27 53]
[28 52]
[29 51]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[58 78]
[59 77]
[60 76]
[62 73]
[63 72]
[64 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
