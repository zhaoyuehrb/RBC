%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGAUGAAACCUUCCUCCUACUGCACAGCCCGCCCCCCUACAGCCCCGGUCCCCACGCCUAGAAGACAGCGGAACUAAGAAAAGAAGAGGCCUGUGGACAGAACAAUC\
) } def
/len { sequence length } bind def

/coor [
[49.65048218 174.29519653]
[40.22718430 185.96572876]
[37.57753754 201.56347656]
[23.56211281 206.60502625]
[14.13881302 218.27555847]
[4.71551275 229.94610596]
[2.06586504 245.54385376]
[-11.94955826 250.58540344]
[-21.37285805 262.25592041]
[-30.79615784 273.92648315]
[-36.04235077 290.04830933]
[-52.98643494 289.47012329]
[-57.12142181 273.02813721]
[-42.46669388 264.50317383]
[-33.04339600 252.83264160]
[-23.62009430 241.16209412]
[-21.64446449 226.39909363]
[-6.95502329 220.52279663]
[2.46827650 208.85226440]
[11.89157677 197.18173218]
[13.86720657 182.41873169]
[28.55664825 176.54241943]
[37.97994614 164.87188721]
[30.46624184 156.74421692]
[24.01015091 147.75344849]
[18.70987129 138.03634644]
[14.64602184 127.74071503]
[11.88041306 117.02313995]
[10.45511150 106.04664612]
[10.39179516 94.97817993]
[11.69142818 83.98609924]
[14.33424091 73.23758698]
[18.28003883 62.89613724]
[23.46880150 53.11903763]
[29.82161331 44.05500031]
[37.24184418 35.84189224]
[45.61663055 28.60463524]
[54.81859207 22.45330811]
[64.70777130 17.48147202]
[75.13374329 13.76475143]
[85.93793488 11.35967445]
[96.95600891 10.30282593]
[108.02038574 10.61027813]
[118.96276855 12.27735615]
[129.61672974 15.27870274]
[139.82022095 19.56866837]
[149.41802979 25.08200073]
[158.26420593 31.73484230]
[166.22416687 39.42600250]
[173.17684937 48.03849792]
[179.01651001 57.44133377]
[192.77099609 51.45685196]
[206.52549744 45.47237396]
[220.27998352 39.48789215]
[229.84735107 26.88726044]
[244.60475159 28.90436172]
[258.35922241 22.91988182]
[267.92660522 10.31925011]
[282.68399048 12.33635044]
[296.43847656 6.35187054]
[310.19299316 0.36739010]
[323.94747925 -5.61709023]
[321.04208374 -20.39453506]
[321.38180542 -35.45104980]
[324.95074463 -50.08241653]
[331.58193970 -63.60429764]
[340.96527100 -75.38424683]
[352.66183472 -84.87129974]
[366.12460327 -91.62172699]
[380.72384644 -95.31980133]
[395.77679443 -95.79255676]
[410.57931519 -93.01788330]
[424.43914795 -87.12554932]
[436.70797729 -78.39115906]
[446.81201172 -67.22322845]
[454.27865601 -54.14410782]
[458.75866699 -39.76552582]
[460.04251099 -24.76000023]
[458.07015991 -9.82936573]
[452.93383789 4.32804775]
[444.87380981 17.05006981]
[434.26702881 27.74167061]
[421.60958862 35.90278244]
[407.49356079 41.15169525]
[392.57910156 43.24290848]
[377.56381226 42.07861710]
[363.15002441 37.71326828]
[350.01184082 30.35104179]
[338.76379395 20.33628273]
[329.93194580 8.13739967]
[316.17745972 14.12188053]
[302.42297363 20.10635948]
[288.66848755 26.09084129]
[280.08493042 38.26342392]
[264.34371948 36.67437363]
[250.58921814 42.65885162]
[242.00566101 54.83143234]
[226.26446533 53.24238205]
[212.50996399 59.22686386]
[198.75547791 65.21134186]
[185.00099182 71.19582367]
[189.29975891 91.03320312]
[189.03088379 111.32923126]
[184.20812988 131.04577637]
[175.07817078 149.17434692]
[162.10801697 164.78767395]
[145.96105957 177.08715820]
[127.46323395 185.44366455]
[107.56067657 189.42977905]
[87.27138519 188.84161377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 23]
[2 22]
[4 20]
[5 19]
[6 18]
[8 16]
[9 15]
[10 14]
[51 101]
[52 100]
[53 99]
[54 98]
[56 96]
[57 95]
[59 93]
[60 92]
[61 91]
[62 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
