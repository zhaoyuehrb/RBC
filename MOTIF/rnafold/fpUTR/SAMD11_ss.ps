%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGAUCCCUGCGGCGUUCGCGAGGGUGGGACGGGAAGCGGGCUGGGAAGUCGGGCCGAGGGAAAAGUCUGAAGACGCUU\
) } def
/len { sequence length } bind def

/coor [
[62.70154572 205.27691650]
[55.45485687 218.41027832]
[48.20816803 231.54365540]
[40.96147919 244.67703247]
[41.82028961 261.05368042]
[27.92160225 269.75759888]
[13.56319332 261.83499146]
[13.51576424 245.43589783]
[27.82810402 237.43034363]
[35.07479477 224.29696655]
[42.32148361 211.16358948]
[49.56817245 198.03022766]
[56.30015945 184.62573242]
[62.50732040 170.97029114]
[68.71447754 157.31484985]
[74.92163849 143.65939331]
[81.12879944 130.00395203]
[87.33596039 116.34851074]
[80.86517334 102.81600189]
[66.33932495 99.07438660]
[51.81347275 95.33276367]
[36.16872025 100.24944305]
[24.27301025 88.96121216]
[28.36363220 73.08043671]
[44.23250580 68.94390869]
[55.55509186 80.80691528]
[70.08094025 84.54853058]
[84.60678864 88.29015350]
[98.89051056 83.71025848]
[108.53232574 72.21959686]
[118.17413330 60.72892761]
[127.81594849 49.23826218]
[119.85180664 34.62858963]
[118.00358582 18.12841415]
[122.51834106 2.18811941]
[132.70021057 -10.83540916]
[147.01754761 -19.02726364]
[163.33320618 -21.19605255]
[179.22363281 -17.04709816]
[187.94601440 -29.25037956]
[196.66839600 -41.45365906]
[198.39837646 -57.18000031]
[212.09388733 -63.03511810]
[220.81626892 -75.23839569]
[229.53865051 -87.44168091]
[238.26103210 -99.64495850]
[239.30923462 -116.01057434]
[254.12442017 -123.04212189]
[267.46597290 -113.50614166]
[265.60925293 -97.21244812]
[250.46430969 -90.92257690]
[241.74192810 -78.71929932]
[233.01954651 -66.51602173]
[224.29716492 -54.31273651]
[223.19105530 -39.45925903]
[208.87167358 -32.73128128]
[200.14929199 -20.52799797]
[191.42691040 -8.32471752]
[199.27879333 2.69163036]
[203.29080200 15.63540077]
[203.04516602 29.20756912]
[198.55213928 42.04129028]
[190.25045776 52.83955765]
[178.96453857 60.50626373]
[165.82263184 64.25748444]
[152.14402771 63.70158386]
[139.30661011 58.88007736]
[129.66481018 70.37074280]
[120.02298737 81.86141205]
[110.38117218 93.35207367]
[114.87448883 99.32318115]
[115.49111176 108.03814697]
[110.76763916 116.87172699]
[100.99140930 122.55567169]
[94.78424835 136.21112061]
[88.57708740 149.86656189]
[82.36992645 163.52200317]
[76.16276550 177.17744446]
[69.95560455 190.83290100]
[70.23326111 197.86734009]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[13 79]
[14 78]
[15 77]
[16 76]
[17 75]
[18 74]
[19 28]
[20 27]
[21 26]
[29 70]
[30 69]
[31 68]
[32 67]
[39 58]
[40 57]
[41 56]
[43 54]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
