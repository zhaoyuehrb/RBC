%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCGGACAGGUCAGGCCAAGGUCUCAGCCACGUGACUGUGUUCCGGCUCGGUAAAGAUGGCGGCGCCCAGGGCGGUAGCGUGAAACUUGGUGGAAGACGCUGACCAGUCGUGUUGGAAUCAAAACAGCGGGGACCCUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[275.01043701 383.31231689]
[285.87393188 369.12130737]
[278.70465088 355.94552612]
[271.53536987 342.76971436]
[264.36608887 329.59393311]
[257.19680786 316.41815186]
[249.46350098 303.56527710]
[241.18067932 291.05950928]
[232.89785767 278.55371094]
[219.41926575 272.21517944]
[218.24972534 256.43725586]
[209.96690369 243.93145752]
[201.68408203 231.42565918]
[193.40127563 218.91986084]
[185.11845398 206.41406250]
[176.83563232 193.90826416]
[167.50144958 182.16633606]
[157.18595886 171.27639771]
[146.87046814 160.38647461]
[136.55497742 149.49653625]
[126.23947906 138.60661316]
[115.92398834 127.71667480]
[106.75747681 131.24298096]
[96.95303345 131.81985474]
[87.43624115 129.39285278]
[79.10549927 124.19106293]
[72.74726868 116.70556641]
[68.96176910 107.64302063]
[68.10637665 97.85894012]
[70.26183319 88.27699280]
[75.22466278 79.80172729]
[66.14704895 67.86033630]
[57.06943893 55.91893768]
[47.99182510 43.97753906]
[38.91421127 32.03614426]
[24.40309143 25.73233795]
[22.86048508 10.91783047]
[13.78287315 -1.02356577]
[4.70525932 -12.96496201]
[-4.37235355 -24.90635872]
[-13.44996738 -36.84775543]
[-27.96108627 -43.15156174]
[-29.50369263 -57.96606827]
[-38.58130646 -69.90746307]
[-51.27811432 -72.43804169]
[-58.58779144 -82.63305664]
[-57.01269531 -94.67337036]
[-65.82947540 -106.80863190]
[-74.64624786 -118.94388580]
[-83.59397125 -130.98291016]
[-92.67158508 -142.92431641]
[-101.74919891 -154.86570740]
[-116.26031494 -161.16950989]
[-117.80292511 -175.98402405]
[-126.88053894 -187.92541504]
[-142.20397949 -193.76701355]
[-144.53923035 -209.99903870]
[-131.48397827 -219.92338562]
[-116.46835327 -213.33071899]
[-114.93914032 -197.00303650]
[-105.86152649 -185.06163025]
[-91.99970245 -179.61195374]
[-89.80780029 -163.94331360]
[-80.73018646 -152.00192261]
[-71.65257263 -140.06053162]
[-65.05181885 -136.61355591]
[-62.51099777 -127.76066589]
[-53.69421768 -115.62540436]
[-44.87743759 -103.49015045]
[-28.50143051 -97.27042389]
[-26.63990974 -78.98507690]
[-17.56229591 -67.04367828]
[-3.70046830 -61.59400177]
[-1.50857091 -45.92536545]
[7.56904221 -33.98397064]
[16.64665604 -22.04257584]
[25.72426796 -10.10117912]
[34.80188370 1.84021699]
[48.66371155 7.28989506]
[50.85560608 22.95853043]
[59.93321991 34.89992905]
[69.01083374 46.84132385]
[78.08844757 58.78271866]
[87.16606140 70.72411346]
[107.18617249 68.85282898]
[124.36282349 79.30603027]
[131.89944458 97.94754028]
[126.81391907 117.40118408]
[137.12940979 128.29112244]
[147.44490051 139.18104553]
[157.76039124 150.07098389]
[168.07588196 160.96090698]
[178.39137268 171.85084534]
[178.40991211 156.85086060]
[187.10607910 144.62887573]
[201.27124023 139.69447327]
[215.67883301 143.86831665]
[225.01289368 155.61035156]
[225.82939148 170.58810425]
[217.82707214 183.27522278]
[203.95855713 188.99049377]
[189.34143066 185.62545776]
[197.62425232 198.13124084]
[205.90705872 210.63703918]
[214.18988037 223.14283752]
[222.47270203 235.64863586]
[230.75552368 248.15443420]
[244.82655334 255.38746643]
[245.40365601 270.27087402]
[253.68647766 282.77667236]
[261.96929932 295.28247070]
[266.08273315 297.13662720]
[269.05282593 299.94744873]
[270.71691895 303.22229004]
[271.09484863 306.46725464]
[270.37258911 309.24887085]
[277.54187012 322.42465210]
[284.71115112 335.60043335]
[291.88043213 348.77624512]
[299.04971313 361.95202637]
[311.46298218 360.11206055]
[323.81307983 362.19400024]
[334.89352417 367.97912598]
[343.62673950 376.88766479]
[349.16864014 388.03689575]
[350.99032593 400.32870483]
[348.92852783 412.55761719]
[343.20001221 423.52905273]
[334.37899780 432.17605591]
[340.67733765 445.78970337]
[346.97567749 459.40332031]
[353.27401733 473.01696777]
[359.57235718 486.63058472]
[371.71054077 498.46701050]
[363.69686890 513.40747070]
[347.12188721 509.84292603]
[345.95870972 492.92892456]
[339.66040039 479.31530762]
[333.36206055 465.70166016]
[327.06372070 452.08804321]
[320.76538086 438.47439575]
[303.16110229 438.89251709]
[287.07669067 431.59677124]
[275.72756958 417.99560547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 120]
[3 119]
[4 118]
[5 117]
[6 116]
[7 111]
[8 110]
[9 109]
[11 107]
[12 106]
[13 105]
[14 104]
[15 103]
[16 102]
[17 93]
[18 92]
[19 91]
[20 90]
[21 89]
[22 88]
[31 84]
[32 83]
[33 82]
[34 81]
[35 80]
[37 78]
[38 77]
[39 76]
[40 75]
[41 74]
[43 72]
[44 71]
[47 69]
[48 68]
[49 67]
[50 65]
[51 64]
[52 63]
[54 61]
[55 60]
[129 141]
[130 140]
[131 139]
[132 138]
[133 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
