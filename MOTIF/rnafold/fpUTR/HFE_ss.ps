%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAGUUCUGAAAGACCUGUUGCUUUUCACCAGGAAGUUUUACUGGGCAUCUCCUGAGCCUAGGCAAUAGCUGUAGGGUGACUUCUGGAGCCAUCCCCGUUUCCCCGCCCCCCAAAAGAAGCGGAGAUUUAACGGGGACGUGCGGCCAGAGCUGGGGAA\
) } def
/len { sequence length } bind def

/coor [
[121.78173828 261.84533691]
[118.81161499 276.66659546]
[111.60334015 289.95312500]
[100.79786682 300.52352905]
[87.35601044 307.43783569]
[72.47301483 310.08129883]
[57.47225952 308.21881104]
[43.68761063 302.01602173]
[32.34478378 292.02441406]
[24.45237541 279.13250732]
[20.71217346 264.48663330]
[21.45675659 249.38903809]
[26.61991501 235.18223572]
[35.74254227 223.12947083]
[48.01346588 214.30247498]
[62.34155655 209.48612976]
[77.45278168 209.10871887]
[81.49973297 194.66494751]
[85.54668427 180.22119141]
[77.70992279 169.95617676]
[77.22481537 156.85571289]
[84.49378967 145.71266174]
[97.04121399 140.73350525]
[101.36921692 126.37146759]
[90.06150818 123.04548645]
[81.87723541 115.40790558]
[78.19685364 105.46465302]
[79.31268311 95.51589966]
[66.72996521 87.35040283]
[54.14725494 79.18491364]
[41.56453705 71.01941681]
[28.98182297 62.85392380]
[15.30950260 69.71066284]
[0.14097689 68.80919647]
[-12.45599937 60.49159241]
[-19.15351677 47.07521439]
[-18.24245262 32.20795059]
[-30.82516861 24.04245567]
[-43.40788269 15.87696266]
[-55.99059677 7.71146870]
[-72.66651917 14.72240639]
[-90.06993103 10.39574528]
[-101.32311249 -3.36551809]
[-102.09471893 -20.96859360]
[-114.98644257 -28.63694191]
[-127.87815857 -36.30529022]
[-140.76988220 -43.97363663]
[-153.66160583 -51.64198685]
[-166.55331421 -59.31033325]
[-175.57846069 -61.02276611]
[-179.61968994 -67.25617218]
[-192.35932922 -75.17459869]
[-208.75848389 -75.16674042]
[-216.72947693 -89.49835968]
[-208.07244873 -103.42631531]
[-191.69299316 -102.62271881]
[-184.44090271 -87.91423798]
[-171.70126343 -79.99581146]
[-158.88497925 -72.20205688]
[-145.99325562 -64.53370667]
[-133.10153198 -56.86535645]
[-120.20981598 -49.19701004]
[-107.31809235 -41.52865982]
[-94.42637634 -33.86031342]
[-84.05456543 -40.27749252]
[-71.86434174 -41.66438675]
[-60.17903137 -37.69451904]
[-51.25230408 -29.06832123]
[-46.83351135 -17.39039230]
[-47.82510376 -4.87124586]
[-35.24238968 3.29424787]
[-22.65967369 11.45974159]
[-10.07695866 19.62523651]
[3.12992263 12.73728466]
[18.11094856 13.38909435]
[30.83839226 21.50565338]
[37.84029007 34.99158096]
[37.14731598 50.27120972]
[49.73003387 58.43670273]
[62.31274796 66.60219574]
[74.89546204 74.76769257]
[87.47817993 82.93318176]
[104.11791229 77.45891571]
[120.67578125 86.55918121]
[125.66728973 106.20638275]
[140.58099365 104.59964752]
[155.49468994 102.99291229]
[170.40838623 101.38617706]
[185.32208252 99.77944946]
[199.90344238 88.57208252]
[215.67045593 96.22798920]
[230.54997253 94.33057404]
[240.97467041 80.31272888]
[257.97451782 78.18795776]
[271.00543213 88.78361511]
[285.84506226 86.59622955]
[300.68472290 84.40884399]
[315.52438354 82.22145844]
[330.36404419 80.03408051]
[345.20370483 77.84669495]
[360.04333496 75.65930939]
[374.88299561 73.47192383]
[389.65228271 70.85118866]
[404.33856201 67.79934692]
[416.27587891 57.41615295]
[430.31115723 62.40217972]
[444.99740601 59.35033798]
[459.68368530 56.29850006]
[474.36993408 53.24665833]
[478.00598145 38.42296600]
[487.72033691 26.65036011]
[501.58419800 20.26630783]
[516.84484863 20.53836250]
[530.47235107 27.41250992]
[539.76092529 39.52388000]
[542.86633301 54.46775818]
[539.17193604 69.27701569]
[529.41131592 81.01127625]
[515.52239990 87.34068298]
[500.26290894 87.00853729]
[486.66256714 80.08078003]
[477.42178345 67.93292236]
[462.73550415 70.98476410]
[448.04925537 74.03659821]
[433.36297607 77.08843994]
[422.47610474 87.25334930]
[407.39038086 82.48561096]
[392.70413208 85.53745270]
[390.46188354 88.32021332]
[386.73803711 90.13202667]
[382.01473999 90.27835846]
[377.07040405 88.31157684]
[362.23074341 90.49896240]
[347.39108276 92.68634796]
[332.55142212 94.87373352]
[317.71176147 97.06111908]
[302.87210083 99.24850464]
[288.03247070 101.43588257]
[273.19281006 103.62326813]
[267.01010132 114.96169281]
[255.24331665 120.74095154]
[242.10569763 118.64124298]
[232.44738770 109.21008301]
[217.56788635 111.10750580]
[209.89262390 120.49810028]
[197.47567749 122.17507172]
[186.92881775 114.69314575]
[172.01512146 116.29988098]
[157.10142517 117.90661621]
[142.18772888 119.51334381]
[127.27402496 121.12007904]
[115.73126221 130.69946289]
[111.40325928 145.06152344]
[119.95919037 160.29208374]
[114.97514343 176.68321228]
[99.99044037 184.26814270]
[95.94348907 198.71189880]
[91.89653778 213.15567017]
[104.61175537 221.32969666]
[114.35146332 232.88951111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 158]
[18 157]
[19 156]
[23 153]
[24 152]
[28 82]
[29 81]
[30 80]
[31 79]
[32 78]
[37 73]
[38 72]
[39 71]
[40 70]
[44 64]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[51 58]
[52 57]
[85 151]
[86 150]
[87 149]
[88 148]
[89 147]
[91 144]
[92 143]
[95 139]
[96 138]
[97 137]
[98 136]
[99 135]
[100 134]
[101 133]
[102 132]
[103 128]
[104 127]
[106 125]
[107 124]
[108 123]
[109 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
