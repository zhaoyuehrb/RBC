%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUCGCGAAAACCCGGAAGCGGAUCGCGUGGAGUGACGGUCCCACGGCAGCGCGAUUGACUUCUAAAGACUCUUGGUAUGUGAGGAAGAAACCUGGAAGAGGAAGAGGAAAGCAAAGGAGUCAGGG\
) } def
/len { sequence length } bind def

/coor [
[107.83551788 149.11093140]
[93.12310791 146.18775940]
[83.57310486 134.62068176]
[83.48800659 119.62092590]
[92.90593719 107.94636536]
[77.93373108 108.85905457]
[62.96152115 109.77175140]
[47.98931503 110.68444061]
[33.01710510 111.59712982]
[27.68553734 123.03399658]
[18.02621841 131.04017639]
[5.93937111 134.12135315]
[-6.23148823 131.74426270]
[-16.15391350 124.42776489]
[-21.95351028 113.63117981]
[-36.95240021 113.81382751]
[-51.95128632 113.99647522]
[-57.36070633 123.40069580]
[-66.15228271 129.61770630]
[-76.66171265 131.55419922]
[-86.93421936 128.91941833]
[-95.08812714 122.26647186]
[-99.65953827 112.87791443]
[-114.63174438 111.96522522]
[-129.60395813 111.05253601]
[-144.57615662 110.13984680]
[-159.54837036 109.22715759]
[-174.52058411 108.31446838]
[-189.50279236 107.58415222]
[-204.49278259 107.03632355]
[-217.17530823 116.86145782]
[-232.72966003 112.93187714]
[-239.22387695 98.26202393]
[-231.67614746 84.10534668]
[-215.87644958 81.32164764]
[-203.94494629 92.04633331]
[-188.95495605 92.59416199]
[-182.08477783 89.66425323]
[-173.60789490 93.34226227]
[-158.63568115 94.25495148]
[-143.66346741 95.16764069]
[-128.69126892 96.08032990]
[-113.71905518 96.99301910]
[-98.74684906 97.90570831]
[-85.29046631 83.94228363]
[-65.59944153 84.21804810]
[-52.13393402 98.99758911]
[-37.13504410 98.81494141]
[-22.13615608 98.63229370]
[-12.69837666 83.80313110]
[3.86930180 77.47914886]
[21.08787155 82.33252716]
[32.10441589 96.62491608]
[47.07662201 95.71222687]
[62.04883194 94.79953766]
[77.02104187 93.88684845]
[91.99324799 92.97415924]
[106.83339691 90.79014587]
[121.43373871 87.35065460]
[136.03407288 83.91117096]
[150.63441467 80.47167969]
[165.23475647 77.03219604]
[179.83509827 73.59270477]
[194.43544006 70.15322113]
[209.03578186 66.71372986]
[223.63612366 63.27424240]
[226.95144653 45.74889374]
[237.50407410 31.43428802]
[253.17207336 23.13238907]
[270.83789062 22.44375610]
[287.00860596 29.45916557]
[298.50659180 42.75061798]
[312.81692505 38.25455093]
[327.12725830 33.75848389]
[341.43756104 29.26241493]
[355.74789429 24.76634598]
[355.94064331 9.65276623]
[360.78887939 -4.64189529]
[369.80581665 -16.72176170]
[382.09832764 -25.41133881]
[396.45535278 -29.86990547]
[411.46707153 -29.67284012]
[425.66354370 -24.85202408]
[437.65850830 -15.89148903]
[446.28475952 -3.67884994]
[460.59509277 -8.17491817]
[474.90542603 -12.67098618]
[481.99414062 -26.79634285]
[497.02084351 -31.69263268]
[511.07046509 -24.45497322]
[515.80761719 -9.37733936]
[508.42181396 4.59497452]
[493.29492188 9.17244434]
[479.40148926 1.63933742]
[465.09115601 6.13540554]
[450.78085327 10.63147354]
[450.68914795 25.58314896]
[445.97415161 39.79367447]
[437.08569336 51.86740494]
[424.88403320 60.61445999]
[410.55688477 65.16799164]
[395.50344849 65.07006073]
[381.19808960 60.31768036]
[369.04574585 51.36431503]
[360.24395752 39.07667160]
[345.93362427 43.57273865]
[331.62332153 48.06880569]
[317.31298828 52.56487656]
[303.00265503 57.06094360]
[302.53128052 69.45130157]
[298.23474121 81.10865021]
[290.52175903 90.87986755]
[280.13986206 97.79335022]
[268.10284424 101.15566254]
[255.59185791 100.62102509]
[243.83943176 96.22684479]
[234.00816345 88.39150238]
[227.07560730 77.87458038]
[212.47526550 81.31407166]
[197.87492371 84.75355530]
[183.27458191 88.19304657]
[168.67424011 91.63253021]
[154.07389832 95.07202148]
[139.47355652 98.51150513]
[124.87322235 101.95099640]
[110.27288055 105.39048004]
[122.65508270 113.85695648]
[126.89484406 128.24530029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 57]
[6 56]
[7 55]
[8 54]
[9 53]
[15 49]
[16 48]
[17 47]
[23 44]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[29 37]
[30 36]
[58 126]
[59 125]
[60 124]
[61 123]
[62 122]
[63 121]
[64 120]
[65 119]
[66 118]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
