%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGGGGGCGGGCGGAGGAAGUGAGCGCAGCGGGGAGGAAUGCGAGCGGGCGGGGCGUGUCGGCCCGGGGCGGCGGGGACAGCGGCGGGGACAGCGGCGGGCGGCUGGGACGGCGGGUGCGGCGGGGCCGAGCCCGCACG\
) } def
/len { sequence length } bind def

/coor [
[87.51316071 102.41975403]
[72.51316071 102.41975403]
[57.51316071 102.41975403]
[42.51316071 102.41975403]
[27.51316071 102.41975403]
[12.51316166 102.41975403]
[-3.16711736 112.00424194]
[-18.03011894 102.73737335]
[-33.02644730 103.06920624]
[-48.02277756 103.40103912]
[-63.01910782 103.73287201]
[-76.64473724 111.77356720]
[-89.54006195 104.31970978]
[-104.53638458 104.65154266]
[-107.93924713 112.46156311]
[-113.49571228 118.87435913]
[-120.68397522 123.31866455]
[-128.83815002 125.40661621]
[-137.20991516 124.96752930]
[-145.03723145 122.06166077]
[-151.61367798 116.97291565]
[-156.35217285 110.18115997]
[-158.83741760 102.31710815]
[-173.74574280 100.66120148]
[-186.01350403 110.26013184]
[-201.10906982 108.36843109]
[-210.18458557 96.61383057]
[-225.09291077 94.95792389]
[-240.00122070 93.30200958]
[-256.64373779 101.09690094]
[-270.39288330 90.24589539]
[-285.33419800 88.92019653]
[-300.27548218 87.59449005]
[-310.36810303 99.38088989]
[-325.46881104 102.95124817]
[-339.77114868 96.93270111]
[-347.77554321 83.63949585]
[-346.40414429 68.18314362]
[-336.18429565 56.50692368]
[-321.04571533 53.10058594]
[-306.80950928 59.27393341]
[-298.94979858 72.65319061]
[-284.00848389 73.97888947]
[-269.06719971 75.30459595]
[-259.54559326 67.76369476]
[-247.04031372 68.79711151]
[-238.34532166 78.39369202]
[-223.43699646 80.04959869]
[-208.52868652 81.70551300]
[-197.09495544 72.22893524]
[-181.95220947 73.69588470]
[-172.08982849 85.75288391]
[-157.18150330 87.40879059]
[-141.70529175 71.93414307]
[-119.56431580 72.71805573]
[-104.86821747 89.65521240]
[-89.87188721 89.32338715]
[-77.31890106 81.30642700]
[-63.35093689 88.73654175]
[-48.35461044 88.40470886]
[-33.35828018 88.07287598]
[-18.36194992 87.74105072]
[-9.73101425 79.19511414]
[2.81191254 78.84170532]
[12.51316166 87.41975403]
[27.51316071 87.41975403]
[42.51316071 87.41975403]
[57.51316071 87.41975403]
[72.51316071 87.41975403]
[87.51316071 87.41975403]
[99.82155609 78.84633636]
[105.02109528 64.77634430]
[102.54714203 49.14975739]
[114.21646118 39.89360809]
[119.41600037 25.82361031]
[111.50726318 12.33339310]
[114.17112732 -3.07562590]
[126.14978027 -13.12777805]
[141.78727722 -13.07674599]
[153.70007324 -2.94662333]
[156.26330566 12.47945404]
[148.26669312 25.91776466]
[133.48599243 31.02314949]
[128.28645325 45.09314728]
[131.13230896 59.71334839]
[119.09108734 69.97588348]
[113.89154816 84.04587555]
[118.95507812 89.57857513]
[126.34947205 76.52778625]
[141.04649353 79.52738953]
[142.73530579 94.43201447]
[129.08213806 100.64395905]
[134.14566040 106.17665100]
[148.62013245 102.24096680]
[163.09460449 98.30528259]
[177.56907654 94.36959839]
[182.95034790 79.81550598]
[195.87721252 71.23204803]
[211.37904358 71.91974640]
[223.49505615 81.61415863]
[227.56642151 96.58759308]
[222.02758789 111.08245850]
[209.00836182 119.52516937]
[193.51490784 118.66934967]
[181.50476074 108.84407043]
[167.03028870 112.77975464]
[152.55581665 116.71543884]
[138.08134460 120.65112305]
[135.79530334 127.79423523]
[145.88151550 138.89686584]
[131.22322083 142.08044434]
[128.93716431 149.22355652]
[138.43702698 160.83186340]
[148.06471252 172.33436584]
[157.81904602 183.72967529]
[167.57337952 195.12498474]
[177.32771301 206.52029419]
[187.08204651 217.91560364]
[196.83638000 229.31089783]
[211.68840027 234.76322937]
[214.08686829 249.46345520]
[223.84120178 260.85876465]
[233.59553528 272.25405884]
[243.34986877 283.64938354]
[258.24319458 291.75030518]
[254.58175659 308.30413818]
[237.66125488 309.36837769]
[231.95455933 293.40371704]
[222.20022583 282.00839233]
[212.44589233 270.61309814]
[202.69157410 259.21780396]
[188.53723145 254.58052063]
[185.44107056 239.06523132]
[175.68673706 227.66992188]
[165.93240356 216.27462769]
[156.17807007 204.87931824]
[146.42373657 193.48400879]
[136.66940308 182.08869934]
[129.87649536 179.02856445]
[126.82872772 170.33172607]
[117.32886505 158.72341919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[5 66]
[6 65]
[8 62]
[9 61]
[10 60]
[11 59]
[13 57]
[14 56]
[23 53]
[24 52]
[27 49]
[28 48]
[29 47]
[31 44]
[32 43]
[33 42]
[71 87]
[72 86]
[74 84]
[75 83]
[93 108]
[94 107]
[95 106]
[96 105]
[112 141]
[113 140]
[114 138]
[115 137]
[116 136]
[117 135]
[118 134]
[119 133]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
