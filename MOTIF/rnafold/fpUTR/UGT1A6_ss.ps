%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGUAAAAUUCAGAGCAAGGGAGAGGUAGACAGGACCUGUGAAAAGCAGUGGUUAGUUUAGGGAAAAUACCUAGGAGCCCUGUGAUUUGGAGAGUGAAAACUCUUUAUUACCGUUGUUACUUUAACUCUUUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[118.53259277 425.29513550]
[116.85311890 410.38946533]
[115.17365265 395.48376465]
[113.49418640 380.57809448]
[111.81472015 365.67242432]
[110.13525391 350.76672363]
[108.45578766 335.86105347]
[99.34213257 324.08010864]
[105.48565674 309.50039673]
[103.80619049 294.59472656]
[102.12672424 279.68902588]
[92.54789734 275.62185669]
[85.49921417 267.85598755]
[82.32756042 257.77413940]
[83.68121338 247.21034241]
[89.37865448 238.11628723]
[98.42958069 232.20079041]
[97.75661469 217.21588135]
[97.08364105 202.23098755]
[96.41066742 187.24609375]
[95.73769379 172.26119995]
[87.43717957 159.89387512]
[94.54754639 145.76046753]
[93.87457275 130.77557373]
[83.35390472 126.60007477]
[74.99915314 118.96349335]
[69.89739990 108.85946655]
[54.91250610 109.53244019]
[39.92760849 110.20541382]
[24.94271278 110.87838745]
[15.58294582 123.40550995]
[0.34891722 126.93515015]
[-13.56632900 119.80073547]
[-19.59243965 105.37090302]
[-14.88406849 90.45898438]
[-1.66436529 82.10593414]
[13.82472992 84.25580597]
[24.26974106 95.89349365]
[39.25463867 95.22052002]
[54.23953247 94.54754639]
[69.22442627 93.87457275]
[74.40540314 79.05245209]
[86.60471344 67.91542816]
[103.41936493 63.69744110]
[101.73989868 48.79175949]
[100.06043243 33.88607407]
[87.98786163 24.04275513]
[86.49698639 8.90234852]
[95.95548248 -2.54633570]
[94.27601624 -17.45201874]
[92.59654999 -32.35770035]
[90.91708374 -47.26338577]
[86.81666565 -55.52025604]
[89.37102509 -62.52185059]
[88.02643585 -77.46146393]
[86.68184662 -92.40107727]
[85.33725739 -107.34069061]
[81.77916718 -113.07124329]
[81.72180176 -118.85829163]
[84.28294373 -122.97833252]
[83.60997009 -137.96322632]
[82.93699646 -152.94812012]
[82.26402283 -167.93302917]
[81.59104919 -182.91792297]
[80.91807556 -197.90281677]
[68.39096069 -207.26258850]
[64.86131287 -222.49661255]
[71.99573517 -236.41184998]
[86.42556000 -242.43797302]
[101.33747864 -237.72959900]
[109.69052887 -224.50988770]
[107.54066467 -209.02079773]
[95.90297699 -198.57579041]
[96.57595062 -183.59089661]
[97.24891663 -168.60598755]
[97.92189026 -153.62109375]
[98.59486389 -138.63619995]
[99.26783752 -123.65130615]
[100.27687073 -108.68527985]
[101.62145996 -93.74566650]
[102.96604919 -78.80605316]
[104.31063843 -63.86643982]
[105.82276154 -48.94285202]
[107.50223541 -34.03717041]
[109.18170166 -19.13148689]
[110.86116791 -4.22580290]
[122.63009644 4.83112526]
[124.54564667 19.92368317]
[114.96611023 32.20660782]
[116.64557648 47.11228943]
[118.32505035 62.01797485]
[130.46029663 70.83475494]
[145.15542603 67.82591248]
[159.85057068 64.81707001]
[174.54570007 61.80822754]
[189.24082947 58.79938889]
[203.93595886 55.79054642]
[218.63108826 52.78170395]
[230.53404236 41.50112152]
[246.17564392 46.42784500]
[249.46513367 62.49368668]
[237.01858521 73.17148590]
[221.63992310 67.47683716]
[206.94479370 70.48567963]
[192.24966431 73.49452209]
[177.55453491 76.50335693]
[162.85940552 79.51219940]
[148.16427612 82.52104187]
[133.46914673 85.52988434]
[135.36076355 97.53688049]
[133.19160461 109.14974213]
[127.43430328 119.07292938]
[118.94842529 126.27661896]
[108.85946655 130.10260010]
[109.53244019 145.08749390]
[117.88109589 158.52664185]
[110.72258759 171.58822632]
[111.39556122 186.57312012]
[112.06853485 201.55801392]
[112.74150848 216.54292297]
[113.41448212 231.52781677]
[128.93916321 244.15898132]
[130.28286743 263.82537842]
[117.03240204 278.00955200]
[118.71186829 292.91525269]
[120.39134216 307.82092285]
[129.62512207 320.66802979]
[123.36147308 334.18157959]
[125.04093933 349.08724976]
[126.72040558 363.99295044]
[128.39987183 378.89862061]
[130.07934570 393.80432129]
[131.75880432 408.70999146]
[133.43827820 423.61566162]
[145.94927979 433.27230835]
[147.88473511 448.95761108]
[138.09638977 461.36584473]
[122.39147186 463.13534546]
[110.08744049 453.21636963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[5 130]
[6 129]
[7 128]
[9 126]
[10 125]
[11 124]
[17 121]
[18 120]
[19 119]
[20 118]
[21 117]
[23 115]
[24 114]
[27 41]
[28 40]
[29 39]
[30 38]
[44 91]
[45 90]
[46 89]
[49 86]
[50 85]
[51 84]
[52 83]
[54 82]
[55 81]
[56 80]
[57 79]
[60 78]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
