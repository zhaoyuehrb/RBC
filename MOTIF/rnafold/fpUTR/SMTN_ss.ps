%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGUCUGGCCGAUUUGGGGACGCGGGCAGUCGCUUCCGGCCCCGGCUCCCGCACAUUCUUGAGGAUUGGGCCGGGG\
) } def
/len { sequence length } bind def

/coor [
[82.55589294 109.67317963]
[67.66526031 111.48123169]
[52.77462769 113.28928375]
[37.88399124 115.09733582]
[25.11706734 124.44165039]
[11.54996395 118.29486084]
[-3.34066939 120.10291290]
[-18.23130226 121.91096497]
[-30.99822807 131.25527954]
[-44.56533051 125.10849762]
[-59.45596313 126.91654205]
[-74.34659576 128.72459412]
[-79.71432495 143.05798340]
[-91.13598633 153.24641418]
[-105.98698425 156.94866943]
[-120.85465240 153.31396484]
[-132.32250977 143.17756653]
[-137.75534058 128.86872864]
[-135.90470886 113.67551422]
[-127.19588470 101.08921814]
[-113.63008118 94.00207520]
[-98.32462311 94.04266357]
[-84.79660034 101.20165253]
[-76.15464783 113.83396149]
[-61.26401520 112.02590942]
[-46.37338257 110.21786499]
[-34.67153549 101.00286865]
[-20.03935242 107.02033234]
[-5.14871979 105.21228027]
[9.74191380 103.40422821]
[21.44375992 94.18923950]
[36.07594299 100.20670319]
[50.96657562 98.39865112]
[65.85720825 96.59059906]
[80.74784088 94.78254700]
[84.57324982 87.35552216]
[91.10484314 82.14661407]
[99.19683075 80.06956482]
[107.42971802 81.48873901]
[114.35926819 86.15518951]
[118.76989746 93.25031281]
[133.75773621 93.85430145]
[148.74557495 94.45829010]
[163.73339844 95.06227875]
[178.72123718 95.66626740]
[193.70907593 96.27025604]
[208.69691467 96.87424469]
[223.68473816 97.47824097]
[238.67257690 98.08222961]
[253.66954041 97.78017426]
[268.62091064 96.57317352]
[281.75372314 87.75051117]
[295.06231689 94.43859863]
[310.01367188 93.23159790]
[320.06130981 81.03240204]
[335.80004883 79.59420776]
[347.89233398 89.77027130]
[349.16403198 105.52330780]
[338.86071777 117.50733185]
[323.09509277 118.61242676]
[311.22067261 108.18296051]
[296.26931763 109.38996124]
[284.20590210 118.12628937]
[269.82788086 111.52452850]
[254.87654114 112.73152924]
[252.22534180 115.44492340]
[248.01342773 116.85764313]
[242.94535828 116.19581604]
[238.06858826 113.07006073]
[223.08074951 112.46607208]
[208.09292603 111.86208344]
[193.10508728 111.25809479]
[178.11724854 110.65410614]
[163.12940979 110.05011749]
[148.14158630 109.44612885]
[133.15374756 108.84214020]
[118.16590881 108.23815155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 35]
[2 34]
[3 33]
[4 32]
[6 30]
[7 29]
[8 28]
[10 26]
[11 25]
[12 24]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 65]
[51 64]
[53 62]
[54 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
