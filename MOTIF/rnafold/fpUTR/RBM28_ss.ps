%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCGGAAUCUCUCGGCGUGUGAGCUUGGUUGUCCUACCAAAGCCAGCGUUUCGGCUCGCGUGCGCCGGCCUAGUUUGCUCGCGUCCUCACGCGCUUUGGGUUUCCCGGUCUC\
) } def
/len { sequence length } bind def

/coor [
[92.63711548 476.32785034]
[82.56027222 464.64620972]
[80.42128754 449.36785889]
[86.90270996 435.36804199]
[99.93634033 427.11407471]
[99.93634033 412.11407471]
[99.93634033 397.11407471]
[99.93634033 382.11407471]
[99.73322296 367.11544800]
[99.32703400 352.12094116]
[91.24792480 339.60784912]
[98.60868835 325.60324097]
[98.20249176 310.60873413]
[97.79630280 295.61422729]
[86.83995056 285.58956909]
[86.21441650 270.38879395]
[96.80349731 258.96472168]
[96.39730072 243.97023010]
[95.99111176 228.97573853]
[95.58492279 213.98123169]
[95.17873383 198.98674011]
[94.77254486 183.99223328]
[94.36634827 168.99774170]
[93.96015930 154.00323486]
[93.55397034 139.00874329]
[93.14778137 124.01423645]
[76.27548218 116.39331818]
[67.41203308 97.27121735]
[53.33214188 92.09851837]
[39.25225449 86.92582703]
[25.17236710 81.75312805]
[11.09248066 76.58043671]
[-3.14406204 83.44311523]
[-18.03569412 78.15021515]
[-24.74747658 63.84191132]
[-19.29742622 49.00707245]
[-4.91896152 42.44694138]
[9.85742855 48.05353165]
[16.26517487 62.50054932]
[30.34506226 67.67324066]
[44.42494965 72.84593964]
[58.50483704 78.01863098]
[72.58472443 83.19132996]
[83.19132996 72.58472443]
[78.01863098 58.50483704]
[72.84593964 44.42494965]
[67.67324066 30.34506226]
[52.70830154 26.24259949]
[43.03908539 14.10645962]
[42.38360596 -1.39676452]
[50.99390793 -14.30576706]
[65.55915070 -19.65677261]
[80.47870636 -15.39221191]
[90.01570129 -3.15189314]
[90.50296021 12.35752964]
[81.75312805 25.17236710]
[86.92582703 39.25225449]
[92.09851837 53.33214188]
[97.27121735 67.41203308]
[106.82766724 71.98256683]
[113.29920959 78.86312103]
[124.73164368 69.15232849]
[136.16407776 59.44153214]
[147.59649658 49.73073959]
[159.02893066 40.01994324]
[164.53787231 25.18882561]
[179.24714661 22.84644127]
[190.67958069 13.13564682]
[196.18852234 -1.69547224]
[210.89778137 -4.03785658]
[222.33021545 -13.74865150]
[233.76264954 -23.45944595]
[241.92031860 -38.32177353]
[258.46008301 -34.59720993]
[259.45974731 -17.67276001]
[243.47344971 -12.02701473]
[232.04101562 -2.31622028]
[220.60858154 7.39457417]
[215.91735840 21.53111267]
[200.39036560 24.56807709]
[188.95794678 34.27887344]
[184.26672363 48.41540909]
[168.73973083 51.45237732]
[157.30729675 61.16316986]
[145.87486267 70.87396240]
[134.44242859 80.58475494]
[123.01000214 90.29555511]
[122.80453491 110.17790985]
[108.14228058 123.60804749]
[108.54846954 138.60255432]
[108.95465851 153.59704590]
[109.36084747 168.59155273]
[109.76704407 183.58604431]
[110.17323303 198.58055115]
[110.57942200 213.57504272]
[110.98561096 228.56954956]
[111.39179993 243.56404114]
[111.79799652 258.55853271]
[122.99002838 269.39257812]
[123.18836212 284.60491943]
[112.79080200 295.20803833]
[113.19699860 310.20254517]
[113.60318756 325.19702148]
[121.71134949 338.78262329]
[114.32153320 351.71475220]
[114.72772217 366.70925903]
[118.12545013 375.33526611]
[114.93634033 382.11407471]
[114.93634033 397.11407471]
[114.93634033 412.11407471]
[114.93634033 427.11407471]
[127.96996307 435.36804199]
[134.45138550 449.36785889]
[132.31240845 464.64620972]
[122.23556519 476.32785034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 111]
[6 110]
[7 109]
[8 108]
[9 106]
[10 105]
[12 103]
[13 102]
[14 101]
[17 98]
[18 97]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[44 59]
[45 58]
[46 57]
[47 56]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[67 81]
[68 80]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
