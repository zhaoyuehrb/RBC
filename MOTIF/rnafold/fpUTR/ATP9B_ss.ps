%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:31:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACCUCGCCGCUUGGCGGAGGCGGGGAAGGCCCGCAGGCGGCGCCUCAGCCGGGGUUGGCGCUGAGGGGAGAGGGCGGGGAAAAGGUGGCGAAUUGAGGGGAAAGUGGGAGGGGCGGGAAAGGGGCGGUCGGAAC\
) } def
/len { sequence length } bind def

/coor [
[86.80440521 170.46603394]
[97.94020081 159.48750305]
[96.56625366 144.55056763]
[95.19229889 129.61361694]
[93.81835175 114.67667389]
[79.69699860 109.61826324]
[69.15137482 120.28549957]
[64.95166016 135.53912354]
[50.50148392 139.15046692]
[39.95586395 149.81768799]
[29.41024208 160.48492432]
[18.86462021 171.15216064]
[8.31899738 181.81939697]
[-2.22662449 192.48663330]
[-3.57287002 208.47309875]
[-16.99049377 217.26780701]
[-32.18664169 212.12420654]
[-37.50413132 196.98803711]
[-28.86384010 183.47045898]
[-12.89385700 181.94100952]
[-2.34823561 171.27377319]
[8.19738674 160.60653687]
[18.74300766 149.93930054]
[29.28862953 139.27207947]
[39.83425140 128.60484314]
[43.27967834 114.11421204]
[58.48414612 109.73987579]
[69.02976990 99.07264709]
[79.15119934 89.16610718]
[90.41161346 87.18231201]
[98.36643982 91.63935852]
[105.31385040 78.34523773]
[112.26126099 65.05112457]
[119.20866394 51.75700760]
[109.03813171 40.54159164]
[103.32912445 26.54948044]
[102.75280762 11.47672081]
[107.35946655 -2.85676455]
[116.57471466 -14.72692108]
[129.27110291 -22.71293259]
[143.90596008 -25.86727715]
[158.70890808 -23.82811356]
[165.65631104 -37.12223053]
[165.19062805 -52.93658066]
[177.94277954 -60.63282394]
[184.89018250 -73.92694092]
[191.83760071 -87.22105408]
[198.78500366 -100.51517487]
[193.76127625 -122.98127747]
[210.16905212 -138.24327087]
[211.54299927 -153.18022156]
[212.91696167 -168.11715698]
[214.29090881 -183.05410767]
[198.60707092 -195.28056335]
[193.38923645 -214.32312012]
[200.54643250 -232.57232666]
[217.07740784 -242.84078979]
[217.07740784 -257.84078979]
[209.34010315 -271.64096069]
[217.07740784 -284.36822510]
[217.07740784 -299.36822510]
[209.34010315 -313.16842651]
[217.07740784 -325.89569092]
[217.07740784 -340.89569092]
[204.44514465 -349.90710449]
[199.55415344 -364.63320923]
[204.28511047 -379.41146851]
[216.81886292 -388.55938721]
[232.33593750 -388.55938721]
[244.86970520 -379.41146851]
[249.60066223 -364.63320923]
[244.70967102 -349.90710449]
[232.07740784 -340.89569092]
[232.07740784 -325.89569092]
[239.81471252 -313.16842651]
[232.07740784 -299.36822510]
[232.07740784 -284.36822510]
[239.81471252 -271.64096069]
[232.07740784 -257.84078979]
[232.07740784 -242.84078979]
[241.75050354 -238.66557312]
[249.48028564 -231.45001221]
[254.34576416 -222.01834106]
[255.75534058 -211.46083069]
[253.51860046 -201.00778198]
[247.87156677 -191.88610840]
[239.45207214 -185.17541504]
[229.22784424 -181.68014526]
[227.85389709 -166.74320984]
[226.47994995 -151.80625916]
[225.10598755 -136.86932373]
[229.43342590 -134.21255493]
[233.04455566 -130.64259338]
[235.75076294 -126.34590149]
[250.67097473 -127.89102173]
[265.59118652 -129.43614197]
[273.25344849 -142.92945862]
[287.39739990 -149.31134033]
[302.58438110 -146.12782288]
[312.97473145 -134.60304260]
[314.57312012 -119.16851044]
[306.76492310 -105.75911713]
[292.55258179 -99.53104401]
[277.40100098 -102.87911987]
[267.13629150 -114.51593781]
[252.21609497 -112.97081757]
[237.29588318 -111.42569733]
[232.48695374 -101.53509521]
[223.38795471 -95.00650024]
[212.07911682 -93.56776428]
[205.13171387 -80.27365112]
[198.18429565 -66.97953033]
[191.23689270 -53.68541718]
[192.19949341 -38.82194901]
[178.95042419 -30.17481995]
[172.00302124 -16.88070488]
[182.12907410 -5.89215517]
[187.89543152 7.92371559]
[188.58830261 22.90685463]
[184.10478210 37.24978256]
[174.96759033 49.21564102]
[162.26419067 57.34851456]
[147.51736450 60.65056229]
[132.50277710 58.70441818]
[125.55537415 71.99853516]
[118.60796356 85.29264832]
[111.66056061 98.58676147]
[108.75529480 113.30272675]
[110.12924194 128.23966980]
[111.50319672 143.17660522]
[112.87714386 158.11355591]
[125.82882690 166.87643433]
[130.06797791 181.92845154]
[123.59301758 196.16252136]
[109.46121216 202.85775757]
[94.34516907 198.85284424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 131]
[3 130]
[4 129]
[5 128]
[6 28]
[7 27]
[9 25]
[10 24]
[11 23]
[12 22]
[13 21]
[14 20]
[31 127]
[32 126]
[33 125]
[34 124]
[42 116]
[43 115]
[45 113]
[46 112]
[47 111]
[48 110]
[50 91]
[51 90]
[52 89]
[53 88]
[57 80]
[58 79]
[60 77]
[61 76]
[63 74]
[64 73]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
