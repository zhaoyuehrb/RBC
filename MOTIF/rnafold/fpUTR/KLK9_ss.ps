%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGGAGGAGGAAGGAGAUGGCAUGGCUUACCAUAAAGAAGCACUGGACGCCGGGUGCACGUUCCAGGAUCCAGGUGCCCAGGGGUC\
) } def
/len { sequence length } bind def

/coor [
[75.63018799 115.96487427]
[63.62206650 124.95404053]
[51.61394882 133.94320679]
[39.60582733 142.93237305]
[44.27264404 157.33721924]
[44.00685501 172.47683716]
[38.83729935 186.70899963]
[29.32472610 198.48989868]
[16.50099182 206.54164124]
[1.75711775 209.99082947]
[-13.30759048 208.46331787]
[-27.05902672 202.12481689]
[-38.00553894 191.66285706]
[-44.95972824 178.21228027]
[-47.16725540 163.23210144]
[-44.38867188 148.34727478]
[-36.92536926 135.17237854]
[-25.58691597 125.13653564]
[-11.60322094 119.32835388]
[3.50886989 118.37786102]
[18.11010933 122.38816833]
[30.61666489 130.92425537]
[42.62478256 121.93508911]
[54.63290024 112.94592285]
[66.64102173 103.95675659]
[68.24444580 89.04270172]
[58.42153549 77.70645905]
[48.59862518 66.37021637]
[38.77571487 55.03397369]
[23.52035141 57.33124924]
[9.45409298 50.99532700]
[1.06542945 38.04797745]
[1.03115308 22.62065125]
[9.36220169 9.63615417]
[23.40016747 3.23779035]
[38.66558838 5.46725512]
[50.28731918 15.61313438]
[54.55691528 30.43791389]
[50.11195755 45.21106339]
[59.93486786 56.54730606]
[69.75778198 67.88355255]
[79.58068848 79.21979523]
[90.18278503 73.97872925]
[101.45906830 73.55062103]
[111.42009735 77.57257843]
[118.48247528 84.93310547]
[121.71918488 94.03422546]
[136.68096924 95.10431671]
[151.64274597 96.17440033]
[165.95973206 89.44130707]
[178.10260010 98.06684875]
[193.06437683 99.13694000]
[207.38136292 92.40384674]
[219.52423096 101.02938080]
[234.48602295 102.09947205]
[243.50027466 99.54956818]
[249.95965576 103.48416901]
[264.87371826 105.08759308]
[279.78775024 106.69102478]
[294.70181274 108.29444885]
[301.95611572 94.93617249]
[313.77334595 85.37471771]
[328.35147095 81.06814575]
[343.46743774 82.67317200]
[356.81616211 89.94503784]
[366.36206055 101.77484131]
[370.64947510 116.35861969]
[369.02456665 131.47245789]
[361.73513794 144.81159973]
[349.89279175 154.34193420]
[335.30337524 158.61013794]
[320.19168091 156.96534729]
[306.86215210 149.65838623]
[297.34741211 137.80351257]
[293.09838867 123.20850372]
[278.18432617 121.60507965]
[263.27029419 120.00164795]
[248.35623169 118.39822388]
[233.41592407 117.06125641]
[218.45414734 115.99116516]
[205.20733643 122.80079651]
[191.99429321 114.09871674]
[177.03251648 113.02863312]
[163.78569031 119.83826447]
[150.57266235 111.13618469]
[135.61087036 110.06610107]
[120.64909363 108.99600983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 25]
[2 24]
[3 23]
[4 22]
[26 42]
[27 41]
[28 40]
[29 39]
[47 87]
[48 86]
[49 85]
[51 83]
[52 82]
[54 80]
[55 79]
[57 78]
[58 77]
[59 76]
[60 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
