%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGUCUCUGGGAAGAAGGCGGCGGCGGCGAAAGGCGGGGGUGCUGUGGGGGCCGGGCCGUGUUUACACAGCGGCGGGCGGGCGCGGACGCGGAACCCGGCGCGGCGGCGGCACG\
) } def
/len { sequence length } bind def

/coor [
[176.99348450 162.25794983]
[164.64872742 153.73696899]
[152.30397034 145.21600342]
[137.43434143 144.35375977]
[130.47232056 130.14669800]
[118.12755585 121.62572479]
[105.78279877 113.10475922]
[91.86307526 111.78837585]
[85.69622803 99.23999786]
[73.35147095 90.71903229]
[61.00671387 82.19805908]
[48.30796814 87.74526215]
[34.63843155 86.27103424]
[23.59049988 78.27127075]
[18.01371765 65.94245911]
[19.28015900 52.57957077]
[7.16862202 43.73023987]
[-4.94291496 34.88090515]
[-20.65033150 32.98679352]
[-26.36212349 19.23089600]
[-38.47365952 10.38156509]
[-50.58519745 1.53223348]
[-62.69673538 -7.31709814]
[-74.80827332 -16.16642952]
[-87.73625183 -14.96737957]
[-97.66399384 -22.69514465]
[-99.54848480 -34.72675705]
[-111.41806793 -43.89806747]
[-123.28765869 -53.06938171]
[-135.15724182 -62.24069214]
[-147.87437439 -56.24694443]
[-161.86642456 -56.34541321]
[-174.37855530 -62.45923996]
[-182.97221375 -73.33287811]
[-186.00025940 -86.78951263]
[-182.92250061 -100.16671753]
[-194.54158020 -109.65339661]
[-206.16065979 -119.14007568]
[-217.77972412 -128.62675476]
[-233.82182312 -128.45115662]
[-243.84912109 -140.97444153]
[-240.16954041 -156.58982849]
[-225.60574341 -163.31852722]
[-211.32983398 -155.99884033]
[-208.29304504 -140.24583435]
[-196.67398071 -130.75915527]
[-185.05490112 -121.27246857]
[-173.43582153 -111.78578949]
[-158.53561401 -117.88086700]
[-142.49732971 -115.65443420]
[-129.67362976 -105.61596680]
[-123.59226990 -90.40782928]
[-125.98593140 -74.11027527]
[-114.11634064 -64.93896484]
[-102.24675751 -55.76765060]
[-90.37717438 -46.59634018]
[-72.93578339 -45.25357437]
[-65.95893860 -28.27796745]
[-53.84740448 -19.42863464]
[-41.73586655 -10.57930374]
[-29.62432861 -1.72997200]
[-17.51279259 7.11935949]
[-2.67167425 8.38050938]
[3.90641665 22.76936913]
[16.01795387 31.61870193]
[28.12948990 40.46803284]
[43.52017593 34.93316269]
[59.34917068 39.66468048]
[69.37640381 53.00222778]
[69.52768707 69.85330200]
[81.87244415 78.37427521]
[94.21720123 86.89524078]
[108.13692474 88.21162415]
[114.30377197 100.76000214]
[126.64852905 109.28096771]
[138.99328613 117.80194092]
[154.74589539 119.27365875]
[160.82493591 132.87124634]
[173.16970825 141.39221191]
[185.51446533 149.91319275]
[203.11337280 142.75706482]
[221.36679077 147.46447754]
[233.12438965 162.00976562]
[233.88883972 180.54957581]
[246.87922668 188.04957581]
[259.86959839 195.54957581]
[273.99551392 189.40422058]
[288.85766602 192.71627808]
[298.80212402 204.01103210]
[300.17251587 218.81846619]
[313.16290283 226.31846619]
[326.15328979 233.81846619]
[339.14364624 241.31846619]
[353.26391602 234.88432312]
[368.46255493 238.01164246]
[378.89544678 249.49790955]
[380.55090332 264.92642212]
[372.79238892 278.36459351]
[358.60314941 284.64520264]
[343.43933105 281.35317993]
[333.13165283 269.75442505]
[331.64364624 254.30885315]
[318.65328979 246.80885315]
[305.66290283 239.30885315]
[292.67251587 231.80885315]
[279.16369629 238.02577209]
[264.40991211 235.06098938]
[254.11051941 223.84600830]
[252.36961365 208.53994751]
[239.37922668 201.03994751]
[226.38883972 193.53994751]
[217.04788208 200.03053284]
[205.89526367 202.51670837]
[194.57986450 200.59075928]
[184.78981018 194.50030518]
[178.00068665 185.11718750]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 80]
[2 79]
[3 78]
[5 76]
[6 75]
[7 74]
[9 72]
[10 71]
[11 70]
[16 66]
[17 65]
[18 64]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[27 56]
[28 55]
[29 54]
[30 53]
[36 48]
[37 47]
[38 46]
[39 45]
[84 111]
[85 110]
[86 109]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
