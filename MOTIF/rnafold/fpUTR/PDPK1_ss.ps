%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCCGGGGGCGGGGGGCGGCGGGCGACGGGGCGGGCGCAGGAUGAGGGCGGCCAUUGCUGGGGCUCCGCUUCGGGGAGGAGGACGCUGAGGAGGCGCCGAGCCGCGCAGCGCUGCGGGGGAGGCGCCCGCGCCGACGCGGGGCCC\
) } def
/len { sequence length } bind def

/coor [
[108.32048035 502.10372925]
[100.65831757 487.60464478]
[109.61171722 473.86535645]
[109.92585754 458.86865234]
[110.23999023 443.87191772]
[102.77092743 430.98541260]
[110.79553986 417.35031128]
[111.10968018 402.35357666]
[111.42381287 387.35687256]
[97.98597717 374.99639893]
[97.77964783 356.42190552]
[111.39725494 343.32553101]
[111.08312225 328.32882690]
[110.76898193 313.33212280]
[110.45484924 298.33541870]
[101.92314911 289.70172119]
[101.57704163 277.16683960]
[110.15082550 267.47305298]
[110.15082550 252.47305298]
[110.15082550 237.47305298]
[110.15082550 222.47305298]
[110.15082550 207.47305298]
[108.89566040 192.52566528]
[106.39412689 177.73571777]
[103.89260101 162.94577026]
[101.39106750 148.15583801]
[98.73479462 133.39289856]
[95.92407227 118.65859222]
[83.99938202 110.42768097]
[81.28431702 96.19480896]
[89.34161377 84.15213013]
[86.53089905 69.41781616]
[76.34474945 57.31190872]
[81.56015015 43.36024857]
[78.74942780 28.62593842]
[75.93870544 13.89163017]
[63.58584976 0.27690113]
[69.91913605 -16.05915260]
[66.80046082 -30.73136711]
[63.68178940 -45.40357971]
[60.56311417 -60.07579422]
[57.44443893 -74.74800873]
[44.04434586 -76.47077942]
[31.85573959 -82.24581909]
[22.06907082 -91.49343109]
[15.63534641 -103.29551697]
[13.17372036 -116.48674011]
[14.91193485 -129.76957703]
[20.66532707 -141.84191895]
[29.85633659 -151.52476501]
[41.57245255 -157.87731934]
[39.07092285 -172.66726685]
[36.56938934 -187.45719910]
[34.06785965 -202.24714661]
[24.13747406 -214.56372070]
[29.64391136 -228.40310669]
[27.14237976 -243.19303894]
[13.58516216 -258.05270386]
[20.94008636 -275.89367676]
[17.82141113 -290.56588745]
[7.38397264 -302.45581055]
[12.30604553 -316.51364136]
[9.18737030 -331.18585205]
[6.06869507 -345.85806274]
[2.95001984 -360.53027344]
[-0.16865560 -375.20248413]
[-3.28733087 -389.87472534]
[-6.40600634 -404.54693604]
[-15.61335945 -418.78283691]
[-4.48264885 -431.57125854]
[10.88727951 -424.41571045]
[8.26620770 -407.66558838]
[11.38488293 -392.99337769]
[14.50355816 -378.32116699]
[17.62223434 -363.64895630]
[20.74090958 -348.97674561]
[23.85958481 -334.30453491]
[26.97826004 -319.63232422]
[37.19263077 -308.79183960]
[32.49362564 -293.68457031]
[35.61230087 -279.01235962]
[44.71404266 -274.19277954]
[49.73417282 -264.94848633]
[48.78179550 -254.25096130]
[41.93231964 -245.69458008]
[44.43384933 -230.90463257]
[54.18531036 -219.64593506]
[48.85779953 -204.74867249]
[51.35932922 -189.95874023]
[53.86086273 -175.16879272]
[56.36239243 -160.37886047]
[72.62400055 -157.07301331]
[86.41455078 -147.77760315]
[95.62068176 -133.88337708]
[98.81867218 -117.48837280]
[95.49460602 -101.08113861]
[86.12667847 -87.16298676]
[72.11665344 -77.86668396]
[75.23532867 -63.19446945]
[78.35400391 -48.52225494]
[81.47267914 -33.85004044]
[84.59135437 -19.17782784]
[94.58972168 -12.29575348]
[97.27850342 -0.04774546]
[90.67301941 11.08090973]
[93.48373413 25.81521797]
[96.29445648 40.54952621]
[106.27956390 51.60153961]
[101.26520538 66.60710144]
[104.07592773 81.34140778]
[116.00061798 89.57231903]
[118.71568298 103.80519104]
[110.65838623 115.84786987]
[113.46910095 130.58218384]
[118.17984772 138.48719788]
[116.18100739 145.65431213]
[118.68254089 160.44424438]
[121.18406677 175.23419189]
[123.68560028 190.02412415]
[132.00151062 177.54031372]
[146.01002502 172.17733765]
[160.53657532 175.91624451]
[170.21520996 187.37591553]
[171.47074890 202.32327271]
[163.83943176 215.23693848]
[150.14015198 221.34675598]
[135.43328857 218.39582825]
[125.15082550 207.47305298]
[125.15082550 222.47305298]
[125.15082550 237.47305298]
[125.15082550 252.47305298]
[125.15082550 267.47305298]
[134.73373413 283.16131592]
[125.45156097 298.02127075]
[125.76569366 313.01797485]
[126.07982635 328.01470947]
[126.39396667 343.01141357]
[136.47425842 349.46151733]
[142.10417175 359.88531494]
[141.97335815 371.61126709]
[136.23130798 381.69778442]
[126.42052460 387.67102051]
[126.10639191 402.66772461]
[125.79225159 417.66442871]
[133.23884583 431.62362671]
[125.23670197 444.18606567]
[124.92256927 459.18276978]
[124.60842896 474.17947388]
[132.97863770 488.28167725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 148]
[4 147]
[5 146]
[7 144]
[8 143]
[9 142]
[12 137]
[13 136]
[14 135]
[15 134]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 119]
[24 118]
[25 117]
[26 116]
[27 114]
[28 113]
[31 110]
[32 109]
[34 107]
[35 106]
[36 105]
[38 102]
[39 101]
[40 100]
[41 99]
[42 98]
[51 91]
[52 90]
[53 89]
[54 88]
[56 86]
[57 85]
[59 81]
[60 80]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
[67 73]
[68 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
