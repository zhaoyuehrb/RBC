%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCCCCGGGAACCCGGAUCCUUCCGGGACGCUUCGUUGGCCCCGCGGAGCCGGCGGAGCAGUUAUCUGUGGCCACAAAGAAAGUUAUUUGUCUCUGUCUUGGCAAGGCUGGGAGGAAAGUUUUAGCUAAGAAACUCAGCCCAUUGGAGACC\
) } def
/len { sequence length } bind def

/coor [
[281.02032471 159.31718445]
[260.70755005 151.27119446]
[245.67564392 135.36045837]
[238.77014160 114.54726410]
[223.78939819 113.78752899]
[208.80863953 113.02778625]
[193.82789612 112.26805115]
[180.72506714 119.35079193]
[167.33450317 110.92446136]
[152.35375977 110.16471863]
[137.37300110 109.40498352]
[128.02262878 126.45613861]
[111.53692627 136.77084351]
[92.11360168 137.72267151]
[74.69837189 129.06927490]
[62.83673477 138.25086975]
[50.97509766 147.43244934]
[39.11346054 156.61404419]
[27.25182533 165.79563904]
[15.39018917 174.97721863]
[9.68268776 190.35112000]
[-6.52831697 192.82807922]
[-16.56633377 179.86003113]
[-10.10511017 164.78738403]
[6.20859957 163.11558533]
[18.07023621 153.93400574]
[29.93187141 144.75241089]
[41.79350662 135.57081604]
[53.65514374 126.38922882]
[65.51677704 117.20764160]
[62.71408081 109.74451447]
[61.50689316 101.86440277]
[61.94687271 93.90451813]
[47.88059235 88.69493866]
[33.81430817 83.48535919]
[19.74802780 78.27577972]
[5.68174505 73.06620026]
[-8.38453674 67.85662079]
[-22.45081902 62.64704514]
[-36.51710129 57.43746567]
[-50.58338165 52.22788620]
[-64.64966583 47.01831055]
[-78.71595001 41.80873108]
[-92.83429718 36.74196625]
[-107.00327301 31.81853867]
[-123.94947815 32.33104706]
[-129.13313293 16.18898582]
[-115.05688477 6.73934603]
[-102.07984924 17.64956284]
[-87.91087341 22.57299232]
[-80.51686096 21.79314232]
[-73.50637054 27.74244881]
[-59.44008636 32.95202637]
[-45.37380600 38.16160583]
[-31.30752182 43.37118530]
[-17.24123955 48.58076477]
[-3.17495823 53.79034424]
[10.89132404 58.99991989]
[24.95760536 64.20950317]
[39.02388763 69.41907501]
[53.09016800 74.62865448]
[67.15644836 79.83823395]
[76.04316711 69.81282806]
[87.82500458 63.43547058]
[101.07817078 61.47685242]
[114.20103455 64.17366791]
[125.60774231 71.20001984]
[133.91981506 81.70677948]
[138.13275146 94.42423248]
[153.11349487 95.18397522]
[168.09423828 95.94371033]
[182.26858521 88.91530609]
[194.58763123 97.28730011]
[209.56838989 98.04704285]
[224.54913330 98.80677795]
[239.52987671 99.56651306]
[242.16453552 90.83298492]
[246.32026672 82.71891022]
[251.86036682 75.48651123]
[258.60348511 69.36907196]
[266.32946777 64.56343842]
[274.78665161 61.22367477]
[283.69989014 59.45614243]
[292.77969360 59.31608200]
[301.73153687 60.80591965]
[310.26544189 63.87524033]
[318.10528564 68.42249298]
[324.99786377 74.29835510]
[330.72103882 81.31063080]
[335.09075928 89.23054504]
[337.96719360 97.80018616]
[339.25903320 106.74092865]
[338.92651367 115.76247406]
[353.36849976 119.81578827]
[367.81045532 123.86911011]
[382.25244141 127.92242432]
[396.69442749 131.97573853]
[411.13638306 136.02905273]
[425.57836914 140.08236694]
[440.40539551 142.35379028]
[455.39846802 142.80975342]
[470.39151001 143.26571655]
[485.38458252 143.72167969]
[500.37765503 144.17765808]
[515.37072754 144.63362122]
[530.36376953 145.08958435]
[545.36071777 145.39360046]
[560.35992432 145.54560852]
[575.35919189 145.69761658]
[590.35839844 145.84962463]
[605.35760498 146.00163269]
[620.35687256 146.15364075]
[629.49584961 133.61335754]
[644.27075195 128.87184143]
[659.00030518 133.75231934]
[668.02075195 146.37814331]
[667.86352539 161.89442444]
[658.58905029 174.33483887]
[643.76354980 178.91578674]
[629.08776855 173.87580872]
[620.20483398 161.15287781]
[605.20562744 161.00086975]
[590.20642090 160.84884644]
[575.20715332 160.69683838]
[560.20794678 160.54483032]
[545.20867920 160.39282227]
[538.44860840 163.48805237]
[529.90783691 160.08265686]
[514.91473389 159.62669373]
[499.92169189 159.17071533]
[484.92861938 158.71475220]
[469.93554688 158.25878906]
[454.94247437 157.80282593]
[439.94943237 157.34684753]
[451.91116333 166.39761353]
[458.86547852 179.68814087]
[459.48168945 194.67547607]
[453.64193726 208.49203491]
[442.46356201 218.49423218]
[428.08535767 222.76829529]
[413.25839233 220.49644470]
[400.81958008 212.11337280]
[393.14889526 199.22305298]
[391.71398926 184.29183960]
[396.78939819 170.17660522]
[407.40405273 159.57806396]
[421.52505493 154.52433777]
[407.08306885 150.47102356]
[392.64108276 146.41770935]
[378.19912720 142.36439514]
[363.75714111 138.31108093]
[349.31518555 134.25776672]
[334.87319946 130.20445251]
[321.93264771 147.65786743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[7 73]
[9 71]
[10 70]
[11 69]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 50]
[45 49]
[93 153]
[94 152]
[95 151]
[96 150]
[97 149]
[98 148]
[99 147]
[100 134]
[101 133]
[102 132]
[103 131]
[104 130]
[105 129]
[106 128]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
