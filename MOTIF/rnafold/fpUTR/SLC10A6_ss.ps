%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGAUGAAUCACCUUGCUGGCCAACAGUUAUUGGAAUGAUUCUCCAUGUGUGACUUCGUUGCACUAUUACAAAAUGUGGCAGGAUAGACCUGCCCAGCCAUUGUUGCCGAUGUUCAUUUGUAAUGCUGCCUUAAGGAGAUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[73.06448364 158.19479370]
[69.97638702 143.51611328]
[81.14492798 133.50221252]
[74.01690674 131.16955566]
[60.82084274 138.30143738]
[47.62477875 145.43333435]
[41.51171875 152.31373596]
[34.07446289 152.57313538]
[20.73097038 159.42523193]
[7.38747692 166.27732849]
[-5.95601654 173.12942505]
[-19.29951096 179.98150635]
[-32.64300537 186.83360291]
[-45.83906937 193.96549988]
[-58.88183975 201.37400818]
[-63.15790176 219.77574158]
[-79.21643066 229.11033630]
[-96.71417999 223.90028381]
[-109.43303680 231.85206604]
[-122.15189362 239.80383301]
[-134.87075806 247.75559998]
[-139.86257935 263.00228882]
[-154.94499207 268.47042847]
[-168.54803467 259.96533203]
[-170.23664856 244.01139832]
[-158.71545410 232.84710693]
[-142.82252502 235.03674316]
[-130.10366821 227.08497620]
[-117.38480377 219.13319397]
[-104.66594696 211.18142700]
[-104.56115723 199.69400024]
[-98.83806610 189.59465027]
[-88.83191681 183.47624207]
[-76.99374390 182.97424316]
[-66.29035950 188.33123779]
[-53.24758530 180.92272949]
[-51.12616730 176.57507324]
[-46.21603012 173.54743958]
[-39.49509811 173.49011230]
[-26.15160370 166.63801575]
[-12.80810928 159.78593445]
[0.53538430 152.93383789]
[13.87887764 146.08174133]
[27.22237206 139.22964478]
[40.49288940 132.23727417]
[53.68895340 125.10537720]
[66.88501740 117.97348785]
[64.04474640 98.45652771]
[71.36841583 81.11559296]
[85.88813019 70.60305786]
[76.27326202 59.08983231]
[66.65839386 47.57661057]
[57.04352188 36.06338882]
[47.42865372 24.55016518]
[37.81378555 13.03694153]
[28.19891739 1.52371812]
[13.40531540 -6.75792885]
[17.26803589 -23.26597977]
[34.20025253 -24.12409782]
[39.71213913 -8.09115028]
[49.32700729 3.42207313]
[58.94187546 14.93529606]
[68.55674744 26.44851875]
[78.17161560 37.96174240]
[87.78648376 49.47496414]
[97.40135193 60.98818970]
[112.28147888 62.88073730]
[124.47225952 54.14089584]
[136.66304016 45.40105057]
[148.85382080 36.66120911]
[161.04460144 27.92136574]
[173.23538208 19.18152237]
[185.42616272 10.44167900]
[197.61694336 1.70183599]
[209.80772400 -7.03800726]
[209.02552795 -33.49952698]
[235.95834351 -51.24417496]
[243.77557373 -64.04615021]
[245.59776306 -73.06774902]
[251.89500427 -77.03318024]
[259.98040771 -89.66750336]
[268.06582642 -102.30182648]
[276.15124512 -114.93614960]
[284.23663330 -127.57047272]
[292.32205200 -140.20480347]
[290.30007935 -156.11991882]
[301.58520508 -167.52278137]
[317.52047729 -165.66609192]
[325.88168335 -151.97412109]
[320.25482178 -136.95021057]
[304.95639038 -132.11938477]
[296.87097168 -119.48506165]
[288.78555298 -106.85073853]
[280.70016479 -94.21641541]
[272.61474609 -81.58209229]
[264.52932739 -68.94776917]
[256.57757568 -56.22890854]
[248.76031494 -43.42692947]
[253.00076294 -37.24076462]
[261.48162842 -24.86842918]
[265.72207642 -18.68226433]
[280.48184204 -21.35617065]
[295.24157715 -24.03007889]
[310.00134277 -26.70398712]
[324.76107788 -29.37789536]
[336.91748047 -40.38489914]
[352.44299316 -35.10377121]
[355.36630249 -18.96728134]
[342.68017578 -8.57526970]
[327.43499756 -14.61814499]
[312.67523193 -11.94423676]
[297.91549683 -9.27032948]
[283.15573120 -6.59642124]
[268.39599609 -3.92251348]
[259.92843628 6.98087025]
[248.72221375 13.30593300]
[236.86781311 14.67695904]
[226.31309509 11.57151127]
[218.54757690 5.15277386]
[206.35679626 13.89261723]
[194.16601562 22.63245964]
[181.97523499 31.37230301]
[169.78445435 40.11214828]
[157.59367371 48.85198975]
[145.40287781 57.59183121]
[133.21209717 66.33167267]
[121.02132416 75.07151794]
[131.58090210 87.74301147]
[134.84785461 104.54843903]
[129.42532349 121.44525146]
[116.08248901 134.07347107]
[122.50921631 147.62696838]
[128.93594360 161.18046570]
[135.36267090 174.73396301]
[141.78938293 188.28744507]
[156.75741577 193.36032104]
[163.67933655 207.56814575]
[158.44850159 222.48170471]
[144.16827393 229.25302124]
[129.31086731 223.86480713]
[122.69090271 209.51379395]
[128.23590088 194.71417236]
[121.80917358 181.16069031]
[115.38244629 167.60719299]
[108.95571899 154.05369568]
[102.52899170 140.50019836]
[95.40097046 138.16754150]
[98.48880005 152.84628296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 47]
[5 46]
[6 45]
[8 44]
[9 43]
[10 42]
[11 41]
[12 40]
[13 39]
[14 36]
[15 35]
[18 30]
[19 29]
[20 28]
[21 27]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[67 127]
[68 126]
[69 125]
[70 124]
[71 123]
[72 122]
[73 121]
[74 120]
[75 119]
[77 98]
[78 97]
[80 96]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[131 146]
[132 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
