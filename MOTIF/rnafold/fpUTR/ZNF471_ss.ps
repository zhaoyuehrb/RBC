%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCGCGAUGGGGGGUUCCAGCGUCGACUCACGGAGUCCUUCGGAUGAGAGCGUCUGGGUGCCAGACGAGGCCGGGGCCUUGCCCUCCCAAGACACUGUUCUUCAAGAGAAAGACCAGAAGAGAAGGCAAAA\
) } def
/len { sequence length } bind def

/coor [
[317.52627563 377.90222168]
[317.32284546 362.09924316]
[328.41308594 350.83947754]
[328.06143188 335.84359741]
[327.70980835 320.84771729]
[304.50366211 310.49157715]
[293.29760742 288.90829468]
[297.76461792 266.11575317]
[286.10006714 256.68505859]
[278.85311890 254.90943909]
[274.27600098 246.89399719]
[262.83572388 237.19244385]
[251.39543152 227.49090576]
[239.73088074 218.06021118]
[227.84843445 208.90554810]
[215.96600342 199.75090027]
[204.08355713 190.59623718]
[192.20112610 181.44158936]
[180.31869507 172.28694153]
[168.43624878 163.13227844]
[153.63203430 161.49389648]
[147.42221069 146.94230652]
[135.53976440 137.78765869]
[120.73554993 136.14927673]
[114.52571869 121.59768677]
[102.64328766 112.44303131]
[88.38834381 107.77434540]
[73.39246368 108.12598419]
[58.39658737 108.47762299]
[43.40071106 108.82926178]
[28.40483284 109.18090057]
[12.71179485 115.59688568]
[2.20228076 102.29325867]
[12.07667255 88.51165009]
[28.05319405 94.18502045]
[43.04907227 93.83338165]
[58.04494858 93.48174286]
[73.04082489 93.13010406]
[88.03670502 92.77846527]
[90.20332336 85.59822845]
[96.70317078 64.05752563]
[84.40469360 55.46989059]
[72.10621643 46.88225555]
[56.59141922 49.89333344]
[43.53857040 40.98273849]
[40.69169235 25.43697166]
[49.73979187 12.47906113]
[65.31478882 9.79670334]
[78.17631531 18.98129463]
[80.69385529 34.58377838]
[92.99233246 43.17141342]
[105.29080200 51.75904846]
[111.38928986 47.39344406]
[129.68473816 34.29663086]
[125.52013397 19.88635445]
[121.35553741 5.47607565]
[117.19094086 -8.93420219]
[113.02633667 -23.34448051]
[108.86174011 -37.75475693]
[98.65553284 -51.29247284]
[108.83882904 -64.84742737]
[124.68306732 -58.81448364]
[123.27201843 -41.91935730]
[127.43661499 -27.50907898]
[131.60121155 -13.09880161]
[135.76580811 1.31147575]
[139.93041992 15.72175407]
[144.09501648 30.13203049]
[111.79793549 100.56059265]
[123.68037415 109.71524811]
[139.33450317 112.00843811]
[144.69442749 125.90522003]
[156.57685852 135.05987549]
[172.23098755 137.35305786]
[177.59091187 151.24984741]
[189.47334290 160.40449524]
[201.35577393 169.55915833]
[213.23822021 178.71380615]
[225.12065125 187.86845398]
[237.00309753 197.02311707]
[248.88552856 206.17776489]
[255.52633667 207.45877075]
[259.81991577 211.36007690]
[261.09698486 216.05062866]
[272.53726196 225.75216675]
[283.97753906 235.45372009]
[295.53076172 245.02049255]
[307.19531250 254.45118713]
[316.04586792 248.75758362]
[326.35891724 245.93713379]
[337.21093750 246.34664917]
[347.59869385 250.04885864]
[356.53182983 256.79757690]
[363.12722778 266.05163574]
[366.69580078 277.01745605]
[366.81344604 288.71676636]
[363.36877441 300.07379150]
[376.24032593 307.77590942]
[392.05523682 308.22253418]
[399.00366211 321.39706421]
[411.87524414 329.09918213]
[424.74682617 336.80130005]
[437.61840820 344.50341797]
[450.48999023 352.20553589]
[463.36154175 359.90762329]
[475.79608154 351.11544800]
[490.73297119 348.14736938]
[505.58428955 351.51757812]
[517.77697754 360.64218140]
[525.19854736 373.94030762]
[526.56317139 389.10797119]
[521.63446045 403.51724243]
[511.26632690 414.67169189]
[497.25506592 420.63870239]
[482.02828979 420.38446045]
[468.22406006 413.95300293]
[458.23410034 402.45864868]
[453.78918457 387.89285278]
[455.65942383 372.77920532]
[442.78787231 365.07708740]
[429.91629028 357.37496948]
[417.04470825 349.67288208]
[404.17312622 341.97076416]
[391.30157471 334.26864624]
[376.40731812 334.37292480]
[368.53823853 320.64749146]
[355.66665649 312.94537354]
[342.70568848 320.49606323]
[343.05731201 335.49194336]
[343.40896606 350.48782349]
[355.01477051 361.21539307]
[355.55227661 377.01055908]
[344.70260620 388.50228882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 130]
[4 129]
[5 128]
[8 88]
[9 87]
[11 86]
[12 85]
[13 84]
[14 81]
[15 80]
[16 79]
[17 78]
[18 77]
[19 76]
[20 75]
[22 73]
[23 72]
[25 70]
[26 69]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[41 52]
[42 51]
[43 50]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
[97 127]
[98 126]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[105 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
