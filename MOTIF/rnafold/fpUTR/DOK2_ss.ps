%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGAGGAAAUGAACUUCAGAGAAGGGAAACACACGGCUAAGAAGAGAGAGGCAAGGGCAGGAGUGAAGGAGAGAGCUGAAGCCUGGGGCUCCGAGAUGGUCAGAGG\
) } def
/len { sequence length } bind def

/coor [
[-2.66590929 267.99652100]
[-20.91060448 270.56784058]
[-39.17156982 268.19851685]
[-56.13572693 261.06475830]
[-65.09310150 273.09661865]
[-74.05048370 285.12844849]
[-83.00786591 297.16030884]
[-79.22577667 312.33364868]
[-86.12818146 326.36541748]
[-100.45597076 332.63027954]
[-115.44400024 328.17013550]
[-124.01538849 315.09094238]
[-122.12297821 299.56826782]
[-110.66030884 288.93148804]
[-95.03971100 288.20294189]
[-86.08232880 276.17108154]
[-77.12495422 264.13922119]
[-68.16757202 252.10739136]
[-76.22699738 243.20063782]
[-82.61140442 233.02128601]
[-87.12387085 221.88067627]
[-89.62476349 210.11987305]
[-90.03605652 198.09915161]
[-88.34373474 186.18702698]
[-84.59832001 174.74893188]
[-78.91333771 164.13597107]
[-71.46184540 154.67420959]
[-62.47123337 146.65458679]
[-52.21621704 140.32402039]
[-41.01049042 135.87779236]
[-29.19710922 133.45349121]
[-17.13798904 133.12684631]
[-5.20282221 134.90922546]
[6.24225378 138.74736023]
[16.84589386 144.52490234]
[26.28232574 152.06591797]
[37.77299118 142.42410278]
[49.26366043 132.78228760]
[60.75432587 123.14047241]
[72.24499512 113.49866486]
[69.21570587 97.79061890]
[74.45711517 82.67615509]
[86.56105042 72.21603394]
[102.27556610 69.22052765]
[117.37872314 74.49442291]
[128.58409119 64.52249146]
[139.78947449 54.55055237]
[140.06524658 35.73038101]
[153.66842651 23.18184090]
[171.82083130 24.38111305]
[182.42742920 13.77451134]
[193.03404236 3.16790962]
[203.64064026 -7.43869209]
[201.36073303 -22.67378998]
[208.40653992 -36.17230606]
[221.89025879 -42.85462952]
[236.54782104 -40.34587860]
[247.15443420 -50.95248032]
[257.76101685 -61.55908203]
[251.33233643 -75.28670502]
[249.98954773 -90.38547516]
[253.89483643 -105.03212738]
[262.57659912 -117.45802307]
[274.98648071 -126.16266632]
[289.62591553 -130.09494019]
[304.72711182 -128.77998352]
[318.46655273 -122.37659454]
[329.18515015 -111.65802002]
[335.58853149 -97.91857147]
[336.90347290 -82.81735229]
[332.97122192 -68.17791748]
[324.26657104 -55.76804352]
[311.84066772 -47.08628464]
[297.19403076 -43.18100357]
[282.09524536 -44.52378464]
[268.36764526 -50.95248032]
[257.76101685 -40.34587860]
[247.15443420 -29.73927498]
[249.66317749 -15.08171272]
[242.98085022 -1.59799767]
[229.48234558 5.44781399]
[214.24723816 3.16790962]
[203.64064026 13.77451134]
[193.03404236 24.38111305]
[182.42742920 34.98771667]
[184.91490173 46.30714035]
[181.52595520 57.51642609]
[173.00993347 65.72956085]
[161.45155334 68.77210236]
[149.76141357 65.75592804]
[138.55603027 75.72786713]
[127.35066223 85.69980621]
[130.84443665 98.91594696]
[128.28712463 112.34475708]
[120.18041992 123.35176086]
[108.11470795 129.77760315]
[94.45704651 130.36164856]
[81.88681030 124.98932648]
[70.39614105 134.63114929]
[58.90547562 144.27294922]
[47.41480637 153.91476440]
[35.92414093 163.55657959]
[44.01351547 180.19621277]
[47.38694763 198.37667847]
[45.80745697 216.78889465]
[39.39449310 234.10861206]
[28.61491966 249.09176636]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 18]
[5 17]
[6 16]
[7 15]
[36 102]
[37 101]
[38 100]
[39 99]
[40 98]
[45 92]
[46 91]
[47 90]
[50 85]
[51 84]
[52 83]
[53 82]
[57 78]
[58 77]
[59 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
