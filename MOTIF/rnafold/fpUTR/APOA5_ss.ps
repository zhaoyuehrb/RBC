%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAGCAGAAUGUCUGCUCUCUGUGCCCAGACGUGAGCAGGCCUCCCUCCACCUGUCUUCUCAGAGCAGGUA\
) } def
/len { sequence length } bind def

/coor [
[115.83086395 158.33589172]
[103.33236694 160.35385132]
[90.68767548 159.72415161]
[78.45151520 156.47438049]
[67.16065979 150.74713135]
[57.31045151 142.79364014]
[49.33299637 132.96281433]
[43.57826233 121.68595123]
[40.29870987 109.45773315]
[39.63820648 96.81461334]
[41.62572861 84.31124115]
[46.17408752 72.49611664]
[53.08374405 61.88756180]
[42.70466232 51.05822372]
[32.32558060 40.22888184]
[21.94649696 29.39953995]
[11.56741333 18.57019806]
[1.18832994 7.74085665]
[-9.19075298 -3.08848476]
[-19.56983566 -13.91782665]
[-30.61703873 -24.06471443]
[-42.28757477 -33.48801422]
[-53.95811081 -42.91131592]
[-65.62864685 -52.33461380]
[-81.90457153 -54.34115601]
[-88.05483246 -69.54334259]
[-77.75255585 -82.30245972]
[-61.59585190 -79.49303436]
[-56.20534515 -64.00514984]
[-44.53480911 -54.58185196]
[-32.86427307 -45.15855026]
[-21.19373703 -35.73524857]
[-17.37960052 -35.88901138]
[-13.32440853 -33.99653625]
[-10.09509087 -29.98123360]
[-8.74049473 -24.29690933]
[1.63858831 -13.46756744]
[12.01767159 -2.63822651]
[22.39675522 8.19111538]
[32.77583694 19.02045631]
[43.15491867 29.84979820]
[53.53400421 40.67913818]
[63.91308594 51.50848007]
[79.46340942 43.14983368]
[96.76561737 39.64081192]
[114.34373474 41.28075409]
[130.69825745 47.92975998]
[144.43405151 59.02063751]
[154.37937927 73.60727692]
[159.68585205 90.44535828]
[159.90081787 108.09849548]
[155.00590515 125.06079102]
[167.77883911 132.92539978]
[180.55177307 140.79000854]
[193.32470703 148.65461731]
[206.09765625 156.51922607]
[215.34274292 158.44793701]
[219.23579407 164.99847412]
[231.66343689 173.39808655]
[244.09107971 181.79771423]
[260.47854614 182.41673279]
[267.89587402 197.04257202]
[258.71276855 210.62942505]
[242.37600708 209.20030212]
[235.69146729 194.22535706]
[223.26382446 185.82574463]
[210.83616638 177.42611694]
[198.23304749 169.29216003]
[185.46009827 161.42755127]
[172.68716431 153.56294250]
[159.91423035 145.69833374]
[147.14129639 137.83372498]
[138.22657776 146.82330322]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 32]
[22 31]
[23 30]
[24 29]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
