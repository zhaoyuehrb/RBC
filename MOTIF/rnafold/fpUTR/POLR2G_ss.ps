%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUAGUCGCAGCAAGCGCGGAACUGGGGUUGCGGCGUCUAAGUGUUUCCGGUGGAUUCCCAGGGACUGUCGGAGGUGUGGACUCUGCCUGCCUACCUGGUCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[86.70644379 201.61096191]
[94.97265625 187.44755554]
[94.54817200 172.45356750]
[94.12368774 157.45957947]
[93.69920349 142.46557617]
[93.27471924 127.47158813]
[92.85023499 112.47759247]
[79.09574890 106.49311829]
[67.83566284 116.40323639]
[56.57558060 126.31335449]
[45.31549454 136.22348022]
[45.86513901 151.85139465]
[36.20006180 164.14450073]
[20.88382149 167.29835510]
[7.14827728 159.82380676]
[1.47893178 145.25012207]
[6.55267763 130.45852661]
[19.97384644 122.43317413]
[35.40537262 124.96339417]
[46.66545868 115.05326843]
[57.92554092 105.14315033]
[69.18563080 95.23303223]
[84.58887482 86.88842010]
[97.12817383 91.16801453]
[103.30669403 77.49958801]
[109.48521423 63.83115768]
[115.66373444 50.16273117]
[121.84225464 36.49430466]
[128.02076721 22.82587624]
[120.50852966 9.37699318]
[122.33452606 -5.73985577]
[132.59043884 -16.75259590]
[147.18974304 -19.58068085]
[153.36825562 -33.24910736]
[159.35273743 -47.00359726]
[165.14198303 -60.84139633]
[170.93122864 -74.67919159]
[176.12796021 -88.75022888]
[180.72282410 -103.02913666]
[185.31768799 -117.30804443]
[189.91255188 -131.58695984]
[194.50740051 -145.86585999]
[187.03092957 -155.33229065]
[185.14100647 -167.12377930]
[189.20149231 -178.22569275]
[198.07002258 -185.85769653]
[209.41638184 -188.16989136]
[214.81172180 -202.16596985]
[220.20704651 -216.16206360]
[225.60237122 -230.15814209]
[230.99771118 -244.15422058]
[236.39303589 -258.15029907]
[241.78837585 -272.14639282]
[247.18370056 -286.14248657]
[252.57902527 -300.13858032]
[257.97436523 -314.13464355]
[258.15948486 -323.41757202]
[263.72549438 -328.44689941]
[269.51473999 -342.28469849]
[275.30398560 -356.12249756]
[272.68542480 -372.31124878]
[285.56524658 -382.46221924]
[300.69378662 -376.13296509]
[302.50811768 -359.83447266]
[289.14178467 -350.33325195]
[283.35253906 -336.49545288]
[277.56329346 -322.65765381]
[271.97045898 -308.73931885]
[266.57510376 -294.74322510]
[261.17977905 -280.74716187]
[255.78445435 -266.75106812]
[250.38912964 -252.75497437]
[244.99378967 -238.75889587]
[239.59846497 -224.76281738]
[234.20312500 -210.76672363]
[228.80780029 -196.77064514]
[223.41247559 -182.77455139]
[231.86640930 -166.65892029]
[225.89474487 -149.13468933]
[208.78631592 -141.27101135]
[204.19145203 -126.99209595]
[199.59658813 -112.71318817]
[195.00173950 -98.43428040]
[190.40687561 -84.15536499]
[191.79470825 -80.76261902]
[191.51496887 -76.50492096]
[189.16917419 -72.21868134]
[184.76902771 -68.88995361]
[178.97978210 -55.05215454]
[173.19053650 -41.21435547]
[173.51701355 -33.71981049]
[167.03669739 -27.07058907]
[160.85816956 -13.40216255]
[168.38059998 -0.57441825]
[166.88946533 14.40024376]
[156.74804688 25.75828743]
[141.68919373 29.00439644]
[135.51068115 42.67282104]
[129.33216858 56.34125137]
[123.15364075 70.00967407]
[116.97512054 83.67810822]
[110.79660797 97.34653473]
[107.84423065 112.05311584]
[108.26871490 127.04710388]
[108.69319916 142.04109192]
[109.11767578 157.03509521]
[109.54216003 172.02908325]
[109.96664429 187.02307129]
[119.02090454 200.69613647]
[111.46564484 215.25120544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 108]
[3 107]
[4 106]
[5 105]
[6 104]
[7 103]
[8 22]
[9 21]
[10 20]
[11 19]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[29 97]
[33 93]
[34 92]
[35 90]
[36 89]
[37 88]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[47 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
