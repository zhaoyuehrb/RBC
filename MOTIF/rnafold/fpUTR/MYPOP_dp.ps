%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:16 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MYPOP)
} def

/sequence { (\
CGAGCCCUGACCCACCGGCGGCUGCGGCGGAGCCGCGCCGGCGCCCCCCAUGCGCCAGACGGCAGGACGGCGGCGUCGGGGGGCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 9 0.011411997 ubox
1 17 0.017310349 ubox
1 20 0.003646545 ubox
1 24 0.076829235 ubox
1 26 0.057320995 ubox
1 37 0.016567860 ubox
1 40 0.029464191 ubox
2 8 0.010105145 ubox
2 16 0.017408235 ubox
2 19 0.009266635 ubox
2 23 0.045724567 ubox
2 25 0.172984751 ubox
2 36 0.004724593 ubox
2 39 0.049617873 ubox
3 23 0.803209076 ubox
4 19 0.517751758 ubox
4 22 0.843719447 ubox
4 25 0.009073222 ubox
4 38 0.004792032 ubox
5 18 0.517366388 ubox
5 21 0.843855816 ubox
5 24 0.009070086 ubox
5 37 0.004729875 ubox
6 17 0.514706198 ubox
6 18 0.051745618 ubox
6 20 0.843661056 ubox
6 21 0.009425084 ubox
7 17 0.063279286 ubox
7 18 0.845155076 ubox
7 20 0.012694992 ubox
7 21 0.013278552 ubox
8 14 0.215760192 ubox
8 17 0.845040923 ubox
8 20 0.015434869 ubox
9 13 0.218994864 ubox
9 16 0.855300260 ubox
9 19 0.069729254 ubox
11 18 0.095603765 ubox
12 17 0.095532933 ubox
12 18 0.022715122 ubox
13 17 0.022834675 ubox
15 41 0.006087116 ubox
16 40 0.010243962 ubox
17 39 0.014186207 ubox
17 42 0.004177237 ubox
18 36 0.009297500 ubox
18 38 0.014144367 ubox
19 35 0.009482717 ubox
19 37 0.014006384 ubox
19 40 0.080400672 ubox
20 34 0.009797069 ubox
20 36 0.006354206 ubox
20 39 0.535330528 ubox
21 33 0.009864540 ubox
21 38 0.535907775 ubox
22 32 0.009864358 ubox
22 35 0.004351881 ubox
22 37 0.523823468 ubox
23 31 0.009823995 ubox
23 37 0.210336367 ubox
24 33 0.004837274 ubox
24 36 0.917663751 ubox
24 38 0.038114791 ubox
24 39 0.013538012 ubox
24 42 0.003215579 ubox
25 32 0.004850979 ubox
25 35 0.918453202 ubox
25 37 0.038209927 ubox
25 40 0.216869059 ubox
26 34 0.918505994 ubox
26 36 0.026998754 ubox
26 39 0.388515230 ubox
27 33 0.918490387 ubox
27 36 0.047462870 ubox
27 38 0.391361820 ubox
28 32 0.911808168 ubox
28 35 0.054321227 ubox
28 37 0.391367283 ubox
29 34 0.053687034 ubox
29 36 0.390281622 ubox
29 39 0.003504229 ubox
30 38 0.003493491 ubox
40 87 0.965262287 ubox
41 86 0.999792346 ubox
42 85 0.999956786 ubox
43 84 0.999979108 ubox
44 82 0.003262841 ubox
44 83 0.999940572 ubox
45 81 0.004597716 ubox
45 82 0.999887013 ubox
45 83 0.009778506 ubox
46 80 0.005620509 ubox
46 81 0.999834256 ubox
46 82 0.013808774 ubox
47 79 0.006480603 ubox
47 80 0.999781495 ubox
47 81 0.016902833 ubox
48 78 0.007231599 ubox
48 79 0.999722561 ubox
48 80 0.019511175 ubox
49 78 0.998191241 ubox
49 79 0.021798414 ubox
50 76 0.259364830 ubox
51 64 0.039869017 ubox
51 75 0.259590204 ubox
51 78 0.016107251 ubox
52 63 0.044105718 ubox
52 74 0.259292904 ubox
52 76 0.934764559 ubox
52 77 0.106245080 ubox
53 61 0.004805958 ubox
53 62 0.043872935 ubox
53 72 0.182914787 ubox
53 73 0.184988859 ubox
53 75 0.956338811 ubox
54 60 0.006338339 ubox
54 63 0.125278966 ubox
54 68 0.003899688 ubox
54 71 0.257790926 ubox
54 74 0.956682944 ubox
55 62 0.125423660 ubox
55 66 0.004721038 ubox
55 70 0.258195708 ubox
55 73 0.956699205 ubox
56 61 0.125268313 ubox
56 65 0.005320497 ubox
56 69 0.254806010 ubox
56 72 0.955318460 ubox
60 69 0.949007772 ubox
60 72 0.006164600 ubox
61 68 0.952258263 ubox
61 71 0.011571324 ubox
62 71 0.105951362 ubox
63 70 0.106141817 ubox
65 77 0.005963538 ubox
66 77 0.130021788 ubox
67 76 0.130240779 ubox
68 75 0.130305627 ubox
69 74 0.129726574 ubox
3 23 0.9500000 lbox
4 22 0.9500000 lbox
5 21 0.9500000 lbox
6 20 0.9500000 lbox
7 18 0.9500000 lbox
8 17 0.9500000 lbox
9 16 0.9500000 lbox
24 36 0.9500000 lbox
25 35 0.9500000 lbox
26 34 0.9500000 lbox
27 33 0.9500000 lbox
28 32 0.9500000 lbox
40 87 0.9500000 lbox
41 86 0.9500000 lbox
42 85 0.9500000 lbox
43 84 0.9500000 lbox
44 83 0.9500000 lbox
45 82 0.9500000 lbox
46 81 0.9500000 lbox
47 80 0.9500000 lbox
48 79 0.9500000 lbox
49 78 0.9500000 lbox
52 76 0.9500000 lbox
53 75 0.9500000 lbox
54 74 0.9500000 lbox
55 73 0.9500000 lbox
56 72 0.9500000 lbox
60 69 0.9500000 lbox
61 68 0.9500000 lbox
showpage
end
%%EOF
