%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCUCUGGAGGCGGGGCUUCGAGCGUGGCUCGUGGGUUUUCCGUGAAGUCGCGGUGCAGCGGUGGGCGGC\
) } def
/len { sequence length } bind def

/coor [
[85.50303650 118.49034882]
[72.96415710 126.72299194]
[60.42527390 134.95564270]
[47.88639069 143.18827820]
[35.34750748 151.42092896]
[22.80862617 159.65357971]
[10.26974487 167.88621521]
[-2.26913762 176.11886597]
[-14.80801964 184.35150146]
[-21.69227028 199.23570251]
[-38.04668045 200.44618225]
[-47.04723740 186.73771667]
[-39.43493652 172.21240234]
[-23.04066467 171.81262207]
[-10.50178242 163.57998657]
[2.03710008 155.34733582]
[14.57598209 147.11468506]
[27.11486435 138.88204956]
[39.65374756 130.64939880]
[52.19263077 122.41675568]
[64.73151398 114.18411255]
[77.27039337 105.95146942]
[76.92827606 90.99750519]
[85.93582153 78.08953094]
[101.56813812 72.73909760]
[118.09198761 77.88059998]
[123.15483093 63.76083755]
[128.21768188 49.64107895]
[133.28051758 35.52131653]
[138.34336853 21.40155792]
[143.40620422 7.28179884]
[148.46905518 -6.83796072]
[153.22691345 -21.06338501]
[157.67761230 -35.38788605]
[162.12831116 -49.71238708]
[166.57899475 -64.03688812]
[171.02969360 -78.36138916]
[164.86502075 -93.17275238]
[172.72732544 -107.15716553]
[188.58531189 -109.58698273]
[200.27407837 -98.59825134]
[198.82702637 -82.62059784]
[185.35418701 -73.91069794]
[180.90350342 -59.58619690]
[176.45280457 -45.26169586]
[172.00212097 -30.93719292]
[167.55142212 -16.61269188]
[168.60777283 -9.06125641]
[162.58880615 -1.77511740]
[157.52597046 12.34464264]
[152.46311951 26.46440125]
[147.40028381 40.58416367]
[142.33743286 54.70392227]
[137.27459717 68.82368469]
[132.21174622 82.94344330]
[136.35321045 97.36038971]
[148.13795471 106.64045715]
[163.76690674 109.09941864]
[168.97923279 123.05223083]
[180.76397705 132.33230591]
[197.06320190 134.13992310]
[203.39865112 149.26586914]
[193.25297546 162.14985657]
[177.06315613 159.53794861]
[171.48391724 144.11705017]
[159.69915771 134.83697510]
[144.91313171 133.04179382]
[138.85787964 118.42520905]
[127.07313538 109.14513397]
[120.94076538 117.91749573]
[112.28219604 123.53144073]
[102.52463531 125.40276337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[56 69]
[57 68]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
