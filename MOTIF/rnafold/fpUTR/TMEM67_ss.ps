%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAGCUCAGCGAAGCCGCCGCAGAGGCUGAUGGGGGGCUGGAGGCUGUGAGGCUUCCAGCGUCGGUACC\
) } def
/len { sequence length } bind def

/coor [
[77.21700287 116.64750671]
[73.15093231 108.67939758]
[58.16521072 109.33369446]
[43.17948532 109.98798370]
[28.19376183 110.64227295]
[13.20803928 111.29656219]
[-1.77768397 111.95085144]
[-16.74556732 112.93190002]
[-31.68848801 114.23923492]
[-44.76179504 123.14985657]
[-58.11498642 116.55125427]
[-73.05790710 117.85859680]
[-88.00083160 119.16593170]
[-96.82136536 132.07841492]
[-111.89215088 136.25041199]
[-126.09720612 129.71203613]
[-132.72935486 115.55052185]
[-128.65708923 100.45248413]
[-115.80320740 91.54676819]
[-100.23693085 93.03836823]
[-89.30816650 104.22300720]
[-74.36524200 102.91567230]
[-59.42232513 101.60833740]
[-47.41783142 92.79122162]
[-32.99582291 99.29631805]
[-18.05290413 97.98898315]
[-11.46013641 94.14810944]
[-2.43197489 96.96513367]
[12.55374813 96.31084442]
[27.53947258 95.65654755]
[42.52519608 95.00225830]
[57.51091766 94.34796906]
[72.49664307 93.69367981]
[84.89636993 76.16547394]
[106.04088593 72.43712616]
[123.68781281 84.66728973]
[137.99356079 80.15670776]
[148.82836914 68.62771606]
[163.29324341 72.17974854]
[177.59899902 67.66915894]
[191.90475464 63.15857697]
[206.21051025 58.64798737]
[220.51625061 54.13740158]
[234.82200623 49.62681580]
[249.12776184 45.11622620]
[263.43353271 40.60564041]
[277.73928833 36.09505463]
[292.04504395 31.58446693]
[302.71917725 19.13477707]
[318.78598022 22.41955376]
[323.71728516 38.05970001]
[312.44021606 49.96597290]
[296.55560303 45.89022064]
[282.24984741 50.40080643]
[267.94412231 54.91139603]
[253.63835144 59.42198181]
[239.33259583 63.93256760]
[225.02684021 68.44315338]
[210.72108459 72.95374298]
[196.41532898 77.46433258]
[182.10958862 81.97491455]
[167.80383301 86.48550415]
[157.99226379 97.69186401]
[142.50415039 94.46246338]
[128.19839478 98.97304535]
[127.10279846 107.85129547]
[123.28318787 115.94043732]
[117.12347412 122.42745972]
[109.24274445 126.66038513]
[100.43305206 128.21377563]
[91.57984161 126.93149567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 33]
[3 32]
[4 31]
[5 30]
[6 29]
[7 28]
[8 26]
[9 25]
[11 23]
[12 22]
[13 21]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
