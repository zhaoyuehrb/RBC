%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:12 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SFN)
} def

/sequence { (\
GCAGGAGAGACACAGAGUCCGGCAUUGGUCCCAGGCAGCAGUUAGCCCGCCGCCCGCCUGUGUGUCCCCAGAGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 74 0.777187888 ubox
2 73 0.779302497 ubox
4 67 0.016229068 ubox
4 68 0.359546165 ubox
4 69 0.930586468 ubox
4 75 0.006098081 ubox
5 66 0.015867590 ubox
5 67 0.362104006 ubox
5 68 0.929858376 ubox
5 74 0.006128733 ubox
6 65 0.014586640 ubox
7 66 0.991463555 ubox
8 65 0.990969804 ubox
9 66 0.115592078 ubox
10 63 0.989433040 ubox
10 65 0.115832116 ubox
11 62 0.993208232 ubox
11 64 0.116076307 ubox
12 61 0.993026889 ubox
12 63 0.116048792 ubox
13 60 0.993211233 ubox
13 62 0.116063794 ubox
14 59 0.992905064 ubox
14 61 0.115865695 ubox
15 58 0.991216079 ubox
16 59 0.115040551 ubox
17 23 0.004740595 ubox
17 36 0.005346755 ubox
17 53 0.007611400 ubox
17 57 0.970728085 ubox
17 58 0.112800301 ubox
18 22 0.004439672 ubox
18 35 0.005238774 ubox
18 52 0.004795282 ubox
18 56 0.937519328 ubox
19 28 0.023213073 ubox
19 34 0.005294411 ubox
20 27 0.023421482 ubox
20 52 0.554225998 ubox
20 56 0.255320075 ubox
21 26 0.017857843 ubox
21 30 0.028889720 ubox
21 31 0.013189309 ubox
21 32 0.014703394 ubox
21 47 0.004981821 ubox
21 51 0.555649635 ubox
21 54 0.772965914 ubox
21 55 0.291484877 ubox
21 58 0.058734153 ubox
21 75 0.003326593 ubox
22 29 0.029243268 ubox
22 30 0.013166366 ubox
22 31 0.014645889 ubox
22 46 0.005300829 ubox
22 50 0.555657466 ubox
22 53 0.776083687 ubox
22 54 0.285974309 ubox
22 57 0.067215065 ubox
22 74 0.003350974 ubox
23 28 0.031869688 ubox
23 45 0.005568042 ubox
23 49 0.555062476 ubox
23 52 0.771292747 ubox
23 56 0.067200677 ubox
23 73 0.003350730 ubox
24 42 0.062356348 ubox
25 34 0.028312226 ubox
25 38 0.010594979 ubox
25 41 0.062848046 ubox
25 45 0.011142688 ubox
25 71 0.003261181 ubox
26 33 0.277353904 ubox
26 37 0.031759251 ubox
26 40 0.062744727 ubox
26 44 0.011326339 ubox
26 49 0.062843456 ubox
26 52 0.288106562 ubox
26 56 0.004199439 ubox
26 70 0.003348319 ubox
27 32 0.298531266 ubox
27 36 0.033248357 ubox
27 39 0.062016183 ubox
27 43 0.011022690 ubox
27 47 0.392433823 ubox
27 48 0.115667217 ubox
27 51 0.802513631 ubox
27 54 0.065883274 ubox
27 55 0.011700228 ubox
27 58 0.003614216 ubox
27 69 0.003347183 ubox
28 36 0.072758422 ubox
28 39 0.010116110 ubox
28 42 0.006372565 ubox
28 46 0.392613405 ubox
28 47 0.096691011 ubox
28 50 0.803089778 ubox
28 53 0.066974738 ubox
28 54 0.011480640 ubox
28 57 0.004229558 ubox
28 68 0.003336572 ubox
29 35 0.073339045 ubox
29 38 0.012085497 ubox
29 45 0.384441123 ubox
29 49 0.785626209 ubox
29 52 0.066123730 ubox
29 56 0.004175350 ubox
30 34 0.071474357 ubox
32 60 0.004780117 ubox
33 43 0.096061682 ubox
33 59 0.005120377 ubox
34 42 0.085811251 ubox
34 43 0.282257158 ubox
34 47 0.876840325 ubox
34 48 0.134913792 ubox
34 51 0.180766484 ubox
34 54 0.035323566 ubox
34 55 0.003735494 ubox
34 58 0.005348489 ubox
35 42 0.333164212 ubox
35 46 0.882828940 ubox
35 47 0.122235038 ubox
35 50 0.181029245 ubox
35 53 0.035553998 ubox
35 57 0.005477898 ubox
36 41 0.337833819 ubox
36 45 0.884450793 ubox
36 49 0.180812404 ubox
36 52 0.035594338 ubox
36 56 0.005472439 ubox
37 43 0.113630697 ubox
38 42 0.078792941 ubox
38 46 0.221653941 ubox
38 50 0.035849969 ubox
38 53 0.006978940 ubox
39 45 0.222041016 ubox
39 49 0.035839492 ubox
39 52 0.006986996 ubox
41 50 0.007291789 ubox
42 49 0.007038562 ubox
45 53 0.003613067 ubox
46 52 0.003612366 ubox
49 57 0.008247439 ubox
50 56 0.008257429 ubox
1 74 0.9500000 lbox
2 73 0.9500000 lbox
4 69 0.9500000 lbox
5 68 0.9500000 lbox
7 66 0.9500000 lbox
8 65 0.9500000 lbox
10 63 0.9500000 lbox
11 62 0.9500000 lbox
12 61 0.9500000 lbox
13 60 0.9500000 lbox
14 59 0.9500000 lbox
15 58 0.9500000 lbox
17 57 0.9500000 lbox
18 56 0.9500000 lbox
21 54 0.9500000 lbox
22 53 0.9500000 lbox
23 52 0.9500000 lbox
27 51 0.9500000 lbox
28 50 0.9500000 lbox
29 49 0.9500000 lbox
34 47 0.9500000 lbox
35 46 0.9500000 lbox
36 45 0.9500000 lbox
showpage
end
%%EOF
