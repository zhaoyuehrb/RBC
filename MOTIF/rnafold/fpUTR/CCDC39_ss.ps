%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCGGCAAUUGCCGCGGCACUGUGCAGGUGCCUGGGCUUGACGCGGGUGCUGCUCACCCGCUGUACAAGAAGGCGGAUCUUUGCUCUGUAUCUUCUCUAUCCGUUUGCAGUC\
) } def
/len { sequence length } bind def

/coor [
[75.02852631 138.37255859]
[78.63199615 123.81182861]
[89.26177979 113.23180389]
[75.64814758 119.53014374]
[62.03451920 125.82847595]
[50.47164154 135.38357544]
[41.72072220 147.56640625]
[32.96980667 159.74923706]
[24.21888542 171.93208313]
[23.13237762 188.29519653]
[8.30078602 195.29203796]
[-5.01841879 185.72486877]
[-3.12358093 169.43556213]
[12.03605270 163.18115234]
[20.78697205 150.99832153]
[29.53789139 138.81549072]
[38.28881073 126.63265991]
[30.72990799 113.67568970]
[23.17168999 100.71986389]
[8.25962162 102.34165192]
[-6.65244770 103.96343994]
[-21.56451797 105.58522034]
[-36.47658539 107.20700836]
[-51.38865662 108.82879639]
[-62.52003479 120.38179779]
[-78.47872925 118.73872375]
[-87.02259064 105.15999603]
[-81.59750366 90.06204224]
[-66.36512756 85.02673340]
[-53.01044083 93.91672516]
[-38.09837341 92.29493713]
[-23.18630219 90.67315674]
[-8.27423286 89.05136871]
[6.63783646 87.42958069]
[21.54990578 85.80780029]
[47.43758774 93.91133118]
[55.73618317 112.21484375]
[69.34981537 105.91651154]
[82.96344757 99.61817169]
[90.34587097 86.56061554]
[88.72408295 71.64854431]
[87.10229492 56.73647690]
[85.48051453 41.82440948]
[83.65695190 26.93566704]
[81.63195038 12.07298279]
[79.40588379 -2.76091814]
[76.97915649 -17.56331635]
[74.55242157 -32.36571503]
[72.12569427 -47.16810989]
[69.69896698 -61.97050858]
[67.27223206 -76.77291107]
[64.84550476 -91.57530212]
[52.70679855 -102.06488800]
[53.48347855 -118.08913422]
[66.57974243 -127.35560608]
[81.94925690 -122.75585938]
[87.80184174 -107.81842804]
[79.64790344 -94.00203705]
[82.07463074 -79.19963837]
[84.50135803 -64.39723969]
[86.92809296 -49.59484100]
[89.35482025 -34.79244232]
[91.78155518 -19.99004555]
[94.20828247 -5.18764830]
[98.45207214 0.98592085]
[96.49463654 10.04798222]
[98.51963806 24.91066551]
[102.59468842 31.19688988]
[100.39258575 40.20262146]
[102.01436615 55.11469269]
[103.63615417 70.02676392]
[105.25793457 84.93882751]
[111.79536438 89.47338104]
[115.28084564 96.54561615]
[129.83746338 100.16568756]
[144.39407349 103.78575134]
[158.95069885 107.40582275]
[173.50730896 111.02589417]
[188.06393433 114.64595795]
[202.62054443 118.26602936]
[217.17716980 121.88609314]
[224.79304504 108.84098053]
[235.77659607 98.47092438]
[249.23745728 91.61658478]
[264.08441162 88.83361053]
[279.11386108 90.34760284]
[293.10745239 96.03583527]
[304.93078613 105.43718719]
[313.62539673 117.78953552]
[318.48645020 132.09152222]
[319.11990356 147.18374634]
[315.47436523 161.84277344]
[307.84536743 174.88023376]
[296.85140991 185.23924255]
[283.38366699 192.08006287]
[268.53393555 194.84811401]
[253.50601196 193.31901550]
[239.51814270 187.61672974]
[227.70425415 178.20350647]
[219.02204895 165.84243774]
[214.17536926 151.53556824]
[213.55709839 136.44271851]
[199.00047302 132.82264709]
[184.44386292 129.20257568]
[169.88723755 125.58251190]
[155.33062744 121.96244049]
[140.77400208 118.34236908]
[126.21739197 114.72230530]
[111.66077423 111.10223389]
[124.09545898 119.49143219]
[130.37707520 133.11279297]
[128.68434143 148.01696777]
[119.50804901 159.88270569]
[105.50875092 165.26969910]
[90.74534607 162.61602783]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 39]
[4 38]
[5 37]
[6 17]
[7 16]
[8 15]
[9 14]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[40 72]
[41 71]
[42 70]
[43 69]
[44 67]
[45 66]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[74 109]
[75 108]
[76 107]
[77 106]
[78 105]
[79 104]
[80 103]
[81 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
