%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGCGGACAGGAAGGCGUGUGCAAGGCGGGGUCCGGCCCGCGCAGGUCGGGUAAGCGCGUCUAGGGCGCUGCGCGGCGCAGCGAAA\
) } def
/len { sequence length } bind def

/coor [
[171.17396545 193.67488098]
[175.02719116 180.10017395]
[164.04878235 169.87890625]
[153.07035828 159.65763855]
[142.09194946 149.43637085]
[131.11352539 139.21510315]
[117.58888245 146.86689758]
[102.36936951 150.00260925]
[86.92154694 148.32006836]
[72.73396301 141.98141479]
[61.17374039 131.59741211]
[53.35480881 118.16869354]
[50.03061295 102.98924255]
[51.52146530 87.52174377]
[57.68371201 73.25664520]
[46.34746552 63.43373871]
[35.01122284 53.61082840]
[19.51489449 50.42109680]
[14.96311855 36.23904419]
[3.62687492 26.41613388]
[-7.70936871 16.59322357]
[-19.04561234 6.77031183]
[-30.38185501 -3.05259895]
[-43.42773819 -2.94209504]
[-52.68964005 -11.54724598]
[-53.48372650 -23.76001930]
[-64.46214294 -33.98128891]
[-75.44056702 -44.20255661]
[-90.64382172 -41.09761810]
[-104.75457764 -47.55255127]
[-112.34696198 -61.08530045]
[-110.50154877 -76.49224854]
[-99.92793274 -87.84911346]
[-84.69189453 -90.78894043]
[-70.65199280 -84.18131256]
[-63.20685577 -70.56700134]
[-65.21929169 -55.18097687]
[-54.24087524 -44.95970535]
[-43.26245880 -34.73843765]
[-26.05159187 -31.85336113]
[-20.55894470 -14.38884258]
[-9.22270107 -4.56593180]
[2.11354232 5.25697947]
[13.44978619 15.07989025]
[24.78602982 24.90280151]
[39.47151566 27.38993073]
[44.83413315 42.27458191]
[56.17037964 52.09749222]
[67.50662231 61.92040634]
[79.64488983 54.26659012]
[93.45582581 50.37088776]
[107.80451965 50.55341721]
[121.51188660 54.79918289]
[133.45152283 62.75928879]
[142.64231873 73.77962494]
[148.32901001 86.95459747]
[150.04429626 101.20156860]
[147.64723206 115.34980774]
[141.33479309 128.23667908]
[152.31321716 138.45794678]
[163.29162598 148.67921448]
[174.27005005 158.90048218]
[185.24845886 169.12174988]
[200.89147949 164.11077881]
[216.85009766 167.58728027]
[228.85371399 178.52549744]
[233.73791504 193.91577148]
[230.27845764 209.59220886]
[241.61470032 219.41511536]
[252.95094299 229.23802185]
[264.28717041 239.06092834]
[275.62341309 248.88385010]
[286.95965576 258.70675659]
[298.29592896 268.52966309]
[314.22583008 274.33258057]
[313.05957031 291.24636841]
[296.48391724 294.80786133]
[288.47299194 279.86590576]
[277.13674927 270.04299927]
[265.80050659 260.22009277]
[254.46427917 250.39717102]
[243.12802124 240.57426453]
[231.79177856 230.75135803]
[220.45553589 220.92845154]
[207.75207520 226.26252747]
[193.92588806 225.55058289]
[181.72058105 218.87597656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[15 49]
[16 48]
[17 47]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[26 39]
[27 38]
[28 37]
[68 84]
[69 83]
[70 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
