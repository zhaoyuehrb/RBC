%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUGGGUCCAUCUUCAAGACACUGGGCUGUGGAUCAACCCAACCACCACUCCUCUUCCAAGAAUCAUUUUGACAGGUUCUUUUGGAGGAACUCCUUCUCUUUUUAACCCACCCUUUUAAAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[110.63696289 305.46328735]
[113.78163147 290.70614624]
[120.63944244 277.26617432]
[130.74282837 266.05975342]
[143.40290833 257.85092163]
[138.76765442 243.58508301]
[134.13240051 229.31922913]
[129.49714661 215.05339050]
[124.86189270 200.78753662]
[113.30747223 202.95217896]
[101.58240509 203.79661560]
[89.83704376 203.30999756]
[78.22200775 201.49858093]
[66.88624573 198.38557434]
[55.97512436 194.01091003]
[45.62855911 188.43069458]
[35.97922897 181.71647644]
[27.15087891 173.95436096]
[19.25671577 165.24388123]
[12.39797306 155.69673157]
[6.66260386 145.43536377]
[2.12415695 134.59133911]
[-1.15916884 123.30373383]
[-3.14526916 111.71729279]
[-3.80867529 99.98059082]
[-18.76927185 98.89406586]
[-33.72986984 97.80754089]
[-48.69046783 96.72102356]
[-63.01483917 103.43838501]
[-75.14822388 94.79951477]
[-90.10882568 93.71298981]
[-103.13645935 103.07569885]
[-118.53944397 98.58931732]
[-124.50193024 83.69541931]
[-116.45000458 69.81932068]
[-100.56041718 67.60558319]
[-89.02230072 78.75239563]
[-74.06170654 79.83891296]
[-60.80741501 73.04383850]
[-47.60394669 81.76042175]
[-32.64334869 82.84694672]
[-17.68275070 83.93347168]
[-2.72215319 85.01998901]
[1.79678655 66.34928894]
[9.67854500 48.83090591]
[20.65322304 33.06472778]
[34.34501266 19.59064865]
[50.28505325 8.87006187]
[67.92750549 1.27008188]
[86.66823578 -2.94904327]
[105.86549377 -3.64283609]
[124.86189270 -0.78753835]
[129.49714661 -15.05338573]
[134.13240051 -29.31923294]
[138.76765442 -43.58508301]
[143.40290833 -57.85092926]
[148.03816223 -72.11677551]
[140.55880737 -83.39106750]
[140.96546936 -96.71926117]
[148.88311768 -107.20492554]
[161.21881104 -111.12627411]
[166.19743347 -125.27595520]
[171.17605591 -139.42562866]
[176.15466309 -153.57530212]
[181.13328552 -167.72499084]
[186.11190796 -181.87466431]
[191.09051514 -196.02433777]
[181.53530884 -208.13636780]
[180.06794739 -223.49378967]
[187.15667725 -237.19610596]
[200.53952026 -244.87095642]
[215.94604492 -244.06932068]
[228.46008301 -235.04699707]
[234.08845520 -220.68298340]
[231.03518677 -205.56077576]
[220.27453613 -194.50582886]
[205.24020386 -191.04571533]
[200.26158142 -176.89604187]
[195.28295898 -162.74636841]
[190.30433655 -148.59669495]
[185.32572937 -134.44700623]
[180.34710693 -120.29733276]
[175.36848450 -106.14765930]
[183.28564453 -91.36194611]
[178.00224304 -75.08981323]
[162.30401611 -67.48152161]
[157.66876221 -53.21567535]
[153.03350830 -38.94982529]
[148.39825439 -24.68397903]
[143.76298523 -10.41813087]
[139.12773132 3.84771657]
[152.10237122 10.21367550]
[164.06715393 18.31988716]
[174.79017639 28.00923347]
[184.06361389 39.09391403]
[191.70770264 51.35908508]
[197.57431030 64.56702423]
[201.54971313 78.46173096]
[203.55686951 92.77388763]
[203.55686951 107.22611237]
[201.54971313 121.53826904]
[197.57431030 135.43298340]
[191.70770264 148.64091492]
[184.06361389 160.90608215]
[174.79017639 171.99076843]
[164.06715393 181.68011475]
[152.10237122 189.78633118]
[139.12773132 196.15228271]
[143.76298523 210.41813660]
[148.39825439 224.68397522]
[153.03350830 238.94982910]
[157.66876221 253.21566772]
[172.73600769 252.41534424]
[187.49678040 255.54290771]
[200.94468689 262.38516235]
[212.16281128 272.47555542]
[220.38629150 285.12612915]
[225.05442810 299.47430420]
[225.84895325 314.54187012]
[222.71568298 329.30145264]
[215.86824036 342.74670410]
[205.77351379 353.96093750]
[193.11978149 362.17953491]
[178.76977539 366.84213257]
[163.70191956 367.63082886]
[148.94355774 364.49185181]
[135.50093079 357.63922119]
[124.29060364 347.54016113]
[116.07689667 334.88327026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 112]
[6 111]
[7 110]
[8 109]
[9 108]
[25 43]
[26 42]
[27 41]
[28 40]
[30 38]
[31 37]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[57 86]
[61 83]
[62 82]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
