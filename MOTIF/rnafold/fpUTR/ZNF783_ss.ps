%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGGCCAGCGGGGCACGUGGCUCGGGACGCAGUUCGCUGCCGCCCGGCAGUAGCUCUCAGGUUAGGCGGGUCCCGCUCCGCUUCCGCCGUCGCUGCCGCGCCGCCCCGGGCCCGACAGGCCGGGUCCAGGGACUGCAACCCAGCGAGGGACGCGGGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[86.72599792 155.40220642]
[76.64233398 144.29725647]
[74.02857208 129.52673340]
[79.68901062 115.63575745]
[91.88176727 106.89879608]
[76.92578125 105.75055695]
[70.73902130 108.28807831]
[65.06367493 107.41678619]
[61.42251968 104.26109314]
[46.52148819 102.54084015]
[31.62045670 100.82059479]
[16.71942520 99.10034180]
[1.81839311 97.38008881]
[-13.08263779 95.65983582]
[-27.98366928 93.93959045]
[-42.88470078 92.21933746]
[-57.48115921 98.32293701]
[-69.23712158 89.17707825]
[-84.13815308 87.45682526]
[-99.03918457 85.73657227]
[-113.97042847 84.30206299]
[-128.92642212 83.15382385]
[-143.88240051 82.00559235]
[-158.83839417 80.85735321]
[-173.19035339 87.51555634]
[-185.28799438 78.82669067]
[-200.24398804 77.67845154]
[-215.19996643 76.53021240]
[-230.15596008 75.38198090]
[-238.99928284 77.85341644]
[-245.38653564 74.06580353]
[-260.31777954 72.63129425]
[-265.72653198 79.12538147]
[-273.19024658 82.88505554]
[-281.43975830 83.35502625]
[-289.10516357 80.53247070]
[-294.94354248 74.95507050]
[-298.04019165 67.60043335]
[-312.81781006 65.02716064]
[-327.59542847 62.45388412]
[-342.37307739 59.88060760]
[-357.15069580 57.30733490]
[-371.92831421 54.73405838]
[-387.13198853 60.88067245]
[-399.88864136 50.57534409]
[-397.07531738 34.41931152]
[-381.58615112 29.03251648]
[-369.35504150 39.95643234]
[-354.57742310 42.52970886]
[-339.79980469 45.10298157]
[-325.02215576 47.67625809]
[-310.24453735 50.24953079]
[-295.46691895 52.82280731]
[-276.03900146 43.32027054]
[-258.88327026 57.70005035]
[-243.95202637 59.13455582]
[-229.00772095 60.42599106]
[-214.05172729 61.57423019]
[-199.09574890 62.72246933]
[-184.13975525 63.87070847]
[-170.85754395 57.13037109]
[-157.69015503 65.90135956]
[-142.73416138 67.04959869]
[-127.77817535 68.19783783]
[-112.82218933 69.34607697]
[-108.64682007 66.94136047]
[-102.90940094 67.16653442]
[-97.31893158 70.83554077]
[-82.41790009 72.55579376]
[-67.51686859 74.27604675]
[-53.98622894 68.04940033]
[-41.16444778 77.31830597]
[-26.26341820 79.03855896]
[-11.36238670 80.75880432]
[3.53864455 82.47905731]
[18.43967628 84.19931030]
[33.34070587 85.91956329]
[48.24173737 87.63980865]
[63.14276886 89.36006165]
[78.07402039 90.79457092]
[93.03000641 91.94281006]
[108.02931976 91.79914093]
[122.96056366 90.36463165]
[137.89181519 88.93012238]
[152.82305908 87.49562073]
[165.82003784 78.47401428]
[179.22892761 84.95869446]
[194.16017151 83.52418518]
[209.07699585 81.94673157]
[223.97802734 80.22648621]
[236.79980469 70.95758057]
[250.33044434 77.18422699]
[265.23147583 75.46397400]
[280.13250732 73.74372101]
[295.03353882 72.02346802]
[309.93457031 70.30322266]
[324.83560181 68.58296967]
[331.00778198 54.58827591]
[343.27514648 45.62120438]
[358.28405762 44.00912857]
[371.99298096 50.08543015]
[380.76077271 62.12668228]
[395.66180420 60.40642929]
[406.25454712 46.51278687]
[423.28060913 44.59320450]
[436.18280029 55.34799576]
[451.04812622 53.34263229]
[465.91348267 51.33726883]
[478.55535889 41.82447052]
[492.20278931 47.79079056]
[507.06814575 45.78543091]
[521.93347168 43.78006744]
[536.79882812 41.77470398]
[551.66418457 39.76934052]
[566.52954102 37.76397705]
[581.39489746 35.75861359]
[590.77532959 23.03921509]
[606.41448975 20.76085091]
[619.03399658 30.27523422]
[621.14691162 45.93764877]
[611.49963379 58.45586395]
[595.81573486 60.40304184]
[583.40020752 50.62395859]
[568.53491211 52.62932205]
[553.66955566 54.63468552]
[538.80419922 56.64004898]
[523.93884277 58.64541245]
[509.07348633 60.65077591]
[494.20816040 62.65613937]
[482.62954712 72.02550507]
[467.91885376 66.20261383]
[453.05349731 68.20797729]
[438.18814087 70.21334076]
[431.86856079 81.47343445]
[420.03463745 87.10868835]
[406.92550659 84.85153961]
[397.38204956 75.30745697]
[382.48101807 77.02770996]
[376.68753052 90.74999237]
[364.72372437 99.79008484]
[349.74227905 101.64024353]
[335.75442505 95.70421600]
[326.55584717 83.48400116]
[311.65481567 85.20425415]
[296.75378418 86.92449951]
[281.85275269 88.64475250]
[266.95172119 90.36500549]
[252.05068970 92.08525848]
[240.29473877 101.23111725]
[225.69827271 95.12751770]
[210.79724121 96.84776306]
[204.48371887 100.75703430]
[195.59468079 98.45543671]
[180.66343689 99.88994598]
[168.73443604 108.80893707]
[154.25756836 102.42686462]
[139.32632446 103.86137390]
[124.39507294 105.29588318]
[109.46382904 106.73039246]
[121.82174683 115.23225403]
[127.74718475 129.01228333]
[125.41678619 143.83015442]
[115.54765320 155.12617493]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 81]
[6 80]
[9 79]
[10 78]
[11 77]
[12 76]
[13 75]
[14 74]
[15 73]
[16 72]
[18 70]
[19 69]
[20 68]
[21 65]
[22 64]
[23 63]
[24 62]
[26 60]
[27 59]
[28 58]
[29 57]
[31 56]
[32 55]
[38 53]
[39 52]
[40 51]
[41 50]
[42 49]
[43 48]
[82 159]
[83 158]
[84 157]
[85 156]
[87 154]
[88 153]
[89 151]
[90 150]
[92 148]
[93 147]
[94 146]
[95 145]
[96 144]
[97 143]
[102 138]
[103 137]
[106 133]
[107 132]
[108 131]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
