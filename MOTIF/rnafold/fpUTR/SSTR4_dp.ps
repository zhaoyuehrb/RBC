%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:13 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (SSTR4)
} def

/sequence { (\
CCGAGCUCUCUGGCGCAGCGCUAGCUCCGCCGCGCUCAGCUGCCCUGCGCCGGCACCCCUGGUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 53 0.009437339 ubox
1 62 0.892536221 ubox
2 52 0.009522874 ubox
2 61 0.900975069 ubox
3 10 0.034900945 ubox
3 27 0.024601014 ubox
3 37 0.023815075 ubox
3 51 0.004474131 ubox
3 60 0.723717441 ubox
3 64 0.031926317 ubox
4 9 0.033476660 ubox
4 11 0.011782277 ubox
4 26 0.024712995 ubox
4 36 0.023899021 ubox
4 41 0.003217495 ubox
4 60 0.439315215 ubox
4 63 0.029659889 ubox
5 10 0.012101654 ubox
5 25 0.024722219 ubox
5 35 0.023923403 ubox
5 40 0.003352588 ubox
5 54 0.180366374 ubox
5 59 0.501023854 ubox
5 63 0.055232795 ubox
6 24 0.023867973 ubox
6 34 0.023885278 ubox
6 39 0.003342941 ubox
6 53 0.175144850 ubox
6 62 0.059122576 ubox
7 23 0.020290694 ubox
7 38 0.003187224 ubox
7 52 0.146979360 ubox
7 53 0.006808047 ubox
7 61 0.055324314 ubox
7 62 0.009253214 ubox
8 52 0.037730589 ubox
8 53 0.016755986 ubox
8 61 0.017387903 ubox
8 62 0.023347135 ubox
9 52 0.013071116 ubox
9 53 0.028731412 ubox
9 61 0.023381573 ubox
9 62 0.003621442 ubox
10 24 0.006764571 ubox
10 52 0.038482707 ubox
10 53 0.974101177 ubox
11 23 0.014036705 ubox
11 32 0.021433549 ubox
11 52 0.982725821 ubox
12 22 0.024545254 ubox
12 31 0.024350691 ubox
12 51 0.999316489 ubox
13 21 0.024676636 ubox
13 30 0.024359358 ubox
13 50 0.999374552 ubox
14 20 0.024674801 ubox
14 29 0.024358997 ubox
14 49 0.999362116 ubox
15 19 0.023083236 ubox
15 28 0.024327509 ubox
15 48 0.999364741 ubox
16 47 0.999372613 ubox
17 26 0.023899441 ubox
17 36 0.003364291 ubox
17 46 0.998902464 ubox
18 25 0.024503151 ubox
18 35 0.004419775 ubox
18 40 0.003240001 ubox
18 43 0.050300986 ubox
18 45 0.996803809 ubox
19 24 0.024505318 ubox
19 34 0.004653020 ubox
19 39 0.003272233 ubox
19 42 0.055976185 ubox
20 33 0.004732175 ubox
20 40 0.063660641 ubox
20 41 0.012055608 ubox
20 43 0.994539372 ubox
21 32 0.004726892 ubox
21 39 0.064822403 ubox
21 42 0.977137770 ubox
22 38 0.064451716 ubox
22 42 0.196653228 ubox
23 36 0.065298572 ubox
23 41 0.975863855 ubox
24 30 0.005709709 ubox
24 33 0.007246729 ubox
24 35 0.065926569 ubox
24 40 0.997106150 ubox
25 29 0.005678758 ubox
25 32 0.007265082 ubox
25 34 0.065907364 ubox
25 39 0.997080744 ubox
26 38 0.977970908 ubox
28 34 0.217015706 ubox
29 33 0.203519045 ubox
29 35 0.962216712 ubox
29 43 0.003440675 ubox
29 54 0.024804590 ubox
30 34 0.955954308 ubox
30 42 0.003448879 ubox
30 53 0.024834004 ubox
31 52 0.024832337 ubox
32 40 0.005725814 ubox
32 50 0.008630072 ubox
32 51 0.023348531 ubox
33 39 0.005749520 ubox
33 49 0.012069812 ubox
34 40 0.003381567 ubox
34 48 0.012070211 ubox
34 50 0.021788224 ubox
35 39 0.003366369 ubox
35 47 0.011966875 ubox
35 49 0.021782106 ubox
37 47 0.021579981 ubox
38 46 0.021790027 ubox
38 60 0.003936582 ubox
39 45 0.021672158 ubox
39 48 0.020339994 ubox
39 54 0.007405293 ubox
39 59 0.004007718 ubox
40 47 0.020358216 ubox
40 53 0.007413159 ubox
41 52 0.007353993 ubox
41 55 0.006431645 ubox
42 48 0.004693814 ubox
42 50 0.004063314 ubox
42 51 0.006130887 ubox
42 54 0.007627546 ubox
43 47 0.004668995 ubox
43 49 0.005679697 ubox
43 53 0.007595690 ubox
44 52 0.007553041 ubox
46 55 0.003383582 ubox
47 54 0.003657992 ubox
48 53 0.003657437 ubox
49 63 0.020910182 ubox
50 62 0.021915847 ubox
51 61 0.021983429 ubox
52 58 0.017912822 ubox
52 59 0.033659789 ubox
52 60 0.021412407 ubox
52 64 0.024886823 ubox
53 57 0.017756690 ubox
53 58 0.033388737 ubox
53 59 0.021398988 ubox
53 63 0.027223972 ubox
54 61 0.056527963 ubox
54 62 0.029899219 ubox
55 60 0.048515072 ubox
55 63 0.294185363 ubox
56 62 0.314533058 ubox
57 61 0.312428574 ubox
1 62 0.9500000 lbox
2 61 0.9500000 lbox
3 60 0.9500000 lbox
10 53 0.9500000 lbox
11 52 0.9500000 lbox
12 51 0.9500000 lbox
13 50 0.9500000 lbox
14 49 0.9500000 lbox
15 48 0.9500000 lbox
16 47 0.9500000 lbox
17 46 0.9500000 lbox
18 45 0.9500000 lbox
20 43 0.9500000 lbox
21 42 0.9500000 lbox
23 41 0.9500000 lbox
24 40 0.9500000 lbox
25 39 0.9500000 lbox
26 38 0.9500000 lbox
29 35 0.9500000 lbox
30 34 0.9500000 lbox
showpage
end
%%EOF
