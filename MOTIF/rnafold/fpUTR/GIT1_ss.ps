%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:16:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGCGGGGCGGAGGGCGCCCGAGGGCGAGCGGGCAGGCGGGCACGGCGGGUUCCGGGCCAGCCCCGGGGCGGACGGUUGGCCGGGCGCGCGGAGCCUCGCCGGGGCCUCGCCGGAGCCGGGCCGGGCAGCAGGGGCCGCCGCCGCCGCCCGGGCCCGCCGCCCGCGCCCCCCACGCUGGCCCAGAGGGCUGCGGCCGCGUCGCCGCUGAGG\
) } def
/len { sequence length } bind def

/coor [
[213.98448181 555.00140381]
[212.88955688 540.04138184]
[211.79461670 525.08142090]
[210.69969177 510.12142944]
[209.60476685 495.16143799]
[208.50982666 480.20147705]
[207.30563354 465.24987793]
[205.99223328 450.30749512]
[197.17024231 438.30657959]
[203.66949463 423.88192749]
[202.35609436 408.93954468]
[201.04267883 393.99716187]
[197.46113586 379.43099976]
[191.69558716 365.58331299]
[179.66069031 356.80776978]
[181.49922180 341.09375000]
[175.73367310 327.24606323]
[169.96810913 313.39837646]
[164.20256042 299.55068970]
[158.43701172 285.70300293]
[152.67144775 271.85531616]
[150.13734436 270.66354370]
[147.92187500 268.39764404]
[146.43595886 265.17376709]
[146.04103088 261.25424194]
[146.99984741 257.02633667]
[142.05303955 242.86549377]
[137.10624695 228.70465088]
[132.15945435 214.54382324]
[127.21265411 200.38298035]
[122.04077911 195.10664368]
[122.29867554 185.97895813]
[117.55931854 171.74734497]
[112.81996155 157.51574707]
[108.08060455 143.28414917]
[103.34124756 129.05255127]
[98.60189056 114.82093811]
[84.24438477 112.14968109]
[75.42454529 95.95932007]
[63.75586700 86.53371429]
[52.08719254 77.10810852]
[40.41851425 67.68250275]
[28.68128967 58.34240341]
[16.87613678 49.08830261]
[5.07098436 39.83420181]
[-13.21627617 37.66416931]
[-19.12083054 21.13696861]
[-31.05994034 12.05634785]
[-42.99904633 2.97572660]
[-54.93815613 -6.10489464]
[-66.87726593 -15.18551636]
[-78.88240051 -24.17866898]
[-90.95291138 -33.08386993]
[-103.02342987 -41.98907471]
[-115.09394836 -50.89427948]
[-127.16445923 -59.79948044]
[-139.23498535 -68.70468140]
[-151.30549622 -77.60988617]
[-167.00398254 -79.57656097]
[-172.65216064 -93.35870361]
[-184.72267151 -102.26390839]
[-191.23423767 -103.38038635]
[-195.55734253 -107.06340027]
[-197.01068115 -111.60989380]
[-208.81582642 -120.86399841]
[-220.62098694 -130.11810303]
[-232.42613220 -139.37219238]
[-237.58825684 -140.10476685]
[-241.55770874 -142.50288391]
[-243.90002441 -145.83409119]
[-244.53407288 -149.29968262]
[-255.92234802 -159.06221008]
[-267.31063843 -168.82475281]
[-282.82369995 -171.93209839]
[-287.45074463 -186.08976746]
[-298.83901978 -195.85229492]
[-314.79956055 -201.57048035]
[-313.72317505 -218.49021912]
[-297.16668701 -222.13973999]
[-289.07650757 -207.24058533]
[-277.68820190 -197.47804260]
[-262.98971558 -195.06896973]
[-257.54809570 -180.21302795]
[-246.15980530 -170.45048523]
[-234.77153015 -160.68795776]
[-223.17202759 -151.17735291]
[-211.36688232 -141.92324829]
[-199.56173706 -132.66914368]
[-187.75657654 -123.41504669]
[-175.81747437 -114.33442688]
[-163.74694824 -105.42922211]
[-148.91181946 -104.09951019]
[-142.40028381 -89.68040466]
[-130.32977295 -80.77519989]
[-118.25926208 -71.86999512]
[-106.18874359 -62.96479416]
[-94.11822510 -54.05958939]
[-82.04771423 -45.15438843]
[-69.97719574 -36.24918365]
[-62.73071671 -34.80812454]
[-57.79664230 -27.12462425]
[-45.85753632 -18.04400253]
[-33.91842651 -8.96338177]
[-21.97931862 0.11723925]
[-10.04020977 9.19786072]
[1.98229825 7.87877560]
[12.00280952 15.34367275]
[14.32508469 28.02904892]
[26.13023758 37.28314972]
[37.93539047 46.53725052]
[45.13666534 48.18943787]
[49.84412003 56.01382828]
[61.51279449 65.43943787]
[73.18147278 74.86503601]
[84.85014343 84.29064178]
[79.80944061 70.16296387]
[88.40718842 57.87155914]
[103.40678406 57.76193237]
[112.18327332 69.92635345]
[107.34954834 84.12625885]
[118.87924957 74.53116608]
[130.40896606 64.93606567]
[141.93865967 55.34097290]
[153.46836853 45.74587631]
[164.99807739 36.15078354]
[167.63702393 30.09413719]
[172.24574280 26.77546883]
[177.00775146 26.44973183]
[188.81289673 17.19563103]
[200.61805725 7.94153118]
[206.70547485 -6.66168165]
[221.49542236 -8.42431164]
[233.30058289 -17.67841339]
[238.12185669 -25.43318748]
[245.34649658 -26.97997475]
[257.28561401 -36.06059647]
[260.86346436 -51.69960022]
[275.38317871 -58.52294159]
[289.70642090 -51.29633713]
[292.84567261 -35.56341934]
[282.39273071 -23.39313698]
[266.36624146 -24.12148666]
[254.42712402 -15.04086590]
[242.55467224 -5.87326002]
[230.74952698 3.38084054]
[225.50648499 17.32213783]
[209.87216187 19.74668312]
[198.06700134 29.00078392]
[186.26185608 38.25488281]
[174.59317017 47.68048859]
[163.06347656 57.27558517]
[151.53376770 66.87068176]
[140.00405884 76.46577454]
[128.47434998 86.06086731]
[116.94464111 95.65596771]
[112.83349609 110.08158112]
[117.57285309 124.31318665]
[122.31221008 138.54478455]
[127.05156708 152.77639771]
[131.79092407 167.00799561]
[136.53027344 181.23959351]
[141.37348938 195.43618774]
[146.32028198 209.59703064]
[151.26707458 223.75785828]
[156.21388245 237.91868591]
[161.16067505 252.07952881]
[166.51913452 266.08975220]
[172.28469849 279.93743896]
[178.05024719 293.78512573]
[183.81579590 307.63281250]
[189.58135986 321.48049927]
[195.34690857 335.32818604]
[207.79418945 345.09423828]
[205.54327393 359.81777954]
[211.30882263 373.66546631]
[223.71992493 369.31347656]
[239.51513672 374.92260742]
[250.61328125 385.01376343]
[261.71142578 395.10488892]
[270.16333008 398.56127930]
[272.89666748 405.42547607]
[283.84619141 415.67767334]
[294.79568481 425.92990112]
[305.74520874 436.18212891]
[316.69473267 446.43432617]
[332.38937378 452.84646606]
[330.57254028 469.70275879]
[313.87203979 472.62322998]
[306.44253540 457.38385010]
[295.49301147 447.13165283]
[284.54348755 436.87942505]
[273.59396362 426.62719727]
[262.64443970 416.37500000]
[251.62030029 406.20303345]
[240.52215576 396.11190796]
[229.42399597 386.02078247]
[215.98507690 392.68374634]
[217.29847717 407.62612915]
[218.61187744 422.56854248]
[227.52780151 435.63821411]
[220.93461609 448.99407959]
[222.24801636 463.93649292]
[226.11579895 472.20822144]
[223.46981812 479.10653687]
[224.56474304 494.06652832]
[225.65968323 509.02648926]
[226.75460815 523.98651123]
[227.84953308 538.94647217]
[228.94445801 553.90643311]
[241.06802368 564.04522705]
[242.38824463 579.79425049]
[232.12187195 591.80999756]
[216.35974121 592.96362305]
[204.45326233 582.57073975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 209]
[2 208]
[3 207]
[4 206]
[5 205]
[6 204]
[7 202]
[8 201]
[10 199]
[11 198]
[12 197]
[13 175]
[14 174]
[16 172]
[17 171]
[18 170]
[19 169]
[20 168]
[21 167]
[26 166]
[27 165]
[28 164]
[29 163]
[30 162]
[32 161]
[33 160]
[34 159]
[35 158]
[36 157]
[37 156]
[39 115]
[40 114]
[41 113]
[42 112]
[43 110]
[44 109]
[45 108]
[47 105]
[48 104]
[49 103]
[50 102]
[51 101]
[52 99]
[53 98]
[54 97]
[55 96]
[56 95]
[57 94]
[58 93]
[60 91]
[61 90]
[64 89]
[65 88]
[66 87]
[67 86]
[71 85]
[72 84]
[73 83]
[75 81]
[76 80]
[120 155]
[121 154]
[122 153]
[123 152]
[124 151]
[125 150]
[128 149]
[129 148]
[130 147]
[132 145]
[133 144]
[135 143]
[136 142]
[177 196]
[178 195]
[179 194]
[181 193]
[182 192]
[183 191]
[184 190]
[185 189]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
