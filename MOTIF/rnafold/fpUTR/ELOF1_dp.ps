%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ELOF1)
} def

/sequence { (\
GAAGUCACUAUCUCCCGGGUGAACGGAGCUUUCGCAGCUGGAGAAGGCUCAUCCACCUGCAGAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.142237308 ubox
1 14 0.075814313 ubox
1 32 0.014606918 ubox
1 33 0.023959582 ubox
2 11 0.140801987 ubox
2 13 0.066144786 ubox
2 31 0.019875229 ubox
2 32 0.022349140 ubox
3 9 0.118421475 ubox
3 13 0.078927145 ubox
3 30 0.022287389 ubox
3 31 0.020295907 ubox
4 8 0.119381282 ubox
4 11 0.045825738 ubox
4 12 0.091454104 ubox
4 24 0.024329877 ubox
4 29 0.023971969 ubox
4 30 0.016590386 ubox
4 48 0.003239083 ubox
4 60 0.017878391 ubox
4 64 0.113685491 ubox
5 10 0.045701872 ubox
5 22 0.033851136 ubox
5 23 0.017240899 ubox
5 27 0.005136722 ubox
5 28 0.016586821 ubox
5 47 0.003197259 ubox
5 59 0.013003045 ubox
5 63 0.113791112 ubox
6 21 0.040317553 ubox
6 26 0.005774594 ubox
6 59 0.003381656 ubox
6 62 0.112822566 ubox
7 20 0.040331274 ubox
8 19 0.040323523 ubox
8 28 0.006648182 ubox
8 62 0.026426868 ubox
9 18 0.039882607 ubox
9 21 0.005583177 ubox
9 27 0.006662754 ubox
9 59 0.006430932 ubox
9 61 0.026514247 ubox
10 20 0.006023632 ubox
10 58 0.003569863 ubox
11 19 0.006051866 ubox
11 22 0.004312683 ubox
11 44 0.004272279 ubox
11 63 0.780679189 ubox
12 17 0.007172176 ubox
12 18 0.006239505 ubox
12 21 0.004406722 ubox
12 28 0.040442006 ubox
12 43 0.004416258 ubox
12 62 0.854335156 ubox
13 17 0.005670219 ubox
13 27 0.041874570 ubox
13 42 0.004412235 ubox
13 61 0.828960645 ubox
13 63 0.276708412 ubox
14 26 0.034773224 ubox
14 41 0.003778947 ubox
14 62 0.299101050 ubox
15 25 0.025640000 ubox
15 26 0.038201619 ubox
16 25 0.044924749 ubox
16 40 0.003303802 ubox
16 59 0.983778061 ubox
17 24 0.050611531 ubox
17 39 0.004008276 ubox
17 57 0.008796752 ubox
17 58 0.995844073 ubox
18 38 0.004029285 ubox
18 56 0.008057366 ubox
18 57 0.997744072 ubox
19 56 0.997756408 ubox
20 36 0.003868176 ubox
20 55 0.997279131 ubox
21 35 0.003829499 ubox
21 53 0.132798959 ubox
21 54 0.985537705 ubox
22 52 0.182396975 ubox
24 34 0.004072971 ubox
25 33 0.007992951 ubox
25 50 0.046981559 ubox
25 53 0.036271130 ubox
25 54 0.006353461 ubox
26 32 0.007727206 ubox
26 33 0.009050949 ubox
26 49 0.020515411 ubox
26 50 0.996170071 ubox
26 52 0.008004423 ubox
26 53 0.006468281 ubox
27 31 0.006605920 ubox
27 32 0.008506216 ubox
27 49 0.997513989 ubox
27 52 0.005069094 ubox
28 48 0.997930531 ubox
29 46 0.008822616 ubox
29 47 0.997888452 ubox
29 62 0.008114969 ubox
30 43 0.009645707 ubox
30 44 0.026320236 ubox
30 45 0.010571037 ubox
30 46 0.996444969 ubox
30 61 0.008021429 ubox
30 63 0.014435565 ubox
31 42 0.023963240 ubox
31 43 0.044113043 ubox
31 44 0.009194987 ubox
31 45 0.994240477 ubox
31 62 0.015757959 ubox
31 63 0.012378436 ubox
32 41 0.027189025 ubox
32 42 0.059729713 ubox
32 43 0.006398836 ubox
32 44 0.995265272 ubox
32 61 0.016114167 ubox
32 62 0.013244389 ubox
32 63 0.027899634 ubox
33 40 0.029824187 ubox
33 41 0.062353710 ubox
33 43 0.995236825 ubox
33 62 0.030490371 ubox
34 39 0.026659686 ubox
34 60 0.063842095 ubox
35 59 0.063947781 ubox
36 58 0.063931274 ubox
37 57 0.063796378 ubox
39 55 0.063304904 ubox
40 54 0.063946700 ubox
41 53 0.063925880 ubox
42 52 0.063542841 ubox
43 48 0.004230364 ubox
43 50 0.057154572 ubox
44 49 0.053593058 ubox
53 62 0.003458477 ubox
11 63 0.9500000 lbox
12 62 0.9500000 lbox
13 61 0.9500000 lbox
16 59 0.9500000 lbox
17 58 0.9500000 lbox
18 57 0.9500000 lbox
19 56 0.9500000 lbox
20 55 0.9500000 lbox
21 54 0.9500000 lbox
26 50 0.9500000 lbox
27 49 0.9500000 lbox
28 48 0.9500000 lbox
29 47 0.9500000 lbox
30 46 0.9500000 lbox
31 45 0.9500000 lbox
32 44 0.9500000 lbox
33 43 0.9500000 lbox
showpage
end
%%EOF
