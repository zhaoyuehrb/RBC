%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGUGCUCCGACCGGAAUCGGAAGUGGCUGCGUCGUCGACGCUGGGCUUUCGGGUCCCGCGCCCAGAG\
) } def
/len { sequence length } bind def

/coor [
[73.17675018 95.23931122]
[58.23714066 96.58390045]
[43.29752350 97.92848969]
[28.35791016 99.27307892]
[13.41829586 100.61766815]
[-1.48738694 102.29713440]
[-16.35163307 104.31063843]
[-31.21587944 106.32413483]
[-46.03120422 108.67065430]
[-60.79014969 111.34900665]
[-75.54909515 114.02735901]
[-90.30803680 116.70571136]
[-99.10118103 129.83796692]
[-114.62078094 132.82418823]
[-127.65933990 123.89268494]
[-130.48130798 108.34237671]
[-121.41246033 95.39897919]
[-105.83318329 92.74158478]
[-92.98638916 101.94676971]
[-78.22744751 99.26841736]
[-63.46850204 96.59005737]
[-48.70955658 93.91170502]
[-42.49026871 89.47348785]
[-33.22937775 91.45988464]
[-18.36513138 89.44638824]
[-3.50088596 87.43289185]
[2.91126084 83.27816772]
[12.07370663 85.67805481]
[27.01332092 84.33346558]
[41.95293427 82.98887634]
[56.89255142 81.64428711]
[71.83216095 80.29969788]
[82.90394592 70.17964172]
[85.58230591 55.42069244]
[88.26065826 40.66175079]
[85.13967133 23.99754333]
[100.28865814 16.38541603]
[111.79695892 28.83512878]
[103.01959991 43.34010315]
[100.34124756 58.09904861]
[97.66289520 72.85799408]
[115.31060791 80.96725464]
[121.42839050 97.19801331]
[136.05230713 100.53582764]
[150.67622375 103.87364197]
[165.30014038 107.21145630]
[179.92407227 110.54927063]
[194.54798889 113.88708496]
[203.76417542 107.36835480]
[214.82768250 107.19442749]
[223.87084961 113.17371368]
[227.87446594 123.00740814]
[242.14030457 127.64266205]
[256.40615845 132.27792358]
[273.33850098 131.42207336]
[278.84823608 147.45574951]
[264.96640015 157.18873596]
[251.77090454 146.54376221]
[237.50505066 141.90850830]
[223.23921204 137.27325439]
[204.96243286 142.94030762]
[191.21017456 128.51100159]
[176.58625793 125.17318726]
[161.96232605 121.83537292]
[147.33840942 118.49755859]
[132.71449280 115.15974426]
[118.09057617 111.82192993]
[106.96434021 121.93990326]
[91.00234985 122.70908356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[5 28]
[6 26]
[7 25]
[8 24]
[9 22]
[10 21]
[11 20]
[12 19]
[33 41]
[34 40]
[35 39]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
