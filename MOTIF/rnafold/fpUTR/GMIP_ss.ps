%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUGGCCUCCGCUGGGCAGGGCGACGCGGAACCGAGGCGGCGGCGGCGGCUGCGGCGGCAGGAAAUCGGGGCUCGGCCCCGCCGGCGCGCGACCCCAUCCCCAUCCCGGUCCCUGCAGAGCGAUCCCCGGGCCCAGAU\
) } def
/len { sequence length } bind def

/coor [
[163.18946838 756.77746582]
[160.36227417 741.61138916]
[166.20446777 727.33300781]
[178.85180664 718.49847412]
[178.17399597 703.51379395]
[177.49618530 688.52917480]
[176.81837463 673.54449463]
[176.14056396 658.55981445]
[161.87400818 641.23107910]
[172.17187500 620.47131348]
[169.80860901 605.65863037]
[167.44535828 590.84594727]
[165.08209229 576.03332520]
[152.90905762 567.52728271]
[150.30137634 552.53875732]
[159.30583191 539.82824707]
[156.94256592 525.01562500]
[154.57931519 510.20294189]
[152.21604919 495.39025879]
[149.85279846 480.57760620]
[147.48954773 465.76495361]
[136.06350708 459.70388794]
[130.14990234 447.98190308]
[132.12271118 434.80447388]
[141.47990417 425.04650879]
[139.45201111 410.18423462]
[135.39686584 403.92941284]
[137.55015564 394.96359253]
[135.85865784 380.05926514]
[134.16716003 365.15493774]
[119.65721130 357.56082153]
[112.43315887 342.67874146]
[115.50320435 326.25479126]
[127.85782623 314.76141357]
[125.82993317 299.89913940]
[123.63421631 285.06069946]
[121.27095795 270.24804688]
[117.07549286 264.08645630]
[119.02561188 255.07424927]
[116.99771881 240.21195984]
[114.80200195 225.37353516]
[112.43874359 210.56088257]
[109.90824890 195.77586365]
[107.21083069 181.02038574]
[104.51342010 166.26492310]
[94.61354065 155.13650513]
[99.74305725 140.16992188]
[97.04564667 125.41445160]
[94.34822845 110.65897369]
[88.41280365 96.88324738]
[79.54125977 84.78797150]
[70.66971588 72.69269562]
[61.79817200 60.59741974]
[46.57713699 54.49396515]
[44.52053070 38.22428513]
[57.74401474 28.52523613]
[72.64440155 35.37436676]
[73.89344788 51.72587585]
[82.76499176 63.82115173]
[91.63653564 75.91642761]
[100.50807953 88.01170349]
[107.83586121 86.41370392]
[100.26761627 73.46295929]
[110.24593353 62.26325989]
[123.98087311 68.29247284]
[122.49142456 83.21769714]
[129.81919861 81.61968994]
[132.84939575 66.92894745]
[135.87957764 52.23820496]
[138.90977478 37.54745865]
[141.93995667 22.85671616]
[144.97015381 8.16597176]
[142.24816895 -8.56804085]
[157.57469177 -15.81607819]
[168.78228760 -3.09497762]
[159.66088867 11.19616127]
[156.63070679 25.88690567]
[153.60050964 40.57764816]
[150.57032776 55.26839066]
[147.54013062 69.95913696]
[144.50994873 84.64987946]
[109.10370636 107.96156311]
[111.80111694 122.71703339]
[114.49852753 137.47250366]
[124.59134674 149.65632629]
[119.26889038 163.56750488]
[121.96630859 178.32298279]
[124.66371918 193.07844543]
[129.32130432 201.03643799]
[127.25140381 208.19761658]
[129.61466980 223.01028442]
[134.09121704 231.07148743]
[131.86000061 238.18406677]
[133.88790894 253.04635620]
[136.08361816 267.88479614]
[138.44688416 282.69744873]
[142.92343140 290.75866699]
[140.69221497 297.87124634]
[142.72010803 312.73352051]
[155.35581970 318.35882568]
[163.47979736 329.41848755]
[165.04389954 342.94262695]
[159.74391174 355.36499023]
[149.07148743 363.46343994]
[150.76298523 378.36776733]
[152.45448303 393.27209473]
[154.31430054 408.15634155]
[156.34219360 423.01861572]
[170.44343567 433.30273438]
[172.74090576 450.26422119]
[162.30220032 463.40167236]
[164.66546631 478.21435547]
[167.02871704 493.02700806]
[169.39198303 507.83966064]
[171.75523376 522.65234375]
[174.11849976 537.46502686]
[186.63101196 546.74261475]
[188.81668091 561.79846191]
[179.89476013 573.67004395]
[182.25801086 588.48272705]
[184.62127686 603.29541016]
[186.98452759 618.10803223]
[194.10668945 621.11883545]
[199.65855408 626.40185547]
[202.95916748 633.24237061]
[203.62747192 640.73925781]
[201.62565613 647.92358398]
[197.25790405 653.88391113]
[191.12524414 657.88195801]
[191.80305481 672.86663818]
[192.48086548 687.85131836]
[193.15867615 702.83599854]
[193.83648682 717.82067871]
[207.22978210 725.47729492]
[214.33718872 739.16992188]
[212.89079285 754.52929688]
[203.35209656 766.65435791]
[188.76489258 771.67602539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 133]
[5 132]
[6 131]
[7 130]
[8 129]
[10 122]
[11 121]
[12 120]
[13 119]
[16 116]
[17 115]
[18 114]
[19 113]
[20 112]
[21 111]
[25 108]
[26 107]
[28 106]
[29 105]
[30 104]
[34 99]
[35 98]
[36 96]
[37 95]
[39 94]
[40 93]
[41 91]
[42 90]
[43 88]
[44 87]
[45 86]
[47 84]
[48 83]
[49 82]
[50 61]
[51 60]
[52 59]
[53 58]
[67 81]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
