%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:55:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGGAAGCGGGGAGUUAAAGAGUCUAUGCCUGUCGUGGAAGCUGGCCUGGCCCCCGGAGCUCCCUGGAGUCGGUACUGGGGGCUUCGUUUUGUACGCACCGGUAGGUACGCUCUUUGUGGUCCCUGGCCUUUCCUCCUGUCUGA\
) } def
/len { sequence length } bind def

/coor [
[138.46205139 614.20257568]
[134.27516174 599.63391113]
[135.32664490 584.51208496]
[141.48951721 570.66308594]
[152.01959229 559.75927734]
[165.64532471 553.11730957]
[164.05627441 538.20172119]
[162.46723938 523.28613281]
[160.87820435 508.37051392]
[159.28916931 493.45492554]
[157.22610474 478.59747314]
[154.69108582 463.81323242]
[152.15608215 449.02902222]
[149.62106323 434.24478149]
[147.08605957 419.46054077]
[144.55104065 404.67630005]
[130.43305969 395.59497070]
[127.15389252 378.78848267]
[137.21031189 364.51513672]
[134.36207581 349.78805542]
[131.51383972 335.06094360]
[128.66558838 320.33383179]
[125.81734467 305.60675049]
[122.96910858 290.87963867]
[120.12086487 276.15252686]
[117.27262115 261.42544556]
[108.25803375 256.43695068]
[103.40904236 247.09747314]
[104.56246185 236.41587830]
[111.57518768 227.98770142]
[109.35454559 213.15298462]
[107.13391113 198.31826782]
[104.91326904 183.48356628]
[102.69262695 168.64884949]
[100.47198486 153.81413269]
[98.25135040 138.97941589]
[96.03070831 124.14469910]
[93.81006622 109.30998993]
[91.43210602 94.49967194]
[88.89709473 79.71543884]
[75.14209747 72.77957153]
[68.18989563 59.23260498]
[70.52015686 44.36539459]
[81.03217316 33.84705353]
[78.49716187 19.06281471]
[66.40071106 5.22167826]
[73.03428650 -10.99332809]
[70.18604279 -25.72043037]
[67.33779907 -40.44753265]
[54.52746582 -49.30942154]
[51.84873581 -64.28536987]
[60.37614059 -76.44345093]
[57.52789688 -91.17055511]
[54.67965317 -105.89765930]
[51.83141327 -120.62475586]
[48.98316956 -135.35185242]
[46.13492584 -150.07896423]
[43.28668594 -164.80606079]
[40.43844223 -179.53315735]
[37.59020233 -194.26026917]
[21.61446762 -209.92353821]
[29.10713768 -230.20254517]
[25.02021027 -244.63504028]
[20.93328285 -259.06753540]
[16.84635544 -273.50003052]
[4.71672630 -284.53652954]
[8.47368717 -300.49954224]
[24.25239944 -304.96768188]
[35.82107544 -293.34451294]
[31.27885437 -277.58697510]
[35.36578369 -263.15447998]
[39.45270920 -248.72196960]
[43.53963470 -234.28947449]
[51.22205734 -231.95410156]
[57.40147781 -226.68016052]
[60.99774170 -219.29025269]
[61.34287262 -210.98443604]
[58.30383682 -203.14544678]
[52.31730270 -197.10850525]
[55.16554260 -182.38140869]
[58.01378632 -167.65429688]
[60.86203003 -152.92720032]
[63.71026993 -138.20010376]
[66.55850983 -123.47299957]
[69.40675354 -108.74589539]
[72.25499725 -94.01879883]
[75.10324097 -79.29169464]
[87.54894257 -71.18984222]
[90.64726257 -56.29504013]
[82.06490326 -43.29577255]
[84.91314697 -28.56867218]
[87.76139069 -13.84157085]
[97.63272095 -6.77516508]
[100.09430695 5.52253342]
[93.28139496 16.52780151]
[95.81641388 31.31204033]
[109.23203278 37.72757721]
[116.38203430 50.96923065]
[114.33999634 66.05841827]
[103.68133545 77.18042755]
[106.21634674 91.96466064]
[110.60183716 98.79963684]
[108.64478302 107.08934784]
[110.86542511 121.92406464]
[113.08605957 136.75877380]
[115.30670166 151.59349060]
[117.52734375 166.42820740]
[119.74798584 181.26292419]
[121.96862030 196.09764099]
[124.18926239 210.93234253]
[126.40990448 225.76705933]
[139.68388367 240.87753296]
[131.99972534 258.57717896]
[134.84796143 273.30429077]
[137.69621277 288.03140259]
[140.54444885 302.75848389]
[143.39268494 317.48559570]
[146.24093628 332.21270752]
[149.08917236 346.93978882]
[151.93742371 361.66690063]
[163.92373657 367.90069580]
[170.02226257 379.73745728]
[168.19493103 392.72998047]
[159.33528137 402.14126587]
[161.87028503 416.92550659]
[164.40530396 431.70974731]
[166.94032288 446.49398804]
[169.47532654 461.27822876]
[172.01034546 476.06246948]
[175.44276428 480.17807007]
[176.77134705 484.74533081]
[176.18450928 488.86929321]
[174.20477295 491.86590576]
[175.79380798 506.78149414]
[177.38284302 521.69708252]
[178.97187805 536.61267090]
[180.56091309 551.52825928]
[195.28013611 555.15051270]
[207.87107849 563.59112549]
[216.81332397 575.83087158]
[221.02705383 590.39178467]
[220.00344849 605.51556396]
[213.86610413 619.37585449]
[203.35614014 630.29907227]
[189.74267578 636.96612549]
[174.66961670 638.57196045]
[159.95710754 634.92260742]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 137]
[7 136]
[8 135]
[9 134]
[10 133]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[19 120]
[20 119]
[21 118]
[22 117]
[23 116]
[24 115]
[25 114]
[26 113]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[37 104]
[38 103]
[39 101]
[40 100]
[44 96]
[45 95]
[47 92]
[48 91]
[49 90]
[52 87]
[53 86]
[54 85]
[55 84]
[56 83]
[57 82]
[58 81]
[59 80]
[60 79]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
