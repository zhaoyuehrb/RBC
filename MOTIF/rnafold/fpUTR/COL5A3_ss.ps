%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:59:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGAGUGACUGCACCGAGCCCGAGAAGUCGCCGCGCCCCGCAGCCGCCCCGACUGGUUCCCCGCCUUGCCCGUGGGCCCCGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[23.67523956 129.64614868]
[9.37628937 134.17825317]
[-4.92266273 138.71035767]
[-12.36151981 144.41201782]
[-19.82028770 143.13786316]
[-34.27353668 147.15078735]
[-48.72678757 151.16371155]
[-63.18003845 155.17663574]
[-77.63328552 159.18955994]
[-92.08654022 163.20248413]
[-95.99478149 176.55665588]
[-105.95470428 186.11627197]
[-119.24629211 189.42109680]
[-132.31376648 185.69883728]
[-141.71675110 176.04237366]
[-156.30545044 179.53088379]
[-167.83258057 191.19525146]
[-183.62713623 186.78344727]
[-187.44104004 170.83396912]
[-175.35087585 159.75425720]
[-159.79396057 164.94218445]
[-145.20526123 161.45365906]
[-139.48257446 146.18199158]
[-125.69257355 137.17044067]
[-109.07928467 138.07878113]
[-96.09946442 148.74923706]
[-81.64620972 144.73631287]
[-67.19296265 140.72338867]
[-52.73971176 136.71046448]
[-38.28646469 132.69754028]
[-23.83321381 128.68461609]
[-9.45476913 124.41139984]
[4.84418249 119.87929535]
[19.14313507 115.34719086]
[25.09509468 104.65023041]
[37.15418243 100.84471130]
[48.89529037 106.53941345]
[63.34853745 102.52648926]
[77.80178833 98.51356506]
[92.25503540 94.50064087]
[95.95783997 90.43491364]
[101.72517395 88.86340332]
[107.89711761 90.76023865]
[122.60225677 87.80068970]
[136.83728027 73.74995422]
[154.94285583 80.12904358]
[169.39610291 76.11611938]
[183.84936523 72.10319519]
[198.30261230 68.09027100]
[212.68106079 63.81705475]
[226.98001099 59.28495026]
[232.03176880 42.07548904]
[246.17164612 31.29396820]
[263.79605103 30.98338509]
[278.05529785 41.08177185]
[291.98992920 35.52970123]
[305.92459106 29.97762871]
[313.55947876 15.86777020]
[329.37603760 13.18155289]
[341.24118042 23.97961426]
[340.05294800 39.97860718]
[326.72290039 48.90546799]
[311.47665405 43.91228104]
[297.54202271 49.46435165]
[283.60736084 55.01642609]
[282.33041382 67.34921265]
[275.81372070 77.98304749]
[265.28192139 84.79882050]
[252.76684570 86.40644073]
[240.71559143 82.42795563]
[231.51211548 73.58390045]
[217.21316528 78.11600494]
[211.66093445 83.25696564]
[202.31553650 82.54351807]
[187.86228943 86.55644226]
[173.40904236 90.56936646]
[158.95578003 94.58229065]
[154.59388733 104.13446808]
[145.43771362 109.71631622]
[134.50407410 109.19689941]
[125.56180573 102.50582886]
[110.85666656 105.46537781]
[96.26796722 108.95388794]
[81.81471252 112.96681213]
[67.36146545 116.97974396]
[52.90821457 120.99266815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 34]
[2 33]
[3 32]
[5 31]
[6 30]
[7 29]
[8 28]
[9 27]
[10 26]
[15 22]
[16 21]
[37 86]
[38 85]
[39 84]
[40 83]
[43 82]
[44 81]
[46 77]
[47 76]
[48 75]
[49 74]
[50 72]
[51 71]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
