%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:56:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACUUCCUCUUUCCAGUGCAUUUAAGGCGCAGCCUGGAAGUGCCAGGGAGCACUGGAGGCCACCCAGUC\
) } def
/len { sequence length } bind def

/coor [
[85.96286774 376.30664062]
[89.00338745 357.16494751]
[89.66689301 342.17962646]
[90.33039093 327.19430542]
[90.99388885 312.20898438]
[76.88825989 305.02307129]
[67.23282623 292.40551758]
[63.95975113 276.79946899]
[67.75924683 261.25396729]
[77.93476105 248.82812500]
[92.53004456 241.98918152]
[92.53004456 226.98918152]
[92.53004456 211.98918152]
[92.53004456 196.98918152]
[92.53004456 181.98918152]
[92.53004456 166.98918152]
[92.53004456 151.98918152]
[92.53004456 136.98918152]
[92.53004456 121.98917389]
[92.53004456 106.98917389]
[89.29727936 99.29856873]
[92.87655640 91.32934570]
[93.54006195 76.34402466]
[94.20355988 61.35870743]
[83.81212616 49.75457764]
[84.69847870 34.56678772]
[95.82528687 24.73165321]
[96.48878479 9.74633598]
[97.15228271 -5.23898268]
[97.81578827 -20.22430038]
[98.47928619 -35.20962143]
[85.82351685 -44.03203583]
[79.96769714 -58.30483627]
[82.78039551 -73.47363281]
[93.36409760 -84.69810486]
[108.34157562 -88.39657593]
[122.93357086 -83.38886261]
[132.48384094 -71.27292633]
[133.94491577 -55.91490555]
[126.85057831 -42.21549225]
[113.46460724 -34.54611969]
[112.80110168 -19.56080055]
[112.13760376 -4.57548237]
[111.47410583 10.40983582]
[110.81060028 25.39515495]
[121.02463531 36.17518616]
[120.56522369 51.38188171]
[109.18888092 62.02220917]
[108.52537537 77.00753021]
[107.86187744 91.99284363]
[107.53004456 106.98917389]
[107.53004456 121.98917389]
[107.53004456 136.98918152]
[107.53004456 151.98918152]
[107.53004456 166.98918152]
[107.53004456 181.98918152]
[107.53004456 196.98918152]
[107.53004456 211.98918152]
[107.53004456 226.98918152]
[107.53004456 241.98918152]
[120.63233948 247.72126770]
[130.48652649 258.02529907]
[135.59700012 271.28863525]
[135.20689392 285.45336914]
[129.41004944 298.33557129]
[119.13133240 307.96200562]
[105.97920990 312.87246704]
[105.31571198 327.85778809]
[104.65220642 342.84310913]
[103.98870850 357.82843018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 70]
[3 69]
[4 68]
[5 67]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[22 50]
[23 49]
[24 48]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
