%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGUGCUGUGCCUGCCUCCUAGAGCUCAUUCCCUACGCCCCGACUCUGUCCUGGACAGCGUGCCCACCAGCC\
) } def
/len { sequence length } bind def

/coor [
[96.53253937 266.01702881]
[95.90440369 251.03018188]
[84.80083466 241.16880798]
[83.95032501 225.97897339]
[94.36911774 214.39939880]
[93.74098206 199.41255188]
[93.11284637 184.42572021]
[84.32838440 175.84397888]
[83.85128021 163.16755676]
[92.50000000 153.34138489]
[92.50000000 138.34138489]
[92.50000000 123.34138489]
[92.50000000 108.34138489]
[92.18586731 93.34467316]
[91.55773163 78.35783386]
[90.92959595 63.37099075]
[89.98773956 48.40058899]
[88.73256683 33.45319748]
[74.23928833 25.01239395]
[67.59823608 9.79023075]
[71.19731903 -6.25451231]
[83.45658875 -16.96529198]
[81.57659149 -31.84701347]
[79.69659424 -46.72873306]
[77.81658936 -61.61045456]
[75.93659210 -76.49217224]
[71.64583588 -84.89814758]
[74.30299377 -92.03483582]
[73.04782867 -106.98222351]
[58.55588150 -111.57046509]
[46.92612839 -121.35909271]
[39.93202591 -134.85542297]
[38.64011765 -150.00135803]
[43.24741745 -164.48725891]
[53.05133820 -176.10412598]
[66.55686188 -183.08047485]
[81.70448303 -184.35244751]
[96.18430328 -179.72610474]
[107.78826141 -169.90690613]
[114.74683380 -156.39222717]
[115.99889374 -141.24293518]
[111.35350037 -126.76921082]
[101.51905060 -115.17818451]
[87.99522400 -108.23739624]
[89.25038910 -93.29000092]
[90.81831360 -78.37216949]
[92.69831085 -63.49045181]
[94.57831573 -48.60873032]
[96.45831299 -33.72701263]
[98.33831024 -18.84529114]
[110.71893311 -13.43094921]
[118.81172180 -2.47351098]
[120.37033844 11.16895771]
[114.87077332 23.86984062]
[103.67996216 32.19802856]
[104.93512726 47.14542389]
[108.74525452 53.73904037]
[105.91643524 62.74285507]
[106.54457092 77.72969818]
[107.17270660 92.71654510]
[110.71708679 100.24333191]
[107.50000000 108.34138489]
[107.50000000 123.34138489]
[107.50000000 138.34138489]
[107.50000000 153.34138489]
[117.10939026 168.88690186]
[108.09969330 183.79757690]
[108.72782135 198.78442383]
[109.35595703 213.77125549]
[120.70716095 224.43840027]
[121.13068390 239.64614868]
[110.89124298 250.40203857]
[111.51937866 265.38888550]
[114.51472473 284.53771973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[5 69]
[6 68]
[7 67]
[10 65]
[11 64]
[12 63]
[13 62]
[14 60]
[15 59]
[16 58]
[17 56]
[18 55]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[28 45]
[29 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
