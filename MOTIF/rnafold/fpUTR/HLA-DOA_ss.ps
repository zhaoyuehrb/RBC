%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCUUUACCUCCGCCUUGUUCCUGUCCUCACCACACGGACUGAGACUGAUUUGAUUAAAGCACCAGAGUGUA\
) } def
/len { sequence length } bind def

/coor [
[67.20755005 317.57342529]
[61.73862457 331.92562866]
[49.81616211 341.60812378]
[34.64723969 344.01632690]
[20.31222725 338.50244141]
[10.66716480 326.54968262]
[8.30652905 311.37329102]
[13.86531925 297.05563354]
[25.84824753 287.44805908]
[41.03196716 285.13500977]
[46.41700745 271.13497925]
[51.80204773 257.13491821]
[56.90038681 243.02793884]
[61.70990372 228.81990051]
[66.51942444 214.61184692]
[60.31090164 195.10577393]
[75.69267273 180.47531128]
[78.73148346 165.78634644]
[73.73300934 151.75550842]
[84.10561371 139.80897522]
[87.14443207 125.12000275]
[90.18324280 110.43104553]
[85.97307587 97.09814453]
[95.12779236 86.53014374]
[98.16661072 71.84117889]
[89.75339508 58.73181152]
[93.04443359 43.87840271]
[105.59406281 35.93848038]
[108.63287354 21.24951744]
[111.67169189 6.56055403]
[113.80641174 -8.28676701]
[115.02905273 -23.23685646]
[116.25168610 -38.18694305]
[117.47432709 -53.13703537]
[118.08615875 -68.12454987]
[118.08615875 -83.12454987]
[109.42245483 -97.04835510]
[117.38658142 -111.38378906]
[133.78573608 -111.38378906]
[141.74986267 -97.04835510]
[133.08615112 -83.12454987]
[133.08615112 -68.12454987]
[135.97969055 -64.00029755]
[136.10952759 -57.95587921]
[132.42442322 -51.91439438]
[131.20178223 -36.96430588]
[129.97914124 -22.01421738]
[128.75650024 -7.06412792]
[131.01193237 -4.00677586]
[131.72691345 0.38573858]
[130.24819946 5.28869629]
[126.36064911 9.59936714]
[123.32183838 24.28833008]
[120.28302765 38.97729111]
[128.65219116 51.24483871]
[125.77964783 66.18482208]
[112.85556793 74.87999725]
[109.81675720 89.56895447]
[114.02692413 102.90185547]
[104.87220764 113.46985626]
[101.83338928 128.15881348]
[98.79457855 142.84777832]
[103.57569885 157.92927551]
[93.42044830 168.82514954]
[90.38163757 183.51411438]
[96.88587189 191.02262878]
[98.99905396 200.58541870]
[96.34164429 209.86550903]
[89.68356323 216.65965271]
[80.72747040 219.42137146]
[75.91795349 233.62940979]
[71.10843658 247.83746338]
[71.29729462 257.26101685]
[65.80209351 262.51995850]
[60.41705704 276.52001953]
[55.03201675 290.52005005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 76]
[11 75]
[12 74]
[13 72]
[14 71]
[15 70]
[17 65]
[18 64]
[20 62]
[21 61]
[22 60]
[24 58]
[25 57]
[28 54]
[29 53]
[30 52]
[31 48]
[32 47]
[33 46]
[34 45]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
