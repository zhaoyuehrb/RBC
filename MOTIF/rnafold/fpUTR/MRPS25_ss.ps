%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCGUCUCCUGUGCGUCUGCGCGGGAAGUGGAACCUGGCUCUGGGGAGAAGCCGCGUGAGAUCCGCGCGGGUGCUAGCUAGUCCUUUCUCGUCGCUGCUCGGCUCGCGGCCCGUGGGGUCGGCCCCGCCACCGUUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[121.80091095 150.42594910]
[127.59757996 136.59126282]
[141.96684265 132.28288269]
[130.47618103 122.64106750]
[118.98551941 112.99925232]
[120.95877075 127.86889648]
[108.48982239 136.20709229]
[95.50160980 128.70333862]
[96.49756622 113.73542786]
[85.66210175 124.10812378]
[74.82664490 134.48081970]
[63.99118423 144.85351562]
[53.15572739 155.22621155]
[42.32026672 165.59890747]
[31.48480606 175.97160339]
[20.64934731 186.34429932]
[16.58235741 202.23114014]
[0.71965665 206.39128113]
[-10.62056828 194.54513550]
[-5.77246571 178.87898254]
[10.27665138 175.50885010]
[21.11211014 165.13615417]
[31.94757080 154.76345825]
[42.78303146 144.39076233]
[53.61848831 134.01806641]
[64.45394897 123.64536285]
[75.28940582 113.27266693]
[86.12487030 102.89997101]
[89.37145996 88.25553131]
[83.93489075 74.27541351]
[78.49832153 60.29529572]
[73.06175232 46.31517792]
[67.62518311 32.33506012]
[51.42913818 31.21134758]
[37.38561249 23.18184090]
[28.26720238 9.88995934]
[25.84878922 -5.98780394]
[30.56223679 -21.28077126]
[41.42030716 -32.95723343]
[35.68005753 -46.81542587]
[21.35433960 -52.93192673]
[15.73032379 -67.06787872]
[21.64975739 -80.68756866]
[15.90950584 -94.54576111]
[10.16925430 -108.40395355]
[4.42900276 -122.26214600]
[-9.89671421 -128.37864685]
[-15.52073002 -142.51460266]
[-9.60129642 -156.13427734]
[-15.34154797 -169.99247742]
[-30.28942490 -173.71633911]
[-40.06411362 -185.39147949]
[-41.07777786 -200.40602112]
[-33.15078735 -212.98779297]
[-38.89104080 -226.84597778]
[-44.63129044 -240.70417786]
[-50.37154388 -254.56236267]
[-56.11179352 -268.42056274]
[-61.85204697 -282.27874756]
[-67.59230042 -296.13693237]
[-81.80424500 -303.58007812]
[-84.70438385 -319.35882568]
[-74.06797791 -331.36907959]
[-58.05436707 -330.39761353]
[-48.94782257 -317.18963623]
[-53.73410416 -301.87719727]
[-47.99385452 -288.01901245]
[-42.25360107 -274.16079712]
[-36.51335144 -260.30261230]
[-30.77309799 -246.44442749]
[-25.03284645 -232.58622742]
[-19.29259491 -218.72804260]
[-4.79071522 -215.43661499]
[5.10939837 -204.10296631]
[6.45322132 -188.93563843]
[-1.48335528 -175.73272705]
[4.25689602 -161.87454224]
[18.07314110 -156.42964172]
[24.09198761 -142.45722961]
[18.28719521 -128.00239563]
[24.02744675 -114.14420319]
[29.76769829 -100.28601074]
[35.50794983 -86.42781830]
[49.32419586 -80.98291779]
[55.34304047 -67.01051331]
[49.53824997 -52.55567932]
[55.27849960 -38.69748688]
[69.19071960 -38.59508896]
[82.04823303 -33.16789627]
[91.88703918 -23.20890236]
[97.19052887 -10.20605564]
[97.12319183 3.88002443]
[91.66207886 16.91165161]
[81.60530090 26.89848900]
[87.04187012 40.87860870]
[92.47843933 54.85872650]
[97.91500854 68.83884430]
[103.35157776 82.81896210]
[128.62733459 101.50858307]
[140.11799622 111.15039825]
[151.60865784 120.79221344]
[163.60786438 129.79328918]
[176.07991028 138.12683105]
[188.55195618 146.46038818]
[201.02400208 154.79394531]
[213.85377502 153.05111694]
[224.08580017 160.31069946]
[226.51695251 172.20880127]
[238.80422974 180.81243896]
[251.09152222 189.41609192]
[263.37878418 198.01972961]
[276.33166504 194.16497803]
[288.94781494 198.43519592]
[296.66705322 209.04920959]
[296.83709717 221.97720337]
[308.93377686 230.84684753]
[321.03045654 239.71649170]
[333.12710571 248.58615112]
[345.22378540 257.45578003]
[357.32046509 266.32543945]
[373.67214966 267.57192993]
[380.52362061 282.47122192]
[370.82666016 295.69622803]
[354.55664062 293.64218140]
[348.45080566 278.42208862]
[336.35415649 269.55245972]
[324.25747681 260.68280029]
[312.16079712 251.81317139]
[300.06414795 242.94352722]
[287.96746826 234.07388306]
[271.50781250 237.35562134]
[257.47027588 227.55487061]
[254.77514648 210.30702209]
[242.48786926 201.70336914]
[230.20059204 193.09971619]
[217.91329956 184.49607849]
[200.40522766 183.94750977]
[192.69044495 167.26599121]
[180.21839905 158.93243408]
[167.74635315 150.59887695]
[155.27430725 142.26531982]
[155.15960693 157.26489258]
[143.50044250 166.70225525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 101]
[4 100]
[5 99]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[15 22]
[16 21]
[29 98]
[30 97]
[31 96]
[32 95]
[33 94]
[39 87]
[40 86]
[43 83]
[44 82]
[45 81]
[46 80]
[49 77]
[50 76]
[54 72]
[55 71]
[56 70]
[57 69]
[58 68]
[59 67]
[60 66]
[102 141]
[103 140]
[104 139]
[105 138]
[108 136]
[109 135]
[110 134]
[111 133]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
