%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUUAGUACCUAGGAGGCAGGGAUCAGAGGAAGUAGAUUCAGAGGUAAGGAGAAUUUUGGGGCUAUACUUUCAAGAAAGUCGUGUUCGGGACCCAGGAGGU\
) } def
/len { sequence length } bind def

/coor [
[96.29994202 272.30245972]
[96.29994202 257.30245972]
[96.29994202 242.30247498]
[88.56264496 229.57519531]
[96.29994202 215.77502441]
[96.29994202 200.77502441]
[85.34262085 184.96421814]
[95.24512482 167.53446960]
[94.33944702 152.56184387]
[90.73372650 145.96549988]
[93.63948059 137.12460327]
[93.18643951 122.13144684]
[92.73339081 107.13829041]
[89.31361389 99.67782593]
[92.50000000 91.68695831]
[92.50000000 76.68695831]
[92.50000000 61.68695831]
[84.76270294 47.88678741]
[92.50000000 35.15951538]
[92.50000000 20.15951538]
[89.32854462 11.41042042]
[92.73339081 4.70817995]
[93.18643951 -10.28497696]
[79.14244080 -15.94107342]
[67.90203857 -26.04183960]
[60.80898666 -39.35382080]
[58.70233154 -54.26126862]
[61.81721878 -68.96225739]
[69.75882721 -81.68646240]
[81.55226898 -90.90837860]
[95.76227570 -95.53017426]
[96.21532440 -110.52333832]
[96.66836548 -125.51649475]
[97.12141418 -140.50964355]
[97.57445526 -155.50280762]
[98.02750397 -170.49595642]
[98.48054504 -185.48912048]
[84.99673462 -198.60742188]
[85.20449829 -217.10380554]
[98.51875305 -229.48703003]
[98.06570435 -244.48017883]
[97.61266327 -259.47332764]
[97.15961456 -274.46649170]
[96.70656586 -289.45965576]
[96.25352478 -304.45281982]
[95.80047607 -319.44595337]
[82.23559570 -326.64941406]
[74.10339355 -339.67871094]
[73.59138489 -355.02908325]
[80.83731079 -368.57131958]
[93.89204407 -376.66262817]
[109.24392700 -377.12652588]
[122.76338959 -369.83816528]
[130.81375122 -356.75814819]
[131.22950745 -341.40487671]
[123.89883423 -327.90832520]
[110.79363251 -319.89901733]
[111.24668121 -304.90585327]
[111.69972229 -289.91268921]
[112.15277100 -274.91955566]
[112.60581970 -259.92639160]
[113.05886078 -244.93322754]
[113.51190948 -229.94007874]
[123.47016144 -223.98365784]
[129.30966187 -213.81669617]
[129.43951416 -201.97183228]
[123.70851135 -191.46690369]
[113.47370148 -185.03607178]
[113.02066040 -170.04292297]
[112.56761169 -155.04975891]
[112.11457062 -140.05661011]
[111.66152191 -125.06344604]
[111.20848083 -110.07028961]
[110.75543213 -95.07713318]
[124.66045380 -89.60578156]
[135.87557983 -79.68862152]
[143.03442383 -66.50812531]
[145.25601196 -51.64589310]
[142.25311279 -36.89283752]
[134.36923218 -24.03341103]
[122.53947449 -14.62975311]
[108.17959595 -9.83193111]
[107.72654724 5.16122532]
[107.50000000 20.15951538]
[107.50000000 35.15951538]
[115.23729706 47.88678741]
[107.50000000 61.68695831]
[107.50000000 76.68695831]
[107.50000000 91.68695831]
[107.72654724 106.68524933]
[108.17959595 121.67840576]
[108.63263702 136.67155457]
[109.31208038 151.65615845]
[110.21775818 166.62879944]
[118.91694641 173.50315857]
[122.23676300 183.84939575]
[119.28414154 194.07579041]
[111.29994202 200.77502441]
[111.29994202 215.77502441]
[119.03724670 229.57519531]
[111.29994202 242.30247498]
[111.29994202 257.30245972]
[111.29994202 272.30245972]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[5 99]
[6 98]
[8 94]
[9 93]
[11 92]
[12 91]
[13 90]
[15 89]
[16 88]
[17 87]
[19 85]
[20 84]
[22 83]
[23 82]
[31 74]
[32 73]
[33 72]
[34 71]
[35 70]
[36 69]
[37 68]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
