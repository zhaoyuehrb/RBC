%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:05:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGCCCCGGCGGGGGGUCAGGAUCCUCCACAGGUAGGCGCAGUCAGCUGGAGCGUCGCGGCGGUCCGCCGGUCGUGGAGGGCGUGUCCUGCGGCGCG\
) } def
/len { sequence length } bind def

/coor [
[96.15032959 115.55114746]
[86.14879608 126.73011780]
[76.14725494 137.90908813]
[66.14572144 149.08804321]
[56.32281113 160.42428589]
[46.68099976 171.91496277]
[37.03918457 183.40562439]
[27.39736938 194.89628601]
[27.35758781 210.93930054]
[14.70080757 220.79756165]
[-0.86377132 216.90867615]
[-7.39633656 202.25585938]
[0.11433681 188.07949829]
[15.90670300 185.25447083]
[25.54851723 173.76380920]
[35.19033051 162.27314758]
[44.83214569 150.78247070]
[46.75529099 143.50196838]
[54.96675491 139.08651733]
[64.96829224 127.90754700]
[74.96982574 116.72857666]
[84.97135925 105.54961395]
[89.66244507 84.83934784]
[113.75346375 84.55802917]
[117.05812073 69.92658234]
[120.36277771 55.29513550]
[123.66743469 40.66368866]
[126.97209167 26.03224182]
[130.27674866 11.40079498]
[133.58140564 -3.23065186]
[136.88606262 -17.86209869]
[135.71966553 -27.11217308]
[140.53466797 -32.90183258]
[144.30187988 -47.42106628]
[136.55258179 -60.93350220]
[140.57991028 -75.60440063]
[153.50970459 -82.90891266]
[157.27693176 -97.42813873]
[161.04414368 -111.94737244]
[160.33041382 -126.93038177]
[155.20011902 -141.02577209]
[141.32635498 -149.08172607]
[139.11723328 -164.97195435]
[150.26739502 -176.50683594]
[166.22340393 -174.83778381]
[174.74516296 -161.24516296]
[169.29550171 -146.15606689]
[174.42581177 -132.06068420]
[189.33404541 -130.39804077]
[204.24096680 -128.73553467]
[212.35057068 -141.35433960]
[220.46018982 -153.97314453]
[221.41209412 -169.76568604]
[234.80200195 -176.28944397]
[242.91162109 -188.90824890]
[251.02122498 -201.52705383]
[251.26063538 -217.92445374]
[265.71081543 -225.67845154]
[279.50665283 -216.81240845]
[278.45617676 -200.44694519]
[263.64004517 -193.41744995]
[255.53042603 -180.79864502]
[247.42080688 -168.17984009]
[247.04896545 -153.28987122]
[233.07899475 -145.86352539]
[224.96937561 -133.24472046]
[216.85977173 -120.62592316]
[175.56338501 -108.18015289]
[171.79615784 -93.66091919]
[168.02894592 -79.14169312]
[175.77621460 -66.47222137]
[172.16255188 -51.69399261]
[158.82112122 -43.65384293]
[155.05389404 -29.13461494]
[151.51751709 -14.55744076]
[148.21286011 0.07400605]
[144.90820312 14.70545292]
[141.60354614 29.33689880]
[138.29887390 43.96834564]
[134.99421692 58.59979248]
[131.68955994 73.23123932]
[128.38490295 87.86268616]
[130.75492859 102.67427063]
[138.46008301 115.54402161]
[146.16525269 128.41377258]
[153.87040710 141.28352356]
[161.57557678 154.15327454]
[169.28073120 167.02302551]
[183.86639404 174.51907349]
[184.39707947 190.90962219]
[170.32688904 199.33349609]
[156.13000488 191.12492371]
[156.41098022 174.72817993]
[148.70582581 161.85842896]
[141.00065613 148.98867798]
[133.29550171 136.11892700]
[125.59033966 123.24918365]
[117.88517761 110.37943268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 22]
[2 21]
[3 20]
[4 19]
[5 17]
[6 16]
[7 15]
[8 14]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[33 74]
[34 73]
[37 70]
[38 69]
[39 68]
[40 48]
[41 47]
[50 67]
[51 66]
[52 65]
[54 63]
[55 62]
[56 61]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
