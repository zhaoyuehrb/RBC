%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUUGAGUUUGUGGCGCGCGAGGCCCUGCAGUCCGGGUUGGCGCUUGGGUACUGGCUGGGUCCG\
) } def
/len { sequence length } bind def

/coor [
[79.75075531 186.78193665]
[75.55203247 201.18231201]
[66.05010986 212.78892517]
[52.76230621 219.74839783]
[37.81046677 220.94940186]
[23.58215904 216.20014954]
[12.34942245 206.25904846]
[5.90594530 192.71351624]
[5.28064966 177.72654724]
[10.57338428 163.69134521]
[20.93728447 152.85028076]
[5.94140625 152.49864197]
[-9.05447102 152.14700317]
[-24.05034828 151.79536438]
[-39.04622650 151.44372559]
[-55.02274704 157.11709595]
[-64.89714050 143.33547974]
[-54.38762665 130.03186035]
[-38.69458771 136.44784546]
[-23.69871140 136.79948425]
[-8.70283318 137.15112305]
[6.29304504 137.50276184]
[21.28892326 137.85440063]
[35.69919968 133.68980408]
[48.19561386 125.39282990]
[60.69202805 117.09586334]
[73.18843842 108.79889679]
[85.68485260 100.50193024]
[92.07698059 88.06680298]
[106.01818085 87.00165558]
[118.51459503 78.70468903]
[130.81306458 70.11705780]
[142.90684509 61.24347305]
[155.00062561 52.36988831]
[166.66519165 42.93919754]
[177.87489319 32.97212219]
[189.08459473 23.00505257]
[200.29431152 13.03798008]
[211.50401306 3.07090759]
[222.71371460 -6.89616442]
[227.36238098 -22.62263680]
[243.36738586 -26.19642258]
[254.26414490 -13.94111633]
[248.84301758 1.53607297]
[232.68078613 4.31353998]
[221.47108459 14.28061199]
[210.26138306 24.24768448]
[199.05168152 34.21475601]
[187.84196472 44.18182755]
[176.63226318 54.14889908]
[175.47618103 59.11748123]
[170.96287537 63.27023697]
[163.87420654 64.46366882]
[151.78042603 73.33724976]
[139.68664551 82.21083832]
[136.03269958 88.94027710]
[126.81156158 91.20110321]
[114.31514740 99.49806976]
[107.92301941 111.93319702]
[93.98181915 112.99834442]
[81.48540497 121.29531097]
[68.98899078 129.59226990]
[56.49258041 137.88923645]
[43.99616623 146.18621826]
[58.54731369 149.82821655]
[70.51065063 158.87689209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[30 58]
[31 57]
[32 55]
[33 54]
[34 53]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
