%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGGGGGCGCGACGGCCGGGGCGGGGGCGCUGCUGCUGCGGGGGCAGGCGGCGGCAGGGGCGGCGGCGGCGGCGGCGGCCCGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[3.45600033 215.96876526]
[-8.75524521 215.62705994]
[-19.94565582 225.61579895]
[-31.13606834 235.60452271]
[-42.32648087 245.59324646]
[-53.51689148 255.58197021]
[-64.70729828 265.57070923]
[-75.73449707 275.73931885]
[-86.59558868 286.08517456]
[-86.72883606 301.88891602]
[-98.05640411 312.90988159]
[-113.85784149 312.60955811]
[-124.75843048 301.16610718]
[-124.29105377 285.36871338]
[-112.73299408 274.58972168]
[-96.94144440 275.22409058]
[-86.08035278 264.87823486]
[-83.35682678 257.85192871]
[-74.69602966 254.38029480]
[-63.50561905 244.39157104]
[-52.31520844 234.40283203]
[-41.12479782 224.41410828]
[-29.93438530 214.42538452]
[-18.74397278 204.43664551]
[-14.26313972 187.55439758]
[3.65980458 183.73692322]
[14.52089310 173.39106750]
[25.38198280 163.04521179]
[29.26085091 148.66453552]
[44.58977890 144.74859619]
[55.45086670 134.40274048]
[66.31195831 124.05688477]
[77.17304230 113.71102905]
[88.03413391 103.36517334]
[85.30571747 93.49598694]
[91.19314575 82.36849213]
[92.16409302 67.39994812]
[93.13504028 52.43140793]
[94.10598755 37.46286392]
[95.07693481 22.49432182]
[96.04788208 7.52577925]
[97.01882935 -7.44276333]
[97.98977661 -22.41130638]
[98.96072388 -37.37984848]
[99.93167114 -52.34838867]
[87.90921021 -62.15859222]
[83.98168945 -77.17039490]
[89.65932465 -91.61145020]
[102.75894165 -99.92888641]
[118.24346924 -98.92446899]
[130.15879822 -88.98442078]
[133.92324829 -73.93089294]
[128.08929443 -59.55228043]
[114.90021515 -51.37744141]
[113.92926788 -36.40890121]
[112.95832062 -21.44035912]
[111.98737335 -6.47181606]
[111.01642609 8.49672604]
[110.04547882 23.46526909]
[109.07453156 38.43381119]
[108.10358429 53.40235519]
[107.13263702 68.37089539]
[106.16168976 83.33943939]
[115.40511322 95.15294647]
[130.16775513 97.81081390]
[144.93040466 100.46868134]
[159.69305420 103.12654114]
[174.64584351 97.95693970]
[185.80073547 107.82696533]
[200.56338501 110.48483276]
[215.51617432 105.31523132]
[226.67108154 115.18525696]
[241.43373108 117.84312439]
[256.67233276 111.78368378]
[269.36975098 122.16190338]
[266.46398926 138.30155945]
[250.94421387 143.59954834]
[238.77586365 132.60577393]
[224.01321411 129.94790649]
[210.11634827 135.30761719]
[197.90551758 125.24748230]
[183.14288330 122.58961487]
[169.24601746 127.94932556]
[157.03518677 117.88919067]
[142.27253723 115.23133087]
[127.50989532 112.57346344]
[112.74724579 109.91559601]
[98.37998962 114.22626495]
[87.51889801 124.57212067]
[76.65781403 134.91798401]
[65.79672241 145.26383972]
[54.93563461 155.60969543]
[50.27990723 170.73036194]
[35.72784042 173.90629578]
[24.86675072 184.25215149]
[14.00566101 194.59800720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 24]
[3 23]
[4 22]
[5 21]
[6 20]
[7 19]
[8 17]
[9 16]
[26 96]
[27 95]
[28 94]
[30 92]
[31 91]
[32 90]
[33 89]
[34 88]
[36 63]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[64 87]
[65 86]
[66 85]
[67 84]
[69 82]
[70 81]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
