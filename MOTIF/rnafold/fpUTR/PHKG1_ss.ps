%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUUAGCCUCCGGUCAUCAAAUAGCAAAACCCAAAACAACAGCAGAUGAUAUCUUCCAAGUGUCUGCUCGGGACACGGCUUCAGCCCUCUGUGGUCCCCUCUCCCCGGGGGGCUUUGGGAUUCUUGUCAAGCUCCUUCAAGAGCCUGCAAGCACUUAACCAGCCACCCAGAGUUCCCUCACUGAAGAUCUGAGC\
) } def
/len { sequence length } bind def

/coor [
[82.06445312 334.13885498]
[72.96987915 346.51562500]
[58.89892197 352.67224121]
[43.63660431 350.95257568]
[31.28841019 341.81924438]
[25.17594337 327.72906494]
[26.94342422 312.47222900]
[36.11541367 300.15270996]
[50.22468567 294.08444214]
[51.90415573 279.17877197]
[53.58362198 264.27307129]
[47.31997299 250.75952148]
[56.55375290 237.91242981]
[58.23321915 223.00674438]
[59.91268921 208.10105896]
[61.59215546 193.19537354]
[55.32850647 179.68182373]
[64.56228638 166.83473206]
[66.24175262 151.92904663]
[67.92121887 137.02336121]
[59.30118561 149.29914856]
[50.68114853 161.57495117]
[42.06111145 173.85073853]
[40.28422546 188.74511719]
[33.91635895 202.32637024]
[23.60283089 213.21815491]
[10.38880825 220.31671143]
[-4.38660288 222.90269470]
[-19.22606659 220.71400452]
[-32.62575531 213.97245789]
[-43.22774506 203.36125183]
[-49.95764160 189.95571899]
[-52.13343430 175.11434937]
[-49.53462601 160.34120178]
[-42.42458725 147.13334656]
[-31.52383804 136.82928467]
[-17.93706322 130.47322083]
[-3.04114079 128.70927429]
[11.65451813 131.71626282]
[26.02116966 127.40357208]
[40.38782120 123.09087372]
[54.75447464 118.77818298]
[40.07893372 115.67518616]
[25.40339661 112.57218933]
[10.72785854 109.46920013]
[-3.94767952 106.36620331]
[-18.62321854 103.26320648]
[-33.29875565 100.16020966]
[-41.86638641 112.71665192]
[-54.58972168 121.03440857]
[-69.52854919 123.84510040]
[-84.40480042 120.72010803]
[-96.94995117 112.13596344]
[-105.25096893 99.40169525]
[-108.04200745 84.45919037]
[-104.89744568 69.58705902]
[-96.29680634 57.05320740]
[-83.55163574 48.76894760]
[-68.60546875 45.99757385]
[-53.73748779 49.16169739]
[-41.21495819 57.77881241]
[-32.94747162 70.53487396]
[-30.19576073 85.48467255]
[-15.52022266 88.58766937]
[-0.84468430 91.69066620]
[13.83085346 94.79365540]
[28.50639153 97.89665222]
[43.18193054 100.99964905]
[57.85746765 104.10264587]
[64.05621338 83.72204590]
[78.65194702 70.30280304]
[72.58019257 56.58660889]
[66.50844574 42.87042236]
[60.43669510 29.15423203]
[54.36494446 15.43804264]
[48.18346405 1.77095354]
[41.89265442 -11.84615707]
[35.16862488 -25.25464058]
[28.01828575 -38.44071960]
[20.86794853 -51.62679672]
[6.61460543 -59.73693085]
[6.78210163 -76.13522339]
[21.19813156 -83.95251465]
[35.03271866 -75.14705658]
[34.05402756 -58.77713394]
[41.20436478 -45.59105682]
[48.35470200 -32.40497971]
[51.01405716 -31.48175049]
[53.46549225 -29.44290352]
[55.27980804 -26.36320686]
[56.06312180 -22.47212791]
[55.50976181 -18.13696861]
[61.80057526 -4.51985788]
[67.46683502 0.23977068]
[68.08113098 9.36629200]
[74.15288544 23.08248138]
[80.22463226 36.79867172]
[86.29638672 50.51485825]
[92.36813354 64.23104858]
[98.25469971 63.46758652]
[104.18723297 63.66640472]
[110.00947571 64.82225800]
[115.56806946 66.90470886]
[120.71659088 69.85889435]
[125.31942749 73.60700989]
[129.25534058 78.05033112]
[132.42066956 83.07180786]
[134.73200989 88.53918457]
[149.63769531 86.85971832]
[164.54338074 85.18025208]
[179.44906616 83.50078583]
[194.35475159 81.82131958]
[209.26043701 80.14184570]
[224.16610718 78.46237946]
[239.07179260 76.78291321]
[253.97747803 75.10344696]
[268.88317871 73.42398071]
[283.78884888 71.74451447]
[298.69451904 70.06504822]
[313.60021973 68.38558197]
[323.18048096 46.65206528]
[343.74700928 35.00981140]
[367.07723999 37.95108032]
[383.94027710 54.16970444]
[398.32028198 49.90179062]
[412.70028687 45.63387680]
[427.08032227 41.36596298]
[434.42788696 35.91764450]
[441.72509766 37.14686966]
[456.17169189 33.10998535]
[467.38040161 21.94417191]
[481.72039795 25.97076988]
[496.16696167 21.93388557]
[510.61355591 17.89700127]
[525.06011963 13.86011600]
[532.59619141 -0.03171514]
[547.77160645 -4.44574451]
[561.58294678 3.23679256]
[565.83630371 18.45798302]
[558.00817871 32.18736649]
[542.74285889 36.27954102]
[529.09698486 28.30669212]
[514.65045166 32.34357834]
[500.20385742 36.38046265]
[485.75729370 40.41734695]
[475.58187866 51.29441452]
[460.20855713 47.55656052]
[445.76199341 51.59344864]
[431.34823608 55.74597931]
[416.96820068 60.01389313]
[402.58819580 64.28180695]
[388.20819092 68.54972076]
[388.16894531 75.74553680]
[386.73907471 82.80788422]
[383.96868896 89.47019196]
[379.95864868 95.48027802]
[374.85671997 100.60984039]
[368.85229492 104.66317749]
[362.16925049 107.48461151]
[355.05767822 108.96450043]
[347.78445435 109.04346466]
[340.62332153 107.71478271]
[333.84448242 105.02477264]
[327.70446777 101.07120514]
[322.43637085 95.99971771]
[318.24111938 89.99849701]
[315.27969360 83.29125977]
[300.37399292 84.97072601]
[285.46832275 86.65019989]
[270.56262207 88.32966614]
[255.65695190 90.00913239]
[240.75126648 91.68859863]
[225.84558105 93.36806488]
[210.93989563 95.04753113]
[196.03421021 96.72699738]
[181.12854004 98.40646362]
[166.22285461 100.08593750]
[151.31716919 101.76540375]
[136.41148376 103.44487000]
[132.04974365 120.44577789]
[119.92773438 134.05603027]
[102.28529358 140.83593750]
[82.82690430 138.70283508]
[81.14743805 153.60852051]
[79.46797180 168.51420593]
[85.61148834 183.09390259]
[76.49784088 194.87484741]
[74.81836700 209.78053284]
[73.13890076 224.68621826]
[71.45943451 239.59188843]
[77.60295868 254.17160034]
[68.48930359 265.95254517]
[66.80983734 280.85821533]
[65.13037109 295.76391602]
[77.53557587 304.81964111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 194]
[10 193]
[11 192]
[13 190]
[14 189]
[15 188]
[16 187]
[18 185]
[19 184]
[20 183]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 93]
[77 92]
[78 87]
[79 86]
[80 85]
[108 179]
[109 178]
[110 177]
[111 176]
[112 175]
[113 174]
[114 173]
[115 172]
[116 171]
[117 170]
[118 169]
[119 168]
[120 167]
[124 152]
[125 151]
[126 150]
[127 149]
[129 148]
[130 147]
[132 145]
[133 144]
[134 143]
[135 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
