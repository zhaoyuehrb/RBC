%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGGCCGUGCGUACGUGCGUCGUCUCUAUGGUGGCGGCGGAUUUGGAGGGACCCUACGAACCAGGAGUCAGGCGAGCCGAUCUGGGGCUGCAGCGCGCCUGGUGAUUCGGCUGCACCCCCACACAGG\
) } def
/len { sequence length } bind def

/coor [
[95.02511597 326.46194458]
[101.09107971 312.35168457]
[113.40908051 303.17767334]
[111.58708191 288.28872681]
[109.76508331 273.39981079]
[100.39395142 265.64880371]
[98.80707550 253.18595886]
[106.40755463 242.68159485]
[104.94865417 227.75271606]
[103.48976135 212.82382202]
[102.03086090 197.89494324]
[100.57196808 182.96606445]
[88.93824005 173.73611450]
[87.24604034 158.61688232]
[97.00614166 146.47692871]
[95.54724121 131.54804993]
[84.91512299 128.06336975]
[76.14329529 121.11786652]
[70.31352997 111.56805420]
[55.44788361 113.57121277]
[40.58224106 115.57437134]
[25.71659660 117.57752228]
[10.85095406 119.58068085]
[-4.01469040 121.58383942]
[-18.88033485 123.58699036]
[-26.12407684 137.30952454]
[-40.06510544 144.12329102]
[-55.34280777 141.40824890]
[-66.08259583 130.20840454]
[-68.15480804 114.83031464]
[-60.76262665 101.18717194]
[-46.74850082 94.52504730]
[-31.50115013 97.40565491]
[-20.88348961 108.72135162]
[-6.01784611 106.71819305]
[8.84779835 104.71503448]
[23.71344185 102.71188354]
[38.57908630 100.70872498]
[53.44472885 98.70556641]
[68.31037140 96.70241547]
[69.15427399 87.95990753]
[72.44933319 79.46144867]
[78.11489868 71.90203857]
[85.87207031 65.94755554]
[77.29338074 53.64284134]
[68.71469116 41.33812714]
[54.47517395 34.44270706]
[53.54330444 19.57728004]
[44.96461105 7.27256489]
[36.38591766 -5.03215122]
[22.36741638 -14.56724072]
[27.64916229 -30.67746925]
[44.59193039 -30.06189156]
[48.69063568 -13.61084366]
[57.26932526 -1.30612755]
[65.84802246 10.99858856]
[79.47393036 17.01389122]
[81.01940155 32.75943375]
[89.59809875 45.06414795]
[98.17678833 57.36886597]
[113.04243469 59.37202072]
[124.57214355 49.77692413]
[136.10185242 40.18183136]
[147.63156128 30.58673477]
[159.16125488 20.99164009]
[170.69096375 11.39654446]
[176.34909058 -3.37830734]
[191.08120728 -5.57234621]
[202.61091614 -15.16744137]
[201.72993469 -30.54697418]
[209.97743225 -43.34667206]
[224.01437378 -48.77145386]
[238.38206482 -44.93640900]
[249.91175842 -54.53150558]
[254.56901550 -62.51244354]
[261.84106445 -64.21572876]
[273.60098267 -73.52722168]
[285.36093140 -82.83870697]
[297.12088013 -92.15019989]
[297.38421631 -107.78556824]
[307.67517090 -119.55971527]
[323.13461304 -121.91325378]
[336.46310425 -113.73491669]
[341.36734009 -98.88625336]
[335.53167725 -84.37836456]
[321.71151733 -77.06141663]
[306.43237305 -80.39025879]
[294.67242432 -71.07877350]
[282.91247559 -61.76728058]
[271.15255737 -52.45579147]
[259.50686646 -43.00179672]
[247.97715759 -33.40670013]
[249.13870239 -18.58142662]
[241.25453186 -5.76331902]
[227.16970825 0.02208666]
[212.20600891 -3.63773441]
[200.67631531 5.95736122]
[195.84286499 20.04590797]
[180.28607178 22.92625237]
[168.75636292 32.52134705]
[157.22665405 42.11644363]
[145.69694519 51.71153641]
[134.16723633 61.30663300]
[122.63752747 70.90172577]
[131.80342102 83.42027283]
[134.81823730 98.20598602]
[131.47763062 112.48497772]
[122.73727417 123.72604370]
[110.47612762 130.08915710]
[111.93502808 145.01803589]
[123.86073303 155.03878784]
[125.12759399 170.19956970]
[115.50085449 181.50715637]
[116.95974731 196.43605042]
[118.41864777 211.36492920]
[119.87754059 226.29382324]
[121.33644104 241.22270203]
[132.40200806 255.88113403]
[124.65402222 271.57781982]
[126.47601318 286.46673584]
[128.29801941 301.35568237]
[142.46470642 307.28866577]
[151.75413513 319.51986694]
[153.66749573 334.75912476]
[147.69010925 348.90713501]
[135.42987061 358.15817261]
[120.18470001 360.02377319]
[106.05548859 354.00207520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 121]
[4 120]
[5 119]
[8 117]
[9 116]
[10 115]
[11 114]
[12 113]
[15 110]
[16 109]
[19 40]
[20 39]
[21 38]
[22 37]
[23 36]
[24 35]
[25 34]
[44 60]
[45 59]
[46 58]
[48 56]
[49 55]
[50 54]
[61 104]
[62 103]
[63 102]
[64 101]
[65 100]
[66 99]
[68 97]
[69 96]
[73 92]
[74 91]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
