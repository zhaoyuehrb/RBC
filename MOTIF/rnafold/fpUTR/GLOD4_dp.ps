%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:42:00 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (GLOD4)
} def

/sequence { (\
AGUGACGUCACGGCCCGUGGCGCCCUUCGUGGACUGGGCUGUACGGUGCGCGUGACGGCUGCGUGCGGCGGGAAUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 60 0.061642928 ubox
2 11 0.011085567 ubox
2 59 0.070459094 ubox
2 62 0.025796987 ubox
2 69 0.007755955 ubox
2 75 0.028703691 ubox
3 10 0.011100734 ubox
3 58 0.070146670 ubox
3 61 0.025628566 ubox
3 68 0.007520062 ubox
3 70 0.004256603 ubox
3 74 0.029273688 ubox
4 9 0.011078645 ubox
4 60 0.018041507 ubox
4 69 0.003693064 ubox
4 76 0.039666833 ubox
5 75 0.036742532 ubox
6 22 0.007290845 ubox
6 57 0.991240042 ubox
6 70 0.003656889 ubox
7 21 0.007493777 ubox
7 56 0.999820425 ubox
8 20 0.007491880 ubox
8 55 0.999760927 ubox
9 19 0.007494417 ubox
9 54 0.999877952 ubox
10 18 0.007493233 ubox
10 42 0.003554213 ubox
10 53 0.999684433 ubox
11 17 0.007493697 ubox
11 41 0.003689975 ubox
11 52 0.999838935 ubox
12 16 0.007010496 ubox
12 40 0.003735522 ubox
12 49 0.004114271 ubox
12 51 0.996028853 ubox
13 39 0.003746278 ubox
13 47 0.004294524 ubox
13 49 0.998782072 ubox
13 51 0.007726771 ubox
14 38 0.003746315 ubox
14 46 0.003595144 ubox
14 48 0.999427840 ubox
14 50 0.010868297 ubox
14 72 0.011486217 ubox
15 37 0.003746301 ubox
15 46 0.999760659 ubox
15 71 0.011523941 ubox
16 36 0.003744770 ubox
16 45 0.999870739 ubox
16 70 0.011524034 ubox
17 44 0.999830530 ubox
17 69 0.011523253 ubox
18 43 0.995128568 ubox
18 68 0.011496633 ubox
19 40 0.010607953 ubox
19 42 0.954784543 ubox
20 39 0.012066263 ubox
20 42 0.272133388 ubox
20 66 0.011485497 ubox
21 31 0.003353393 ubox
21 38 0.011878135 ubox
21 41 0.375253155 ubox
21 65 0.011470832 ubox
22 30 0.003363547 ubox
22 39 0.995903356 ubox
22 40 0.079735722 ubox
22 59 0.006076784 ubox
22 64 0.009620224 ubox
23 29 0.003361961 ubox
23 37 0.011511875 ubox
23 38 0.999701455 ubox
23 58 0.006139179 ubox
23 63 0.009575128 ubox
23 72 0.007260048 ubox
24 32 0.007071875 ubox
24 36 0.011635722 ubox
24 37 0.999668394 ubox
24 38 0.015017015 ubox
24 57 0.006160611 ubox
24 58 0.008754553 ubox
24 71 0.007283659 ubox
25 31 0.008510526 ubox
25 32 0.015143237 ubox
25 36 0.999168885 ubox
25 37 0.016484693 ubox
25 57 0.008755695 ubox
25 70 0.007276082 ubox
26 31 0.028804132 ubox
26 32 0.026397418 ubox
26 33 0.084021047 ubox
26 36 0.017429600 ubox
26 55 0.007312948 ubox
27 31 0.020691800 ubox
27 32 0.084546660 ubox
27 33 0.463014658 ubox
27 54 0.006894026 ubox
27 68 0.006853350 ubox
28 32 0.463104054 ubox
28 36 0.007700826 ubox
28 52 0.010563981 ubox
28 67 0.007097932 ubox
29 35 0.020448573 ubox
29 51 0.010779574 ubox
29 66 0.007056881 ubox
30 50 0.010783911 ubox
30 65 0.006900179 ubox
31 35 0.006771775 ubox
31 49 0.010784677 ubox
31 64 0.003212927 ubox
33 47 0.010771072 ubox
33 64 0.006256489 ubox
34 46 0.010801111 ubox
34 63 0.006611999 ubox
35 45 0.010792491 ubox
36 44 0.010792316 ubox
37 60 0.008251239 ubox
38 59 0.008406783 ubox
39 58 0.008412353 ubox
40 57 0.008406036 ubox
41 56 0.008407528 ubox
42 54 0.005828672 ubox
42 55 0.006037303 ubox
43 53 0.008257713 ubox
44 52 0.008411680 ubox
44 70 0.003191019 ubox
45 51 0.008395952 ubox
45 69 0.003310919 ubox
47 67 0.003449626 ubox
48 66 0.003634158 ubox
49 65 0.003635026 ubox
50 64 0.003634751 ubox
51 63 0.003636219 ubox
52 62 0.003637415 ubox
53 61 0.003608178 ubox
57 76 0.008484291 ubox
58 66 0.049354022 ubox
58 69 0.408804965 ubox
58 75 0.018884764 ubox
59 65 0.049387977 ubox
59 68 0.409174917 ubox
59 71 0.900307145 ubox
59 72 0.058202812 ubox
60 67 0.408215591 ubox
60 70 0.904263061 ubox
60 71 0.042741470 ubox
61 66 0.400796694 ubox
61 69 0.909442311 ubox
62 68 0.909348879 ubox
62 70 0.038846042 ubox
63 69 0.039725786 ubox
64 68 0.037168381 ubox
67 76 0.004528343 ubox
68 75 0.003576453 ubox
70 76 0.023320394 ubox
71 75 0.015684200 ubox
6 57 0.9500000 lbox
7 56 0.9500000 lbox
8 55 0.9500000 lbox
9 54 0.9500000 lbox
10 53 0.9500000 lbox
11 52 0.9500000 lbox
12 51 0.9500000 lbox
13 49 0.9500000 lbox
14 48 0.9500000 lbox
15 46 0.9500000 lbox
16 45 0.9500000 lbox
17 44 0.9500000 lbox
18 43 0.9500000 lbox
19 42 0.9500000 lbox
22 39 0.9500000 lbox
23 38 0.9500000 lbox
24 37 0.9500000 lbox
25 36 0.9500000 lbox
59 71 0.9500000 lbox
60 70 0.9500000 lbox
61 69 0.9500000 lbox
62 68 0.9500000 lbox
showpage
end
%%EOF
