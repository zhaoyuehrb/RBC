%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:09:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGACCUGGUACUCCUCACACCACUUAACAGCCACUUGUUUCAUCCCACCUGGGCAUUAGGUUGACUUCAAAG\
) } def
/len { sequence length } bind def

/coor [
[106.16616058 252.47552490]
[107.70078278 237.35224915]
[114.91041565 223.96981812]
[126.69564056 214.36892700]
[122.36016846 200.00914001]
[118.02468872 185.64935303]
[113.68920898 171.28955078]
[109.35373688 156.92976379]
[105.01825714 142.56997681]
[100.68277740 128.21017456]
[96.34730530 113.85038757]
[86.28740692 104.14007568]
[89.29290771 90.48509216]
[84.95742798 76.12529755]
[80.62194824 61.76550674]
[65.96426392 62.66880035]
[51.48677444 60.25149536]
[37.93167877 54.64097595]
[25.99310684 46.12823486]
[16.28158379 35.15279770]
[9.29279613 22.28001213]
[5.38230276 8.17193699]
[4.74743986 -6.44670630]
[7.41736937 -20.82576942]
[13.25175762 -34.22816467]
[21.94814491 -45.96764755]
[33.05762482 -55.44396973]
[46.00802231 -62.17354202]
[42.27767181 -76.70228577]
[38.54732513 -91.23103333]
[34.81697464 -105.75978088]
[31.08662796 -120.28852844]
[19.23240280 -131.62031555]
[23.38124657 -147.48597717]
[39.26518250 -151.56428528]
[50.54418182 -139.65982056]
[45.61537552 -124.01888275]
[49.34572220 -109.49013519]
[53.07607269 -94.96138763]
[56.80641937 -80.43264008]
[60.53676987 -65.90389252]
[75.89304352 -66.17288971]
[90.88517761 -62.79813004]
[104.66049194 -55.96736526]
[116.43453979 -46.06501770]
[125.53573608 -33.65055084]
[131.44369507 -19.42688179]
[133.81898499 -4.20055246]
[132.52261353 11.16398525]
[127.62415314 25.79345322]
[119.39803314 38.85537720]
[108.30815887 49.60547256]
[94.98174286 57.43002701]
[99.31722260 71.78981781]
[103.65269470 86.14961243]
[113.71259308 95.85992432]
[110.70709229 109.51490784]
[115.04257202 123.87470245]
[119.37805176 138.23449707]
[123.71352386 152.59428406]
[128.04899597 166.95408630]
[132.38447571 181.31387329]
[136.71995544 195.67366028]
[141.05543518 210.03346252]
[156.18464661 211.50839233]
[169.59542847 218.66514587]
[179.24273682 230.41239929]
[183.65544128 244.95875549]
[182.16059875 260.08602905]
[174.98620605 273.48736572]
[163.22627258 283.11923218]
[148.67411804 287.51278687]
[133.54884338 285.99804688]
[120.15693665 278.80603027]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 64]
[5 63]
[6 62]
[7 61]
[8 60]
[9 59]
[10 58]
[11 57]
[13 55]
[14 54]
[15 53]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
