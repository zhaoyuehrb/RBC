%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:16:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCGUCUCCGCAGCAAAAAAGUUUGAGUCGCCGCUGCCGGGUUGCCAGCGGAGUCGCGCGUCGGGAGCUACGUAGGGCAGAGAAGUC\
) } def
/len { sequence length } bind def

/coor [
[2.50605583 146.04570007]
[12.71182537 135.05490112]
[-2.28583860 135.31962585]
[-17.28350258 135.58435059]
[-32.28116608 135.84907532]
[-35.81096268 138.34945679]
[-39.57743835 139.55812073]
[-43.16833496 139.55070496]
[-46.23371124 138.52261353]
[-48.51802826 136.76029968]
[-49.88119125 134.60449219]
[-64.69235229 132.23182678]
[-79.50350952 129.85916138]
[-94.31467438 127.48650360]
[-109.12583160 125.11384583]
[-116.00131226 138.58911133]
[-126.70580292 149.27879333]
[-140.19059753 156.13558960]
[-155.13456726 158.48776245]
[-170.07368469 156.10487366]
[-183.54434204 149.22036743]
[-194.22683716 138.50871277]
[-201.07460022 125.01933289]
[-203.41676331 110.07378387]
[-201.02386475 95.13627625]
[-194.13032532 81.67022705]
[-183.41151428 70.99491119]
[-169.91755676 64.15618896]
[-154.97044373 61.82404327]
[-140.03453064 64.22695160]
[-126.57311249 71.12950897]
[-115.90498352 81.85546875]
[-109.07530212 95.35401154]
[-106.75317383 110.30268097]
[-91.94200897 112.67534637]
[-77.13085175 115.04800415]
[-62.31969070 117.42066956]
[-47.50852966 119.79332733]
[-32.54589462 120.85141754]
[-17.54822922 120.58668518]
[-2.55056596 120.32196045]
[12.44709778 120.05723572]
[27.21407700 117.42354584]
[41.37856293 112.48721313]
[55.54304504 107.55088043]
[69.70752716 102.61454773]
[83.87201691 97.67821503]
[94.36702728 84.71038818]
[110.76673126 87.76970673]
[124.74818420 82.33656311]
[138.72962952 76.90341949]
[148.79020691 64.69295502]
[163.45578003 67.29492950]
[177.43722534 61.86178589]
[191.32061768 56.18273544]
[205.10160828 50.25955200]
[214.72499084 37.70163727]
[229.47325134 39.78442001]
[243.25425720 33.86123657]
[255.41860962 22.05172348]
[270.13403320 30.47150040]
[266.11694336 46.94266510]
[249.17742920 47.64223480]
[235.39643860 53.56541824]
[226.75877380 65.69966125]
[211.02479553 64.04055023]
[197.24380493 69.96372986]
[192.23123169 75.62307739]
[182.87037659 75.84323120]
[168.88891602 81.27637482]
[159.82839966 93.09822845]
[144.16278076 90.88487244]
[130.18132019 96.31801605]
[116.19987488 101.75115967]
[110.78125763 112.21749115]
[99.72211456 116.29187775]
[88.80834961 111.84269714]
[74.64386749 116.77902985]
[60.47937775 121.71536255]
[46.31489563 126.65169525]
[32.15040970 131.58802795]
[45.52761841 138.37406921]
[53.32627487 151.18737793]
[53.20856094 166.18692017]
[45.20977402 178.87626648]
[31.72771263 185.45150757]
[16.80389786 183.94161987]
[4.91205597 174.79917908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[11 38]
[12 37]
[13 36]
[14 35]
[15 34]
[43 81]
[44 80]
[45 79]
[46 78]
[47 77]
[49 74]
[50 73]
[51 72]
[53 70]
[54 69]
[55 67]
[56 66]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
