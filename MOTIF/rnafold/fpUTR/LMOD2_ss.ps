%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUUGUCACAGCCCUGUAUCACCACUCUUAAAAGGCUCCCACAGCCACUCCUAGCACCAGUUGUUGACCAGCCUGCCACUUGCCUCCCUGCCUGCUUCUGGCCGCCUUGAAUGCCUGGUCCUUCAAGCUCCUUCUGGGUCUGACAAAGCAGGGACC\
) } def
/len { sequence length } bind def

/coor [
[112.90732574 258.99179077]
[103.11962128 270.56661987]
[89.96181488 278.09310913]
[75.02278900 280.66238403]
[60.10649872 277.96423340]
[47.01415634 270.32443237]
[37.32672882 258.66555786]
[32.21401978 244.39544678]
[32.29341125 229.23730469]
[37.55532074 215.02153015]
[47.36434174 203.46476746]
[60.53599548 195.96253967]
[75.47972870 193.42077637]
[78.14969635 178.66030884]
[80.81966400 163.89985657]
[83.48963928 149.13938904]
[86.15960693 134.37892151]
[88.82957458 119.61846161]
[79.40991211 131.29193115]
[75.36164856 145.73533630]
[66.24356079 157.64585876]
[53.35725784 165.32328796]
[38.54223251 167.67170715]
[23.91331673 164.35585022]
[11.55877399 155.84907532]
[3.24219966 143.36570740]
[0.15077582 128.68772888]
[2.72579956 113.91040039]
[10.59968853 101.14318085]
[22.64845467 92.20857239]
[37.15214920 88.38198090]
[52.04039001 90.20964050]
[65.18576813 97.42890167]
[80.11597443 98.87422943]
[67.70641327 90.44791412]
[55.29685211 82.02159882]
[42.88729095 73.59528351]
[30.47772980 65.16896820]
[17.86409760 70.80264282]
[4.22344589 69.46446228]
[-6.87783670 61.61212540]
[-12.59071445 49.39231491]
[-11.51434803 36.05481720]
[-23.75392151 27.38343811]
[-35.99349594 18.71205902]
[-48.23307037 10.04067898]
[-63.96648788 8.37632656]
[-69.87870789 -5.29462433]
[-82.11828613 -13.96600437]
[-94.35785675 -22.63738441]
[-108.62750244 -16.77386856]
[-123.79780579 -19.57839203]
[-135.02798462 -30.15603828]
[-138.73452759 -45.13151932]
[-133.73469543 -59.72621536]
[-121.62390900 -69.28301239]
[-106.26667786 -70.75237274]
[-92.56343842 -63.66542053]
[-84.88684845 -50.28358459]
[-85.68647766 -34.87695694]
[-73.44690704 -26.20557785]
[-61.20732880 -17.53419876]
[-46.34936523 -16.49008179]
[-39.56169128 -2.19889498]
[-27.32211494 6.47248507]
[-15.08254242 15.14386463]
[-2.84296823 23.81524467]
[12.50377464 18.05898666]
[28.42232323 22.61103630]
[38.60773087 35.87369537]
[38.90404510 52.75940704]
[51.31360626 61.18572235]
[63.72316742 69.61203766]
[76.13272858 78.03835297]
[88.54228973 86.46466827]
[102.96485901 82.34285736]
[109.04774475 68.63159943]
[115.13062286 54.92034149]
[121.21350098 41.20908356]
[113.60749054 27.81300926]
[115.32783508 12.68377209]
[125.50655365 1.59965324]
[140.08575439 -1.33035457]
[146.16862488 -15.04161167]
[137.05970764 -27.40782166]
[135.37020874 -42.67350769]
[141.55459595 -56.73227692]
[153.94929504 -65.80239105]
[169.22019958 -67.44403076]
[183.25950623 -61.21561432]
[192.29072571 -48.79254532]
[193.88450623 -33.51656723]
[187.61210632 -19.49684334]
[175.16078186 -10.50461102]
[159.87988281 -8.95873165]
[153.79701233 4.75252533]
[161.40887451 17.52740479]
[160.02238464 32.51211929]
[149.96055603 43.94073105]
[134.92475891 47.29196548]
[128.84187317 61.00321960]
[122.75899506 74.71447754]
[116.67611694 88.42573547]
[120.70115662 90.87638092]
[124.32536316 94.47073364]
[139.13600159 96.84670258]
[153.94662476 99.22267151]
[168.75726318 101.59864044]
[183.60877991 96.14494324]
[194.94979858 105.80053711]
[209.76043701 108.17650604]
[224.57106018 110.55248260]
[243.00657654 102.48716736]
[257.53088379 115.20344543]
[272.42425537 116.98871613]
[287.04721069 110.94889069]
[298.76315308 120.14596558]
[313.65652466 121.93124390]
[328.54989624 123.71651459]
[343.40588379 116.77157593]
[356.69152832 126.38527679]
[354.73974609 142.66786194]
[339.55831909 148.86920166]
[326.76461792 138.60989380]
[311.87124634 136.82461548]
[296.97787476 135.03935242]
[283.42019653 141.20687866]
[270.63897705 131.88209534]
[255.74560547 130.09683228]
[248.25726318 137.14691162]
[237.90275574 138.91955566]
[228.09265137 134.58409119]
[222.19509888 125.36310577]
[207.38446045 122.98713684]
[192.57383728 120.61116791]
[178.78166199 126.23480988]
[166.38128662 116.40927124]
[151.57066345 114.03330231]
[136.76002502 111.65733337]
[121.94939423 109.28136444]
[133.80784607 118.46706390]
[147.05084229 125.51142883]
[152.93568420 139.30883789]
[148.85354614 153.74269104]
[136.61407471 162.41423035]
[121.64324951 161.47923279]
[110.57785034 151.35218811]
[108.32346344 136.52200317]
[103.59003448 122.28842926]
[100.92006683 137.04888916]
[98.25009918 151.80935669]
[95.58013153 166.56982422]
[92.91016388 181.33029175]
[90.24019623 196.09074402]
[103.34659576 203.70639038]
[113.05548859 215.34741211]
[118.19448853 229.60807800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 154]
[14 153]
[15 152]
[16 151]
[17 150]
[18 149]
[34 75]
[35 74]
[36 73]
[37 72]
[38 71]
[43 67]
[44 66]
[45 65]
[46 64]
[48 62]
[49 61]
[50 60]
[76 103]
[77 102]
[78 101]
[79 100]
[83 96]
[84 95]
[105 140]
[106 139]
[107 138]
[108 137]
[110 135]
[111 134]
[112 133]
[114 129]
[115 128]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
