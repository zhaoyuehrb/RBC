%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUUGGCCAAGCCCUGCCUCUGUACAGCCUCGAGUGGACAGCCAGAGGCUGCAGCUGGAGCCCAGAGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[120.90437317 224.23622131]
[117.22209167 209.69520569]
[113.53981018 195.15420532]
[109.85752869 180.61320496]
[99.50512695 174.01403809]
[96.44095612 161.70820618]
[102.88793182 150.32014465]
[99.80970001 135.63938904]
[96.73146820 120.95863342]
[82.78049469 112.38694000]
[79.08985138 96.43443298]
[87.85861969 82.60648346]
[84.17633820 68.06547546]
[80.49405670 53.52447510]
[64.81336975 47.56484222]
[55.77405548 33.62910080]
[56.70699692 17.20926857]
[67.05773163 4.64086294]
[62.77768707 -9.73554897]
[58.49764633 -24.11196136]
[54.21760178 -38.48837280]
[49.93755722 -52.86478424]
[45.65751648 -67.24119568]
[41.37747192 -81.61760712]
[26.36002541 -84.11514282]
[13.96667671 -92.84966278]
[6.62471676 -106.04496002]
[5.74357605 -121.05777740]
[11.44455338 -134.90725708]
[22.54736137 -144.86683655]
[18.26731873 -159.24325562]
[4.25032043 -166.54388428]
[-0.41910949 -181.64262390]
[7.02931786 -195.58164978]
[22.17658234 -200.09118652]
[36.03608322 -192.49580383]
[40.38521957 -177.30171204]
[32.64373016 -163.52328491]
[36.92377472 -149.14688110]
[51.66604233 -146.88171387]
[64.01366425 -138.40553284]
[71.48722839 -125.35536957]
[72.55792999 -110.29303741]
[66.95996857 -96.20227051]
[55.75388336 -85.89765167]
[60.03392792 -71.52124023]
[64.31397247 -57.14482880]
[68.59401703 -42.76841736]
[72.87405396 -28.39200401]
[77.15409851 -14.01559258]
[81.43414307 0.36081976]
[94.52859497 3.68370461]
[104.29805756 13.17191315]
[108.06183624 26.37376213]
[104.71165466 39.79916000]
[95.03505707 49.84218979]
[98.71733856 64.38319397]
[102.39962769 78.92420197]
[114.12040710 84.17086029]
[120.66611481 95.21885681]
[119.63775635 108.01911926]
[111.41222382 117.88040161]
[114.49044800 132.56115723]
[117.56867981 147.24191284]
[130.16386414 160.48840332]
[124.39852905 176.93092346]
[128.08081055 191.47192383]
[131.76309204 206.01292419]
[135.44537354 220.55393982]
[149.60321045 227.19393921]
[156.13368225 241.40263367]
[151.95332336 256.47109985]
[139.03594971 265.28445435]
[123.48075104 263.68133545]
[112.63243103 252.41865540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[7 64]
[8 63]
[9 62]
[12 58]
[13 57]
[14 56]
[18 51]
[19 50]
[20 49]
[21 48]
[22 47]
[23 46]
[24 45]
[30 39]
[31 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
