%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:14:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGAGGGAGGCGGUGGUAGCGGCGGCGGCUGCUGAGGAGGAGGAGGGGGAGCGGAGGGAGGUGUUUCUGUCAGUUCCGGCUGUUUGUUCGGGAAGUGGAUCCGCCGCUGCCGGAGCAGCCCGAAGGGAGCUGCGGAUCGCGAGGCCAGUACCGACCCCGCCCGCCCGCGCGCACCGCCCCCGCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[81.46266937 522.45056152]
[68.26081085 511.81350708]
[74.82753754 496.18295288]
[75.32349396 481.19116211]
[68.01123047 468.21502686]
[76.20057678 454.67822266]
[76.69652557 439.68640137]
[77.19247437 424.69461060]
[69.88021088 411.71847534]
[78.06956482 398.18167114]
[78.56551361 383.18988037]
[71.25325012 370.21374512]
[79.44260406 356.67694092]
[79.93855286 341.68515015]
[80.43450165 326.69332886]
[80.93045044 311.70153809]
[81.42640686 296.70974731]
[81.92235565 281.71792603]
[78.99600220 274.91656494]
[82.55247498 266.48294067]
[83.29623413 251.50140381]
[84.03999329 236.51985168]
[84.65986633 221.53266907]
[85.15581512 206.54086304]
[85.65176392 191.54905701]
[86.14772034 176.55726624]
[86.51970673 161.56187439]
[86.76771545 146.56393433]
[87.01573181 131.56597900]
[74.73635864 122.95104980]
[60.71788788 128.28796387]
[50.57362366 140.42898560]
[35.92628098 137.72625732]
[21.90781593 143.06317139]
[11.97761631 156.11395264]
[-4.25335979 153.77142334]
[-10.08807564 138.44537354]
[0.47572407 125.90191650]
[16.57090759 129.04469299]
[30.58937454 123.70779419]
[39.73094559 111.94850159]
[55.38098145 114.26949310]
[69.39945221 108.93258667]
[70.30070496 94.92346191]
[76.94323730 83.44862366]
[87.35052490 76.56062317]
[98.96591187 75.13428497]
[102.88810730 60.65615082]
[106.81031036 46.17801666]
[110.73250580 31.69988441]
[104.99987793 20.13255501]
[108.57745361 8.14620686]
[119.02114105 2.02014351]
[123.18218231 -12.39116192]
[127.34323120 -26.80246735]
[117.55991364 -43.00959396]
[122.62480164 -60.91929626]
[138.88037109 -69.30957794]
[142.56265259 -83.85057831]
[132.24882507 -99.72537994]
[136.71878052 -117.79274750]
[152.68804932 -126.71590424]
[155.88755798 -141.37071228]
[159.08705139 -156.02551270]
[152.78791809 -167.29437256]
[155.76676941 -179.44335938]
[165.89384460 -186.07972717]
[169.33520508 -200.67962646]
[172.77656555 -215.27952576]
[176.21792603 -229.87942505]
[175.14053345 -238.96862793]
[179.83876038 -244.69129944]
[183.52104187 -259.23229980]
[187.20332336 -273.77331543]
[190.88560486 -288.31430054]
[194.56790161 -302.85531616]
[198.25018311 -317.39630127]
[201.93246460 -331.93731689]
[205.01069641 -346.61807251]
[207.47961426 -361.41348267]
[209.94853210 -376.20892334]
[212.41744995 -391.00433350]
[214.88636780 -405.79974365]
[217.35528564 -420.59518433]
[215.50900269 -425.51599121]
[215.72529602 -430.18295288]
[217.55870056 -433.84933472]
[220.33097839 -436.05538940]
[223.53047180 -450.71020508]
[226.72996521 -465.36499023]
[229.92945862 -480.01980591]
[233.12895203 -494.67459106]
[226.82983398 -505.94345093]
[229.80868530 -518.09246826]
[239.93576050 -524.72882080]
[243.37712097 -539.32873535]
[246.81848145 -553.92858887]
[250.25984192 -568.52850342]
[253.70120239 -583.12841797]
[246.51908875 -597.47399902]
[253.38746643 -611.97247314]
[269.03750610 -615.50177002]
[281.46383667 -605.35455322]
[281.13403320 -589.31488037]
[268.30108643 -579.68707275]
[264.85974121 -565.08715820]
[261.41839600 -550.48724365]
[257.97702026 -535.88732910]
[254.53565979 -521.28747559]
[260.49298096 -504.78869629]
[247.78375244 -491.47509766]
[244.58425903 -476.82031250]
[241.38476562 -462.16549683]
[238.18527222 -447.51068115]
[234.98577881 -432.85589600]
[232.15069580 -418.12625122]
[229.68177795 -403.33084106]
[227.21286011 -388.53540039]
[224.74394226 -373.73999023]
[222.27502441 -358.94458008]
[219.80610657 -344.14913940]
[233.38867188 -350.51422119]
[246.90812683 -344.01617432]
[250.42234802 -329.43365479]
[241.34703064 -317.49050903]
[226.35606384 -316.96966553]
[216.47346497 -328.25503540]
[212.79118347 -313.71401978]
[209.10890198 -299.17303467]
[205.42662048 -284.63201904]
[201.74433899 -270.09103394]
[198.06205750 -255.55001831]
[194.37977600 -241.00901794]
[190.81782532 -226.43806458]
[187.37646484 -211.83816528]
[183.93510437 -197.23826599]
[180.49374390 -182.63836670]
[186.45104980 -166.13960266]
[173.74185181 -152.82601929]
[170.54235840 -138.17121887]
[167.34286499 -123.51641083]
[175.45153809 -115.46070099]
[178.69021606 -104.37407684]
[176.14076233 -92.98598480]
[168.32518005 -84.15876770]
[157.10365295 -80.16829681]
[153.42137146 -65.62729645]
[161.25926208 -57.30788803]
[164.12960815 -46.12024307]
[161.20503235 -34.82266998]
[153.10186768 -26.25869370]
[141.75453186 -22.64142227]
[137.59349060 -8.23011780]
[133.43244934 6.18118715]
[138.56436157 22.95503807]
[125.21063995 35.62208176]
[121.28843689 50.10021591]
[117.36624146 64.57835388]
[113.44403839 79.05648804]
[126.85118103 95.55042267]
[123.12906647 118.38752747]
[102.01367950 131.81399536]
[101.76567078 146.81193542]
[101.51766205 161.80989075]
[104.50897980 170.46011353]
[101.13951874 177.05322266]
[100.64356232 192.04501343]
[100.14761353 207.03681946]
[99.65166473 222.02861023]
[102.49955750 230.72711182]
[99.02153778 237.26361084]
[98.27778625 252.24514771]
[97.53402710 267.22671509]
[96.91415405 282.21389771]
[96.41820526 297.20568848]
[95.92224884 312.19747925]
[95.42630005 327.18930054]
[94.93035126 342.18109131]
[94.43440247 357.17288208]
[101.71118927 371.22134399]
[93.55731201 383.68582153]
[93.06136322 398.67761230]
[100.33815002 412.72607422]
[92.18428040 425.19055176]
[91.68832397 440.18237305]
[91.19237518 455.17416382]
[98.46916199 469.22262573]
[90.31529236 481.68710327]
[89.81933594 496.67889404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 189]
[4 188]
[6 186]
[7 185]
[8 184]
[10 182]
[11 181]
[13 179]
[14 178]
[15 177]
[16 176]
[17 175]
[18 174]
[20 173]
[21 172]
[22 171]
[23 169]
[24 168]
[25 167]
[26 166]
[27 164]
[28 163]
[29 162]
[30 43]
[31 42]
[33 40]
[34 39]
[47 159]
[48 158]
[49 157]
[50 156]
[53 154]
[54 153]
[55 152]
[58 147]
[59 146]
[62 141]
[63 140]
[64 139]
[67 137]
[68 136]
[69 135]
[70 134]
[72 133]
[73 132]
[74 131]
[75 130]
[76 129]
[77 128]
[78 127]
[79 121]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
