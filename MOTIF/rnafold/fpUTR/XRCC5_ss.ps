%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGUUUCCCCGCCCCUUUCAGGCCUAGCAGGAAACGAAGCGGCUCUUUCCGCUAUCUGCCGCUUGUCCACCGGAAGCGAGUUGCGACACGGCAGGUUCCCGCCCGGAAGAAGCGACCAAAGCGCCUGAGGACCGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[86.87913513 359.13607788]
[72.23300171 355.89712524]
[63.99410629 343.36251831]
[59.39064789 357.63864136]
[65.39673615 372.51501465]
[57.38549805 386.41464233]
[41.50246811 388.67492676]
[29.93174553 377.56195068]
[31.54940224 361.60067749]
[45.11450958 353.03518677]
[49.71796799 338.75903320]
[53.35760498 324.20730591]
[56.01716614 309.44497681]
[58.67672348 294.68261719]
[48.50320053 281.33676147]
[51.14305115 264.42352295]
[65.45153046 254.42681885]
[67.78153992 239.60888672]
[70.11154938 224.79096985]
[72.44156647 209.97303772]
[74.77157593 195.15510559]
[77.10158539 180.33717346]
[79.43159485 165.51924133]
[81.76160431 150.70130920]
[68.86917877 118.51454926]
[81.65628052 97.18238068]
[67.06490326 93.70507812]
[52.47351837 90.22777557]
[37.88214111 86.75047302]
[28.72562981 87.80628967]
[23.00618553 83.02973938]
[8.49589825 79.22822571]
[-6.01438951 75.42670441]
[-20.52467728 71.62518311]
[-35.03496552 67.82366180]
[-44.21272278 68.67522430]
[-49.82433319 63.77243805]
[-64.24632263 59.64858627]
[-77.93996429 67.53907776]
[-93.18034363 63.35500336]
[-100.92561340 49.57870865]
[-96.58064270 34.38341904]
[-82.72322845 26.78423309]
[-67.57472992 31.28961182]
[-60.12247467 45.22659302]
[-45.70048141 49.35044479]
[-31.23344421 53.31337738]
[-16.72315788 57.11489487]
[-2.21286964 60.91641617]
[12.29741764 64.71793365]
[26.80770493 68.51945496]
[41.35944366 72.15909576]
[55.95082092 75.63639832]
[70.54220581 79.11369324]
[85.13358307 82.59099579]
[97.95364380 74.80345154]
[101.59328461 60.25171280]
[105.23291779 45.69997406]
[108.87255859 31.14823914]
[112.51219177 16.59650230]
[116.15183258 2.04476476]
[119.79146576 -12.50697231]
[118.31483459 -19.08576393]
[120.16062927 -24.56852913]
[123.93097687 -27.61863136]
[128.21524048 -41.99378586]
[132.49949646 -56.36894608]
[136.78375244 -70.74410248]
[131.16729736 -90.04878998]
[145.61215210 -102.83187103]
[149.25178528 -117.38361359]
[152.72908020 -131.97499084]
[156.04362488 -146.60420227]
[150.67080688 -162.09823608]
[161.60575867 -174.31947327]
[177.59953308 -170.69577026]
[182.19911194 -154.95487976]
[170.67283630 -143.28967285]
[167.35829163 -128.66046143]
[168.96095276 -121.38316345]
[163.80352783 -113.74397278]
[160.16387939 -99.19223785]
[166.23399353 -90.85011292]
[166.67601013 -80.32195282]
[161.09800720 -71.12297821]
[151.15890503 -66.45984650]
[146.87464905 -52.08468628]
[142.59039307 -37.70952988]
[138.30613708 -23.33437347]
[134.34320068 -8.86733532]
[130.70356750 5.68440151]
[127.06393433 20.23613930]
[123.42429352 34.78787613]
[119.78466034 49.33961105]
[116.14501953 63.89134979]
[112.50538635 78.44308472]
[122.44259644 89.67926788]
[137.33010864 87.84569550]
[152.21762085 86.01213074]
[167.10513306 84.17855835]
[178.07118225 72.46850586]
[194.05162048 73.88459778]
[202.78761292 87.34052277]
[197.57766724 102.51405334]
[182.41839600 107.76535034]
[168.93870544 99.06607056]
[154.05119324 100.89964294]
[139.16368103 102.73320770]
[124.27616882 104.56678009]
[122.70048523 111.89939117]
[133.82528687 121.96114349]
[119.54912567 126.56462097]
[117.97344971 133.89723206]
[130.79351807 141.68478394]
[145.54447937 136.49411011]
[160.16259766 142.04789734]
[167.74563599 155.72384644]
[164.71313477 171.06457520]
[152.49693298 180.82666016]
[136.86514282 180.40075684]
[125.19863129 169.98794556]
[123.00596619 154.50485229]
[110.18589783 146.71730042]
[96.57953644 153.03132629]
[94.24952698 167.84925842]
[91.91951752 182.66719055]
[89.58950043 197.48510742]
[87.25949097 212.30303955]
[84.92948151 227.12097168]
[82.59947205 241.93890381]
[80.26946259 256.75683594]
[89.42496490 266.70141602]
[91.13037109 279.91403198]
[84.98265839 291.51263428]
[73.43906403 297.34219360]
[70.77950287 312.10452271]
[68.11994934 326.86688232]
[81.28991699 319.68692017]
[95.73626709 323.72460938]
[103.27497864 336.69256592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[12 137]
[13 136]
[14 135]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[23 125]
[24 124]
[26 55]
[27 54]
[28 53]
[29 52]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[37 46]
[38 45]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[65 89]
[66 88]
[67 87]
[68 86]
[70 82]
[71 81]
[72 79]
[73 78]
[97 109]
[98 108]
[99 107]
[100 106]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
