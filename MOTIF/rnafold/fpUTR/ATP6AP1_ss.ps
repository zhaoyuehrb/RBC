%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGCAACGGUCACCUGAUCUGCGGCUGUCGAGGCCGCUGAGGCAGUGGAGGCUGAGGCU\
) } def
/len { sequence length } bind def

/coor [
[76.89198303 304.98956299]
[60.68194580 302.50628662]
[54.98044205 287.13015747]
[65.65268707 274.67886353]
[67.92410278 259.85183716]
[70.19551849 245.02481079]
[61.20019913 233.20872498]
[63.29252243 218.13966370]
[75.74730682 208.78465271]
[78.01872253 193.95762634]
[80.29013824 179.13059998]
[82.56155396 164.30357361]
[84.83297729 149.47654724]
[79.11215973 135.72441101]
[88.84996796 123.25501251]
[91.12138367 108.42799377]
[92.63890839 93.50495148]
[93.39864349 78.52420044]
[84.57572174 62.57178879]
[94.21558380 48.11163712]
[94.21558380 33.11163712]
[86.47828674 19.31146431]
[94.21558380 6.58419228]
[94.21558380 -8.41580772]
[94.21558380 -23.41580772]
[94.21558380 -38.41580582]
[94.21558380 -53.41580582]
[94.21558380 -68.41580963]
[83.93381500 -80.73103333]
[87.29270172 -96.41852570]
[101.71558380 -103.44418335]
[116.13847351 -96.41852570]
[119.49735260 -80.73103333]
[109.21558380 -68.41580963]
[109.21558380 -53.41580582]
[109.21558380 -38.41580582]
[109.21558380 -23.41580772]
[109.21558380 -8.41580772]
[109.21558380 6.58419228]
[116.95288849 19.31146431]
[109.21558380 33.11163712]
[109.21558380 48.11163712]
[117.66117859 57.10886383]
[117.54840088 69.85456848]
[108.37939453 79.28394318]
[107.61965179 94.26468658]
[110.40865326 99.21068573]
[109.98516083 105.37547302]
[105.94841003 110.69940948]
[103.67699432 125.52643585]
[109.23533630 140.33911133]
[99.65999603 151.74797058]
[97.38858032 166.57499695]
[95.11716461 181.40202332]
[92.84574890 196.22904968]
[90.57433319 211.05607605]
[99.65738678 223.71055603]
[97.14263153 238.71490479]
[85.02254486 247.29621887]
[82.75112915 262.12326050]
[80.47971344 276.95028687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 61]
[5 60]
[6 59]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[15 50]
[16 49]
[17 46]
[18 45]
[20 42]
[21 41]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
