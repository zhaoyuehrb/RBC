%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUCUUAGGCUGACACUUGACUCCUUGCCUACAUCUAUAGCUUGGCACAGAGAGAUUCACGCACCCUCAAGAGUGUGGGUGAGACAUAUACAGCCUGUUAGACCUGAAGGCAG\
) } def
/len { sequence length } bind def

/coor [
[148.97070312 314.26101685]
[144.56787109 299.92172241]
[140.16502380 285.58245850]
[135.76219177 271.24316406]
[126.19932556 267.20422363]
[120.37722778 258.34378052]
[120.46868896 247.52082825]
[126.68865204 238.39421082]
[123.06858826 223.83760071]
[119.44851685 209.28097534]
[115.82844543 194.72436523]
[112.20838165 180.16773987]
[108.58831024 165.61112976]
[104.96824646 151.05450439]
[93.08628082 150.82762146]
[81.57540894 147.87254333]
[71.05348206 142.34791565]
[62.08526230 134.55023193]
[55.15212250 124.89807892]
[50.62620163 113.90950775]
[48.75042725 102.17434692]
[49.62548447 90.32247162]
[53.20439911 78.99004364]
[40.56567001 70.91152954]
[27.92693710 62.83300781]
[15.17997360 54.92636871]
[2.32711649 47.19306183]
[-10.62927914 39.63450241]
[-23.68683624 32.25207520]
[-36.74439240 24.86965179]
[-49.80195236 17.48722649]
[-61.75605011 26.87700653]
[-76.39485931 30.97257996]
[-91.48606873 29.14940453]
[-104.72837067 21.68550110]
[-114.10240936 9.71905899]
[-118.17872620 -4.92512417]
[-116.33570099 -20.01391792]
[-108.85438538 -33.24639130]
[-96.87561798 -42.60468674]
[-82.22608948 -46.66173172]
[-67.13973236 -44.79885864]
[-53.91711426 -37.30014038]
[-44.57458115 -25.30908012]
[-40.53681183 -10.65422249]
[-42.41952896 4.42966986]
[-29.36196899 11.81209469]
[-16.30441284 19.19451904]
[-3.24685454 26.57694244]
[4.22368288 27.13708115]
[10.06042385 34.34020233]
[22.91328239 42.07350922]
[30.36591148 42.83573914]
[36.00545502 50.19427490]
[48.64418793 58.27279282]
[61.28291702 66.35131073]
[81.19351196 52.27618408]
[105.35351562 48.98445129]
[128.30386353 57.21989441]
[138.32067871 46.05461502]
[148.33749390 34.88933945]
[158.35430908 23.72406387]
[161.81062317 8.28500748]
[176.06901550 3.97831511]
[186.08583069 -7.18696117]
[196.10264587 -18.35223770]
[199.55895996 -33.79129410]
[213.81735229 -38.09798813]
[223.83416748 -49.26326370]
[226.68347168 -65.41298676]
[242.18461609 -70.76524353]
[254.39134216 -59.81409073]
[250.74642944 -43.82513809]
[234.99945068 -39.24644470]
[224.98263550 -28.08116913]
[222.24278259 -13.44072819]
[207.26792908 -8.33542061]
[197.25111389 2.82985544]
[187.23429871 13.99513149]
[184.49444580 28.63557243]
[169.51959229 33.74087906]
[159.50277710 44.90615845]
[149.48596191 56.07143402]
[139.46914673 67.23670959]
[145.38717651 76.09915924]
[149.34628296 85.99318695]
[151.17556763 96.49176025]
[150.79608154 107.14174652]
[148.22419739 117.48348999]
[143.57093811 127.07064056]
[137.03712463 135.48939514]
[128.90476990 142.37641907]
[119.52486420 147.43444824]
[123.14492798 161.99105835]
[126.76499939 176.54768372]
[130.38507080 191.10429382]
[134.00512695 205.66090393]
[137.62519836 220.21752930]
[141.24526978 234.77413940]
[155.90718079 248.47894287]
[150.10147095 266.84033203]
[154.50431824 281.17962646]
[158.90715027 295.51889038]
[163.30999756 309.85818481]
[174.75714111 320.77941895]
[171.09638977 335.21713257]
[175.49923706 349.55642700]
[179.90206909 363.89572144]
[192.27110291 374.66320801]
[188.86555481 390.70483398]
[173.18875122 395.51837158]
[161.36766052 384.15203857]
[165.56278992 368.29855347]
[161.15995789 353.95925903]
[156.75711060 339.61999512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 104]
[2 103]
[3 102]
[4 101]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[13 94]
[14 93]
[23 56]
[24 55]
[25 54]
[26 52]
[27 51]
[28 49]
[29 48]
[30 47]
[31 46]
[59 84]
[60 83]
[61 82]
[62 81]
[64 79]
[65 78]
[66 77]
[68 75]
[69 74]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
