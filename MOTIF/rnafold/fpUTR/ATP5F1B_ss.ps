%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCACCCAAUGGACCUGCCUACUGCAGCGUAGGCCUCGCCUCAACGGCAGGAGAGCAGGCGGCUGCGGUUGCUGCAGCCUUCAGUCUCCACCCGGACUACGCC\
) } def
/len { sequence length } bind def

/coor [
[123.55372620 127.65371704]
[117.51294708 142.38061523]
[109.88497925 155.29626465]
[102.25701141 168.21191406]
[94.62905121 181.12757874]
[87.00108337 194.04322815]
[89.59145355 209.87577820]
[78.72173309 221.67529297]
[62.73023224 220.39019775]
[53.88426590 207.00631714]
[58.96969986 191.79060364]
[74.08542633 186.41525269]
[81.71339417 173.49960327]
[89.34136200 160.58395386]
[96.96932983 147.66830444]
[104.59729004 134.75263977]
[100.22494507 128.65899658]
[87.10791016 110.37803650]
[72.42956543 113.46771240]
[57.75121307 116.55739594]
[47.81789398 129.15536499]
[31.77493858 129.09979248]
[21.92912674 116.43331909]
[25.83332634 100.87257385]
[40.49256516 94.35443115]
[54.66153336 101.87905121]
[69.33988190 98.78936768]
[84.01822662 95.69969177]
[97.26012421 88.65325165]
[108.02273560 78.20498657]
[118.78533936 67.75672150]
[129.54794312 57.30846024]
[140.31056213 46.86019135]
[151.07316589 36.41192627]
[155.58546448 21.24783325]
[170.10679626 17.93420982]
[180.86941528 7.48594332]
[176.85627747 -6.39437914]
[179.41625977 -20.47557640]
[187.89440918 -31.83590508]
[181.04496765 -45.18076324]
[174.19552612 -58.52561951]
[159.42478943 -64.78698730]
[155.24966431 -80.27724457]
[164.87297058 -93.11358643]
[180.91252136 -93.44906616]
[191.06413269 -81.02634430]
[187.54037476 -65.37505341]
[194.38981628 -52.03020096]
[201.23925781 -38.68534470]
[217.68545532 -38.00671005]
[231.44342041 -28.97029305]
[244.78826904 -35.81973267]
[258.13311768 -42.66917038]
[271.47799683 -49.51860809]
[284.82284546 -56.36804581]
[287.48077393 -69.67035675]
[297.20922852 -78.84124756]
[310.25769043 -80.65634155]
[321.77267456 -74.66912079]
[335.31463623 -81.12009430]
[344.44586182 -94.04029083]
[359.26354980 -92.52862549]
[372.80551147 -98.97960663]
[386.34747314 -105.43058014]
[399.88946533 -111.88156128]
[413.43142700 -118.33253479]
[426.97338867 -124.78351593]
[440.51535034 -131.23449707]
[454.05731201 -137.68547058]
[465.75653076 -149.95594788]
[480.78616333 -142.11076355]
[477.40814209 -125.49674225]
[460.50830078 -124.14350891]
[446.96633911 -117.69252777]
[433.42437744 -111.24154663]
[419.88238525 -104.79057312]
[406.34042358 -98.33959198]
[392.79846191 -91.88861847]
[379.25650024 -85.43763733]
[365.71453857 -78.98665619]
[357.55191040 -66.52788544]
[341.76562500 -67.57812500]
[328.22363281 -61.12715149]
[323.35150146 -45.10693359]
[308.13662720 -37.34523773]
[291.67227173 -43.02318954]
[278.32742310 -36.17375183]
[264.98257446 -29.32431412]
[251.63771057 -22.47487450]
[238.29284668 -15.62543583]
[238.36010742 -1.14331794]
[231.79324341 11.85876369]
[219.96200562 20.49911690]
[205.41212463 22.82391357]
[191.31767273 18.24855232]
[180.55506897 28.69681740]
[176.81257629 43.11358261]
[161.52143860 47.17453766]
[150.75881958 57.62280273]
[139.99621582 68.07106781]
[129.23361206 78.51933289]
[118.47100067 88.96759796]
[107.70838928 99.41586304]
[116.77536774 104.06981659]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[18 28]
[19 27]
[20 26]
[29 104]
[30 103]
[31 102]
[32 101]
[33 100]
[34 99]
[36 97]
[37 96]
[40 50]
[41 49]
[42 48]
[52 91]
[53 90]
[54 89]
[55 88]
[56 87]
[60 84]
[61 83]
[63 81]
[64 80]
[65 79]
[66 78]
[67 77]
[68 76]
[69 75]
[70 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
