%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGGCUGAUUCUCUGGCUGUGUGGGGCGCACGGUCCCGGGAUACUGGGGACGGCGGGGUGGGAGGGCGCCGUCCUGGGGCCGCGGCGGCCGGGCGGGGGAG\
) } def
/len { sequence length } bind def

/coor [
[69.26058960 314.43890381]
[61.98032761 327.85385132]
[49.59549332 336.77453613]
[34.56510925 339.42974854]
[19.87346268 335.29232788]
[8.43759346 325.18374634]
[2.52810240 311.11105347]
[3.31832218 295.86840820]
[10.65135479 282.48223877]
[23.07122040 273.61038208]
[38.11194611 271.01437378]
[42.17804718 256.57598877]
[46.24415207 242.13760376]
[50.31025314 227.69923401]
[54.37635422 213.26084900]
[50.37877655 198.91271973]
[61.56724167 187.72662354]
[65.63334656 173.28825378]
[69.69944763 158.84986877]
[64.22953796 152.67053223]
[61.71650314 144.70997620]
[62.66852951 136.32075500]
[66.99802399 128.96147156]
[74.02349091 123.94326019]
[82.57582092 122.19635773]
[88.36886597 108.36015320]
[86.78739929 94.46804810]
[97.79492188 85.84680176]
[103.58796692 72.01059723]
[109.38101959 58.17438889]
[106.56390381 40.05741119]
[120.75959778 29.86507034]
[126.12799835 15.85863304]
[131.49639893 1.85219550]
[136.86480713 -12.15424156]
[142.23320007 -26.16067886]
[147.60159302 -40.16711426]
[152.97000122 -54.17355347]
[139.34518433 -47.89946365]
[124.46268463 -49.77334976]
[112.81845093 -59.22912979]
[107.93012238 -73.41025543]
[111.27445984 -88.03268433]
[121.84113312 -98.67906189]
[136.43801880 -102.13316345]
[150.65547180 -97.35153961]
[160.19848633 -85.77867889]
[162.18397522 -70.90951538]
[171.14814758 -82.93630219]
[180.11231995 -94.96308899]
[189.07649231 -106.98987579]
[198.04066467 -119.01666260]
[207.00483704 -131.04344177]
[215.96900940 -143.07023621]
[224.93318176 -155.09701538]
[233.89735413 -167.12380981]
[227.22451782 -180.89813232]
[227.72885132 -196.19532776]
[235.29446411 -209.50021362]
[248.18283081 -217.75543213]
[263.43228149 -219.06399536]
[277.53863525 -213.12519836]
[287.26034546 -201.30374146]
[290.36343384 -186.31608582]
[286.13482666 -171.60632324]
[275.54623413 -160.55461121]
[261.03082275 -155.70057678]
[245.92414856 -158.15963745]
[236.95997620 -146.13284302]
[227.99580383 -134.10606384]
[219.03163147 -122.07927704]
[210.06745911 -110.05249023]
[201.10327148 -98.02570343]
[192.13909912 -85.99891663]
[183.17492676 -73.97212982]
[174.21075439 -61.94534302]
[166.97644043 -48.80515289]
[161.60803223 -34.79871750]
[156.23963928 -20.79227829]
[150.87123108 -6.78584194]
[145.50283813 7.22059536]
[140.13444519 21.22703171]
[134.76603699 35.23347092]
[139.41665649 46.51572800]
[134.92463684 58.29453278]
[123.21722412 63.96743393]
[117.42417908 77.80364227]
[111.63113403 91.63984680]
[113.21260071 105.53195190]
[102.20507812 114.15319824]
[96.41203308 127.98940277]
[101.24895477 149.77346802]
[84.13782501 162.91596985]
[80.07172394 177.35435486]
[76.00562286 191.79272461]
[79.71236420 207.17358398]
[68.81473541 217.32695007]
[64.74863434 231.76533508]
[60.68252945 246.20370483]
[56.61642838 260.64208984]
[52.55032730 275.08047485]
[64.02591705 285.14395142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 101]
[12 100]
[13 99]
[14 98]
[15 97]
[17 95]
[18 94]
[19 93]
[25 91]
[26 90]
[28 88]
[29 87]
[30 86]
[32 83]
[33 82]
[34 81]
[35 80]
[36 79]
[37 78]
[38 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[55 69]
[56 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
