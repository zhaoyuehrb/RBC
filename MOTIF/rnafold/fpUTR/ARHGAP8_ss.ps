%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUCCGGGGAGGGGCCAGGUGAGCGGCAGACCCGGCACGCAGGUGGGGGCCGGCGGGGUCCGUGGCCAGAGCUGCAGAGAGACAAGGCGGCGGCGGCUGCUGUGCUGGGUGCAGUGAGGAAGAGGCCCUCGGUGGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[-83.29159546 246.12280273]
[-102.22956848 241.85235596]
[-114.24671936 250.82943726]
[-126.26387024 259.80651855]
[-138.18098450 268.91598511]
[-149.99661255 278.15673828]
[-161.81222534 287.39746094]
[-173.62783813 296.63818359]
[-185.44346619 305.87893677]
[-183.35244751 318.29492188]
[-186.74996948 330.34341431]
[-194.92427063 339.72854614]
[-206.25958252 344.68954468]
[-218.55526733 344.33093262]
[-229.45300293 338.78347778]
[-241.66580200 347.49252319]
[-253.87860107 356.20156860]
[-253.88125610 371.71862793]
[-263.03131104 384.25082397]
[-277.81042480 388.97924805]
[-292.53567505 384.08575439]
[-301.54492188 371.45193481]
[-301.37393188 355.93582153]
[-292.08847046 343.50360107]
[-277.25894165 338.93579102]
[-262.58764648 343.98873901]
[-250.37484741 335.27972412]
[-238.16203308 326.57067871]
[-238.86296082 308.98739624]
[-228.82998657 294.34072876]
[-211.88537598 288.54098511]
[-194.68420410 294.06329346]
[-182.86857605 284.82257080]
[-171.05296326 275.58184814]
[-159.23733521 266.34109497]
[-147.42172241 257.10037231]
[-144.06410217 250.44947815]
[-135.24095154 247.78936768]
[-123.22380066 238.81228638]
[-111.20664978 229.83520508]
[-112.53332520 219.51956177]
[-109.39413452 209.51887512]
[-102.30117798 201.69155884]
[-92.50769043 197.52183533]
[-81.78697205 197.83860779]
[-72.11135864 202.65161133]
[-59.52527618 194.49130249]
[-46.93919754 186.33099365]
[-40.46934891 172.91494751]
[-24.68076134 171.89952087]
[-12.09468174 163.73921204]
[0.49139771 155.57891846]
[13.07747746 147.41860962]
[19.54732513 134.00256348]
[35.33591461 132.98713684]
[47.92199326 124.82682800]
[60.50807190 116.66652679]
[73.09415436 108.50621796]
[85.68022919 100.34590912]
[92.20748138 87.98117828]
[106.15946198 87.06800842]
[118.74554443 78.90769958]
[118.05886841 63.62778854]
[125.06632233 50.14474869]
[137.79711914 42.03343582]
[152.77841187 41.38780594]
[165.98245239 48.28120041]
[178.56852722 40.12089157]
[179.85717773 26.66617012]
[188.55241394 16.57419777]
[201.29008484 13.40444851]
[213.33749390 18.10256004]
[226.10101318 10.22268105]
[238.86453247 2.34280252]
[251.62806702 -5.53707600]
[264.39157104 -13.41695499]
[277.15512085 -21.29683304]
[278.44381714 -36.64757919]
[288.40795898 -48.16144943]
[303.06790161 -51.56009674]
[316.75418091 -45.74430847]
[329.51770020 -53.62418747]
[335.23263550 -60.85355377]
[342.65188599 -61.53359222]
[355.58660889 -69.12918854]
[363.56875610 -82.78920746]
[378.46160889 -82.56196594]
[391.39633179 -90.15756226]
[404.33105469 -97.75315857]
[417.26577759 -105.34874725]
[430.20050049 -112.94434357]
[443.13522339 -120.53993988]
[450.75485229 -135.06141663]
[467.14932251 -135.45291138]
[475.45339966 -121.31168365]
[467.12457275 -107.18502045]
[450.73080444 -107.60522461]
[437.79608154 -100.00962830]
[424.86135864 -92.41403198]
[411.92663574 -84.81843567]
[398.99194336 -77.22284698]
[386.05722046 -69.62725067]
[379.00024414 -56.51051712]
[363.18222046 -56.19446945]
[350.24749756 -48.59887314]
[337.39758301 -40.86066437]
[324.63406372 -32.98078537]
[323.70098877 -18.13937759]
[314.09399414 -6.55623007]
[299.33599854 -2.80726480]
[285.03497314 -8.53331089]
[272.27145386 -0.65343201]
[259.50793457 7.22644663]
[246.74441528 15.10632515]
[233.98089600 22.98620415]
[221.21737671 30.86608315]
[218.07829285 47.35198212]
[203.72566223 56.68233871]
[186.72883606 52.70697403]
[174.14276123 60.86727905]
[175.04768372 75.73491669]
[168.34463501 89.14853668]
[155.74423218 97.46094513]
[140.57534790 98.35615540]
[126.90584564 91.49378204]
[114.31977081 99.65409088]
[107.79251862 112.01882172]
[93.84053802 112.93199158]
[81.25445557 121.09230042]
[68.66838074 129.25260925]
[56.08229828 137.41290283]
[43.49621964 145.57321167]
[36.12612915 159.57293701]
[21.23778343 160.00468445]
[8.65170383 168.16499329]
[-3.93437624 176.32530212]
[-16.52045631 184.48561096]
[-23.89054489 198.48533630]
[-38.77889252 198.91706848]
[-51.36497116 207.07737732]
[-63.95104980 215.23768616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 40]
[3 39]
[4 38]
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[15 28]
[16 27]
[17 26]
[46 141]
[47 140]
[48 139]
[50 137]
[51 136]
[52 135]
[53 134]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
[61 126]
[62 125]
[67 120]
[68 119]
[72 116]
[73 115]
[74 114]
[75 113]
[76 112]
[77 111]
[81 107]
[82 106]
[84 105]
[85 104]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
