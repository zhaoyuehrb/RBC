%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGUCUCUAGCAGUGGGUGAAGGCCUGUGAGUGAGGAAUGCCUCUCACCAGCUGUGCCUGAGCUGCAGCACUCCAGCCACUGCUGUCUCCUUAGCUGCUCACAU\
) } def
/len { sequence length } bind def

/coor [
[152.12890625 465.08493042]
[145.84481812 451.40267944]
[142.54313660 436.71279907]
[142.36819458 421.65747070]
[145.32765198 406.89483643]
[151.29212952 393.07025146]
[160.00086975 380.78808594]
[171.07318115 370.58526611]
[184.02500916 362.90780640]
[179.22096252 348.69790649]
[174.41691589 334.48800659]
[169.61286926 320.27810669]
[164.80882263 306.06820679]
[160.00477600 291.85830688]
[155.20072937 277.64843750]
[150.39668274 263.43853760]
[145.59263611 249.22863770]
[134.18672180 239.64978027]
[137.09669495 224.09848022]
[132.29264832 209.88859558]
[120.88673401 200.30973816]
[123.79670715 184.75843811]
[118.99265289 170.54855347]
[105.56993866 164.19509888]
[100.49552917 149.85267639]
[107.25061798 135.81678772]
[102.44657135 121.60688782]
[97.64252472 107.39698792]
[92.11148071 110.30230713]
[84.71116638 109.85094452]
[77.20290375 105.27597046]
[71.58567810 96.64533234]
[61.46093750 85.57783508]
[51.33618927 74.51033020]
[41.21144485 63.44283295]
[31.08670044 52.37533569]
[20.96195602 41.30783463]
[5.16412926 40.85593796]
[-5.62618732 29.30844307]
[-5.00729036 13.51627636]
[6.65364027 2.84865022]
[22.43838120 3.63447738]
[32.98212433 15.40754032]
[32.02945709 31.18309021]
[42.15420151 42.25059128]
[52.27894592 53.31808853]
[62.40369034 64.38558960]
[72.52843475 75.45308685]
[82.65318298 86.52058411]
[97.28413391 83.21373749]
[101.66498566 68.86772156]
[106.04583740 54.52170944]
[110.42668915 40.17569351]
[114.80754089 25.82967949]
[106.13524628 12.81717300]
[107.90753174 -2.71965432]
[119.28757477 -13.44478893]
[134.90206909 -14.29415035]
[147.37834167 -4.86669588]
[150.82545471 10.38621902]
[143.61579895 24.26263428]
[129.15354919 30.21053123]
[124.77270508 44.55654526]
[120.39185333 58.90256119]
[116.01100159 73.24857330]
[111.63014984 87.59458923]
[111.85242462 102.59294128]
[116.65647125 116.80284119]
[121.46051788 131.01272583]
[135.34681702 138.07023621]
[140.01638794 152.54953003]
[133.20254517 165.74450684]
[138.00659180 179.95439148]
[149.75613403 190.54963684]
[146.50253296 205.08454895]
[151.30659485 219.29443359]
[163.05612183 229.88967896]
[159.80252075 244.42459106]
[164.60658264 258.63449097]
[169.41062927 272.84439087]
[174.21467590 287.05426025]
[179.01872253 301.26416016]
[183.82276917 315.47406006]
[188.62681580 329.68395996]
[193.43086243 343.89385986]
[198.23490906 358.10375977]
[213.18843079 356.34704590]
[228.18037415 357.73812866]
[242.55537415 362.21618652]
[255.68501282 369.58547974]
[266.99533081 379.52380371]
[275.99185181 391.59677124]
[282.28131104 405.27655029]
[285.58877563 419.96511841]
[285.76962280 435.02038574]
[282.81597900 449.78417969]
[276.85696411 463.61111450]
[268.15304565 475.89669800]
[257.08474731 486.10388184]
[244.13592529 493.78643799]
[229.87265015 498.60852051]
[214.91844177 500.35934448]
[199.92704773 498.96237183]
[185.55380249 494.47863770]
[172.42707825 487.10421753]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 86]
[10 85]
[11 84]
[12 83]
[13 82]
[14 81]
[15 80]
[16 79]
[17 78]
[19 76]
[20 75]
[22 73]
[23 72]
[26 69]
[27 68]
[28 67]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
