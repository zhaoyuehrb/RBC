%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:51:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGGCGGGCGGGGGGCGGCGGCGCCAGCGGACACCGGAGCGGGCAGGAGCAGCGGCCGCGGCGCCGCAGGGACCAGCGGGCCCAGGCUCGGUCUGGGGUUCUUGCAGCUGGCACCAGCCCUCCCGGCCCCGGCCGCCCACCCGCCGCGGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[94.05941010 404.53826904]
[96.29232025 389.06091309]
[107.98585510 378.67846680]
[107.39325714 363.69018555]
[106.80065918 348.70190430]
[106.20806122 333.71362305]
[105.46741486 318.73190308]
[104.57881165 303.75823975]
[103.69020081 288.78460693]
[102.80158997 273.81094360]
[101.91297913 258.83728027]
[101.02436829 243.86363220]
[92.54668427 231.61706543]
[99.45286560 217.38276672]
[98.56426239 202.40911865]
[97.67565155 187.43545532]
[89.19796753 175.18890381]
[96.10414886 160.95460510]
[95.21553802 145.98094177]
[94.32692719 131.00729370]
[75.52242279 119.86162567]
[68.48908234 99.16458130]
[54.01954651 95.21077728]
[39.55001450 91.25696564]
[25.08048058 87.30316162]
[10.61094761 83.34934998]
[-3.85858655 79.39554596]
[-18.32812119 75.44173431]
[-32.79765320 71.48793030]
[-41.95544815 72.24356842]
[-47.51252747 67.31043243]
[-61.90111923 63.07151794]
[-76.28971100 58.83260345]
[-90.67830658 54.59369278]
[-95.85412598 55.85205841]
[-100.51479340 55.04519272]
[-103.95035553 52.72671127]
[-105.77991486 49.65387344]
[-119.89212036 44.57001495]
[-134.00433350 39.48615646]
[-148.17094421 45.96262360]
[-162.41030884 40.60583496]
[-168.49732971 27.06021500]
[-182.60952759 21.97635841]
[-195.36897278 30.80677795]
[-210.88116455 30.41726875]
[-223.18133545 20.95760727]
[-227.53984070 6.06522417]
[-222.28073120 -8.53345490]
[-209.42625427 -17.22493935]
[-193.91920471 -16.66717720]
[-181.72236633 -7.07463789]
[-177.52568054 7.86415052]
[-163.41346741 12.94800758]
[-150.08645630 6.39620304]
[-135.70223999 11.35092354]
[-128.92047119 25.37395096]
[-114.80826569 30.45780754]
[-100.69605255 35.54166412]
[-86.43939209 40.20509720]
[-72.05080414 44.44401169]
[-57.66220856 48.68292236]
[-43.27361298 52.92183685]
[-28.84384727 57.01839447]
[-14.37431240 60.97220230]
[0.09522098 64.92601013]
[14.56475449 68.87982178]
[29.03428841 72.83362579]
[43.50382233 76.78743744]
[57.97335434 80.74124146]
[72.44288635 84.69504547]
[81.12091064 74.75686646]
[93.10636139 69.24104309]
[93.40272522 54.24396896]
[93.69908142 39.24689484]
[90.72749329 30.55172920]
[94.15235901 23.95724106]
[94.74495697 8.96895123]
[86.63810730 -5.28625488]
[95.16236115 -19.29586220]
[111.54870605 -18.64798737]
[118.94026947 -4.00910902]
[109.73325348 9.56155014]
[109.14064789 24.54984093]
[108.69615173 39.54325104]
[108.39979553 54.54032516]
[108.10343933 69.53739929]
[118.37667084 74.38879395]
[126.26274109 82.56714630]
[140.37495422 77.48329163]
[154.48715210 72.39943695]
[161.54568481 66.51612091]
[168.92871094 67.35755157]
[183.13859558 62.55350494]
[197.34849548 57.74945450]
[201.63098145 47.67818832]
[210.58235168 41.77302170]
[221.08578491 41.79874802]
[229.64144897 47.50359344]
[244.03002930 43.26467896]
[258.41864014 39.02576828]
[272.80722046 34.78685379]
[287.19583130 30.54794121]
[301.58441162 26.30902863]
[309.18499756 12.71238708]
[323.83746338 8.61849785]
[336.75296021 15.94829655]
[351.14154053 11.70938396]
[365.53015137 7.47047091]
[374.43783569 -5.87241983]
[390.43508911 -7.08364105]
[401.25021362 4.76595211]
[398.58673096 20.58636665]
[384.48788452 28.24153328]
[369.76904297 21.85906410]
[355.38046265 26.09797668]
[340.99185181 30.33688927]
[334.11309814 43.49812317]
[319.58139038 48.00195312]
[305.82333374 40.69762421]
[291.43472290 44.93653488]
[277.04614258 49.17544937]
[262.65753174 53.41436005]
[248.26895142 57.65327454]
[233.88035583 61.89218521]
[221.67318726 76.84795380]
[202.15254211 71.95935059]
[187.94265747 76.76339722]
[173.73275757 81.56744385]
[159.57101440 86.51164246]
[145.45880127 91.59549713]
[131.34660339 96.67935181]
[130.62846375 107.45204926]
[126.31720734 117.35051727]
[118.91859436 125.21353912]
[109.30058289 130.11868286]
[110.18919373 145.09233093]
[111.07780457 160.06599426]
[119.61904144 173.38356018]
[112.64930725 186.54684448]
[113.53791809 201.52050781]
[114.42652130 216.49415588]
[122.96776581 229.81173706]
[115.99802399 242.97502136]
[116.88663483 257.94866943]
[117.77524567 272.92233276]
[118.66385651 287.89599609]
[119.55246735 302.86962891]
[120.44107056 317.84329224]
[124.08987427 326.27670288]
[121.19635010 333.12100220]
[121.78894806 348.10931396]
[122.38154602 363.09759521]
[122.97414398 378.08587646]
[135.45088196 387.51269531]
[138.89878845 402.76544189]
[131.68983459 416.64221191]
[117.22789764 422.59085083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 154]
[4 153]
[5 152]
[6 151]
[7 149]
[8 148]
[9 147]
[10 146]
[11 145]
[12 144]
[14 142]
[15 141]
[16 140]
[18 138]
[19 137]
[20 136]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[31 63]
[32 62]
[33 61]
[34 60]
[38 59]
[39 58]
[40 57]
[43 54]
[44 53]
[73 87]
[74 86]
[75 85]
[77 84]
[78 83]
[89 132]
[90 131]
[91 130]
[93 129]
[94 128]
[95 127]
[99 125]
[100 124]
[101 123]
[102 122]
[103 121]
[104 120]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
