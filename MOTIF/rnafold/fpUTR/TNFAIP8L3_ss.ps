%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUGCUAGUCUUACCUCAAGUAAUGGGAAACGACCAGACCUCCUAAAGAGUCAGUGUGCAAGUUAGGGCUACUGUCCCAAGAAGGACACCUGAGUCCAA\
) } def
/len { sequence length } bind def

/coor [
[192.72134399 153.23960876]
[179.22131348 146.70133972]
[165.72126770 140.16308594]
[152.22123718 133.62481689]
[138.72119141 127.08654785]
[125.22115326 120.54827881]
[106.86966705 131.79852295]
[85.51062012 129.12724304]
[70.49507904 113.70393372]
[55.80061340 116.71604156]
[41.10615158 119.72814941]
[36.17687225 134.20742798]
[24.73750114 144.20930481]
[9.92613697 147.12304688]
[-4.26009989 142.26437378]
[-14.04373837 131.03289795]
[-28.73819923 134.04501343]
[-43.43266296 137.05711365]
[-58.12712479 140.06922913]
[-68.12684631 152.61454773]
[-84.16928864 152.47424316]
[-93.94805908 139.75593567]
[-89.96172333 124.21603394]
[-75.26825714 117.77540588]
[-61.13922882 125.37476349]
[-46.44476700 122.36265564]
[-31.75030708 119.35054779]
[-17.05584335 116.33843994]
[-12.48006630 102.16354370]
[-1.34946811 92.11537170]
[13.41376781 88.96683502]
[27.86566353 93.66146088]
[38.09404755 105.03368378]
[52.78850937 102.02157593]
[67.48297119 99.00947571]
[69.58403778 88.45844269]
[75.01136780 79.16957855]
[83.17141724 72.15871429]
[78.58055878 57.87851715]
[73.98970032 43.59832001]
[69.17731476 29.39124680]
[64.14456940 15.26073265]
[50.32682419 7.10907364]
[48.22758865 -8.79604435]
[59.45721817 -20.25357628]
[75.40129852 -18.47428322]
[83.82889557 -4.82308722]
[78.27507782 10.22798252]
[83.30783081 24.35849571]
[88.61077118 29.69744301]
[88.26989746 39.00746155]
[92.86075592 53.28765869]
[97.45161438 67.56785583]
[107.50688171 68.34585571]
[116.84069061 72.16603851]
[124.55598450 78.66125488]
[129.91128540 87.20728302]
[132.39189148 96.98277283]
[131.75941467 107.04824066]
[145.25946045 113.58650970]
[158.75949097 120.12477112]
[172.25953674 126.66304016]
[185.75958252 133.20130920]
[199.25961304 139.73957825]
[215.57908630 133.68002319]
[230.96830750 141.07260132]
[236.22700500 156.96240234]
[249.92384338 163.07765198]
[263.62069702 169.19290161]
[277.31753540 175.30816650]
[291.01440430 181.42341614]
[308.26202393 173.93185425]
[325.29193115 181.13308716]
[331.71008301 198.13754272]
[345.76062012 203.38943481]
[359.81115723 208.64134216]
[373.86169434 213.89323425]
[387.91223145 219.14512634]
[402.18719482 212.36271667]
[417.04879761 217.73939514]
[423.67990112 232.08526611]
[418.14639282 246.88919067]
[403.73123169 253.36824036]
[388.98663330 247.67854309]
[382.66033936 233.19566345]
[368.60980225 227.94377136]
[354.55926514 222.69187927]
[340.50872803 217.43997192]
[326.45819092 212.18807983]
[317.16751099 219.15892029]
[305.53497314 220.71420288]
[294.51437378 216.33967590]
[286.96258545 207.04209900]
[284.89913940 195.12026978]
[271.20230103 189.00500488]
[257.50543213 182.88975525]
[243.80859375 176.77450562]
[230.11174011 170.65924072]
[218.73864746 176.93096924]
[205.64097595 175.42965698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[9 35]
[10 34]
[11 33]
[16 28]
[17 27]
[18 26]
[19 25]
[38 53]
[39 52]
[40 51]
[41 49]
[42 48]
[67 98]
[68 97]
[69 96]
[70 95]
[71 94]
[74 89]
[75 88]
[76 87]
[77 86]
[78 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
