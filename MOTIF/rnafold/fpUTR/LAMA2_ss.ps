%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCAGCAGCUGCUGCUCGCUCAGCUCACAAGCCAAGGCCAGGGGACAGGGCGGCAGCGACUCCUCUGGCUCCCGAGAAGUGGAUCCGGUCGCGGCCACUACG\
) } def
/len { sequence length } bind def

/coor [
[115.35278320 162.97259521]
[101.13383484 158.19540405]
[95.00848389 144.50306702]
[100.92301941 130.71942139]
[103.63305664 115.96627045]
[96.16268158 116.63224030]
[86.71136475 128.28009033]
[77.26004791 139.92794800]
[67.80872345 151.57580566]
[65.76307678 167.84686279]
[50.54616165 173.96057129]
[37.81183243 163.62767029]
[40.66007996 147.47776794]
[56.16086960 142.12449646]
[65.61219025 130.47663879]
[75.06350708 118.82878113]
[84.51482391 107.18092346]
[87.60449982 92.50257111]
[83.65069580 78.03303528]
[79.69688416 63.56350327]
[75.74308014 49.09397125]
[65.75401306 47.61183548]
[56.78317642 43.09961319]
[49.71828461 36.04358673]
[45.24591064 27.17968559]
[43.78486252 17.41683197]
[29.20451736 13.89354229]
[14.62417412 10.37025166]
[-0.94506443 15.52106190]
[-13.00877285 4.41255236]
[-9.15684128 -11.52779484]
[6.64819193 -15.90191650]
[18.14746475 -4.21009254]
[32.72780991 -0.68680161]
[47.30815125 2.83648896]
[51.83545303 -3.65208387]
[57.85703278 -8.78419971]
[64.98110962 -12.22594547]
[72.74415588 -13.75338936]
[75.39750671 -28.51684761]
[78.05086517 -43.28030777]
[80.70421600 -58.04376602]
[83.35757446 -72.80722809]
[86.01092529 -87.57068634]
[88.66428375 -102.33414459]
[91.31763458 -117.09760284]
[93.97098541 -131.86105347]
[96.62434387 -146.62451172]
[86.31169891 -155.90643311]
[82.00631714 -168.98167419]
[84.74314880 -182.36169434]
[93.69319916 -192.53283691]
[106.41053009 -196.87904358]
[109.50020599 -211.55738831]
[103.89028931 -226.96716309]
[114.63643646 -239.35475159]
[130.68392944 -235.97688293]
[135.52449036 -220.30841064]
[124.17855835 -208.46771240]
[121.08887482 -193.78936768]
[132.45498657 -182.04804993]
[134.66275024 -165.68962097]
[126.65728760 -151.06550598]
[111.38780212 -143.97116089]
[108.73445129 -129.20770264]
[106.08109283 -114.44424438]
[103.42774200 -99.68078613]
[100.77438354 -84.91732788]
[98.12103271 -70.15386963]
[95.46767426 -55.39041138]
[92.81432343 -40.62695312]
[90.16097260 -25.86349487]
[87.50761414 -11.10003567]
[103.51943207 4.70672846]
[104.72734833 27.38925362]
[90.21261597 45.14016342]
[94.16641998 59.60969925]
[98.12022400 74.07923126]
[102.07403564 88.54876709]
[118.79645538 85.42647552]
[135.83650208 102.60569000]
[147.19917297 112.39802551]
[158.56184387 122.19035339]
[169.92451477 131.98268127]
[181.28718567 141.77502441]
[187.95555115 143.44467163]
[192.05662537 147.66932678]
[193.01062012 152.49981689]
[203.77322388 162.94808960]
[214.53582764 173.39634705]
[230.56097412 176.87872314]
[235.29933167 192.57839966]
[223.87648010 204.34490967]
[208.04328918 200.07386780]
[204.08757019 184.15896606]
[193.32495117 173.71069336]
[182.56234741 163.26243591]
[171.49484253 153.13768005]
[160.13218689 143.34535217]
[148.76951599 133.55302429]
[137.40684509 123.76068878]
[126.04417419 113.96836090]
[118.57379913 114.63433075]
[123.85078430 128.67546082]
[132.11042786 141.19657898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 17]
[7 16]
[8 15]
[9 14]
[18 79]
[19 78]
[20 77]
[21 76]
[26 35]
[27 34]
[28 33]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[53 60]
[54 59]
[81 102]
[82 101]
[83 100]
[84 99]
[85 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
