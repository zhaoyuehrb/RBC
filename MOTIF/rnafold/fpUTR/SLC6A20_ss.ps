%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGCGGAGGCGCGGGGCCACCCCCAAGCCGAGCCGGGGUGGGACGGCGCGCCUGGCGACCGCGCACUGAGACUGCCGUGCCGGACCCCCGAGCCGGAGCCGAGCGCGCCGAGGCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[208.53576660 176.93409729]
[196.07682800 168.58096313]
[183.61788940 160.22782898]
[171.15895081 151.87469482]
[158.49403381 143.83729553]
[145.63113403 136.12069702]
[132.76823425 128.40409851]
[119.90533447 120.68750763]
[107.04243469 112.97091675]
[92.77658844 108.33566284]
[77.83457947 107.01789093]
[62.89257812 105.70012665]
[47.95057297 104.38235474]
[33.00857162 103.06459045]
[18.06656647 101.74681854]
[3.12456203 100.42905426]
[-8.26730633 114.41485596]
[-25.60153389 118.80870056]
[-41.99192810 112.05675507]
[-51.04114151 96.99533081]
[-66.03048706 96.42997742]
[-81.01982880 95.86462402]
[-96.00917053 95.29927063]
[-110.99851227 94.73391724]
[-125.98785400 94.16856384]
[-140.97718811 93.60321045]
[-148.61801147 101.54111481]
[-159.16436768 103.85317993]
[-169.01351929 100.00055695]
[-174.93885803 91.50860596]
[-189.88085938 90.19083405]
[-206.18992615 94.82231140]
[-215.15521240 80.43272400]
[-203.80979919 67.83438110]
[-188.56309509 75.24883270]
[-173.62109375 76.56659698]
[-156.85049438 67.07505798]
[-140.41183472 78.61386871]
[-125.42250061 79.17922211]
[-110.43315887 79.74457550]
[-95.44381714 80.30992889]
[-80.45447540 80.87528229]
[-65.46513367 81.44063568]
[-50.47578812 82.00598907]
[-44.39673996 71.35328674]
[-34.28033829 64.29074097]
[-22.04199219 62.23140717]
[-10.03161144 65.63378143]
[-0.58241099 73.90155029]
[4.44232988 85.48705292]
[19.38433456 86.80481720]
[34.32633972 88.12258911]
[49.26834106 89.44035339]
[64.21035004 90.75812531]
[79.15235138 92.07588959]
[94.09435272 93.39365387]
[90.77729797 87.30217743]
[88.67266083 80.52888489]
[88.67266083 65.52888489]
[88.67266083 50.52888107]
[80.00895691 36.60507965]
[87.97309113 22.26964378]
[104.37223816 22.26964378]
[112.33636475 36.60507965]
[103.67266083 50.52888107]
[103.67266083 65.52888489]
[103.67266083 80.52888489]
[108.40140533 66.29375458]
[120.85443878 57.93180847]
[135.82035828 58.94238663]
[147.03616333 68.90258026]
[149.80824280 83.64421082]
[142.97651672 96.99813843]
[129.39994812 103.37596893]
[114.75902557 100.10801697]
[127.62192535 107.82460785]
[140.48483276 115.54120636]
[153.34773254 123.25779724]
[166.21063232 130.97439575]
[172.98519897 131.47962952]
[177.71366882 134.88108826]
[179.51208496 139.41575623]
[191.97102356 147.76889038]
[204.42996216 156.12202454]
[216.88890076 164.47515869]
[231.39463806 159.28961182]
[246.00161743 163.58956909]
[255.16734314 175.52494812]
[255.54299927 190.39091492]
[268.00192261 198.74404907]
[280.46087646 207.09718323]
[292.91979980 215.45031738]
[305.37875366 223.80345154]
[314.35791016 226.02200317]
[318.04220581 232.52633667]
[330.28729248 241.18992615]
[342.53237915 249.85351562]
[354.99130249 258.20666504]
[367.65621948 266.24404907]
[383.45394897 267.10574341]
[390.05410767 280.45816040]
[402.71902466 288.49557495]
[418.62634277 286.41320801]
[430.07196045 297.65499878]
[428.27575684 313.59716797]
[414.61563110 322.01028442]
[399.57046509 316.44049072]
[394.68161011 301.16049194]
[382.01669312 293.12307739]
[367.12484741 292.83630371]
[359.61883545 278.90896606]
[346.95391846 270.87158203]
[342.07901001 271.05264282]
[337.06072998 268.09539795]
[333.86877441 262.09860229]
[321.62368774 253.43501282]
[309.37860107 244.77142334]
[297.02560425 236.26239014]
[284.56668091 227.90925598]
[272.10772705 219.55612183]
[259.64880371 211.20298767]
[247.18986511 202.84985352]
[233.29502869 208.14813232]
[218.77293396 204.20193481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 56]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[30 36]
[31 35]
[58 67]
[59 66]
[60 65]
[89 122]
[90 121]
[91 120]
[92 119]
[93 118]
[95 117]
[96 116]
[97 115]
[98 112]
[99 111]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
