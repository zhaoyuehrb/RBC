%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGAGUCACGUGGGCGAGUCGUAGCUUUAGACAAGCGGCCAGCCUUGACACGUGACCCAAGCCCCAGCUUCGCGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[86.17496490 132.89779663]
[73.32540131 123.70363617]
[65.70528412 109.86248016]
[64.80848694 94.08782959]
[70.81083679 79.47223663]
[60.62882614 68.45739746]
[50.44681168 57.44256210]
[40.26480103 46.42772293]
[30.08279037 35.41288757]
[19.90077972 24.39804840]
[9.71876812 13.38321209]
[-0.46324271 2.36837411]
[-11.47808075 -7.81363726]
[-23.25783348 -17.10004616]
[-35.03759003 -26.38645554]
[-50.52537155 -24.72322845]
[-62.33942795 -34.30877686]
[-63.82961655 -49.08425903]
[-75.60936737 -58.37067032]
[-87.38912201 -67.65708160]
[-99.16887665 -76.94348907]
[-110.94863129 -86.22989655]
[-124.64016724 -79.48418427]
[-139.90274048 -79.35562897]
[-153.70596313 -85.86975098]
[-163.30918884 -97.73316956]
[-166.80569458 -112.59040070]
[-163.50125122 -127.49151611]
[-154.05194092 -139.47790527]
[-140.33395386 -146.16964722]
[-125.07099152 -146.23809814]
[-111.29352570 -139.66966248]
[-101.73709106 -127.76852417]
[-98.29911804 -112.89764404]
[-101.66222382 -98.00965118]
[-89.88246918 -88.72324371]
[-78.10271454 -79.43682861]
[-66.32295990 -70.15042114]
[-54.54320526 -60.86401367]
[-39.82809448 -62.86426926]
[-27.74945831 -53.61433792]
[-25.75117874 -38.16621017]
[-13.97142506 -28.87980080]
[-2.19167113 -19.59339142]
[0.84626132 -19.98015213]
[4.23366737 -19.01909637]
[7.38782740 -16.56511307]
[9.68400764 -12.71491623]
[10.55159473 -7.81363726]
[20.73360634 3.20120049]
[30.91561699 14.21603775]
[41.09762955 25.23087502]
[51.27964020 36.24571228]
[61.46165085 47.26055145]
[71.64366150 58.27538681]
[81.82567596 69.29022980]
[95.00394440 64.66678619]
[108.94744873 65.45525360]
[121.52050018 71.53485107]
[130.79730225 81.97438812]
[135.35696411 95.17486572]
[134.50106812 109.11439514]
[128.36074829 121.65789795]
[138.10246277 133.06398010]
[147.84419250 144.47007751]
[162.69017029 149.93884277]
[165.07238770 164.64170837]
[174.81410217 176.04779053]
[190.63052368 178.73489380]
[198.26461792 192.84516907]
[191.86016846 207.55444336]
[176.33012390 211.57901001]
[163.58779907 201.83155823]
[163.40802002 185.78952026]
[153.66629028 174.38342285]
[139.51710510 169.73049927]
[136.43809509 154.21179199]
[126.69637299 142.80570984]
[116.95465851 131.39961243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 44]
[14 43]
[15 42]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[63 79]
[64 78]
[65 77]
[67 75]
[68 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
