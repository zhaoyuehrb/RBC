%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAACCGGAAGGGGGGCUGUGAGGACGUGUUCCGAGGAAGCCAGAGCCGGAGCCGUGGCCUGCGGGGCCGGCGAC\
) } def
/len { sequence length } bind def

/coor [
[135.05131531 115.69310760]
[120.42739105 112.35529327]
[109.32334900 121.97741699]
[94.68770599 123.27468872]
[82.06430817 115.75572205]
[76.23479462 102.26862335]
[61.61087418 98.93080902]
[52.69981003 107.29901123]
[40.94126892 110.16436005]
[29.41360664 106.90003967]
[21.07432556 98.46807861]
[18.00137329 87.13992310]
[3.69817758 82.62123108]
[-10.60501862 78.10253906]
[-24.90821457 73.58383942]
[-40.39815140 76.80446625]
[-50.20336151 65.59255219]
[-64.50656128 61.07386017]
[-73.92431641 61.45490646]
[-79.29425049 56.06812668]
[-93.40122986 50.96978760]
[-109.44078827 54.38515091]
[-120.21585083 42.02270126]
[-114.64195251 26.59986877]
[-98.45304871 23.98234177]
[-88.30289459 36.86280441]
[-74.19591522 41.96114731]
[-59.98786545 46.77066422]
[-45.68466949 51.28935623]
[-31.21779442 47.74552155]
[-20.38952065 59.28064728]
[-6.08632565 63.79933929]
[8.21687031 68.31803131]
[22.52006721 72.83672333]
[37.94502258 63.37783432]
[55.76106262 67.99964142]
[64.94869232 84.30689240]
[79.57260895 87.64470673]
[90.67665100 78.02258301]
[105.31229401 76.72531128]
[117.93569183 84.24427795]
[123.76520538 97.73137665]
[138.38912964 101.06919098]
[150.83428955 89.81686401]
[167.36007690 88.11199951]
[181.55656433 96.42057800]
[188.03254700 111.36225128]
[202.78044128 114.10079956]
[217.52833557 116.83934784]
[232.27622986 119.57789612]
[247.02412415 122.31644440]
[259.95913696 113.63757324]
[274.87658691 116.62493896]
[283.07086182 129.00999451]
[297.81875610 131.74853516]
[312.56665039 134.48709106]
[327.31454468 137.22563171]
[341.29992676 129.36505127]
[356.11053467 135.53155518]
[360.38491821 150.99470520]
[350.84414673 163.89251709]
[334.80709839 164.33087158]
[324.57598877 151.97352600]
[309.82809448 149.23498535]
[295.08020020 146.49642944]
[280.33230591 143.75788879]
[268.23803711 152.37554932]
[253.24256897 149.80836487]
[244.28556824 137.06433105]
[229.53767395 134.32579041]
[214.78977966 131.58724976]
[200.04188538 128.84869385]
[185.29399109 126.11014557]
[176.37371826 136.25155640]
[163.48063660 140.62756348]
[150.01600647 137.96875000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[6 38]
[7 37]
[12 34]
[13 33]
[14 32]
[15 31]
[17 29]
[18 28]
[20 27]
[21 26]
[47 73]
[48 72]
[49 71]
[50 70]
[51 69]
[54 66]
[55 65]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
