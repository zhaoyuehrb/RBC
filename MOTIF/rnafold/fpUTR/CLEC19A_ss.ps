%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACCCAAGCUCCAGCCAAAAAGCCUCUCUCCUCCACUCAGGCUGGGAGGUUGCUUUCUAGGAGCUCAGG\
) } def
/len { sequence length } bind def

/coor [
[85.56400299 260.39709473]
[72.98604584 249.02909851]
[80.42784882 233.79573059]
[81.77243805 218.85610962]
[72.05944061 207.62254333]
[73.21022034 192.45248413]
[85.05888367 182.34075928]
[86.40347290 167.40115356]
[87.74806213 152.46153259]
[89.09265137 137.52192688]
[90.43724060 122.58230591]
[91.78182983 107.64269257]
[92.79086304 92.67666626]
[93.46383667 77.69177246]
[80.62892914 71.37553406]
[71.24599457 60.63585281]
[66.73760223 47.15219498]
[67.76750946 33.01599884]
[74.14318848 20.40625763]
[84.85069275 11.25366020]
[98.21578979 6.94499588]
[99.56037903 -7.99461889]
[100.90496826 -22.93423271]
[102.24955750 -37.87384796]
[103.59414673 -52.81346130]
[104.93873596 -67.75307465]
[106.28332520 -82.69268799]
[107.62791443 -97.63230896]
[99.44534302 -113.95645905]
[109.71708679 -128.00962830]
[110.39006042 -142.99452209]
[111.06303406 -157.97941589]
[100.21669006 -169.47430420]
[100.75878143 -185.26930237]
[112.36769867 -195.99349976]
[128.15606689 -195.28443909]
[138.75694275 -183.56278992]
[137.88099670 -167.78280640]
[126.04792786 -157.30644226]
[125.37495422 -142.32154846]
[124.70198059 -127.33665466]
[132.71850586 -118.00674438]
[132.07446289 -105.31694794]
[122.56752777 -96.28771210]
[121.22293854 -81.34809875]
[119.87834930 -66.40848541]
[118.53376007 -51.46887207]
[117.18917084 -36.52925873]
[115.84458160 -21.58964348]
[114.49999237 -6.65002918]
[113.15540314 8.28958511]
[126.91712189 16.10739136]
[135.98875427 29.14702415]
[138.55207825 44.88188934]
[134.05586243 60.23693085]
[123.33341980 72.18958282]
[108.44873047 78.36474609]
[107.77576447 93.34963989]
[110.66176605 101.18351746]
[106.72144318 108.98728180]
[105.37685394 123.92689514]
[104.03226471 138.86651611]
[102.68767548 153.80612183]
[101.34308624 168.74574280]
[99.99849701 183.68534851]
[109.85122681 195.75024414]
[108.27480316 210.88197327]
[96.71205902 220.20069885]
[95.36746979 235.14031982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 69]
[4 68]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 58]
[14 57]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[30 41]
[31 40]
[32 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
