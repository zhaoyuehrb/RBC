%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:53 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (MMAB)
} def

/sequence { (\
AGCUGUGGGUGGAGUCACCCCGCGGACUGGACGGGAACCUGGCGGGGUCAGGUCCCGUCAAGCAGCCUGGCUC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 28 0.633439307 ubox
1 68 0.019844852 ubox
1 72 0.361875604 ubox
2 23 0.265787271 ubox
2 27 0.672216329 ubox
2 63 0.028069025 ubox
2 66 0.080742306 ubox
2 67 0.017471834 ubox
2 71 0.415930941 ubox
3 22 0.262448262 ubox
3 25 0.833342508 ubox
3 62 0.025791650 ubox
3 65 0.081458176 ubox
3 70 0.415841097 ubox
4 22 0.101590905 ubox
4 24 0.834565115 ubox
4 61 0.023756883 ubox
4 64 0.081001845 ubox
4 69 0.389126172 ubox
5 18 0.004796962 ubox
5 21 0.290251798 ubox
5 23 0.924821316 ubox
5 63 0.079352370 ubox
5 66 0.004727190 ubox
5 68 0.078837407 ubox
5 71 0.008461259 ubox
6 17 0.004818414 ubox
6 22 0.922550051 ubox
6 62 0.067699263 ubox
6 65 0.004413815 ubox
6 70 0.008188373 ubox
7 16 0.004826554 ubox
7 20 0.596235519 ubox
7 21 0.801730342 ubox
7 67 0.019859277 ubox
7 68 0.003852703 ubox
8 15 0.004515032 ubox
8 19 0.752340123 ubox
8 20 0.658210075 ubox
8 21 0.008560160 ubox
8 66 0.019741153 ubox
8 67 0.004075071 ubox
9 18 0.880647418 ubox
9 19 0.472366339 ubox
9 20 0.010585298 ubox
9 23 0.011929001 ubox
9 66 0.004030703 ubox
10 17 0.992049741 ubox
10 22 0.011936429 ubox
10 64 0.018706098 ubox
10 65 0.003426348 ubox
11 16 0.990104381 ubox
11 19 0.023571754 ubox
11 21 0.011947464 ubox
11 63 0.018722648 ubox
12 18 0.031527742 ubox
12 20 0.011901102 ubox
12 73 0.003604344 ubox
13 28 0.018355568 ubox
13 72 0.003660356 ubox
14 27 0.018876877 ubox
14 71 0.003668131 ubox
15 26 0.018869342 ubox
15 70 0.003626929 ubox
16 25 0.018746541 ubox
16 69 0.003618925 ubox
17 68 0.003536086 ubox
18 25 0.003234525 ubox
19 24 0.003527344 ubox
20 70 0.020342380 ubox
21 29 0.019803934 ubox
21 69 0.045830687 ubox
22 28 0.016170849 ubox
22 63 0.013935458 ubox
22 66 0.064948791 ubox
22 68 0.047645368 ubox
22 71 0.118683273 ubox
23 29 0.017736964 ubox
23 62 0.013985024 ubox
23 65 0.065077964 ubox
23 69 0.115614076 ubox
23 70 0.109136923 ubox
24 28 0.011074631 ubox
24 67 0.511876439 ubox
24 68 0.137727294 ubox
25 66 0.512705340 ubox
25 67 0.141635384 ubox
26 72 0.003177939 ubox
27 62 0.283532720 ubox
27 65 0.541647532 ubox
27 70 0.007294612 ubox
28 60 0.086888358 ubox
28 61 0.265912195 ubox
28 64 0.541787461 ubox
28 69 0.007053395 ubox
29 59 0.080980442 ubox
29 63 0.541299683 ubox
29 67 0.006559322 ubox
29 68 0.006067185 ubox
29 72 0.004065081 ubox
29 73 0.012323138 ubox
30 58 0.042455658 ubox
30 59 0.994540271 ubox
30 66 0.005342193 ubox
30 67 0.003779755 ubox
30 71 0.003842771 ubox
31 58 0.998673781 ubox
32 57 0.999929336 ubox
32 69 0.005103509 ubox
33 56 0.999960660 ubox
33 68 0.005210600 ubox
34 55 0.999973148 ubox
34 67 0.005217176 ubox
35 54 0.999882155 ubox
35 55 0.003831124 ubox
35 66 0.005215062 ubox
36 53 0.705966379 ubox
37 48 0.005518441 ubox
37 53 0.705907846 ubox
38 47 0.005564373 ubox
38 52 0.999838458 ubox
39 46 0.005563715 ubox
39 51 0.999958008 ubox
39 62 0.004213424 ubox
40 45 0.005458319 ubox
40 50 0.999723694 ubox
40 60 0.004189629 ubox
41 49 0.999892825 ubox
41 59 0.005207196 ubox
42 48 0.996418021 ubox
42 58 0.005226057 ubox
43 47 0.990575999 ubox
43 57 0.005228291 ubox
44 56 0.005222607 ubox
45 55 0.005216956 ubox
46 54 0.005209075 ubox
47 53 0.004262625 ubox
57 71 0.003869647 ubox
58 70 0.003975250 ubox
59 69 0.004711330 ubox
60 68 0.005093508 ubox
61 68 0.030241804 ubox
61 72 0.689166023 ubox
62 67 0.030754400 ubox
62 71 0.730205631 ubox
63 69 0.063739898 ubox
63 70 0.728185011 ubox
64 68 0.064901802 ubox
64 72 0.276338690 ubox
65 71 0.295520024 ubox
66 70 0.293499225 ubox
1 28 0.9500000 lbox
2 27 0.9500000 lbox
3 25 0.9500000 lbox
4 24 0.9500000 lbox
5 23 0.9500000 lbox
6 22 0.9500000 lbox
7 21 0.9500000 lbox
8 20 0.9500000 lbox
9 19 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
30 59 0.9500000 lbox
31 58 0.9500000 lbox
32 57 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
35 54 0.9500000 lbox
36 53 0.9500000 lbox
38 52 0.9500000 lbox
39 51 0.9500000 lbox
40 50 0.9500000 lbox
41 49 0.9500000 lbox
42 48 0.9500000 lbox
43 47 0.9500000 lbox
61 72 0.9500000 lbox
62 71 0.9500000 lbox
63 70 0.9500000 lbox
showpage
end
%%EOF
