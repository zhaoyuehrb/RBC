%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:12:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGGCUCCCGCAGAGCCCACAGGGACCUGCAGAUCUGAGUGCCCUGCCCACCCCCGCCCGCCUUCCUUCCCCCACCACGCCUGGGAGGGCCCUCACUGGGGAGGUGGCCGAGAGCGGGUCUGGCCUGGGGUGUUCAGAUGCUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[76.47679138 181.97810364]
[75.56044769 166.64656067]
[82.44699097 152.91809082]
[95.28396606 144.48554993]
[94.34210968 129.51515198]
[93.40024567 114.54474640]
[86.51708984 111.56613922]
[80.55966187 125.33236694]
[66.79352570 119.37472534]
[72.75077057 105.60892487]
[65.86760712 102.63031006]
[54.30991364 112.19167328]
[42.75221252 121.75302887]
[31.19451523 131.31439209]
[29.56074333 146.80531311]
[17.70338821 156.33724976]
[2.94523406 154.68423462]
[-8.61246490 164.24559021]
[-20.17016220 173.80694580]
[-28.52034187 188.56198120]
[-45.01029587 184.62272644]
[-45.78986740 167.68670654]
[-29.73152351 162.24925232]
[-18.17382431 152.68789673]
[-6.61612558 143.12652588]
[-5.47445965 128.32003784]
[6.11048508 118.45881653]
[21.63315392 119.75669098]
[33.19085312 110.19533539]
[44.74855042 100.63397217]
[56.30625153 91.07261658]
[73.11550903 81.68514252]
[88.84893799 82.84124756]
[98.49819946 91.73783112]
[105.72450256 78.59323120]
[112.95080566 65.44863129]
[120.17711639 52.30403519]
[127.40341949 39.15943527]
[134.62973022 26.01483345]
[141.85603333 12.87023354]
[149.08233643 -0.27436656]
[156.30863953 -13.41896629]
[163.53494263 -26.56356621]
[170.76124573 -39.70816803]
[177.98754883 -52.85276794]
[185.21386719 -65.99736786]
[192.16329956 -79.29042053]
[198.83282471 -92.72609711]
[205.50234985 -106.16177368]
[198.21113586 -117.90319824]
[197.69505310 -131.60610962]
[203.98220825 -143.67031860]
[215.32737732 -150.97932434]
[228.69491577 -151.70521545]
[235.64436340 -164.99826050]
[242.59381104 -178.29132080]
[249.54324341 -191.58438110]
[256.49267578 -204.87742615]
[262.59371948 -218.58061218]
[267.82232666 -232.63984680]
[273.05090332 -246.69906616]
[278.27947998 -260.75830078]
[283.50805664 -274.81753540]
[288.73663330 -288.87677002]
[293.96520996 -302.93597412]
[299.19378662 -316.99520874]
[304.42239380 -331.05444336]
[309.65097046 -345.11367798]
[298.49023438 -364.57531738]
[305.08377075 -385.73620605]
[324.83609009 -395.18023682]
[328.26135254 -409.78390503]
[331.68661499 -424.38760376]
[323.62216187 -437.71435547]
[327.30389404 -452.47576904]
[340.05862427 -460.08184814]
[343.48388672 -474.68554688]
[346.90914917 -489.28921509]
[341.65386963 -504.82351685]
[352.68106079 -516.96154785]
[368.64694214 -513.21679688]
[373.12713623 -497.44152832]
[361.51281738 -485.86395264]
[358.08755493 -471.26028442]
[354.66229248 -456.65658569]
[362.70492554 -444.17251587]
[359.43923950 -429.31350708]
[346.29028320 -420.96231079]
[342.86502075 -406.35864258]
[339.43975830 -391.75494385]
[345.98760986 -386.80706787]
[350.78607178 -380.10714722]
[353.38391113 -372.25057983]
[353.52655029 -363.94293213]
[351.18090820 -355.93667603]
[346.54013062 -348.96298218]
[340.00793457 -343.66491699]
[332.16351318 -340.53826904]
[323.71020508 -339.88510132]
[318.48159790 -325.82586670]
[313.25302124 -311.76663208]
[308.02444458 -297.70739746]
[302.79586792 -283.64816284]
[297.56729126 -269.58895874]
[292.33871460 -255.52972412]
[287.11013794 -241.47048950]
[281.88153076 -227.41125488]
[276.65295410 -213.35203552]
[290.85421753 -218.18151855]
[304.39550781 -211.72909546]
[309.59033203 -197.65736389]
[303.48995972 -183.95388794]
[289.55712891 -178.39720154]
[275.70062256 -184.14146423]
[269.78573608 -197.92799377]
[262.83630371 -184.63493347]
[255.88685608 -171.34187317]
[248.93742371 -158.04882812]
[241.98797607 -144.75576782]
[249.75239563 -130.32676697]
[247.38642883 -113.94553375]
[235.62319946 -102.06764221]
[218.93803406 -99.49224854]
[212.26850891 -86.05657196]
[205.59898376 -72.62089539]
[206.27105713 -67.83161163]
[203.89498901 -62.57730103]
[198.35845947 -58.77106094]
[191.13215637 -45.62646103]
[183.90585327 -32.48186111]
[176.67955017 -19.33726120]
[169.45324707 -6.19266176]
[162.22692871 6.95193863]
[155.00062561 20.09653854]
[147.77432251 33.24113846]
[140.54801941 46.38573837]
[133.32171631 59.53033829]
[126.09540558 72.67494202]
[118.86910248 85.81954193]
[111.64279938 98.96414185]
[108.37065125 113.60289001]
[109.31250763 128.57328796]
[110.25436401 143.54368591]
[124.04699707 150.30082703]
[132.59986877 163.05795288]
[133.61230469 178.38343811]
[126.81195831 192.15481567]
[114.02809906 200.66766357]
[98.69951630 201.63204956]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 143]
[5 142]
[6 141]
[11 31]
[12 30]
[13 29]
[14 28]
[17 25]
[18 24]
[19 23]
[34 140]
[35 139]
[36 138]
[37 137]
[38 136]
[39 135]
[40 134]
[41 133]
[42 132]
[43 131]
[44 130]
[45 129]
[46 128]
[47 125]
[48 124]
[49 123]
[54 119]
[55 118]
[56 117]
[57 116]
[58 115]
[59 108]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[71 90]
[72 89]
[73 88]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
