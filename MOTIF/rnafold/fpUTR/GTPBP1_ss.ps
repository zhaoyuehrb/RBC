%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUUCUUAGCUAGAGGUACGUGUCACCCAGUACGCGGCUGGAGUUUUGCAUAAAUUAUUCCGAUAAGGAGCGGGGCGGGGCUCUGUGCAUAGAUUAGUCAAAUGAGCCUGGGAGGGAGGGAAGCCGGCUACGAAUUAGCCUAAGUUAUUAAAG\
) } def
/len { sequence length } bind def

/coor [
[211.43217468 298.36050415]
[225.18066406 304.35290527]
[217.11761475 291.70431519]
[209.05455017 279.05572510]
[200.99150085 266.40710449]
[192.92843628 253.75851440]
[184.86538696 241.10990906]
[176.80233765 228.46130371]
[162.24964905 225.50238037]
[153.89237976 212.78976440]
[157.09465027 197.54563904]
[149.03158569 184.89703369]
[130.98841858 182.06890869]
[120.51381683 166.72138977]
[124.59288025 148.26779175]
[116.02385712 135.95634460]
[107.45483398 123.64488983]
[98.88581085 111.33344269]
[94.47846985 116.59680939]
[87.78158569 120.18415833]
[74.05787659 126.23888397]
[60.33416367 132.29360962]
[46.61044693 138.34832764]
[32.88673401 144.40306091]
[29.74105072 159.59793091]
[18.24218178 170.01693726]
[2.81167650 171.65374756]
[-10.61711979 163.87898254]
[-16.88056183 149.68218994]
[-13.57022667 134.52232361]
[-1.95900738 124.22867584]
[13.48834610 122.75935364]
[26.83201027 130.67935181]
[40.55572510 124.62461853]
[54.27943802 118.56990051]
[68.00315094 112.51517487]
[81.72686005 106.46044922]
[86.07204437 92.10358429]
[78.00898743 79.45498657]
[69.81816101 66.88874054]
[61.50041580 54.40615082]
[53.18267059 41.92356110]
[44.86492157 29.44096947]
[36.54717255 16.95837975]
[28.22942543 4.47578859]
[19.91167831 -8.00680256]
[11.59393120 -20.48939323]
[3.27618361 -32.97198486]
[-5.04156399 -45.45457458]
[-13.35931206 -57.93716431]
[-24.47817421 -55.46638870]
[-35.79220200 -56.52405548]
[-46.21135330 -60.99179840]
[-54.73684692 -68.42350006]
[-60.55693054 -78.08980560]
[-63.12411880 -89.04963684]
[-62.20670319 -100.24186707]
[-57.90953064 -110.58801270]
[-50.66233444 -119.09616089]
[-57.94186401 -132.21134949]
[-65.22138977 -145.32655334]
[-72.50092316 -158.44175720]
[-87.46735382 -164.21977234]
[-92.14369965 -179.56614685]
[-82.94266510 -192.70846558]
[-66.92249298 -193.56506348]
[-56.37249756 -181.47882080]
[-59.38572311 -165.72128296]
[-52.10619354 -152.60607910]
[-44.82666397 -139.49089050]
[-37.54713440 -126.37568665]
[-18.73297691 -127.12793732]
[-2.03890800 -118.24529266]
[7.93385744 -102.08345032]
[8.39003563 -83.01688385]
[-0.87672073 -66.25491333]
[7.44102669 -53.77232361]
[15.75877476 -41.28973007]
[24.07652283 -28.80714035]
[32.39426804 -16.32455063]
[40.71201706 -3.84195924]
[49.02976608 8.64063168]
[57.34751129 21.12322235]
[65.66526031 33.60581207]
[73.98300934 46.08840561]
[82.30075836 58.57099533]
[88.66440582 62.41593933]
[90.65758514 71.39192963]
[98.72064209 84.04053497]
[95.97846985 69.29331207]
[98.04535675 54.43639755]
[104.70874786 40.99767685]
[115.28338623 30.35920143]
[128.68174744 23.61503601]
[143.52595520 21.45875740]
[158.28941345 24.11211586]
[171.45384216 31.30224037]
[181.66539001 42.28969193]
[187.87391663 55.94451523]
[189.44091797 70.86244202]
[186.20526123 85.50930023]
[178.49966431 98.37879944]
[167.11662292 108.14743042]
[153.22674561 113.81058502]
[138.25848389 114.78585052]
[123.75118256 110.97294617]
[111.19726562 102.76441956]
[119.76628876 115.07586670]
[128.33531189 127.38732147]
[136.90432739 139.69877625]
[148.86091614 139.48402405]
[159.31671143 145.03567505]
[165.70523071 154.85905457]
[166.52261353 166.42799377]
[161.68019104 176.83398438]
[169.74324036 189.48258972]
[184.91444397 193.01425171]
[192.91134644 205.95660400]
[189.45092773 220.39825439]
[197.51399231 233.04684448]
[205.57704163 245.69544983]
[213.64010620 258.34405518]
[221.70315552 270.99264526]
[229.76620483 283.64126587]
[237.82926941 296.28985596]
[247.04083252 301.25146484]
[249.72196960 310.14318848]
[261.00375366 320.02862549]
[272.28552246 329.91406250]
[283.56729126 339.79946899]
[294.84906006 349.68490601]
[310.88754272 350.06787109]
[320.47277832 362.93264771]
[316.25183105 378.41049194]
[301.46261597 384.62808228]
[287.45016479 376.81585693]
[284.96362305 360.96667480]
[273.68185425 351.08123779]
[262.40008545 341.19583130]
[251.11831665 331.31039429]
[239.83654785 321.42498779]
[243.67814636 335.92471313]
[242.18305969 350.85000610]
[235.54176331 364.29965210]
[224.60023499 374.56039429]
[210.75222778 380.32519531]
[195.76176453 380.85971069]
[181.53834534 376.09582520]
[169.89381409 366.64041138]
[162.31147766 353.69793701]
[159.75718689 338.91699219]
[162.55633545 324.18048096]
[170.35234070 311.36557007]
[182.15214539 302.10464478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 125]
[3 124]
[4 123]
[5 122]
[6 121]
[7 120]
[8 119]
[11 116]
[12 115]
[15 110]
[16 109]
[17 108]
[18 107]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[38 89]
[39 88]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[45 81]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[59 71]
[60 70]
[61 69]
[62 68]
[127 141]
[128 140]
[129 139]
[130 138]
[131 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
