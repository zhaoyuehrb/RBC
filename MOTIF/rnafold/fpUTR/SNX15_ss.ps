%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAAAAUCCCUAGGCCAGAGGAAGAAGAGCGCAGGCCUGGCGAGGCGGCGGCGGGCGGAGGCUGGGCCGGAGGGGUGGGGACGGCGAGGAGGUGGAGGCCGGCGCUCCGCUCCGCUCCAGCUCGGUUUC\
) } def
/len { sequence length } bind def

/coor [
[125.69857025 116.91428375]
[121.51931763 123.53179932]
[115.61749268 129.08189392]
[108.27524567 133.11402893]
[99.89249420 135.25453186]
[90.96548462 135.23725891]
[82.05741119 132.92816162]
[73.76296997 128.34169006]
[63.61071396 139.38395691]
[53.45845795 150.42622375]
[43.43933487 161.58943176]
[33.55478287 172.87196350]
[33.17304611 188.91047668]
[20.30900955 198.49671936]
[4.83085918 194.27694702]
[-1.38789129 179.48822021]
[6.42325068 165.47515869]
[22.27224541 162.98741150]
[32.15679550 151.70487976]
[34.21869659 144.52947998]
[42.41619110 140.27395630]
[52.56844711 129.23168945]
[62.72070312 118.18943024]
[62.09192657 110.71582794]
[47.88853836 115.53907776]
[33.68514633 120.36233521]
[21.16462708 128.62287903]
[6.25009918 127.02384949]
[-4.23471785 116.29684448]
[-5.49279594 101.34969330]
[3.05146241 89.02104187]
[17.48887634 84.95150757]
[31.21513748 91.00405884]
[46.02475357 93.38635254]
[60.83436966 95.76863861]
[60.20558929 88.29504395]
[48.35105896 79.10427856]
[36.49652863 69.91351318]
[24.64200020 60.72275162]
[12.78747082 51.53199005]
[-2.85961223 49.19118500]
[-8.17722034 35.27816010]
[-20.03174973 26.08739662]
[-35.67749786 28.32035828]
[-48.26934052 18.76938820]
[-50.33676147 3.10090661]
[-40.65319824 -9.38925362]
[-24.96373367 -11.29090309]
[-12.57665157 -1.47582567]
[-10.84098721 14.23286629]
[1.01354229 23.42362976]
[15.81270981 25.10704994]
[21.97823334 39.67745972]
[33.83276367 48.86822510]
[45.68729401 58.05898666]
[57.54182434 67.24974823]
[69.39635468 76.44051361]
[103.52037048 66.61388397]
[125.73136139 87.69837189]
[140.48937988 85.01496124]
[155.24740601 82.33155060]
[170.00543213 79.64813995]
[184.76345825 76.96472931]
[199.52148438 74.28131866]
[214.27951050 71.59791565]
[229.03753662 68.91450500]
[243.79556274 66.23109436]
[258.55358887 63.54768372]
[270.74697876 53.46643066]
[284.65310669 58.80208206]
[299.41113281 56.11867523]
[314.16915894 53.43526459]
[328.92718506 50.75185394]
[343.65197754 47.89168167]
[358.34140015 44.85515594]
[372.99337769 41.64271545]
[387.60577393 38.25481796]
[402.21817017 34.86692429]
[416.83056641 31.47902870]
[431.44296265 28.09113503]
[446.05535889 24.70323944]
[460.03207397 10.26836777]
[478.29144287 16.45133400]
[492.72460938 12.36674500]
[507.15777588 8.28215694]
[521.59094238 4.19756842]
[524.16766357 -10.84646988]
[533.02362061 -23.27768707]
[546.40039062 -30.62785530]
[561.64202881 -31.43759346]
[575.72222900 -25.54612732]
[585.84545898 -14.12321377]
[590.00170898 0.56312197]
[587.36572266 15.59689617]
[578.46093750 27.99314117]
[565.05529785 35.29057693]
[549.81060791 36.04028702]
[535.75366211 30.09342003]
[525.67553711 18.63072968]
[511.24234009 22.71531677]
[496.80920410 26.79990578]
[482.37603760 30.88449478]
[478.14877319 40.32037735]
[469.21020508 45.94379807]
[458.43283081 45.65848923]
[449.44326782 39.31563568]
[434.83087158 42.70353317]
[420.21844482 46.09142685]
[405.60604858 49.47932053]
[390.99365234 52.86721802]
[376.38125610 56.25511169]
[370.51766968 60.87635040]
[361.37792969 59.54459000]
[346.68847656 62.58111572]
[340.71575928 67.06041718]
[331.61059570 65.50988007]
[316.85256958 68.19329071]
[302.09454346 70.87670135]
[287.33651733 73.56011200]
[276.19869995 83.44942474]
[261.23699951 78.30570984]
[246.47897339 80.98912048]
[231.72094727 83.67253113]
[216.96292114 86.35593414]
[202.20489502 89.03934479]
[187.44686890 91.72275543]
[172.68884277 94.40616608]
[157.93081665 97.08957672]
[143.17279053 99.77298737]
[128.41476440 102.45639801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 23]
[9 22]
[10 21]
[11 19]
[12 18]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[42 51]
[43 50]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 121]
[70 119]
[71 118]
[72 117]
[73 116]
[74 114]
[75 113]
[76 111]
[77 110]
[78 109]
[79 108]
[80 107]
[81 106]
[83 102]
[84 101]
[85 100]
[86 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
