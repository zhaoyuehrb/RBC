%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:47:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCCGGGAGACUCUGCCGUCGGUGCGUGCGCGGACACGCACCCGUCCCCCUUGGUCUCGCCGCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[89.08835602 210.19093323]
[95.13469696 194.35179138]
[95.13469696 179.35179138]
[82.78971100 168.14787292]
[82.20143127 151.15348816]
[94.20355988 138.64129639]
[93.54006195 123.65597534]
[92.87655640 108.67065430]
[91.88171387 93.70368195]
[90.55601501 78.76238251]
[89.23030853 63.82107544]
[87.90460968 48.87977600]
[86.57891083 33.93847275]
[85.25320435 18.99716949]
[69.97546387 15.04097176]
[56.96547318 6.15478563]
[47.75387192 -6.59413576]
[43.41700745 -21.68539429]
[44.45120621 -37.32675934]
[50.71603012 -51.66699982]
[61.45305252 -63.01500320]
[75.37760162 -70.03917694]
[73.39229584 -84.90721893]
[71.40699005 -99.77525330]
[69.09325409 -114.59573364]
[66.45222473 -129.36140442]
[63.81119919 -144.12707520]
[61.17017365 -158.89274597]
[58.52914429 -173.65840149]
[55.88811493 -188.42407227]
[42.77813721 -197.25039673]
[39.83117294 -212.77749634]
[48.79560471 -225.79342651]
[64.35299683 -228.57606506]
[77.27342224 -219.47453308]
[79.89142609 -203.88858032]
[70.65378571 -191.06510925]
[73.29481506 -176.29943848]
[75.93584442 -161.53376770]
[78.57686615 -146.76809692]
[81.21789551 -132.00242615]
[83.85892487 -117.23676300]
[88.27819824 -111.01052856]
[86.27502441 -101.76055908]
[88.26033783 -86.89252472]
[90.24564362 -72.02448273]
[104.31097412 -69.35507202]
[116.86052704 -62.42048645]
[126.63515472 -51.90108109]
[132.64930725 -38.83763885]
[134.29042053 -24.52841949]
[131.38127136 -10.40014744]
[124.19898224 2.13425517]
[113.44873810 11.81696320]
[100.19451141 17.67146873]
[101.52021027 32.61277008]
[102.84591675 47.55407333]
[104.17161560 62.49537659]
[105.49731445 77.43667603]
[106.82302094 92.37798309]
[110.72283173 99.75278473]
[107.86187744 108.00715637]
[108.52537537 122.99246979]
[109.18888092 137.97779846]
[120.23816681 146.00958252]
[124.48261261 158.78649902]
[120.55189514 171.45774841]
[110.13469696 179.35179138]
[110.13469696 194.35179138]
[116.18103027 210.19093323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 69]
[3 68]
[6 64]
[7 63]
[8 62]
[9 60]
[10 59]
[11 58]
[12 57]
[13 56]
[14 55]
[22 46]
[23 45]
[24 44]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[30 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
