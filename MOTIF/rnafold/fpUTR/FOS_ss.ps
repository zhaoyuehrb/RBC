%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCAUAAAACGCUUGUUAUAAAAGCAGUGGCUGCGGCGCCUCGUACUCCAACCGCAUCUGCAGCGAGCAUCUGAGAAGCCAAGACUGAGCCGGCGGCCGCGGCGCAGCGAACGAGCAGUGACCGUGCUCCUACCCAGCUCUGCUCCACAGCGCCCACCUGUCUCCGCCCCUCGGCCCCUCGCCCGGCUUUGCCUAACCGCCACG\
) } def
/len { sequence length } bind def

/coor [
[98.39249420 203.47608948]
[110.41291809 212.44879150]
[117.92533112 225.43200684]
[119.71417236 240.32496643]
[115.49000549 254.71789551]
[105.93631744 266.28192139]
[92.59896088 273.14596558]
[77.63599396 274.19934082]
[63.46851349 269.27160645]
[52.38890076 259.16012573]
[46.18989944 245.50097656]
[45.87501907 230.50173950]
[37.66072083 243.05264282]
[29.44642067 255.60356140]
[21.23212051 268.15447998]
[25.92377472 283.07165527]
[19.88149643 297.49472046]
[5.95826244 304.61352539]
[-9.27180004 301.06680298]
[-18.61752129 288.52920532]
[-17.66613960 272.92059326]
[-6.86686468 261.61087036]
[8.68121338 259.94015503]
[16.89551163 247.38925171]
[25.10981178 234.83834839]
[33.32411194 222.28744507]
[33.66304016 212.08198547]
[42.58845520 204.83522034]
[48.38150024 190.99900818]
[54.17454529 177.16281128]
[59.96759033 163.32659912]
[65.76063538 149.49038696]
[56.25579453 137.88616943]
[41.54961777 140.84056091]
[26.84344482 143.79495239]
[12.13727093 146.74935913]
[-2.56890297 149.70375061]
[-5.12789392 164.66423035]
[-12.92178822 177.68803406]
[-24.89652443 187.01382446]
[-39.43261719 191.38032532]
[-54.56418228 190.19703674]
[-68.24479675 183.62396240]
[-78.62427521 172.55007935]
[-84.29886627 158.47303772]
[-84.50114441 143.29661560]
[-79.20374298 129.07333374]
[-69.12309265 117.72674561]
[-55.62252045 110.79140472]
[-40.52786636 109.20524597]
[-25.88055992 113.18279266]
[-13.66152954 122.18611145]
[-5.52329779 134.99757385]
[9.18287659 132.04318237]
[23.88904953 129.08879089]
[38.59522247 126.13439178]
[53.30139923 123.18000031]
[50.32974243 105.50354767]
[53.55754852 88.63279724]
[62.07649612 74.58441162]
[74.37812042 64.85697174]
[88.59464264 60.27420044]
[102.77126312 60.92842102]
[115.13130188 66.22578430]
[123.91102600 54.06369400]
[132.69075012 41.90160370]
[141.47047424 29.73951340]
[150.25019836 17.57742310]
[145.57028198 2.90075636]
[150.37367249 -11.54849625]
[162.61941528 -20.29525757]
[177.48947144 -20.15569496]
[186.26919556 -32.31778717]
[195.04891968 -44.47987747]
[203.82864380 -56.64196777]
[212.60836792 -68.80405426]
[210.29138184 -84.20760345]
[219.36851501 -96.41662598]
[234.06773376 -98.53058624]
[242.84745789 -110.69268036]
[240.53047180 -126.09622955]
[249.60760498 -138.30525208]
[264.30682373 -140.41920471]
[273.08654785 -152.58129883]
[281.86627197 -164.74339294]
[290.64599609 -176.90548706]
[284.42346191 -193.16632080]
[294.51513672 -211.56976318]
[299.66931152 -225.65643311]
[304.82348633 -239.74311829]
[309.97769165 -253.82978821]
[307.45339966 -269.44833374]
[319.09283447 -278.74203491]
[324.24700928 -292.82870483]
[319.88412476 -312.50671387]
[335.23437500 -324.26119995]
[339.95657349 -338.49850464]
[335.81924438 -356.43997192]
[349.37295532 -367.58471680]
[353.87747192 -381.89239502]
[358.38198853 -396.20004272]
[362.88650513 -410.50772095]
[367.39105225 -424.81536865]
[371.78634644 -439.15698242]
[376.07214355 -453.53167725]
[380.35797119 -467.90637207]
[376.88619995 -483.34194946]
[387.93740845 -493.32794189]
[392.22323608 -507.70263672]
[384.48727417 -521.48419189]
[388.84249878 -536.67651367]
[402.70504761 -544.26635742]
[417.85049438 -539.75073242]
[425.29333496 -525.80871582]
[420.61785889 -510.71185303]
[406.59793091 -503.41683960]
[402.31210327 -489.04214478]
[406.09042358 -474.63473511]
[394.73266602 -463.62054443]
[390.44683838 -449.24584961]
[386.16104126 -434.87115479]
[387.26287842 -427.56008911]
[381.69869995 -420.31085205]
[377.19418335 -406.00317383]
[372.68966675 -391.69552612]
[368.18511963 -377.38784790]
[363.68060303 -363.08020020]
[368.99124146 -352.20895386]
[365.35253906 -340.25042725]
[354.19387817 -333.77630615]
[349.47171021 -319.53900146]
[354.85992432 -310.85116577]
[354.56842041 -300.41253662]
[348.45205688 -291.67898560]
[338.33367920 -287.67453003]
[333.17950439 -273.58782959]
[336.07244873 -258.97686768]
[324.06436157 -248.67561340]
[318.91018677 -234.58892822]
[313.75601196 -220.50225830]
[308.60180664 -206.41557312]
[318.45611572 -195.10661316]
[333.11553955 -198.28492737]
[347.77493286 -201.46325684]
[362.43435669 -204.64157104]
[374.20626831 -216.05883789]
[389.90371704 -211.31304932]
[393.37847900 -195.28625488]
[381.05606079 -184.46546936]
[365.61267090 -189.98216248]
[350.95324707 -186.80384827]
[336.29385376 -183.62551880]
[321.63442993 -180.44720459]
[336.14398193 -176.64286804]
[345.28878784 -164.75283813]
[345.24188232 -149.75291443]
[336.02288818 -137.92030334]
[321.48983765 -134.20678711]
[307.72454834 -140.16639709]
[300.48757935 -153.30513000]
[302.80807495 -168.12576294]
[294.02835083 -155.96366882]
[285.24862671 -143.80157471]
[276.46890259 -131.63948059]
[279.08993530 -117.02217102]
[270.35928345 -104.56301117]
[255.00953674 -101.91295624]
[246.22981262 -89.75086212]
[248.85084534 -75.13355255]
[240.12020874 -62.67439270]
[224.77044678 -60.02433395]
[215.99072266 -47.86224365]
[207.21099854 -35.70015335]
[198.43127441 -23.53806114]
[189.65155029 -11.37597084]
[194.46530151 2.69406152]
[190.01840210 17.07074547]
[177.81600952 26.17870522]
[162.41229248 26.35714722]
[153.63256836 38.51923752]
[144.85284424 50.68132782]
[136.07312012 62.84341812]
[127.29339600 75.00550842]
[141.73999023 94.89566803]
[141.37104797 122.49865723]
[122.81443787 146.87828064]
[129.84753418 160.12725830]
[136.88063049 173.37625122]
[149.64768982 184.53144836]
[142.46272278 199.88763428]
[125.71765900 197.23446655]
[123.63163757 180.40934753]
[116.59854889 167.16035461]
[109.56545258 153.91137695]
[102.07329559 154.25439453]
[107.35597992 168.29338074]
[95.63642883 177.65565491]
[83.11094666 169.40264893]
[87.08899689 154.94042969]
[79.59683990 155.28343201]
[73.80379486 169.11964417]
[68.01074982 182.95585632]
[62.21770477 196.79205322]
[56.42465973 210.62826538]
[69.02222443 202.48570251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 26]
[13 25]
[14 24]
[15 23]
[28 204]
[29 203]
[30 202]
[31 201]
[32 200]
[33 57]
[34 56]
[35 55]
[36 54]
[37 53]
[64 183]
[65 182]
[66 181]
[67 180]
[68 179]
[72 175]
[73 174]
[74 173]
[75 172]
[76 171]
[79 168]
[80 167]
[83 164]
[84 163]
[85 162]
[86 161]
[88 141]
[89 140]
[90 139]
[91 138]
[93 136]
[94 135]
[96 131]
[97 130]
[99 127]
[100 126]
[101 125]
[102 124]
[103 123]
[104 121]
[105 120]
[106 119]
[108 117]
[109 116]
[142 153]
[143 152]
[144 151]
[145 150]
[186 194]
[187 193]
[188 192]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
