%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:00:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACAGCCGGAAGUCCCGCCUGCCGUGUAGUCGCCGCCGUCGCUGCCGCUGCCGCUGCCGCCGUCGUUGUUGUUGUGCUCGGUGCGCUGAGCUCCGCGGCUCCGCGAGCCGGUUCCGUCCCCUUCCCGCCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[133.21565247 620.05444336]
[125.01822662 607.22003174]
[122.75614929 592.16009521]
[126.82133484 577.48376465]
[136.50947571 565.73388672]
[150.14202881 558.94616699]
[149.45433044 543.96191406]
[141.14166260 531.60278320]
[148.23814392 517.46234131]
[147.55043030 502.47814941]
[146.86273193 487.49392700]
[146.17503357 472.50967407]
[145.48733521 457.52545166]
[128.32621765 449.87145996]
[117.29524231 434.56005859]
[115.45295715 415.69815063]
[123.37978363 398.39526367]
[138.99871826 387.37960815]
[136.94140625 372.52136230]
[134.88409424 357.66311646]
[125.47430420 346.11734009]
[131.24572754 331.38638306]
[129.18841553 316.52813721]
[126.96088409 301.69445801]
[124.56342316 286.88729858]
[122.16595459 272.08010864]
[119.76849365 257.27294922]
[110.09645081 245.94595337]
[115.52858734 231.08653259]
[113.13112640 216.27937317]
[110.73366547 201.47219849]
[108.33619690 186.66503906]
[105.93873596 171.85786438]
[103.54127502 157.05070496]
[90.22527313 143.10144043]
[97.43281555 124.33776093]
[94.35901642 109.65608215]
[91.11708832 95.01061249]
[87.70745087 80.40326691]
[77.03578949 68.72310638]
[81.67752838 54.57024002]
[78.26789856 39.96290207]
[74.85826111 25.35556030]
[69.81861877 17.62944221]
[71.54199219 10.37425423]
[68.46819305 -4.30742645]
[65.39439392 -18.98910713]
[62.32059097 -33.67078781]
[51.93269348 -41.41274643]
[49.71207428 -53.76832199]
[56.31792831 -63.96747589]
[53.58157730 -78.71577454]
[39.78397369 -93.33255768]
[46.79971695 -111.29576874]
[43.39008331 -125.90311432]
[32.71842194 -137.58328247]
[37.36016083 -151.73614502]
[33.95052719 -166.34347534]
[23.27886581 -178.02365112]
[27.92060280 -192.17651367]
[24.51096916 -206.78384399]
[12.90905380 -218.37382507]
[17.40613174 -234.14431763]
[33.37599564 -237.87199402]
[44.39021683 -225.72213745]
[39.11830902 -210.19348145]
[42.52794266 -195.58613586]
[52.95572281 -184.95079041]
[48.55786514 -169.75311279]
[51.96749878 -155.14576721]
[62.39527893 -144.51042175]
[57.99742508 -129.31274414]
[61.40705490 -114.70540619]
[70.62475586 -110.05240631]
[75.82711792 -100.87865448]
[75.05738831 -90.13932800]
[68.32987976 -81.45213318]
[71.06623077 -66.70382690]
[83.17232513 -54.05102921]
[77.00227356 -36.74458694]
[80.07607269 -22.06290817]
[83.14987183 -7.38122702]
[86.22367096 7.30045366]
[89.46560669 21.94592667]
[92.87523651 36.55326843]
[96.28486633 51.16061020]
[106.71265411 61.79595947]
[102.31479645 76.99363708]
[105.72442627 91.60097504]
[110.51686859 98.17718506]
[109.04069519 106.58228302]
[112.11449432 121.26396179]
[121.63868713 126.74269867]
[126.43196869 136.38377380]
[125.10626221 146.84631348]
[118.34844208 154.65324402]
[120.74590302 169.46040344]
[123.14336395 184.26757812]
[125.54082489 199.07473755]
[127.93829346 213.88191223]
[130.33575439 228.68907166]
[140.17927551 241.07518005]
[134.57565308 254.87548828]
[136.97312927 269.68264771]
[139.37059021 284.48980713]
[141.76805115 299.29699707]
[146.26467896 307.35125732]
[144.04666138 314.47082520]
[146.10397339 329.32907104]
[155.66091919 341.93762207]
[149.74232483 355.60580444]
[151.79965210 370.46405029]
[153.85696411 385.32229614]
[165.00447083 387.95333862]
[174.77655029 393.87643433]
[182.23136902 402.50143433]
[186.65641785 412.97875977]
[187.63652039 424.28302002]
[185.09281921 435.31341553]
[179.28875732 445.00088501]
[170.80296326 452.41177368]
[160.47157288 456.83776855]
[161.15927124 471.82199097]
[161.84696960 486.80621338]
[162.53466797 501.79043579]
[163.22236633 516.77465820]
[171.58421326 530.20562744]
[164.43855286 543.27423096]
[165.12625122 558.25842285]
[179.32324219 563.76892090]
[190.04690552 574.58203125]
[195.43930054 588.82427979]
[194.56617737 604.02813721]
[187.57879639 617.55944824]
[175.68775940 627.07385254]
[160.95327759 630.92285156]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 129]
[7 128]
[9 126]
[10 125]
[11 124]
[12 123]
[13 122]
[18 113]
[19 112]
[20 111]
[22 109]
[23 108]
[24 106]
[25 105]
[26 104]
[27 103]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[36 92]
[37 91]
[38 89]
[39 88]
[41 86]
[42 85]
[43 84]
[45 83]
[46 82]
[47 81]
[48 80]
[51 78]
[52 77]
[54 73]
[55 72]
[57 70]
[58 69]
[60 67]
[61 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
