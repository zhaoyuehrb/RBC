%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:15:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGACCCGCUUGACGCUAUGACAGCGGGAAACGGGGGGCGCGCCCGUACAUAGGGAGGCUUUAAAACCUUGAGGUGAUUCAUCUUCCAGGCUCUCCUUCCAUCAAGUCUCUCAUCCCUAGCGCUCUGGGUCCUUA\
) } def
/len { sequence length } bind def

/coor [
[69.66166687 389.91534424]
[71.79108429 374.42340088]
[83.41497803 363.96304321]
[82.72222900 348.97906494]
[82.02947235 333.99505615]
[81.33672333 319.01107788]
[80.64396667 304.02706909]
[79.95121765 289.04306030]
[77.51980591 286.37329102]
[76.30817413 282.36001587]
[76.94847107 277.61236572]
[79.76596832 273.00485229]
[80.11243439 258.00885010]
[80.28568268 243.00985718]
[80.28568268 228.00985718]
[80.28568268 213.00985718]
[80.28568268 198.00985718]
[80.28568268 183.00985718]
[69.27478790 193.19613647]
[54.30298996 194.11550903]
[42.12849426 185.35299683]
[38.24682236 170.86395264]
[44.41013718 157.18865967]
[57.83634949 150.50010681]
[72.46492004 153.81745911]
[81.69277954 165.64392090]
[84.10771942 150.83958435]
[86.52265930 136.03526306]
[88.93759918 121.23094177]
[80.09451294 113.30042267]
[76.15177155 102.09559631]
[61.55020142 98.66133881]
[46.94863129 95.22708130]
[32.34706116 91.79282379]
[17.74548912 88.35856628]
[5.32734823 97.86244965]
[-10.29207230 97.10897827]
[-21.73776054 86.45392609]
[-23.60541344 70.92826843]
[-15.01317978 57.86276245]
[-0.01805258 53.42652893]
[14.29972935 59.71422577]
[21.17974663 73.75699615]
[35.78131866 77.19125366]
[50.38288879 80.62551117]
[64.98445892 84.05976868]
[79.58602905 87.49402618]
[82.95338440 83.19100189]
[87.20872498 79.76358032]
[92.13037109 77.39029694]
[97.46196747 76.19479370]
[102.92576599 76.23933411]
[108.23715973 77.52159119]
[117.55075836 65.76332092]
[126.86434937 54.00505447]
[136.17794800 42.24678040]
[145.49154663 30.48851013]
[154.80514526 18.73023987]
[164.11872864 6.97196913]
[173.43232727 -4.78630209]
[182.74592590 -16.54457283]
[172.53047180 -34.48709488]
[170.92376709 -55.02775574]
[178.19441223 -74.25930023]
[192.92588806 -88.53923798]
[212.29229736 -95.17974091]
[232.60052490 -92.95349884]
[239.59495544 -106.22293091]
[246.58940125 -119.49236298]
[246.17971802 -135.30825806]
[258.95904541 -142.95930481]
[265.95346069 -156.22874451]
[272.94790649 -169.49816895]
[279.94235229 -182.76760864]
[272.96948242 -196.62973022]
[275.50946045 -211.93751526]
[286.58566284 -222.80477905]
[301.93902588 -225.05285645]
[315.66589355 -217.81730652]
[322.48797607 -203.88035583]
[319.78204346 -188.60102844]
[308.58862305 -177.85455322]
[293.21179199 -175.77316284]
[286.21734619 -162.50373840]
[279.22290039 -149.23429871]
[272.22845459 -135.96487427]
[273.13842773 -121.09808350]
[259.85882568 -112.49792480]
[252.86439514 -99.22849274]
[245.86994934 -85.95906067]
[253.22047424 -79.12274170]
[258.95043945 -70.86946106]
[262.79336548 -61.57619858]
[264.56909180 -51.66844559]
[264.19219971 -41.60073853]
[261.67611694 -31.83577919]
[257.13265991 -22.82320213]
[250.76710510 -14.97884464]
[242.86891174 -8.66557503]
[233.79852295 -4.17650270]
[223.97094727 -1.72137082]
[213.83677673 -1.41676188]
[203.86151123 -3.28056526]
[194.50419617 -7.23097754]
[185.19059753 4.52729368]
[175.87699890 16.28556442]
[166.56341553 28.04383469]
[157.24981689 39.80210495]
[147.93621826 51.56037903]
[138.62261963 63.31864929]
[129.30902100 75.07691956]
[119.99542999 86.83518982]
[121.90027618 109.66992188]
[103.74192047 123.64587402]
[101.32698822 138.45021057]
[98.91204834 153.25453186]
[96.49710846 168.05885315]
[95.28568268 183.00985718]
[95.28568268 198.00985718]
[95.28568268 213.00985718]
[95.28568268 228.00985718]
[95.28568268 243.00985718]
[98.43765259 251.68112183]
[95.10843658 258.35531616]
[94.76196289 273.35131836]
[94.93521118 288.35031128]
[95.62796783 303.33432007]
[96.32071686 318.31829834]
[97.01346588 333.30230713]
[97.70622253 348.28631592]
[98.39897156 363.27029419]
[110.93843842 372.61352539]
[114.48818970 387.84286499]
[107.37214661 401.76751709]
[92.95027924 407.81268311]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[6 128]
[7 127]
[8 126]
[12 125]
[13 124]
[14 122]
[15 121]
[16 120]
[17 119]
[18 118]
[26 117]
[27 116]
[28 115]
[29 114]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[67 90]
[68 89]
[69 88]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
