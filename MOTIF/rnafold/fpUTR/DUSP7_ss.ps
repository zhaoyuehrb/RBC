%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:43:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUGGGGCCCGCGCGGCCGGGGCGCCGUCCCAGGGCAGGGCUGCCCGGCCCCGGCCCCGGGCCGCCCGCGCUCCCC\
) } def
/len { sequence length } bind def

/coor [
[73.24446106 363.53118896]
[57.94579697 365.51977539]
[44.01041794 358.90097046]
[35.88504410 345.78677368]
[36.16246033 330.36190796]
[44.75413895 317.54837036]
[58.91850662 311.43493652]
[61.26502228 296.61962891]
[63.61154175 281.80429077]
[65.95806122 266.98895264]
[68.30457306 252.17364502]
[62.65351868 238.39268494]
[72.45438385 225.97279358]
[74.80089569 211.15747070]
[69.14984131 197.37651062]
[78.95070648 184.95661926]
[81.29721832 170.14129639]
[83.64373779 155.32597351]
[85.99025726 140.51065063]
[88.33676910 125.69532013]
[90.68328857 110.87999725]
[85.85240936 97.75923920]
[94.50138855 86.77349091]
[96.84790039 71.95816040]
[99.19441986 57.14283752]
[97.42176819 47.90313721]
[101.93490601 41.79660034]
[104.86126709 27.08482170]
[107.78762054 12.37304211]
[110.71397400 -2.33873677]
[108.95913696 -6.42630625]
[108.58271790 -10.47055817]
[109.41058350 -14.05685520]
[111.15526581 -16.86602402]
[113.45551300 -18.70228958]
[115.92182922 -19.50673866]
[121.66207886 -33.36493301]
[127.40233612 -47.22312546]
[133.14257812 -61.08131790]
[131.27534485 -76.79195404]
[143.29420471 -85.58947754]
[149.03445435 -99.44766998]
[154.77470398 -113.30586243]
[155.24998474 -130.25314331]
[171.66653442 -134.48791504]
[180.28034973 -119.88523102]
[168.63288879 -107.56561279]
[162.89263916 -93.70742035]
[157.15238953 -79.84922791]
[159.43020630 -65.12982941]
[147.00077820 -55.34106445]
[141.26052856 -41.48287201]
[135.52027893 -27.62467957]
[129.78002930 -13.76648712]
[125.42575073 0.58761811]
[122.49939728 15.29939747]
[119.57304382 30.01117706]
[116.64669037 44.72295761]
[114.00974274 59.48935318]
[111.66323090 74.30467987]
[109.31671143 89.12000275]
[114.14759064 102.24076080]
[105.49861145 113.22650909]
[103.15209961 128.04183960]
[100.80558014 142.85716248]
[98.45906067 157.67248535]
[96.11254883 172.48780823]
[93.76602936 187.30313110]
[99.24924469 202.14378357]
[89.61622620 213.50398254]
[87.26970673 228.31930542]
[92.75292206 243.15995789]
[83.11989594 254.52015686]
[80.77338409 269.33547974]
[78.42686462 284.15081787]
[76.08034515 298.96612549]
[73.73383331 313.78146362]
[85.31578827 323.97271729]
[89.52735901 338.81408691]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[13 71]
[14 70]
[16 68]
[17 67]
[18 66]
[19 65]
[20 64]
[21 63]
[23 61]
[24 60]
[25 59]
[27 58]
[28 57]
[29 56]
[30 55]
[36 54]
[37 53]
[38 52]
[39 51]
[41 49]
[42 48]
[43 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
