%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUUCGGAGCGCGAAGCCGCCGCUGGGUCCUCGGCGCGCCCCGCGUCUGCGCUUGCUGCCGCGCCCCGGUCGGCGCGCUGGGAGUUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[25.32588768 200.96131897]
[16.02963829 212.73330688]
[13.54921246 228.35885620]
[-0.41074163 233.55203247]
[-9.70699024 245.32402039]
[-19.00323868 257.09600830]
[-28.29948616 268.86801147]
[-27.86272049 284.90509033]
[-40.22109222 295.13497925]
[-55.89431763 291.71011353]
[-62.85923767 277.25781250]
[-55.77296448 262.86459351]
[-40.07147598 259.57174683]
[-30.77522850 247.79975891]
[-21.47898102 236.02777100]
[-12.18273258 224.25578308]
[-10.36723518 209.47222900]
[4.25764799 203.43705750]
[13.55389690 191.66506958]
[10.27187824 179.08375549]
[14.96463680 166.74803162]
[26.10468483 159.31170654]
[39.68838882 159.72030640]
[49.37280655 148.26553345]
[59.05722427 136.81074524]
[68.74163818 125.35595703]
[78.42605591 113.90117645]
[88.11047363 102.44639587]
[97.40672302 90.67440033]
[106.30442047 78.59835052]
[115.20211792 66.52230072]
[117.85249329 57.56382370]
[124.60442352 54.19806290]
[133.90066528 42.42607498]
[143.19691467 30.65408325]
[152.49316406 18.88209152]
[161.78941345 7.11010075]
[171.08566284 -4.66189003]
[180.38191223 -16.43387985]
[189.67816162 -28.20587158]
[198.97441101 -39.97786331]
[207.87210083 -52.05391312]
[216.36131287 -64.42053986]
[224.85050964 -76.78716278]
[220.21354675 -86.78561401]
[220.25801086 -97.72499847]
[224.90599060 -107.53742218]
[233.21595764 -114.39748383]
[243.57257080 -117.06179047]
[254.00045776 -115.09391785]
[263.68487549 -126.54869843]
[273.36929321 -138.00347900]
[283.05371094 -149.45826721]
[279.22506714 -164.49559021]
[284.99761963 -178.89897156]
[298.15170288 -187.13000488]
[313.62930298 -186.02368164]
[325.47894287 -176.00543213]
[329.14422607 -160.92745972]
[323.21575928 -146.58755493]
[309.97317505 -138.49969482]
[294.50848389 -139.77384949]
[284.82406616 -128.31906128]
[275.13964844 -116.86428070]
[265.45523071 -105.40950012]
[268.69357300 -86.38108063]
[256.97003174 -70.67538452]
[237.21713257 -68.29795074]
[228.72793579 -55.93133163]
[220.23872375 -43.56470490]
[220.26783752 -38.60250092]
[217.03836060 -33.61581802]
[210.74639893 -30.68161392]
[201.45014954 -18.90962410]
[192.15390015 -7.13763237]
[182.85765076 4.63435841]
[173.56140137 16.40634918]
[164.26515198 28.17833900]
[154.96890259 39.95032883]
[145.67265320 51.72232056]
[136.37640381 63.49431229]
[127.27816772 75.41999817]
[118.38047028 87.49604797]
[109.48277283 99.57209778]
[109.07708740 105.02358246]
[105.54177094 109.79788208]
[99.56526184 112.13081360]
[89.88084412 123.58559418]
[80.19642639 135.04037476]
[70.51200867 146.49516296]
[60.82758713 157.94995117]
[51.14316940 169.40472412]
[52.96828079 186.70455933]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 19]
[2 18]
[4 16]
[5 15]
[6 14]
[7 13]
[23 92]
[24 91]
[25 90]
[26 89]
[27 88]
[28 87]
[29 84]
[30 83]
[31 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[41 73]
[42 70]
[43 69]
[44 68]
[50 65]
[51 64]
[52 63]
[53 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
