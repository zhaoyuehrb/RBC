%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGCUGGCGGAGCCCGGGAGGCGGAGAAGGCUGUCGUUGCCUUGGCCGUCGCAUCCCCGAGGGAGUCGUGUCGGCGCCACCCCGGCCCCCGAGCCCGCAGAUUGCCCACCGAAGCUCGUGUGUGCACCCCCGAUCCCGCCAGCCACUCGCCCCUGGCCUCGCGGGCCGUGUCUCCGGCAUC\
) } def
/len { sequence length } bind def

/coor [
[250.13299561 345.72695923]
[241.90621948 333.18423462]
[233.67944336 320.64151001]
[220.22935486 314.24273682]
[219.13041687 298.45974731]
[210.90362549 285.91699219]
[202.67684937 273.37426758]
[194.45007324 260.83154297]
[186.22329712 248.28880310]
[177.99652100 235.74607849]
[169.76974487 223.20333862]
[161.54296875 210.66061401]
[148.19252014 211.26063538]
[136.19548035 205.13099670]
[128.73960876 193.78015137]
[127.86522675 180.11921692]
[133.90802002 167.71566772]
[125.89658356 155.03431702]
[117.88514709 142.35295105]
[109.87371063 129.67160034]
[77.59958649 133.96820068]
[50.06761551 104.18273926]
[35.77044296 108.72045898]
[21.47327042 113.25817871]
[7.17609978 117.79589844]
[-7.12107182 122.33361816]
[-14.43679047 136.08563232]
[-29.00079727 140.48385620]
[-42.06616211 133.42468262]
[-56.36333084 137.96240234]
[-70.66050720 142.50012207]
[-84.95767212 147.03784180]
[-99.25484467 151.57556152]
[-105.04398346 166.10208130]
[-118.84059906 173.46328735]
[-134.13035583 170.18344116]
[-143.69389343 157.81118774]
[-143.01560974 142.18832397]
[-132.41575623 130.69149780]
[-116.89927673 128.74914551]
[-103.79256439 137.27839661]
[-89.49539185 132.74067688]
[-75.19821930 128.20295715]
[-60.90105057 123.66523743]
[-46.60387802 119.12751770]
[-40.00075531 105.82585144]
[-25.56603050 101.02028656]
[-11.65878963 108.03644562]
[2.63838148 103.49872589]
[16.93555260 98.96100616]
[31.23272514 94.42328644]
[45.52989578 89.88557434]
[46.29687881 82.42488861]
[34.14156342 73.63578796]
[47.83084106 67.50353241]
[48.59782028 60.04285431]
[35.52291489 52.69120026]
[22.44800568 45.33954620]
[9.37309933 37.98789215]
[-7.39661932 35.49532700]
[-9.64378452 18.69096565]
[5.88177967 11.87971020]
[16.72475243 24.91298676]
[29.79965973 32.26464081]
[42.87456512 39.61629105]
[55.94947433 46.96794510]
[67.97848511 38.00676346]
[64.67635345 23.37474632]
[61.37421799 8.74273014]
[57.94729614 -5.86056328]
[54.39582825 -20.43407059]
[50.84436035 -35.00757599]
[46.92086029 -49.48535538]
[42.62789917 -63.85791779]
[38.33494186 -78.23047638]
[34.04198074 -92.60303497]
[20.36749458 -104.91903687]
[25.05954742 -121.81860352]
[20.52182770 -136.11576843]
[15.98410988 -150.41294861]
[2.45856071 -159.04075623]
[0.91436678 -175.00932312]
[12.53610134 -186.06892395]
[28.40856552 -183.73558044]
[36.35576248 -169.79924011]
[30.28128242 -154.95066833]
[34.81900024 -140.65348816]
[39.35671997 -126.35632324]
[49.96026611 -120.50368500]
[53.84891891 -108.61064911]
[48.41453934 -96.89599609]
[52.70750046 -82.52343750]
[57.00046158 -68.15087891]
[61.29342270 -53.77831650]
[64.22983551 -51.78605652]
[66.33724976 -48.26118469]
[66.90077972 -43.61357880]
[65.41786957 -38.55904388]
[68.96933746 -23.98553658]
[72.52079773 -9.41203022]
[77.17031097 -3.64399362]
[76.00623322 5.44059563]
[79.30837250 20.07261276]
[82.61050415 34.70462799]
[96.90767670 39.24234772]
[108.04341888 29.19270515]
[119.17916107 19.14306450]
[124.24036407 4.15324211]
[138.87268066 1.37031233]
[150.00840759 -8.67932892]
[161.14414978 -18.72896957]
[172.19369507 -28.87330818]
[183.15623474 -39.11160660]
[194.11877441 -49.34990311]
[201.56764221 -64.57983398]
[218.26441956 -61.63814545]
[220.05982971 -44.77952957]
[204.35707092 -38.38736343]
[193.39453125 -28.14906693]
[182.43199158 -17.91076851]
[179.68299866 -11.03100395]
[171.19380188 -7.59322929]
[160.05805969 2.45641184]
[148.92231750 12.50605297]
[144.65760803 26.77705765]
[129.22880554 30.27880478]
[118.09305573 40.32844543]
[106.95732117 50.37808609]
[133.54234314 71.78903961]
[137.52958679 101.23672485]
[122.55506897 121.66015625]
[130.56651306 134.34152222]
[138.57794189 147.02287292]
[146.58938599 159.70423889]
[163.47039795 160.56567383]
[176.38908386 171.20677185]
[180.38804626 187.28790283]
[174.08569336 202.43383789]
[182.31246948 214.97656250]
[190.53924561 227.51930237]
[198.76603699 240.06202698]
[206.99281311 252.60476685]
[215.21958923 265.14749146]
[223.44636536 277.69021606]
[231.67314148 290.23297119]
[245.71166992 297.52886963]
[246.22216797 312.41473389]
[254.44894409 324.95745850]
[262.67572021 337.50018311]
[271.57238770 334.99331665]
[281.04421997 335.19378662]
[290.26589966 338.21786499]
[298.39544678 343.93017578]
[304.65090942 351.94467163]
[308.38452148 361.64895630]
[309.14804077 372.25027466]
[306.74185181 382.84017944]
[316.59991455 394.14587402]
[326.45797729 405.45156860]
[336.31604004 416.75726318]
[346.17407227 428.06295776]
[361.14080811 436.02743530]
[357.63079834 452.61407471]
[340.72070312 453.83285522]
[334.86837769 437.92102051]
[325.01031494 426.61532593]
[315.15228271 415.30963135]
[305.29421997 404.00393677]
[295.43615723 392.69824219]
[282.23764038 399.82559204]
[286.28460693 414.26934814]
[290.33154297 428.71310425]
[294.37850952 443.15686035]
[298.42544556 457.60061646]
[308.52093506 471.22113037]
[298.22744751 484.69259644]
[282.43292236 478.53063965]
[283.98168945 461.64758301]
[279.93475342 447.20382690]
[275.88778687 432.76007080]
[271.84085083 418.31631470]
[267.79388428 403.87252808]
[246.09289551 389.73193359]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 149]
[2 148]
[3 147]
[5 145]
[6 144]
[7 143]
[8 142]
[9 141]
[10 140]
[11 139]
[12 138]
[17 134]
[18 133]
[19 132]
[20 131]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[56 66]
[57 65]
[58 64]
[59 63]
[67 104]
[68 103]
[69 102]
[70 100]
[71 99]
[72 98]
[73 94]
[74 93]
[75 92]
[76 91]
[78 88]
[79 87]
[80 86]
[105 128]
[106 127]
[107 126]
[109 124]
[110 123]
[111 122]
[112 120]
[113 119]
[114 118]
[157 169]
[158 168]
[159 167]
[160 166]
[161 165]
[170 182]
[171 181]
[172 180]
[173 179]
[174 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
