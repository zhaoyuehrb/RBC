%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGCGGCGGGGAGGGGAGCCGGGGCCCCAGCCCUGCCGGGAAACGGGUUCCCAGUCCCGGCCGAGAGCGCGGGCGCCGAGGGGACCGACCCGGACUCCCCGCAACCCCCCAACCGCCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[90.96135712 404.25509644]
[74.60734558 403.03921509]
[67.72800446 388.15274048]
[77.40021515 374.90960693]
[78.51235199 359.95089722]
[79.62449646 344.99218750]
[69.73800659 333.91098022]
[70.65277863 318.72488403]
[82.34278870 308.43014526]
[83.45492554 293.47143555]
[84.56707001 278.51272583]
[85.67921448 263.55401611]
[86.79135132 248.59529114]
[87.53315735 233.61364746]
[87.90417480 218.61824036]
[84.89208221 211.78021240]
[88.47439575 203.25778198]
[89.21620178 188.27612305]
[89.95800781 173.29447937]
[90.69981384 158.31283569]
[81.83750153 143.21934509]
[91.80990601 127.79872894]
[92.18092346 112.80332184]
[88.50811005 98.25992584]
[81.06172943 85.23873138]
[73.61534882 72.21753693]
[60.04800415 64.07888794]
[60.44645691 49.18960953]
[53.00007629 36.16841888]
[45.55369949 23.14722633]
[38.10731888 10.12603474]
[23.12321663 5.86992979]
[15.75702000 -7.44148636]
[19.90690804 -21.70030975]
[12.46052837 -34.72150040]
[-1.10681725 -42.86015701]
[-0.70836550 -57.74943161]
[-8.15474510 -70.77062225]
[-15.92091751 -83.60364532]
[-24.00213242 -96.24065399]
[-32.08334732 -108.87766266]
[-40.16456223 -121.51467133]
[-48.24577713 -134.15168762]
[-56.32698822 -146.78868103]
[-64.40820312 -159.42568970]
[-79.77745056 -160.47091675]
[-91.44782257 -170.25129700]
[-95.07843018 -184.85549927]
[-89.48032379 -198.63226318]
[-97.56153870 -211.26927185]
[-111.18868256 -221.35575867]
[-105.26873016 -237.24256897]
[-88.36398315 -235.95187378]
[-84.92453003 -219.35047913]
[-76.84332275 -206.71347046]
[-61.98898315 -206.01579285]
[-50.25500488 -196.59359741]
[-46.27256775 -181.89688110]
[-51.77119446 -167.50691223]
[-43.68998337 -154.86990356]
[-35.60876846 -142.23289490]
[-27.52755356 -129.59588623]
[-19.44633865 -116.95887756]
[-11.36512375 -104.32186890]
[-3.28390980 -91.68486023]
[1.20661616 -89.78913116]
[4.50309563 -84.99357605]
[4.86644697 -78.21700287]
[12.31282616 -65.19580841]
[25.34755707 -57.98851776]
[25.48171997 -42.16788101]
[32.92810059 -29.14668846]
[47.32190323 -25.49237633]
[55.05908203 -12.39311314]
[51.12850952 2.67965579]
[58.57489014 15.70084763]
[66.02127075 28.72204018]
[73.46765137 41.74323273]
[86.50238037 48.95052338]
[86.63654327 64.77116394]
[94.08292389 77.79235077]
[101.52930450 90.81354523]
[107.81605530 87.08143616]
[116.65729523 87.40146637]
[131.62861633 86.47441864]
[146.59994507 85.54737854]
[161.57127380 84.62033081]
[176.54260254 83.69329071]
[191.48641968 82.39621735]
[206.39356995 80.72991943]
[221.30073547 79.06362152]
[236.37016296 71.29519653]
[248.00663757 83.62519073]
[239.37980652 98.22019196]
[222.96704102 93.97078705]
[208.05987549 95.63708496]
[193.15270996 97.30338287]
[189.46801758 100.49424744]
[183.70945740 101.33271790]
[177.46965027 98.66461182]
[162.49832153 99.59165955]
[147.52699280 100.51869965]
[132.55566406 101.44574738]
[117.58434296 102.37278748]
[107.17633820 113.17433929]
[106.80532074 128.16975403]
[115.14981079 138.09693909]
[114.46963501 150.64465332]
[105.68145752 159.05464172]
[104.93965149 174.03628540]
[104.19784546 189.01792908]
[103.45603943 203.99958801]
[102.89958954 218.98925781]
[102.52857208 233.98466492]
[105.42631531 240.12120056]
[104.80204773 245.90690613]
[101.75006866 249.70744324]
[100.63792419 264.66616821]
[99.52578735 279.62487793]
[98.41364288 294.58358765]
[97.30149841 309.54229736]
[107.34062958 321.45254517]
[105.99966431 336.60696411]
[94.58321381 346.10433960]
[93.47106934 361.06304932]
[92.35892487 376.02175903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 126]
[5 125]
[6 124]
[9 121]
[10 120]
[11 119]
[12 118]
[13 117]
[14 114]
[15 113]
[17 112]
[18 111]
[19 110]
[20 109]
[22 106]
[23 105]
[24 82]
[25 81]
[26 80]
[28 78]
[29 77]
[30 76]
[31 75]
[34 72]
[35 71]
[37 69]
[38 68]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[49 55]
[50 54]
[84 104]
[85 103]
[86 102]
[87 101]
[88 100]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
