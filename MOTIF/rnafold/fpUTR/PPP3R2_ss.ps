%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCACGAGCCCCGCCCGAGCUCACCGCCCCUGCUCCCCUCUCCGACCCUUUGAGCCGUGGCCGUUGCCAG\
) } def
/len { sequence length } bind def

/coor [
[82.98622894 185.32382202]
[74.92673492 197.97468567]
[66.86724091 210.62556458]
[58.80774307 223.27642822]
[58.63338089 239.67465210]
[44.21408081 247.48591614]
[30.38318062 238.67465210]
[31.36872482 222.30514526]
[46.15687180 215.21693420]
[54.21636581 202.56607056]
[62.27585983 189.91519165]
[70.33535767 177.26432800]
[65.95033264 152.55165100]
[85.95529938 136.46067810]
[88.56002045 121.68856049]
[91.16474152 106.91644287]
[93.44659424 92.09101868]
[95.40448761 77.21935272]
[93.38504791 67.98002625]
[97.78589630 61.74709702]
[100.39061737 46.97497940]
[102.99533844 32.20286560]
[105.60006714 17.43074799]
[108.20478821 2.65863156]
[94.27985382 -3.07812262]
[81.91397095 -11.67457485]
[71.68550873 -22.72865295]
[64.07287598 -35.72333908]
[59.43212509 -50.05084991]
[57.98031235 -65.04105377]
[59.78534698 -79.99284363]
[64.76279449 -94.20688629]
[72.67986298 -107.01837158]
[83.16624451 -117.82807922]
[95.73148346 -126.13042450]
[109.78787231 -131.53709412]
[124.67797089 -133.79519653]
[139.70533752 -132.79911804]
[154.16712952 -128.59545898]
[167.38693237 -121.38082123]
[178.74642944 -111.49265289]
[187.71430969 -99.39343262]
[193.87115479 -85.64907837]
[196.92898560 -70.90242004]
[196.74476624 -55.84320068]
[193.32713318 -41.17576218]
[186.83592224 -27.58612251]
[177.57473755 -15.70989895]
[165.97676086 -6.10256243]
[152.58442688 0.78653431]
[138.02413940 4.63517570]
[122.97690582 5.26335430]
[120.37217712 20.03547096]
[117.76745605 34.80758667]
[115.16273499 49.57970428]
[112.55801392 64.35182190]
[110.27616119 79.17723846]
[108.31826782 94.04891205]
[110.51857758 102.08978271]
[105.93685913 109.52116394]
[103.33213806 124.29328156]
[100.72741699 139.06539917]
[106.20709229 142.98713684]
[110.44725800 148.18928528]
[113.16128540 154.29759216]
[114.17166901 160.87739563]
[113.42156982 167.46458435]
[110.97783661 173.59829712]
[107.02530670 178.85314941]
[101.85287476 182.86877441]
[95.83246613 185.37454224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[4 9]
[14 62]
[15 61]
[16 60]
[17 58]
[18 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
