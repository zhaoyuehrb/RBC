%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCUCGGGCGGCUUCUCGCCGCUCCCAGGUCUGGCUGGCUGGAGGAGUCUCAGCUCUCAGCCGCUCGCCCGCCCCCGCUCCGGGCCCUCCCCUAGUCGCCGCUGUGGGGCAGCGCCUGGCGGGCGGCCCGCGGGCGGGUCGCCUCCCCUCCUGUAGCCCACACCCUUCUUAAAGCGGCGGCGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[2.95572400 726.45196533]
[-7.17136240 733.08837891]
[-10.61272144 747.68823242]
[-14.05408001 762.28814697]
[-17.49543953 776.88806152]
[-15.24425125 793.69189453]
[-30.76818466 800.50683594]
[-41.61427689 787.47613525]
[-32.09533691 773.44671631]
[-28.65397835 758.84680176]
[-25.21261978 744.24688721]
[-21.77126122 729.64697266]
[-27.72856712 713.14825439]
[-15.01935768 699.83465576]
[-11.81986332 685.17980957]
[-8.62036896 670.52502441]
[-5.42087460 655.87023926]
[-2.22138000 641.21545410]
[0.97811437 626.56060791]
[4.17760897 611.90582275]
[7.37710333 597.25103760]
[10.57659817 582.59619141]
[13.77609253 567.94140625]
[16.97558594 553.28662109]
[20.17508125 538.63183594]
[7.83395243 526.01959229]
[5.50015783 508.37045288]
[14.29265499 492.71011353]
[30.86327362 485.38662720]
[33.57648087 470.63403320]
[36.28968811 455.88146973]
[25.90534973 445.23706055]
[23.75464249 430.34280396]
[30.86978722 416.88070679]
[44.70746994 410.11132812]
[47.42067719 395.35873413]
[36.14117432 380.95687866]
[39.00159836 362.56591797]
[54.64953232 351.91104126]
[56.87348938 337.07681274]
[59.09744263 322.24258423]
[61.32139587 307.40838623]
[63.54535294 292.57415771]
[57.78055573 278.84039307]
[67.47840881 266.33990479]
[69.70236206 251.50567627]
[71.92631531 236.67146301]
[74.15026855 221.83723450]
[76.37422943 207.00302124]
[63.98572922 198.69696045]
[56.40089035 185.78263855]
[55.17030716 170.79441833]
[60.59144211 156.70075989]
[71.63903809 146.31626892]
[86.15854645 141.73966980]
[88.38249969 126.90545654]
[79.19129944 120.63656616]
[72.99897766 111.39361572]
[70.69792938 100.50865936]
[72.61978912 89.55039978]
[78.48758698 80.09809113]
[87.45566559 73.51397705]
[98.23158264 70.74692535]
[101.18833923 56.04122162]
[104.14509583 41.33552170]
[107.10185242 26.62982368]
[110.05860138 11.92412376]
[113.01535797 -2.78157568]
[115.97211456 -17.48727608]
[118.92887115 -32.19297409]
[110.44259644 -45.25516891]
[113.65065765 -60.12672043]
[126.15576172 -68.13658905]
[129.11251831 -82.84228516]
[132.06927490 -97.54798126]
[134.90435791 -112.27762604]
[137.61755371 -127.03020477]
[140.33076477 -141.78277588]
[143.04397583 -156.53535461]
[145.75718689 -171.28793335]
[143.89685059 -177.66253662]
[145.33216858 -183.18472290]
[148.81170654 -186.47991943]
[152.01119995 -201.13471985]
[155.21069336 -215.78952026]
[158.41020203 -230.44432068]
[161.60969543 -245.09912109]
[156.99401855 -260.23208618]
[167.26799011 -271.01608276]
[170.46748352 -285.67089844]
[173.54571533 -300.35165405]
[176.50245667 -315.05734253]
[179.45921326 -329.76303101]
[182.41596985 -344.46875000]
[185.25105286 -359.19839478]
[187.96426392 -373.95095825]
[190.67747498 -388.70355225]
[193.39067078 -403.45611572]
[187.38842773 -418.71734619]
[197.81419373 -431.37576294]
[213.94284058 -428.40948486]
[219.18258667 -412.86993408]
[208.14324951 -400.74291992]
[205.43003845 -385.99032593]
[202.71684265 -371.23776245]
[200.00363159 -356.48516846]
[201.88925171 -349.32510376]
[197.12167358 -341.51199341]
[194.16491699 -326.80627441]
[191.20816040 -312.10058594]
[188.25140381 -297.39489746]
[190.01838684 -290.20462036]
[185.12228394 -282.47140503]
[181.92279053 -267.81658936]
[186.76730347 -253.73185730]
[176.26449585 -241.89962769]
[173.06500244 -227.24482727]
[169.86550903 -212.59002686]
[166.66601562 -197.93522644]
[163.46650696 -183.28042603]
[160.50976562 -168.57472229]
[157.79655457 -153.82214355]
[155.08334351 -139.06956482]
[152.37013245 -124.31699371]
[149.65692139 -109.56441498]
[151.54254150 -102.40433502]
[146.77497864 -94.59123230]
[143.81822205 -79.88552856]
[140.86146545 -65.17983246]
[149.29898071 -52.95920181]
[146.50990295 -38.00341034]
[133.63456726 -29.23621941]
[130.67781067 -14.53051949]
[127.72106171 0.17517966]
[124.76430511 14.88087940]
[121.80754852 29.58657837]
[118.85079193 44.29227829]
[115.89403534 58.99797821]
[112.93728638 73.70367432]
[126.12892914 86.72788239]
[128.86590576 105.06250000]
[120.05312347 121.37152100]
[103.21672058 129.12940979]
[100.99276733 143.96362305]
[113.53185272 152.59686279]
[121.04849243 165.76451111]
[122.09832001 180.82830811]
[116.52654266 194.79672241]
[105.48804474 204.91902161]
[91.20844269 209.22697449]
[88.98448944 224.06120300]
[86.76053619 238.89541626]
[84.53658295 253.72962952]
[82.31262207 268.56384277]
[87.91835022 283.35867310]
[78.37957001 294.79809570]
[76.15561676 309.63232422]
[73.93166351 324.46655273]
[71.70770264 339.30075073]
[69.48374939 354.13497925]
[78.29093933 362.15246582]
[82.08745575 373.31442261]
[80.03730011 384.80291748]
[72.76532745 393.77624512]
[62.17325211 398.07196045]
[59.46004486 412.82452393]
[69.98374176 424.07431030]
[71.84356689 439.18704224]
[64.53431702 452.34146118]
[51.04226685 458.59466553]
[48.32905579 473.34725952]
[45.61584854 488.09982300]
[55.36648941 495.95516968]
[60.81393814 507.14904785]
[60.97702408 519.52471924]
[55.88621521 530.72668457]
[46.56612015 538.64904785]
[34.82988358 541.83129883]
[31.63038826 556.48608398]
[28.43089485 571.14093018]
[25.23139954 585.79571533]
[22.03190613 600.45050049]
[18.83241081 615.10534668]
[15.63291645 629.76013184]
[12.43342209 644.41491699]
[9.23392773 659.06970215]
[6.03443336 673.72454834]
[2.83493900 688.37933350]
[-0.36455545 703.03411865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[5 9]
[14 189]
[15 188]
[16 187]
[17 186]
[18 185]
[19 184]
[20 183]
[21 182]
[22 181]
[23 180]
[24 179]
[25 178]
[29 172]
[30 171]
[31 170]
[35 166]
[36 165]
[39 160]
[40 159]
[41 158]
[42 157]
[43 156]
[45 154]
[46 153]
[47 152]
[48 151]
[49 150]
[55 144]
[56 143]
[63 139]
[64 138]
[65 137]
[66 136]
[67 135]
[68 134]
[69 133]
[70 132]
[73 129]
[74 128]
[75 127]
[76 125]
[77 124]
[78 123]
[79 122]
[80 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[89 114]
[90 113]
[91 111]
[92 110]
[93 109]
[94 108]
[95 106]
[96 105]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
