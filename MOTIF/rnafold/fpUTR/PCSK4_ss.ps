%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:35:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUGCGUUGCUAUGGCGCCGGGGGCGGGUCGGACGCCUGGGCCCACUCGGCGGUUUGGCGGGAGGGAGGGGAUUUGCGCAGGCCCCGCUCCCGCCCCGCCUCC\
) } def
/len { sequence length } bind def

/coor [
[95.50607300 137.37016296]
[85.04221344 134.53967285]
[75.81896210 128.84443665]
[68.60130310 120.75683594]
[63.98786926 110.94763947]
[62.36130524 100.23044586]
[47.64408112 97.33160400]
[32.92685318 94.43276978]
[18.20962715 91.53392792]
[3.49240208 88.63508606]
[-6.84155130 97.42572021]
[-20.16232300 98.58920288]
[-31.52630997 91.92108154]
[-36.84740448 80.08157349]
[-51.47132492 76.74375916]
[-66.09524536 73.40594482]
[-75.32743835 74.55095673]
[-81.10357666 69.74333954]
[-95.62110138 65.96953583]
[-110.13862610 62.19573593]
[-121.74069977 68.07192230]
[-133.83027649 64.51402283]
[-139.99180603 53.98517609]
[-154.38993835 49.77876663]
[-168.78807068 45.57235718]
[-183.18618774 41.36594391]
[-197.58432007 37.15953445]
[-210.49061584 45.98912430]
[-226.04780579 44.40554047]
[-236.91027832 33.15650177]
[-237.94908142 17.55346107]
[-228.67375183 4.96369648]
[-213.46379089 1.33171046]
[-199.50090027 8.37241554]
[-193.37791443 22.76140594]
[-178.97978210 26.96781731]
[-164.58164978 31.17422676]
[-150.18353271 35.38063812]
[-135.78540039 39.58704758]
[-119.07560730 34.46056747]
[-106.36482239 47.67821503]
[-91.84729767 51.45201874]
[-77.32978058 55.22581863]
[-62.75742722 58.78202438]
[-48.13351059 62.11983871]
[-33.50959015 65.45764923]
[-19.75393105 55.91199112]
[-3.00573850 59.25640106]
[6.39124107 73.91786194]
[21.10846710 76.81670380]
[35.82569122 79.71553802]
[50.54291916 82.61437988]
[65.26014709 85.51322174]
[76.99536133 70.20887756]
[94.77007294 62.72571564]
[113.91782379 65.02831268]
[129.41166687 76.51216888]
[137.18395996 94.16237640]
[152.16885376 94.83535004]
[167.15374756 95.50831604]
[182.13864136 96.18128967]
[197.12353516 96.85426331]
[212.10842896 97.52723694]
[228.15048218 88.64337921]
[242.60685730 98.46740723]
[257.60516357 98.69179535]
[272.60348511 98.91618347]
[287.60180664 99.14057922]
[302.60012817 99.36496735]
[317.60012817 99.36496735]
[332.59844971 99.14057922]
[347.59677124 98.91618347]
[351.54656982 96.32144165]
[355.70062256 95.33212280]
[359.49407959 95.79907990]
[362.47869873 97.39437866]
[364.37399292 99.66965485]
[379.29180908 101.23757935]
[394.04495239 94.07676697]
[407.46939087 103.49573517]
[405.75518799 119.80504608]
[390.66583252 126.22708130]
[377.72390747 116.15541077]
[362.80606079 114.58747864]
[347.82116699 113.91450500]
[332.82284546 114.13890076]
[317.82452393 114.36328888]
[311.07327271 117.66443634]
[302.37573242 114.36328888]
[287.37741089 114.13890076]
[272.37908936 113.91450500]
[257.38076782 113.69011688]
[242.38246155 113.46572876]
[233.39123535 121.71066284]
[220.79005432 121.54701996]
[211.43547058 112.51213074]
[196.45056152 111.83915710]
[181.46566772 111.16618347]
[166.48077393 110.49321747]
[151.49588013 109.82024384]
[136.51098633 109.14727020]
[132.38995361 119.17329407]
[125.58248138 127.60906982]
[116.65318298 133.75494385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 53]
[7 52]
[8 51]
[9 50]
[10 49]
[14 46]
[15 45]
[16 44]
[18 43]
[19 42]
[20 41]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[58 101]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[70 87]
[71 86]
[72 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
