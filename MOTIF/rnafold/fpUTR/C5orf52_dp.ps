%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:50 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (C5orf52)
} def

/sequence { (\
CACCUAGGUGGGCUGGCAACCAGCCACCAGUUUCCAACUCUUUCUCCAACAGGGAAGCCGCA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.105757186 ubox
2 9 0.106064298 ubox
2 31 0.114159048 ubox
3 8 0.106016911 ubox
3 11 0.003449704 ubox
3 30 0.114281595 ubox
3 53 0.019613242 ubox
3 54 0.015380054 ubox
4 10 0.005370026 ubox
4 30 0.319169832 ubox
4 52 0.019672678 ubox
4 53 0.015376085 ubox
4 57 0.016219001 ubox
5 29 0.335406571 ubox
5 51 0.018746114 ubox
5 52 0.014586422 ubox
5 56 0.014843299 ubox
6 32 0.007908147 ubox
6 33 0.003667283 ubox
7 28 0.992325300 ubox
7 31 0.007634733 ubox
7 35 0.006834994 ubox
7 59 0.017265216 ubox
8 27 0.993258882 ubox
8 34 0.006816627 ubox
8 58 0.017070899 ubox
8 61 0.032644969 ubox
9 26 0.981034560 ubox
9 29 0.011503279 ubox
9 57 0.014807757 ubox
9 60 0.032647560 ubox
10 25 0.801315576 ubox
10 28 0.012423362 ubox
10 35 0.003197533 ubox
10 59 0.032457605 ubox
11 24 0.567018822 ubox
11 25 0.597569104 ubox
11 27 0.009030797 ubox
11 28 0.014861377 ubox
11 58 0.012857839 ubox
11 59 0.008149911 ubox
12 24 0.823453286 ubox
12 27 0.014962406 ubox
12 31 0.003823478 ubox
12 58 0.008287720 ubox
13 23 0.999335873 ubox
13 30 0.004083684 ubox
13 57 0.008392949 ubox
14 22 0.999561840 ubox
14 26 0.016445781 ubox
14 29 0.003864604 ubox
14 56 0.006135911 ubox
15 21 0.999763520 ubox
15 25 0.018003927 ubox
15 28 0.003638748 ubox
16 20 0.983614401 ubox
16 24 0.018023791 ubox
16 27 0.003550204 ubox
17 23 0.018026320 ubox
29 39 0.246862633 ubox
29 41 0.023222952 ubox
29 45 0.004963217 ubox
30 38 0.264132951 ubox
30 40 0.026254947 ubox
30 44 0.005754822 ubox
30 50 0.009768380 ubox
30 58 0.832122619 ubox
30 61 0.042954670 ubox
31 37 0.261285224 ubox
31 49 0.009698649 ubox
31 55 0.003323230 ubox
31 56 0.077786777 ubox
31 57 0.834374330 ubox
31 60 0.041398121 ubox
32 36 0.217597069 ubox
32 48 0.008884834 ubox
32 55 0.093309550 ubox
32 56 0.835232268 ubox
32 57 0.004672049 ubox
33 54 0.098138690 ubox
33 55 0.836659556 ubox
33 56 0.004204189 ubox
34 53 0.106349955 ubox
34 54 0.835806364 ubox
35 52 0.113206292 ubox
35 53 0.831211564 ubox
36 42 0.022752533 ubox
36 43 0.034322612 ubox
37 41 0.018128017 ubox
37 42 0.028809828 ubox
38 52 0.326077716 ubox
38 53 0.017203925 ubox
38 54 0.037239671 ubox
38 57 0.046322655 ubox
39 51 0.318482779 ubox
39 52 0.027023072 ubox
39 53 0.043989002 ubox
39 54 0.011936877 ubox
39 55 0.027599524 ubox
39 56 0.041333284 ubox
40 52 0.158583255 ubox
40 53 0.027755388 ubox
40 54 0.030824747 ubox
40 57 0.310764381 ubox
41 49 0.248647653 ubox
41 51 0.151427515 ubox
41 52 0.049266526 ubox
41 53 0.030107922 ubox
41 55 0.034756887 ubox
41 56 0.309605966 ubox
41 57 0.302940225 ubox
42 48 0.240520036 ubox
42 49 0.115494588 ubox
42 51 0.049982588 ubox
42 52 0.035420910 ubox
42 53 0.003286797 ubox
42 54 0.036747595 ubox
42 55 0.303780563 ubox
42 56 0.389884609 ubox
42 57 0.022426929 ubox
43 48 0.105286609 ubox
43 51 0.032577899 ubox
43 52 0.016322270 ubox
43 53 0.041443065 ubox
43 54 0.295706709 ubox
43 55 0.412661287 ubox
43 56 0.026417425 ubox
44 52 0.108792106 ubox
44 53 0.293656369 ubox
44 54 0.418282881 ubox
44 57 0.034395605 ubox
45 51 0.104902256 ubox
45 52 0.275528163 ubox
45 53 0.319677386 ubox
45 54 0.070954514 ubox
45 55 0.101656522 ubox
45 56 0.024844366 ubox
46 52 0.322112307 ubox
46 53 0.287757441 ubox
46 54 0.109120558 ubox
47 52 0.292394559 ubox
47 53 0.108969242 ubox
52 59 0.058230924 ubox
53 58 0.058246851 ubox
53 59 0.014422309 ubox
54 58 0.014265480 ubox
7 28 0.9500000 lbox
8 27 0.9500000 lbox
9 26 0.9500000 lbox
10 25 0.9500000 lbox
11 24 0.9500000 lbox
13 23 0.9500000 lbox
14 22 0.9500000 lbox
15 21 0.9500000 lbox
16 20 0.9500000 lbox
30 58 0.9500000 lbox
31 57 0.9500000 lbox
32 56 0.9500000 lbox
33 55 0.9500000 lbox
34 54 0.9500000 lbox
35 53 0.9500000 lbox
showpage
end
%%EOF
