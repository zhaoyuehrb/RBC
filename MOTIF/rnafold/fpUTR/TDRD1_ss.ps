%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGAGGCCAGGAGGGCGCACUGGGGAUUGGAGGCGAGGGAAGUGCAGGGCGCAUCCCAGGCGGCAGGGCUCCCAGCAUCGGCAGUCGCCAUCACCGCCAGACCGCAGAGACAGGUUCGGAUCCGCGGUCCUCUUGCCUCUUUCCAGGCCUCG\
) } def
/len { sequence length } bind def

/coor [
[84.31256866 650.61407471]
[70.18825531 643.00598145]
[67.47203827 627.19451904]
[78.24757385 615.30889893]
[78.85939789 600.32141113]
[79.47122955 585.33386230]
[80.08306122 570.34637451]
[80.69488525 555.35888672]
[81.30671692 540.37133789]
[74.09497833 527.33905029]
[82.38873291 513.86596680]
[83.00056458 498.87844849]
[83.61238861 483.89093018]
[84.22422028 468.90341187]
[84.83604431 453.91589355]
[85.44787598 438.92837524]
[76.46366119 423.88345337]
[86.36393738 408.39022827]
[86.66992188 393.39334106]
[86.97589874 378.39645386]
[78.81006622 369.42098999]
[78.97872925 356.88626099]
[87.93867493 347.55358887]
[88.55049896 332.56607056]
[89.16233063 317.57855225]
[89.77416229 302.59103394]
[90.38598633 287.60351562]
[90.99781799 272.61599731]
[91.30379486 257.61914062]
[91.30379486 242.61912537]
[91.30379486 227.61912537]
[91.30379486 212.61912537]
[80.62292480 202.30145264]
[80.40924072 187.08930969]
[91.30379486 175.95619202]
[91.30379486 160.95619202]
[91.30379486 145.95619202]
[82.93846893 133.50543213]
[69.05117798 127.83593750]
[55.16389084 122.16643524]
[41.27660370 116.49693298]
[25.57569695 118.44426727]
[16.71698570 106.47044373]
[2.82969761 100.80094147]
[-11.05759048 95.13144684]
[-24.94487762 89.46194458]
[-41.89436722 89.07309723]
[-46.21279907 72.67835999]
[-31.65423584 63.99017334]
[-19.27537727 75.57465363]
[-5.38808966 81.24415588]
[8.49919796 86.91365814]
[22.38648605 92.58316040]
[37.09408188 90.23030090]
[46.94610214 102.60964966]
[60.83338928 108.27914429]
[74.72068024 113.94864655]
[88.60796356 119.61814880]
[79.00736237 97.51925659]
[94.38188934 81.23129272]
[95.90923309 66.30925751]
[97.43657684 51.38721848]
[98.96392059 36.46517944]
[100.49126434 21.54314041]
[87.75194550 10.46011734]
[84.14272308 -5.86547804]
[90.88765717 -20.98302078]
[105.15908813 -29.03897285]
[106.38172913 -43.98906326]
[107.60437012 -58.93915176]
[95.67832184 -66.31126404]
[88.13913727 -78.05371094]
[86.41606140 -91.83448029]
[90.78996277 -104.94596100]
[100.34944916 -114.83688354]
[113.18003845 -119.60875702]
[114.70738220 -134.53079224]
[107.50647736 -149.26438904]
[116.88888550 -162.71438599]
[133.20280457 -161.04457092]
[139.66586304 -145.97271729]
[129.62942505 -133.00344849]
[128.10208130 -118.08141327]
[141.41098022 -108.96600342]
[148.36259460 -94.30571747]
[146.98187256 -78.04560089]
[137.55021667 -64.61399841]
[122.55445862 -57.71651077]
[121.33181763 -42.76642227]
[120.10917664 -27.81633377]
[131.02143860 -20.06693840]
[136.71136475 -7.83297300]
[135.58897400 5.72149277]
[127.84170532 17.03187370]
[115.41329956 23.07048607]
[113.88595581 37.99252319]
[112.35861206 52.91456223]
[110.83126831 67.83660126]
[109.30392456 82.75863647]
[119.22271729 92.53042603]
[120.45278168 107.11325836]
[111.48345184 119.56478119]
[125.95905304 115.63325500]
[140.43466187 111.70172882]
[144.98393250 96.96037292]
[156.79553223 87.03616333]
[172.10038757 85.09588623]
[186.01480103 91.75866699]
[194.09872437 104.89844513]
[193.77259827 120.32236481]
[185.14050293 133.10870361]
[170.95690918 139.17738342]
[155.74772644 136.59193420]
[144.36618042 126.17733002]
[129.89057922 130.10885620]
[115.41497040 134.04039001]
[106.30379486 145.95619202]
[106.30379486 160.95619202]
[106.30379486 175.95619202]
[117.19834900 187.08930969]
[116.98466492 202.30145264]
[106.30379486 212.61912537]
[106.30379486 227.61912537]
[106.30379486 242.61912537]
[106.30379486 257.61914062]
[109.31745148 263.61318970]
[108.87285614 269.35504150]
[105.98533630 273.22784424]
[105.37350464 288.21536255]
[104.76168060 303.20288086]
[104.14984894 318.19039917]
[103.53801727 333.17791748]
[102.92619324 348.16543579]
[111.86034393 364.23516846]
[101.97277832 378.70245361]
[101.66679382 393.69931030]
[101.36081696 408.69619751]
[109.73318481 418.55938721]
[109.13489532 431.08096313]
[100.43539429 439.54022217]
[99.82356262 454.52774048]
[99.21173859 469.51525879]
[98.59990692 484.50277710]
[97.98807526 499.49029541]
[97.37625122 514.47778320]
[104.54421997 528.58209229]
[96.29423523 540.98315430]
[95.68240356 555.97070312]
[95.07057190 570.95819092]
[94.45874786 585.94573975]
[93.84691620 600.93322754]
[93.23508453 615.92077637]
[103.00598145 628.64508057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 152]
[5 151]
[6 150]
[7 149]
[8 148]
[9 147]
[11 145]
[12 144]
[13 143]
[14 142]
[15 141]
[16 140]
[18 137]
[19 136]
[20 135]
[23 133]
[24 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 125]
[30 124]
[31 123]
[32 122]
[35 119]
[36 118]
[37 117]
[38 58]
[39 57]
[40 56]
[41 55]
[43 53]
[44 52]
[45 51]
[46 50]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[68 90]
[69 89]
[70 88]
[76 83]
[77 82]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
