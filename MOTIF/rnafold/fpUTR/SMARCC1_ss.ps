%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGCGGGGCCGGGAAGCGGCAGUGGCGGCUACGCGCGCGGGGGUGCGCGCGGGAACGACCGGGAAACACCGCGAGGGCCGGGGUGGGCCAGGCUGUGGGGACGACGGGCUGCGACG\
) } def
/len { sequence length } bind def

/coor [
[60.16851807 244.88221741]
[66.68244934 258.39401245]
[66.44862366 273.39218140]
[59.51665115 286.69436646]
[47.35739517 295.47799683]
[32.55085754 297.87936401]
[18.23877144 293.38891602]
[7.45794106 282.95947266]
[2.49589539 268.80395508]
[4.40543652 253.92619324]
[-6.81211901 263.88442993]
[-18.02967453 273.84268188]
[-29.24723053 283.80090332]
[-31.63112640 299.66586304]
[-45.59272003 307.56860352]
[-60.42186737 301.44683838]
[-64.74291992 285.99667358]
[-55.24113083 273.07012939]
[-39.20546341 272.58334351]
[-27.98790932 262.62512207]
[-16.77035332 252.66687012]
[-5.55279827 242.70863342]
[-2.85860395 233.63754272]
[6.57901669 228.67378235]
[14.80939388 216.13340759]
[15.32416916 201.24771118]
[29.36478424 193.95581055]
[37.59516144 181.41545105]
[45.82553864 168.87507629]
[54.05591583 156.33470154]
[62.28629303 143.79432678]
[70.51667023 131.25396729]
[54.77206039 104.68212891]
[60.63023758 72.58724213]
[48.90276337 63.23489761]
[37.17529297 53.88255310]
[25.44782066 44.53020477]
[13.72034836 35.17785645]
[1.99287605 25.82551003]
[-9.73459625 16.47316360]
[-26.02239418 14.56536961]
[-32.26473618 -0.59923452]
[-22.04003334 -13.42060471]
[-5.86658669 -10.70921326]
[-0.38224918 4.74569082]
[11.34522343 14.09803772]
[23.07269478 23.45038414]
[34.80016708 32.80273056]
[46.52764130 42.15507889]
[58.25511169 51.50742722]
[69.98258209 60.85977173]
[83.13481140 53.64735413]
[81.55375671 38.73091125]
[79.97270203 23.81446648]
[67.52570343 14.07548428]
[65.69380188 -1.62227654]
[75.56384277 -13.96561241]
[91.28009033 -15.63144207]
[103.51838684 -5.63145638]
[105.01795959 10.10152817]
[94.88914490 22.23341370]
[96.47019958 37.14985657]
[98.05125427 52.06629944]
[107.16065979 53.40829849]
[115.68717194 56.43405914]
[123.32898712 60.97119904]
[129.82838440 66.79518890]
[134.98036194 73.63974762]
[138.63885498 81.20862579]
[153.06623840 77.10368347]
[167.49362183 72.99873352]
[178.64956665 61.78020477]
[193.00840759 65.73915863]
[207.43579102 61.63421249]
[212.63407898 49.12731552]
[223.94349670 42.03595352]
[237.07575989 42.78238297]
[247.20333862 50.86594772]
[261.73403931 47.14326859]
[276.26477051 43.42059326]
[290.79547119 39.69791794]
[298.63104248 25.97276497]
[313.89852905 21.88883591]
[327.54010010 29.86905098]
[331.46237183 45.17889404]
[323.33837891 58.73530197]
[307.98791504 62.49550247]
[294.51815796 54.22863007]
[279.98745728 57.95130920]
[265.45672607 61.67398453]
[250.92601013 65.39665985]
[243.04342651 80.18824768]
[226.59501648 84.85243225]
[211.54072571 76.06159973]
[197.11334229 80.16654205]
[186.98934937 91.09146118]
[171.59857178 87.42612457]
[157.17118835 91.53106689]
[142.74380493 95.63600922]
[142.72463989 104.54776764]
[140.86743164 113.26388550]
[137.25205994 121.40937042]
[132.03407288 128.63380432]
[125.43795776 134.62638855]
[117.74748230 139.12931824]
[109.29348755 141.94886780]
[100.43968201 142.96374512]
[91.56696320 142.13027954]
[83.05703735 139.48434448]
[74.82666016 152.02470398]
[66.59628296 164.56507874]
[58.36590958 177.10545349]
[50.13553238 189.64582825]
[41.90515518 202.18618774]
[40.80168915 217.96887207]
[27.34976387 224.36378479]
[19.11938667 236.90415955]
[33.56449890 232.86204529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 22]
[11 21]
[12 20]
[13 19]
[24 117]
[25 116]
[27 114]
[28 113]
[29 112]
[30 111]
[31 110]
[32 109]
[34 51]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[52 63]
[53 62]
[54 61]
[69 99]
[70 98]
[71 97]
[73 95]
[74 94]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
