%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUGCCAGGGCCACCACCCCUGGGGAGGAGCCAUUGGGCUACUCUUGAGGGGCCAGAGGUGAGCCUGAACACUCCACAGCUGCUGCUCCUAGGGAGGAGCUGGUACC\
) } def
/len { sequence length } bind def

/coor [
[146.25282288 177.41017151]
[143.83181763 168.00598145]
[144.16714478 158.27719116]
[147.24488831 149.01695251]
[135.70886230 139.42944336]
[124.17284393 129.84194946]
[112.63682556 120.25444031]
[98.38259125 123.81838989]
[84.74101257 118.36014557]
[76.87940216 105.94724274]
[77.77567291 91.28157806]
[66.23964691 81.69407654]
[54.70362854 72.10657501]
[43.16761017 62.51906967]
[31.49707413 53.09576797]
[19.69435883 43.83855820]
[7.89164305 34.58135223]
[-3.91107249 25.32414246]
[-26.20940399 24.14891815]
[-34.22203064 4.10423565]
[-46.99496841 -3.76037359]
[-59.76790619 -11.62498283]
[-72.54084015 -19.48959160]
[-85.31378174 -27.35420036]
[-101.12174988 -28.00119591]
[-107.90267181 -41.26273346]
[-120.67560577 -49.12734222]
[-133.44854736 -56.99195099]
[-146.22148132 -64.85655975]
[-158.99441528 -72.72116852]
[-174.80239868 -73.36816406]
[-181.58331299 -86.62969971]
[-194.35624695 -94.49430847]
[-207.12918091 -102.35892487]
[-219.90213013 -110.22353363]
[-236.30108643 -110.14648438]
[-244.33247375 -124.44434357]
[-235.73428345 -138.40870667]
[-219.35159302 -137.67420959]
[-212.03752136 -122.99646759]
[-199.26457214 -115.13185883]
[-186.49163818 -107.26725006]
[-173.71870422 -99.40264130]
[-158.82434082 -99.31817627]
[-151.12980652 -85.49411011]
[-138.35687256 -77.62950134]
[-125.58393860 -69.76489258]
[-112.81099701 -61.90028000]
[-100.03806305 -54.03567123]
[-85.14369965 -53.95120621]
[-77.44917297 -40.12714005]
[-64.67623138 -32.26252747]
[-51.90329742 -24.39792061]
[-39.13035965 -16.53330994]
[-26.35742378 -8.66870117]
[-18.96472359 -12.21555424]
[-10.67391777 -12.46684170]
[-2.90382290 -9.30254555]
[2.98467755 -3.19375348]
[5.92686129 4.86590290]
[5.34613609 13.52142715]
[17.14885139 22.77863503]
[28.95156670 32.03584290]
[40.75428391 41.29305267]
[48.06627655 42.96921158]
[52.75511551 50.98304749]
[64.29113770 60.57055283]
[75.82715607 70.15805817]
[87.36317444 79.74555969]
[101.61740875 76.18161011]
[115.25898743 81.63985443]
[123.12059784 94.05275726]
[122.22432709 108.71842194]
[133.76034546 118.30592346]
[145.29637146 127.89342499]
[156.83239746 137.48092651]
[176.86006165 130.58514404]
[196.97511292 136.79756165]
[209.47207642 153.57902527]
[209.65798950 174.37260437]
[222.64837646 181.87260437]
[235.63874817 189.37260437]
[248.62913513 196.87260437]
[261.61950684 204.37260437]
[277.43945312 204.57200623]
[284.59295654 217.63633728]
[297.58334351 225.13633728]
[313.40328979 225.33572388]
[320.55679321 238.40005493]
[333.54714966 245.90005493]
[349.93737793 245.35897827]
[358.37017822 259.42382812]
[350.17059326 273.62591553]
[333.77368164 273.35531616]
[326.04714966 258.89044189]
[313.05679321 251.39044189]
[298.16598511 251.72749329]
[290.08334351 238.12670898]
[277.09295654 230.62670898]
[262.20217896 230.96377563]
[254.11952209 217.36299133]
[241.12913513 209.86299133]
[228.13874817 202.36299133]
[215.14837646 194.86299133]
[202.15798950 187.36299133]
[194.77322388 193.40992737]
[185.95904541 197.13340759]
[176.42840576 198.21768188]
[166.95631409 196.56106567]
[158.31686401 192.28535461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 76]
[5 75]
[6 74]
[7 73]
[11 69]
[12 68]
[13 67]
[14 66]
[15 64]
[16 63]
[17 62]
[18 61]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[32 43]
[33 42]
[34 41]
[35 40]
[80 105]
[81 104]
[82 103]
[83 102]
[84 101]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
