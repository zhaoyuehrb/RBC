%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:33 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (RECQL4)
} def

/sequence { (\
CUGGACGAUCGCAAGCGCGGAGGCCGGGCGGGCGCGCGCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 15 0.010312897 ubox
1 20 0.012336982 ubox
1 22 0.003841246 ubox
1 27 0.100405531 ubox
2 11 0.107746250 ubox
2 13 0.379212246 ubox
2 14 0.024019428 ubox
2 19 0.012256872 ubox
2 21 0.004463609 ubox
2 26 0.102288207 ubox
2 30 0.003294676 ubox
2 38 0.011053814 ubox
2 40 0.127883153 ubox
3 10 0.149184181 ubox
3 12 0.409944407 ubox
3 18 0.012016917 ubox
3 25 0.105183020 ubox
3 29 0.003497330 ubox
3 35 0.004221382 ubox
3 37 0.014645008 ubox
3 39 0.172779391 ubox
3 42 0.483664946 ubox
4 9 0.087585906 ubox
4 10 0.266897394 ubox
4 24 0.105182790 ubox
4 41 0.488888295 ubox
5 9 0.232575118 ubox
6 17 0.010280211 ubox
6 19 0.005618546 ubox
6 26 0.003940316 ubox
6 34 0.004634285 ubox
6 36 0.165915964 ubox
6 38 0.476153464 ubox
6 40 0.366974647 ubox
7 16 0.010502964 ubox
7 18 0.005487569 ubox
7 25 0.003930942 ubox
7 33 0.004332561 ubox
7 35 0.162954209 ubox
7 37 0.482613159 ubox
7 39 0.366024326 ubox
9 20 0.136373752 ubox
9 21 0.027903479 ubox
9 31 0.003179686 ubox
10 17 0.005576422 ubox
10 19 0.183218979 ubox
10 20 0.020719032 ubox
10 30 0.008957223 ubox
10 34 0.611677905 ubox
10 36 0.151329590 ubox
10 38 0.024962033 ubox
10 40 0.071671005 ubox
11 16 0.005624887 ubox
11 18 0.185187715 ubox
11 29 0.008921864 ubox
11 33 0.615991399 ubox
11 35 0.150085319 ubox
11 37 0.025385071 ubox
11 39 0.075118375 ubox
11 41 0.184704606 ubox
12 17 0.184932424 ubox
12 28 0.008893281 ubox
12 32 0.616023596 ubox
12 34 0.149554430 ubox
12 36 0.025289290 ubox
12 38 0.074815774 ubox
12 40 0.184414773 ubox
15 24 0.006979302 ubox
15 29 0.634202655 ubox
15 33 0.023063563 ubox
15 35 0.027608473 ubox
15 37 0.117704523 ubox
15 39 0.222028248 ubox
15 41 0.703746796 ubox
16 23 0.006996842 ubox
16 28 0.634199483 ubox
16 30 0.015958546 ubox
16 32 0.023105380 ubox
16 34 0.027664302 ubox
16 36 0.117919033 ubox
16 38 0.222722546 ubox
16 40 0.705476432 ubox
17 24 0.009996669 ubox
17 29 0.016012247 ubox
17 33 0.027636232 ubox
17 35 0.117932025 ubox
17 37 0.222763446 ubox
17 39 0.705558993 ubox
18 23 0.010128788 ubox
18 26 0.634081005 ubox
18 28 0.015700779 ubox
18 30 0.023056000 ubox
18 32 0.027607633 ubox
18 34 0.117915835 ubox
18 36 0.222758462 ubox
18 38 0.705556142 ubox
19 25 0.634139189 ubox
19 29 0.022990652 ubox
19 33 0.101801124 ubox
19 35 0.220193071 ubox
19 37 0.704691266 ubox
20 24 0.623902884 ubox
22 42 0.151573520 ubox
23 29 0.100344280 ubox
23 33 0.741372313 ubox
23 35 0.004216236 ubox
23 41 0.152908666 ubox
24 28 0.099639248 ubox
24 31 0.036342931 ubox
24 32 0.741940226 ubox
24 34 0.003179908 ubox
24 40 0.128389268 ubox
25 30 0.040446511 ubox
25 31 0.741621946 ubox
25 34 0.004510408 ubox
25 38 0.097426755 ubox
25 40 0.084027133 ubox
26 33 0.005243896 ubox
26 37 0.097437255 ubox
26 39 0.119202797 ubox
26 42 0.011699810 ubox
27 41 0.011907765 ubox
27 42 0.021623800 ubox
28 35 0.097501737 ubox
28 37 0.126718488 ubox
28 39 0.050614321 ubox
28 41 0.035381973 ubox
29 34 0.097371114 ubox
29 36 0.126748360 ubox
29 38 0.050658231 ubox
29 40 0.035438346 ubox
30 35 0.126193968 ubox
30 37 0.050521523 ubox
30 39 0.035153470 ubox
30 42 0.013704566 ubox
31 41 0.013082210 ubox
31 42 0.075839111 ubox
32 39 0.013549753 ubox
32 41 0.076896267 ubox
33 38 0.013677804 ubox
33 40 0.077021386 ubox
34 39 0.075040723 ubox
34 41 0.021066491 ubox
35 40 0.021457830 ubox
15 41 0.9500000 lbox
16 40 0.9500000 lbox
17 39 0.9500000 lbox
18 38 0.9500000 lbox
19 37 0.9500000 lbox
23 33 0.9500000 lbox
24 32 0.9500000 lbox
25 31 0.9500000 lbox
showpage
end
%%EOF
