%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCUCCCGGCGCUGAGCGCUUUUCCUGCCCGCCCGGCUCAGCCCUGCGGACCCCGGGAGAAGUUUCCCAGAAAAAAUGCCCAGCGCGGCGCGGGGCUGCGGAGUCGUCCGGAGCCGCUGCGCGAUUUAUCAGCAAGACUGUUGAACGCAUAACUGCCCAAG\
) } def
/len { sequence length } bind def

/coor [
[90.13760376 251.73327637]
[88.71176147 236.80119324]
[87.28591919 221.86912537]
[85.86007690 206.93704224]
[71.83184814 201.87007141]
[61.35162735 191.17079163]
[56.53638077 176.92388916]
[58.39192200 161.93798828]
[66.60337830 149.19204712]
[79.58707428 141.24314880]
[78.16123199 126.31107330]
[69.00151825 114.43254089]
[54.92247772 109.25753021]
[40.84343719 104.08252716]
[26.76440048 98.90752411]
[12.68536186 93.73251343]
[-1.39367640 88.55751038]
[-17.01592445 91.05869293]
[-26.29240227 79.40553284]
[-40.37144089 74.23052979]
[-55.01330185 70.97231293]
[-69.95827484 69.68869019]
[-84.90325165 68.40506744]
[-99.84822845 67.12143707]
[-114.79320526 65.83781433]
[-129.73817444 64.55419159]
[-144.68315125 63.27056503]
[-159.62812805 61.98693848]
[-174.57310486 60.70331573]
[-189.51808167 59.41968918]
[-208.27433777 69.72267914]
[-224.76977539 57.35892487]
[-239.76365662 56.93058777]
[-254.75753784 56.50224686]
[-269.75143433 56.07390594]
[-281.19113159 66.64609528]
[-296.39093018 65.99810791]
[-306.39941406 55.02695465]
[-321.39331055 54.59861374]
[-336.38717651 54.17027283]
[-352.39251709 59.76184464]
[-362.19628906 45.92990875]
[-351.61886597 32.68021393]
[-335.95883179 39.17639160]
[-320.96496582 39.60473251]
[-305.97106934 40.03307343]
[-295.35260010 29.65118790]
[-280.14056396 29.87199402]
[-269.32308960 41.08002090]
[-254.32920837 41.50836182]
[-239.33532715 41.93670273]
[-224.34143066 42.36504364]
[-218.91372681 35.23908997]
[-210.67962646 31.37505913]
[-201.45419312 31.76568222]
[-193.33703613 36.44980240]
[-188.23446655 44.47471237]
[-173.28948975 45.75833893]
[-158.34451294 47.04196548]
[-143.39953613 48.32558823]
[-128.45455933 49.60921478]
[-113.50958252 50.89283752]
[-98.56460571 52.17646408]
[-83.61962891 53.46009064]
[-68.67465210 54.74371338]
[-53.72967529 56.02733994]
[-65.60356140 46.86160278]
[-73.15081024 33.89861298]
[-75.25982666 19.04761696]
[-71.61997986 4.49593210]
[-62.76737213 -7.61320925]
[-50.00584412 -15.49632168]
[-35.21497345 -17.99234772]
[-20.57322121 -14.73366070]
[-8.23708248 -6.20021582]
[-0.02347746 6.35114670]
[2.85785890 21.07180977]
[-0.01744807 35.79365158]
[-8.22591114 48.34837723]
[-20.55855370 56.88687134]
[-35.19643402 60.15148926]
[-21.11739731 65.32649231]
[-6.50217628 62.45515823]
[3.78132915 74.47846985]
[17.86036682 79.65348053]
[31.93940544 84.82848358]
[46.01844406 90.00348663]
[60.09748077 95.17849731]
[74.17652130 100.35350037]
[86.41087341 73.18077087]
[120.66553497 72.61791992]
[133.04760742 64.15127563]
[145.42968750 55.68462372]
[157.81176758 47.21797562]
[170.19384766 38.75132751]
[182.57592773 30.28467941]
[194.87684631 21.70054054]
[207.09548950 12.99968624]
[219.31411743 4.29883289]
[231.53276062 -4.40202093]
[238.28598022 -18.70952415]
[253.14137268 -19.78944778]
[265.36001587 -28.49030113]
[277.57864380 -37.19115448]
[289.79730225 -45.89200974]
[296.11386108 -61.02585220]
[312.41079712 -62.85383224]
[321.92324829 -49.49547958]
[314.86560059 -34.69272232]
[298.49813843 -33.67337036]
[286.27951050 -24.97251701]
[274.06088257 -16.27166176]
[261.84222412 -7.57080889]
[255.96298218 6.11435175]
[240.23361206 7.81661844]
[228.01496887 16.51747131]
[215.79634094 25.21832657]
[203.57769775 33.91917801]
[199.93666077 40.39001465]
[191.04257202 42.66675949]
[178.66049194 51.13340759]
[166.27841187 59.60005569]
[153.89634705 68.06670380]
[141.51426697 76.53334808]
[129.13218689 85.00000000]
[129.13218689 92.50000000]
[142.12261963 85.00009155]
[155.11288452 92.50028229]
[155.11256409 107.50028229]
[142.12196350 114.99990845]
[129.13218689 107.50000000]
[129.13218689 115.00000000]
[141.51426697 123.46665192]
[153.89634705 131.93330383]
[166.27841187 140.39994812]
[178.66049194 148.86659241]
[191.04257202 157.33323669]
[207.42645264 158.04080200]
[214.76464844 172.70649719]
[205.50827026 186.24353027]
[189.17947388 184.72616577]
[182.57592773 169.71531677]
[170.19384766 161.24867249]
[157.81176758 152.78202820]
[145.42968750 144.31536865]
[133.04760742 135.84872437]
[120.66553497 127.38208008]
[105.61585236 129.53637695]
[93.09331512 124.88523102]
[94.51914978 139.81730652]
[108.77256012 145.16537476]
[119.24780273 156.12695312]
[123.90591431 170.49087524]
[121.87392426 185.39161682]
[113.60794830 197.88093567]
[100.79216003 205.51119995]
[102.21800232 220.44328308]
[103.64383698 235.37535095]
[105.06967926 250.30743408]
[117.41471863 260.17532349]
[119.08326721 275.89129639]
[109.08539581 288.13131714]
[93.35266876 289.63360596]
[81.21903992 279.50689697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 159]
[2 158]
[3 157]
[4 156]
[10 150]
[11 149]
[12 89]
[13 88]
[14 87]
[15 86]
[16 85]
[17 84]
[19 82]
[20 81]
[21 66]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[30 57]
[32 52]
[33 51]
[34 50]
[35 49]
[38 46]
[39 45]
[40 44]
[91 125]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 118]
[98 117]
[99 116]
[100 115]
[102 113]
[103 112]
[104 111]
[105 110]
[132 147]
[133 146]
[134 145]
[135 144]
[136 143]
[137 142]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
