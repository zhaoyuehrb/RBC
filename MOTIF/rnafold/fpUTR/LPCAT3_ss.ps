%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGCGCACGCCGUGGGCGGGCCCCGAGCCGGAAUUGGGGGUGAAGCGAUAGCGUUUUGCCCGCAUUCGGGGCGCGCGGAGCUGGGGGGUCCCUGUGGGGCUCCCGGAGUUAAG\
) } def
/len { sequence length } bind def

/coor [
[158.06074524 150.48280334]
[153.68019104 142.39314270]
[152.23707581 133.26298523]
[153.92506409 124.13024902]
[141.91136169 115.14853668]
[129.89767456 106.16683197]
[117.88397217 97.18512726]
[111.19417572 112.18694305]
[96.42211914 114.55834961]
[86.03504181 125.38002014]
[75.64797211 136.20169067]
[65.26089478 147.02337646]
[58.65484238 162.63735962]
[41.82232666 160.61184692]
[39.10896683 143.87643433]
[54.43921661 136.63629150]
[64.82629395 125.81462097]
[75.21337128 114.99294281]
[85.60044861 104.17127228]
[87.96708679 88.64041138]
[104.02876282 82.34981537]
[95.88783264 69.75119019]
[87.74691010 57.15256500]
[79.60597992 44.55393982]
[71.46505737 31.95531654]
[63.32413101 19.35669327]
[55.18320465 6.75806808]
[47.04227829 -5.84055567]
[42.99030304 8.60179424]
[30.73359299 17.24893570]
[15.76871681 16.22302818]
[4.80672741 5.98414135]
[2.76356936 -8.87605762]
[10.55550385 -21.69345856]
[24.68820953 -26.72005081]
[38.82365799 -21.70177460]
[33.22567368 -35.61804581]
[20.89717293 -45.53361893]
[23.32565880 -60.22891617]
[17.72767258 -74.14518738]
[12.12968826 -88.06145477]
[6.53170300 -101.97772217]
[0.93371809 -115.89399719]
[-4.66426706 -129.81027222]
[-10.26225185 -143.72653198]
[-15.86023712 -157.64280701]
[-21.45822144 -171.55906677]
[-27.05620575 -185.47534180]
[-40.29031754 -195.15988159]
[-38.25155640 -211.43180847]
[-23.03722572 -217.55195618]
[-10.29852486 -207.22444153]
[-13.13993645 -191.07333374]
[-7.54195213 -177.15705872]
[-1.94396698 -163.24078369]
[3.65401793 -149.32452393]
[9.25200272 -135.40824890]
[14.84998798 -121.49198151]
[20.44797325 -107.57570648]
[26.04595757 -93.65943909]
[31.64394188 -79.74317169]
[37.24192810 -65.82690430]
[49.17002487 -56.90671158]
[47.14194489 -41.21603012]
[52.73992920 -27.29975891]
[59.64090347 -13.98148155]
[67.78182983 -1.38285744]
[75.92275238 11.21576691]
[84.06368256 23.81439018]
[92.20460510 36.41301346]
[100.34553528 49.01163864]
[108.48645782 61.61026382]
[116.62738037 74.20888519]
[126.86567688 85.17142487]
[138.87937927 94.15313721]
[150.89308167 103.13484192]
[162.90676880 112.11654663]
[184.01277161 107.14430237]
[201.88551331 118.93069458]
[205.53251648 139.74826050]
[218.65733337 147.01045227]
[231.78213501 154.27264404]
[244.90695190 161.53482056]
[263.23974609 160.71704102]
[271.80233765 175.96859741]
[285.12060547 182.86956787]
[298.43890381 189.77055359]
[311.75717163 196.67152405]
[325.07543945 203.57249451]
[338.39373779 210.47348022]
[351.71200562 217.37445068]
[365.03027344 224.27542114]
[378.34857178 231.17640686]
[395.19360352 233.09498596]
[398.01318359 249.81282043]
[382.72921753 257.15017700]
[371.44757080 244.49467468]
[358.12930298 237.59370422]
[344.81103516 230.69273376]
[331.49273682 223.79174805]
[318.17446899 216.89077759]
[304.85620117 209.98980713]
[291.53790283 203.08882141]
[278.21963501 196.18785095]
[264.90136719 189.28688049]
[253.19236755 192.64665222]
[241.99987793 186.89440918]
[237.64476013 174.65963745]
[224.51995850 167.39744568]
[211.39514160 160.13525391]
[198.27033997 152.87307739]
[190.97828674 158.11375427]
[182.31495667 160.63894653]
[173.26136780 160.13224792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 77]
[5 76]
[6 75]
[7 74]
[9 19]
[10 18]
[11 17]
[12 16]
[21 73]
[22 72]
[23 71]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[80 111]
[81 110]
[82 109]
[83 108]
[85 105]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
