%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGAAGUUGUUCCGCGCUGGGCGGGCGAGCGGCUGUGGGAGAGCGGGCGGCGGGCCGGCGGGCGGACCGGGCCGGUGCUGGAGAAGUUUGCGCUGCGGUUCGUGAGCGCAGGGUGCGGGCCCCGCCGGCCGCUGCGCGCCCGCUGCC\
) } def
/len { sequence length } bind def

/coor [
[-39.61812973 247.74154663]
[-49.22881699 243.82388306]
[-60.98421860 253.14111328]
[-72.73962402 262.45831299]
[-84.49502563 271.77554321]
[-90.50411987 286.41116333]
[-105.28440857 288.25299072]
[-117.03981018 297.57022095]
[-128.79521179 306.88745117]
[-140.55061340 316.20465088]
[-152.30601501 325.52188110]
[-164.06141663 334.83908081]
[-175.51835632 344.52096558]
[-186.66552734 354.55792236]
[-197.81269836 364.59487915]
[-208.95986938 374.63183594]
[-220.10704041 384.66879272]
[-222.37919617 400.55014038]
[-236.28480530 408.55096436]
[-251.15667725 402.53375244]
[-255.58639526 387.11437988]
[-246.17584229 374.12127686]
[-230.14401245 373.52160645]
[-218.99682617 363.48464966]
[-207.84965515 353.44769287]
[-196.70248413 343.41073608]
[-185.55531311 333.37377930]
[-185.02554321 329.82452393]
[-182.70956421 326.36703491]
[-178.67529297 323.85687256]
[-173.37863159 323.08367920]
[-161.62322998 313.76647949]
[-149.86782837 304.44924927]
[-138.11242676 295.13204956]
[-126.35702515 285.81481934]
[-114.60162354 276.49758911]
[-109.43334961 262.52841187]
[-93.81224060 260.02014160]
[-82.05683899 250.70292664]
[-70.30143738 241.38571167]
[-58.54603577 232.06848145]
[-57.80908966 212.65776062]
[-42.87345886 199.77018738]
[-22.96262741 201.94908142]
[-11.81545448 191.91212463]
[-0.66828233 181.87515259]
[10.47889042 171.83819580]
[21.62606239 161.80123901]
[32.77323532 151.76428223]
[43.92040634 141.72732544]
[55.06758118 131.69036865]
[66.10903931 121.53722382]
[77.04356384 111.26902008]
[87.97809601 101.00080872]
[98.69518280 90.50585938]
[109.19013214 79.78877258]
[119.68508148 69.07167816]
[130.18003845 58.35459137]
[140.67498779 47.63750076]
[151.16993713 36.92041016]
[161.66488647 26.20332146]
[172.15983582 15.48623085]
[182.65478516 4.76914024]
[193.14973450 -5.94794989]
[190.70533752 -17.66294098]
[194.21382141 -28.97850418]
[202.68322754 -37.08928299]
[213.90727234 -40.04390717]
[225.03923035 -37.21361542]
[235.97375488 -47.48182297]
[246.90827942 -57.75003052]
[251.67163086 -72.83715057]
[266.24597168 -75.90931702]
[277.18048096 -86.17752075]
[288.11502075 -96.44573212]
[292.99133301 -114.17073059]
[310.17785645 -117.57665253]
[320.89492798 -128.07159424]
[331.61203003 -138.56654358]
[342.32913208 -149.06150818]
[353.04620361 -159.55645752]
[350.92596436 -174.81459045]
[358.11276245 -188.23858643]
[371.66571045 -194.77934265]
[386.29620361 -192.11723328]
[397.01327515 -202.61218262]
[407.73037720 -213.10713196]
[409.90750122 -219.46328735]
[414.32928467 -223.16481018]
[419.12289429 -223.80541992]
[430.27005005 -233.84237671]
[441.41723633 -243.87934875]
[452.56442261 -253.91630554]
[460.28939819 -269.00805664]
[476.92984009 -265.76278687]
[478.41793823 -248.87426758]
[462.60137939 -242.76913452]
[451.45419312 -232.73216248]
[440.30703735 -222.69520569]
[429.15985107 -212.65824890]
[418.22531128 -202.39004517]
[407.50823975 -191.89509583]
[396.79113770 -181.40014648]
[399.14627075 -166.71711731]
[392.32312012 -153.30410767]
[378.75155640 -146.40003967]
[363.54116821 -148.83935547]
[352.82406616 -138.34440613]
[342.10699463 -127.84946442]
[331.38989258 -117.35450745]
[320.67279053 -106.85955811]
[320.21948242 -94.73005676]
[311.31884766 -85.89703369]
[298.38320923 -85.51119995]
[287.44869995 -75.24299622]
[276.51416016 -64.97478485]
[272.53292847 -50.62211990]
[257.17648315 -46.81550217]
[246.24195862 -36.54729462]
[235.30743408 -26.27908707]
[235.87817383 -8.02994728]
[222.75155640 5.11336470]
[203.86682129 4.54699993]
[193.37187195 15.26409054]
[182.87692261 25.98118019]
[172.38197327 36.69826889]
[161.88702393 47.41535950]
[151.39207458 58.13245010]
[140.89712524 68.84954071]
[130.40217590 79.56663513]
[119.90722656 90.28372192]
[109.41227722 101.00080872]
[108.26914215 106.19345093]
[104.26778412 110.35222626]
[98.24629974 111.93534088]
[87.31177521 122.20354462]
[76.37724304 132.47175598]
[72.22695923 140.68489075]
[65.10453796 142.83753967]
[53.95736694 152.87449646]
[42.81019211 162.91145325]
[31.66302109 172.94841003]
[20.51585007 182.98536682]
[9.36867714 193.02233887]
[-1.77849567 203.05929565]
[-12.92566776 213.09625244]
[-10.79210663 223.66722107]
[-13.25553417 234.08288574]
[-19.79854965 242.45028687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[12 31]
[13 27]
[14 26]
[15 25]
[16 24]
[17 23]
[44 146]
[45 145]
[46 144]
[47 143]
[48 142]
[49 141]
[50 140]
[51 139]
[52 137]
[53 136]
[54 135]
[55 132]
[56 131]
[57 130]
[58 129]
[59 128]
[60 127]
[61 126]
[62 125]
[63 124]
[64 123]
[69 120]
[70 119]
[71 118]
[73 116]
[74 115]
[75 114]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[85 103]
[86 102]
[87 101]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
