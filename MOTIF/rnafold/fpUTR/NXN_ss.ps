%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCCGACGCCGCCGCCUCCUCCCGCCGCGCGGACCGUGGAGCGGGGUCGCAGCCGCCUGCCCGCCCUGCGGUGGGCCAGG\
) } def
/len { sequence length } bind def

/coor [
[120.40922546 134.60675049]
[116.79978180 119.45388031]
[104.10998535 111.45581055]
[91.11959839 103.95581055]
[77.84817505 96.96515656]
[64.57674408 89.97450256]
[51.30532074 82.98385620]
[35.48953629 83.39804077]
[27.83485222 70.62091064]
[14.56342411 63.63025665]
[1.29199755 56.63960266]
[-11.97942924 49.64895248]
[-24.68144798 52.72099304]
[-35.66542816 46.41815186]
[-39.18892288 34.67587280]
[-52.17930222 27.17587280]
[-64.80349731 35.68416977]
[-79.80877686 37.85871506]
[-94.21124268 33.32120895]
[-105.17036438 23.02272415]
[-110.54912567 9.04494286]
[-109.33066559 -5.82048178]
[-122.32104492 -13.32048225]
[-135.31143188 -20.82048225]
[-148.30180359 -28.32048225]
[-165.04206848 -31.00376511]
[-167.09780884 -47.83261490]
[-151.49572754 -54.46671295]
[-140.80180359 -41.31086349]
[-127.81142426 -33.81086349]
[-114.82104492 -26.31086349]
[-101.83066559 -18.81086349]
[-89.56605530 -27.29878998]
[-74.77156830 -29.62953758]
[-60.37325668 -25.28790665]
[-49.24242401 -15.08375263]
[-43.62299728 -1.00152910]
[-44.67930222 14.18549156]
[-31.68892097 21.68549156]
[-14.28501797 20.62400627]
[-4.98877668 36.37752533]
[8.28264999 43.36817551]
[21.55407715 50.35882950]
[34.82550430 57.34948349]
[49.69202805 56.43527603]
[58.29597473 69.71242523]
[71.56739807 76.70307922]
[84.83882904 83.69373322]
[98.11025238 90.68438721]
[103.62561798 90.25902557]
[108.92658997 93.10028076]
[112.10804749 98.76601410]
[124.79784393 106.76408386]
[140.02534485 103.48366547]
[152.78067017 111.77561951]
[155.81419373 126.31291962]
[168.50399780 134.31098938]
[181.19378662 142.30905151]
[193.88359070 150.30712891]
[206.72608948 158.05761719]
[219.71646118 165.55761719]
[232.70684814 173.05761719]
[245.69723511 180.55761719]
[258.68762207 188.05761719]
[271.67797852 195.55761719]
[288.06820679 195.01652527]
[296.50100708 209.08139038]
[288.30142212 223.28346252]
[271.90451050 223.01287842]
[264.17797852 208.54798889]
[251.18760681 201.04798889]
[238.19723511 193.54798889]
[225.20684814 186.04798889]
[212.21646118 178.54798889]
[199.22608948 171.04798889]
[191.66329956 170.41505432]
[185.88551331 162.99691772]
[173.19572449 154.99885559]
[160.50592041 147.00079346]
[147.81613159 139.00271606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 53]
[3 52]
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[12 41]
[15 39]
[16 38]
[22 32]
[23 31]
[24 30]
[25 29]
[56 80]
[57 79]
[58 78]
[59 77]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
