%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:33:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCUGUUGGACCCGCCCCCGGCCCACAAGCCCCUGCAGGGAGCGGGCCCGGGCGGCGCGCGAUCGAGGUCGGGUCGCCGUCCAGCCUGCAGC\
) } def
/len { sequence length } bind def

/coor [
[87.20644379 288.47656250]
[86.85092926 272.67626953]
[97.83227539 261.31027222]
[97.33632660 246.31848145]
[86.32015228 236.35958862]
[85.60363007 221.16284180]
[96.12412262 209.67558289]
[95.62817383 194.68379211]
[95.13222504 179.69198608]
[94.63627625 164.70019531]
[94.14031982 149.70838928]
[93.64437103 134.71659851]
[93.14842224 119.72479248]
[80.48545837 107.42929077]
[81.76562500 89.82556915]
[72.16609192 78.29955292]
[62.56656647 66.77353668]
[52.96703720 55.24751663]
[43.17824936 43.88179398]
[33.20288086 32.67947388]
[23.22751427 21.47714996]
[13.25214481 10.27482796]
[3.27677608 -0.92749447]
[-6.88244724 -11.96335316]
[-17.22274780 -22.82973099]
[-27.56304932 -33.69610977]
[-32.23192215 -34.85043716]
[-35.82720566 -37.28310776]
[-38.06406403 -40.45349884]
[-38.88124084 -43.78455734]
[-38.43145370 -46.74564743]
[-47.24823380 -58.88090134]
[-56.26445007 -70.86872101]
[-65.47763824 -82.70583344]
[-74.69083405 -94.54293823]
[-90.07988739 -100.20941925]
[-92.60007477 -116.41375732]
[-79.65884399 -126.48632812]
[-64.56902313 -120.06532288]
[-62.85372543 -103.75612640]
[-53.64053345 -91.91902161]
[-44.42734146 -80.08191681]
[-37.70192719 -76.66998291]
[-35.11297989 -67.69768524]
[-26.29619980 -55.56242752]
[-16.69667244 -44.03641129]
[-6.35637045 -33.17003250]
[3.98393059 -22.30365372]
[11.01421452 -19.57462502]
[14.47909832 -10.90286350]
[24.45446777 0.29945913]
[34.42983627 11.50178146]
[44.40520477 22.70410347]
[54.38057327 33.90642548]
[61.31678391 36.86640549]
[64.49305725 45.64798737]
[74.09258270 57.17400742]
[83.69210815 68.70001984]
[93.29164124 80.22603607]
[108.07044983 80.74176788]
[118.80156708 90.91635132]
[133.75033569 89.67766571]
[148.69911194 88.43897247]
[163.64787292 87.20027924]
[178.59663391 85.96159363]
[193.54541016 84.72290039]
[202.42515564 71.85107422]
[217.51493835 67.74833679]
[231.68981934 74.35187531]
[238.25685120 88.54370880]
[234.11528015 103.62287903]
[221.22064209 112.46946716]
[205.66137695 110.90638733]
[194.78410339 99.67166901]
[179.83532715 100.91036224]
[164.88656616 102.14904785]
[149.93778992 103.38774109]
[134.98902893 104.62643433]
[120.04026031 105.86511993]
[115.59429932 113.88630676]
[108.14022064 119.22884369]
[108.63616943 134.22064209]
[109.13212585 149.21244812]
[109.62807465 164.20423889]
[110.12402344 179.19604492]
[110.61997223 194.18783569]
[111.11592102 209.17964172]
[122.37261963 219.94647217]
[122.66201782 235.15734863]
[112.32812500 245.82252502]
[112.82407379 260.81433105]
[124.53259277 271.42968750]
[125.22210693 287.21893311]
[114.48354340 298.81457520]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 91]
[4 90]
[7 87]
[8 86]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[15 59]
[16 58]
[17 57]
[18 56]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 48]
[25 47]
[26 46]
[31 45]
[32 44]
[33 42]
[34 41]
[35 40]
[61 79]
[62 78]
[63 77]
[64 76]
[65 75]
[66 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
