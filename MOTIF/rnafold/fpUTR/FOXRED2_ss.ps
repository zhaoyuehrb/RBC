%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGACCACGGGUUGCAGCCGGAGCGGCUGGGAGGUUCGCGCGUUUCUCAGGGUUCGGUCGGAGGCGGGGAGGCCGGAGCUGCGGGCGUAGGGACCUGGCGGCUCCUGAAGCGCACGCGGGCGGGCGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[82.01107788 251.44386292]
[79.17775726 266.35482788]
[71.14598846 279.23330688]
[59.00199890 288.33758545]
[44.38816071 292.43637085]
[29.28088188 290.97537231]
[15.72329235 284.15219116]
[5.54894686 272.88952637]
[0.13384189 258.71063232]
[0.21032621 243.53306580]
[5.76805592 229.40946960]
[16.05539322 218.24993896]
[29.68106079 211.56370544]
[44.80229950 210.25505066]
[48.96689987 195.84477234]
[53.13150024 181.43449402]
[57.29609680 167.02421570]
[53.39658737 152.64912415]
[64.66117859 141.53968811]
[68.82577515 127.12940979]
[72.99037933 112.71913910]
[89.12700653 84.83161163]
[87.37268066 69.93454742]
[85.61834717 55.03749466]
[83.86402130 40.14043427]
[82.10968781 25.24337769]
[72.81148529 12.44283199]
[79.00716400 -1.10201335]
[77.25283051 -15.99907112]
[75.49850464 -30.89612961]
[73.74417114 -45.79318619]
[71.98984528 -60.69024277]
[70.23551178 -75.58730316]
[56.86413956 -83.23664856]
[50.63368607 -97.13034821]
[53.74226379 -111.85450745]
[64.79267120 -121.80570984]
[63.03834152 -136.70277405]
[61.10950851 -151.57823181]
[59.00643539 -166.43006897]
[56.90336227 -181.28190613]
[47.30763626 -193.86096191]
[53.18408585 -207.54733276]
[51.08101273 -222.39916992]
[48.97793961 -237.25100708]
[36.63007736 -246.74668884]
[34.70883179 -261.83853149]
[43.83761597 -273.55181885]
[41.73454285 -288.40365601]
[39.63146973 -303.25549316]
[30.03574181 -315.83453369]
[35.91219330 -329.52090454]
[33.80912018 -344.37274170]
[24.21339226 -356.95178223]
[30.08984184 -370.63815308]
[27.98676872 -385.48999023]
[25.88369560 -400.34182739]
[16.02431870 -408.75216675]
[14.62249851 -421.23080444]
[21.89014053 -430.97384644]
[20.13580894 -445.87088013]
[18.38147926 -460.76794434]
[8.14877224 -473.58294678]
[14.38163948 -488.75143433]
[30.66824150 -490.66940308]
[40.25431824 -477.36380005]
[33.27853775 -462.52227783]
[35.03286743 -447.62521362]
[36.78719711 -432.72817993]
[48.02988052 -419.30548096]
[40.73553467 -402.44491577]
[42.83860779 -387.59307861]
[44.94168091 -372.74124146]
[54.38698196 -361.22448730]
[48.66095734 -346.47579956]
[50.76403046 -331.62396240]
[60.20933151 -320.10723877]
[54.48330688 -305.35855103]
[56.58638000 -290.50671387]
[58.68945312 -275.65487671]
[70.71141815 -266.93661499]
[73.05580139 -251.90470886]
[63.82977676 -239.35408020]
[65.93284607 -224.50224304]
[68.03591919 -209.65040588]
[77.48122406 -198.13365173]
[71.75519562 -183.38497925]
[73.85826874 -168.53314209]
[75.96134186 -153.68130493]
[80.05208588 -147.44134521]
[77.93540192 -138.45709229]
[79.68972778 -123.56003571]
[92.74954987 -116.44813538]
[99.19358063 -102.84893036]
[96.36116028 -87.88795471]
[85.13256836 -77.34162903]
[86.88690186 -62.44457245]
[88.64122772 -47.54751587]
[90.39556122 -32.65045929]
[92.14988708 -17.75340080]
[93.90422058 -2.85634327]
[103.07694244 8.87866497]
[97.00674438 23.48904800]
[98.76107788 38.38610458]
[100.51540375 53.28316498]
[102.26973724 68.18022156]
[104.02406311 83.07727814]
[113.02086639 71.07488251]
[127.95033264 69.62192535]
[139.09255981 79.66436768]
[139.19335938 94.66402435]
[128.18710327 104.85530853]
[113.23984528 103.60334015]
[123.20691681 114.81304932]
[133.17399597 126.02275085]
[148.96383667 126.69821930]
[159.58963013 138.39729309]
[158.74725342 154.17912292]
[146.93649292 164.68061829]
[131.16445923 163.67143250]
[120.78841400 151.75030518]
[121.96428680 135.98982239]
[111.99721527 124.78012085]
[102.03014374 113.57041931]
[87.40065765 116.88373566]
[83.23605347 131.29400635]
[79.07145691 145.70428467]
[82.67308807 161.11009216]
[71.70637512 171.18881226]
[67.54177856 185.59909058]
[63.37717438 200.00936890]
[59.21257782 214.41964722]
[71.30449677 223.59297180]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 132]
[15 131]
[16 130]
[17 129]
[19 127]
[20 126]
[21 125]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[28 101]
[29 100]
[30 99]
[31 98]
[32 97]
[33 96]
[37 92]
[38 91]
[39 89]
[40 88]
[41 87]
[43 85]
[44 84]
[45 83]
[48 80]
[49 79]
[50 78]
[52 76]
[53 75]
[55 73]
[56 72]
[57 71]
[60 69]
[61 68]
[62 67]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
