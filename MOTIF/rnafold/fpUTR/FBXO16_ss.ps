%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUAGACGGUGAUUGGGCUGCUGGAAGCUGGGAGGGGUGAGGGACUGGAGGGAGUCGGAGAAAAAGCUGACCUAAUGAAACUGUGGCAACGUCAGCGCUUGAGGCUUGAAGAGGGAGACAAGCUAAAAGAGGAUAUCCAGUUGUUUC\
) } def
/len { sequence length } bind def

/coor [
[7.17924261 250.40641785]
[6.14180660 265.37048340]
[-2.70114970 277.48669434]
[-16.63634682 283.03738403]
[-31.38805771 280.31945801]
[-42.43001938 270.16687012]
[-46.37423706 255.69473267]
[-42.01184464 241.34556580]
[-54.67676544 249.38296509]
[-53.36899185 263.34573364]
[-58.19533920 276.44229126]
[-68.15591431 286.12500000]
[-81.25811005 290.53662109]
[-94.91506195 288.86657715]
[-106.45635223 281.49908447]
[-119.28681946 289.26947021]
[-127.08286285 303.03656006]
[-141.97744751 303.01141357]
[-154.80790710 310.78182983]
[-167.63836670 318.55221558]
[-180.46884155 326.32263184]
[-183.99481201 341.72857666]
[-197.42591858 350.05807495]
[-212.79373169 346.36941528]
[-220.98077393 332.85098267]
[-217.12983704 317.52304077]
[-203.52561951 309.47940063]
[-188.23924255 313.49215698]
[-175.40878296 305.72177124]
[-162.57830811 297.95135498]
[-149.74784851 290.18093872]
[-142.86952209 276.96966553]
[-127.05722046 276.43902588]
[-114.22675323 268.66860962]
[-114.96965027 252.55720520]
[-107.45977783 238.17802429]
[-93.65437317 229.48219299]
[-77.25475311 228.91252136]
[-62.71416855 236.71804810]
[-50.04924774 228.68064880]
[-38.19692230 219.48704529]
[-27.26239395 209.21882629]
[-16.32786369 198.95062256]
[-12.34662819 184.59796143]
[3.00981069 180.79133606]
[13.94433975 170.52313232]
[24.87887001 160.25492859]
[35.81340027 149.98672485]
[46.74792862 139.71852112]
[57.68245697 129.45030212]
[68.61698914 119.18209839]
[59.63077164 90.58624268]
[75.34490204 61.01914215]
[68.67537689 47.58346558]
[62.01234436 41.23645782]
[62.01017761 33.79584503]
[55.62348938 20.22343826]
[49.23679733 6.65103292]
[42.85010910 -6.92137289]
[36.46342087 -20.49377823]
[21.19653511 -23.26899910]
[10.50096607 -34.51108170]
[8.48937702 -49.89721680]
[15.93526459 -63.51111984]
[29.97553444 -70.11796570]
[45.21141434 -67.17729187]
[55.78440094 -55.81984711]
[57.62895966 -40.41279602]
[50.03582764 -26.88046837]
[56.42251587 -13.30806160]
[62.80920410 0.26434374]
[69.19589233 13.83674908]
[75.58258057 27.40915489]
[82.11105347 40.91393661]
[88.78057861 54.34961319]
[96.25427246 54.97719574]
[96.84262085 39.98873901]
[93.98471069 25.26351166]
[106.91426849 17.65913391]
[118.39471436 27.31311035]
[113.12117004 41.35568619]
[111.20166779 56.23236465]
[118.67536163 56.85994720]
[127.49214172 44.72469330]
[136.30891418 32.58943939]
[144.99813843 20.36252213]
[153.55883789 8.04528332]
[154.39115906 -8.33272934]
[169.11231995 -15.55902290]
[182.57846069 -6.19980717]
[180.93678284 10.11695957]
[165.87608337 16.60598755]
[157.31538391 28.92322540]
[156.07237244 36.25927734]
[148.44418335 41.40621567]
[139.62739563 53.54147339]
[130.81062317 65.67672729]
[135.83178711 76.21156311]
[137.70515442 86.96349335]
[136.66435242 97.07217407]
[151.54606628 98.95217133]
[166.42779541 100.83216858]
[178.83857727 91.41887665]
[193.90397644 93.53746033]
[202.80163574 105.42725372]
[217.68334961 107.30725098]
[232.56506348 109.18725586]
[247.44679260 111.06725311]
[262.32852173 112.94725037]
[277.21023560 114.82724762]
[286.43215942 102.54508972]
[300.56597900 96.53415680]
[315.80969238 98.41136169]
[328.06289673 107.67174530]
[334.02951050 121.82431793]
[332.10452271 137.06210327]
[322.80578613 149.28620911]
[308.63458252 155.20841980]
[293.40289307 153.23568726]
[281.20800781 143.89866638]
[275.33023071 129.70896912]
[260.44851685 127.82897186]
[245.56678772 125.94897461]
[230.68507385 124.06897736]
[215.80334473 122.18897247]
[200.92163086 120.30897522]
[189.34663391 129.61247253]
[174.22767639 127.91789246]
[164.54779053 115.71389008]
[149.66607666 113.83389282]
[134.78434753 111.95389557]
[130.45034790 120.63063812]
[123.99898529 127.87284088]
[115.87886810 133.17692566]
[106.65462494 136.17405701]
[96.96765900 136.65585327]
[87.49153900 134.58880615]
[78.88519287 130.11663818]
[67.95066071 140.38484192]
[57.01613617 150.65304565]
[46.08160400 160.92124939]
[35.14707565 171.18945312]
[24.21254730 181.45765686]
[13.27801704 191.72587585]
[8.51467133 206.81298828]
[-6.05965757 209.88516235]
[-16.99418640 220.15336609]
[-27.92871666 230.42156982]
[-12.94307899 229.76530457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 40]
[9 39]
[15 34]
[16 33]
[18 31]
[19 30]
[20 29]
[21 28]
[41 148]
[42 147]
[43 146]
[45 144]
[46 143]
[47 142]
[48 141]
[49 140]
[50 139]
[51 138]
[53 75]
[54 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[83 97]
[84 96]
[85 95]
[86 93]
[87 92]
[100 131]
[101 130]
[102 129]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
