%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUUCCCCCGGCUCCAGCCGGCGCAGGCAGCGGCGGCAGCAGCAGGCGAGCCUCGGCCCCGCAAGGCC\
) } def
/len { sequence length } bind def

/coor [
[135.46179199 245.49790955]
[127.83655548 244.50498962]
[120.61820984 241.81605530]
[114.17953491 237.56356812]
[108.85449219 231.96092224]
[104.92089844 225.29170227]
[102.58591461 217.89535522]
[101.97517395 210.14993286]
[103.12602234 202.45269775]
[105.98527527 195.19985962]
[110.41168213 188.76606750]
[116.18286133 183.48510742]
[123.00648499 179.63264465]
[120.40175629 164.86051941]
[117.79703522 150.08840942]
[115.19231415 135.31628418]
[112.58759308 120.54417419]
[91.92238617 120.83660126]
[80.20921326 105.72157288]
[84.85523224 88.76849365]
[77.35523224 75.77811432]
[69.85523224 62.78773499]
[62.35523605 49.79735184]
[48.75444794 41.71470261]
[49.09151077 26.82391357]
[41.59151077 13.83353138]
[34.09151077 0.84315056]
[19.02962685 -4.68126297]
[14.09475708 -19.94647217]
[23.07251358 -33.24231720]
[39.07592773 -34.36935806]
[49.82855225 -22.46303177]
[47.08189392 -6.65684938]
[54.58189392 6.33353186]
[62.08189392 19.32391357]
[75.14622498 26.47740364]
[75.34561920 42.29735184]
[82.84561920 55.28773499]
[90.34561920 68.27811432]
[97.84561920 81.26849365]
[111.52793121 81.88215637]
[122.84819794 92.35339355]
[134.33886719 82.71158600]
[137.16387939 66.91921234]
[151.34024048 59.40854263]
[165.99305725 65.94110870]
[169.88194275 81.50568390]
[160.02368164 94.16246796]
[143.98068237 94.20224762]
[132.49000549 103.84406281]
[127.35971069 117.93945312]
[129.96443176 132.71156311]
[132.56915283 147.48368835]
[135.17387390 162.25579834]
[137.77859497 177.02792358]
[160.49621582 187.28359985]
[170.28189087 209.99192810]
[162.26434326 233.17347717]
[171.39576721 245.07377625]
[180.52719116 256.97409058]
[189.65861511 268.87438965]
[205.35842896 270.68850708]
[215.11149597 283.12448120]
[213.13148499 298.80422974]
[200.59310913 308.42529297]
[184.93515015 306.27960205]
[175.44720459 293.64019775]
[177.75830078 278.00579834]
[168.62689209 266.10549927]
[159.49546814 254.20520020]
[150.36404419 242.30490112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 55]
[14 54]
[15 53]
[16 52]
[17 51]
[20 40]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[27 33]
[42 50]
[43 49]
[58 71]
[59 70]
[60 69]
[61 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
