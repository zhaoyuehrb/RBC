%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUUCUUUGCCCCAAAACUCUUUCCUUUGGUUGUGCUAAGAGGUGAUGCCCAAGGUGCACCACCUUUCAAGAACUGGAUC\
) } def
/len { sequence length } bind def

/coor [
[48.82629395 194.48696899]
[28.11893272 192.21586609]
[20.53713417 205.15867615]
[12.95533466 218.10148621]
[15.60222912 233.92468262]
[4.77470922 245.76293945]
[-11.22127819 244.53495789]
[-20.11498070 231.18273926]
[-15.08391094 215.94897461]
[0.01252513 210.51968384]
[7.59432411 197.57687378]
[15.17612267 184.63406372]
[8.34542561 177.28309631]
[3.43216348 168.51972961]
[0.71767497 158.83413696]
[0.36012250 148.76966858]
[2.38528752 138.89228821]
[6.68480206 129.75877380]
[13.02193165 121.88533783]
[21.04460335 115.71844482]
[30.30496597 111.60951996]
[40.28438568 109.79487610]
[50.42249298 110.38218689]
[60.14864731 113.34406281]
[68.91406250 118.51932526]
[80.01043701 108.42623901]
[91.10681915 98.33315277]
[91.81845856 94.25206757]
[94.45320892 90.55930328]
[98.76396179 88.16399384]
[104.08035278 87.81382751]
[116.24889374 79.04304504]
[128.41743469 70.27226257]
[140.58596802 61.50148010]
[138.04603577 48.55900192]
[140.66844177 35.68128967]
[148.01431274 24.84115219]
[158.92399597 17.68493843]
[171.70007324 15.28254890]
[184.37136841 17.96759796]
[194.99707031 25.29161835]
[207.79408264 17.46624565]
[220.59109497 9.64087296]
[233.38810730 1.81550038]
[246.18511963 -6.00987244]
[258.98214722 -13.83524513]
[271.77914429 -21.66061783]
[279.51605225 -35.46100616]
[294.41061401 -35.49975967]
[307.20764160 -43.32513428]
[320.00463867 -51.15050507]
[322.15158081 -66.64000702]
[333.78729248 -77.08721924]
[349.41775513 -77.55928040]
[361.66271973 -67.83330536]
[364.74053955 -52.50160217]
[357.19790649 -38.80332947]
[342.59625244 -33.20639038]
[327.83001709 -38.35349274]
[315.03298950 -30.52812004]
[302.23599243 -22.70274734]
[295.41439819 -9.46208191]
[279.60452271 -8.86360455]
[266.80749512 -1.03823185]
[254.01049805 6.78714085]
[241.21348572 14.61251354]
[228.41647339 22.43788528]
[215.61946106 30.26325798]
[202.82244873 38.08863068]
[203.96099854 55.05691147]
[196.44474792 70.40946960]
[182.19950867 80.01464844]
[164.97473145 81.23928833]
[149.35675049 73.67002106]
[137.18821716 82.44080353]
[125.01967621 91.21158600]
[112.85113525 99.98236847]
[101.19990540 109.42952728]
[90.10353088 119.52261353]
[79.00714874 129.61570740]
[85.40059662 149.71456909]
[81.44972229 170.36636353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 12]
[3 11]
[4 10]
[25 80]
[26 79]
[27 78]
[31 77]
[32 76]
[33 75]
[34 74]
[41 69]
[42 68]
[43 67]
[44 66]
[45 65]
[46 64]
[47 63]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
