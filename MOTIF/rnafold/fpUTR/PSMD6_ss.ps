%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGCGCAGGCGCCCAGGCCGGGUGAGGCGUUCCCGGAGGUGUCCAGCAGAGGACGCUGCCGGCGGAGACGGGACCGGAAGCCGGGCCGCAGGCGGCCGGGCGUAUUCGCCGACUCCUCCCGCUUCCGCUGCCGCAGCCGGUCGUAACCAAGUUGUGUCCUGUCAGCCGCUGUCCCCUUCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[260.57797241 537.24169922]
[256.85736084 522.71044922]
[246.20494080 512.30010986]
[250.27742004 497.01202393]
[246.55677795 482.48080444]
[242.83615112 467.94955444]
[238.87321472 453.48251343]
[234.66909790 439.08370972]
[230.46498108 424.68493652]
[226.26084900 410.28613281]
[222.05673218 395.88732910]
[217.73245239 381.52416992]
[213.28833008 367.19763184]
[208.84419250 352.87109375]
[187.36422729 347.83178711]
[173.13877869 330.80160522]
[171.99118042 308.51449585]
[184.53387451 289.90307617]
[178.21984863 276.29672241]
[171.90583801 262.69036865]
[165.59181213 249.08399963]
[159.27778625 235.47763062]
[152.96377563 221.87126160]
[140.58798218 213.58337402]
[141.79743958 197.80845642]
[135.48342896 184.20210266]
[123.10763550 175.91419983]
[124.31710052 160.13929749]
[118.00308228 146.53292847]
[111.68905640 132.92655945]
[105.37503815 119.32020569]
[101.30867767 133.75851440]
[87.18327332 138.80558777]
[74.88799286 130.21337891]
[74.77159882 115.21383667]
[86.93214417 106.43184662]
[71.98446655 105.18000793]
[57.03679657 103.92817688]
[42.63904572 110.48677826]
[30.60189438 101.71430206]
[15.65422249 100.46247101]
[0.70655054 99.21063232]
[-14.24112129 97.95879364]
[-29.18879318 96.70695496]
[-44.13646698 95.45511627]
[-59.08413696 94.20328522]
[-70.98978424 104.59708405]
[-86.75200653 103.44470978]
[-97.01935577 91.42984009]
[-95.70039368 75.68067932]
[-83.57764435 65.54093933]
[-67.84330750 67.02632904]
[-57.83230209 79.25560760]
[-42.88462830 80.50744629]
[-27.93695641 81.75928497]
[-12.98928452 83.01112366]
[1.95838773 84.26295471]
[16.90605927 85.51479340]
[31.85373116 86.76663208]
[45.18232727 80.11849213]
[58.28863525 88.98049927]
[73.23630524 90.23233795]
[88.18398285 91.48417664]
[99.71927643 81.89580536]
[101.22071075 66.97113800]
[102.72214508 52.04647064]
[104.22358704 37.12180328]
[105.72502136 22.19713593]
[107.22645569 7.27246809]
[100.90934753 -7.23286772]
[109.88173676 -19.12174988]
[111.38317108 -34.04641724]
[112.88460541 -48.97108459]
[114.38603973 -63.89575195]
[115.88748169 -78.82041931]
[105.17443848 -98.49106598]
[118.40091705 -115.61442566]
[118.90213776 -130.60604858]
[119.40336609 -145.59767151]
[103.33806610 -160.32621765]
[103.35543060 -181.83827209]
[119.02675629 -196.15899658]
[118.27509308 -211.14013672]
[117.52342987 -226.12129211]
[109.10430908 -239.51641846]
[116.19411469 -252.61541748]
[115.44245911 -267.59655762]
[114.69079590 -282.57772827]
[113.93913269 -297.55886841]
[113.18746948 -312.54003906]
[103.83692169 -326.01220703]
[111.07268524 -340.72872925]
[127.45122528 -341.55047607]
[136.12370300 -327.63214111]
[128.16862488 -313.29168701]
[128.92028809 -298.31054688]
[129.67195129 -283.32937622]
[130.42361450 -268.34823608]
[131.17527771 -253.36708069]
[139.54063416 -241.04351807]
[132.50457764 -226.87295532]
[133.25624084 -211.89179993]
[134.00790405 -196.91064453]
[142.01960754 -193.60290527]
[148.54838562 -187.83580017]
[152.86248779 -180.21786499]
[154.46614075 -171.56704712]
[153.15631104 -162.82290649]
[149.04800415 -154.94453430]
[142.56474304 -148.80537415]
[134.39498901 -145.09645081]
[133.89376831 -130.10482788]
[133.39253235 -115.11319733]
[139.91171265 -110.61307526]
[144.16160583 -103.81684113]
[145.38204956 -95.79948425]
[143.29919434 -87.86448669]
[138.18246460 -81.33193970]
[130.81214905 -77.31898499]
[129.31071472 -62.39431763]
[127.80927277 -47.46965027]
[126.30783844 -32.54498291]
[124.80640411 -17.62031555]
[131.23089600 -4.18249178]
[122.15112305 8.77390289]
[120.64968872 23.69857025]
[119.14825439 38.62323761]
[117.64681244 53.54790497]
[116.14537811 68.47257233]
[114.64394379 83.39723969]
[118.98139954 113.00617981]
[125.29541779 126.61254120]
[131.60943604 140.21890259]
[137.92346191 153.82527161]
[150.75086975 163.08638000]
[149.08978271 177.88807678]
[155.40380859 191.49444580]
[168.23121643 200.75555420]
[166.57012939 215.55723572]
[172.88415527 229.16360474]
[179.19818115 242.76997375]
[185.51219177 256.37634277]
[191.82621765 269.98269653]
[198.14024353 283.58905029]
[206.49986267 282.78915405]
[214.79788208 283.97290039]
[222.57102966 287.06680298]
[229.38716125 291.89077759]
[234.86912537 298.16894531]
[238.71580505 305.54507446]
[240.71853638 313.60305786]
[240.77244568 321.89025879]
[238.88191223 329.94290161]
[235.15997314 337.31213379]
[229.82145691 343.58895874]
[223.17073059 348.42694092]
[227.61486816 362.75347900]
[232.05899048 377.08001709]
[237.60110474 384.36669922]
[236.45553589 391.68319702]
[240.65965271 406.08200073]
[244.86376953 420.48080444]
[249.06788635 434.87960815]
[253.27201843 449.27841187]
[257.80014038 454.13986206]
[258.99813843 459.72082520]
[257.36737061 464.22891235]
[261.08801270 478.76016235]
[264.80865479 493.29138184]
[275.72717285 504.74111938]
[271.38858032 518.98980713]
[275.10922241 533.52105713]
[290.19665527 534.98565674]
[303.87197876 541.52490234]
[314.48376465 552.34918213]
[320.75067139 566.15142822]
[321.91589355 581.26495361]
[317.83871460 595.86468506]
[309.01147461 608.18768311]
[296.50015259 616.74584961]
[281.81552124 620.50573730]
[266.73080444 619.01336670]
[253.06756592 612.44891357]
[242.47570801 601.60510254]
[236.23426819 587.79132080]
[235.09690857 572.67572021]
[239.20098877 558.08349609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 172]
[2 171]
[4 169]
[5 168]
[6 167]
[7 164]
[8 163]
[9 162]
[10 161]
[11 160]
[12 158]
[13 157]
[14 156]
[18 144]
[19 143]
[20 142]
[21 141]
[22 140]
[23 139]
[25 137]
[26 136]
[28 134]
[29 133]
[30 132]
[31 131]
[36 63]
[37 62]
[38 61]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[64 130]
[65 129]
[66 128]
[67 127]
[68 126]
[69 125]
[71 123]
[72 122]
[73 121]
[74 120]
[75 119]
[77 113]
[78 112]
[79 111]
[82 103]
[83 102]
[84 101]
[86 99]
[87 98]
[88 97]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
