%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGUUGGAGCGUCGCGCAGUCGGGAGGUCCGGGAAAGUUUCUUUGGAGGUCCGGCCCGGAGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[8.12192440 258.10995483]
[-0.24708627 270.55822754]
[-8.61609745 283.00650024]
[-5.33138180 298.46566772]
[-14.00997257 311.67391968]
[-29.50301361 314.79501343]
[-42.61876297 305.97726440]
[-45.57587433 290.45208740]
[-36.61994553 277.43029785]
[-21.06437683 274.63748169]
[-12.69536591 262.18920898]
[-4.32635498 249.74093628]
[3.46740437 236.92463684]
[10.66975880 223.76690674]
[17.87211227 210.60916138]
[25.07446671 197.45143127]
[32.27682114 184.29368591]
[26.58585930 175.07026672]
[25.41045761 164.21325684]
[29.05024719 153.82965088]
[36.86341095 145.96536255]
[47.37863541 142.20223999]
[58.57186890 143.34016418]
[67.49878693 131.28570557]
[76.42569733 119.23123169]
[85.35261536 107.17676544]
[86.67432404 90.59371185]
[101.85727692 83.79499054]
[110.22628784 71.34671021]
[111.50479889 55.57724762]
[125.02685547 49.33197403]
[133.39585876 36.88369370]
[128.22882080 22.37135887]
[132.54739380 7.76987457]
[144.49444580 -1.38063157]
[159.36088562 -1.73733068]
[167.72988892 -14.18560982]
[176.09890747 -26.63389015]
[184.46791077 -39.08216858]
[188.28733826 -55.60029221]
[205.21723938 -56.50280380]
[210.77114868 -40.48436356]
[196.91618347 -30.71315765]
[188.54718018 -18.26487923]
[180.17817688 -5.81659937]
[171.80915833 6.63168001]
[177.08972168 20.53325272]
[173.12501526 35.05031586]
[161.23332214 44.56037140]
[145.84414673 45.25270462]
[137.47512817 57.70098495]
[136.79522705 72.58006287]
[122.67456818 79.71572113]
[114.30555725 92.16400146]
[115.83293152 103.92047119]
[108.99623108 113.60586548]
[97.40708160 116.10368347]
[88.48016357 128.15815735]
[79.55325317 140.21261597]
[70.62633514 152.26708984]
[74.92105865 171.55162048]
[64.25655365 187.83609009]
[45.43455887 191.49603271]
[38.23220444 204.65377808]
[31.02985191 217.81152344]
[23.82749748 230.96925354]
[16.62514305 244.12699890]
[16.37703514 251.28611755]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 67]
[14 66]
[15 65]
[16 64]
[17 63]
[23 60]
[24 59]
[25 58]
[26 57]
[28 54]
[29 53]
[31 51]
[32 50]
[36 46]
[37 45]
[38 44]
[39 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
