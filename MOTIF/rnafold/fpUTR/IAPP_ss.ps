%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:34:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUAUAUAAGAGCUGGAUUACUAGUUAGCAAAUGAGGGGGUAAAUAUUCCAGUGGAUACAAGCUUGGACUCUUUUCUUGAAGCUUUCUUUCUAUCAGAAGCAUUUGCUGAUAUUGCUGACAUUGAAACAUUAAAAGAAAAUUUGAGAAGCA\
) } def
/len { sequence length } bind def

/coor [
[135.08566284 411.62060547]
[134.53532410 396.62377930]
[127.16908264 409.69049072]
[119.80284119 422.75717163]
[112.43660736 435.82388306]
[121.84118652 447.76632690]
[125.95489502 462.40005493]
[124.15042114 477.49349976]
[116.70293427 490.74505615]
[104.74811554 500.13391113]
[90.10899353 504.22836304]
[75.01792908 502.40402222]
[61.77619553 494.93911743]
[52.40306473 482.97195435]
[48.32786942 468.32748413]
[50.17205048 453.23883057]
[57.65437698 440.00692749]
[69.63385010 430.64953613]
[84.28369904 426.59359741]
[99.36991119 428.45764160]
[106.73615265 415.39093018]
[114.10238647 402.32424927]
[121.46862793 389.25753784]
[120.87919617 382.94384766]
[123.82436371 376.65545654]
[121.67578888 361.81015015]
[119.52720642 346.96481323]
[117.37862396 332.11950684]
[115.23004913 317.27416992]
[113.08146667 302.42886353]
[110.93289185 287.58352661]
[108.78430939 272.73822021]
[97.24875641 269.90869141]
[87.32861328 263.31375122]
[80.21387482 253.71627808]
[76.76760101 242.24081421]
[77.42123413 230.24206543]
[82.12079620 219.14486694]
[90.33042145 210.27499390]
[101.09342957 204.70082092]
[99.86281586 189.75137329]
[98.63220215 174.80194092]
[97.40158844 159.85250854]
[96.17097473 144.90307617]
[94.94036865 129.95364380]
[93.70975494 115.00420380]
[83.80000305 101.50115204]
[91.05983734 86.40709686]
[89.52254486 71.48608398]
[87.98525238 56.56506348]
[76.00708008 46.60710144]
[74.66059875 31.45317078]
[84.22781372 20.09517670]
[82.69052124 5.17416000]
[81.15322876 -9.74685669]
[79.61593628 -24.66787338]
[78.07864380 -39.58889008]
[63.35314941 -47.85085297]
[56.50075912 -63.10120392]
[60.03095627 -79.27369690]
[72.36549377 -90.06301117]
[70.52217102 -104.94931793]
[68.67884064 -119.83562469]
[66.83551788 -134.72193909]
[64.99219513 -149.60824585]
[63.14887238 -164.49455261]
[53.77433777 -177.23930359]
[59.88895798 -190.82092285]
[58.04563522 -205.70724487]
[44.40172195 -213.09799194]
[37.73813629 -227.11141968]
[40.61715698 -242.35908508]
[51.93174362 -252.97792053]
[67.33120728 -254.88478088]
[80.89414215 -247.34645081]
[87.40531921 -233.26155090]
[84.36106110 -218.04603577]
[72.93194580 -207.55056763]
[74.77526855 -192.66426086]
[84.01795197 -180.98426819]
[78.03517914 -166.33787537]
[79.87850189 -151.45156860]
[81.72182465 -136.56526184]
[83.56515503 -121.67895508]
[85.40847778 -106.79264069]
[87.25180054 -91.90633392]
[99.51268768 -86.53765106]
[107.57179260 -75.71554565]
[109.22862244 -62.21516800]
[103.94194031 -49.56533051]
[92.99965668 -41.12618256]
[94.53694916 -26.20516586]
[96.07424164 -11.28414917]
[97.61153412 3.63686752]
[99.14882660 18.55788422]
[110.83087921 27.72659492]
[112.60247040 42.83672714]
[102.90627289 55.02777100]
[104.44356537 69.94879150]
[105.98085785 84.86980438]
[114.58027649 92.78134155]
[115.65843964 104.41662598]
[108.65918732 113.77359772]
[109.88980103 128.72302246]
[111.12041473 143.67247009]
[112.35102844 158.62190247]
[113.58163452 173.57133484]
[114.81224823 188.52076721]
[116.04286194 203.47019958]
[132.94317627 210.72329712]
[143.81939697 225.44866943]
[145.76426697 243.56666565]
[138.33042908 260.11090088]
[123.62963104 270.58963013]
[125.77821350 285.43496704]
[127.92678833 300.28027344]
[130.07537842 315.12561035]
[132.22395325 329.97091675]
[134.37252808 344.81625366]
[136.52110291 359.66156006]
[138.66969299 374.50689697]
[144.59703064 360.72769165]
[152.85769653 348.20724487]
[163.19358826 337.33666992]
[175.28186035 328.45559692]
[188.74487305 321.84140015]
[203.16204834 317.70074463]
[218.08302307 316.16299438]
[233.04165649 317.27612305]
[247.57067871 321.00540161]
[261.21621704 327.23434448]
[273.55197144 335.76834106]
[284.19259644 346.34078979]
[292.80572510 358.62142944]
[299.12222290 372.22665405]
[302.94485474 386.73138428]
[304.15411377 401.68255615]
[302.71228027 416.61309814]
[298.66439819 431.05661011]
[292.13690186 444.56185913]
[283.33370972 456.70697021]
[272.52981567 467.11251831]
[260.06271362 475.45349121]
[246.32189941 481.46929932]
[231.73660278 484.97201538]
[216.76245117 485.85220337]
[201.86721802 484.08239746]
[187.51623535 479.71786499]
[174.15779114 472.89495850]
[162.20921326 463.82681274]
[152.04374695 452.79669189]
[143.97895813 440.14920044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 23]
[3 22]
[4 21]
[5 20]
[25 121]
[26 120]
[27 119]
[28 118]
[29 117]
[30 116]
[31 115]
[32 114]
[40 109]
[41 108]
[42 107]
[43 106]
[44 105]
[45 104]
[46 103]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[55 93]
[56 92]
[57 91]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
