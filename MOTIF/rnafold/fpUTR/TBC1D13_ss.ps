%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUGGAACGCGCAGGCUAGUGGCUGUGUUUCCCGCCGGAGGCUUUUGCGCAGAGCCCCGCGUCCCUGGGGGGCGGCGGCGGCGGCGGCAGCGCAGGCGGCAGAGGCGCAGGCGGCGGAGGCGGCUGGGGGGUCCGGAAGUCAACACC\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 160.87026978]
[92.50000000 145.87026978]
[92.50000000 130.87026978]
[92.50000000 115.87026215]
[78.58166504 110.27741241]
[68.20258331 121.10675812]
[57.82349777 131.93609619]
[54.10954666 140.35900879]
[47.10732651 142.88218689]
[36.50072479 153.48880005]
[25.89412117 164.09539795]
[15.28752041 174.70199585]
[4.68091869 185.30859375]
[-5.92568302 195.91520691]
[-3.36536169 211.21958923]
[-10.31982613 225.09097290]
[-24.11494255 232.19549561]
[-39.44620895 229.80134583]
[-50.41843796 218.82911682]
[-52.81258392 203.49786377]
[-45.70804977 189.70274353]
[-31.83667564 182.74827576]
[-16.53228569 185.30859375]
[-5.92568302 174.70199585]
[4.68091869 164.09539795]
[15.28752041 153.48880005]
[25.89412117 142.88218689]
[36.50072479 132.27558899]
[46.99415588 121.55701447]
[57.37324142 110.72767639]
[67.75232697 99.89833069]
[73.49257660 86.04013824]
[73.81095886 71.04351807]
[74.12933350 56.04689789]
[74.44771576 41.05027771]
[74.76609802 26.05365562]
[75.08448029 11.05703545]
[60.35246658 0.58605427]
[54.85181427 -16.46648788]
[60.58742523 -33.27632904]
[75.10633850 -43.23321533]
[74.78795624 -58.22983932]
[74.46957397 -73.22645569]
[74.15119171 -88.22307587]
[73.83281708 -103.21970367]
[73.51443481 -118.21632385]
[73.19605255 -133.21293640]
[72.87767029 -148.20956421]
[72.40014648 -163.20196533]
[71.76352692 -178.18844604]
[57.68197632 -186.62246704]
[50.80970764 -201.36425781]
[53.35670853 -217.27748108]
[64.28269196 -228.92031860]
[60.50301743 -243.43630981]
[56.72334671 -257.95230103]
[52.78982544 -272.42736816]
[48.70289993 -286.85986328]
[44.61597443 -301.29235840]
[40.52904510 -315.72485352]
[36.28917313 -330.11318970]
[31.89683151 -344.45568848]
[27.50448990 -358.79818726]
[23.11214828 -373.14068604]
[18.71980667 -387.48318481]
[8.30043888 -400.85751343]
[18.26774216 -414.57208252]
[34.20555878 -408.79086304]
[33.06230927 -391.87551880]
[37.45465088 -377.53302002]
[41.84698868 -363.19052124]
[46.23933029 -348.84802246]
[50.63167191 -334.50552368]
[55.63230515 -328.99267578]
[54.96154404 -319.81179810]
[59.04847336 -305.37930298]
[63.13539886 -290.94680786]
[67.22232819 -276.51428223]
[72.10482025 -270.89657593]
[71.23934174 -261.73196411]
[75.01901245 -247.21598816]
[78.79868317 -232.69998169]
[82.97157288 -232.26870728]
[87.02799225 -231.19885254]
[95.68949890 -243.44541931]
[104.35101318 -255.69197083]
[105.31771851 -272.06259155]
[120.09770203 -279.16781616]
[133.48657227 -269.69839478]
[131.71101379 -253.39566040]
[116.59757233 -247.03045654]
[107.93605804 -234.78390503]
[99.27455139 -222.53733826]
[105.54596710 -206.43193054]
[100.82186127 -189.58338928]
[86.75001526 -178.82505798]
[87.38662720 -163.83857727]
[90.83679199 -157.24359131]
[87.87429047 -148.52793884]
[88.19267273 -133.53132629]
[88.51105499 -118.53469849]
[88.82943726 -103.53807831]
[89.14781189 -88.54145813]
[89.46619415 -73.54483795]
[89.78457642 -58.54821777]
[90.10295868 -43.55159760]
[101.05521393 -38.13729095]
[108.68984985 -28.50638580]
[111.49497223 -16.46648788]
[108.87262726 -4.31134367]
[101.26497650 5.61612749]
[90.08110046 11.37541676]
[89.76271820 26.37203789]
[89.44433594 41.36865616]
[89.12595367 56.36528015]
[88.80757904 71.36190033]
[88.48919678 86.35852051]
[111.74530029 70.03736877]
[146.16601562 94.30548859]
[156.54508972 105.13482666]
[166.92417908 115.96416473]
[182.49301147 116.46343231]
[192.86460876 127.59378052]
[192.29269409 142.43319702]
[202.67176819 153.26254272]
[213.05085754 164.09188843]
[223.42994690 174.92121887]
[239.37431335 176.69792175]
[247.80412292 190.34774780]
[242.25276184 205.39971924]
[226.97874451 210.30725098]
[213.69898987 201.30570984]
[212.60060120 185.30030823]
[202.22151184 174.47096252]
[191.84243774 163.64163208]
[181.46334839 152.81228638]
[166.61302185 152.75387573]
[155.93289185 141.91925049]
[156.09483337 126.34325409]
[145.71575928 115.51390839]
[135.33666992 104.68457031]
[128.37750244 107.48099518]
[114.45916748 113.07383728]
[107.50000000 115.87026215]
[107.50000000 130.87026978]
[107.50000000 145.87026978]
[107.50000000 160.87026978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 147]
[2 146]
[3 145]
[4 144]
[5 31]
[6 30]
[7 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[32 117]
[33 116]
[34 115]
[35 114]
[36 113]
[37 112]
[41 106]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[47 100]
[48 99]
[49 97]
[50 96]
[54 82]
[55 81]
[56 80]
[57 78]
[58 77]
[59 76]
[60 75]
[61 73]
[62 72]
[63 71]
[64 70]
[65 69]
[84 93]
[85 92]
[86 91]
[119 141]
[120 140]
[121 139]
[124 136]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
