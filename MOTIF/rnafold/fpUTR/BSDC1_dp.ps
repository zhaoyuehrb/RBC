%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:47:04 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (BSDC1)
} def

/sequence { (\
GUCGGAAGUCAAAGGUCAGUAAAUAGUGGUGAUGUCAUGCAGGCAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 16 0.004302134 ubox
1 33 0.026108007 ubox
1 38 0.014725835 ubox
1 40 0.343551860 ubox
1 44 0.741918254 ubox
2 8 0.005888742 ubox
2 15 0.030975068 ubox
2 29 0.007839024 ubox
2 32 0.031124950 ubox
2 37 0.014770097 ubox
2 39 0.322143196 ubox
2 43 0.741988386 ubox
3 14 0.059305148 ubox
3 28 0.010485593 ubox
3 31 0.032015798 ubox
3 34 0.003725330 ubox
3 39 0.130034523 ubox
3 42 0.737161423 ubox
4 10 0.073126075 ubox
4 17 0.010301570 ubox
4 27 0.009762038 ubox
4 30 0.029812630 ubox
4 36 0.061285387 ubox
4 38 0.129948169 ubox
5 9 0.047632886 ubox
5 16 0.008680788 ubox
5 17 0.019267118 ubox
5 35 0.056041176 ubox
5 36 0.382424723 ubox
6 16 0.018446761 ubox
6 35 0.352567011 ubox
8 16 0.003402665 ubox
8 24 0.003848230 ubox
8 30 0.004662187 ubox
8 33 0.401484785 ubox
8 35 0.013153830 ubox
8 38 0.388479463 ubox
8 40 0.405219072 ubox
8 44 0.176044765 ubox
9 15 0.014267600 ubox
9 23 0.003853457 ubox
9 29 0.016258241 ubox
9 32 0.417329317 ubox
9 34 0.010718194 ubox
9 37 0.376999966 ubox
9 39 0.365615483 ubox
9 43 0.175965954 ubox
10 14 0.025475587 ubox
10 28 0.019569123 ubox
10 31 0.418314657 ubox
10 34 0.130196458 ubox
10 39 0.271929356 ubox
10 42 0.167141273 ubox
11 27 0.018274193 ubox
11 30 0.410112996 ubox
11 33 0.102962849 ubox
11 38 0.268062432 ubox
14 36 0.066728263 ubox
15 24 0.098227869 ubox
15 27 0.012281167 ubox
15 30 0.070913373 ubox
15 33 0.834761104 ubox
15 35 0.039473101 ubox
15 38 0.008943017 ubox
15 40 0.008145935 ubox
15 44 0.165604812 ubox
16 23 0.095782622 ubox
16 26 0.014298482 ubox
16 29 0.390872457 ubox
16 32 0.871291886 ubox
16 37 0.006321466 ubox
16 39 0.006285634 ubox
16 43 0.165699973 ubox
17 28 0.403367158 ubox
17 31 0.876664248 ubox
17 34 0.015931425 ubox
17 39 0.005989458 ubox
17 42 0.164678117 ubox
18 27 0.401086305 ubox
18 30 0.875299300 ubox
18 33 0.015715347 ubox
18 38 0.005985440 ubox
19 27 0.010094473 ubox
19 30 0.003890496 ubox
19 33 0.005007232 ubox
19 38 0.003600464 ubox
19 40 0.164653593 ubox
19 44 0.034592205 ubox
20 26 0.032925219 ubox
20 28 0.849801684 ubox
20 29 0.044110288 ubox
20 31 0.009162857 ubox
20 32 0.005187699 ubox
20 37 0.003571058 ubox
20 39 0.164360746 ubox
20 43 0.034437287 ubox
21 27 0.807536849 ubox
21 30 0.010601494 ubox
21 38 0.144403085 ubox
23 30 0.014011243 ubox
23 33 0.007014970 ubox
23 35 0.070366236 ubox
23 38 0.005396082 ubox
24 29 0.015065286 ubox
24 31 0.007121345 ubox
24 32 0.006911377 ubox
24 34 0.072260792 ubox
24 37 0.006404565 ubox
24 39 0.004214021 ubox
25 30 0.008311948 ubox
25 33 0.071504695 ubox
25 38 0.005079604 ubox
26 33 0.121653605 ubox
26 35 0.004398708 ubox
26 38 0.067567045 ubox
26 40 0.016729383 ubox
26 44 0.014690503 ubox
27 32 0.122524834 ubox
27 34 0.005263184 ubox
27 37 0.078383635 ubox
27 39 0.014988344 ubox
27 41 0.016352578 ubox
27 43 0.014373582 ubox
27 45 0.009407624 ubox
28 33 0.006011478 ubox
28 36 0.078549077 ubox
28 38 0.010660307 ubox
28 40 0.017402334 ubox
28 44 0.010276942 ubox
29 35 0.064282987 ubox
29 38 0.039028284 ubox
29 40 0.013932722 ubox
29 44 0.017751356 ubox
30 34 0.017792949 ubox
30 37 0.045117197 ubox
30 39 0.013821025 ubox
30 41 0.011893653 ubox
30 43 0.017575822 ubox
30 45 0.010029530 ubox
31 36 0.045360826 ubox
31 38 0.006764152 ubox
31 40 0.012532038 ubox
31 44 0.011095614 ubox
32 38 0.004415011 ubox
33 37 0.004137076 ubox
33 41 0.045681823 ubox
33 45 0.232368231 ubox
34 40 0.077167825 ubox
34 44 0.415760607 ubox
35 39 0.072232223 ubox
35 43 0.415829075 ubox
36 42 0.414846003 ubox
38 45 0.031969235 ubox
39 44 0.035363206 ubox
1 44 0.9500000 lbox
2 43 0.9500000 lbox
3 42 0.9500000 lbox
15 33 0.9500000 lbox
16 32 0.9500000 lbox
17 31 0.9500000 lbox
18 30 0.9500000 lbox
20 28 0.9500000 lbox
21 27 0.9500000 lbox
showpage
end
%%EOF
