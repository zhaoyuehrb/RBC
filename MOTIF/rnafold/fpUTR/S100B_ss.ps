%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:55:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCAGAGGGAAUAAGAGGCUGCCUCUGCCCACCAGUCCUGCCGCCCAGGACCCGCAGCAGAGACGACGCCUGCAGCAAGGAGACCAGGAAGGGGUGAGACAAGGAAGAGG\
) } def
/len { sequence length } bind def

/coor [
[-34.51813889 262.50427246]
[-46.24560928 271.85662842]
[-57.97308350 281.20898438]
[-69.70055389 290.56130981]
[-81.42802429 299.91366577]
[-93.15550232 309.26602173]
[-104.88297272 318.61834717]
[-116.61044312 327.97070312]
[-128.33792114 337.32305908]
[-124.46569061 352.05145264]
[-126.92523193 367.08044434]
[-135.29039001 379.80615234]
[-148.11187744 388.02380371]
[-163.16827393 390.30960083]
[-177.85096741 386.26754761]
[-189.61610413 376.59793091]
[-196.42529297 362.97607422]
[-197.09880066 347.76205444]
[-191.51995850 333.59179688]
[-180.65530396 322.92037964]
[-166.38722229 317.59667969]
[-151.18774414 318.54306030]
[-137.69026184 325.59558105]
[-125.96279144 316.24322510]
[-114.23532104 306.89089966]
[-102.50784302 297.53854370]
[-90.78037262 288.18618774]
[-79.05290222 278.83383179]
[-67.32543182 269.48150635]
[-55.59795761 260.12915039]
[-43.87048340 250.77680969]
[-38.52557373 228.24043274]
[-15.15381908 223.46902466]
[-5.15862083 212.28439331]
[-2.58118010 194.98803711]
[14.83817196 189.22709656]
[24.51575089 177.76652527]
[34.19333267 166.30596924]
[36.49302292 151.58996582]
[51.30809402 146.03800964]
[60.98567581 134.57745361]
[70.66325378 123.11688995]
[80.34083557 111.65632629]
[77.97541809 93.89504242]
[89.14717102 79.88610077]
[106.98950195 78.23995209]
[116.00926208 66.25479889]
[118.12535858 50.57574463]
[131.96066284 45.05908966]
[140.98042297 33.07393265]
[142.36848450 13.05951118]
[160.26741028 5.97236729]
[168.60096741 -6.49967718]
[169.31446838 -24.83306694]
[185.22129822 -32.09802246]
[193.20178223 -44.79888535]
[193.99256897 -60.60031509]
[207.31523132 -67.26031494]
[215.29571533 -79.96117401]
[223.27619934 -92.66204071]
[231.25668335 -105.36289978]
[224.61216736 -119.28604889]
[226.57254028 -134.58834839]
[236.51225281 -146.38690186]
[251.25956726 -150.91682434]
[266.10867310 -146.73263550]
[276.32128906 -135.16950989]
[278.63858032 -119.91716766]
[272.32113647 -105.84260559]
[259.38482666 -97.43695068]
[243.95755005 -97.38242340]
[235.97706604 -84.68155670]
[227.99658203 -71.98069763]
[220.01609802 -59.27983093]
[219.79614258 -44.38685226]
[205.90264893 -36.81840515]
[197.92216492 -24.11754036]
[200.30006409 -12.16531277]
[193.63368225 -1.48599291]
[181.07301331 1.83387649]
[172.73945618 14.30592060]
[175.65206909 24.28318977]
[172.45082092 34.40407181]
[163.98466492 41.16821671]
[152.96557617 42.09368896]
[143.94583130 54.07884598]
[142.47488403 68.90064240]
[127.99441528 75.27455139]
[118.97466278 87.25971222]
[122.77155304 98.04828644]
[120.86589050 109.32562256]
[113.73490906 118.26759338]
[103.16436768 122.63491821]
[91.80139160 121.33390808]
[82.12381744 132.79446411]
[72.44623566 144.25503540]
[62.76865768 155.71559143]
[59.77675629 171.25132751]
[45.65389252 175.98355103]
[35.97631073 187.44410706]
[26.29873276 198.90467834]
[26.58585167 211.89349365]
[18.16940117 221.25575256]
[6.02601147 222.27958679]
[-3.96918702 233.46421814]
[-1.70363331 240.37821960]
[-1.77260542 247.60139465]
[-4.13537645 254.37225342]
[-8.51116371 259.98770142]
[-14.41206646 263.87606812]
[-21.19730568 265.65518188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 31]
[2 30]
[3 29]
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[9 23]
[33 105]
[34 104]
[36 101]
[37 100]
[38 99]
[40 97]
[41 96]
[42 95]
[43 94]
[46 89]
[47 88]
[49 86]
[50 85]
[52 81]
[53 80]
[55 77]
[56 76]
[58 74]
[59 73]
[60 72]
[61 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
