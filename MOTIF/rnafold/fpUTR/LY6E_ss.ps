%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:06:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCCGCGCGGCUGCCUGGGAGGCUCCGGGCCAGCCGCGGUCCAGAGCGCGCGAGGUUCGGGGAGCUCGGCCAGGCUGCUGGUACCUGCGUCCGCCCGGCGAGCAGGACAGGCUGCUUUGGUUUGUGACCUCCAGGCAGGACGGCCAUCCUCUCCAGA\
) } def
/len { sequence length } bind def

/coor [
[90.62403107 217.89176941]
[88.27751160 203.07644653]
[85.64056396 188.31004333]
[82.71421051 173.59826660]
[79.78785706 158.88648987]
[76.86150360 144.17469788]
[73.93515015 129.46292114]
[59.96692276 123.99586487]
[47.83166885 132.81265259]
[35.69641495 141.62942505]
[23.56115913 150.44619751]
[11.42590332 159.26298523]
[-0.70935154 168.07975769]
[-12.84460640 176.89654541]
[-24.97986221 185.71331787]
[-37.02797318 194.64880371]
[-48.98778534 203.70214844]
[-60.94759369 212.75549316]
[-72.90740204 221.80882263]
[-84.86721039 230.86216736]
[-96.82702637 239.91551208]
[-102.69972992 255.22705078]
[-118.93646240 257.52932739]
[-128.83427429 244.45393372]
[-122.21112823 229.45173645]
[-105.88036346 227.95568848]
[-93.92055511 218.90235901]
[-81.96073914 209.84901428]
[-70.00093079 200.79568481]
[-58.04112244 191.74234009]
[-46.08131409 182.68899536]
[-42.62830353 176.11035156]
[-33.79663849 173.57806396]
[-21.66138458 164.76129150]
[-9.52613068 155.94450378]
[2.60912466 147.12773132]
[14.74438000 138.31094360]
[26.87963486 129.49417114]
[39.01488876 120.67739105]
[51.15014267 111.86061096]
[56.75407028 97.94673157]
[54.11712646 83.18033600]
[51.48017883 68.41394043]
[48.84323502 53.64753723]
[39.52238083 47.91563797]
[35.01428223 38.18738937]
[36.60020828 27.80603218]
[43.51139069 20.19378471]
[41.45620728 5.33524418]
[31.90107918 -7.27467775]
[37.82162094 -20.94202805]
[35.76643372 -35.80056763]
[33.71125031 -50.65910721]
[21.39406395 -60.19455338]
[19.52147865 -75.29250336]
[28.68797302 -86.97629547]
[26.63278770 -101.83483124]
[24.57760429 -116.69337463]
[21.30331421 -120.89130402]
[20.12141800 -125.46894836]
[20.81974030 -129.55261230]
[22.86564636 -132.48428345]
[21.68876076 -147.43804932]
[20.51187325 -162.39181519]
[11.71567631 -175.54237366]
[18.43055534 -188.83747864]
[17.25366783 -203.79124451]
[2.72875690 -212.41017151]
[-3.75035357 -227.82783508]
[0.17893966 -243.91273499]
[12.78170681 -254.39453125]
[11.31144905 -269.32229614]
[9.84119225 -284.25009155]
[8.37093544 -299.17785645]
[6.90067816 -314.10562134]
[-3.08607769 -327.11318970]
[3.43458343 -342.16021729]
[19.75476456 -343.76760864]
[29.08566284 -330.28182983]
[21.82844925 -315.57586670]
[23.29870605 -300.64810181]
[24.76896286 -285.72033691]
[26.23921967 -270.79257202]
[27.70947838 -255.86479187]
[39.82776260 -250.19430542]
[47.61337662 -239.18048096]
[48.93751144 -225.64892578]
[43.34622955 -213.13676453]
[32.20742798 -204.96812439]
[33.38431549 -190.01435852]
[42.09633255 -177.93339539]
[35.46563339 -163.56869507]
[36.64252090 -148.61492920]
[37.81940842 -133.66117859]
[39.43614197 -118.74855804]
[41.49132919 -103.89001465]
[43.54651260 -89.03147888]
[55.54030991 -80.27451324]
[57.83622360 -65.23511505]
[48.56978989 -52.71429443]
[50.62497330 -37.85575485]
[52.68016052 -22.99721336]
[62.08828354 -11.45007420]
[56.31474686 3.28005910]
[58.36993027 18.13859940]
[71.34656525 32.43291855]
[63.60963440 51.01059341]
[66.24658203 65.77699280]
[68.88352203 80.54338837]
[71.52046967 95.30979156]
[82.85191345 78.72416687]
[101.30978394 74.24416351]
[117.05604553 82.75888824]
[122.67199707 98.60159302]
[137.10882568 102.67320251]
[151.54565430 106.74480438]
[165.98248291 110.81641388]
[180.41931152 114.88802338]
[194.85614014 118.95962524]
[214.10270691 113.08088684]
[227.05625916 127.39611816]
[241.64181519 130.89779663]
[256.22735596 134.39947510]
[270.81292725 137.90115356]
[287.62588501 135.71945190]
[294.37664795 151.27142334]
[281.30123901 162.06355286]
[267.31121826 152.48670959]
[252.72567749 148.98503113]
[238.14013672 145.48335266]
[223.55458069 141.98167419]
[215.30157471 148.11343384]
[204.81475830 148.67417908]
[195.57522583 143.23425293]
[190.78453064 133.39645386]
[176.34770203 129.32484436]
[161.91087341 125.25324249]
[147.47404480 121.18163300]
[133.03721619 117.11003113]
[118.60038757 113.03842163]
[111.97810364 121.67492676]
[101.34807587 126.77989197]
[88.64692688 126.53656769]
[91.57328033 141.24835205]
[94.49963379 155.96012878]
[97.42598724 170.67190552]
[100.35234833 185.38368225]
[104.46908569 190.66394043]
[105.15745544 196.37104797]
[103.09283447 200.72991943]
[105.43935394 215.54524231]
[119.60372162 221.65869141]
[128.19540405 234.47222900]
[128.47280884 249.89709473]
[120.34744263 263.01129150]
[106.41206360 269.63009644]
[91.11340332 267.64151001]
[79.33320618 257.68005371]
[74.83049774 242.92439270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 147]
[4 146]
[5 145]
[6 144]
[7 143]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[41 110]
[42 109]
[43 108]
[44 107]
[48 105]
[49 104]
[51 102]
[52 101]
[53 100]
[56 97]
[57 96]
[58 95]
[62 94]
[63 93]
[64 92]
[66 90]
[67 89]
[71 84]
[72 83]
[73 82]
[74 81]
[75 80]
[114 140]
[115 139]
[116 138]
[117 137]
[118 136]
[119 135]
[121 131]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
