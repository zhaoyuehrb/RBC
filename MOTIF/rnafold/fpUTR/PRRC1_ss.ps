%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGCCGCAGGAGCAUGCGCCGCCCGUGGCCAUCUUGUAGGCGGGGACACGCCGAGGUAACUUCCAGGGUGCGCCUUCGUUGUCUUCUCCAAGCUGUAGUUCUACGUCCCGACCUCCCUAUCAUACCACACUCUUCAGCGACCACGCAGGCACUUUCCCGGUCCCCAGUAUACCAUAAUUGAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[58.20742798 266.60382080]
[55.78552628 251.80064392]
[56.66732025 236.82658386]
[60.81018448 222.40934753]
[50.42623520 233.23402405]
[40.04228973 244.05870056]
[29.74866486 254.96931458]
[19.54607391 265.96508789]
[9.34348297 276.96087646]
[-0.85910845 287.95663452]
[-11.06169987 298.95242310]
[-21.26428986 309.94821167]
[-22.43058968 315.07489014]
[-25.18047905 318.85382080]
[-28.73032379 320.90621948]
[-32.26006699 321.22161865]
[-42.99806976 331.69515991]
[-46.96651459 339.94403076]
[-54.00267792 342.25170898]
[-64.91328430 352.54534912]
[-75.82388306 362.83895874]
[-76.03296661 378.64187622]
[-87.41327667 389.60836792]
[-103.21308899 389.23220825]
[-114.05865479 377.73660278]
[-113.51548004 361.94165039]
[-101.90583801 351.21823120]
[-86.11750793 351.92837524]
[-75.20690918 341.63473511]
[-64.29630280 331.34112549]
[-53.47162247 320.95715332]
[-42.73361969 310.48361206]
[-32.26006699 299.74560547]
[-22.05747795 288.74984741]
[-11.85488701 277.75405884]
[-1.65229547 266.75827026]
[8.55029583 255.76249695]
[18.75288582 244.76672363]
[21.00201607 237.71162415]
[29.21761131 233.67475891]
[39.60155869 222.85008240]
[49.98550415 212.02540588]
[57.80703354 199.22604370]
[62.70234299 185.04733276]
[67.59764862 170.86860657]
[72.49295807 156.68989563]
[77.38826752 142.51118469]
[82.28357697 128.33247375]
[69.20834351 112.97976685]
[67.34746552 92.89983368]
[53.77930832 86.50411987]
[40.21115494 80.10840607]
[26.64299583 73.71269226]
[11.92737007 78.82034302]
[-1.74156082 72.14089966]
[-6.52023649 58.08032227]
[-20.08839226 51.68460846]
[-34.87528610 57.26343155]
[-49.24140549 50.67630768]
[-54.66358185 35.83125305]
[-47.92493439 21.53558350]
[-33.02338791 16.27066231]
[-18.79976082 23.16007233]
[-13.69268036 38.11645126]
[-0.12452427 44.51216507]
[13.76238918 39.25011063]
[27.61353874 45.54298782]
[33.03870773 60.14453888]
[46.60686493 66.54025269]
[60.17502213 72.93595886]
[73.74317932 79.33167267]
[90.94971466 67.83335876]
[111.62751770 68.67267609]
[119.87014771 56.14035797]
[128.11277771 43.60803986]
[136.35542297 31.07572365]
[137.47431946 15.29413128]
[150.93247986 8.91236687]
[159.17512512 -3.61995029]
[167.41775513 -16.15226746]
[168.53665161 -31.93385887]
[181.99482727 -38.31562424]
[190.23745728 -50.84794235]
[198.48008728 -63.38025665]
[183.98396301 -59.52512360]
[169.94458008 -64.80678558]
[161.58398438 -77.26071167]
[162.01190186 -92.25460815]
[171.06918335 -104.21142578]
[185.38693237 -108.68378448]
[199.63960266 -104.00816345]
[208.52584839 -91.92369080]
[208.74066162 -76.92608643]
[218.57212830 -88.25490570]
[228.40361023 -99.58372498]
[238.23507690 -110.91253662]
[241.43652344 -126.40645599]
[255.62200928 -130.94750977]
[265.45349121 -142.27633667]
[256.03363037 -154.00263977]
[248.85916138 -167.22257996]
[244.16069031 -181.51118469]
[242.08927917 -196.40913391]
[242.71148682 -211.43753052]
[246.00733948 -226.11326599]
[251.87086487 -239.96456909]
[260.11358643 -252.54618835]
[270.47055054 -263.45367432]
[282.60879517 -272.33639526]
[296.13812256 -278.90881348]
[310.62365723 -282.95965576]
[325.59973145 -284.35870361]
[340.58489990 -283.06094360]
[355.09750366 -279.10815430]
[368.67095947 -272.62738037]
[380.86898804 -263.82693481]
[391.29946899 -252.98971558]
[399.62707520 -240.46411133]
[405.58413696 -226.65277100]
[408.97912598 -211.99966431]
[409.70294189 -196.97581482]
[407.73233032 -182.06419373]
[403.13058472 -167.74415588]
[396.04565430 -154.47599792]
[386.70532227 -142.68627930]
[375.40979004 -132.75395203]
[362.52221680 -124.99832153]
[348.45681763 -119.66869354]
[333.66580200 -116.93639374]
[318.62460327 -116.88925934]
[303.81674194 -119.52879333]
[289.71823120 -124.77015686]
[276.78228760 -132.44485474]
[266.95083618 -121.11604309]
[264.45260620 -106.43244171]
[249.56390381 -101.08106995]
[239.73242188 -89.75225067]
[229.90095520 -78.42343140]
[220.06947327 -67.09461212]
[211.01240540 -55.13762283]
[202.76977539 -42.60530472]
[194.52714539 -30.07298851]
[193.99781799 -15.18779278]
[179.95007324 -7.90963268]
[171.70744324 4.62268448]
[163.46479797 17.15500069]
[162.93547058 32.04019928]
[148.88774109 39.31835938]
[140.64509583 51.85067368]
[132.40246582 64.38299561]
[124.15982819 76.91530609]
[129.02032471 83.43434906]
[132.16232300 90.93436432]
[133.39973450 98.97122955]
[132.65928650 107.06901550]
[129.98484802 114.74818420]
[125.53478241 121.55400848]
[119.57260132 127.08345795]
[112.45138550 131.00907898]
[104.59282684 133.09843445]
[96.46228790 133.22776794]
[91.56697845 147.40649414]
[86.67167664 161.58520508]
[81.77636719 175.76391602]
[76.88105774 189.94262695]
[71.98574829 204.12135315]
[82.92468262 193.85783386]
[95.84732056 186.24169922]
[110.12511444 181.64337158]
[125.06361389 180.28651428]
[139.93624878 182.23710632]
[154.01962280 187.40028381]
[166.62875366 195.52493286]
[177.15036011 206.21585083]
[185.07266235 218.95307922]
[190.01036072 233.11709595]
[191.72328186 248.01896667]
[190.12811279 262.93389893]
[185.30244446 277.13647461]
[177.48097229 289.93588257]
[167.04414368 300.70956421]
[154.49957275 308.93353271]
[140.45741272 314.20779419]
[125.60065460 316.27578735]
[110.65189362 315.03695679]
[96.33823395 310.55154419]
[83.35585022 303.03771973]
[72.33618927 292.86090088]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 42]
[5 41]
[6 40]
[7 38]
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[16 32]
[17 31]
[19 30]
[20 29]
[21 28]
[43 166]
[44 165]
[45 164]
[46 163]
[47 162]
[48 161]
[50 71]
[51 70]
[52 69]
[53 68]
[56 65]
[57 64]
[73 151]
[74 150]
[75 149]
[76 148]
[78 146]
[79 145]
[80 144]
[82 142]
[83 141]
[84 140]
[93 139]
[94 138]
[95 137]
[96 136]
[98 134]
[99 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
