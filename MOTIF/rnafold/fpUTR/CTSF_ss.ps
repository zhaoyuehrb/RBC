%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGACUCAGGCCCCGCUGGCCGCGGGCUCGGUACCCGGUGGGUCGGUGGAGCGUCUGUUGGGUCCGGGCCGCCGGCUUCGCCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[109.97101593 187.01695251]
[119.37864685 174.02172852]
[118.34378052 159.05746460]
[117.30891418 144.09320068]
[116.27404785 129.12895203]
[109.57395172 125.75866699]
[97.03638458 133.99331665]
[96.17376709 119.01811218]
[89.47367859 115.64783478]
[76.84216309 123.73763275]
[64.21065521 131.82743835]
[61.07222748 147.31697083]
[47.85428238 155.98077393]
[32.39878845 152.67875671]
[23.87521935 139.36994934]
[27.34045410 123.95024109]
[40.73863220 115.56785583]
[56.12085342 119.19592285]
[68.75236511 111.10612488]
[81.38388062 103.01631927]
[90.32586670 90.97303009]
[94.41616058 76.54148865]
[98.50645447 62.10993958]
[102.59674835 47.67839432]
[95.15091705 33.99638748]
[99.50463867 19.41901588]
[112.59422302 12.40487003]
[116.68451691 -2.02667522]
[120.77481079 -16.45822144]
[124.86510468 -30.88976669]
[128.95539856 -45.32131195]
[133.04568481 -59.75285721]
[137.13598633 -74.18440247]
[136.47203064 -83.51552582]
[141.62454224 -89.03887939]
[146.21052551 -103.32064819]
[150.79650879 -117.60240936]
[155.38247681 -131.88417053]
[159.96846008 -146.16593933]
[164.55442810 -160.44770813]
[169.14041138 -174.72947693]
[173.72639465 -189.01123047]
[178.31236267 -203.29299927]
[182.89834595 -217.57476807]
[182.55685425 -226.92324829]
[187.89695740 -232.26545715]
[192.97314453 -246.38043213]
[186.01316833 -260.56967163]
[191.20402527 -275.49716187]
[205.46604919 -282.30673218]
[220.33784485 -276.95837402]
[226.99624634 -262.62515259]
[221.49093628 -247.81071472]
[207.08810425 -241.30422974]
[202.01191711 -227.18927002]
[197.18011475 -212.98878479]
[192.59413147 -198.70701599]
[188.00814819 -184.42526245]
[183.42218018 -170.14349365]
[178.83619690 -155.86172485]
[174.25022888 -141.57995605]
[169.66424561 -127.29819489]
[165.07826233 -113.01643372]
[160.49229431 -98.73466492]
[155.90631104 -84.45290375]
[151.56753540 -70.09410858]
[147.47723389 -55.66256332]
[143.38694763 -41.23101807]
[139.29664612 -26.79947281]
[135.20635986 -12.36792755]
[131.11605835 2.06361818]
[127.02577209 16.49516296]
[134.48837280 29.33436203]
[130.54582214 44.02827072]
[117.02828979 51.76868820]
[112.93799591 66.20023346]
[108.84770203 80.63178253]
[104.75740814 95.06332397]
[110.85463715 93.37731171]
[117.78994751 94.65686035]
[124.41897583 99.12745667]
[129.56169128 106.62112427]
[132.12805176 116.57936096]
[131.23829651 128.09408569]
[132.27317810 143.05833435]
[133.30804443 158.02259827]
[134.34291077 172.98686218]
[145.44981384 184.56338501]
[143.18124390 200.44523621]
[129.27742004 208.44920349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[9 20]
[10 19]
[11 18]
[21 78]
[22 77]
[23 76]
[24 75]
[27 72]
[28 71]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 58]
[43 57]
[44 56]
[46 55]
[47 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
