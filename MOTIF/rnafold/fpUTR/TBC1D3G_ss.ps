%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[75.92707825 131.65859985]
[64.75911713 141.67240906]
[53.59115219 151.68623352]
[48.48183060 166.65972900]
[33.84065628 169.39564514]
[22.67269325 179.40946960]
[11.50473213 189.42329407]
[7.10230017 197.63372803]
[-0.16977781 199.56825256]
[-11.64376545 209.22990417]
[-23.11775398 218.89155579]
[-25.91547585 234.68878174]
[-40.07884216 242.22393799]
[-54.74292755 235.71670532]
[-58.65870285 220.15887451]
[-48.82232285 207.48507690]
[-32.77941132 207.41757202]
[-21.30542183 197.75592041]
[-9.83143425 188.09425354]
[1.49091005 178.25532532]
[12.65887165 168.24150085]
[23.82683372 158.22767639]
[28.13734818 143.97044373]
[43.57733154 140.51828003]
[54.74529266 130.50445557]
[65.91325378 120.49063110]
[61.20625305 108.76455688]
[60.41491318 96.15383148]
[63.61910629 83.93131256]
[70.49541473 73.33069611]
[80.34977722 65.42195892]
[92.18754578 61.00336075]
[104.81386566 60.52090454]
[109.40472412 46.24070740]
[109.06385803 36.93069077]
[114.36679077 31.59174347]
[119.39954376 17.46122932]
[124.43229675 3.33071637]
[124.38113403 -5.98539972]
[129.84754944 -11.15684319]
[135.31732178 -25.12400436]
[134.67837524 -31.99502182]
[137.32284546 -37.27863312]
[141.58589172 -39.77205276]
[147.91342163 -53.37214279]
[154.24093628 -66.97222900]
[149.85658264 -77.16944885]
[151.86820984 -87.85982513]
[159.34796143 -95.44979095]
[169.57312012 -97.52887726]
[176.73391724 -110.70927429]
[183.89471436 -123.88967896]
[191.05551147 -137.07008362]
[192.44801331 -146.28167725]
[198.64949036 -150.54396057]
[206.21673584 -163.49528503]
[213.78398132 -176.44660950]
[216.55401611 -193.17274475]
[233.39329529 -195.14122009]
[239.94642639 -179.50494385]
[226.73530579 -168.87937927]
[219.16806030 -155.92805481]
[211.60081482 -142.97671509]
[204.23591614 -129.90927124]
[197.07511902 -116.72887421]
[189.91430664 -103.54847717]
[182.75350952 -90.36807251]
[184.84342957 -71.25145721]
[167.84103394 -60.64470291]
[161.51350403 -47.04461670]
[155.18597412 -33.44452667]
[149.28448486 -19.65423012]
[143.81471252 -5.68706989]
[138.56280518 8.36346626]
[133.53005981 22.49398041]
[128.49731445 36.62449265]
[123.68492126 50.83156967]
[119.09406281 65.11176300]
[132.35632324 76.87338257]
[139.19091797 93.22915649]
[138.24012756 110.92998505]
[129.69284058 126.45953369]
[138.80883789 138.37165833]
[147.92481995 150.28378296]
[157.04081726 162.19590759]
[166.15681458 174.10803223]
[175.27279663 186.02015686]
[184.38879395 197.93228149]
[199.73094177 203.72454834]
[202.11840820 219.94897461]
[189.09516907 229.91526794]
[174.05841064 223.37095642]
[172.47666931 207.04827881]
[163.36067200 195.13615417]
[154.24468994 183.22402954]
[145.12869263 171.31190491]
[136.01269531 159.39978027]
[126.89671326 147.48765564]
[117.78072357 135.57553101]
[103.66516876 139.60224915]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 26]
[2 25]
[3 24]
[5 22]
[6 21]
[7 20]
[9 19]
[10 18]
[11 17]
[33 78]
[34 77]
[36 76]
[37 75]
[38 74]
[40 73]
[41 72]
[44 71]
[45 70]
[46 69]
[50 67]
[51 66]
[52 65]
[53 64]
[55 63]
[56 62]
[57 61]
[82 99]
[83 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
