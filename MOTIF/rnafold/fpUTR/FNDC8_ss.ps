%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:23:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCACCUGCAGACUGUCCAAACUAAAGGUGGGCCACUGCCCCCACAGUUUCUCUCUGCUUCUGGUCAGCUGGGUUGUCCUGCAUGGUGACGGGUGUCAUCCCGAACAAAUCAG\
) } def
/len { sequence length } bind def

/coor [
[177.75028992 315.90103149]
[189.08306885 306.07412720]
[203.14505005 300.85293579]
[218.14495850 300.90255737]
[232.17005920 306.21545410]
[224.09153748 293.57672119]
[216.01301575 280.93798828]
[207.93449402 268.29925537]
[199.68557739 255.77107239]
[191.26777649 243.35574341]
[182.84996033 230.94041443]
[174.43215942 218.52507019]
[166.01435852 206.10974121]
[157.42919922 193.80952454]
[148.67828369 181.62669373]
[133.98411560 179.47795105]
[124.93589020 167.24748230]
[127.28932190 151.84945679]
[118.53840637 139.66662598]
[109.78748322 127.48379517]
[101.03656769 115.30096436]
[63.81742477 111.36892700]
[50.03823090 105.44155121]
[36.25903702 99.51416779]
[22.47984314 93.58679199]
[10.54708099 100.00350952]
[-2.70421863 98.35691833]
[-12.41514778 89.47854614]
[-15.15692997 76.80943298]
[-28.77056122 70.51110077]
[-38.00800705 69.72238922]
[-42.66399765 63.85345078]
[-56.10208130 57.18877411]
[-69.54016876 50.52409744]
[-82.97824860 43.85942459]
[-99.30158234 45.43448639]
[-108.60574341 31.93024254]
[-101.31941223 17.23870087]
[-84.93814087 16.47325897]
[-76.31357574 30.42133904]
[-62.87548828 37.08601379]
[-49.43740463 43.75069046]
[-35.99932098 50.41536713]
[-22.47222519 56.89746475]
[-8.85859299 63.19580460]
[6.59439564 56.71372604]
[22.28836441 63.48754883]
[28.40722084 79.80760193]
[42.18641663 85.73497772]
[55.96561050 91.66235352]
[69.74480438 97.58973694]
[76.67389679 94.71960449]
[63.54547501 87.46395874]
[61.03258133 72.67594147]
[71.02743530 61.49100494]
[86.00387573 62.33145142]
[94.68456268 74.56442261]
[90.53208923 88.97935486]
[97.46118927 86.10923004]
[103.01325989 72.17458344]
[108.56533051 58.23992920]
[100.99869537 44.55490112]
[104.04959869 29.21782112]
[116.27750397 19.47039032]
[131.90876770 19.91504669]
[143.56277466 30.34183884]
[145.73687744 45.82755280]
[137.40451050 59.06030655]
[122.49998474 63.79199982]
[116.94791412 77.72665405]
[111.39584351 91.66130066]
[113.21939850 106.55004120]
[121.97032166 118.73287964]
[130.72123718 130.91571045]
[139.47215271 143.09854126]
[154.81559753 145.78492737]
[163.51672363 158.26470947]
[160.86111450 172.87577820]
[169.61203003 185.05860901]
[177.26509094 190.29150391]
[178.42968750 197.69194031]
[186.84748840 210.10726929]
[195.26530457 222.52259827]
[203.68310547 234.93794250]
[212.10090637 247.35327148]
[219.60946655 252.79148865]
[220.57322693 260.22073364]
[228.65174866 272.85946655]
[236.73027039 285.49819946]
[244.80877686 298.13693237]
[253.26478577 302.49353027]
[256.39419556 310.36752319]
[268.57705688 319.11843872]
[280.75988770 327.86935425]
[292.94271851 336.62026978]
[308.49627686 333.81640625]
[321.42910767 342.90032959]
[324.06838989 358.48269653]
[314.84823608 371.31875610]
[299.23886108 373.79312134]
[286.50097656 364.43777466]
[284.19180298 348.80310059]
[272.00894165 340.05218506]
[259.82611084 331.30126953]
[247.64329529 322.55035400]
[252.18939209 336.84484863]
[251.42601013 351.82543945]
[245.45040894 365.58377075]
[235.02375793 376.36730957]
[221.47424316 382.80242920]
[206.52784729 384.06939697]
[192.08847046 380.00680542]
[179.99546814 371.13217163]
[171.78926086 358.57598877]
[168.51518250 343.93765259]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 90]
[6 89]
[7 88]
[8 87]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 79]
[15 78]
[18 75]
[19 74]
[20 73]
[21 72]
[22 51]
[23 50]
[24 49]
[25 48]
[29 45]
[30 44]
[32 43]
[33 42]
[34 41]
[35 40]
[59 71]
[60 70]
[61 69]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
