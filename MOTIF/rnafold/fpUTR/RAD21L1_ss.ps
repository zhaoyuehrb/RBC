%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCAGACGAGGCUUUGAAAGUAGGGCGCAGCCUGAGAGGCCGGCCGGACCCCGAGUGCUUUUGUUAAAUACAAGUAAGGAACACAGGCAAC\
) } def
/len { sequence length } bind def

/coor [
[96.87664795 154.33425903]
[80.67150879 150.87608337]
[73.46278381 164.03033447]
[66.25405884 177.18458557]
[59.04533005 190.33883667]
[59.95143890 206.71293640]
[46.07794571 215.45697021]
[31.69671440 207.57583618]
[31.60192108 191.17697144]
[45.89107895 183.13011169]
[53.09980774 169.97586060]
[60.30853271 156.82160950]
[67.51725769 143.66735840]
[60.05165863 136.96075439]
[53.94439697 128.99739075]
[49.40313339 120.04804230]
[46.58228302 110.41701508]
[45.57775879 100.43178558]
[46.42371750 90.43187714]
[49.09140015 80.75730896]
[53.49009323 71.73703003]
[59.47023010 63.67776489]
[49.78581238 52.22298050]
[34.27830887 50.75497437]
[24.62010956 39.00023651]
[26.11520004 24.22524834]
[16.43078232 12.77046490]
[6.74636364 1.31568193]
[-6.83733892 1.72428501]
[-17.97738647 -5.71203852]
[-22.67014503 -18.04775810]
[-19.38812828 -30.62907410]
[-28.68437576 -42.40106583]
[-37.98062515 -54.17305374]
[-47.27687454 -65.94504547]
[-61.83833694 -74.62837219]
[-57.52537537 -91.02455139]
[-40.57601929 -91.41905212]
[-35.50488281 -75.24129486]
[-26.20863342 -63.46930313]
[-16.91238594 -51.69731140]
[-7.61613703 -39.92532349]
[9.06790066 -38.74469376]
[20.02625656 -25.66856575]
[18.20114708 -8.36873627]
[27.88556480 3.08604717]
[37.56998062 14.54082966]
[52.38783646 15.52408123]
[62.37239075 27.00290298]
[61.24059677 42.53856277]
[70.92501831 53.99334717]
[87.05066681 47.13903427]
[104.51856232 45.76394653]
[121.51809692 50.01061630]
[136.28720093 59.43886185]
[147.29501343 73.07141113]
[153.40052795 89.49520111]
[153.97088623 107.00785828]
[168.43792725 110.97078705]
[182.90496826 114.93371582]
[197.37199402 118.89665222]
[211.83903503 122.85958099]
[227.19303894 119.04313660]
[237.42393494 129.86801147]
[251.89097595 133.83093262]
[266.35800171 137.79386902]
[280.82504272 141.75680542]
[290.11816406 129.72740173]
[303.30981445 122.17433167]
[318.38836670 120.24938965]
[333.05447388 124.24611664]
[345.07165527 133.55503845]
[352.60736084 146.75662231]
[354.51245117 161.83769226]
[350.49642944 176.49853516]
[341.17172241 188.50344849]
[327.96023560 196.02177429]
[312.87667847 197.90704346]
[298.22113037 193.87173462]
[286.22848511 184.53123474]
[278.72753906 171.30987549]
[276.86212158 156.22384644]
[262.39508057 152.26091003]
[247.92805481 148.29797363]
[233.46101379 144.33505249]
[219.14178467 148.43495178]
[207.87611389 137.32661438]
[193.40907288 133.36369324]
[178.94203186 129.40075684]
[164.47499084 125.43782043]
[150.00796509 121.47489166]
[141.22808838 135.52761841]
[128.62649536 146.28704834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[22 51]
[23 50]
[26 47]
[27 46]
[28 45]
[32 42]
[33 41]
[34 40]
[35 39]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[64 85]
[65 84]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
