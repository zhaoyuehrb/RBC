%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCGGAGGCGACGGUGGCGGCUCUCGGAGCCGGCGCGAAUCCGGCCCCCGCAGCGGGACCCGGGCAGGUCUUGACGAGCCCUGCCCGGGCCGACGCAUGCGGAGGAUGGAAACACUUGCCCGGCA\
) } def
/len { sequence length } bind def

/coor [
[84.43842316 280.07843018]
[76.83130646 265.55038452]
[85.83676147 251.84513855]
[86.20777893 236.84973145]
[76.06652832 228.80020142]
[72.39058685 216.18190002]
[76.74961853 203.57620239]
[87.75246429 195.69657898]
[88.49427032 180.71493530]
[89.23607635 165.73329163]
[89.97788239 150.75164795]
[90.71968842 135.76998901]
[81.32218933 131.88661194]
[73.33882904 125.58903503]
[67.37403870 117.35406494]
[52.97690201 121.56386566]
[38.57976532 125.77367401]
[27.50573540 137.07307434]
[13.11848164 133.21868896]
[-1.27865517 137.42849731]
[-15.67579269 141.63829041]
[-30.07292938 145.84809875]
[-44.47006607 150.05790710]
[-58.86720276 154.26770020]
[-72.37282562 164.51634216]
[-85.95967102 154.37564087]
[-79.97647858 138.51254272]
[-63.07700729 139.87057495]
[-48.67987061 135.66076660]
[-34.28273392 131.45095825]
[-19.88559532 127.24115753]
[-5.48845816 123.03135681]
[8.90867901 118.82155609]
[18.95293045 107.82326508]
[34.36996460 111.37653351]
[48.76710129 107.16673279]
[63.16423798 102.95692444]
[66.50499725 84.38904572]
[78.57571411 69.88992310]
[96.23033905 63.23851776]
[114.86746216 66.16842651]
[123.56373596 53.94652557]
[132.26000977 41.72462845]
[140.95628357 29.50272751]
[142.65264893 13.77272701]
[156.33560181 7.88834333]
[165.03187561 -4.33355618]
[166.72825623 -20.06355667]
[180.41120911 -25.94794083]
[189.10748291 -38.16983795]
[197.80375671 -50.39173889]
[206.50003052 -62.61363983]
[215.19630432 -74.83554077]
[223.74075317 -87.16406250]
[232.13206482 -99.59732056]
[240.52337646 -112.03057861]
[248.60458374 -124.66757965]
[256.37075806 -137.50061035]
[258.16906738 -146.56874084]
[264.49108887 -150.55163574]
[272.57229614 -163.18864441]
[280.65350342 -175.82565308]
[288.73471069 -188.46266174]
[296.81594849 -201.09967041]
[304.89715576 -213.73667908]
[312.97836304 -226.37368774]
[321.05957031 -239.01069641]
[329.14077759 -251.64770508]
[337.22201538 -264.28472900]
[338.13839722 -280.07934570]
[351.51361084 -286.63320923]
[359.59481812 -299.27023315]
[367.67602539 -311.90722656]
[371.11547852 -328.50863647]
[388.02023315 -329.79931641]
[393.94018555 -313.91250610]
[380.31304932 -303.82601929]
[372.23184204 -291.18899536]
[364.15060425 -278.55200195]
[363.81225586 -263.66125488]
[349.85900879 -256.20349121]
[341.77780151 -243.56649780]
[333.69659424 -230.92948914]
[325.61538696 -218.29248047]
[317.53414917 -205.65547180]
[309.45294189 -193.01846313]
[301.37173462 -180.38145447]
[293.29052734 -167.74444580]
[285.20928955 -155.10743713]
[277.12808228 -142.47042847]
[269.20379639 -129.73443604]
[261.43762207 -116.90141296]
[261.72097778 -112.03536987]
[258.87536621 -106.95929718]
[252.95663452 -103.63926697]
[244.56532288 -91.20600891]
[236.17401123 -78.77275085]
[235.02763367 -71.38918304]
[227.41819763 -66.13926697]
[218.72192383 -53.91736603]
[210.02565002 -41.69546509]
[201.32937622 -29.47356606]
[192.63310242 -17.25166702]
[191.55876160 -2.39585876]
[177.25378418 4.36271715]
[168.55751038 16.58461761]
[167.48315430 31.44042397]
[153.17817688 38.19900131]
[144.48190308 50.42089844]
[135.78562927 62.64279938]
[127.08936310 74.86470032]
[134.21643066 86.04105377]
[136.94108582 99.01342010]
[134.91273499 112.11272430]
[128.39236450 123.65355682]
[118.21890259 132.15101624]
[105.70133209 136.51179504]
[104.95952606 151.49345398]
[104.21772003 166.47509766]
[103.47591400 181.45674133]
[102.73410797 196.43838501]
[114.69899750 209.12922668]
[113.85430908 226.21380615]
[101.20318604 237.22074890]
[100.83216858 252.21615601]
[109.14882660 266.34997559]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[8 121]
[9 120]
[10 119]
[11 118]
[12 117]
[15 37]
[16 36]
[17 35]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[41 111]
[42 110]
[43 109]
[44 108]
[46 106]
[47 105]
[49 103]
[50 102]
[51 101]
[52 100]
[53 99]
[54 97]
[55 96]
[56 95]
[57 92]
[58 91]
[60 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
