%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:12:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCAGCCCGGGACUCCGGCGAGAGCGACGCAAGGUCGGCUGCGGCGGCGGCCCGAGGGCGCCCGUGUGCCCAGUGCGCGGCGGGGACGGCCGCGAGCUCGCUGGAGGGCUCCCCAGAAUAAUCCAGAAGUCGAUUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[203.11671448 373.44833374]
[211.97270203 361.28045654]
[223.03256226 351.07427979]
[215.20211792 338.28039551]
[201.95874023 331.46405029]
[201.35398865 315.65441895]
[193.52352905 302.86050415]
[185.69308472 290.06658936]
[177.86262512 277.27270508]
[170.03216553 264.47879028]
[163.63201904 278.04486084]
[149.08871460 281.71804810]
[137.01432800 272.81808472]
[136.21939087 257.83917236]
[147.28395081 247.71121216]
[162.13455200 249.82460022]
[155.75381470 236.24938965]
[149.37309265 222.67417908]
[142.99237061 209.09896851]
[136.61164856 195.52375793]
[130.23092651 181.94853210]
[123.85019684 168.37332153]
[117.46946716 154.79811096]
[111.08874512 141.22290039]
[94.67496490 143.68109131]
[78.05799103 139.65490723]
[63.77523041 129.37283325]
[54.14972305 114.04454041]
[39.25909042 115.85259247]
[24.36845589 117.66063690]
[13.38235283 129.35188293]
[-2.59562993 127.90840912]
[-11.30855179 114.43753052]
[-6.07260370 99.27294922]
[9.09564209 94.04763794]
[22.56040573 102.77000427]
[37.45103836 100.96195984]
[52.34167099 99.15390778]
[54.96442413 84.38497925]
[41.60681152 77.56044769]
[28.24920273 70.73590851]
[14.89159393 63.91137695]
[1.53398454 57.08684158]
[-11.82362461 50.26231003]
[-28.16458893 51.64250183]
[-37.30696487 38.02820969]
[-29.84586334 23.42464828]
[-13.45662308 22.85470963]
[-4.99909067 36.90469742]
[8.35851860 43.72923279]
[21.71612930 50.55376816]
[35.07373810 57.37830353]
[48.43134689 64.20283508]
[61.78895569 71.02737427]
[66.49287415 67.56127930]
[71.46234894 64.79253387]
[76.59963226 62.73317337]
[81.80814362 61.38206482]
[77.89934540 46.90031052]
[73.99053955 32.41855621]
[70.08173370 17.93679810]
[66.17292786 3.45504332]
[62.26412201 -11.02671242]
[50.27138519 -22.21180534]
[54.22472763 -38.12730408]
[70.05728912 -42.40070724]
[81.48188782 -30.63590622]
[76.74588013 -14.93551731]
[80.65468597 -0.45376155]
[84.56348419 14.02799416]
[88.47229004 28.50975037]
[92.38109589 42.99150467]
[96.28990173 57.47325897]
[101.33464813 57.33259964]
[106.36074829 57.78828049]
[111.29794312 58.83393478]
[116.07723236 60.45494843]
[120.63181305 62.62866592]
[130.07588196 50.97493362]
[139.51995850 39.32120132]
[148.96403503 27.66746902]
[158.40811157 16.01373672]
[167.85218811 4.36000443]
[164.69659424 -10.95587826]
[172.16957092 -24.69227028]
[186.74263000 -30.36326790]
[201.53479004 -25.29119873]
[209.56166077 -11.87093925]
[207.03320312 3.56087470]
[195.14326477 13.71781254]
[179.50592041 13.80407810]
[170.06184387 25.45780945]
[160.61776733 37.11154175]
[151.17369080 48.76527405]
[141.72961426 60.41900635]
[132.28555298 72.07273865]
[142.16217041 93.31867218]
[139.33805847 116.57724762]
[124.66395569 134.84217834]
[131.04467773 148.41738892]
[137.42539978 161.99259949]
[143.80613708 175.56781006]
[150.18685913 189.14302063]
[156.56758118 202.71823120]
[162.94830322 216.29344177]
[169.32902527 229.86865234]
[175.70976257 243.44386292]
[182.82608032 256.64834595]
[190.65652466 269.44223022]
[198.48698425 282.23614502]
[206.31742859 295.03005981]
[214.14788818 307.82394409]
[227.95135498 315.55538940]
[227.99601746 330.44992065]
[235.82646179 343.24383545]
[249.94702148 338.03842163]
[264.81182861 335.68814087]
[279.84951782 336.28326416]
[294.48208618 339.80099487]
[308.14706421 346.10604858]
[320.31927490 354.95611572]
[330.53079224 366.01101685]
[338.38916016 378.84585571]
[343.59228516 392.96725464]
[345.94015503 407.83242798]
[345.34259033 422.87002563]
[341.82250977 437.50201416]
[335.51522827 451.16598511]
[326.66317749 463.33676147]
[315.60662842 473.54650879]
[302.77053833 481.40277100]
[288.64831543 486.60360718]
[273.78274536 488.94909668]
[258.74523926 488.34909058]
[244.11381531 484.82662964]
[230.45086670 478.51715088]
[218.28152466 469.66311646]
[208.07357788 458.60491943]
[200.21939087 445.76754761]
[195.02084351 431.64447021]
[192.67774963 416.77853394]
[193.28019714 401.74114990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 115]
[4 114]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[16 107]
[17 106]
[18 105]
[19 104]
[20 103]
[21 102]
[22 101]
[23 100]
[24 99]
[28 38]
[29 37]
[30 36]
[39 54]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[78 96]
[79 95]
[80 94]
[81 93]
[82 92]
[83 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
