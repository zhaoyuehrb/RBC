%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGCCCCCGUCCCCAAGCCUCCGCCCCUUAGCCCCCGCCCCCAGCUGCCAGUCCCCAGCAGCUCAGUCCUGCAGUGAGAGUCUUGGGAGUCCAUAGCUAAGCACCAGGAGCUGAGCACUGCCCGCUGUGCCUGCCUGCAAGUCUGAC\
) } def
/len { sequence length } bind def

/coor [
[112.89449310 332.27096558]
[114.75162506 347.15554810]
[114.14279938 362.14318848]
[111.08449554 376.82812500]
[105.65952301 390.81274414]
[98.01473999 403.71844482]
[88.35713196 415.19583130]
[76.94815063 424.93417358]
[64.09669495 432.66983032]
[50.15069580 438.19332886]
[35.48772049 441.35513306]
[20.50474930 442.06970215]
[5.60742760 440.31759644]
[-8.80092049 436.14633179]
[-22.33020782 429.66879272]
[-34.61414719 421.06039429]
[-45.32016754 410.55413818]
[-54.15841675 398.43450928]
[-60.88961029 385.02963257]
[-65.33151245 370.70239258]
[-67.36386871 355.84072876]
[-66.93164062 340.84695435]
[-64.04654694 326.12701416]
[-58.78668976 312.07946777]
[-51.29447556 299.08459473]
[-41.76751709 287.48883057]
[-56.09011459 291.94564819]
[-63.21752930 306.05151367]
[-78.25760651 310.90658569]
[-92.28733063 303.63043213]
[-96.98311615 288.53988647]
[-89.55903625 274.58786011]
[-74.41967010 270.05187988]
[-60.54693222 277.62307739]
[-46.22433472 273.16625977]
[-58.50849152 264.55813599]
[-58.60548401 249.55845642]
[-46.43366623 240.79222107]
[-32.23789978 245.63784790]
[-27.96657753 260.01693726]
[-19.20037079 247.84509277]
[-24.02974892 233.78042603]
[-19.59881973 219.39880371]
[-7.40654945 210.27729797]
[7.99695492 210.08174133]
[16.76316261 197.90991211]
[25.52936935 185.73806763]
[25.64563751 180.90464783]
[28.84318924 176.10809326]
[34.92209625 173.25248718]
[44.18704605 161.45585632]
[53.32878113 149.56347656]
[62.34630966 137.57664490]
[71.36383820 125.58980560]
[80.38137054 113.60297394]
[76.13122559 99.53807831]
[80.92236328 85.64815521]
[92.93993378 77.19458008]
[107.63179779 77.37949371]
[116.64933014 65.39266205]
[125.66685486 53.40582657]
[124.64282990 40.50601196]
[132.45375061 30.69741631]
[144.46076965 28.92577553]
[153.72572327 17.12913704]
[162.99066162 5.33249617]
[172.25561523 -6.46414375]
[181.52056885 -18.26078415]
[190.78550720 -30.05742455]
[199.92724609 -41.94980240]
[208.94477844 -53.93663788]
[217.96231079 -65.92346954]
[226.97984314 -77.91030121]
[235.99736023 -89.89713287]
[233.98417664 -105.34332275]
[243.29998779 -117.37121582]
[258.03796387 -119.19530487]
[267.05551147 -131.18212891]
[263.64498901 -144.25218201]
[268.33602905 -156.71099854]
[279.19705200 -164.06710815]
[292.11718750 -163.80799866]
[301.38211060 -175.60464478]
[310.64706421 -187.40127563]
[308.95565796 -202.88601685]
[318.51968384 -214.71749878]
[333.29241943 -216.23457336]
[342.55737305 -228.03121948]
[351.82232666 -239.82786560]
[353.60903931 -256.12939453]
[368.72683716 -262.48422241]
[381.62384033 -252.35508728]
[379.03268433 -236.16192627]
[363.61895752 -230.56291199]
[354.35400391 -218.76626587]
[345.08905029 -206.96963501]
[347.11611938 -192.25817871]
[337.88818359 -180.16273499]
[322.44372559 -178.13633728]
[313.17877197 -166.33969116]
[303.91381836 -154.54304504]
[306.64685059 -137.97837830]
[296.37695312 -124.27388000]
[279.04232788 -122.16460419]
[270.02481079 -110.17777252]
[272.35745239 -95.51168060]
[263.38317871 -83.22686768]
[247.98420715 -80.87960052]
[238.96667480 -68.89276886]
[229.94914246 -56.90593719]
[220.93161011 -44.91910553]
[211.91407776 -32.93227386]
[210.39648438 -25.64924431]
[202.58215332 -20.79247475]
[193.31719971 -8.99583435]
[184.05226135 2.80080557]
[174.78730774 14.59744549]
[165.52235413 26.39408493]
[156.25740051 38.19072723]
[154.74331665 55.64659882]
[137.65368652 62.42335892]
[128.63615417 74.41019440]
[119.61862946 86.39702606]
[123.86877441 100.46192169]
[119.07763672 114.35184479]
[107.06006622 122.80541992]
[92.36820221 122.62050629]
[83.35066986 134.60734558]
[74.33314514 146.59417725]
[65.31561279 158.58100891]
[62.63156509 167.38143921]
[55.98368454 170.72080994]
[46.71873474 182.51744080]
[37.70120621 194.50427246]
[28.93499947 206.67611694]
[20.16879082 218.84794617]
[24.86500931 233.51940918]
[20.07768250 247.97398376]
[7.84166574 256.73434448]
[-7.02853441 256.61129761]
[-15.79474163 268.78314209]
[-1.78463984 263.42431641]
[12.91456604 260.43545532]
[27.90491486 259.89746094]
[42.78056335 261.82492065]
[57.13877487 266.16561890]
[70.59081268 272.80209351]
[82.77249146 281.55462646]
[93.35400391 292.18624878]
[102.04886627 304.40914917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[26 35]
[27 34]
[40 141]
[41 140]
[45 136]
[46 135]
[47 134]
[50 133]
[51 132]
[52 130]
[53 129]
[54 128]
[55 127]
[59 123]
[60 122]
[61 121]
[64 119]
[65 118]
[66 117]
[67 116]
[68 115]
[69 114]
[70 112]
[71 111]
[72 110]
[73 109]
[74 108]
[77 105]
[78 104]
[82 101]
[83 100]
[84 99]
[87 96]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
