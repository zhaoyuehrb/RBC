%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:38:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCGUCGUGGAAGCAGGAUUUCCGCGGUUGUGUAACGGCCUGUCGCAGGCGUGCAGGGACCUGGACUCCGCCUCGUCCCCGGGGCUCGGGCAGCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[119.23065948 157.24734497]
[117.07744598 154.07662964]
[116.06214905 149.91546631]
[116.57812500 145.20246887]
[109.95234680 131.74516296]
[103.32656097 118.28785706]
[89.08925629 113.56566620]
[75.73455811 120.39589691]
[62.37986374 127.22613525]
[49.02516556 134.05636597]
[35.67046738 140.88659668]
[22.31577110 147.71682739]
[8.96107483 154.54705811]
[-4.39362240 161.37728882]
[-17.74831963 168.20751953]
[-24.03093529 182.96923828]
[-39.52717972 187.12207031]
[-52.34966278 177.48030090]
[-52.66206741 161.44029236]
[-40.22475052 151.30654907]
[-24.57855034 154.85282898]
[-11.22385406 148.02259827]
[2.13084292 141.19236755]
[15.48553944 134.36213684]
[28.84023666 127.53189850]
[42.19493484 120.70166779]
[55.54962921 113.87143707]
[68.90432739 107.04120636]
[82.25902557 100.21096802]
[82.02120972 96.25608826]
[82.68289185 92.21457672]
[84.26825714 88.29431152]
[86.75294495 84.70893860]
[80.95989990 70.87273407]
[75.16685486 57.03652954]
[69.37380981 43.20032120]
[63.06750870 36.35220337]
[63.62220764 28.85273361]
[58.25380707 14.84629726]
[52.15927887 7.80904770]
[52.94242477 0.32998177]
[48.00366592 -13.83365631]
[43.06490707 -27.99729538]
[38.12614441 -42.16093445]
[27.20188904 -55.12615585]
[36.63629150 -69.21261597]
[52.78395081 -64.04644012]
[52.28978348 -47.09969330]
[57.22854233 -32.93605423]
[62.16730499 -18.77241707]
[67.10606384 -4.60877848]
[72.26024628 9.47789764]
[77.62864685 23.48433495]
[83.21001434 37.40727615]
[89.00305939 51.24348450]
[94.79610443 65.07968903]
[100.58914948 78.91589355]
[114.67582703 84.07007599]
[128.03051758 77.23984528]
[141.38522339 70.40961456]
[154.73991394 63.57938004]
[168.09461975 56.74914932]
[173.04576111 41.98012924]
[186.68661499 35.24354553]
[200.73611450 40.05472183]
[214.09080505 33.22449112]
[218.71258545 18.11109352]
[232.70646667 10.76626682]
[247.77015686 15.54756737]
[254.96662903 29.61833382]
[250.02633667 44.63063049]
[235.88026428 51.67792511]
[220.92103577 46.57918930]
[207.56634521 53.40942001]
[203.24389648 67.61688232]
[189.79763794 74.73395538]
[174.92485046 70.10384369]
[161.57014465 76.93407440]
[148.21545410 83.76431274]
[134.86076355 90.59454346]
[121.50605774 97.42477417]
[116.78386688 111.66207886]
[123.40964508 125.11938477]
[130.03543091 138.57669067]
[137.46929932 151.60502625]
[145.68359375 164.15592957]
[153.89788818 176.70684814]
[162.11219788 189.25775146]
[170.32649231 201.80865479]
[178.54078674 214.35957336]
[186.75509644 226.91047668]
[201.62919617 233.81648254]
[202.81576538 250.17265320]
[189.09414673 259.15313721]
[174.57997131 251.51960754]
[174.20417786 235.12477112]
[165.98988342 222.57386780]
[157.77558899 210.02296448]
[149.56127930 197.47204590]
[141.34698486 184.92114258]
[133.13269043 172.37023926]
[124.91838837 159.81932068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 29]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[15 21]
[33 57]
[34 56]
[35 55]
[36 54]
[38 53]
[39 52]
[41 51]
[42 50]
[43 49]
[44 48]
[58 81]
[59 80]
[60 79]
[61 78]
[62 77]
[65 74]
[66 73]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
