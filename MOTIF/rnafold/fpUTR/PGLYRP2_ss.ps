%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUUCGCCGCUGGACUUUGACAGUGGUCAAAGGCUCUGCUCAGUUCUCUGUGCCUGUCUCCCUCCAGCACUGCCGAGGUUCUCUGCCGAGGCCAACCAGAAAUACCCCUUGGAAGCUGGAAUCCUGCAACA\
) } def
/len { sequence length } bind def

/coor [
[83.74689484 123.61658478]
[72.30661774 133.31813049]
[60.86633682 143.01968384]
[55.34540558 157.84634399]
[40.63425064 160.17683411]
[29.19397163 169.87838745]
[23.67303848 184.70504761]
[8.96188354 187.03553772]
[-2.47839427 196.73709106]
[-13.91867161 206.43862915]
[-25.35894966 216.14018250]
[-36.79922867 225.84173584]
[-48.23950577 235.54327393]
[-59.67978287 245.24482727]
[-58.38249207 260.70758057]
[-66.45051575 273.96224976]
[-80.78153229 279.91217041]
[-95.86498260 276.26947021]
[-105.90095520 264.43481445]
[-107.03042603 248.95890808]
[-98.81909180 235.79252625]
[-84.42436981 229.99842834]
[-69.38133240 233.80455017]
[-57.94105530 224.10299683]
[-46.50077438 214.40145874]
[-35.06049728 204.69990540]
[-23.62022018 194.99835205]
[-12.17994308 185.29681396]
[-0.73966533 175.59526062]
[3.96298337 161.46252441]
[19.49242401 158.43811035]
[30.93270111 148.73655701]
[35.63534927 134.60382080]
[51.16479111 131.57940674]
[62.60506821 121.87786102]
[74.04534149 112.17630768]
[72.09291840 106.56516266]
[71.33896637 100.67207336]
[71.81586456 94.75012207]
[73.50314331 89.05362701]
[61.62070465 79.89897156]
[45.96657181 77.60578918]
[40.60665894 63.70900345]
[28.72422028 54.55434799]
[16.84178352 45.39969635]
[0.52432251 43.76491547]
[-5.97108126 28.70696831]
[4.03748655 15.71617889]
[20.25407028 18.15635681]
[25.99643707 33.51725769]
[37.87887573 42.67191315]
[49.76131058 51.82656479]
[64.56552887 53.46495056]
[70.77536011 68.01654053]
[82.65779114 77.17118835]
[104.68385315 71.71629333]
[123.77559662 83.98040009]
[137.97483826 79.14493561]
[152.17407227 74.30947113]
[154.08615112 59.20631409]
[162.33247375 46.48291016]
[175.23251343 38.63373947]
[190.19973755 37.16987991]
[204.26029968 42.32837296]
[214.64379883 53.03577423]
[228.84303284 48.20030975]
[243.04226685 43.36484528]
[257.24151611 38.52938080]
[271.44073486 33.69391251]
[285.63998413 28.85844994]
[286.36413574 12.74800014]
[296.21267700 -1.76490498]
[313.47875977 -9.58383751]
[333.69677734 -7.09299898]
[344.42700195 -17.57454109]
[355.15719604 -28.05608177]
[355.50845337 -43.62895584]
[366.53973389 -54.10587311]
[381.38391113 -53.67502213]
[392.11413574 -64.15656281]
[402.84432983 -74.63810730]
[404.46939087 -90.59864044]
[418.03848267 -99.15781403]
[433.14254761 -93.74976349]
[438.19503784 -78.52307892]
[429.32012939 -65.15837097]
[413.32586670 -63.90790176]
[402.59567261 -53.42636108]
[391.86544800 -42.94482040]
[391.94821167 -28.09460831]
[381.21557617 -17.31197929]
[365.63873291 -17.32587814]
[354.90853882 -6.84433603]
[344.17831421 3.63720560]
[346.09115601 10.88917923]
[360.56475830 14.82802010]
[349.91677856 25.39312553]
[351.82962036 32.64509964]
[366.33355713 36.47074127]
[380.83749390 40.29638290]
[395.34146118 44.12202454]
[406.64660645 33.62453461]
[421.83645630 30.92800522]
[436.06402588 36.89288712]
[444.78933716 49.61580658]
[445.22814941 65.03692627]
[437.24047852 78.23542786]
[423.37512207 84.99971008]
[408.05648804 83.17131805]
[396.17269897 73.33368683]
[391.51580811 58.62596893]
[377.01187134 54.80032730]
[362.50790405 50.97468567]
[348.00396729 47.14904404]
[326.91473389 60.47630692]
[304.46862793 57.74019241]
[290.47543335 43.05768585]
[276.27621460 47.89315033]
[262.07696533 52.72861481]
[247.87773132 57.56407928]
[233.67849731 62.39954376]
[219.47926331 67.23500824]
[217.78868103 82.05416870]
[209.79872131 94.72183228]
[197.04882812 102.69687653]
[182.03947449 104.35208130]
[167.74182129 99.30589294]
[157.00953674 88.50870514]
[142.81030273 93.34416962]
[128.61106873 98.17963409]
[126.58232880 110.73715210]
[119.32038879 121.18087006]
[108.25489044 127.45475006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 36]
[2 35]
[3 34]
[5 32]
[6 31]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[40 55]
[41 54]
[43 52]
[44 51]
[45 50]
[57 130]
[58 129]
[59 128]
[65 122]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[74 94]
[75 93]
[76 92]
[79 89]
[80 88]
[81 87]
[98 114]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
