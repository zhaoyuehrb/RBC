%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:56:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCUCCAGGCCUGGCAUCCCGGUAGCCGCAGCUGUCUUUUCCGGCCCCCGUGCACUCUCCGCCCGAGCGGAGCCCCCCGGCUCGCGGGGAUCGCCCCCGAGCGCUGCGUCCUGCGGGUCACCUAACCCAUUUGUGGCUUCCUCUACCUGUGCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[55.08374023 380.53793335]
[51.01213455 394.97476196]
[46.94052887 409.41159058]
[42.86891937 423.84841919]
[38.79731369 438.28524780]
[40.31726456 455.17092896]
[24.51225090 461.30590820]
[14.24177361 447.81686401]
[24.36048508 434.21365356]
[28.43209267 419.77682495]
[32.50370026 405.33999634]
[36.57530594 390.90316772]
[40.64691162 376.46633911]
[43.86154938 361.81484985]
[46.20806885 346.99951172]
[48.55458450 332.18417358]
[50.90110016 317.36886597]
[53.24761963 302.55352783]
[46.48722458 294.80706787]
[45.10542679 284.39657593]
[49.80365753 274.75869751]
[59.23525620 269.21090698]
[62.16160965 254.49913025]
[65.08796692 239.78735352]
[67.14315033 224.92881775]
[68.32003784 209.97505188]
[69.49692535 195.02130127]
[70.67381287 180.06753540]
[71.85069275 165.11376953]
[73.02758026 150.16001892]
[74.20446777 135.20625305]
[63.80815887 124.39345551]
[48.81972122 124.98235321]
[33.83128738 125.57124329]
[18.84285164 126.16014099]
[9.41295433 138.63456726]
[-5.84063530 142.07868958]
[-19.71563911 134.86631775]
[-25.66070366 120.40290833]
[-20.86875153 105.51763916]
[-7.60239601 97.23888397]
[7.87439489 99.47560883]
[18.25395393 111.17170715]
[33.24238968 110.58280945]
[48.23082733 109.99391174]
[63.21926117 109.40501404]
[59.36110687 92.98859406]
[63.06163788 75.15864563]
[74.71321106 59.44852066]
[93.05717468 49.40945816]
[84.72361755 36.93741226]
[70.78723145 39.44685745]
[56.99085999 36.45456696]
[45.41771698 28.44626236]
[37.80234146 16.66248322]
[35.27068329 2.90651464]
[38.17372894 -10.73154354]
[46.03925323 -22.19234467]
[37.95217896 -34.82560349]
[29.86510277 -47.45886230]
[21.77802658 -60.09212112]
[13.69095230 -72.72537994]
[5.60387754 -85.35863495]
[-9.19969749 -92.41457367]
[-10.22095299 -108.78189087]
[3.59069109 -117.62329865]
[18.02700043 -109.84351349]
[18.23713684 -93.44570923]
[26.32421112 -80.81245422]
[34.41128540 -68.17919922]
[42.49835968 -55.54593658]
[50.58543396 -42.91267776]
[58.67251205 -30.27942085]
[74.47175598 -32.50926590]
[89.72101593 -27.61993217]
[101.36221313 -16.53881073]
[107.03778839 -1.44023252]
[105.56797028 14.68105412]
[97.19566345 28.60385895]
[105.52921295 41.07590485]
[120.50319672 40.19284058]
[127.31305695 26.82774353]
[134.12290955 13.46264553]
[140.93276978 0.09754814]
[147.74263000 -13.26754951]
[148.86216736 -22.38661957]
[154.81964111 -26.82624245]
[161.89059448 -40.05506134]
[168.96154785 -53.28388214]
[176.03250122 -66.51270294]
[174.95542908 -82.87644196]
[188.73684692 -91.76490021]
[203.19960022 -84.03439331]
[203.46565247 -67.63740540]
[189.26132202 -59.44174957]
[182.19036865 -46.21292877]
[175.11941528 -32.98411179]
[168.04846191 -19.75529099]
[161.10772705 -6.45769215]
[154.29786682 6.90740585]
[147.48800659 20.27250290]
[140.67816162 33.63759995]
[133.86830139 47.00270081]
[144.15795898 57.91704559]
[157.90077209 51.90581512]
[161.09455872 36.72097397]
[172.62637329 26.33843994]
[188.06198120 24.75050545]
[201.46609497 32.56776428]
[207.68453979 46.78432465]
[204.32621765 61.93362045]
[192.68244934 72.19044495]
[177.23051453 73.61083984]
[163.91200256 65.64863586]
[150.16918945 71.65986633]
[152.51570129 86.47518921]
[167.44348145 87.94544983]
[182.37124634 89.41570282]
[197.29901123 90.88596344]
[209.35536194 80.66734314]
[225.09904480 82.05006409]
[235.18962097 94.21376801]
[233.64053345 109.94195557]
[221.37081909 119.90336609]
[205.65989685 118.18807983]
[195.82876587 105.81373596]
[180.90098572 104.34347534]
[165.97322083 102.87321472]
[151.04544067 101.40296173]
[142.26242065 122.30991364]
[126.11215973 136.05122375]
[106.92092896 140.65440369]
[89.15822601 136.38314819]
[87.98134613 151.33689880]
[86.80445862 166.29066467]
[85.62757111 181.24441528]
[84.45068359 196.19818115]
[83.27379608 211.15194702]
[82.09690857 226.10569763]
[94.37770844 217.49279785]
[109.18207550 219.90745544]
[118.08959961 231.97625732]
[116.03385925 246.83471680]
[104.18412018 256.03164673]
[89.28026581 254.33602905]
[79.79974365 242.71371460]
[76.87339020 257.42547607]
[73.94703674 272.13726807]
[81.31772614 290.86328125]
[68.06294250 304.90005493]
[65.71642303 319.71539307]
[63.36990738 334.53070068]
[61.02339172 349.34603882]
[58.67687607 364.16134644]
[71.59557343 356.53854370]
[86.16485596 360.10729980]
[94.09801483 372.83776855]
[90.88282776 387.48913574]
[78.34803009 395.72799683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[14 154]
[15 153]
[16 152]
[17 151]
[18 150]
[22 148]
[23 147]
[24 146]
[25 139]
[26 138]
[27 137]
[28 136]
[29 135]
[30 134]
[31 133]
[32 46]
[33 45]
[34 44]
[35 43]
[50 80]
[51 79]
[58 73]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
[81 103]
[82 102]
[83 101]
[84 100]
[85 99]
[87 98]
[88 97]
[89 96]
[90 95]
[104 115]
[105 114]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
