%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUGACGUCAAACGCCGUGUGCUCACCCACGUGUGGUGCCCCUCUCCCGGUGUAGGCGCUGGAGCUGAGGACGCCUUUCCUGCGGGCGUAGUUGCUGGCUGCUCGGGCACUGGGACCUCGGCGGCUUGGGGACGCUGGCCGCGAAGUAGGGAGCGCAGGUGGCCGCUCGGGGUGAGGGCCCUGGGUC\
) } def
/len { sequence length } bind def

/coor [
[189.41452026 516.33630371]
[182.90789795 513.10729980]
[177.14202881 508.67346191]
[172.33747864 503.19970703]
[168.67897034 496.89077759]
[166.30824280 489.98364258]
[165.31860352 482.73852539]
[165.75128174 475.42919922]
[167.59361267 468.33261108]
[170.77951050 461.71835327]
[175.19177246 455.83847046]
[180.66635132 450.91778564]
[186.99851990 447.14538574]
[183.52120972 432.55401611]
[180.04391479 417.96261597]
[176.56661987 403.37124634]
[171.94844055 397.58193970]
[173.15527344 388.50701904]
[169.92228699 373.85955811]
[166.68928528 359.21212769]
[163.45628357 344.56466675]
[160.22328186 329.91723633]
[156.99029541 315.26977539]
[153.75729370 300.62234497]
[149.23649597 294.75665283]
[150.59481812 285.70318604]
[147.60702515 271.00375366]
[137.48966980 260.07266235]
[142.32313538 245.00787354]
[139.33534241 230.30844116]
[127.01726532 217.82106018]
[132.98184204 200.40936279]
[129.74885559 185.76191711]
[126.51585388 171.11447144]
[123.28285217 156.46702576]
[120.04985809 141.81958008]
[116.81685638 127.17212677]
[105.78957367 130.81204224]
[94.41264343 130.23545837]
[84.21353149 125.67912292]
[76.50418091 117.90348053]
[72.21254730 108.07051086]
[71.77240753 97.57191467]
[75.08422852 87.83268738]
[81.54983521 80.11769867]
[74.78468323 66.72991180]
[68.01953125 53.34212875]
[61.25437927 39.95434570]
[54.48922729 26.56656456]
[47.72407532 13.17878246]
[40.95892334 -0.20900008]
[34.19377136 -13.59678268]
[27.42861938 -26.98456573]
[10.07926083 -37.22360992]
[11.94298458 -56.45817184]
[4.73425865 -69.61241913]
[-2.47446775 -82.76667023]
[-9.79284859 -95.86022949]
[-17.22037315 -108.89218140]
[-24.64789963 -121.92414093]
[-32.07542419 -134.95610046]
[-39.50294876 -147.98805237]
[-47.03910065 -160.95748901]
[-54.68334961 -173.86351013]
[-62.32759857 -186.76954651]
[-69.97184753 -199.67556763]
[-73.87138367 -201.68601990]
[-76.63906097 -204.55105591]
[-78.14479828 -207.80590820]
[-78.42425537 -210.99157715]
[-77.66233063 -213.70890808]
[-84.42748260 -227.09669495]
[-91.19263458 -240.48448181]
[-97.95778656 -253.87225342]
[-104.72293854 -267.26004028]
[-111.48809052 -280.64782715]
[-126.75331116 -284.04000854]
[-136.22561646 -296.48226929]
[-135.43244934 -312.09973145]
[-124.74833679 -323.51831055]
[-109.21798706 -325.34649658]
[-96.17435455 -316.72109985]
[-91.77624512 -301.71472168]
[-98.10031128 -287.41296387]
[-91.33515930 -274.02520752]
[-84.57000732 -260.63742065]
[-77.80485535 -247.24963379]
[-71.03970337 -233.86184692]
[-64.27455139 -220.47406006]
[-57.06582642 -207.31980896]
[-49.42157364 -194.41378784]
[-41.77732468 -181.50776672]
[-34.13307571 -168.60174561]
[-28.00701141 -164.44059753]
[-26.47099304 -155.41557312]
[-19.04346848 -142.38362122]
[-11.61594296 -129.35166931]
[-4.18841791 -116.31970978]
[3.23910689 -103.28775024]
[9.29478455 -99.02482605]
[10.67978096 -89.97539520]
[17.88850784 -76.82114410]
[25.09723282 -63.66689682]
[35.14699173 -61.68886566]
[42.59780884 -54.34400940]
[44.81097031 -43.89357758]
[40.81640244 -33.74971771]
[47.58155441 -20.36193466]
[54.34670639 -6.97415209]
[61.11185837 6.41363049]
[67.87700653 19.80141258]
[74.64215851 33.18919754]
[81.40731049 46.57697678]
[88.17246246 59.96475983]
[94.93761444 73.35254669]
[106.39050293 72.39829254]
[117.70654297 76.35541534]
[126.79295349 84.91561890]
[131.80334473 96.88893127]
[145.40971375 90.57490540]
[159.01606750 84.26088715]
[172.62243652 77.94686890]
[186.22880554 71.63284302]
[188.22959900 56.33577347]
[198.20043945 44.56352615]
[212.95967102 40.07258606]
[227.79768372 44.29598999]
[237.97970581 55.88607025]
[240.25669861 71.14447784]
[233.90208435 85.20230103]
[220.94358826 93.57374573]
[205.51623535 93.58750916]
[192.54281616 85.23920441]
[178.93646240 91.55323029]
[165.33009338 97.86724854]
[151.72372437 104.18127441]
[138.11737061 110.49529266]
[131.46430969 123.93913269]
[134.69731140 138.58657837]
[137.93029785 153.23402405]
[141.16329956 167.88146973]
[144.39630127 182.52893066]
[147.62928772 197.17637634]
[158.07015991 204.77157593]
[160.45312500 217.05259705]
[154.03475952 227.32066345]
[157.02255249 242.02008057]
[167.35360718 254.00256348]
[162.30644226 268.01596069]
[165.29423523 282.71539307]
[168.40473938 297.38934326]
[171.63774109 312.03677368]
[174.87074280 326.68423462]
[178.10372925 341.33166504]
[181.33673096 355.97912598]
[184.56973267 370.62658691]
[187.80271912 385.27401733]
[191.15798950 399.89395142]
[194.63529968 414.48532104]
[198.11259460 429.07672119]
[201.58990479 443.66809082]
[224.33332825 450.50765991]
[238.44223022 469.46572876]
[238.46353149 492.98001099]
[224.52912903 511.77456665]
[230.61491394 525.48455811]
[236.70068359 539.19451904]
[242.78646851 552.90447998]
[248.87225342 566.61444092]
[254.95802307 580.32440186]
[261.04382324 594.03442383]
[267.12957764 607.74438477]
[273.21536255 621.45434570]
[286.78311157 630.66564941]
[285.32006836 646.99938965]
[270.33129883 653.65283203]
[257.23593140 643.78149414]
[259.50540161 627.54010010]
[253.41961670 613.83013916]
[247.33383179 600.12017822]
[241.24806213 586.41021729]
[235.16227722 572.70025635]
[229.07649231 558.99023438]
[222.99072266 545.28027344]
[216.90493774 531.57031250]
[210.81915283 517.86035156]
[203.64004517 518.75494385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 161]
[14 160]
[15 159]
[16 158]
[18 157]
[19 156]
[20 155]
[21 154]
[22 153]
[23 152]
[24 151]
[26 150]
[27 149]
[29 147]
[30 146]
[32 143]
[33 142]
[34 141]
[35 140]
[36 139]
[37 138]
[45 115]
[46 114]
[47 113]
[48 112]
[49 111]
[50 110]
[51 109]
[52 108]
[53 107]
[55 103]
[56 102]
[57 101]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 93]
[64 92]
[65 91]
[66 90]
[71 89]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[119 137]
[120 136]
[121 135]
[122 134]
[123 133]
[165 186]
[166 185]
[167 184]
[168 183]
[169 182]
[170 181]
[171 180]
[172 179]
[173 178]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
