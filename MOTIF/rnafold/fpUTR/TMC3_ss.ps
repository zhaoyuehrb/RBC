%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUCGGAACAGACCUUUGCCUGCCAACUUCCUAGCUCUCUGGCCAGCUUCUGAUUGUUAGCAGUGGGUUAGCUCCC\
) } def
/len { sequence length } bind def

/coor [
[53.14953232 363.37872314]
[40.62408447 372.38519287]
[25.21656227 373.16732788]
[11.84344578 365.47558594]
[4.77204943 351.76431274]
[6.25883007 336.40875244]
[15.82936096 324.30880737]
[30.42972183 319.32553101]
[33.93140030 304.73999023]
[37.43308258 290.15444946]
[27.63546371 278.96762085]
[26.28785896 263.97937012]
[34.11581039 250.91886902]
[48.29711151 244.90249634]
[51.79879379 230.31694031]
[55.30047226 215.73139954]
[58.80215454 201.14584351]
[62.30383682 186.56030273]
[56.21450043 179.47425842]
[54.19533157 170.20843506]
[56.86183929 160.96170044]
[63.70112228 153.99349976]
[73.16445923 151.07194519]
[78.35621643 136.99908447]
[83.54797363 122.92620850]
[88.73972321 108.85334015]
[86.56140137 95.04223633]
[97.18740082 85.95490265]
[102.37915802 71.88203430]
[107.57091522 57.80916595]
[103.94519806 39.88277435]
[117.58881378 29.02950859]
[122.22406769 14.76366138]
[113.99340057 -0.52646071]
[119.13930511 -16.76091385]
[134.07739258 -24.21883392]
[138.14900208 -38.65566254]
[142.22061157 -53.09249115]
[146.29222107 -67.52931976]
[136.58029175 -79.63130951]
[135.87019348 -95.13213348]
[144.43495178 -108.07139587]
[158.98124695 -113.47369385]
[173.91574097 -109.26172638]
[183.49580383 -97.05509186]
[184.03771973 -81.54748535]
[175.33309937 -68.70188904]
[160.72904968 -63.45771408]
[156.65744019 -49.02088547]
[152.58583069 -34.58405685]
[148.51422119 -20.14722633]
[156.38481140 -9.75142288]
[156.75267029 3.47881174]
[149.25289917 14.62154102]
[136.48991394 19.39891624]
[131.85466003 33.66476440]
[137.09387207 44.75203705]
[133.14451599 56.78787994]
[121.64378357 63.00091934]
[116.45202637 77.07379150]
[111.26027679 91.14665985]
[113.43859863 104.95776367]
[102.81259918 114.04509735]
[97.62084198 128.11796570]
[92.42908478 142.19084167]
[87.23732758 156.26370239]
[92.52765656 176.83583069]
[76.88938141 190.06198120]
[73.38770294 204.64753723]
[69.88602448 219.23307800]
[66.38434601 233.81863403]
[62.88266373 248.40417480]
[72.78691864 260.20297241]
[73.83232880 275.39379883]
[65.82707977 288.13662720]
[52.01863098 293.65612793]
[48.51695251 308.24166870]
[45.01527023 322.82720947]
[55.76192856 333.89578247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 78]
[9 77]
[10 76]
[14 72]
[15 71]
[16 70]
[17 69]
[18 68]
[23 66]
[24 65]
[25 64]
[26 63]
[28 61]
[29 60]
[30 59]
[32 56]
[33 55]
[36 51]
[37 50]
[38 49]
[39 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
