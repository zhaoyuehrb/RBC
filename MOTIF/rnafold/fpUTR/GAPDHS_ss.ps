%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:06:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACUGGGUGCUGUGACAUCAGGGCAAUUAGCCCAGGACCCACAGCCCUGGCGCUCCGCACGCACCUCGGUAACAUCACAGCAGGUCCAGGCCAAUGAUAACCUUAUAAGAGGCC\
) } def
/len { sequence length } bind def

/coor [
[185.59359741 302.04882812]
[176.58200073 290.05755615]
[178.44332886 275.17346191]
[190.13040161 265.77069092]
[205.06922913 267.14007568]
[197.05224609 254.46220398]
[189.03524780 241.78436279]
[181.01826477 229.10650635]
[173.00128174 216.42864990]
[164.64680481 203.97061157]
[155.96087646 191.74136353]
[147.27493286 179.51211548]
[138.58900452 167.28286743]
[129.90307617 155.05361938]
[121.21713257 142.82437134]
[112.53120422 130.59512329]
[103.84526825 118.36586761]
[85.15187073 111.47275543]
[83.19869995 91.64491272]
[73.55688477 80.15425110]
[63.91506958 68.66358185]
[54.11985779 57.30339432]
[44.17301941 46.07573318]
[34.22618103 34.84807205]
[24.12950325 23.75496101]
[13.88480854 12.79840088]
[-3.01456976 17.19254684]
[-19.74850082 12.52316570]
[-31.80826378 0.14030120]
[-35.99081039 -16.54024696]
[-31.24916267 -32.97885513]
[-42.06719971 -43.36972046]
[-52.88523483 -53.76058578]
[-63.84179688 -64.00527954]
[-74.93490601 -74.10195923]
[-86.02802277 -84.19863129]
[-97.12113190 -94.29531097]
[-108.21424103 -104.39199066]
[-123.09147644 -100.30893707]
[-137.80763245 -104.93909454]
[-147.66682434 -116.80500793]
[-149.52304077 -132.12030029]
[-142.78393555 -145.99790955]
[-129.59997559 -154.00955200]
[-114.17807770 -153.59873962]
[-101.43933105 -144.89656067]
[-95.44862366 -130.67984009]
[-98.11756134 -115.48509979]
[-87.02445221 -105.38842010]
[-75.93134308 -95.29174805]
[-64.83823395 -85.19506836]
[-53.74512100 -75.09838867]
[-46.58714294 -72.89448547]
[-42.49436951 -64.57862091]
[-31.67633438 -54.18775558]
[-20.85829735 -43.79689026]
[-9.03384972 -48.63481522]
[3.78901029 -48.59571075]
[15.67058945 -43.64960098]
[24.79989052 -34.51150131]
[29.77062798 -22.53827286]
[29.79778671 -9.52721405]
[24.84136963 2.55370617]
[35.08606339 13.51026726]
[42.04349136 16.28300667]
[45.45384216 24.90123367]
[55.40068054 36.12889481]
[65.34751892 47.35655594]
[72.22799683 50.31509018]
[75.40573883 59.02177048]
[85.04755402 70.51243591]
[94.68936157 82.00310516]
[103.59923553 81.58433533]
[111.69579315 85.32690430]
[117.14948273 92.38511658]
[118.72795105 101.16404724]
[116.07451630 109.67993164]
[124.76045227 121.90917969]
[133.44638062 134.13842773]
[142.13232422 146.36767578]
[150.81825256 158.59693909]
[159.50418091 170.82618713]
[168.19012451 183.05543518]
[176.87605286 195.28468323]
[182.90592957 198.47996521]
[185.87359619 203.51994324]
[185.67912292 208.41166687]
[193.69612122 221.08952332]
[201.71310425 233.76736450]
[209.73008728 246.44522095]
[217.74708557 259.12307739]
[226.75820923 271.11471558]
[236.70504761 282.34237671]
[246.65188599 293.57003784]
[261.65832520 290.61123657]
[276.03598022 295.52856445]
[285.95596313 306.90661621]
[288.82962036 321.62390137]
[283.98345947 335.70864868]
[293.93029785 346.93630981]
[303.87713623 358.16397095]
[319.59518433 362.84100342]
[323.14010620 378.85241699]
[310.86517334 389.72705078]
[295.39779663 384.27801514]
[292.64947510 368.11080933]
[282.70263672 356.88314819]
[272.75579834 345.65548706]
[258.18957520 348.76858521]
[243.92599487 344.14190674]
[233.82661438 332.92279053]
[230.67819214 318.05725098]
[235.42422485 303.51687622]
[225.47738647 292.28921509]
[215.53054810 281.06155396]
[212.69047546 295.79022217]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 91]
[6 90]
[7 89]
[8 88]
[9 87]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[19 72]
[20 71]
[21 70]
[22 68]
[23 67]
[24 66]
[25 64]
[26 63]
[31 56]
[32 55]
[33 54]
[34 52]
[35 51]
[36 50]
[37 49]
[38 48]
[92 115]
[93 114]
[94 113]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
