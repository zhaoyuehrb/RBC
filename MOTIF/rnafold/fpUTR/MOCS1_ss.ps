%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAAAUCUUCCCAGUAGAGAUCACCAUCCGCCCCCGACCCCCAAGCUGAAUACUUAAGGGGUGGGUCCUUCCCAUCAAGCUGAUUUCUCAACGAGAGGGACAAUCCCAGCUUCCCCAACAUUGCAGAGCCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[0.87283832 123.43137360]
[2.83768511 108.56062317]
[9.41462231 95.07937622]
[19.92543221 84.37784576]
[33.28623199 77.55956268]
[48.11925507 75.32763672]
[62.89490509 77.91223145]
[76.08951569 85.04682159]
[86.34389496 95.99784088]
[76.67325592 84.53141785]
[67.00261688 73.06500244]
[57.33197784 61.59858704]
[44.80102921 65.08594513]
[31.93201828 63.55092239]
[20.65489006 57.25965881]
[12.64717770 47.18889236]
[9.08448410 34.87443924]
[10.46798611 22.17705536]
[16.55426598 11.00126743]
[7.41164255 -0.89042807]
[-1.73098147 -12.78212357]
[-10.87360573 -24.67381859]
[-20.01622963 -36.56551361]
[-29.15885353 -48.45721054]
[-38.30147934 -60.34890747]
[-47.44410324 -72.24060059]
[-54.59610367 -74.40965271]
[-59.21306992 -79.33258057]
[-60.55960846 -85.20872498]
[-72.55386353 -94.21638489]
[-84.54811096 -103.22404480]
[-96.54236603 -112.23170471]
[-108.53662109 -121.23936462]
[-120.53086853 -130.24702454]
[-132.52511597 -139.25468445]
[-144.51937866 -148.26234436]
[-156.51362610 -157.27000427]
[-168.27880859 -147.83435059]
[-182.02125549 -141.62178040]
[-196.87710571 -139.02281189]
[-211.91249084 -140.20082092]
[-226.18231201 -145.08174133]
[-238.78952026 -153.35876465]
[-248.94161987 -164.51158142]
[-256.00045776 -177.83912659]
[-259.52230835 -192.50363159]
[-259.28576660 -207.58325195]
[-255.30572510 -222.13006592]
[-247.83235168 -235.22967529]
[-237.33544922 -246.05859375]
[-224.47483826 -253.93614197]
[-210.05897522 -258.36709595]
[-194.99401855 -259.07296753]
[-180.22700500 -256.00933838]
[-166.68617249 -249.36880493]
[-155.22270203 -239.56880188]
[-146.55723572 -227.22537231]
[-141.23445129 -213.11442566]
[-139.58897400 -198.12298584]
[-141.72421265 -183.19343567]
[-147.50596619 -169.26425171]
[-135.51171875 -160.25659180]
[-123.51746368 -151.24893188]
[-111.52320862 -142.24127197]
[-99.52896118 -133.23361206]
[-87.53470612 -124.22595215]
[-75.54045868 -115.21829224]
[-63.54620361 -106.21063995]
[-51.55195236 -97.20298004]
[-56.17295456 -111.47344971]
[-55.16323090 -126.43942261]
[-48.66724014 -139.95985413]
[-37.61429977 -150.10049438]
[-23.58566284 -155.41061401]
[-8.58827782 -155.13052368]
[5.23230886 -149.30030823]
[15.89890862 -138.75404358]
[21.88554382 -125.00049591]
[22.33575821 -110.00725555]
[17.18514633 -95.91927338]
[7.17055845 -84.75199890]
[-6.27530527 -78.10303497]
[-21.22886276 -76.92358398]
[-35.55240631 -81.38322449]
[-26.40978241 -69.49153137]
[-17.26715851 -57.59983444]
[-8.12453461 -45.70813751]
[1.01808989 -33.81644440]
[10.16071415 -21.92474747]
[19.30333900 -10.03305244]
[28.44596291 1.85864329]
[45.34649658 -1.04233837]
[61.48903656 4.99950218]
[72.44346619 18.42124557]
[75.15562439 35.62181854]
[68.79839325 51.92794800]
[78.46903229 63.39436340]
[88.13967133 74.86077881]
[97.81031036 86.32720184]
[111.30376434 92.87905884]
[126.29514313 93.38748932]
[141.28652954 93.89591980]
[156.27790833 94.40435791]
[172.31288147 88.89836884]
[182.04261780 102.78247833]
[171.39456177 115.97547913]
[155.76947021 109.39573669]
[140.77809143 108.88730621]
[125.78671265 108.37886810]
[110.79532623 107.87043762]
[104.70433807 121.57882690]
[98.61388397 135.28598022]
[109.03917694 146.07084656]
[119.46446991 156.85571289]
[129.88975525 167.64057922]
[143.34471130 166.32189941]
[154.92012024 172.92088318]
[160.47462463 184.81723022]
[158.17144775 197.54460144]
[168.35034180 208.56231689]
[184.16256714 212.91041565]
[188.04072571 228.84440613]
[175.99531555 239.97276306]
[160.41761780 234.84757996]
[157.33264160 218.74122620]
[147.15373230 207.72351074]
[130.37419128 207.80209351]
[118.46598053 195.50718689]
[119.10489655 178.06587219]
[108.67960358 167.28100586]
[98.25431061 156.49613953]
[87.82901764 145.71127319]
[78.24859619 157.25318909]
[65.50385284 165.16339111]
[50.90902710 168.62622070]
[35.96915054 167.28454590]
[22.22482872 161.27674866]
[11.09338474 151.22235107]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 99]
[10 98]
[11 97]
[12 96]
[19 91]
[20 90]
[21 89]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[34 64]
[35 63]
[36 62]
[37 61]
[100 110]
[101 109]
[102 108]
[103 107]
[112 132]
[113 131]
[114 130]
[115 129]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
