%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCGGUGGCAGGGGCUGCAGGAGCAAGUGACCAGGAGCAGGACUGGGGACAGGCCUGAUCGCCCCUGCACGAACCAGACCCUUCGCCGCCCUCACG\
) } def
/len { sequence length } bind def

/coor [
[181.00578308 335.50808716]
[178.65927124 320.69274902]
[175.24272156 317.12216187]
[174.15255737 311.31069946]
[176.66116333 304.87615967]
[175.24954224 289.94271851]
[173.83790588 275.00927734]
[172.42628479 260.07586670]
[171.01466370 245.14242554]
[169.60304260 230.20899963]
[164.74427795 216.01771545]
[156.70687866 203.35279846]
[148.66947937 190.68788147]
[140.63206482 178.02296448]
[132.59466553 165.35804749]
[124.55726624 152.69313049]
[116.51986694 140.02819824]
[108.48246765 127.36328888]
[93.69889069 127.94633484]
[80.59591675 121.07565308]
[72.66831970 108.58376312]
[72.03051758 93.80244446]
[78.85261536 80.67411804]
[70.81521606 68.00920105]
[63.43957520 62.31202698]
[62.73152542 54.81781387]
[55.09590530 41.90668488]
[40.05128098 37.86971283]
[32.49160004 24.66721916]
[36.43294907 10.34935093]
[28.79732704 -2.56177902]
[13.75270653 -6.59874868]
[6.19302464 -19.80124283]
[10.13437271 -34.11911011]
[2.49875188 -47.03024292]
[-5.13686943 -59.94137192]
[-12.77249050 -72.85250092]
[-28.23279190 -74.17866516]
[-39.93886566 -84.36431122]
[-43.38949203 -99.49285889]
[-37.25783157 -113.74706268]
[-23.90163231 -121.64589691]
[-8.45662689 -120.15209961]
[3.13826513 -109.84005737]
[6.42457151 -94.67497253]
[0.13863987 -80.48812103]
[7.77426100 -67.57699585]
[15.40988255 -54.66586304]
[23.04550362 -41.75473404]
[37.49110794 -38.31087875]
[45.41863632 -25.32592773]
[41.70845795 -10.19740009]
[49.34407806 2.71373010]
[63.78968430 6.15758562]
[71.71720886 19.14253616]
[68.00703430 34.27106476]
[75.64265442 47.18219376]
[83.48013306 59.97179413]
[91.51753235 72.63671112]
[106.30110931 72.05366516]
[119.40408325 78.92434692]
[127.33168030 91.41623688]
[127.96948242 106.19755554]
[121.14738464 119.32588196]
[129.18478394 131.99079895]
[137.22218323 144.65571594]
[145.25958252 157.32063293]
[153.29699707 169.98556519]
[161.33439636 182.65048218]
[169.37179565 195.31539917]
[177.40919495 207.98031616]
[179.13441467 193.07986450]
[185.99169922 179.73902893]
[197.10421753 169.66372681]
[211.05102539 164.14225769]
[226.04873657 163.88066101]
[240.17962646 168.91238403]
[251.63674927 178.59403992]
[258.95510864 191.68760681]
[261.19891357 206.51882935]
[258.08123779 221.19125366]
[250.00073242 233.82872009]
[237.99066162 242.81527710]
[223.58674622 247.00183105]
[208.63079834 245.85302734]
[195.03524780 239.51577759]
[184.53646851 228.79737854]
[185.94808960 243.73080444]
[187.35971069 258.66424561]
[188.77134705 273.59765625]
[190.18296814 288.53109741]
[191.59458923 303.46450806]
[193.47459412 318.34625244]
[195.82110596 333.16156006]
[208.75276184 342.24716187]
[211.38998413 357.82986450]
[202.16818237 370.66473389]
[186.55847168 373.13705444]
[173.82182312 363.78005981]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 71]
[12 70]
[13 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[23 59]
[24 58]
[26 57]
[27 56]
[30 53]
[31 52]
[34 49]
[35 48]
[36 47]
[37 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
