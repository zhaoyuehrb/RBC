%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCCGUCCUGUCCACAAGGCUCAGCAAAGCGGCUGGCGGCCUGGCCUGGGACCUGCUGCUGCUCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[131.85830688 212.03021240]
[124.52641296 206.64685059]
[119.23594666 199.20510864]
[116.53991699 190.44537354]
[116.73187256 181.24751282]
[119.81412506 172.54260254]
[125.49532318 165.21865845]
[118.56909180 151.91349792]
[111.64286041 138.60833740]
[104.71662903 125.30316925]
[97.79040527 111.99800873]
[90.29040527 99.00762939]
[82.23091125 86.35675812]
[74.17141724 73.70588684]
[69.53796387 71.57865906]
[66.34396362 68.28914642]
[64.78737640 64.51784515]
[64.79101562 60.93127823]
[66.03786469 58.08147812]
[60.29761124 44.22328568]
[54.55736160 30.36509323]
[48.81710815 16.50689888]
[43.07685852 2.64870667]
[36.73758316 -10.94591045]
[29.81135559 -24.25107193]
[22.88512611 -37.55623627]
[15.95889664 -50.86139679]
[0.81260747 -55.37420654]
[-6.63280582 -69.31484222]
[-1.96011162 -84.41257477]
[12.05846405 -91.71018219]
[27.10594749 -86.87812805]
[34.25493622 -72.78318024]
[29.26405907 -57.78762817]
[36.19028854 -44.48246384]
[43.11651611 -31.17730141]
[50.04274750 -17.87213898]
[54.54366302 -15.54398060]
[57.45825577 -10.20088673]
[56.93505096 -3.09154487]
[62.67530441 10.76664829]
[68.41555786 24.62484169]
[74.15580750 38.48303604]
[79.89605713 52.34122849]
[86.82228851 65.64639282]
[94.88178253 78.29726410]
[102.94127655 90.94813538]
[107.99788666 93.33379364]
[111.20584869 98.50024414]
[111.09556580 105.07177734]
[118.02179718 118.37693787]
[124.94802094 131.68209839]
[131.87425232 144.98727417]
[138.80047607 158.29243469]
[160.59765625 162.37750244]
[173.00984192 180.45352173]
[169.08416748 201.77297974]
[179.21801758 212.83213806]
[189.35186768 223.89129639]
[199.48571777 234.95045471]
[215.28392029 235.38935852]
[226.08372498 246.92796326]
[225.47782898 262.72064209]
[213.82569885 273.39785767]
[198.04031372 272.62503052]
[187.48687744 260.86065674]
[188.42655945 245.08432007]
[178.29270935 234.02514648]
[168.15885925 222.96598816]
[158.02499390 211.90682983]
[149.50355530 214.77801514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 54]
[8 53]
[9 52]
[10 51]
[11 50]
[12 47]
[13 46]
[14 45]
[19 44]
[20 43]
[21 42]
[22 41]
[23 40]
[24 37]
[25 36]
[26 35]
[27 34]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
