%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:14:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAGCGCUCGUGACCACCAUUUCCGACCCGGGCAAGAUGGCAGCGGCGCUGCGCGUGCGUUGUUGAGUGUUCGGGACGCCGGCCUGCAGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[100.36975098 144.09353638]
[85.60703278 141.43608093]
[76.80420685 129.29071045]
[78.87290955 114.43404388]
[90.65995789 105.15521240]
[76.22477722 101.07776642]
[61.78960037 97.00031281]
[47.35442352 92.92285919]
[32.91924286 88.84541321]
[23.61286354 89.51841736]
[18.08668327 84.39514160]
[3.79111099 79.85238647]
[-10.50446224 75.30963898]
[-24.41417122 82.32089233]
[-38.84720230 77.51025391]
[-45.44564438 64.20626068]
[-59.74121857 59.66350937]
[-74.03678894 55.12075806]
[-84.54501343 66.13614655]
[-98.73598480 71.47497559]
[-113.77616882 70.12846375]
[-126.68720245 62.41702271]
[-134.93571472 49.91616440]
[-136.93035889 35.13486099]
[-151.22593689 30.59211159]
[-165.52151489 26.04936028]
[-179.81707764 21.50660896]
[-196.74351501 22.47211838]
[-202.35699463 6.47445774]
[-188.53849792 -3.34823918]
[-175.27433777 7.21103573]
[-160.97875977 11.75378704]
[-146.68318176 16.29653740]
[-132.38761902 20.83928871]
[-122.22626495 9.92084026]
[-108.27464294 4.47459078]
[-93.28049469 5.63067102]
[-80.22194672 13.21318245]
[-71.71598053 25.76449776]
[-69.49404144 40.82518768]
[-55.19846725 45.36793900]
[-40.90289307 49.91069031]
[-27.83504486 42.85612106]
[-13.27258778 47.25946808]
[-5.96171093 61.01406097]
[8.33386230 65.55681610]
[22.62943459 70.09956360]
[36.99669647 74.41023254]
[51.43187332 78.48767853]
[65.86705017 82.56513214]
[80.30223083 86.64258575]
[94.73741150 90.72003174]
[109.50006104 93.37789917]
[124.45091248 94.59111023]
[139.40177917 95.80431366]
[154.35263062 97.01751709]
[168.73338318 90.42173004]
[180.79316711 99.16307068]
[195.74401855 100.37628174]
[210.69488525 101.58948517]
[225.64573669 102.80268860]
[236.07664490 95.00587463]
[248.61408997 96.44191742]
[256.49081421 105.77938843]
[271.39456177 107.47609711]
[286.29827881 109.17279816]
[301.20202637 110.86950684]
[310.27813721 108.70482635]
[316.55804443 112.87008667]
[331.39901733 115.04851532]
[346.23999023 117.22694397]
[361.08096313 119.40537262]
[375.92193604 121.58380127]
[392.47122192 117.90186310]
[400.59057617 132.78515625]
[388.53659058 144.70730591]
[373.74349976 136.42477417]
[358.90252686 134.24635315]
[344.06155396 132.06791687]
[329.22058105 129.88949585]
[314.37960815 127.71105957]
[299.50531006 125.77323914]
[284.60156250 124.07653046]
[269.69784546 122.37982178]
[254.79411316 120.68311310]
[239.21562195 128.58244324]
[224.43252563 117.75354767]
[209.48167419 116.54034424]
[194.53082275 115.32713318]
[179.57995605 114.11392975]
[166.26858521 120.79649353]
[153.13941956 111.96837616]
[138.18856812 110.75517273]
[123.23770905 109.54196167]
[108.28684998 108.32875824]
[116.09735107 121.13484955]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[11 47]
[12 46]
[13 45]
[16 42]
[17 41]
[18 40]
[24 34]
[25 33]
[26 32]
[27 31]
[53 95]
[54 94]
[55 93]
[56 92]
[58 90]
[59 89]
[60 88]
[61 87]
[64 85]
[65 84]
[66 83]
[67 82]
[69 81]
[70 80]
[71 79]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
