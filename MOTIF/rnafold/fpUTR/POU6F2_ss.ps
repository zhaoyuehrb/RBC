%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:04:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUCUCAGCGCAGCAGGACACGGGGACCAUGCAAGCUGUAAUUGGUCAGGCAUGAACUCUCUUGGGUUGUGUUACCCUGUUUGCUGUUUACUGUCAAGAUGCUGAAAGAAUGUUCUUAUAAUGAUCCAAGAGGAAGUGGCAA\
) } def
/len { sequence length } bind def

/coor [
[321.79470825 346.14471436]
[332.06790161 332.12918091]
[322.42608643 320.63851929]
[312.78427124 309.14785767]
[298.67623901 304.37164307]
[295.73275757 288.82666016]
[286.09094238 277.33599854]
[276.44912720 265.84530640]
[266.80731201 254.35466003]
[257.16549683 242.86398315]
[245.99645996 232.85137939]
[233.52442932 224.51782227]
[221.05238342 216.18426514]
[208.58033752 207.85070801]
[196.10829163 199.51715088]
[183.63624573 191.18360901]
[171.16419983 182.85005188]
[163.79943848 181.74082947]
[158.51370239 174.19618225]
[146.22642517 165.59254456]
[133.93914795 156.98889160]
[126.60032654 155.71926880]
[121.48044586 148.06111145]
[109.38378143 139.19146729]
[97.28710938 130.32182312]
[83.13659668 125.34558105]
[68.15087891 124.69129181]
[53.16515350 124.03700256]
[38.17942810 123.38270569]
[23.19370461 122.72841644]
[8.19727516 122.40119171]
[-6.80272532 122.40119171]
[-21.80272484 122.40119171]
[-36.80272675 122.40119171]
[-52.64185715 128.44754028]
[-62.83661270 114.90119171]
[-52.64185715 101.35485840]
[-36.80272675 107.40119171]
[-21.80272484 107.40119171]
[-6.80272532 107.40119171]
[8.19727516 107.40119171]
[12.19409370 104.66276550]
[17.96915054 104.45807648]
[23.84799576 107.74269104]
[38.83372116 108.39698792]
[53.81944275 109.05127716]
[68.80516815 109.70556641]
[83.79088593 110.35985565]
[82.81117249 99.58833313]
[87.63938904 91.23909760]
[81.30011749 77.64447784]
[74.96083832 64.04985809]
[68.62156677 50.45524216]
[62.28229141 36.86062622]
[55.77012253 30.34509277]
[55.95663071 22.89959526]
[49.91543198 9.16992378]
[43.87422943 -4.55974865]
[37.83303070 -18.28942108]
[31.79183006 -32.01909256]
[18.25407791 -41.27443314]
[19.77018738 -57.60334778]
[34.78051758 -64.20804596]
[47.84372330 -54.29418945]
[45.52150345 -38.06029129]
[51.56270218 -24.33062172]
[57.60390472 -10.60094929]
[63.64510345 3.12872338]
[69.68630219 16.85839462]
[75.87690735 30.52135277]
[82.21618652 44.11597061]
[88.55545807 57.71058655]
[94.89472961 71.30520630]
[101.23400116 84.89981842]
[117.06570435 97.90551758]
[106.15675354 118.22515869]
[118.25342560 127.09480286]
[130.35009766 135.96444702]
[142.54280090 144.70161438]
[154.83007812 153.30525208]
[167.11735535 161.90890503]
[179.49775696 170.37800598]
[191.96980286 178.71156311]
[204.44184875 187.04512024]
[216.91389465 195.37866211]
[229.38592529 203.71221924]
[241.85797119 212.04577637]
[254.33001709 220.37933350]
[248.91070557 206.39251709]
[249.53039551 191.40531921]
[256.08590698 177.91365051]
[267.48553467 168.16433716]
[281.83078003 163.78100586]
[296.73269653 165.49362183]
[309.70956421 173.01698303]
[318.60028076 185.09819031]
[321.92419434 199.72526550]
[319.12780762 214.46229553]
[310.67678833 226.85504150]
[297.97854614 234.83967590]
[283.14776611 237.08647156]
[268.65618896 233.22216797]
[278.29800415 244.71284485]
[287.93981934 256.20352173]
[297.58160400 267.69418335]
[307.22341919 279.18484497]
[322.02111816 284.78295898]
[324.27493286 299.50604248]
[333.91674805 310.99670410]
[343.55856323 322.48736572]
[354.92507935 316.40625000]
[367.22833252 312.57467651]
[380.02801514 311.12783813]
[392.86639404 312.11569214]
[405.28463745 315.50103760]
[416.83935547 321.16113281]
[427.11828613 328.89193726]
[435.75512695 338.41564941]
[442.44247437 349.39062500]
[446.94287109 361.42355347]
[449.09716797 374.08367920]
[448.83016968 386.91809082]
[446.15322876 399.46810913]
[441.16387939 411.28543091]
[434.04211426 421.94836426]
[425.04412842 431.07681274]
[433.37765503 443.54885864]
[441.71121216 456.02087402]
[456.65048218 462.78482056]
[457.99288940 479.12893677]
[444.35748291 488.23980713]
[429.77120972 480.74496460]
[429.23916626 464.35443115]
[420.90563965 451.88238525]
[412.57208252 439.41033936]
[396.35336304 445.37731934]
[379.14343262 447.05111694]
[362.05993652 444.31811523]
[346.21356201 437.35113525]
[332.63577271 426.59838867]
[322.21173096 412.75463867]
[315.62252808 396.71636963]
[313.30075073 379.52380371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 110]
[3 109]
[4 108]
[6 106]
[7 105]
[8 104]
[9 103]
[10 102]
[11 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[19 81]
[20 80]
[21 79]
[23 78]
[24 77]
[25 76]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 41]
[32 40]
[33 39]
[34 38]
[50 74]
[51 73]
[52 72]
[53 71]
[54 70]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[126 135]
[127 134]
[128 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
