%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCGGAGAAGCUUGGGUACCUGAGCCGCGGUCCCGGGUGACACCCUCAGUGACGCCAGGCGCGUUCCUUCCUCUUCCUCUCUCCUCUCCGGCCCCGCCUUCCCUUCCCUCCGCCCACCUCCCUGAAGCGGAGCCGCCGUCGCCACCAGCGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[72.89675140 126.61920929]
[66.97040558 118.76737213]
[63.25888824 109.65706635]
[62.01107788 99.89920044]
[47.31422043 96.89881897]
[32.61735916 93.89842987]
[17.92049980 90.89804840]
[3.22363973 87.89765930]
[2.68556571 97.37197876]
[-2.89485431 107.05871582]
[-12.61358547 118.48439789]
[-22.33231544 129.91007996]
[-32.05104828 141.33576965]
[-41.76977921 152.76145935]
[-51.48851013 164.18713379]
[-53.91070557 180.40641785]
[-69.26522827 186.16581726]
[-81.75666046 175.54055786]
[-78.53488922 159.46099854]
[-62.91419220 154.46841431]
[-53.19546127 143.04272461]
[-43.47673035 131.61703491]
[-33.75799942 120.19135284]
[-24.03927040 108.76567078]
[-14.32053947 97.33998108]
[-19.07055855 83.11193848]
[-33.70402145 79.81620789]
[-48.33747864 76.52047729]
[-62.97093964 73.22475433]
[-68.06200409 74.81945801]
[-72.77182007 74.31398010]
[-76.35314178 72.21701813]
[-78.37571716 69.26286316]
[-92.78349304 65.08959961]
[-108.19145966 68.68196869]
[-118.26358032 57.70920181]
[-132.67135620 53.53594208]
[-147.07911682 49.36267853]
[-161.48689270 45.18941879]
[-176.89486694 48.78178406]
[-186.96697998 37.80901718]
[-201.37475586 33.63575745]
[-215.78253174 29.46249390]
[-230.47209167 35.91201019]
[-244.60571289 28.32120705]
[-247.34129333 12.51310253]
[-236.58032227 0.61431938]
[-220.57769775 1.75258684]
[-211.60926819 15.05472279]
[-197.20149231 19.22798538]
[-182.79373169 23.40124702]
[-168.41629028 19.51037979]
[-157.31362915 30.78164482]
[-142.90586853 34.95490646]
[-128.49809265 39.12817001]
[-114.09031677 43.30142975]
[-99.71289062 39.41056442]
[-88.61022949 50.68182755]
[-74.20245361 54.85509109]
[-59.67521286 58.59128952]
[-45.04175186 61.88702011]
[-30.40829086 65.18274689]
[-15.77483082 68.47847748]
[-27.82997704 59.55247879]
[-36.22504807 47.12175751]
[-40.00191498 32.60503387]
[-38.72952652 17.65909767]
[-32.55309677 3.98972631]
[-22.17754173 -6.84299660]
[-8.78702450 -13.60273361]
[6.09019852 -15.51799774]
[20.75619125 -12.37019825]
[33.53712845 -4.51859426]
[42.97431946 7.14071178]
[47.99069977 21.27704430]
[48.01375580 36.27702713]
[43.04084778 50.42871094]
[33.63953781 62.11697006]
[20.88279724 70.00782013]
[6.22402525 73.20079803]
[20.92088509 76.20118713]
[35.61774445 79.20156860]
[50.31460571 82.20195770]
[65.01146698 85.20233917]
[75.45686340 71.00340271]
[91.18643188 63.04747391]
[108.81356812 63.04747391]
[124.54313660 71.00340271]
[134.98854065 85.20233917]
[149.68539429 82.20195770]
[164.38224792 79.20156860]
[179.07911682 76.20118713]
[191.05273438 65.85986328]
[205.07044983 70.89501953]
[219.76731873 67.89463043]
[234.46417236 64.89424896]
[249.16104126 61.89385986]
[256.99652100 57.08555222]
[264.18392944 58.98417282]
[278.93823242 56.28034592]
[293.69250488 53.57651901]
[294.89599609 38.53610611]
[299.95211792 24.31998825]
[308.51617432 11.89744473]
[320.00421143 2.11546683]
[333.63299561 -4.35899496]
[348.47326660 -7.08450079]
[363.51321411 -5.87522125]
[377.72738647 -0.81360710]
[390.14663696 7.75523233]
[399.92416382 19.24705887]
[406.39337158 32.87834167]
[409.11315918 47.71967697]
[407.89807129 62.75915909]
[402.83096313 76.97136688]
[394.25732422 89.38729095]
[382.76171875 99.16040039]
[369.12792969 105.62433624]
[354.28555298 108.33837891]
[339.24655151 107.11748505]
[325.03628540 102.04489136]
[312.62368774 93.46646881]
[302.85501099 81.96709442]
[296.39633179 68.33081818]
[281.64205933 71.03464508]
[266.88775635 73.73847198]
[252.16142273 76.59072113]
[237.46456909 79.59110260]
[222.76770020 82.59149170]
[208.07084656 85.59187317]
[197.14843750 95.71858978]
[182.07949829 90.89804840]
[167.38264465 93.89842987]
[152.68577576 96.89881897]
[137.98892212 99.89920044]
[133.98632812 116.97344971]
[122.74096680 130.43052673]
[129.17135620 143.98228455]
[142.07765198 153.13313293]
[140.54347229 167.94850159]
[146.97386169 181.50025940]
[153.40425110 195.05201721]
[167.97276306 201.77049255]
[171.66329956 217.38330078]
[161.64477539 229.91362000]
[145.60256958 229.74926758]
[135.84286499 217.01632690]
[139.85249329 201.48240662]
[133.42210388 187.93064880]
[126.99172211 174.37889099]
[114.54536438 166.19735718]
[115.61959839 150.41265869]
[109.18920898 136.86091614]
[99.41627502 137.98457336]
[89.68247986 136.56114197]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[26 63]
[27 62]
[28 61]
[29 60]
[33 59]
[34 58]
[36 56]
[37 55]
[38 54]
[39 53]
[41 51]
[42 50]
[43 49]
[89 135]
[90 134]
[91 133]
[92 132]
[94 130]
[95 129]
[96 128]
[97 127]
[99 126]
[100 125]
[101 124]
[137 153]
[138 152]
[140 150]
[141 149]
[142 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
