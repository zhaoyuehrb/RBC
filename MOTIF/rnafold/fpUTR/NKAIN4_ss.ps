%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:29:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUCCAGGCUGCGGCGCGUGGGGAGCGGGCGGAGCGGGGGCGGGGGCCGAGCGCGGGGCACCCGGGGGCCUCCUGUAUAGGCGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[90.93044281 125.21898651]
[80.63397217 118.52596283]
[74.40384674 107.94299316]
[59.40607834 108.20189667]
[44.40831375 108.46080780]
[29.41054726 108.71971893]
[18.46712875 119.80480957]
[3.25357389 119.85373688]
[-7.24692917 109.35254669]
[-22.24469566 109.61145020]
[-37.24245834 109.87036133]
[-50.90702438 117.84471130]
[-63.76595306 110.32824707]
[-78.76371765 110.58715057]
[-94.19161987 120.45534515]
[-109.24021912 111.60812378]
[-124.22010803 112.38454437]
[-139.19999695 113.16096497]
[-148.47305298 125.75241089]
[-163.68234253 129.38716125]
[-177.64653015 122.34899139]
[-183.77212524 107.96111298]
[-179.16682434 93.01703644]
[-166.00511169 84.57290649]
[-150.50154114 86.61578369]
[-139.97642517 98.18107605]
[-124.99652863 97.40465546]
[-110.01663971 96.62823486]
[-101.56723022 87.78549957]
[-88.94961548 87.13691711]
[-79.02262878 95.58938599]
[-64.02486420 95.33047485]
[-51.43303680 87.37464905]
[-37.50136948 94.87259674]
[-22.50360489 94.61368561]
[-7.50583887 94.35478210]
[2.62594676 83.49740601]
[17.83212471 83.02118683]
[29.15163803 93.72195435]
[44.14940262 93.46304321]
[59.14717102 93.20413208]
[74.14493561 92.94522095]
[87.13755035 76.48805237]
[108.00331879 74.42264557]
[116.30994415 61.93264771]
[124.61656952 49.44265366]
[132.70637512 36.81113815]
[140.57693481 24.04187202]
[148.44750977 11.27260494]
[142.42219543 -3.02687764]
[145.98541260 -18.12929726]
[157.76702881 -28.22746658]
[173.23678589 -29.43843079]
[186.44622803 -21.29655266]
[192.31607056 -6.93254805]
[188.58921814 8.13032913]
[176.69874573 18.10009575]
[161.21676636 19.14317322]
[153.34620667 31.91243935]
[145.47563171 44.68170547]
[144.62841797 52.18757629]
[137.10656738 57.74927521]
[128.79994202 70.23927307]
[120.49331665 82.72927094]
[125.39314270 91.43013763]
[126.76770020 101.32073212]
[124.42617035 111.02797699]
[135.82385254 120.77954102]
[147.38815308 130.33291626]
[159.11561584 139.68525696]
[170.84309387 149.03761292]
[182.57057190 158.38995361]
[194.45771790 167.53848267]
[206.50100708 176.48046875]
[218.54429626 185.42245483]
[234.88824463 186.76692200]
[241.65028381 201.70703125]
[231.87422180 214.87368774]
[215.61682129 212.72215271]
[209.60231018 197.46575928]
[197.55902100 188.52377319]
[185.51573181 179.58177185]
[178.11082458 178.09069824]
[173.21821594 170.11743164]
[161.49075317 160.76507568]
[149.76327515 151.41273499]
[138.03579712 142.06039429]
[130.68678284 140.31460571]
[126.07228851 132.17721558]
[114.67461395 122.42565155]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 42]
[4 41]
[5 40]
[6 39]
[9 36]
[10 35]
[11 34]
[13 32]
[14 31]
[16 28]
[17 27]
[18 26]
[44 64]
[45 63]
[46 62]
[47 60]
[48 59]
[49 58]
[67 90]
[68 89]
[69 87]
[70 86]
[71 85]
[72 84]
[73 82]
[74 81]
[75 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
