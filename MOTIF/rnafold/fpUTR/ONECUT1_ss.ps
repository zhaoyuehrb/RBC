%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACAGUGAGAGGAAGGAAGGCAACAGUCGCCAGCAGCCGAUGUGAAGACCGGACUCCGUGCGCCCCUCGCCGCCUCUGCCUGGCCACAUCGAUGUUGUGUCCGCCGCCUGCUCGCCCGGAUCACG\
) } def
/len { sequence length } bind def

/coor [
[112.69252777 471.45928955]
[117.78160858 456.89547729]
[129.95066833 447.41296387]
[128.49177551 432.48410034]
[117.44703674 425.73199463]
[112.26019287 413.65859985]
[115.04703522 400.61743164]
[125.00276947 391.45410156]
[123.90783691 376.49411011]
[122.81291199 361.53411865]
[121.71797943 346.57415771]
[120.62304688 331.61416626]
[119.34603882 316.66860962]
[117.88714600 301.73974609]
[116.42825317 286.81085205]
[101.63245392 276.16006470]
[99.17441559 257.77655029]
[111.05069733 243.12074280]
[108.86668396 228.28059387]
[106.68266296 213.44044495]
[97.12556458 205.91993713]
[95.23567200 193.49943542]
[102.57810211 182.81311035]
[100.75611115 167.92417908]
[98.93411255 153.03524780]
[97.11211395 138.14631653]
[95.29011536 123.25737762]
[93.46811676 108.36844635]
[90.74356842 93.61795807]
[87.12655640 79.06058502]
[76.28987885 67.53335571]
[80.72988129 53.31591415]
[77.11286926 38.75853729]
[73.49585724 24.20116234]
[69.87884521 9.64378452]
[66.26183319 -4.91359234]
[62.46783447 -19.42584801]
[58.49740601 -33.89083099]
[54.52698135 -48.35581207]
[39.56660843 -51.17515945]
[27.36362839 -60.17372894]
[20.30663681 -73.52359772]
[19.74798965 -88.55187225]
[25.74497223 -102.27577972]
[37.05903244 -111.99470520]
[33.08860397 -126.45968628]
[29.11817932 -140.92466736]
[25.14775085 -155.38964844]
[10.37607002 -159.35760498]
[-0.35532260 -170.11558533]
[-4.23527288 -184.70367432]
[-0.31854168 -199.17831421]
[10.24631500 -209.67828369]
[6.27588797 -224.14326477]
[-4.83827734 -235.40318298]
[-0.74579668 -249.72453308]
[-4.71622324 -264.18951416]
[-14.73944378 -277.86325073]
[-4.37477493 -291.28002930]
[11.38689804 -285.03454590]
[9.74875927 -268.15994263]
[13.71918583 -253.69496155]
[24.54936028 -243.46966553]
[20.74086952 -228.11369324]
[24.71129799 -213.64871216]
[39.15605164 -210.01350403]
[49.91336060 -199.56668091]
[54.02443314 -185.04202271]
[50.28883362 -170.31307983]
[39.61273575 -159.36007690]
[43.58316040 -144.89509583]
[47.55358887 -130.43011475]
[51.52401352 -115.96513367]
[66.21425629 -113.38400269]
[78.37706757 -104.64469147]
[85.56875610 -91.43709564]
[86.31584930 -76.35525513]
[80.41667938 -62.38790894]
[68.99195862 -52.32624054]
[72.96238708 -37.86125565]
[76.93281555 -23.39627457]
[81.78726196 -17.72018051]
[80.81921387 -8.53060436]
[84.43622589 6.02677250]
[88.05323792 20.58414841]
[91.67024994 35.14152527]
[95.28726196 49.69890213]
[105.86522675 60.18488693]
[101.68392944 75.44357300]
[105.30094147 90.00094604]
[115.59667969 79.09233093]
[130.56335449 80.09159851]
[139.31752014 92.27209473]
[135.49331665 106.77642822]
[121.87163544 113.05732727]
[108.35705566 106.54644775]
[110.17904663 121.43537903]
[112.00104523 136.32431030]
[113.82304382 151.21324158]
[115.64504242 166.10217285]
[117.46704102 180.99111938]
[128.88627625 195.37573242]
[121.52281189 211.25642395]
[123.70683289 226.09657288]
[125.89084625 240.93673706]
[136.73561096 246.10095215]
[143.63049316 255.78895569]
[144.93063354 267.48742676]
[140.42434692 278.23059082]
[131.35713196 285.35195923]
[132.81602478 300.28082275]
[134.27493286 315.20971680]
[138.26007080 323.54663086]
[135.58303833 330.51922607]
[136.67796326 345.47921753]
[137.77288818 360.43920898]
[138.86782837 375.39916992]
[139.96275330 390.35916138]
[153.38990784 401.49459839]
[154.63668823 418.55651855]
[143.42065430 431.02520752]
[144.87954712 445.95407104]
[158.65417480 452.90127563]
[166.46647644 466.20434570]
[165.82360840 481.61828613]
[156.93069458 494.22463989]
[142.62542725 500.00070190]
[127.47256470 497.10336304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 122]
[4 121]
[8 118]
[9 117]
[10 116]
[11 115]
[12 114]
[13 112]
[14 111]
[15 110]
[18 105]
[19 104]
[20 103]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[28 96]
[29 90]
[30 89]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[37 81]
[38 80]
[39 79]
[45 73]
[46 72]
[47 71]
[48 70]
[53 65]
[54 64]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
