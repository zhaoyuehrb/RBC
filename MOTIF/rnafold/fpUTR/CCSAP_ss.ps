%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGGAUCGGCCGGGCGCGGCGGGAAGGAGGCUGCGGGCAGCGAGGAGCGGCUGGCGCUCGAGGCGGCGGACGGCACC\
) } def
/len { sequence length } bind def

/coor [
[51.18186951 389.97817993]
[37.09856796 395.77307129]
[21.87603188 395.33224487]
[8.15165901 388.73214722]
[-1.69672310 377.11624146]
[-5.96282101 362.49707031]
[-3.90750813 347.40747070]
[4.11312056 334.46185303]
[16.70944214 325.90307617]
[31.69906807 323.21401978]
[35.24423599 308.63897705]
[38.78940201 294.06393433]
[42.33456802 279.48889160]
[34.39481735 266.93917847]
[37.78249359 252.10749817]
[50.99964905 243.86465454]
[54.54481506 229.28961182]
[58.08998489 214.71456909]
[53.57990646 200.51919556]
[64.35959625 188.93865967]
[67.90476227 174.36363220]
[58.88022614 167.06044006]
[53.32431412 156.80728149]
[52.12305832 145.15507507]
[55.50029373 133.88391113]
[62.97732162 124.73123169]
[73.44028473 119.12389374]
[85.30601501 117.95587158]
[90.56067657 103.90637207]
[90.22414398 95.61415100]
[96.31365204 89.40971375]
[102.12271881 75.58023071]
[102.60359192 66.17870331]
[108.44747925 61.32374954]
[114.80176544 47.73614502]
[113.63902283 31.95772362]
[126.03929901 23.70651436]
[132.39358521 10.11890793]
[138.74787903 -3.46869755]
[137.58512878 -19.24711990]
[149.98541260 -27.49832726]
[156.33969116 -41.08593369]
[152.24302673 -56.59711838]
[161.93115234 -69.38459778]
[177.97218323 -69.63890839]
[188.06082153 -57.16497421]
[184.45790100 -41.53172302]
[169.92730713 -34.73164749]
[163.57301331 -21.14404106]
[165.19026184 -6.33749533]
[152.33547974 2.88558960]
[145.98120117 16.47319603]
[139.62690735 30.06080055]
[141.24415588 44.86734772]
[128.38937378 54.09043121]
[122.03508759 67.67803955]
[115.95220947 81.38929749]
[110.14313507 95.21878052]
[104.61017609 109.16103363]
[99.35551453 123.21053314]
[110.57779694 138.33981323]
[110.73875427 157.03140259]
[99.94712067 172.11619568]
[82.47980499 177.90879822]
[78.93463898 192.48382568]
[83.19113922 207.72171021]
[72.66502380 218.25973511]
[69.11985779 232.83477783]
[65.57469177 247.40982056]
[73.52934265 260.80239868]
[69.72640991 275.53305054]
[56.90960693 283.03405762]
[53.36444092 297.60910034]
[49.81927490 312.18414307]
[46.27410889 326.75918579]
[58.35405731 336.03253174]
[65.61212921 349.42059326]
[66.79082489 364.60382080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 75]
[11 74]
[12 73]
[13 72]
[16 69]
[17 68]
[18 67]
[20 65]
[21 64]
[28 60]
[29 59]
[31 58]
[32 57]
[34 56]
[35 55]
[37 53]
[38 52]
[39 51]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
