%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:19:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUUGUCAAACAUGGCUGAAGCGCUGCCGCUGCCGCUACUGCCGCUGCAGGGAAAAUGCUGAGCCCUCCCGGGCCGGGUGGGCGGCGGCGGCGAGGGCGGCGACGGGGACCCGCUUCCCGAGCGCGGCGGCGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[37.49822617 345.75796509]
[24.28699112 352.54022217]
[19.94285965 366.89739990]
[15.59872913 381.25457764]
[19.85869408 397.09075928]
[8.08420086 408.50537109]
[-7.61216307 403.75601196]
[-11.08332348 387.72845459]
[1.24155211 376.91043091]
[5.58568287 362.55325317]
[9.92981339 348.19607544]
[2.69475937 335.22729492]
[6.89580250 320.60519409]
[20.54772186 313.10433960]
[24.89185143 298.74716187]
[29.23598289 284.38998413]
[33.58011246 270.03280640]
[37.92424393 255.67561340]
[32.26584244 247.04382324]
[32.33975601 236.50231934]
[38.36544800 227.58491516]
[48.52649307 223.41595459]
[53.51494980 209.26974487]
[58.50340652 195.12351990]
[63.49186325 180.97731018]
[68.48031616 166.83110046]
[73.46877289 152.68489075]
[78.45722961 138.53868103]
[83.44568634 124.39247131]
[88.43414307 110.24625397]
[89.95710754 95.32376862]
[87.92921448 80.46147919]
[85.90132141 65.59919739]
[83.87342072 50.73690414]
[81.84552765 35.87461472]
[79.81763458 21.01232719]
[77.78973389 6.15003729]
[73.49649811 -2.01028323]
[75.88788605 -9.07061672]
[74.19638824 -23.97493935]
[72.33657074 -38.85919571]
[70.30867767 -53.72148514]
[68.28077698 -68.58377075]
[66.25288391 -83.44606018]
[64.22499084 -98.30834961]
[62.19709015 -113.17063904]
[60.16919708 -128.03292847]
[58.14130020 -142.89521790]
[52.20586777 -156.67094421]
[42.79683304 -168.35298157]
[27.30621338 -167.44728088]
[14.25987148 -175.84802246]
[8.67439461 -190.32498169]
[12.69751072 -205.31144714]
[24.78224945 -215.04483032]
[40.28178406 -215.78244019]
[53.23622513 -207.24064636]
[58.66432571 -192.70396423]
[54.47887421 -177.76202393]
[63.88790894 -166.07998657]
[71.13599396 -168.00747681]
[85.63217163 -171.86247253]
[92.88025665 -173.78996277]
[95.24351501 -188.60263062]
[97.60677338 -203.41528320]
[99.97003174 -218.22795105]
[94.50358582 -233.07478333]
[104.14944458 -244.42408752]
[106.51270294 -259.23675537]
[108.87595367 -274.04940796]
[111.23921204 -288.86209106]
[107.76385498 -305.45599365]
[122.74720001 -313.38919067]
[134.51817322 -301.18753052]
[126.05187988 -286.49884033]
[123.68862152 -271.68615723]
[121.32536316 -256.87350464]
[118.96210480 -242.06083679]
[124.59758759 -228.27349854]
[114.78269196 -215.86470032]
[112.41943359 -201.05203247]
[110.05617523 -186.23936462]
[107.69291687 -171.42669678]
[93.05677795 -148.04943848]
[73.00358582 -144.92311096]
[75.03148651 -130.06082153]
[77.05937958 -115.19853973]
[79.08727264 -100.33625031]
[81.11517334 -85.47396088]
[83.14306641 -70.61167145]
[85.17096710 -55.74938202]
[87.19886017 -40.88709259]
[91.25399780 -34.63226318]
[89.10070801 -25.66643715]
[90.79220581 -10.76211548]
[92.65202332 4.12214136]
[94.67991638 18.98443031]
[96.70781708 33.84671783]
[98.73571014 48.70900726]
[100.76361084 63.57129669]
[102.79150391 78.43358612]
[104.81939697 93.29587555]
[118.11918640 86.64859772]
[134.86160278 88.34786224]
[148.95054626 93.49585724]
[163.03947449 98.64385986]
[177.12841797 103.79185486]
[191.21734619 108.93984985]
[205.30628967 114.08784485]
[220.40222168 108.65715027]
[233.98413086 117.19596863]
[235.63313293 133.15405273]
[224.08425903 144.28971863]
[208.19682312 142.06065369]
[200.15829468 128.17678833]
[186.06935120 123.02878571]
[171.98042297 117.88079071]
[157.89147949 112.73279572]
[143.80255127 107.58480072]
[129.71360779 102.43679810]
[122.93029785 105.63627625]
[121.68894958 120.58482361]
[109.36367035 112.03523254]
[102.58036041 115.23471069]
[97.59190369 129.38092041]
[92.60344696 143.52713013]
[87.61499023 157.67335510]
[82.62653351 171.81956482]
[77.63807678 185.96577454]
[72.64962006 200.11198425]
[67.66116333 214.25819397]
[62.67270279 228.40440369]
[67.33248901 247.95965576]
[52.28142166 260.01974487]
[47.93729019 274.37692261]
[43.59315872 288.73410034]
[39.24902725 303.09127808]
[34.90489960 317.44845581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 11]
[3 10]
[4 9]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[22 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 102]
[32 101]
[33 100]
[34 99]
[35 98]
[36 97]
[37 96]
[39 95]
[40 94]
[41 92]
[42 91]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[48 85]
[49 60]
[50 59]
[63 83]
[64 82]
[65 81]
[66 80]
[68 78]
[69 77]
[70 76]
[71 75]
[104 120]
[105 119]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
