%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCCAUUGGUCAGGGGCAAAUACCACUAGCUCUGCAUCCUCAGUCACUUUGUGCCAUUUCAUCAGGUCAGAGCCAAAGGAAAGCUUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[113.43582153 256.93240356]
[113.15657806 241.79302979]
[117.81057739 227.38404846]
[126.89300537 215.26843262]
[139.41865540 206.76037598]
[135.45571899 192.29335022]
[124.63085175 182.06243896]
[128.44729614 166.70845032]
[124.48436737 152.24140930]
[120.52143097 137.77436829]
[116.55850220 123.30732727]
[97.20385742 126.76853943]
[81.44689178 117.10944366]
[76.44473267 100.54564667]
[62.11819458 96.10151672]
[47.79165649 91.65737915]
[33.46511841 87.21324921]
[19.06632042 83.00912476]
[4.59928322 79.04619598]
[-9.86775494 75.08326721]
[-19.16086197 87.11267090]
[-32.35251236 94.66573334]
[-47.43107224 96.59067535]
[-62.09717941 92.59394836]
[-74.11434937 83.28502655]
[-81.65005493 70.08345032]
[-83.55516052 55.00236893]
[-79.53913879 40.34153366]
[-70.21441650 28.33662033]
[-57.00294113 20.81828690]
[-41.91936493 18.93302536]
[-27.26382828 22.96832466]
[-15.27118969 32.30883026]
[-7.77024174 45.53018570]
[-5.90482330 60.61622620]
[8.56221390 64.57915497]
[23.02925110 68.54209137]
[30.46152496 67.24665833]
[37.90925217 72.88671112]
[52.23579025 77.33084106]
[66.56232452 81.77497864]
[80.88886261 86.21910858]
[85.84513092 80.27290344]
[92.64255524 76.10881805]
[100.64070892 74.29115295]
[109.02915955 75.15454865]
[116.90947723 78.75404358]
[123.39141083 84.84433746]
[127.69279480 92.89193726]
[140.05941772 84.40273285]
[152.42604065 75.91352081]
[164.79266357 67.42431641]
[177.15928650 58.93511200]
[182.60162354 51.34170151]
[190.08401489 50.37697220]
[202.72740173 42.30573654]
[215.37077332 34.23450089]
[215.31481934 18.80723953]
[223.62762451 5.81104803]
[237.65658569 -0.60703683]
[252.92510986 1.60097349]
[264.56109619 11.73051071]
[268.85153198 26.54927635]
[264.42733765 41.32865524]
[252.70025635 51.35260391]
[237.41238403 53.42251587]
[223.44201660 46.87788773]
[210.79862976 54.94912338]
[198.15524292 63.02035522]
[185.64849854 71.30173492]
[173.28187561 79.79093933]
[160.91525269 88.28014374]
[148.54862976 96.76935577]
[136.18200684 105.25856018]
[131.02554321 119.34439850]
[134.98846436 133.81143188]
[138.95140076 148.27847290]
[142.91433716 162.74551392]
[154.02265930 174.01119995]
[149.92276001 188.33041382]
[153.88569641 202.79745483]
[168.99862671 203.73451233]
[182.98747253 209.53025818]
[194.33485413 219.55601501]
[201.80986023 232.72425842]
[204.60168457 247.60661316]
[202.40747070 262.58874512]
[195.46524048 276.04550171]
[184.52804565 286.51718140]
[170.78224182 292.86791992]
[155.71890259 294.40881348]
[140.97196960 290.97274780]
[128.14108276 282.93240356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 81]
[6 80]
[8 78]
[9 77]
[10 76]
[11 75]
[14 42]
[15 41]
[16 40]
[17 39]
[18 37]
[19 36]
[20 35]
[49 74]
[50 73]
[51 72]
[52 71]
[53 70]
[55 69]
[56 68]
[57 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
