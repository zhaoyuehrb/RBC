%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGGAGGCGGAGAUCGCUGCUUCUCACCUACUUUCUGAACUUGGCCUCCGCAGUCGCGACCUGGCGUGAAGGAGGAGCUGCCGCCCCCGCCCCAGCCUCGGGGACGCCUCUCUGAAGAGAAGCCAUUUGAAGCAGAAUCCAAACC\
) } def
/len { sequence length } bind def

/coor [
[160.38002014 244.33464050]
[151.40837097 232.31343079]
[142.43670654 220.29222107]
[133.46505737 208.27102661]
[124.36545563 196.34637451]
[115.13895416 184.51963806]
[105.91245270 172.69290161]
[96.68595886 160.86616516]
[87.45945740 149.03942871]
[78.23295593 137.21269226]
[63.26377487 136.25163269]
[52.60065460 146.80142212]
[41.93753815 157.35119629]
[31.27441788 167.90097046]
[33.75293350 183.21882629]
[26.72445679 197.05285645]
[12.89157867 204.08357239]
[-2.42667603 201.60754395]
[-13.34012604 190.57685852]
[-15.65232658 175.23301697]
[-8.47419071 161.47605896]
[5.43414307 154.59580994]
[20.72463608 157.23785400]
[31.38775635 146.68807983]
[42.05087662 136.13829041]
[52.71399307 125.58851624]
[38.29839325 129.73464966]
[27.49804688 140.14390564]
[13.72364807 146.08241272]
[-1.25969112 146.78919983]
[-15.53194046 142.17369080]
[-27.26419258 132.82734680]
[-34.95302582 119.94783783]
[-37.61315918 105.18559265]
[-34.90371323 90.43232727]
[-27.17188454 77.57858276]
[-15.40846539 68.27148438]
[-1.12087286 63.70369720]
[13.86002064 64.46055603]
[27.61449814 70.44506073]
[38.38000107 80.89034271]
[44.77763748 94.46032715]
[56.77882767 103.45873260]
[50.56085968 89.80821228]
[44.34289169 76.15768433]
[38.12492371 62.50715637]
[31.61666870 48.99262238]
[24.82109642 35.62025452]
[18.02552605 22.24788857]
[11.22995281 8.87552166]
[-4.03772783 7.95619011]
[-16.71165276 -0.42643541]
[-23.44332695 -13.93757725]
[-22.51449585 -28.90398026]
[-14.27455711 -41.31240463]
[-21.07012939 -54.68477249]
[-27.86570168 -68.05713654]
[-34.66127396 -81.42950439]
[-41.45684433 -94.80187225]
[-56.55820465 -99.46282959]
[-63.86671066 -113.47572327]
[-59.04636002 -128.52696228]
[-44.95697403 -135.68690491]
[-29.95754242 -130.70768738]
[-22.94695854 -116.54339600]
[-28.08447838 -101.59744263]
[-21.28890610 -88.22507477]
[-14.49333382 -74.85271454]
[-7.69776201 -61.48034286]
[-0.90219009 -48.10797882]
[13.97837639 -47.44893646]
[26.61518097 -39.37631989]
[33.56052017 -25.97375679]
[32.86021805 -10.79461479]
[24.60231972 2.07994914]
[31.39789200 15.45231628]
[38.19346619 28.82468414]
[44.98903656 42.19705200]
[49.23651886 44.51852036]
[52.03399277 49.56787491]
[51.77545166 56.28918839]
[57.99341965 69.93971252]
[64.21138763 83.59024048]
[70.42935181 97.24076843]
[88.62921143 75.98719025]
[113.10385132 80.56632233]
[125.02850342 71.46672821]
[136.95315552 62.36713028]
[148.87780762 53.26753235]
[160.80245972 44.16793442]
[159.45745850 28.79931259]
[166.65509033 15.15388775]
[180.09861755 7.58586645]
[195.49827576 8.51017570]
[207.94006348 17.63187027]
[213.45387268 32.04025269]
[210.28025818 47.13766098]
[199.43190002 58.10656357]
[184.37049866 61.44682693]
[169.90205383 56.09258652]
[157.97740173 65.19218445]
[146.05274963 74.29177856]
[134.12809753 83.39138031]
[122.20345306 92.49097443]
[118.64405060 118.92906189]
[90.05969238 127.98619080]
[99.28619385 139.81292725]
[108.51269531 151.63966370]
[117.73918915 163.46640015]
[126.96569061 175.29313660]
[136.19218445 187.11987305]
[143.99569702 192.00598145]
[145.48625183 199.29936218]
[154.45791626 211.32057190]
[163.42956543 223.34178162]
[172.40122986 235.36297607]
[191.16859436 229.60140991]
[210.69544983 231.31291199]
[228.12069702 240.22396851]
[240.89974976 255.00785828]
[247.17604065 273.48211670]
[246.05079651 292.93072510]
[237.71160889 310.50338745]
[248.37472534 321.05316162]
[263.66522217 318.41113281]
[277.57354736 325.29138184]
[284.75170898 339.04833984]
[282.43948364 354.39218140]
[271.52603149 365.42285156]
[256.20779419 367.89889526]
[242.37490845 360.86816406]
[235.34643555 347.03414917]
[237.82495117 331.71627808]
[227.16183472 321.16650391]
[217.85328674 326.73419189]
[207.56661987 330.20056152]
[196.77008057 331.40399170]
[185.95590210 330.28610229]
[175.61788940 326.89425659]
[166.22883606 321.37991333]
[158.21899414 313.99157715]
[151.95625305 305.06372070]
[147.72927856 295.00164795]
[145.73426819 284.26315308]
[146.06571960 273.33749390]
[148.71212769 262.72335815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 116]
[2 115]
[3 114]
[4 113]
[5 111]
[6 110]
[7 109]
[8 108]
[9 107]
[10 106]
[11 26]
[12 25]
[13 24]
[14 23]
[43 84]
[44 83]
[45 82]
[46 81]
[47 78]
[48 77]
[49 76]
[50 75]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
[86 104]
[87 103]
[88 102]
[89 101]
[90 100]
[123 134]
[124 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
