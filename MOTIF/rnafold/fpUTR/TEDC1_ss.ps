%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCAGCCGGAGCGGUAACUGGGCGCAGGUCCCAGCCGCCGCACUAAACCCGGCCCGUGCGGUGAUUGGACGCAGGCCCCGGGCCGCGGCGGAGGCGGGCGAUCCGAAAGAGGCUGGUGCUGGCUGC\
) } def
/len { sequence length } bind def

/coor [
[153.64749146 166.01931763]
[152.52961731 161.57197571]
[141.66590881 151.22886658]
[130.80220032 140.88575745]
[123.71384430 138.52726746]
[119.80274963 130.15301514]
[109.19614410 119.54640961]
[98.58954620 108.93980408]
[94.65068054 108.40400696]
[90.98639679 106.08218384]
[88.41190338 102.14748383]
[87.62899780 97.14098358]
[77.83140564 85.78285217]
[68.03381348 74.42472076]
[58.23622131 63.06658554]
[48.43862915 51.70845413]
[42.17318726 49.11011124]
[38.74982452 44.40762711]
[38.45566559 39.54417801]
[29.22719193 27.71898079]
[19.99871635 15.89378452]
[10.77024364 4.06858826]
[1.54176950 -7.75660801]
[-6.29074955 -12.66339302]
[-7.76381254 -19.98714638]
[-16.69930267 -32.03525925]
[-32.08188248 -34.48759079]
[-40.97211075 -46.83338165]
[-38.53939056 -61.48320770]
[-47.47488022 -73.53131866]
[-64.50673676 -80.40129089]
[-65.94631958 -97.84586334]
[-75.17479706 -109.67105865]
[-84.40326691 -121.49625397]
[-93.63174438 -133.32145691]
[-108.22171783 -139.44053650]
[-109.95226288 -154.23426819]
[-119.18074036 -166.05946350]
[-128.40921021 -177.88465881]
[-137.63768005 -189.70985413]
[-146.86616516 -201.53504944]
[-156.09463501 -213.36024475]
[-165.32310486 -225.18545532]
[-174.55157471 -237.01065063]
[-189.45590210 -233.72065735]
[-204.30972290 -237.23159790]
[-216.16381836 -246.84632874]
[-222.66453552 -260.65588379]
[-222.52116394 -275.91830444]
[-215.76216125 -289.60330200]
[-203.72953796 -298.99365234]
[-188.81237793 -302.22491455]
[-173.97250366 -298.65551758]
[-162.15635681 -288.99417114]
[-155.71006775 -275.15914917]
[-155.91354370 -259.89736938]
[-162.72637939 -246.23912048]
[-153.49790955 -234.41392517]
[-144.26943970 -222.58872986]
[-135.04096985 -210.76353455]
[-125.81249237 -198.93833923]
[-116.58401489 -187.11312866]
[-107.35554504 -175.28793335]
[-98.12706757 -163.46273804]
[-84.19717407 -158.18946838]
[-81.80654907 -142.54992676]
[-72.57807159 -130.72473145]
[-63.34959793 -118.89953613]
[-54.12112427 -107.07434082]
[-42.09545898 -105.25468445]
[-34.31793594 -95.38635254]
[-35.42676544 -82.46681213]
[-26.49127769 -70.41870117]
[-11.76608372 -68.49404907]
[-2.53259683 -56.40283585]
[-4.65118933 -40.97074890]
[4.28430033 -28.92263603]
[13.36696625 -16.98508263]
[22.59543991 -5.15988588]
[31.82391357 6.66531086]
[41.05238724 18.49050713]
[50.28086090 30.31570435]
[59.79676056 41.91086197]
[69.59435272 53.26899338]
[79.39194489 64.62712860]
[89.18953705 75.98526001]
[98.98712921 87.34339142]
[109.19614410 98.33320618]
[119.80274963 108.93980408]
[130.40934753 119.54640961]
[141.14530945 130.02204895]
[152.00901794 140.36515808]
[162.87272644 150.70826721]
[174.23085022 160.50585938]
[186.05606079 169.73432922]
[197.88125610 178.96281433]
[213.52079773 181.35343933]
[218.79406738 195.28332520]
[230.61926270 204.51181030]
[242.44445801 213.74028015]
[254.26965332 222.96875000]
[272.87695312 219.87934875]
[287.64868164 231.09239197]
[289.60763550 249.21588135]
[301.87139893 257.85299683]
[317.39819336 254.90446472]
[330.41503906 263.86758423]
[333.19924927 279.42471313]
[324.09899902 292.34603882]
[308.51333618 294.96563721]
[295.68893433 285.72927856]
[293.23428345 270.11679077]
[280.97048950 261.47964478]
[270.29937744 265.85128784]
[258.72955322 264.46649170]
[249.19631958 257.55856323]
[244.17553711 246.77676392]
[245.04118347 234.79394531]
[233.21598816 225.56547546]
[221.39079285 216.33700562]
[209.56559753 207.10852051]
[194.77186584 205.37797546]
[188.65277100 190.78800964]
[176.82757568 181.55952454]
[165.00238037 172.33105469]
[162.11167908 172.61022949]
[158.93217468 171.69918823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[6 90]
[7 89]
[8 88]
[12 87]
[13 86]
[14 85]
[15 84]
[16 83]
[19 82]
[20 81]
[21 80]
[22 79]
[23 78]
[25 77]
[26 76]
[29 73]
[30 72]
[32 69]
[33 68]
[34 67]
[35 66]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[94 125]
[95 124]
[96 123]
[98 121]
[99 120]
[100 119]
[101 118]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
