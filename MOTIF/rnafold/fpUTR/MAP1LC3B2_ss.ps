%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:50:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAAGGCUCGCAGCCACCUCUCGGGAGUGCAGGGCCAGAUCCUGUGCCAGCGGCCUUACACGGCCACAGUCGGAUUCGCUGCCGCAGCAGCCGCCACCCCCAGGAGCCGCCGGGACCCUCGCGUCGUCGCCGCCGCGGCCCAGAUCCCCACACC\
) } def
/len { sequence length } bind def

/coor [
[-28.33978653 371.95480347]
[-41.07952499 364.03652954]
[-49.66853714 351.73901367]
[-52.71706390 337.05206299]
[-49.73082352 322.34973145]
[-60.80992889 332.46179199]
[-71.88903809 342.57382202]
[-82.96814728 352.68585205]
[-94.04725647 362.79791260]
[-105.02331543 373.02169800]
[-115.89521027 383.35620117]
[-119.99140930 391.58798218]
[-127.09373474 393.78723145]
[-138.17283630 403.89926147]
[-139.05143738 419.45129395]
[-150.43127441 429.54852295]
[-165.25234985 428.61508179]
[-176.33146667 438.72711182]
[-180.77516174 454.51272583]
[-196.73233032 458.29440308]
[-207.78758240 446.18185425]
[-202.56823730 430.63546753]
[-186.44349670 427.64801025]
[-175.36439514 417.53594971]
[-174.94404602 402.69146729]
[-163.85229492 392.27859497]
[-148.28488159 392.82015991]
[-137.20578003 382.70809937]
[-126.22971344 372.48431396]
[-115.35781860 362.14981079]
[-112.66071320 355.22122192]
[-104.15929413 351.71881104]
[-93.08018494 341.60675049]
[-82.00107574 331.49472046]
[-70.92197418 321.38269043]
[-59.84286499 311.27062988]
[-57.20032501 301.98925781]
[-47.55753326 296.95993042]
[-39.23978424 284.47735596]
[-30.92203712 271.99475098]
[-22.60429001 259.51217651]
[-21.50591660 252.15872192]
[-13.98933220 246.86323547]
[-5.42030859 234.55177307]
[-4.50011587 219.68562317]
[9.73397732 212.77902222]
[18.30299950 200.46757507]
[26.87202263 188.15611267]
[28.11920357 180.82644653]
[35.74156570 175.68438721]
[44.55834579 163.54913330]
[53.37512589 151.41387939]
[62.19190216 139.27861023]
[71.00868225 127.14336395]
[62.44695663 119.90332794]
[55.82558060 109.98202515]
[51.96928787 97.93865204]
[51.53207397 84.58024597]
[54.92463303 70.90769958]
[62.25908279 58.04111862]
[73.31674194 47.13002777]
[66.84764099 33.59670639]
[60.37854385 20.06338692]
[53.90944672 6.53006554]
[40.08790588 -2.29586458]
[41.09082413 -18.66431618]
[55.88648605 -25.73682785]
[69.25437927 -16.23780823]
[67.44276428 0.06096789]
[73.91186523 13.59428883]
[80.38095856 27.12760925]
[86.85005951 40.66093063]
[94.32542419 40.05354691]
[88.55025482 26.20986938]
[99.93186951 16.43956566]
[112.74099731 24.24509430]
[109.27615356 38.83877563]
[116.75151825 38.23139191]
[120.95098114 23.83123589]
[125.15044403 9.43107986]
[129.34989929 -4.96907759]
[133.54936218 -19.36923409]
[129.13029480 -35.16175842]
[140.78933716 -46.69425201]
[156.53269958 -42.10308075]
[160.16493225 -26.11124229]
[147.94952393 -15.16977215]
[143.75006104 -0.76961529]
[139.55059814 13.63054180]
[135.35113525 28.03069878]
[131.15167236 42.43085480]
[136.31892395 47.86680222]
[146.90811157 37.24280548]
[157.49728394 26.61880684]
[162.33543396 12.42048645]
[176.98738098 9.20797348]
[187.32223511 20.07954216]
[183.37263489 34.55022812]
[168.94682312 38.66371155]
[157.80012512 48.70120239]
[146.65342712 58.73869324]
[151.82067871 64.17463684]
[166.41505432 60.70992279]
[181.00942993 57.24520493]
[189.32505798 44.07371902]
[204.17518616 40.76790619]
[216.68093872 48.77676010]
[231.27531433 45.31204605]
[242.82144165 33.66648865]
[258.60879517 38.10403824]
[262.39666748 54.05972672]
[250.28846741 65.11970520]
[234.74003601 59.90641785]
[220.14566040 63.37113571]
[212.57406616 76.14636993]
[197.82264709 79.86798096]
[184.47415161 71.83957672]
[169.87977600 75.30429840]
[155.28540039 78.76901245]
[149.26432800 95.51240540]
[139.03720093 107.30446625]
[152.99501038 112.79805756]
[166.95281982 118.29164886]
[183.08219910 115.32933807]
[193.50483704 127.99031830]
[187.49882507 143.25006104]
[171.24263000 145.41065979]
[161.45924377 132.24945068]
[147.50141907 126.75586700]
[133.54360962 121.26227570]
[111.11869812 138.12654114]
[83.14393616 135.96014404]
[74.32715607 148.09539795]
[65.51038361 160.23065186]
[56.69359970 172.36590576]
[47.87682343 184.50115967]
[39.18347549 196.72514343]
[30.61445236 209.03659058]
[22.04542923 221.34805298]
[20.51232147 237.09480286]
[6.89114285 243.12080383]
[-1.67788041 255.43225098]
[-10.12169933 267.82992554]
[-18.43944740 280.31250000]
[-26.75719452 292.79510498]
[-35.07494354 305.27767944]
[-20.99691582 300.09991455]
[-6.01764536 300.88824463]
[7.43913603 307.51507568]
[17.19604111 318.90820312]
[21.67434502 333.22409058]
[20.14943314 348.14636230]
[12.86804295 361.26052856]
[1.00834870 370.44464111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 36]
[6 35]
[7 34]
[8 33]
[9 32]
[10 30]
[11 29]
[13 28]
[14 27]
[17 24]
[18 23]
[38 146]
[39 145]
[40 144]
[41 143]
[43 142]
[44 141]
[46 139]
[47 138]
[48 137]
[50 136]
[51 135]
[52 134]
[53 133]
[54 132]
[61 72]
[62 71]
[63 70]
[64 69]
[78 91]
[79 90]
[80 89]
[81 88]
[82 87]
[102 119]
[103 118]
[104 117]
[107 114]
[108 113]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
