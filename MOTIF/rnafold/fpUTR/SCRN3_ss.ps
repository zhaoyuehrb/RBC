%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCAAAGGUGACAGCUUCCGGCAACUGAUGCCUCCACUGGCCACUCCUCCCUCCGUCCACCUGUCACUUCGGGUAGCUGGGAGGCCAGUUAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[218.54777527 269.38250732]
[233.48583984 270.75015259]
[223.84402466 259.25949097]
[214.20220947 247.76882935]
[199.38812256 246.73056030]
[189.44625854 235.21473694]
[190.63572693 219.68339539]
[180.99392700 208.19271851]
[171.35211182 196.70205688]
[161.71029663 185.21139526]
[152.06848145 173.72071838]
[142.42666626 162.23005676]
[132.78485107 150.73939514]
[123.14303589 139.24871826]
[113.50122070 127.75805664]
[97.80720520 130.78935242]
[82.70117950 125.56449890]
[72.23383331 113.48453522]
[69.21196747 97.78869629]
[74.44590759 82.68582153]
[64.44436646 71.50685120]
[54.44283295 60.32788467]
[38.93772125 64.96463013]
[23.01260567 62.42865753]
[9.80962944 53.27109146]
[1.91180766 39.34450531]
[0.83774716 23.42833900]
[6.74988985 8.67423058]
[-3.60129523 -2.18178010]
[-23.10261154 -6.77449322]
[-27.26302910 -25.54523659]
[-38.28190613 -35.72287750]
[-49.30078125 -45.90052032]
[-65.08071136 -45.02342606]
[-76.80313873 -55.62343979]
[-77.51335144 -71.41176605]
[-66.78998566 -83.02146149]
[-50.99504089 -83.56471252]
[-39.49936295 -72.71920776]
[-39.12313843 -56.91939545]
[-28.10426521 -46.74175262]
[-17.08538818 -36.56411362]
[-6.72632408 -37.88342667]
[2.80213618 -33.09355545]
[8.14093590 -23.60599518]
[7.25471544 -12.53296566]
[17.60589981 -1.67695475]
[30.67480087 -6.60909986]
[44.67951202 -6.15202713]
[57.47831726 -0.34222308]
[67.10111237 9.96269131]
[72.05265045 23.21040154]
[71.54479218 37.38768387]
[65.62180328 50.32635117]
[75.62333679 61.50531769]
[85.62487030 72.68428040]
[98.84718323 69.15419769]
[112.29611206 71.68748474]
[123.32798004 79.78619385]
[129.77424622 91.85833740]
[130.36778259 105.53089905]
[124.99188995 118.11624146]
[134.63369751 129.60690308]
[144.27551270 141.09757996]
[153.91732788 152.58824158]
[163.55914307 164.07890320]
[173.20095825 175.56958008]
[182.84277344 187.06024170]
[192.48458862 198.55090332]
[202.12640381 210.04158020]
[217.62834167 211.56715393]
[227.24282837 223.35768127]
[225.69288635 238.12701416]
[235.33470154 249.61769104]
[244.97651672 261.10833740]
[256.15548706 271.10989380]
[268.64401245 279.41870117]
[281.13256836 287.72747803]
[293.62112427 296.03628540]
[306.10968018 304.34509277]
[318.59820557 312.65390015]
[334.98974609 313.15341187]
[342.51351929 327.72479248]
[333.42968750 341.37823486]
[317.08294678 340.06823730]
[310.28942871 325.14242554]
[297.80087280 316.83364868]
[285.31231689 308.52484131]
[272.82376099 300.21603394]
[260.33523560 291.90722656]
[247.84667969 283.59841919]
[250.86166382 298.29229736]
[245.66397095 312.36297607]
[233.82067871 321.56823730]
[218.90248108 323.13269043]
[205.40715027 316.58471680]
[197.40345764 303.89846802]
[197.30445862 288.89880371]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 75]
[3 74]
[4 73]
[7 70]
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[20 56]
[21 55]
[22 54]
[28 47]
[29 46]
[31 42]
[32 41]
[33 40]
[76 91]
[77 90]
[78 89]
[79 88]
[80 87]
[81 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
