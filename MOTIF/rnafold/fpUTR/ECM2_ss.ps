%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:13:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGCAGUUAUUUUAGAUUUUACUAAGAAGUUCAGCAAAUACUUUUCAACAUUCCCUUCUGUCCUUUCUUUGUUUUUAAAGAAAGCUCUGAUUUUGUUUCAUUUUCAGCUGGAGACUUAAAUGACACCAAGCAAAGCCUACUUAGUUUAGAUCUCCAGAAAUUGGCUGGUGGAAAAAAAUCAAAC\
) } def
/len { sequence length } bind def

/coor [
[72.00476837 124.58842468]
[58.97281647 132.01594543]
[45.94086075 139.44348145]
[32.90890503 146.87100220]
[19.87694740 154.29852295]
[6.84499168 161.72604370]
[-1.31329131 175.28160095]
[-16.20197296 174.86160278]
[-29.23392868 182.28912354]
[-42.26588440 189.71664429]
[-39.87113190 206.68362427]
[-45.53175735 223.38356018]
[-58.45898819 236.09704590]
[-76.19925690 241.78410339]
[-95.09314728 238.80215454]
[-104.96762085 250.09352112]
[-114.84209442 261.38488770]
[-124.71656799 272.67623901]
[-123.41101074 288.42651367]
[-133.68858337 300.43261719]
[-149.45178223 301.57159424]
[-161.34857178 291.16766357]
[-162.32081604 275.39328003]
[-151.79167175 263.60714722]
[-136.00791931 262.80175781]
[-126.13345337 251.51040649]
[-116.25897980 240.21903992]
[-106.38450623 228.92768860]
[-114.56109619 216.35217285]
[-128.88763428 220.79631042]
[-143.21417236 225.24044800]
[-157.54071045 229.68457031]
[-171.86724854 234.12870789]
[-175.88908386 249.02261353]
[-187.34005737 259.36083984]
[-202.56619263 261.84448242]
[-216.70887756 255.68106079]
[-225.25523376 242.83726501]
[-225.47816467 227.41151428]
[-217.30653381 214.32611084]
[-203.34785461 207.75654602]
[-188.05632019 209.79917908]
[-176.31138611 219.80216980]
[-161.98484802 215.35803223]
[-147.65830994 210.91390991]
[-133.33177185 206.46977234]
[-119.00522614 202.02563477]
[-115.17787170 185.65612793]
[-105.38125610 172.44541931]
[-91.45867157 164.39483643]
[-75.84542847 162.57934570]
[-61.14463806 167.01124573]
[-49.69340897 176.68469238]
[-36.66145325 169.25717163]
[-23.62949944 161.82965088]
[-16.40334892 148.80535889]
[-0.58253336 148.69409180]
[12.44942284 141.26657104]
[25.48137856 133.83905029]
[38.51333237 126.41152191]
[51.54528809 118.98399353]
[64.57724762 111.55647278]
[62.77064896 101.51622772]
[63.75480652 91.36233521]
[67.45594025 81.85592651]
[73.59661102 73.70960999]
[65.31523132 61.20286179]
[57.03385544 48.69611359]
[48.75247955 36.18936157]
[40.47109985 23.68261337]
[32.18972397 11.17586327]
[23.90834618 -1.33088636]
[15.62696934 -13.83763599]
[7.34559250 -26.34438705]
[-7.56527615 -33.17066193]
[-8.83939457 -49.52023697]
[4.83394146 -58.57407379]
[19.38877487 -51.01835632]
[19.85234261 -34.62576294]
[28.13371849 -22.11901283]
[36.41509628 -9.61226368]
[44.69647217 2.89448643]
[52.97785187 15.40123653]
[61.25922775 27.90798569]
[69.54060364 40.41473770]
[77.82198334 52.92148590]
[86.10335541 65.42823792]
[100.97380066 62.75251389]
[115.68412018 66.20159912]
[127.81540680 75.20833588]
[135.37286377 88.29170990]
[150.27035522 86.54109192]
[165.16784668 84.79048157]
[180.06535339 83.03986359]
[194.96284485 81.28925323]
[209.86033630 79.53863525]
[224.75782776 77.78802490]
[237.56069946 68.49301147]
[251.10398865 74.69207001]
[266.00149536 72.94145203]
[280.89898682 71.19083405]
[295.79647827 69.44022369]
[310.69396973 67.68960571]
[325.59146118 65.93899536]
[340.48895264 64.18837738]
[354.98071289 52.84236145]
[370.81781006 60.38268661]
[385.68395996 58.38338470]
[400.55014038 56.38407898]
[415.41629028 54.38477707]
[430.22766113 52.01350403]
[444.97497559 49.27175522]
[459.72225952 46.53001022]
[474.46957397 43.78826141]
[489.21685791 41.04651260]
[503.96417236 38.30476379]
[518.71148682 35.56301880]
[530.86492920 25.43362617]
[544.79199219 30.71424675]
[559.53930664 27.97249794]
[574.28662109 25.23075104]
[589.03387451 22.48900223]
[603.78118896 19.74725533]
[618.52850342 17.00550652]
[620.56146240 2.81193161]
[626.87176514 -10.03938007]
[636.82958984 -20.29618835]
[649.45074463 -26.96363831]
[663.49340820 -29.40074539]
[677.58062744 -27.38199615]
[690.33520508 -21.11815071]
[700.51428223 -11.23431587]
[707.13073730 1.29240322]
[721.92181396 -1.20253706]
[736.53460693 -9.79916573]
[748.84051514 1.86279023]
[741.04089355 16.91612053]
[724.41674805 13.58851719]
[709.62567139 16.08345795]
[706.97546387 31.59405136]
[699.16412354 45.28454590]
[687.11895752 55.49267960]
[672.28253174 60.97179031]
[656.44000244 61.04304886]
[641.50445557 55.67948914]
[629.28540039 45.51150894]
[621.27026367 31.75280571]
[606.52294922 34.49455261]
[591.77563477 37.23630142]
[577.02838135 39.97805023]
[562.28106689 42.71979904]
[547.53375244 45.46154404]
[536.43511963 55.39482880]
[521.45318604 50.31031418]
[506.70590210 53.05206299]
[491.95861816 55.79381180]
[477.21130371 58.53556061]
[462.46401978 61.27730560]
[447.71670532 64.01905823]
[432.96942139 66.76080322]
[430.67758179 69.46498108]
[426.95358276 71.18421936]
[422.27899170 71.25372314]
[417.41558838 69.25093842]
[402.54943848 71.25024414]
[387.68325806 73.24954987]
[372.81710815 75.24884796]
[365.22256470 84.68025970]
[352.83938599 86.45761871]
[342.23956299 79.08587646]
[327.34207153 80.83648682]
[312.44458008 82.58710480]
[297.54708862 84.33771515]
[282.64959717 86.08833313]
[267.75210571 87.83894348]
[252.85461426 89.58956146]
[241.11730957 98.75935364]
[226.50843811 92.68551636]
[211.61094666 94.43612671]
[196.71345520 96.18674469]
[181.81596375 97.93735504]
[166.91847229 99.68797302]
[152.02096558 101.43859100]
[137.12347412 103.18920135]
[131.71183777 119.56228638]
[119.50785828 131.74534607]
[103.12550354 137.12889099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[8 55]
[9 54]
[10 53]
[15 28]
[16 27]
[17 26]
[18 25]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[66 87]
[67 86]
[68 85]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[91 184]
[92 183]
[93 182]
[94 181]
[95 180]
[96 179]
[97 178]
[99 176]
[100 175]
[101 174]
[102 173]
[103 172]
[104 171]
[105 170]
[107 167]
[108 166]
[109 165]
[110 164]
[111 160]
[112 159]
[113 158]
[114 157]
[115 156]
[116 155]
[117 154]
[119 152]
[120 151]
[121 150]
[122 149]
[123 148]
[124 147]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
