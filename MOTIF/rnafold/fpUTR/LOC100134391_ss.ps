%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAUGGUGCUCUGCAUCACUGGAGGAAGCAAGUGUGAAACCUCAGUCCACCCCAUCACUCAAUCAGGAGAAUUCCCAUUGGACAGCUGGCUUGC\
) } def
/len { sequence length } bind def

/coor [
[102.35614014 152.85566711]
[91.95194244 163.66087341]
[77.39223480 160.05326843]
[73.23656464 145.64041138]
[83.64109802 134.83485413]
[76.36127472 133.03092957]
[65.17086792 143.01965332]
[53.98045349 153.00837708]
[42.79004288 162.99710083]
[31.59963036 172.98583984]
[20.40921974 182.97456360]
[12.61914158 198.03282166]
[-4.00713873 194.71571350]
[-5.42228603 177.82093811]
[10.42049026 171.78414917]
[21.61090279 161.79542542]
[32.80131149 151.80670166]
[43.99172592 141.81796265]
[55.18213654 131.82923889]
[66.37255096 121.84051514]
[64.63197327 112.14466095]
[65.43421173 102.96318817]
[68.41716003 94.91189575]
[73.08146667 88.46071625]
[61.26795959 79.21728516]
[49.45444489 69.97386169]
[37.64093399 60.73043442]
[22.79428673 64.83935547]
[8.54157066 59.48085403]
[0.27485365 46.90606308]
[0.98928839 32.05252457]
[-10.82422352 22.80909920]
[-27.12897682 21.05210495]
[-33.51137543 5.94591331]
[-23.40575409 -6.96952152]
[-7.20791006 -4.40790749]
[-1.58079636 10.99558640]
[10.23271561 20.23901367]
[24.47835732 15.97290611]
[38.67234421 20.97238541]
[47.30166245 33.51782990]
[46.88436127 48.91692352]
[58.69787216 58.16035080]
[70.51138306 67.40377808]
[82.32489777 76.64720154]
[103.31282806 70.90038300]
[122.47194672 81.21772766]
[136.06085205 74.86622620]
[149.64976501 68.51471710]
[163.23867798 62.16321945]
[176.82757568 55.81171799]
[174.81210327 40.21200943]
[177.68257141 24.76641464]
[185.14973450 10.96637058]
[196.48107910 0.14071517]
[210.57267761 -6.67227268]
[226.05665588 -8.82444763]
[241.43408203 -6.11943817]
[255.21998596 1.16949511]
[266.08682251 12.32701778]
[279.46292114 5.53881168]
[292.83901978 -1.24939358]
[297.50830078 -16.34818268]
[311.52520752 -23.64897156]
[326.57379150 -18.82032776]
[333.72598267 -4.72700310]
[328.73849487 10.26968479]
[314.57034302 17.27246475]
[299.62722778 12.12671471]
[286.25112915 18.91492081]
[272.87500000 25.70312500]
[275.43435669 39.82155991]
[273.88369751 54.10215759]
[268.34130859 67.37175751]
[259.25378418 78.53765869]
[247.35993958 86.67761230]
[233.63096619 91.11597443]
[219.19097900 91.47980499]
[205.22497559 87.73016357]
[192.88171387 80.16605377]
[183.17907715 69.40062714]
[169.59017944 75.75212860]
[156.00126648 82.10363007]
[142.41235352 88.45513153]
[128.82345581 94.80663300]
[131.36180115 114.83278656]
[119.53866577 135.01506042]
[124.77027893 149.07315063]
[139.24400330 155.42033386]
[144.91242981 170.17312622]
[138.41258240 184.57893372]
[123.60069275 190.09106445]
[109.26440430 183.43927002]
[103.90917969 168.56993103]
[110.71218109 154.30477905]
[105.48056793 140.24667358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[24 45]
[25 44]
[26 43]
[27 42]
[31 38]
[32 37]
[47 85]
[48 84]
[49 83]
[50 82]
[51 81]
[60 71]
[61 70]
[62 69]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
