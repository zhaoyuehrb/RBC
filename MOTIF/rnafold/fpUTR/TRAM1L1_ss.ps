%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCAUGCUCAGCUCAGCUCGGCCCUCGCCUUUGAUUUAUUUUUUUUCUGGGCGGCCGCUGCGACCCGGGACUGACUUCGGGAUGGGAAGUGGAGCCCCCGGAGCUGCUACCGUGGCGGCGGCGCUGUGAGGAGCAGCCAGGGGGAGGCAGCUGCGGCUCGCCGGUGAGUAUCCGGGAAGCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[177.65806580 499.01470947]
[176.65617371 484.04821777]
[175.65428162 469.08169556]
[174.65238953 454.11520386]
[164.98001099 445.84149170]
[158.59204102 435.39886475]
[155.86186218 423.96520996]
[156.76988220 412.73284912]
[160.93185425 402.78500366]
[167.66355896 394.99160767]
[176.07322693 389.93356323]
[171.62908936 375.60702515]
[167.18495178 361.28048706]
[162.74082947 346.95394897]
[158.17713928 332.66503906]
[153.49423218 318.41476440]
[148.81132507 304.16448975]
[144.12841797 289.91421509]
[139.44551086 275.66394043]
[135.64524841 272.74157715]
[133.65200806 267.39282227]
[134.85285950 260.85861206]
[130.64874268 246.45982361]
[126.44461823 232.06101990]
[121.54213715 226.51039124]
[122.29271698 217.38641357]
[118.32978058 202.91937256]
[113.52073669 197.28759766]
[114.42366791 188.17742920]
[110.70302582 173.64619446]
[106.98239136 159.11495972]
[103.26175690 144.58372498]
[99.54112244 130.05249023]
[95.82048035 115.52124786]
[96.13784790 130.51788330]
[90.30141449 144.33584595]
[79.32953644 154.56414795]
[65.13661957 159.41812134]
[50.19906235 158.05082703]
[37.12321091 150.70086670]
[28.19055939 138.65065002]
[24.95969772 124.00273132]
[27.99435616 109.31290436]
[36.76503754 97.14429474]
[49.74141693 89.62009430]
[64.65934753 88.05314636]
[78.91506958 92.71636200]
[70.01737213 80.64031219]
[61.11967468 68.56426239]
[52.22198105 56.48820877]
[43.32428360 44.41215897]
[34.42658615 32.33610535]
[26.80092430 27.27056885]
[25.48310661 19.98310471]
[16.78844070 7.76006079]
[8.09377575 -4.46298265]
[-4.48368359 -7.37950039]
[-11.47195435 -17.75574303]
[-9.57142544 -29.71468925]
[-18.06063271 -42.08131027]
[-26.54983902 -54.44793701]
[-35.03904343 -66.81455994]
[-50.32172775 -69.82743073]
[-58.75482178 -82.48987579]
[-55.78833008 -97.04100800]
[-64.27753448 -109.40763092]
[-72.76673889 -121.77425385]
[-81.25595093 -134.14088440]
[-94.70516205 -135.06518555]
[-105.01192474 -143.44935608]
[-108.54937744 -156.05387878]
[-104.24010468 -168.20942688]
[-112.52147675 -180.71617126]
[-120.80285645 -193.22293091]
[-135.71372986 -200.04919434]
[-136.98783875 -216.39877319]
[-123.31450653 -225.45260620]
[-108.75967407 -217.89689636]
[-108.29610443 -201.50430298]
[-100.01473236 -188.99754333]
[-91.73335266 -176.49079895]
[-75.13237762 -173.85546875]
[-65.37385559 -159.75691223]
[-68.88932800 -142.63008118]
[-60.40011978 -130.26345825]
[-51.91091156 -117.89684296]
[-43.42170715 -105.53021240]
[-28.77668762 -103.06870270]
[-19.99125862 -90.64811707]
[-22.67242050 -75.30376434]
[-14.18321514 -62.93714142]
[-5.69400835 -50.57051849]
[2.79519796 -38.20389557]
[19.01077461 -31.51622200]
[20.31682014 -13.15764809]
[29.01148415 -0.93460435]
[37.70615005 11.28843975]
[46.50263596 23.43840981]
[55.40033340 35.51446152]
[64.29802704 47.59051132]
[73.19572449 59.66656494]
[82.09342194 71.74261475]
[90.99111938 83.81866455]
[105.85728455 85.81797028]
[117.62927246 76.52172089]
[129.40126038 67.22547150]
[141.17324829 57.92922211]
[152.94525146 48.63297653]
[164.71723938 39.33672714]
[169.52513123 31.54605865]
[176.76449585 29.98546600]
[188.69018555 20.88722229]
[188.93937683 7.40858936]
[196.79652405 -3.30536199]
[209.20794678 -7.46999693]
[221.56416321 -3.77525806]
[233.64021301 -12.67295456]
[245.71626282 -21.57065010]
[257.79232788 -30.46834564]
[269.86837769 -39.36604309]
[279.03341675 -53.62922287]
[295.27630615 -48.77079010]
[295.10424805 -31.81771660]
[278.76605225 -27.28999138]
[266.69000244 -18.39229584]
[254.61396790 -9.49459934]
[242.53791809 -0.59690332]
[230.46186829 8.30079269]
[228.66172791 25.01296806]
[215.06988525 35.46572495]
[197.78842163 32.81290817]
[185.86273193 41.91115189]
[174.01348877 51.10871887]
[162.24148560 60.40496826]
[150.46949768 69.70121765]
[138.69750977 78.99745941]
[126.92552185 88.29370880]
[115.15352631 97.58995819]
[110.35172272 111.80061340]
[114.07235718 126.33184814]
[117.79299164 140.86308289]
[121.51363373 155.39431763]
[125.23426819 169.92556763]
[128.95489502 184.45680237]
[132.79681396 198.95645142]
[136.75975037 213.42347717]
[140.84341431 227.85690308]
[145.04753113 242.25570679]
[149.25166321 256.65451050]
[153.69578552 270.98104858]
[158.37869263 285.23132324]
[163.06159973 299.48159790]
[167.74450684 313.73187256]
[172.42741394 327.98214722]
[178.09051514 335.17517090]
[177.06736755 342.50982666]
[181.51148987 356.83636475]
[185.95562744 371.16290283]
[190.39976501 385.48944092]
[212.41639709 388.41781616]
[228.96313477 406.74285889]
[229.86662292 433.90267944]
[238.76432800 445.97872925]
[247.66201782 458.05477905]
[256.55972290 470.13082886]
[272.17651367 470.93673706]
[283.58636475 481.63015747]
[285.40191650 497.16198730]
[276.76586914 510.19857788]
[261.75592041 514.58447266]
[247.45933533 508.24871826]
[240.62649536 494.18295288]
[244.48365784 479.02853394]
[235.58596802 466.95248413]
[226.68827820 454.87643433]
[217.79057312 442.80038452]
[210.74765015 445.37860107]
[208.17039490 460.15554810]
[196.66181946 450.53506470]
[189.61889648 453.11331177]
[190.62078857 468.07980347]
[191.62268066 483.04632568]
[192.62455750 498.01281738]
[203.70593262 509.61380005]
[201.40237427 525.49060059]
[187.48095703 533.46392822]
[172.62101746 527.41729736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 183]
[2 182]
[3 181]
[4 180]
[11 159]
[12 158]
[13 157]
[14 156]
[15 154]
[16 153]
[17 152]
[18 151]
[19 150]
[22 149]
[23 148]
[24 147]
[26 146]
[27 145]
[29 144]
[30 143]
[31 142]
[32 141]
[33 140]
[34 139]
[47 103]
[48 102]
[49 101]
[50 100]
[51 99]
[52 98]
[54 97]
[55 96]
[56 95]
[59 93]
[60 92]
[61 91]
[62 90]
[65 87]
[66 86]
[67 85]
[68 84]
[72 81]
[73 80]
[74 79]
[104 138]
[105 137]
[106 136]
[107 135]
[108 134]
[109 133]
[111 132]
[112 131]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
[162 176]
[163 175]
[164 174]
[165 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
