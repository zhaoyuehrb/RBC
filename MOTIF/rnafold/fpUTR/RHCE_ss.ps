%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:45:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUUGCAGCCUGAGAUAAGGCCUUUGGCGGGUGUCUCCCCUAUCGCUCCCUCAAGCCCUCAAGUAGGUGUUGGAGAGAGGGGUGAUGCCUGGUGCUGGUGGAACCCCUGCACAGAGACGGACACAGG\
) } def
/len { sequence length } bind def

/coor [
[95.56823730 116.18515015]
[85.55845642 127.35672760]
[75.54867554 138.52832031]
[80.59918976 151.63281250]
[79.49349976 165.56668091]
[72.50610352 177.59585571]
[61.05997467 185.38485718]
[47.43708038 187.45022583]
[34.32355499 183.44274902]
[24.04470062 194.36726379]
[13.76584816 205.29179382]
[3.48699450 216.21630859]
[4.21848726 232.00366211]
[-6.48921156 243.62780762]
[-22.28341484 244.19233704]
[-33.79370117 233.36235046]
[-34.19122314 217.56304932]
[-23.24013519 206.16790771]
[-7.43752718 205.93745422]
[2.84132624 195.01293945]
[13.12018013 184.08840942]
[23.39903259 173.16389465]
[18.36523247 157.85916138]
[21.72678566 142.00683594]
[32.66443634 129.92359924]
[48.28295517 124.94805908]
[64.37709045 128.51852417]
[74.38687134 117.34694672]
[84.39665222 106.17536926]
[88.36708069 91.71038055]
[85.46311951 76.99416351]
[82.55916595 62.27795029]
[79.65520477 47.56173325]
[76.75124359 32.84552002]
[73.84729004 18.12930107]
[70.94332886 3.41308546]
[60.68073273 -8.62808228]
[65.80768585 -22.61248779]
[62.90372849 -37.32870483]
[59.99977112 -52.04492188]
[57.09580994 -66.76113892]
[54.19185257 -81.47735596]
[43.10852432 -86.10744476]
[35.75012970 -95.44825745]
[33.88195419 -107.06956482]
[37.85984802 -118.01937866]
[46.56958008 -125.57376099]
[44.38555908 -140.41390991]
[42.20154190 -155.25405884]
[40.01752472 -170.09420776]
[37.03260040 -173.56895447]
[35.52846146 -177.43412781]
[35.43929291 -181.15434265]
[36.52527618 -184.27555847]
[38.41656876 -186.47680664]
[37.68625641 -201.45901489]
[36.95594025 -216.44122314]
[36.04325104 -231.41343689]
[34.94832230 -246.37341309]
[33.85339355 -261.33340454]
[22.70009804 -272.86523438]
[24.90490723 -288.75607300]
[38.77647781 -296.81579590]
[53.67372894 -290.86169434]
[58.16876221 -275.46121216]
[48.81337738 -262.42831421]
[49.90830612 -247.46833801]
[51.00323486 -232.50836182]
[54.66696548 -225.99984741]
[51.93815231 -217.17153931]
[52.66846466 -202.18933105]
[53.39878082 -187.20710754]
[54.85767746 -172.27822876]
[57.04169464 -157.43807983]
[59.22571182 -142.59793091]
[61.40972900 -127.75777435]
[76.70653534 -117.84000397]
[80.05671692 -99.59795380]
[68.90806580 -84.38130951]
[71.81202698 -69.66509247]
[74.71598816 -54.94887924]
[77.61994171 -40.23266220]
[80.52390289 -25.51644707]
[90.57878876 -14.52788162]
[85.65954590 0.50912672]
[88.56350708 15.22534275]
[91.46746063 29.94155884]
[94.37142181 44.65777588]
[97.27538300 59.37399292]
[100.17933655 74.09020996]
[103.08329773 88.80642700]
[112.42016602 88.57496643]
[121.76177979 95.91918182]
[136.07209778 100.41525269]
[150.38243103 104.91132355]
[164.69274902 109.40738678]
[180.17758179 106.16226959]
[190.00050354 117.35866547]
[204.31082153 121.85473633]
[217.39265442 113.28735352]
[232.91471863 115.18451691]
[243.54800415 126.65044403]
[244.27177429 142.27127075]
[234.74430847 154.67131042]
[219.46415710 157.99566650]
[205.64617920 150.67466736]
[199.81475830 136.16505432]
[185.50444031 131.66899109]
[171.04318237 135.23570251]
[160.19668579 123.71771240]
[145.88635254 119.22164154]
[131.57603455 114.72557831]
[117.26570892 110.22950745]
[127.66867065 121.03591156]
[141.68293762 126.38383484]
[152.93034363 136.30834961]
[159.98115540 149.54791260]
[161.93913269 164.41957092]
[158.55538940 179.03292847]
[150.26002502 191.53041077]
[138.10752869 200.32339478]
[123.64263916 204.29417419]
[108.70407104 202.93801880]
[95.19073486 196.42727661]
[84.82036591 185.58958435]
[78.91119385 171.80258179]
[78.21436310 156.81877136]
[82.81845093 142.54283142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[9 22]
[10 21]
[11 20]
[12 19]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
[38 83]
[39 82]
[40 81]
[41 80]
[42 79]
[47 76]
[48 75]
[49 74]
[50 73]
[55 72]
[56 71]
[57 70]
[58 68]
[59 67]
[60 66]
[93 113]
[94 112]
[95 111]
[96 110]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
