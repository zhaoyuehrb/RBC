%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACACAGCGUCCGGAGCCAGAGGCGCUCUUAACGGCGUUUAUGUCCUUUGCUGUCUGAGGGGCCUCAGCUCUGACCAAUCUGGUCUUCGUGUGGUCAUUAGC\
) } def
/len { sequence length } bind def

/coor [
[101.03046417 129.90769958]
[100.71127319 114.91110229]
[93.80163574 128.22488403]
[86.89199829 141.53868103]
[79.98236084 154.85246277]
[83.43539429 170.51950073]
[73.22777557 182.89625549]
[57.18990707 182.48834229]
[47.62467575 169.60867310]
[51.86970520 154.13742065]
[66.66857147 147.94282532]
[73.57820892 134.62904358]
[80.48784637 121.31525421]
[87.39748383 108.00146484]
[87.39748383 93.00146484]
[80.48784637 79.68767548]
[73.57820892 66.37389374]
[66.66857147 53.06010437]
[59.75893784 39.74631882]
[47.62877655 35.05622864]
[42.18330002 23.69121933]
[45.88489151 12.06714058]
[39.37663269 -1.44739223]
[32.86837769 -14.96192551]
[26.36012268 -28.47645760]
[19.85186577 -41.99098969]
[13.20047474 -48.49510956]
[13.35785866 -56.00857925]
[7.25680923 -69.71176147]
[1.15575957 -83.41493988]
[-4.94529009 -97.11812592]
[-11.04633999 -110.82130432]
[-17.14739037 -124.52449036]
[-23.45274734 -138.13487244]
[-29.96100426 -151.64939880]
[-36.46926117 -165.16394043]
[-42.97751617 -178.67846680]
[-49.48577118 -192.19299316]
[-55.99403000 -205.70753479]
[-71.29248810 -206.17207336]
[-84.61701202 -213.70304871]
[-92.90573120 -226.56990051]
[-94.25395203 -241.81590271]
[-88.35186768 -255.93766785]
[-76.55573273 -265.69009399]
[-61.57620621 -268.83212280]
[-46.85548401 -264.64181519]
[-35.77627563 -254.08198547]
[-30.88450050 -239.57925415]
[-33.30425262 -224.46623230]
[-42.47949600 -212.21578979]
[-35.97124100 -198.70126343]
[-29.46298218 -185.18672180]
[-22.95472717 -171.67219543]
[-16.44647026 -158.15765381]
[-9.93821526 -144.64312744]
[-4.10495520 -139.90498352]
[-3.44420743 -130.62553406]
[2.65684199 -116.92235565]
[8.75789165 -103.21916962]
[14.85894108 -89.51599121]
[20.95999146 -75.81281281]
[27.06104088 -62.10962677]
[33.36639786 -48.49924850]
[39.87465668 -34.98471451]
[46.38291168 -21.47018051]
[52.89116669 -7.95564842]
[59.39942169 5.55888462]
[74.39017487 14.54639244]
[73.07272339 32.83668137]
[79.98236084 46.15046692]
[86.89199829 59.46425629]
[93.80163574 72.77804565]
[100.71127319 86.09182739]
[122.69544983 89.68240356]
[137.55969238 91.69589996]
[152.42393494 93.70939636]
[167.28819275 95.72290039]
[182.15243530 97.73639679]
[198.65983582 93.87091827]
[206.94395447 108.66313171]
[195.02310181 120.71839905]
[180.13893127 112.60064697]
[165.27468872 110.58714294]
[150.41044617 108.57364655]
[135.54620361 106.56014252]
[120.68195343 104.54664612]
[132.76123047 113.43995667]
[144.84051514 122.33326721]
[159.42152405 125.85381317]
[172.12736511 133.82635498]
[181.64022827 145.42399597]
[186.97346497 159.44386292]
[187.57389832 174.43183899]
[183.37927246 188.83340454]
[174.82464600 201.15486145]
[162.79727173 210.11825562]
[148.54461670 214.79391479]
[133.54493713 214.69688416]
[119.35395050 209.83724976]
[107.44353485 200.71902466]
[99.04901123 188.28793335]
[95.04103088 173.83331299]
[95.83530426 158.85435486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 14]
[3 13]
[4 12]
[5 11]
[15 74]
[16 73]
[17 72]
[18 71]
[19 70]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[34 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[75 87]
[76 86]
[77 85]
[78 84]
[79 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
