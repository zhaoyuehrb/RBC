%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCAGGCGGUGCCGCGGCGCCGGGACCCGACUCAUCCGGUGCUUGCGUGUGGUGGUGAGCGCAGCGCCGAGG\
) } def
/len { sequence length } bind def

/coor [
[78.96565247 118.39418030]
[73.08272552 107.50000000]
[58.08272552 107.50000000]
[43.08272552 107.50000000]
[34.58475494 118.17082214]
[21.65436363 121.85433197]
[9.17868805 117.39571381]
[1.73595750 106.67362976]
[-13.25122929 106.05375671]
[-28.23841476 106.67362976]
[-43.12322235 108.52902222]
[-58.00803375 110.38440704]
[-72.89283752 112.23979950]
[-87.77764893 114.09519196]
[-102.66246033 115.95057678]
[-115.40769958 126.27001953]
[-130.61814880 120.14023590]
[-132.64660645 103.86702728]
[-119.40636444 94.19087219]
[-104.51784515 101.06577301]
[-89.63304138 99.21038055]
[-74.74822998 97.35498810]
[-59.86342239 95.49960327]
[-44.97861481 93.64421082]
[-30.09380531 91.78881836]
[-28.23302269 89.32794952]
[-25.14412117 87.57431030]
[-21.14137268 87.05931091]
[-16.74825668 88.16878510]
[-12.63135433 91.06656647]
[2.35583210 91.68644714]
[14.07736111 79.81108093]
[31.09652901 79.95094299]
[43.08272552 92.50000000]
[58.08272552 92.50000000]
[73.08272552 92.50000000]
[82.64371490 78.10139465]
[98.84527588 72.08126068]
[115.48863220 76.74291992]
[126.20599365 90.30280304]
[141.15475464 89.06411743]
[156.10353088 87.82542419]
[171.05229187 86.58673859]
[186.00106812 85.34804535]
[200.94982910 84.10935211]
[215.89859009 82.87066650]
[224.47528076 78.94712830]
[231.48858643 81.90276337]
[246.47576904 81.28289032]
[261.46295166 80.66301727]
[276.45013428 80.04314423]
[283.50216675 66.39893341]
[296.44018555 58.12223053]
[311.78387451 57.43942642]
[325.40591431 64.53418732]
[333.64202881 77.49806976]
[334.27673340 92.84384155]
[327.13931274 106.44357300]
[314.14965820 114.63899994]
[298.80200195 115.22560120]
[285.22470093 108.04557800]
[277.07000732 95.03032684]
[262.08282471 95.65019989]
[247.09564209 96.27007294]
[232.10845947 96.88995361]
[217.13728333 97.81943512]
[202.18852234 99.05812073]
[187.23974609 100.29681396]
[172.29098511 101.53549957]
[157.34222412 102.77419281]
[142.39344788 104.01288605]
[127.44467926 105.25157166]
[122.48148346 116.59435272]
[113.10450745 124.67916870]
[101.15472412 127.91873932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 36]
[3 35]
[4 34]
[8 31]
[9 30]
[10 25]
[11 24]
[12 23]
[13 22]
[14 21]
[15 20]
[40 72]
[41 71]
[42 70]
[43 69]
[44 68]
[45 67]
[46 66]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
