%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:03:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGGACGAACCGCGCGACCGAGCCCUACAAAACCCGCCCCGGCCGAGUGGCGAGGCGAGCUUUCCAGCCGGGCUCCCAGAGCCGCGCUGCGCAGGAGACGCGGUGGCCUGAGAGCCUGAGGGUCCCCGGACUCGCCCAGGCUCUGAGCGCGCGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[80.93931580 310.31716919]
[80.93931580 295.31716919]
[72.59581757 286.51721191]
[72.50144958 273.98956299]
[81.25421906 264.47323608]
[81.54330444 249.47602844]
[81.83238983 234.47882080]
[78.80265808 227.69810486]
[82.27434540 219.19610596]
[82.85240936 204.20724487]
[80.69456482 201.36166382]
[79.83419800 197.31427002]
[80.82779694 192.69876099]
[83.92195892 188.37614441]
[85.36523438 173.44575500]
[86.80851746 158.51535034]
[88.25180054 143.58494568]
[89.69508362 128.65454102]
[82.41267395 124.85879517]
[76.40940094 119.25506592]
[72.12188721 112.25090027]
[69.86196136 104.35572052]
[69.79398346 96.14375305]
[55.84096527 90.63801575]
[41.88793945 85.13227844]
[27.93491745 79.62654114]
[13.98189259 74.12080383]
[0.02886950 68.61506653]
[-5.16387749 73.89457703]
[-11.50049114 77.67813873]
[-18.56339836 79.73114777]
[-25.89085388 79.93253326]
[-33.00712967 78.28186035]
[-39.45340347 74.89854431]
[-44.81733322 70.01325226]
[-48.75942612 63.95228195]
[-51.03452301 57.11573792]
[-51.50701141 49.95114517]
[-65.75488281 45.26093292]
[-80.00276184 40.57072449]
[-94.25063324 35.88051224]
[-109.77814484 38.91480255]
[-119.44794464 27.58588982]
[-133.69581604 22.89567947]
[-142.87486267 23.18135643]
[-148.17155457 17.97534752]
[-162.32638550 13.01141644]
[-178.33273315 16.57918358]
[-189.22489929 4.31978035]
[-183.79794312 -11.15536976]
[-167.63467407 -13.92675877]
[-157.36245728 -1.14341998]
[-143.20762634 3.82051039]
[-129.00561523 8.64780521]
[-114.75773621 13.33801651]
[-100.24932861 9.96825027]
[-89.56042480 21.63263702]
[-75.31254578 26.32284927]
[-61.06467438 31.01305962]
[-46.81679916 35.70326996]
[-45.71036911 34.15847015]
[-44.50221634 32.69185638]
[-52.70006561 20.13019753]
[-60.89791870 7.56854153]
[-75.76296997 0.64305609]
[-76.92810822 -15.71464825]
[-63.19474411 -24.67716789]
[-48.69058228 -17.02462959]
[-48.33626175 -0.62931061]
[-40.13840866 11.93234634]
[-31.94055748 24.49400330]
[-5.19523001 29.20422363]
[5.53460598 54.66204453]
[19.48762894 60.16778183]
[33.44065475 65.67351532]
[47.39367676 71.17925262]
[61.34669876 76.68498993]
[75.29972076 82.19072723]
[95.36183167 67.04819489]
[122.31773376 71.62255096]
[130.51559448 59.06089401]
[138.71343994 46.49923706]
[140.79884338 37.55566406]
[147.19229126 33.77659607]
[155.63070679 21.37526321]
[164.06913757 8.97393131]
[164.94705200 2.34278274]
[168.52867126 -2.14713502]
[173.07940674 -3.73411775]
[181.98947144 -15.80104065]
[190.89955139 -27.86796379]
[199.80961609 -39.93488693]
[208.71969604 -52.00180817]
[217.62976074 -64.06873322]
[213.78813171 -79.22708893]
[220.63539124 -93.28586578]
[234.93847656 -99.60691833]
[249.94390869 -95.20565796]
[258.56655884 -82.16021729]
[256.73510742 -66.63024902]
[245.31430054 -55.94853973]
[229.69668579 -55.15866089]
[220.78660583 -43.09173584]
[211.87654114 -31.02481461]
[202.96646118 -18.95789146]
[194.05639648 -6.89096832]
[185.14633179 5.17595387]
[176.47045898 17.41235352]
[168.03204346 29.81368446]
[159.59362793 42.21501541]
[151.27510071 54.69709015]
[143.07723999 67.25875092]
[134.87939453 79.82040405]
[139.84332275 93.97524261]
[154.09120178 98.66545105]
[168.33906555 103.35565948]
[182.58694458 108.04587555]
[196.83482361 112.73608398]
[211.08268738 117.42629242]
[225.33056641 122.11650848]
[239.57844543 126.80671692]
[259.06408691 121.76636505]
[271.38241577 136.63473511]
[285.80044556 140.77238464]
[300.21850586 144.91003418]
[314.63653564 149.04768372]
[329.05456543 153.18533325]
[344.82800293 148.69854736]
[356.41040039 160.30801392]
[351.88681030 176.07092285]
[335.91070557 179.77172852]
[324.91693115 167.60337830]
[310.49890137 163.46572876]
[296.08084106 159.32807922]
[281.66281128 155.19042969]
[267.24478149 151.05278015]
[258.73529053 156.81475830]
[248.23887634 156.91809082]
[239.24800110 151.08538818]
[234.88822937 141.05459595]
[220.64035034 136.36437988]
[206.39248657 131.67416382]
[192.14460754 126.98395538]
[177.89672852 122.29374695]
[163.64886475 117.60353851]
[149.40098572 112.91332245]
[135.15310669 108.22311401]
[127.73060608 120.04783630]
[116.86406708 127.58882904]
[104.62548828 130.09782410]
[103.18220520 145.02822876]
[101.73892212 159.95863342]
[100.29563904 174.88902283]
[98.85235596 189.81942749]
[97.84126282 204.78530884]
[97.26319885 219.77416992]
[96.82960510 234.76789856]
[96.54051971 249.76512146]
[96.25143433 264.76232910]
[105.52775574 280.64361572]
[95.93931580 295.31716919]
[95.93931580 310.31716919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 162]
[2 161]
[5 159]
[6 158]
[7 157]
[9 156]
[10 155]
[14 154]
[15 153]
[16 152]
[17 151]
[18 150]
[23 78]
[24 77]
[25 76]
[26 75]
[27 74]
[28 73]
[38 60]
[39 59]
[40 58]
[41 57]
[43 55]
[44 54]
[46 53]
[47 52]
[62 71]
[63 70]
[64 69]
[80 113]
[81 112]
[82 111]
[84 110]
[85 109]
[86 108]
[89 107]
[90 106]
[91 105]
[92 104]
[93 103]
[94 102]
[114 147]
[115 146]
[116 145]
[117 144]
[118 143]
[119 142]
[120 141]
[121 140]
[123 136]
[124 135]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
