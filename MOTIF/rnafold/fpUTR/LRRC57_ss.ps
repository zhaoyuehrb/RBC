%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAUGACGUCACAGGGCGUUCCCGCCCGGGACUAAGCCGGGGAGCGCAUCCCGGCUACUGCGGGUCCUGGGUCUUCACCUGCGGAGCCUUACGGCAGCUGAGCGGUGGGAGGGACCUGAGCCGCGGCGCUAGG\
) } def
/len { sequence length } bind def

/coor [
[135.62335205 189.51565552]
[120.79014587 191.74627686]
[106.06063843 188.91050720]
[93.11592102 181.33197021]
[83.43336487 169.87561035]
[78.11804199 155.84893799]
[77.77659607 140.85282898]
[82.44799042 126.59877014]
[91.60093689 114.71187592]
[79.16537476 123.09976959]
[66.72980499 131.48765564]
[65.68406677 144.97094727]
[57.16492462 155.22161865]
[44.47751999 158.61541748]
[32.34437943 154.12242126]
[19.71700668 162.21868896]
[7.08963251 170.31494141]
[-5.53774166 178.41120911]
[-18.16511536 186.50746155]
[-25.21028137 201.31616211]
[-41.57685089 202.34931946]
[-50.42830276 188.54411316]
[-42.65901947 174.10214233]
[-26.26137543 173.88008118]
[-13.63400173 165.78382874]
[-1.00662732 157.68756104]
[11.62074661 149.59130859]
[24.24812126 141.49504089]
[27.10113716 124.96302032]
[41.28222275 115.38439941]
[58.34191513 119.05210114]
[70.77748108 110.66420746]
[83.21304321 102.27631378]
[83.21304321 94.77631378]
[83.21304321 79.77631378]
[83.21304321 72.27631378]
[70.77748108 63.88842010]
[58.34191513 55.50052643]
[45.90634918 47.11263275]
[33.47078705 38.72473907]
[21.03522301 30.33684349]
[8.59965992 21.94895172]
[-5.93501425 27.38244820]
[-20.87850761 23.20253944]
[-30.48474312 11.01648712]
[-31.05992508 -4.48992443]
[-22.38288689 -17.35416222]
[-7.79012585 -22.62966537]
[7.10714436 -18.28789520]
[16.58061790 -5.99835110]
[16.98755264 9.51338768]
[29.42311668 17.90128136]
[41.85868073 26.28917503]
[54.29424286 34.67706680]
[66.72980499 43.06496048]
[79.16537476 51.45285416]
[91.60093689 59.84074783]
[104.35167694 74.16124725]
[105.84815979 90.24100494]
[119.75591278 84.62191010]
[133.66366577 79.00280762]
[147.57142639 73.38371277]
[161.47918701 67.76461029]
[175.38694763 62.14551163]
[185.28379822 49.80197906]
[199.98275757 52.20815659]
[213.89051819 46.58905792]
[218.35276794 41.51090622]
[223.88735962 39.78018570]
[228.57841492 41.04872894]
[242.73254395 36.08277893]
[256.88665771 31.11682892]
[271.04080200 26.15087700]
[285.19491577 21.18492508]
[299.34906006 16.21897507]
[313.32125854 10.76207638]
[327.09448242 4.82087994]
[340.86773682 -1.12031674]
[354.64096069 -7.06151342]
[368.41421509 -13.00270939]
[375.12942505 -19.33258438]
[382.57775879 -18.91776466]
[396.48550415 -24.53686333]
[402.72677612 -38.80865860]
[416.91128540 -44.30910492]
[430.47879028 -38.27104187]
[444.38653564 -43.89014053]
[458.29431152 -49.50923920]
[461.06475830 -64.68580627]
[471.61718750 -75.93969727]
[486.58432007 -79.67984009]
[501.19018555 -74.71276855]
[510.77413940 -62.62346268]
[512.27795410 -47.26956940]
[505.22180176 -33.55046082]
[491.85720825 -25.84385681]
[476.44885254 -26.60890579]
[463.91339111 -35.60148239]
[450.00564575 -29.98238373]
[436.09790039 -24.36328506]
[430.53262329 -10.59508133]
[416.50823975 -4.69839430]
[402.10461426 -10.62910557]
[388.19683838 -5.01000690]
[374.35540771 0.77053183]
[360.58215332 6.71172857]
[346.80892944 12.65292454]
[333.03567505 18.59412193]
[319.26245117 24.53531837]
[317.62362671 27.75505447]
[314.29504395 30.30759811]
[309.62390137 31.38498878]
[304.31500244 30.37310219]
[290.16088867 35.33905411]
[276.00674438 40.30500412]
[261.85263062 45.27095413]
[247.69848633 50.23690796]
[233.54435730 55.20285797]
[219.50961304 60.49681854]
[205.60186768 66.11591339]
[196.69978333 78.05753326]
[181.00604248 76.05326843]
[167.09828186 81.67237091]
[153.19052124 87.29146576]
[139.28277588 92.91056824]
[125.37501526 98.52966309]
[111.46725464 104.14876556]
[126.43769073 103.20742798]
[140.86727905 107.30461121]
[153.10917664 115.97270966]
[161.76622009 128.22242737]
[165.85037231 142.65571594]
[164.89552307 157.62528992]
[159.01065063 171.42268372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 33]
[10 32]
[11 31]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[41 52]
[42 51]
[59 127]
[60 126]
[61 125]
[62 124]
[63 123]
[64 122]
[66 120]
[67 119]
[70 118]
[71 117]
[72 116]
[73 115]
[74 114]
[75 113]
[76 109]
[77 108]
[78 107]
[79 106]
[80 105]
[82 104]
[83 103]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
