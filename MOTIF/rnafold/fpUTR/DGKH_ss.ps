%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACCCGCUGACCAACGCCGCCGCCCCCGCCGGGCGGUGCUGUGUCCCCGCAGGAGUCGGAGAGG\
) } def
/len { sequence length } bind def

/coor [
[116.23597717 194.00254822]
[112.75139618 179.41290283]
[102.26914978 168.83123779]
[106.58892822 153.61117554]
[103.10434723 139.02153015]
[99.27870941 124.51758575]
[95.11410522 110.10731506]
[90.61283875 95.79862213]
[85.77737427 81.59938812]
[69.99991608 69.44348907]
[73.68659973 50.68141174]
[67.54274750 36.99736786]
[61.39889145 23.31332588]
[55.82103348 18.77890015]
[53.94309998 12.94035912]
[55.38799667 8.04795647]
[50.55253220 -6.15127850]
[45.71706772 -20.35051346]
[33.94413376 -30.91974258]
[37.16556549 -45.46180725]
[32.33010101 -59.66104507]
[27.49463654 -73.86027527]
[22.65917206 -88.05951691]
[17.82370567 -102.25875092]
[12.98824120 -116.45798492]
[8.15277672 -130.65722656]
[3.31731153 -144.85646057]
[-10.38556194 -153.19976807]
[-12.26307964 -169.13256836]
[-0.87497091 -180.43260193]
[15.04278183 -178.43142700]
[23.27944183 -164.66418457]
[17.51654625 -149.69192505]
[22.35201073 -135.49269104]
[27.18747711 -121.29344940]
[32.02294159 -107.09421539]
[36.85840607 -92.89498138]
[41.69387054 -78.69573975]
[46.52933502 -64.49650574]
[51.36480331 -50.29727173]
[62.79187012 -40.74366760]
[59.91630173 -25.18597794]
[64.75177002 -10.98674393]
[69.58723450 3.21249151]
[75.08293152 17.16947174]
[81.22679138 30.85351372]
[87.37064362 44.53755569]
[97.60269928 47.47057343]
[104.52516174 55.84882355]
[105.51629639 66.89653778]
[99.97660828 76.76392365]
[104.81207275 90.96315765]
[110.36647797 97.22202301]
[109.52438354 105.94271088]
[113.68898010 120.35298920]
[119.25956726 128.04124451]
[117.69399261 135.53695679]
[121.17857361 150.12660217]
[131.91004944 161.75181580]
[127.34104156 175.92832947]
[130.82562256 190.51797485]
[144.42080688 198.57688904]
[148.25454712 213.90914917]
[140.05233765 227.41838074]
[124.68041229 231.08979797]
[111.25865173 222.74522400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 61]
[2 60]
[4 58]
[5 57]
[6 55]
[7 54]
[8 52]
[9 51]
[11 47]
[12 46]
[13 45]
[16 44]
[17 43]
[18 42]
[20 40]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
