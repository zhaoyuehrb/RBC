%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:38:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCUUGGCCACCUGCCCAAGAAACUUGUUGGUUGUUGCCCUCAGGUCGCUCCCGGGCGGGGACACGGAACCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[87.40570831 254.36863708]
[90.37019348 235.21501160]
[90.97418213 220.22717285]
[91.57817078 205.23933411]
[92.18215942 190.25149536]
[84.96360779 177.22299194]
[93.25031281 163.74557495]
[93.85430145 148.75773621]
[93.85430145 133.75773621]
[93.25031281 118.76989746]
[80.19882202 102.40429688]
[88.95451355 83.39082336]
[85.95413208 68.69396973]
[82.95374298 53.99710464]
[79.95336151 39.30024719]
[76.95297241 24.60338783]
[73.95259094 9.90652752]
[70.95220184 -4.79033279]
[56.85276031 -18.93165970]
[63.06631088 -37.06421280]
[58.89305115 -51.47198486]
[45.33120346 -59.13449860]
[41.30416870 -73.80547333]
[48.69277954 -86.68740082]
[44.51951599 -101.09517670]
[40.34625626 -115.50294495]
[36.17299271 -129.91072083]
[31.99973106 -144.31848145]
[18.43788719 -151.98100281]
[14.41084957 -166.65197754]
[21.79946136 -179.53390503]
[17.62619972 -193.94168091]
[13.45293808 -208.34945679]
[1.25744915 -219.31312561]
[4.91877079 -235.29832458]
[20.67044830 -239.86085510]
[32.30850601 -228.30717468]
[27.86071014 -212.52270508]
[32.03396988 -198.11494446]
[36.20723343 -183.70716858]
[49.33696365 -176.76844788]
[53.77449036 -162.21636963]
[46.40750504 -148.49174500]
[50.58076477 -134.08398438]
[54.75402832 -119.67620850]
[58.92728806 -105.26843262]
[63.10055161 -90.86066437]
[76.23027802 -83.92195129]
[80.66780853 -69.36987305]
[73.30081940 -55.64524841]
[77.47408295 -41.23747635]
[87.12148285 -36.95215988]
[92.80569458 -27.79326248]
[92.34522247 -16.80042076]
[85.64906311 -7.79071808]
[88.64945221 6.90614176]
[91.64983368 21.60300064]
[94.65022278 36.29986191]
[97.65060425 50.99671936]
[100.65099335 65.69358063]
[103.65137482 80.39044189]
[111.36213684 83.60581970]
[117.07973480 89.69708252]
[119.80117798 97.59570312]
[119.04907990 105.91608429]
[114.95536041 113.19866180]
[108.23815155 118.16590881]
[108.84214020 133.15374756]
[112.26983643 139.33398438]
[111.89488220 145.36067200]
[108.84214020 149.36172485]
[108.23815155 164.34956360]
[115.41349792 178.45008850]
[107.16999817 190.85548401]
[106.56600952 205.84332275]
[105.96202087 220.83116150]
[105.35803223 235.81900024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 77]
[3 76]
[4 75]
[5 74]
[7 72]
[8 71]
[9 68]
[10 67]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[17 56]
[18 55]
[20 51]
[21 50]
[24 47]
[25 46]
[26 45]
[27 44]
[28 43]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
