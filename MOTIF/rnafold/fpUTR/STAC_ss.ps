%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGGAGCGAGGCUGGAGGAGGGCACGUCGGCGCCUCGGCGAGGAUGGGAGUCCCCAGGACCCGGAGCUGAGCAGCCUGGCGCGCGGCGGGCAGGGCGCGCAGGACAGAAGCCUCGCUGUUCCUCCGGGAGCCCAACACCGUUCCCGCGCGGCCACG\
) } def
/len { sequence length } bind def

/coor [
[241.73617554 292.97491455]
[232.82316589 280.91015625]
[223.91014099 268.84542847]
[214.99713135 256.78067017]
[206.08412170 244.71592712]
[196.93298340 232.83076477]
[187.54736328 221.12991333]
[178.16174316 209.42904663]
[168.77612305 197.72819519]
[159.39050293 186.02732849]
[150.00488281 174.32647705]
[140.61926270 162.62561035]
[131.23364258 150.92475891]
[121.84802246 139.22389221]
[110.31385040 143.69752502]
[97.99661255 144.85350037]
[85.83148193 142.60401917]
[74.74207306 137.11990356]
[65.57034302 128.81750488]
[59.01263046 118.32717133]
[55.56682587 106.44537354]
[55.49455261 94.07422638]
[58.80128860 82.15298462]
[46.22665024 73.97505951]
[30.43949890 72.93753052]
[23.98844337 59.51243973]
[11.41380119 51.33451843]
[-1.16083980 43.15659332]
[-13.73548126 34.97867203]
[-26.39080238 26.92616844]
[-39.12555313 18.99987411]
[-51.86030197 11.07358074]
[-67.06903839 14.43991375]
[-79.87097168 6.22011375]
[-82.98652649 -8.29983425]
[-95.72127533 -16.22612762]
[-108.45603180 -24.15242195]
[-121.19078064 -32.07871628]
[-133.92553711 -40.00500870]
[-146.66027832 -47.93130112]
[-163.59381104 -43.64623642]
[-178.11614990 -52.73175430]
[-181.53196716 -69.17387390]
[-194.42178345 -76.84540558]
[-215.78665161 -75.73651886]
[-225.27041626 -94.03436279]
[-238.59466553 -100.92382050]
[-251.91889954 -107.81328583]
[-265.24313354 -114.70274353]
[-281.59063721 -113.40209198]
[-290.66662598 -127.06071472]
[-283.13455200 -141.62779236]
[-266.74273682 -142.11796570]
[-258.35366821 -128.02697754]
[-245.02943420 -121.13751984]
[-231.70520020 -114.24806213]
[-218.38096619 -107.35860443]
[-210.38478088 -111.43142700]
[-201.27349854 -111.33489990]
[-193.12190247 -106.96311951]
[-187.84535217 -99.19824219]
[-186.75025940 -89.73522949]
[-173.86042786 -82.06369781]
[-161.90531921 -86.95463562]
[-149.12928772 -84.00629425]
[-140.26661682 -74.08045197]
[-138.73399353 -60.66605377]
[-125.99923706 -52.73976135]
[-113.26448822 -44.81346512]
[-100.52973938 -36.88717270]
[-87.79498291 -28.96087837]
[-75.06023407 -21.03458405]
[-60.65671158 -24.65040207]
[-47.62895203 -16.79342461]
[-43.93400955 -1.66116977]
[-31.19925880 6.26512384]
[-18.46450806 14.19141769]
[-11.08368111 15.06074142]
[-5.55755949 22.40403175]
[7.01708174 30.58195496]
[19.59172249 38.75987625]
[32.16636276 46.93779755]
[47.05409241 47.39038849]
[54.40457153 61.40042114]
[66.97920990 69.57834625]
[91.13137054 55.98639679]
[118.66260529 59.16427231]
[127.08892822 46.75471115]
[135.51524353 34.34514999]
[136.86645508 18.58174896]
[150.41714478 12.39888859]
[158.84346008 -0.01067203]
[162.73901367 -16.51100731]
[179.67289734 -17.33545303]
[185.15289307 -1.29157567]
[171.25302124 8.41564465]
[162.82670593 20.82520485]
[162.07821655 35.70099258]
[147.92480469 42.77146530]
[139.49848938 55.18102646]
[131.07217407 67.59058380]
[136.11740112 73.32822418]
[140.11672974 79.83822632]
[142.95437622 86.93206787]
[144.54815674 94.40432739]
[144.85191345 102.03862762]
[143.85684204 109.61389160]
[141.59178162 116.91075897]
[138.12229919 123.71792603]
[133.54887390 129.83827209]
[142.93449402 141.53913879]
[152.32011414 153.23999023]
[161.70573425 164.94085693]
[171.09136963 176.64170837]
[180.47698975 188.34257507]
[189.86260986 200.04342651]
[199.24822998 211.74429321]
[208.63385010 223.44514465]
[214.72683716 226.23139954]
[217.97181702 230.98054504]
[218.14886475 235.80290222]
[227.06187439 247.86766052]
[235.97489929 259.93240356]
[244.88790894 271.99716187]
[253.80091858 284.06188965]
[263.97744751 295.08178711]
[275.29592896 304.92517090]
[286.61441040 314.76858521]
[297.93286133 324.61196899]
[309.25134277 334.45535278]
[320.56979370 344.29873657]
[331.88827515 354.14212036]
[346.97760010 350.52377319]
[361.29898071 356.49685669]
[369.34558105 369.76455688]
[368.02328491 385.22518921]
[357.84057617 396.93383789]
[342.71292114 400.38824463]
[328.45715332 394.26019287]
[320.55496216 380.90597534]
[322.04489136 365.46057129]
[310.72640991 355.61718750]
[299.40795898 345.77380371]
[288.08947754 335.93041992]
[276.77102661 326.08703613]
[265.45254517 316.24365234]
[254.13407898 306.40026855]
[257.36755371 321.04760742]
[253.54231262 335.55166626]
[243.50576782 346.69918823]
[229.48141479 352.02062988]
[214.57620239 350.33700562]
[202.09220886 342.02133179]
[194.79515076 328.91589355]
[194.30160522 313.92401123]
[200.72091675 300.36700439]
[212.63095093 291.24826050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 125]
[2 124]
[3 123]
[4 122]
[5 121]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[14 110]
[23 85]
[24 84]
[26 82]
[27 81]
[28 80]
[29 79]
[30 77]
[31 76]
[32 75]
[35 72]
[36 71]
[37 70]
[38 69]
[39 68]
[40 67]
[43 63]
[44 62]
[46 57]
[47 56]
[48 55]
[49 54]
[87 101]
[88 100]
[89 99]
[91 97]
[92 96]
[126 147]
[127 146]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
