%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUUAUAAACAGCCGUGGUGUGAGCCUCGAAGGGAACCAUCAGCGCCUCCUGUCCACGGAGCUCCAGGUCUACA\
) } def
/len { sequence length } bind def

/coor [
[125.24290466 310.40579224]
[118.73464966 296.89126587]
[112.22639465 283.37673950]
[105.71813965 269.86221313]
[100.32942963 283.86083984]
[88.83232117 293.49496460]
[74.10678101 296.35128784]
[59.84149933 291.71429443]
[49.60985947 280.74554443]
[45.97484589 266.19265747]
[49.84700775 251.70104980]
[60.25639343 240.90083313]
[74.59548950 236.49740601]
[89.27242279 239.59379578]
[100.60972595 249.41297913]
[99.99789429 234.42546082]
[99.38607025 219.43794250]
[98.77423859 204.45043945]
[98.16241455 189.46292114]
[97.55058289 174.47540283]
[83.68261719 165.93891907]
[77.47898102 150.70448303]
[81.51834869 134.58953857]
[94.42728424 123.87242126]
[93.20464325 108.92233276]
[91.67729950 94.00029755]
[89.84588623 79.11251831]
[87.71115875 64.26519775]
[85.27401733 49.46450806]
[80.67570496 41.23682022]
[83.05220795 34.01145935]
[81.22078705 19.12368202]
[71.85645294 6.37143660]
[77.98194122 -7.20529652]
[76.15052795 -22.09307480]
[68.21555328 -37.07548141]
[80.41582489 -48.84789658]
[95.10553741 -40.38334274]
[91.03829956 -23.92448807]
[92.86972046 -9.03671169]
[102.10305786 2.65066123]
[96.10856628 17.29226875]
[97.93997955 32.18004608]
[100.07470703 47.02736664]
[102.51184845 61.82805252]
[106.82770538 68.09120178]
[104.73365784 77.28110504]
[106.56507111 92.16888428]
[110.69901276 99.37655640]
[108.15473175 107.69969177]
[109.37737274 122.64978027]
[121.78115082 129.01795959]
[129.29658508 140.63230896]
[130.01210022 154.33828735]
[123.84577179 166.47735596]
[112.53810120 173.86357117]
[113.14992523 188.85108948]
[113.76175690 203.83860779]
[114.37358856 218.82612610]
[114.98541260 233.81364441]
[115.59724426 248.80114746]
[119.23266602 263.35394287]
[125.74092865 276.86846924]
[132.24917603 290.38299561]
[138.75743103 303.89755249]
[154.02046204 303.84603882]
[167.79063416 310.42974854]
[177.33386230 322.34146118]
[180.75534058 337.21615601]
[177.37571716 352.10040283]
[167.86602783 364.03894043]
[154.11444092 370.66137695]
[138.85131836 370.65277100]
[125.10719299 364.01489258]
[115.61094666 352.06567383]
[112.24807739 337.17761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[24 51]
[25 50]
[26 48]
[27 47]
[28 45]
[29 44]
[31 43]
[32 42]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
