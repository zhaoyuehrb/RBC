%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCCCGCCGAUAUCUCUGCCGGGUGACUAGCUGCUUCCUUUCUCUCUCGCGCGCGGUGUGGUGGCAGCAGGCGCAGCCCAGCCUCGAA\
) } def
/len { sequence length } bind def

/coor [
[76.89560699 127.08395386]
[86.79248810 115.80968475]
[73.88926697 123.45867157]
[60.98605347 131.10766602]
[48.08283997 138.75665283]
[35.17962265 146.40563965]
[22.27640724 154.05462646]
[9.50714111 161.92520142]
[-3.12437177 170.01499939]
[-10.57262802 183.97329712]
[-25.46315575 184.32177734]
[-38.09466934 192.41157532]
[-45.14740753 207.21667480]
[-61.51450348 208.24147034]
[-70.35889435 194.43173218]
[-62.58222580 179.99374390]
[-46.18447113 179.78005981]
[-33.55295563 171.69026184]
[-27.00819016 158.31060791]
[-11.21417236 157.38348389]
[1.41734099 149.29368591]
[5.43733501 142.89872742]
[14.62741947 141.15141296]
[27.53063393 133.50242615]
[40.43384933 125.85343170]
[53.33706665 118.20444489]
[66.24028015 110.55545807]
[79.14349365 102.90646362]
[81.69120026 94.03650665]
[87.44875336 87.87260437]
[94.64485168 85.29421234]
[101.43921661 86.22702026]
[106.99958801 72.29567719]
[112.55995178 58.36433411]
[118.12031555 44.43299103]
[123.68067932 30.50164604]
[129.24104309 16.57030296]
[127.17057800 0.88515866]
[139.07453918 -8.06722641]
[144.63490295 -21.99856949]
[130.93516541 -15.88976383]
[115.99464417 -17.22414780]
[103.59430695 -25.66403198]
[96.87230682 -39.07353592]
[97.52978516 -54.05911636]
[105.40035248 -66.82838440]
[118.49220276 -74.14981842]
[133.49218750 -74.17059326]
[146.60426331 -66.88544464]
[154.51016235 -54.13802338]
[155.20915222 -39.15431213]
[165.15599060 -50.38197327]
[175.10282898 -61.60963440]
[185.04966736 -72.83729553]
[191.02720642 -88.70252228]
[207.92715454 -87.35051727]
[211.30636597 -70.73674774]
[196.27732849 -62.89045334]
[186.33049011 -51.66279221]
[176.38365173 -40.43513107]
[166.43681335 -29.20747185]
[158.56623840 -16.43820381]
[153.00587463 -2.50686121]
[155.47406006 12.18181992]
[143.17239380 22.13066864]
[137.61203003 36.06201172]
[132.05166626 49.99335480]
[126.49129486 63.92469788]
[120.93093109 77.85604095]
[115.37055969 91.78738403]
[118.96029663 106.35151672]
[130.35797119 116.10307312]
[141.75564575 125.85463715]
[153.15333557 135.60620117]
[168.21289062 131.86599731]
[182.58210754 137.72308350]
[190.73568726 150.92530823]
[189.53845215 166.39613342]
[179.45072937 178.18670654]
[164.35148621 181.76332092]
[150.04666138 175.75068665]
[142.03677368 162.46080017]
[143.40176392 147.00387573]
[132.00408936 137.25231934]
[120.60641479 127.50075531]
[109.20873260 117.74919128]
[117.02171326 130.55377197]
[114.23143005 145.29196167]
[102.27851105 154.35440063]
[87.33428192 153.06213379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 28]
[3 27]
[4 26]
[5 25]
[6 24]
[7 23]
[8 21]
[9 20]
[11 18]
[12 17]
[32 70]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[39 63]
[40 62]
[51 61]
[52 60]
[53 59]
[54 58]
[71 86]
[72 85]
[73 84]
[74 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
