%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCUCAGCCCUCCCUCCUCGCCUGGAAGCCUUGCCCCCGCCCCCUUGUGCUGGCUGGAGCUCAAGCCUCUUCCUUUGUCGCAGCUCCGCCCAGUUGAACACACCCGCUGGGGAAGGUGCCUCUGUUCCCUCCCCACGCACUCUGGGCCUGAGCUGACAGAG\
) } def
/len { sequence length } bind def

/coor [
[-12.92666531 126.83601379]
[-27.13829613 131.63491821]
[-41.34992599 136.43383789]
[-55.56155777 141.23274231]
[-66.16104889 152.97843933]
[-80.69477081 149.71960449]
[-94.90640259 154.51852417]
[-109.11803436 159.31742859]
[-123.32966614 164.11633301]
[-137.54129028 168.91525269]
[-151.75292969 173.71415710]
[-152.43190002 181.57696533]
[-155.20504761 188.93687439]
[-159.85147095 195.24916077]
[-166.01220703 200.05087280]
[-173.21795654 202.99478149]
[-180.92478943 203.87448120]
[-188.55523682 202.63879395]
[-195.54150391 199.39450073]
[-201.36776733 194.39726257]
[-205.60824585 188.03160095]
[-220.33386230 190.88746643]
[-235.05949402 193.74333191]
[-243.91474915 206.55825806]
[-258.88931274 209.24473572]
[-271.05178833 200.72363281]
[-285.77743530 203.57949829]
[-294.63269043 216.39440918]
[-309.60723877 219.08090210]
[-321.76974487 210.55979919]
[-336.49536133 213.41566467]
[-342.11688232 227.78236389]
[-354.62658691 236.81066895]
[-370.03274536 237.61967468]
[-383.41925049 229.95123291]
[-390.51452637 216.25231934]
[-389.05453491 200.89419556]
[-379.50509644 188.77758789]
[-364.91345215 183.76887512]
[-349.93569946 187.46629333]
[-339.35122681 198.69003296]
[-324.62561035 195.83416748]
[-316.53018188 183.38427734]
[-301.63699341 180.27824402]
[-288.63330078 188.85386658]
[-273.90765381 185.99800110]
[-265.81225586 173.54811096]
[-250.91906738 170.44207764]
[-237.91535950 179.01770020]
[-223.18972778 176.16183472]
[-208.46411133 173.30596924]
[-198.08404541 153.32235718]
[-176.10908508 147.30895996]
[-156.55183411 159.50253296]
[-142.34020996 154.70361328]
[-128.12857056 149.90470886]
[-113.91694641 145.10580444]
[-99.70531464 140.30688477]
[-85.49368286 135.50798035]
[-75.91070557 124.10552979]
[-60.36046982 127.02111816]
[-46.14883804 122.22220612]
[-31.93720818 117.42329407]
[-17.72557640 112.62438202]
[-31.58158684 106.87886047]
[-40.96558762 95.17670441]
[-43.56367874 80.40341949]
[-38.73521805 66.20180511]
[-27.67081261 56.07367706]
[-13.09871578 52.51643753]
[1.38789165 56.40722275]
[12.21690559 66.78664398]
[16.71811295 81.09535217]
[13.78160667 95.80511475]
[4.13246250 107.28807831]
[18.95666885 104.99834442]
[33.78087616 102.70860291]
[48.60507965 100.41886139]
[63.42928696 98.12911987]
[78.25349426 95.83938599]
[93.07769775 93.54964447]
[97.08991241 90.09314728]
[102.76016998 89.15673065]
[108.51253510 91.46745300]
[123.41356659 89.74720764]
[138.31459045 88.02695465]
[153.21562195 86.30670166]
[168.11665344 84.58644867]
[182.61471558 73.26858521]
[198.43916321 80.80891418]
[213.30451965 78.80355072]
[228.16986084 76.79818726]
[243.03520203 74.79282379]
[257.90054321 72.78746033]
[272.76589966 70.78209686]
[274.30969238 62.79905701]
[277.57412720 55.36671829]
[282.39245605 48.85023880]
[288.52166748 43.56835175]
[295.65487671 39.77779770]
[303.43655396 37.66082382]
[311.48040771 37.31645203]
[319.38842773 38.75583649]
[326.77059937 41.90202713]
[333.26422119 46.59404755]
[338.55157471 52.59513092]
[342.37567139 59.60464096]
[344.55255127 67.27315521]
[359.54153442 67.84769440]
[374.53536987 68.27864838]
[389.53259277 68.56597137]
[404.52984619 68.85329437]
[419.52709961 69.14061737]
[434.52435303 69.42794037]
[449.52160645 69.71526337]
[463.46743774 62.24372482]
[476.04415894 70.22339630]
[491.04141235 70.51071930]
[504.98727417 63.03918076]
[517.56402588 71.01885223]
[532.56121826 71.30617523]
[546.64843750 62.91076660]
[560.82867432 71.14803314]
[560.51458740 87.54416656]
[546.02923584 95.23223877]
[532.27392578 86.30342102]
[517.27667236 86.01609802]
[504.40353394 93.50818634]
[490.75408936 85.50796509]
[475.75683594 85.22064209]
[462.88369751 92.71273804]
[449.23428345 84.71251678]
[434.23703003 84.42519379]
[419.23977661 84.13787079]
[404.24252319 83.85054779]
[389.24526978 83.56322479]
[374.24804688 83.27589417]
[367.46853638 86.30600739]
[358.96701050 82.83669281]
[343.97802734 82.26215363]
[332.01089478 101.34776306]
[310.91717529 109.59579468]
[288.94287109 103.62615204]
[274.77127075 85.64744568]
[259.90591431 87.65280914]
[245.04057312 89.65817261]
[230.17523193 91.66353607]
[215.30987549 93.66889954]
[200.44453430 95.67426300]
[192.83969116 105.11885071]
[180.43804932 106.88785553]
[169.83691406 99.48748016]
[154.93588257 101.20773315]
[140.03485107 102.92798615]
[125.13381958 104.64823914]
[110.23278809 106.36848450]
[95.36743927 108.37384796]
[80.54323578 110.66358948]
[65.71902466 112.95333099]
[50.89482117 115.24307251]
[36.07061386 117.53280640]
[21.24640846 119.82254791]
[6.42220163 122.11228943]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[21 51]
[22 50]
[23 49]
[26 46]
[27 45]
[30 42]
[31 41]
[75 163]
[76 162]
[77 161]
[78 160]
[79 159]
[80 158]
[81 157]
[84 156]
[85 155]
[86 154]
[87 153]
[88 152]
[90 149]
[91 148]
[92 147]
[93 146]
[94 145]
[95 144]
[108 140]
[109 139]
[110 137]
[111 136]
[112 135]
[113 134]
[114 133]
[115 132]
[117 130]
[118 129]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
