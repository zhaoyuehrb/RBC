%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:20:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCGGGAAACCGGAAGCCGCCUCCCACUUGGUUGCUCGUACGCGGCUAGUGGGUCCUCAGUGGAUGUAGGCUGGGCGCCGCGAUGUUCGACGGGACACCGGCGGAGAGCGACCUCGGGGUUAAGGGGUGGGGCUGACGUCAGGAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[115.21617126 437.99255371]
[114.13202667 423.03176880]
[106.65164185 423.57385254]
[101.48898315 437.65744019]
[96.32632446 451.74099731]
[91.16366577 465.82455444]
[94.50579834 481.87954712]
[82.09431458 492.59808350]
[66.69707489 486.95385742]
[64.15345001 470.75317383]
[77.08009338 460.66189575]
[82.24275208 446.57833862]
[87.40541077 432.49478149]
[92.56806946 418.41119385]
[100.81954193 407.16098022]
[111.11952972 400.50222778]
[121.63391876 398.54763794]
[130.66285706 400.77597046]
[129.73338318 385.80477905]
[128.80390930 370.83361816]
[127.87442017 355.86242676]
[126.94493866 340.89126587]
[126.01545715 325.92010498]
[124.31398773 311.01690674]
[121.84506989 296.22149658]
[119.37615204 281.42605591]
[106.89924622 276.57830811]
[98.39122772 266.10440063]
[96.16780853 252.68486023]
[100.91832733 239.82318115]
[111.49705505 230.93125916]
[109.33443451 216.08796692]
[107.17182159 201.24468994]
[105.00920868 186.40139771]
[102.84658813 171.55812073]
[100.68397522 156.71482849]
[98.52135468 141.87155151]
[96.35874176 127.02826691]
[83.53419495 123.29421234]
[73.50435638 113.59505463]
[68.96714783 99.77265167]
[71.49243927 84.84092712]
[81.04281616 72.32986450]
[72.32666779 60.12213516]
[63.61051559 47.91440582]
[49.29456329 41.17911911]
[48.19603348 26.32507896]
[39.47988129 14.11734867]
[30.76372719 1.90961814]
[22.04757500 -10.29811287]
[13.33142281 -22.50584412]
[-5.41675615 -24.86160088]
[-16.35607719 -39.87729263]
[-12.96881866 -57.82064819]
[-22.18200874 -69.65775299]
[-31.39520073 -81.49486542]
[-40.60839081 -93.33197021]
[-56.28631973 -96.73522186]
[-63.27114868 -111.17792511]
[-56.20471191 -125.58087921]
[-40.50777817 -128.89537048]
[-28.22169113 -118.57879639]
[-28.77128410 -102.54515839]
[-19.55809212 -90.70805359]
[-10.34490204 -78.87094879]
[-1.13171136 -67.03383636]
[10.30065536 -68.10692596]
[20.92954063 -63.45355225]
[28.04177284 -54.13428879]
[29.76048088 -42.41622543]
[25.53915405 -31.22199631]
[34.25530624 -19.01426506]
[42.97145844 -6.80653429]
[51.68761063 5.40119648]
[60.40376282 17.60892677]
[74.09627533 23.47103500]
[75.81824493 39.19825363]
[84.53440094 51.40598297]
[93.25054932 63.61371613]
[108.24734497 63.92371750]
[117.46054077 52.08661270]
[126.67372894 40.24950409]
[124.17917633 22.96541595]
[134.72431946 9.47067738]
[151.42835999 7.78089476]
[160.39495850 -4.24409246]
[169.36154175 -16.26907921]
[178.32812500 -28.29406738]
[187.29470825 -40.31905365]
[188.67257690 -56.66021347]
[203.62648010 -63.39170837]
[216.77311707 -53.58874893]
[214.58836365 -37.33578491]
[199.31970215 -31.35246849]
[190.35311890 -19.32748032]
[181.38652039 -7.30249357]
[172.41993713 4.72249413]
[163.45335388 16.74748230]
[167.07870483 29.15035439]
[162.81632996 41.55533600]
[152.01705933 49.33866882]
[138.51083374 49.46269608]
[129.29763794 61.29980087]
[120.08445740 73.13690948]
[130.57472229 92.62509155]
[126.36935425 112.91453552]
[111.20202637 124.86564636]
[113.36463928 139.70893860]
[115.52725983 154.55221558]
[117.68987274 169.39550781]
[119.85249329 184.23878479]
[122.01510620 199.08206177]
[124.17771912 213.92535400]
[126.34033966 228.76863098]
[141.39933777 236.40425110]
[148.88664246 251.35235596]
[146.04026794 267.65838623]
[134.17156982 278.95715332]
[136.64048767 293.75256348]
[139.10940552 308.54797363]
[150.06877136 298.30627441]
[164.93846130 300.27908325]
[172.84808350 313.02420044]
[168.01531982 327.22436523]
[153.97315979 332.49859619]
[140.98663330 324.99060059]
[141.91612244 339.96179199]
[142.84559631 354.93295288]
[143.77507019 369.90414429]
[144.70455933 384.87530518]
[145.63403320 399.84649658]
[149.76528931 414.26635742]
[156.90449524 427.45846558]
[164.04371643 440.65057373]
[171.18292236 453.84268188]
[186.57411194 454.89849854]
[198.93753052 464.12615967]
[204.32804871 478.58111572]
[201.02557373 493.65084839]
[190.08390808 504.52670288]
[174.99450684 507.73815918]
[160.57234192 502.26052856]
[151.41946411 489.84164429]
[150.45654297 474.44436646]
[157.99081421 460.98187256]
[150.85160828 447.78979492]
[143.71238708 434.59768677]
[136.57318115 421.40557861]
[129.09280396 421.94763184]
[130.17694092 436.90841675]
[131.26084900 451.86920166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 14]
[4 13]
[5 12]
[6 11]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[24 120]
[25 119]
[26 118]
[31 114]
[32 113]
[33 112]
[34 111]
[35 110]
[36 109]
[37 108]
[38 107]
[43 79]
[44 78]
[45 77]
[47 75]
[48 74]
[49 73]
[50 72]
[51 71]
[54 66]
[55 65]
[56 64]
[57 63]
[80 104]
[81 103]
[82 102]
[85 98]
[86 97]
[87 96]
[88 95]
[89 94]
[132 148]
[133 147]
[134 146]
[135 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
