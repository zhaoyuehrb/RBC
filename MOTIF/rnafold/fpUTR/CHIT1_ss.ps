%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUGGCUGGGGUGGGACAGGGUGGCCAGAUAAAAGCAGAGCAGGACCUGGAAAGCUGGUUUGUAUGGGCUGCAGCCUGCCGCUGAGCUGCAUC\
) } def
/len { sequence length } bind def

/coor [
[74.79747009 371.58361816]
[61.27151108 364.51177979]
[52.16029358 352.26641846]
[49.27286148 337.27893066]
[53.18251038 322.52502441]
[63.11297989 310.93414307]
[77.09256744 304.80764771]
[77.57829285 289.81552124]
[78.06402588 274.82339478]
[78.54975128 259.83123779]
[70.45520020 250.68196106]
[70.85517883 238.06887817]
[80.08420563 228.88087463]
[81.05515289 213.91233826]
[82.02610016 198.94380188]
[82.99704742 183.97525024]
[83.96799469 169.00671387]
[81.41333771 164.76481628]
[81.63336945 158.84240723]
[85.51737976 153.11058044]
[87.45520020 138.23628235]
[89.39302063 123.36198425]
[91.33084869 108.48767853]
[92.78599548 93.55842590]
[93.75694275 78.58988953]
[94.72789001 63.62134171]
[95.69883728 48.65280151]
[96.66978455 33.68425751]
[97.64073181 18.71571732]
[84.42123413 11.16546249]
[75.82585144 -1.32478726]
[73.51529694 -16.24730492]
[77.89492798 -30.63409805]
[88.04482269 -41.64722824]
[101.91242981 -47.13859558]
[102.88337708 -62.10713577]
[103.85432434 -77.07567596]
[97.02652740 -91.34774780]
[105.57143402 -103.54749298]
[106.54238129 -118.51603699]
[107.51332855 -133.48457336]
[93.45606232 -147.57989502]
[93.97888947 -167.18261719]
[108.32606506 -180.11056519]
[107.84033966 -195.10269165]
[107.35460663 -210.09483337]
[100.79853821 -225.72985840]
[114.00764465 -236.35792542]
[127.87700653 -226.60717773]
[122.34674072 -210.58055115]
[122.83246613 -195.58842468]
[123.31819916 -180.59628296]
[132.70013428 -175.67866516]
[139.16241455 -167.18261719]
[141.43119812 -156.66835022]
[139.01083374 -146.10397339]
[132.29016113 -137.49716187]
[122.48187256 -132.51362610]
[121.51092529 -117.54508972]
[120.53997803 -102.57654572]
[127.43721771 -89.37512970]
[118.82286072 -76.10472870]
[117.85191345 -61.13618851]
[116.88096619 -46.16764832]
[129.92294312 -38.93076706]
[138.56501770 -26.69868088]
[141.04934692 -11.86665154]
[136.83033752 2.63232088]
[126.69338989 13.90748215]
[112.60927582 19.68666458]
[111.63832855 34.65520477]
[110.66738129 49.62374878]
[109.69643402 64.59229279]
[108.72548676 79.56083679]
[107.75453949 94.52937317]
[110.34894562 99.32685852]
[109.95671844 105.24045563]
[106.20514679 110.42549896]
[104.26732635 125.29980469]
[102.32950592 140.17410278]
[100.39167786 155.04840088]
[98.93653107 169.97766113]
[97.96558380 184.94619751]
[96.99463654 199.91474915]
[96.02368927 214.88328552]
[95.05274200 229.85182190]
[103.61991119 246.05085754]
[93.54188538 260.31698608]
[93.05615234 275.30911255]
[92.57042694 290.30123901]
[92.08470154 305.29336548]
[105.63840485 312.31192017]
[114.79776764 324.52130127]
[117.74420166 339.49731445]
[113.89268494 354.26647949]
[104.00793457 365.89639282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 91]
[8 90]
[9 89]
[10 88]
[13 86]
[14 85]
[15 84]
[16 83]
[17 82]
[20 81]
[21 80]
[22 79]
[23 78]
[24 75]
[25 74]
[26 73]
[27 72]
[28 71]
[29 70]
[35 64]
[36 63]
[37 62]
[39 60]
[40 59]
[41 58]
[44 52]
[45 51]
[46 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
