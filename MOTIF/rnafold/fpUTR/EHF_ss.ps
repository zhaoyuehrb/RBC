%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCACUGCUUUAUUCUGCCCUGAGUGGAGAUUGGUUUUGGCUCAGGCUGCUUUGUGAAACUCAGAAGCAUUAUCCUCUCUGCCAACUCCACGUCCUAGUCAGAGUUUUCUGUGAAGGCAAGGGC\
) } def
/len { sequence length } bind def

/coor [
[89.42032623 498.39938354]
[81.81320953 483.87133789]
[90.81865692 470.16607666]
[91.18967438 455.17068481]
[91.56069183 440.17526245]
[83.42024231 431.13684082]
[83.67226410 418.57324219]
[92.72981262 409.29205322]
[93.47161865 394.31039429]
[94.21342468 379.32876587]
[94.76988220 364.33908081]
[95.14089203 349.34365845]
[95.51190948 334.34826660]
[95.88292694 319.35284424]
[96.25394440 304.35742188]
[81.78481293 294.38238525]
[76.07270050 277.59753418]
[81.54904175 260.57052612]
[96.22849274 250.08134460]
[95.85747528 235.08592224]
[87.80773926 222.55392456]
[95.20133209 208.56660461]
[94.83031464 193.57118225]
[94.45930481 178.57577515]
[94.08828735 163.58036804]
[86.03855133 151.04837036]
[93.43214417 137.06103516]
[93.06112671 122.06562805]
[92.69010925 107.07021332]
[89.32801819 99.64110565]
[92.50000000 91.70034790]
[92.50000000 76.70034790]
[92.50000000 61.70034790]
[92.31447601 46.70149612]
[91.94345856 31.70608330]
[91.57244110 16.71067238]
[80.40585327 5.85042477]
[80.24320221 -9.36233997]
[90.66561127 -19.94104958]
[90.29459381 -34.93646240]
[89.92357635 -49.93187332]
[89.55255890 -64.92728424]
[89.18154144 -79.92269135]
[74.98701477 -92.34153748]
[74.27667236 -110.87184143]
[87.03596497 -123.88881683]
[85.92382050 -138.84753418]
[84.81167603 -153.80624390]
[71.59844208 -170.58592224]
[80.94513702 -188.92054749]
[78.72697449 -203.75563049]
[76.50881195 -218.59071350]
[74.29065704 -233.42579651]
[72.07249451 -248.26087952]
[69.85433197 -263.09597778]
[65.44764709 -271.22283936]
[67.76950073 -278.32498169]
[65.91895294 -293.21038818]
[64.06841278 -308.09579468]
[56.11419296 -323.06799316]
[68.29932404 -334.85607910]
[82.99990082 -326.41040039]
[78.95381927 -309.94635010]
[80.80436707 -295.06094360]
[82.65491486 -280.17550659]
[84.68942261 -265.31411743]
[86.90757751 -250.47904968]
[89.12574005 -235.64396667]
[91.34390259 -220.80886841]
[93.56206512 -205.97378540]
[95.78022003 -191.13870239]
[103.84352875 -186.99438477]
[109.12349701 -179.45466614]
[110.29595184 -170.18521118]
[106.96217346 -161.30862427]
[99.77039337 -154.91839600]
[100.88253784 -139.95967102]
[101.99467468 -125.00096130]
[112.14884949 -119.52983856]
[118.42411804 -109.70858002]
[119.13668060 -97.95472717]
[113.98951721 -87.22993469]
[104.17695618 -80.29370880]
[104.54796600 -65.29830170]
[104.91898346 -50.30288696]
[105.29000092 -35.30747604]
[105.66101837 -20.31206703]
[116.59382629 -10.26172638]
[117.18370056 4.94046736]
[106.56785583 16.33965683]
[106.93887329 31.33506775]
[107.30989075 46.33047867]
[110.65645599 53.01117325]
[107.50000000 61.70034790]
[107.50000000 76.70034790]
[107.50000000 91.70034790]
[107.68552399 106.69920349]
[108.05654144 121.69461060]
[108.42755890 136.69001770]
[116.50382996 150.29460144]
[109.08369446 163.20935059]
[109.45471191 178.20475769]
[109.82572937 193.20016479]
[110.19674683 208.19558716]
[118.27301788 221.80015564]
[110.85289001 234.71490479]
[111.22389984 249.71032715]
[122.46463013 255.45434570]
[130.11764526 265.40179443]
[132.75721741 277.59753418]
[129.93539429 289.67788696]
[122.25654602 299.32864380]
[111.24935150 304.72845459]
[110.87834167 319.72384644]
[110.50732422 334.71926880]
[110.13630676 349.71469116]
[109.76528931 364.71008301]
[112.70586395 373.47467041]
[109.19506836 380.07055664]
[108.45326233 395.05221558]
[107.71145630 410.03384399]
[116.51309204 426.15139771]
[106.55609894 440.54626465]
[106.18508911 455.54168701]
[105.81407166 470.53710938]
[114.13072205 484.67092896]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 125]
[4 124]
[5 123]
[8 121]
[9 120]
[10 119]
[11 117]
[12 116]
[13 115]
[14 114]
[15 113]
[19 107]
[20 106]
[22 104]
[23 103]
[24 102]
[25 101]
[27 99]
[28 98]
[29 97]
[31 96]
[32 95]
[33 94]
[34 92]
[35 91]
[36 90]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[46 78]
[47 77]
[48 76]
[50 71]
[51 70]
[52 69]
[53 68]
[54 67]
[55 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
