%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUGCCGCCGCGCGAUUCCGAGGGGGUUAACGGCGGAGCCGCCGGCCGGGCGCGGACCGGAGCGCGUGAGGCUCCGGCGCGCAAGCCCGGAGCAGCCCGCUGGGGCGCACAGGGUCGCGCGGGCGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[123.16075897 531.20684814]
[129.20710754 515.36773682]
[129.20710754 500.36773682]
[129.20710754 485.36773682]
[129.20710754 470.36773682]
[129.20710754 455.36773682]
[118.52622986 445.05004883]
[118.31254578 429.83792114]
[129.20710754 418.70480347]
[129.20710754 403.70480347]
[129.20710754 388.70480347]
[129.20710754 373.70480347]
[129.20710754 358.70480347]
[129.20710754 343.70480347]
[129.20710754 328.70480347]
[129.20710754 313.70480347]
[129.20710754 298.70480347]
[127.78125763 283.77273560]
[124.94248962 269.04379272]
[122.10372162 254.31486511]
[112.09759521 243.28189087]
[117.08337402 228.26679993]
[114.24460602 213.53787231]
[104.23847198 202.50489807]
[109.22425079 187.48982239]
[106.38548279 172.76087952]
[103.54671478 158.03195190]
[100.70794678 143.30302429]
[97.86917877 128.57409668]
[84.48441315 124.08911896]
[74.86538696 113.75756073]
[71.34669495 100.08694458]
[56.85781097 96.20465851]
[42.36892319 92.32237244]
[27.88003540 88.44008636]
[13.39114761 84.55780029]
[-2.30054450 89.32254791]
[-14.08624268 77.91950989]
[-9.84183121 62.07914734]
[6.06640339 58.09667206]
[17.27343369 70.06890869]
[31.76232147 73.95119476]
[46.25120926 77.83348083]
[60.74009705 81.71576691]
[75.22898102 85.59805298]
[84.22303772 76.08124542]
[96.51197815 71.55966187]
[98.64670563 56.71233749]
[100.78142548 41.86501694]
[102.91614532 27.01769447]
[105.05087280 12.17037201]
[107.18559265 -2.67694974]
[108.96637726 -17.57086754]
[110.39221954 -32.50294495]
[111.81806183 -47.43502426]
[102.03110504 -59.55333328]
[103.68982697 -74.67626953]
[115.30309296 -83.93195343]
[116.72893524 -98.86402893]
[118.15477753 -113.79611206]
[119.58061218 -128.72819519]
[121.00645447 -143.66026306]
[122.43229675 -158.59234619]
[123.85813904 -173.52442932]
[112.76055145 -184.54158020]
[111.39248657 -200.11920166]
[120.39989471 -212.90202332]
[135.52975464 -216.85438538]
[149.63822937 -210.11010742]
[156.06369019 -195.85362244]
[151.77226257 -180.81640625]
[138.79022217 -172.09858704]
[137.36437988 -157.16650391]
[135.93853760 -142.23442078]
[134.51269531 -127.30234528]
[133.08685303 -112.37026978]
[131.66101074 -97.43819427]
[130.23516846 -82.50611115]
[139.88691711 -71.21987152]
[138.65362549 -56.05630493]
[126.75013733 -46.00918579]
[125.32429504 -31.07710648]
[123.89846039 -16.14502716]
[126.25908661 -11.89129257]
[125.90375519 -6.09593391]
[122.03291321 -0.54222715]
[119.89819336 14.30509472]
[117.76346588 29.15241623]
[115.62874603 43.99973679]
[113.49402618 58.84706116]
[111.35929871 73.69438171]
[123.75366211 83.97554779]
[128.64532471 99.31811523]
[124.48922729 114.87605286]
[112.59810638 125.73532867]
[115.43687439 140.46426392]
[118.27564240 155.19319153]
[121.11441040 169.92211914]
[123.95317841 184.65104675]
[134.16235352 196.73753357]
[128.97352600 210.69911194]
[131.81230164 225.42803955]
[142.02148438 237.51452637]
[136.83265686 251.47608948]
[139.67141724 266.20501709]
[142.51019287 280.93395996]
[150.75578308 268.40359497]
[164.72604370 262.94174194]
[179.28390503 266.55679321]
[189.07624817 277.91943359]
[190.50228882 292.85150146]
[183.03765869 305.86224365]
[169.42720032 312.16741943]
[154.67565918 309.44854736]
[144.20710754 298.70480347]
[144.20710754 313.70480347]
[144.20710754 328.70480347]
[144.20710754 343.70480347]
[144.20710754 358.70480347]
[144.20710754 373.70480347]
[144.20710754 388.70480347]
[144.20710754 403.70480347]
[144.20710754 418.70480347]
[155.10165405 429.83792114]
[154.88796997 445.05004883]
[144.20710754 455.36773682]
[144.20710754 470.36773682]
[144.20710754 485.36773682]
[144.20710754 500.36773682]
[144.20710754 515.36773682]
[150.25344849 531.20684814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 130]
[3 129]
[4 128]
[5 127]
[6 126]
[9 123]
[10 122]
[11 121]
[12 120]
[13 119]
[14 118]
[15 117]
[16 116]
[17 115]
[18 106]
[19 105]
[20 104]
[22 102]
[23 101]
[25 99]
[26 98]
[27 97]
[28 96]
[29 95]
[32 45]
[33 44]
[34 43]
[35 42]
[36 41]
[47 91]
[48 90]
[49 89]
[50 88]
[51 87]
[52 86]
[53 83]
[54 82]
[55 81]
[58 78]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
