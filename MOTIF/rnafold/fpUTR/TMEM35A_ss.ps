%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:51:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUUUCUCUCGAGCUCCCUCCUCUCCCUUUGUCAUUCUAGCUGCCUGCUGCCUCCGCAGCGUCCCCCCAGCUCUCCCUGUGCUAACUGCCUGCACCUUGGACAGAGCGGGUGCGCAAAUCAGAAGGAUUAGUUGGGACCUGCCUUGGCGACCCC\
) } def
/len { sequence length } bind def

/coor [
[-52.06237411 351.33618164]
[-53.36368942 363.76263428]
[-56.85775757 375.75411987]
[-62.43123627 386.92706299]
[-69.90428925 396.92434692]
[-79.03640747 405.42672729]
[-89.53412628 412.16308594]
[-101.06046295 416.91894531]
[-113.24573517 419.54342651]
[-125.69942474 419.95394897]
[-138.02268982 418.13891602]
[-149.82112122 414.15789795]
[-160.71739197 408.13983154]
[-170.38471985 419.60900879]
[-180.05206299 431.07821655]
[-182.40141296 447.30819702]
[-197.72993469 453.13647461]
[-210.26893616 442.56741333]
[-207.11938477 426.47354126]
[-191.52127075 421.41088867]
[-181.85392761 409.94168091]
[-172.18658447 398.47247314]
[-182.71183777 384.24407959]
[-189.30957031 367.81152344]
[-191.54838562 350.23663330]
[-189.27870178 332.65628052]
[-182.64276123 316.20895386]
[-172.06568909 301.96090698]
[-158.22828674 290.83709717]
[-142.02320862 283.56118774]
[-124.49734497 280.60836792]
[-106.78424072 282.17440796]
[-90.03073883 288.16262817]
[-81.80669403 275.61810303]
[-73.58264160 263.07357788]
[-76.22598267 256.05484009]
[-87.94287109 265.42044067]
[-100.47070312 257.17098999]
[-96.49614716 242.70715332]
[-81.51265717 242.01736450]
[-84.15599823 234.99861145]
[-98.61201477 230.99566650]
[-113.06802368 226.99272156]
[-127.68045807 233.61512756]
[-141.90267944 226.19163513]
[-144.82460022 210.41691589]
[-134.20478821 198.39196777]
[-118.18984985 199.34132385]
[-109.06507874 212.53669739]
[-94.60906219 216.53965759]
[-80.15304565 220.54260254]
[-65.45234680 217.56106567]
[-53.69818878 208.24227905]
[-41.94403076 198.92350769]
[-42.75343704 184.07482910]
[-34.56730652 171.44743347]
[-20.34914970 165.99790955]
[-5.47652721 170.01179504]
[6.27763128 160.69300842]
[18.03178978 151.37422180]
[29.78594971 142.05543518]
[33.09212875 135.39833069]
[41.86980438 132.67060852]
[53.80806732 123.58888245]
[65.74633026 114.50714874]
[77.68459320 105.42541504]
[89.62285614 96.34368134]
[99.17496490 84.77833557]
[105.83732605 71.33910370]
[112.49967957 57.89986801]
[113.51969147 48.76490402]
[119.43215942 44.26039505]
[126.36208344 30.95715904]
[133.29200745 17.65392113]
[140.22193909 4.35068417]
[147.15187073 -8.95255280]
[145.90487671 -27.29848862]
[161.01194763 -36.18144989]
[167.67430115 -49.62068176]
[165.43931580 -69.61782074]
[181.88916016 -79.71881104]
[188.00848389 -93.41384125]
[194.12780762 -107.10887146]
[200.24713135 -120.80390167]
[191.71464539 -133.65693665]
[191.50839233 -149.08291626]
[199.69416809 -162.15948486]
[213.65992737 -168.71394348]
[228.94924927 -166.65480042]
[240.68338013 -156.63911438]
[245.11796570 -141.86285400]
[240.83798218 -127.04106903]
[229.20913696 -116.90333557]
[213.94215393 -114.68457794]
[207.82283020 -100.98954773]
[201.70350647 -87.29451752]
[195.58418274 -73.59948730]
[200.09854126 -64.35641479]
[198.72132874 -53.94021988]
[191.67054749 -45.85578918]
[181.11354065 -42.95832443]
[174.45117188 -29.51909256]
[178.01808167 -17.92372131]
[172.53179932 -6.65515757]
[160.45510864 -2.02262616]
[153.52517700 11.28061104]
[146.59524536 24.58384705]
[139.66532898 37.88708496]
[132.73539734 51.19032288]
[125.93891144 64.56222534]
[119.27655792 78.00145721]
[112.61419678 91.44069672]
[115.60520172 98.31847382]
[130.50891113 100.01538849]
[121.58719635 112.07404327]
[124.57820129 118.95182800]
[138.95123291 123.24322510]
[154.38816833 119.77746582]
[164.36987305 130.83255005]
[178.74290466 135.12394714]
[193.11592102 139.41534424]
[207.48895264 143.70674133]
[222.23097229 137.37803650]
[236.30180359 145.08460999]
[238.90751648 160.91464233]
[228.04922485 172.72467041]
[212.05648804 171.45507812]
[203.19755554 158.07977295]
[188.82452393 153.78837585]
[174.45150757 149.49697876]
[160.07847595 145.20558167]
[145.66958618 148.97828674]
[134.65983582 137.61625671]
[120.28680420 133.32485962]
[104.61146545 123.24537659]
[98.70458984 108.28194427]
[86.76632690 117.36367798]
[74.82806396 126.44541168]
[62.88980103 135.52714539]
[50.95153809 144.60887146]
[39.10473251 153.80960083]
[27.35057449 163.12838745]
[15.59641647 172.44715881]
[3.84225750 181.76594543]
[4.35802746 197.16206360]
[-4.19089031 209.76243591]
[-18.35261345 214.85258484]
[-32.62524414 210.67765808]
[-44.37940598 219.99644470]
[-56.13356400 229.31523132]
[-61.03812027 271.29763794]
[-69.26216888 283.84216309]
[-77.48622131 296.38668823]
[-68.58163452 305.18154907]
[-61.38956833 315.41915894]
[-56.13909912 326.77087402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 22]
[14 21]
[15 20]
[33 153]
[34 152]
[35 151]
[41 51]
[42 50]
[43 49]
[52 150]
[53 149]
[54 148]
[58 144]
[59 143]
[60 142]
[61 141]
[63 140]
[64 139]
[65 138]
[66 137]
[67 136]
[68 112]
[69 111]
[70 110]
[72 109]
[73 108]
[74 107]
[75 106]
[76 105]
[78 102]
[79 101]
[81 97]
[82 96]
[83 95]
[84 94]
[116 134]
[117 133]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
