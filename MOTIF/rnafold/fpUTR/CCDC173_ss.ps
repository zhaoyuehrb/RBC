%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:16:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGCCAAGCAACCGCGUGGUACGAGUAACAACUCCACCGGCUGGCGUCCGCGGCGCUUGGCGCCACAGUCACUUUUCCAGAUCUAGGAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[258.02191162 259.89410400]
[257.35415649 241.93046570]
[262.66760254 224.73457336]
[250.38822937 216.11964417]
[238.10885620 207.50471497]
[225.82948303 198.88978577]
[213.55012512 190.27485657]
[201.27075195 181.65992737]
[188.99137878 173.04499817]
[176.71200562 164.43006897]
[164.61923218 166.19348145]
[154.28237915 158.94648743]
[151.65370178 146.18676758]
[139.66589355 137.17054749]
[127.67806244 128.15432739]
[115.69024658 119.13811493]
[103.70242310 110.12190247]
[92.35911560 118.45436859]
[73.54734802 112.29298401]
[59.44255447 107.18858337]
[45.33776474 102.08419037]
[33.21800995 106.86245728]
[21.49734688 102.17251587]
[16.35949707 91.08436584]
[2.43118715 85.51640320]
[-11.49712372 79.94844818]
[-25.42543411 74.38048553]
[-41.57038116 77.25672913]
[-51.92534256 64.54032898]
[-45.83802414 49.31283188]
[-29.57053566 47.23898315]
[-19.85747528 60.45217514]
[-5.92916489 66.02013397]
[7.99914598 71.58809662]
[21.92745590 77.15605164]
[39.03401566 73.64306641]
[50.44216156 87.97940063]
[64.54695129 93.08379364]
[78.65174866 98.18819427]
[90.01747131 88.39940643]
[87.06071472 73.69371033]
[84.10395813 58.98800659]
[72.86561584 47.04515457]
[77.84773254 31.42111588]
[93.92512512 28.18856430]
[104.55876160 40.67287064]
[98.80965424 56.03125381]
[101.76641083 70.73695374]
[104.72316742 85.44264984]
[112.71864319 98.13407898]
[124.70646667 107.15029907]
[136.69429016 116.16651154]
[148.68209839 125.18273163]
[160.66992188 134.19894409]
[178.91148376 135.90823364]
[185.32693481 152.15069580]
[197.60630798 160.76562500]
[209.88568115 169.38055420]
[222.16505432 177.99548340]
[234.44442749 186.61041260]
[246.72378540 195.22534180]
[259.00317383 203.84027100]
[271.28253174 212.45520020]
[280.82431030 204.42883301]
[291.95159912 198.82366943]
[304.06246948 195.93809509]
[316.50296021 195.92344666]
[328.60232544 198.77619934]
[339.70913696 204.33830261]
[349.22656250 212.30599976]
[356.64419556 222.24636841]
[361.56555176 233.62088013]
[363.72933960 245.81449890]
[363.02307129 258.16903687]
[359.48922729 270.01864624]
[353.32244873 280.72564697]
[364.01635742 291.24420166]
[374.71029663 301.76272583]
[385.40423584 312.28128052]
[400.95220947 310.60964966]
[413.90829468 319.36599731]
[418.15499878 334.41589355]
[411.68719482 348.65322876]
[397.55874634 355.35556030]
[382.44070435 351.35824585]
[373.47131348 338.54870605]
[374.88568115 322.97521973]
[364.19174194 312.45666504]
[353.49780273 301.93811035]
[342.80389404 291.41955566]
[327.03805542 299.77651978]
[309.37438965 302.45639038]
[291.79598999 299.14358521]
[276.28121948 290.19613647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 63]
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[19 39]
[20 38]
[21 37]
[24 35]
[25 34]
[26 33]
[27 32]
[40 49]
[41 48]
[42 47]
[76 90]
[77 89]
[78 88]
[79 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
