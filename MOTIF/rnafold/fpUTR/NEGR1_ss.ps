%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:08:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUGUGGCGCGCCGCCUGGUUCCCGGGAAGACUCGCCAGCACCAGGGGGUGGGGGAGUGCGAGCUGAAAGCUGCUGGAGAGUGAGCAGCCCUAGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[86.45365906 193.90681458]
[92.50000000 178.06768799]
[92.50000000 163.06768799]
[92.50000000 148.06768799]
[92.50000000 133.06768799]
[92.50000000 118.06768036]
[86.17247772 104.46759033]
[74.69848633 94.80593872]
[63.22449875 85.14427948]
[47.68462372 82.17395782]
[42.93279266 68.05767822]
[31.45880508 58.39601898]
[19.98481750 48.73436356]
[16.12678528 57.95694733]
[7.52075434 65.69412994]
[-5.11388683 69.99253082]
[-19.80834961 73.00463104]
[-34.50281143 76.01673889]
[-49.19727325 79.02884674]
[-63.89173508 82.04095459]
[-78.19409180 91.14474487]
[-90.90138245 79.92150879]
[-83.63449097 64.60391998]
[-66.90383911 67.34648895]
[-52.20938110 64.33438110]
[-37.51491547 61.32227707]
[-22.82045555 58.31017303]
[-8.12599277 55.29806519]
[-4.34237146 48.82240295]
[-11.77519703 35.79346848]
[3.22487164 35.87107849]
[7.00849295 29.39541435]
[2.41763425 15.11521816]
[-2.17322469 0.83502185]
[-6.76408339 -13.44517517]
[-18.35373688 -24.21506310]
[-14.88300037 -38.69964981]
[-19.47385979 -52.97984695]
[-24.31236839 -57.90000534]
[-25.60324669 -63.66571045]
[-23.87617302 -68.29258728]
[-27.57035637 -82.83057404]
[-31.26453972 -97.36855316]
[-34.95872498 -111.90653992]
[-46.78471375 -123.26779175]
[-42.59640503 -139.12307739]
[-26.70236778 -143.16183472]
[-15.45302582 -131.22933960]
[-20.42074013 -115.60072327]
[-16.72655487 -101.06273651]
[-13.03237152 -86.52475739]
[-9.33818817 -71.98677063]
[-5.19366217 -57.57070541]
[-0.60280359 -43.29050827]
[10.65848160 -33.54203415]
[7.51611328 -18.03603363]
[12.10697174 -3.75583696]
[16.69783020 10.52435970]
[21.28869057 24.80455589]
[29.64647293 37.26037598]
[41.12046051 46.92203140]
[52.59444809 56.58368683]
[67.31362915 58.86294556]
[72.88615417 73.67028809]
[84.36014557 83.33194733]
[95.83412933 92.99360657]
[97.30996704 86.00453949]
[103.17494202 79.89722443]
[112.75553894 76.82633209]
[124.44985962 78.50872040]
[135.97312927 85.85855103]
[150.32299805 90.22676849]
[164.67286682 94.59499359]
[179.02272034 98.96321106]
[193.37258911 103.33142853]
[207.72245789 107.69965363]
[220.02200317 98.23915863]
[235.53416443 97.84860992]
[248.29418945 106.67816925]
[253.39561462 121.33269501]
[248.87681580 136.17723083]
[236.47535706 145.50373840]
[220.95988464 145.72598267]
[208.29638672 136.75852966]
[203.35423279 122.04951477]
[189.00437927 117.68129730]
[174.65451050 113.31307983]
[160.30464172 108.94485474]
[145.95477295 104.57663727]
[131.60490417 100.20841217]
[125.57868195 104.67323303]
[134.50811768 116.72583008]
[122.45536041 125.65506744]
[113.52622986 113.60286713]
[107.50000000 118.06768036]
[107.50000000 133.06768799]
[107.50000000 148.06768799]
[107.50000000 163.06768799]
[107.50000000 178.06768799]
[113.54634094 193.90681458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 95]
[7 66]
[8 65]
[9 64]
[11 62]
[12 61]
[13 60]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[32 59]
[33 58]
[34 57]
[35 56]
[37 54]
[38 53]
[41 52]
[42 51]
[43 50]
[44 49]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
