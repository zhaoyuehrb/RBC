%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGGCGGCACUGCGGUGAAAGCCGAGGCAGCGGGCAGACGAGCAGGGGGCGGGCGGACAUCUUGGGAUCCGGAGAGUGGCCGGGCCGGCAGAGCAGGGGGCCGAGGACACCAGGUCUGUUCUCAGAGCGAUGGGCCGCGGAGACUGAUCUGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[97.14948273 110.46694946]
[92.70225525 109.20347595]
[88.87947083 106.01535797]
[74.02452850 103.93432617]
[59.16959000 101.85329437]
[44.31464767 99.77226257]
[29.57449150 105.52016449]
[18.04373741 96.09196472]
[3.18879628 94.01092529]
[-11.55135918 99.75882721]
[-23.08211327 90.33062744]
[-37.93705368 88.24959564]
[-52.67721176 93.99749756]
[-64.20796204 84.56929779]
[-79.06290436 82.48826599]
[-93.91784668 80.40723419]
[-100.37742615 89.98958588]
[-109.91835785 96.41845703]
[-121.12424469 98.78606415]
[-132.34887695 96.78410339]
[-141.95809937 90.74328613]
[-148.56767273 81.57946777]
[-151.24269104 70.65493774]
[-165.94714355 67.69203186]
[-180.65161133 64.72911835]
[-195.35606384 61.76620865]
[-210.06053162 58.80329514]
[-224.91546631 56.72226334]
[-239.86805725 55.53050995]
[-256.27514648 63.83470535]
[-270.34680176 53.38773727]
[-285.32012939 52.49351120]
[-299.54257202 66.61271667]
[-319.26443481 65.82128906]
[-331.91522217 51.06774902]
[-346.91522217 51.06774902]
[-357.91189575 62.41888809]
[-373.71530151 62.58597946]
[-384.94955444 51.46989059]
[-384.94955444 35.66560364]
[-373.71530151 24.54951668]
[-357.91189575 24.71660995]
[-346.91522217 36.06774902]
[-331.91522217 36.06774902]
[-326.82794189 27.04437828]
[-318.37158203 20.92252541]
[-308.05181885 18.87580109]
[-297.74145508 21.34463501]
[-289.34045410 27.94367409]
[-284.42590332 37.52019119]
[-269.45257568 38.41441727]
[-260.16693115 30.60858536]
[-247.65188599 31.26542664]
[-238.67630005 40.57792664]
[-223.72372437 41.76968002]
[-232.30967712 29.47003365]
[-229.86488342 14.67060947]
[-217.77934265 5.78579760]
[-202.92445374 7.86716557]
[-193.74612427 19.73132706]
[-195.46281433 34.63276672]
[-207.09761047 44.09883499]
[-192.39315796 47.06174469]
[-177.68869019 50.02465820]
[-162.98423767 52.98756790]
[-148.27976990 55.95047760]
[-135.34925842 42.53247833]
[-116.80706787 39.53139877]
[-100.04008484 48.32398224]
[-91.83681488 65.55229187]
[-76.98187256 67.63332367]
[-62.12693405 69.71435547]
[-48.44930267 63.81760406]
[-35.85602188 73.39465332]
[-21.00107956 75.47568512]
[-7.32344961 69.57893372]
[5.26982927 79.15598297]
[20.12477112 81.23702240]
[33.80240250 75.34027100]
[46.39567947 84.91732025]
[61.25062180 86.99835205]
[76.10556793 89.07938385]
[90.96051025 91.16041565]
[105.87090302 92.79753876]
[120.82348633 93.98928833]
[135.77606201 95.18104553]
[144.63461304 92.73398590]
[151.01312256 96.54804230]
[165.93904114 98.03684998]
[180.86497498 99.52565002]
[195.79090881 101.01445770]
[210.71684265 102.50326538]
[225.64277649 103.99207306]
[240.14276123 97.66269684]
[252.03923035 106.62502289]
[266.96517944 108.11383057]
[281.89108276 109.60263824]
[290.29165649 98.63574219]
[302.91958618 93.30718994]
[316.42184448 94.91535950]
[327.27056885 102.93198395]
[332.68469238 115.16859436]
[347.57806396 116.95386505]
[362.47143555 118.73914337]
[377.09439087 112.69931030]
[388.81033325 121.89639282]
[403.70370483 123.68166351]
[411.90805054 116.43621063]
[422.53186035 114.96334839]
[432.00067139 119.51303864]
[437.26345825 128.34944153]
[452.07409668 130.72540283]
[466.88473511 133.10137939]
[481.74316406 121.41694641]
[500.11816406 124.19927979]
[510.49014282 139.23553467]
[525.38354492 141.02081299]
[540.27691650 142.80609131]
[555.17028809 144.59135437]
[570.02624512 137.64642334]
[583.31188965 147.26011658]
[581.36010742 163.54270935]
[566.17871094 169.74404907]
[553.38500977 159.48474121]
[538.49163818 157.69946289]
[523.59826660 155.91419983]
[508.70486450 154.12892151]
[501.42886353 162.99916077]
[490.65399170 167.27659607]
[479.03674316 165.78132629]
[469.50247192 158.77244568]
[464.50875854 147.91200256]
[449.69812012 145.53604126]
[434.88748169 143.16006470]
[417.42803955 151.39573669]
[401.91845703 138.57504272]
[387.02505493 136.78976440]
[373.46737671 142.95729065]
[360.68615723 133.63252258]
[345.79278564 131.84724426]
[330.89941406 130.06198120]
[320.15496826 142.43994141]
[303.99224854 146.02984619]
[288.71499634 139.22938538]
[280.40228271 124.52857208]
[265.47634888 123.03976440]
[250.55043030 121.55095673]
[237.11804199 127.98682404]
[224.15397644 118.91800690]
[209.22804260 117.42919922]
[194.30210876 115.94039154]
[179.37617493 114.45158386]
[164.45024109 112.96277618]
[149.52430725 111.47396851]
[134.58432007 110.13362885]
[119.63172913 108.94187164]
[104.67914581 107.75012207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 83]
[4 82]
[5 81]
[6 80]
[8 78]
[9 77]
[11 75]
[12 74]
[14 72]
[15 71]
[16 70]
[23 66]
[24 65]
[25 64]
[26 63]
[27 62]
[28 55]
[29 54]
[31 51]
[32 50]
[35 44]
[36 43]
[84 157]
[85 156]
[86 155]
[88 154]
[89 153]
[90 152]
[91 151]
[92 150]
[93 149]
[95 147]
[96 146]
[97 145]
[102 141]
[103 140]
[104 139]
[106 137]
[107 136]
[111 134]
[112 133]
[113 132]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
