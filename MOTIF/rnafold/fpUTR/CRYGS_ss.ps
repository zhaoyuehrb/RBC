%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUCAUGACUAAGCAAAUGUUUGACUGAAACCAGCCCAUAUAAAUGUCACUGUGCCUCUAACUCUCUGUAGCCAUUCCUGAAUUUCUUUCAGCACUGGGAAAACCAGUCUAUGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[34.04906082 213.79519653]
[19.91502190 218.81803894]
[4.91728640 218.55740356]
[-9.03369141 213.04649353]
[-20.16079330 202.98728943]
[-27.04661751 189.66116333]
[-28.81402779 174.76565552]
[-25.23788643 160.19818115]
[-16.77372932 147.81440735]
[-4.50190496 139.19277954]
[-19.50190544 139.19277954]
[-34.50190353 139.19277954]
[-49.50190353 139.19277954]
[-63.94126892 143.25538635]
[-76.74063110 151.07691956]
[-89.53999329 158.89845276]
[-102.33935547 166.71997070]
[-115.13872528 174.54150391]
[-122.50222015 189.19451904]
[-138.88728333 189.87380981]
[-147.43838501 175.88056946]
[-139.35885620 161.60984802]
[-122.96025085 161.74214172]
[-110.16088867 153.92060852]
[-97.36152649 146.09909058]
[-84.56215668 138.27755737]
[-71.76279449 130.45602417]
[-73.43170166 123.14406586]
[-78.43842316 101.20819092]
[-93.36388397 99.71467590]
[-108.28934479 98.22115326]
[-123.00658417 105.45544434]
[-136.47781372 96.10353851]
[-134.84498596 79.78588867]
[-119.78781891 73.28868103]
[-106.79582977 83.29569244]
[-91.87036896 84.78921509]
[-76.94490814 86.28273010]
[-89.32720184 77.81639862]
[-83.90734100 63.82979202]
[-73.37832642 53.14616776]
[-59.47220993 47.52299881]
[-44.47658920 47.88531494]
[-30.85827065 54.17351151]
[-20.85750580 65.35317230]
[-16.11944580 79.58520508]
[-17.42350960 94.52841187]
[-24.55517960 107.72459412]
[-36.33816528 117.00140381]
[-49.50190353 124.19278717]
[-34.50190353 124.19278717]
[-19.50190544 124.19278717]
[-4.50190496 124.19278717]
[-0.09978893 120.49656677]
[6.18109512 119.24784088]
[12.92595482 121.34332275]
[27.14486504 116.56602478]
[41.36377335 111.78872681]
[55.58268356 107.01142883]
[54.35897064 92.11719513]
[58.13731003 77.20562744]
[66.78332520 63.95573425]
[79.60076904 53.95091248]
[95.38179779 48.49202347]
[112.51894379 48.43382645]
[116.94027710 34.10023499]
[110.74526978 19.30153656]
[118.57889557 5.30104208]
[134.43186951 2.83873367]
[146.14312744 13.80348301]
[144.72882080 29.78407288]
[131.27386475 38.52156448]
[126.85253906 52.85515594]
[132.08930969 58.22415543]
[142.82731628 47.75060654]
[153.56532288 37.27705383]
[164.30348206 26.80366707]
[174.77670288 37.54199219]
[164.03887939 48.01505661]
[153.30087280 58.48860931]
[142.56286621 68.96215820]
[147.79963684 74.33116150]
[162.23901367 70.26855469]
[176.67837524 66.20594788]
[191.11773682 62.14334106]
[205.55709839 58.08073425]
[214.62731934 44.84778976]
[230.63819885 43.83232498]
[241.30757141 55.81331253]
[238.45080566 71.59996796]
[224.25935364 79.08211517]
[209.61970520 72.52009583]
[195.18034363 76.58270264]
[180.74098206 80.64530945]
[166.30162048 84.70791626]
[151.86224365 88.77052307]
[148.89079285 103.49661255]
[142.14733887 115.67352295]
[155.13772583 123.17352295]
[168.12809753 130.67352295]
[181.11848450 138.17352295]
[194.10887146 145.67352295]
[209.91505432 142.92686462]
[221.82138062 153.67948914]
[220.69433594 169.68290710]
[207.39848328 178.66065979]
[192.13328552 173.72579956]
[186.60887146 158.66390991]
[173.61848450 151.16390991]
[160.62809753 143.66390991]
[147.63772583 136.16390991]
[134.64733887 128.66390991]
[121.07872009 139.72084045]
[104.31644440 144.75964355]
[86.90018463 143.01689148]
[71.46868896 134.75660706]
[60.35998535 121.23033905]
[46.14107513 126.00763702]
[31.92216492 130.78494263]
[17.70325470 135.56224060]
[32.08404160 139.82756042]
[44.05100250 148.87144470]
[52.07975769 161.54183960]
[55.14757156 176.22477722]
[52.86366653 191.04988098]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 53]
[11 52]
[12 51]
[13 50]
[14 27]
[15 26]
[16 25]
[17 24]
[18 23]
[29 38]
[30 37]
[31 36]
[56 120]
[57 119]
[58 118]
[59 117]
[65 73]
[66 72]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
