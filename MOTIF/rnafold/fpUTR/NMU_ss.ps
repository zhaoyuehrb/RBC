%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUGUGUCCGGGCCCCGAGGCACAGCCAGGGCACCAGGUGGAGCACCAGCUACGCGUGGCGCAGCGCAGCGUCCCUAGCACCGAGCCUCCCGCAGCCGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[99.60034943 136.15031433]
[92.87877655 135.44422913]
[86.40608215 133.49942017]
[80.40847778 130.38383484]
[75.09556580 126.20639038]
[62.73159790 134.69946289]
[50.36762619 143.19252014]
[38.00365448 151.68559265]
[25.63968468 160.17866516]
[13.27571392 168.67173767]
[0.91174227 177.16479492]
[-11.32621956 185.83845520]
[-23.43553543 194.69082642]
[-35.54485321 203.54319763]
[-44.76329422 217.77192688]
[-60.98787308 212.85264587]
[-60.75225449 195.90032959]
[-44.39722443 191.43388367]
[-32.28790665 182.58151245]
[-20.17859077 173.72914124]
[-16.57962036 167.13714600]
[-7.58132648 164.80082703]
[4.78264475 156.30775452]
[17.14661598 147.81469727]
[29.51058769 139.32162476]
[41.87455750 130.82855225]
[54.23852921 122.33548737]
[66.60250092 113.84241486]
[64.19922638 105.03093719]
[64.08089447 95.89836884]
[66.25505066 87.02758026]
[70.58293152 78.98473358]
[76.78831482 72.28316498]
[84.47515106 67.35057831]
[80.98417664 52.76246643]
[70.24760437 41.14194489]
[74.81040955 26.96343803]
[71.31943512 12.37532234]
[67.82846069 -2.21279240]
[57.09188080 -13.83331203]
[61.65468597 -28.01181984]
[58.16371155 -42.59993362]
[54.67273712 -57.18804932]
[43.93616104 -68.80857086]
[48.49896622 -82.98707581]
[45.00799179 -97.57519531]
[41.51701736 -112.16330719]
[29.85070229 -123.68846130]
[34.25983810 -139.48376465]
[50.20867920 -143.30036926]
[61.29043198 -131.21206665]
[56.10513306 -115.65428162]
[59.59610748 -101.06616974]
[63.08707809 -86.47805023]
[73.57395935 -75.90097046]
[69.26085663 -60.67902374]
[72.75182343 -46.09090805]
[76.24279785 -31.50279427]
[86.72968292 -20.92571259]
[82.41657257 -5.70376587]
[85.90754700 8.88434887]
[89.39852142 23.47246361]
[99.88539886 34.04954529]
[95.57229614 49.27149200]
[99.06327057 63.85960770]
[125.75064850 74.62462616]
[136.12274170 101.46716309]
[150.65805054 105.17191315]
[165.24615479 108.66288757]
[179.88395691 111.93933105]
[195.04093933 107.40323639]
[205.77082825 117.73371887]
[220.40861511 121.01016235]
[235.04640198 124.28661346]
[242.96813965 113.86807251]
[254.22962952 107.29177094]
[267.10290527 105.52508545]
[279.62854004 108.80057526]
[289.91387939 116.58608246]
[296.41906738 127.67084503]
[298.18746948 140.35365295]
[312.60775757 144.48350525]
[327.27783203 137.98977661]
[341.43423462 145.53799438]
[344.21740723 161.33778381]
[333.49230957 173.26892090]
[317.48632812 172.17884827]
[308.47790527 158.90377808]
[294.05761719 154.77392578]
[282.25271606 167.12559509]
[265.75982666 171.91270447]
[249.00561523 167.75852966]
[236.53315735 155.69862366]
[231.76995850 138.92439270]
[217.13217163 135.64794922]
[202.49438477 132.37150574]
[188.38438416 137.14195251]
[176.60749817 126.57712555]
[161.96971130 123.30067444]
[154.63961792 124.93674469]
[146.95329285 119.70720673]
[132.41799927 116.00246429]
[128.87303162 121.75669861]
[124.31897736 126.75056458]
[118.91501617 130.80953979]
[112.84999847 133.79176331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 28]
[6 27]
[7 26]
[8 25]
[9 24]
[10 23]
[11 22]
[12 20]
[13 19]
[14 18]
[34 65]
[35 64]
[37 62]
[38 61]
[39 60]
[41 58]
[42 57]
[43 56]
[45 54]
[46 53]
[47 52]
[67 102]
[68 101]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[81 89]
[82 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
