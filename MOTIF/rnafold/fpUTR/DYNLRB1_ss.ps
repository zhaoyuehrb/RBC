%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:00:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCUUUGCGCAGGCGCAGAAAGGCACAGGACUCGCUAAGUGUUCGCUACGCGGGGCUACCGGAUCGGUCGGAA\
) } def
/len { sequence length } bind def

/coor [
[88.75898743 132.33512878]
[82.13555145 129.20243835]
[76.33045959 124.73203278]
[71.60962677 119.12870026]
[57.63575745 124.58132172]
[43.66189194 130.03393555]
[29.68802452 135.48655701]
[15.95142460 141.51199341]
[2.47555995 148.09994507]
[-11.00030518 154.68789673]
[-24.47616959 161.27583313]
[-33.18011856 175.17451477]
[-49.55676270 174.31568909]
[-56.75921249 159.58283997]
[-47.37820435 146.13186646]
[-31.06411743 147.79997253]
[-17.58825302 141.21202087]
[-4.11238861 134.62406921]
[9.36347580 128.03613281]
[11.79911709 123.61961365]
[17.18024826 120.84687805]
[24.23540497 121.51269531]
[38.20927048 116.06007385]
[52.18313599 110.60745239]
[66.15700531 105.15483856]
[66.88697052 91.31392670]
[73.04489136 78.89685822]
[83.62134552 69.93905640]
[96.88262177 65.90890503]
[110.65490723 67.46703339]
[118.33318329 54.58122635]
[118.75052643 38.76552582]
[131.91218567 31.79272079]
[139.59045410 18.90691185]
[147.26873779 6.02110243]
[154.94700623 -6.86470652]
[162.62528992 -19.75051689]
[158.96514893 -34.89123154]
[166.93557739 -47.84989166]
[181.39250183 -51.24596024]
[189.07077026 -64.13176727]
[196.74905396 -77.01757812]
[196.43385315 -93.41369629]
[210.61355591 -101.65188599]
[224.70130920 -93.25740814]
[224.20483398 -76.86578369]
[209.63485718 -69.33930206]
[201.95657349 -56.45349121]
[194.27830505 -43.56768417]
[198.17228699 -29.23685837]
[190.56898499 -16.05943680]
[175.51109314 -12.07223988]
[167.83282471 0.81356901]
[160.15454102 13.69937801]
[152.47627258 26.58518791]
[144.79798889 39.47099686]
[144.92985535 54.36501694]
[131.21899414 62.25950241]
[123.54071045 75.14530945]
[134.05068970 96.46855927]
[128.14025879 119.49478912]
[138.29948425 130.53063965]
[148.45870972 141.56649780]
[158.61791992 152.60235596]
[174.52334595 154.69931030]
[182.67698669 168.51588440]
[176.82406616 183.45318604]
[161.45446777 188.05259705]
[148.35839844 178.78584290]
[147.58206177 162.76158142]
[137.42285156 151.72572327]
[127.26361847 140.68986511]
[117.10440063 129.65400696]
[110.40227509 132.61462402]
[103.22364807 134.08120728]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 25]
[5 24]
[6 23]
[7 22]
[8 19]
[9 18]
[10 17]
[11 16]
[30 59]
[31 58]
[33 56]
[34 55]
[35 54]
[36 53]
[37 52]
[40 49]
[41 48]
[42 47]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
