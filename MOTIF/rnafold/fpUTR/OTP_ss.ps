%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUUUUUAACCACAAACCGAAUUUUCUUUCAUUUAGGUGAUCUAUAUAUAUCUAUAUCGUAUAGCUUAUAGCUUAUAUCUAUUUUAAAUAACUUAAAGCCGCUAAAAUUUGGGGGGGAACAGCUUUCGCCCUGGAGCGGUGCGCG\
) } def
/len { sequence length } bind def

/coor [
[180.34686279 320.20941162]
[171.99688721 307.74835205]
[163.64689636 295.28729248]
[155.29692078 282.82626343]
[146.94692993 270.36520386]
[146.93997192 285.36520386]
[141.29345703 299.26184082]
[130.83609009 310.01559448]
[117.10263062 316.04821777]
[102.10868073 316.47427368]
[88.05482483 311.23126221]
[77.00366211 301.08868408]
[70.57711792 287.53512573]
[69.71839142 272.55972290]
[74.55349731 258.36035156]
[84.37281799 247.02101135]
[97.73522949 240.20588684]
[112.67959595 238.91519165]
[127.01261902 243.33837891]
[138.63003540 252.82545471]
[134.26629639 238.47421265]
[129.90257263 224.12298584]
[125.53884888 209.77175903]
[121.17512512 195.42051697]
[116.81139374 181.06929016]
[112.44766998 166.71804810]
[108.08393860 152.36682129]
[103.72021484 138.01559448]
[88.90250397 136.54956055]
[75.77117157 129.52944946]
[66.32165527 118.02204132]
[61.98991013 103.77600098]
[63.43418884 88.95614624]
[70.43502045 75.81452942]
[81.92855072 66.34813690]
[77.56482697 51.99690628]
[73.20109558 37.64567184]
[68.83737183 23.29443932]
[64.47364807 8.94320583]
[60.10991669 -5.40802717]
[55.74619293 -19.75926018]
[50.63240433 -33.86064911]
[44.78276062 -47.67302322]
[30.40913010 -53.67606354]
[24.67352295 -67.76710510]
[30.48508453 -81.43317413]
[24.63544273 -95.24554443]
[12.12900352 -104.93572235]
[14.29036903 -119.67267609]
[8.44072628 -133.48504639]
[2.59108233 -147.29742432]
[-3.25856090 -161.10980225]
[-9.10820389 -174.92218018]
[-24.05024147 -185.63026428]
[-21.29982948 -202.93313599]
[-27.43937874 -216.61911011]
[-33.57892609 -230.30508423]
[-39.71847534 -243.99105835]
[-45.85802460 -257.67703247]
[-61.14518738 -259.15969849]
[-73.63359833 -268.10034180]
[-79.96393585 -282.09399414]
[-78.43337250 -297.37643433]
[-69.45362854 -309.83676147]
[-55.44019699 -316.12319946]
[-40.16262817 -314.54473877]
[-27.73051453 -305.52597046]
[-21.48802567 -291.49291992]
[-23.11436272 -276.22036743]
[-32.17205048 -263.81658936]
[-26.03249931 -250.13061523]
[-19.89295006 -236.44464111]
[-13.75340176 -222.75866699]
[-7.61385345 -209.07269287]
[3.61071229 -204.45069885]
[8.81890202 -193.04269409]
[4.70416975 -180.77182007]
[10.55381298 -166.95944214]
[16.40345573 -153.14706421]
[22.25309944 -139.33470154]
[28.10274315 -125.52232361]
[40.19077682 -116.82009125]
[38.44781494 -101.09519196]
[44.29745865 -87.28281403]
[58.15632248 -81.94732666]
[64.28545380 -68.02294159]
[58.59513474 -53.52266693]
[64.44477844 -39.71029282]
[72.73694611 -52.20989227]
[87.65917969 -53.73529816]
[98.30892181 -43.17201233]
[96.90519714 -28.23783684]
[84.47360229 -19.84405899]
[70.09742737 -24.12298775]
[74.46115112 -9.77175426]
[78.82487488 4.57947874]
[83.18860626 18.93071175]
[87.55233002 33.28194427]
[91.91606140 47.63317871]
[96.27978516 61.98440933]
[111.09749603 63.45043564]
[124.22882843 70.47054291]
[133.67834473 81.97795868]
[138.01008606 96.22399902]
[136.56581116 111.04385376]
[129.56497192 124.18547058]
[118.07144928 133.65185547]
[122.43517303 148.00309753]
[126.79890442 162.35432434]
[131.16262817 176.70556641]
[135.52635193 191.05679321]
[139.89007568 205.40802002]
[144.25381470 219.75926208]
[148.61753845 234.11048889]
[152.98126221 248.46173096]
[159.40798950 262.01522827]
[167.75796509 274.47625732]
[176.10795593 286.93731689]
[184.45793152 299.39837646]
[192.80790710 311.85943604]
[208.07566833 310.94143677]
[221.66329956 317.74386597]
[229.96647644 330.35037231]
[230.83892822 345.32015991]
[224.14628601 358.62707520]
[232.49627686 371.08813477]
[245.01594543 374.36886597]
[251.70597839 384.97598267]
[249.42286682 396.89828491]
[257.50827026 409.53262329]
[265.59368896 422.16693115]
[273.67907715 434.80126953]
[289.16754150 437.94506836]
[297.82675171 451.16601562]
[294.51934814 466.62036133]
[281.20758057 475.13931274]
[265.78909302 471.66870117]
[257.41134644 458.26760864]
[261.04476929 442.88665771]
[252.95935059 430.25234985]
[244.87394714 417.61801147]
[236.78854370 404.98370361]
[220.80677795 397.80471802]
[220.03521729 379.43811035]
[211.68524170 366.97708130]
[196.83300781 368.10705566]
[183.31941223 361.60794067]
[174.81712341 349.13485718]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[4 117]
[5 116]
[20 115]
[21 114]
[22 113]
[23 112]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 88]
[43 87]
[46 84]
[47 83]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[125 145]
[126 144]
[129 142]
[130 141]
[131 140]
[132 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
