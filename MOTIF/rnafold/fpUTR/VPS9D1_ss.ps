%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGUCCCUUCCUGCGGUCCGCUGCUCGGGCGGCUCCAGCACCAGCGCCGGCUGCGUUCCGGGCCUCCGGUCGCCCGUCCAGCCCCUCGGCUACCGCCGCCGCCUCCCCCGCUCGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[66.65202332 143.33804321]
[57.01020813 154.82870483]
[47.36839294 166.31938171]
[37.72658157 177.81004333]
[28.22876167 189.42001343]
[18.87641335 201.14749146]
[9.52406693 212.87495422]
[0.17172004 224.60243225]
[-9.18062687 236.32989502]
[-4.92285633 251.25140381]
[-10.28049088 265.81420898]
[-23.19341087 274.41864014]
[-38.69633484 273.75610352]
[-50.82807541 264.08135986]
[-54.92372513 249.11454773]
[-49.40842819 234.61071777]
[-36.40292358 226.14688110]
[-20.90810013 226.97755432]
[-11.55575180 215.25007629]
[-2.20340514 203.52261353]
[7.14894199 191.79513550]
[16.50128937 180.06767273]
[18.23083878 172.79689026]
[26.23591232 168.16822815]
[35.87772751 156.67756653]
[45.51954269 145.18688965]
[55.16135406 133.69622803]
[88.88692474 86.45636749]
[84.46559906 72.12277985]
[70.77351379 64.69549561]
[66.49384308 50.09620667]
[73.65900421 37.08866882]
[69.23767853 22.75507736]
[64.81635284 8.42148590]
[60.39502335 -5.91210651]
[55.97369385 -20.24569893]
[51.55236816 -34.57929230]
[47.13103867 -48.91288376]
[42.70971298 -63.24647522]
[38.28838348 -77.58007050]
[24.59630013 -85.00735474]
[20.31663322 -99.60663605]
[27.48179436 -112.61417389]
[23.06046677 -126.94776917]
[9.36838150 -134.37504578]
[5.08871365 -148.97433472]
[12.25387478 -161.98187256]
[7.83254719 -176.31546021]
[3.05524731 -190.53437805]
[-2.07505488 -204.62976074]
[-7.20535707 -218.72515869]
[-12.33565903 -232.82054138]
[-17.46596146 -246.91593933]
[-31.33971977 -254.97189331]
[-33.54883957 -270.86212158]
[-22.39867783 -282.39700317]
[-6.44268036 -280.72796631]
[2.07907557 -267.13534546]
[-3.37057185 -252.04623413]
[1.75973022 -237.95085144]
[6.89003229 -223.85545349]
[12.02033424 -209.76007080]
[17.15063667 -195.66467285]
[21.12148476 -192.83444214]
[23.29284286 -187.43247986]
[22.16613960 -180.73680115]
[26.58746719 -166.40319824]
[39.83500671 -159.69215393]
[44.52305222 -145.21882629]
[37.39405823 -131.36909485]
[41.81538391 -117.03549957]
[55.06292725 -110.32444763]
[59.75096893 -95.85113525]
[52.62197495 -82.00139618]
[57.04330444 -67.66780090]
[61.46463013 -53.33420944]
[65.88595581 -39.00061798]
[70.30728912 -24.66702652]
[74.72861481 -10.33343410]
[79.14994049 4.00015783]
[83.57126617 18.33374977]
[87.99259949 32.66734314]
[101.24013519 39.37839508]
[105.92818451 53.85171127]
[98.79918671 67.70144653]
[103.22052002 82.03504181]
[115.92137909 90.01552582]
[130.75384521 87.77989197]
[145.58630371 85.54425812]
[158.06333923 74.90208435]
[173.42564392 80.64067078]
[175.86981201 96.85665894]
[162.88148499 106.86841583]
[147.82194519 100.37671661]
[132.98947144 102.61235046]
[118.15701294 104.84798431]
[115.59186554 111.89568329]
[125.23391724 123.38614655]
[110.46156311 125.99106598]
[107.89640808 133.03875732]
[117.82169342 144.28547668]
[127.74698639 155.53219604]
[137.67227173 166.77891541]
[147.59756470 178.02563477]
[160.46774292 179.63008118]
[168.50183105 189.29423523]
[167.77540588 201.43772888]
[177.41722107 212.92840576]
[193.05375671 212.74746704]
[205.11550903 222.69976807]
[207.90728760 238.08613586]
[200.11088562 251.64158630]
[185.40754700 256.96563721]
[170.73971558 251.54447937]
[163.03312683 237.93777466]
[165.92655945 222.57022095]
[156.28474426 211.07954407]
[139.52461243 206.03778076]
[136.35084534 187.95092773]
[126.42555237 176.70420837]
[116.50026703 165.45748901]
[106.57498169 154.21076965]
[96.64968872 142.96405029]
[89.15027618 143.05755615]
[81.81307220 156.14056396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 22]
[6 21]
[7 20]
[8 19]
[9 18]
[28 86]
[29 85]
[32 82]
[33 81]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[43 71]
[44 70]
[47 67]
[48 66]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[87 96]
[88 95]
[89 94]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
