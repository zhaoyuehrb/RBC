%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:36:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGGUGGCGCCGGUCCCCUCGAACAGGUCGCUCAACAACUCCCGCCCAGCAGCCGCCCUUACUGCGCGCGCGCAGACUUCGGCGUCUACUUCCGGUGUGGCCCAGGCGGGGUCCGCAGAACCAGCU\
) } def
/len { sequence length } bind def

/coor [
[95.01621246 406.78121948]
[81.98641968 395.93405151]
[88.80266571 380.41070557]
[89.53868103 365.42877197]
[82.43519592 352.33715820]
[90.84032440 338.93325806]
[91.57633972 323.95132446]
[92.31235504 308.96939087]
[78.08960724 298.64318848]
[72.78987885 281.72180176]
[78.68380737 264.83294678]
[93.61912537 254.70822144]
[93.61912537 239.70822144]
[93.61912537 224.70822144]
[85.88182831 211.98095703]
[93.61912537 198.18078613]
[93.61912537 183.18078613]
[93.61912537 168.18078613]
[93.61912537 153.18078613]
[93.43505096 138.18191528]
[93.06693268 123.18643188]
[84.01708984 118.17208099]
[77.88841248 109.83644104]
[75.80104065 99.70301819]
[78.13647461 89.62387085]
[84.46786499 81.44115448]
[93.63804626 76.65040588]
[94.37406158 61.66847610]
[95.11007690 46.68654251]
[95.84609222 31.70461273]
[96.58210754 16.72268105]
[97.31812286 1.74074888]
[87.63457489 13.19626522]
[73.99800110 19.44478607]
[58.99870682 19.29939270]
[45.48582840 12.78770447]
[36.02616119 1.14662814]
[32.41658401 -13.41259384]
[35.34274292 -28.12441254]
[44.24881363 -40.19429016]
[57.44306564 -47.32953262]
[72.41922760 -48.17478943]
[86.33255768 -42.56949997]
[96.54019165 -31.57839966]
[101.10324860 -17.28836250]
[106.15659332 -31.41152382]
[111.20994568 -45.53468323]
[106.62257385 -65.09239197]
[121.68631744 -77.11634064]
[126.04058838 -91.47044373]
[122.64242554 -106.92240906]
[133.74108887 -116.85562897]
[138.09536743 -131.20973206]
[134.69720459 -146.66169739]
[145.79588318 -156.59490967]
[150.15014648 -170.94902039]
[154.50440979 -185.30311584]
[158.85868835 -199.65722656]
[147.45446777 -211.56018066]
[143.60092163 -227.49166870]
[148.25114441 -243.11154175]
[160.05462646 -254.21302795]
[175.74774170 -257.85565186]
[179.74842834 -272.31228638]
[183.74913025 -286.76895142]
[187.74981689 -301.22558594]
[191.75050354 -315.68222046]
[187.11428833 -331.41238403]
[198.61337280 -343.10440063]
[214.41848755 -338.73052979]
[218.27067566 -322.79025269]
[206.20715332 -311.68151855]
[202.20645142 -297.22488403]
[198.20576477 -282.76824951]
[194.20507812 -268.31161499]
[190.20437622 -253.85496521]
[200.43811035 -244.72668457]
[205.74507141 -232.00993347]
[205.02908325 -218.18240356]
[198.37359619 -205.96519470]
[187.03649902 -197.78735352]
[173.21279907 -195.30296326]
[168.85852051 -180.94885254]
[164.50425720 -166.59474182]
[160.14997864 -152.24064636]
[163.85958862 -137.81538391]
[152.44946289 -126.85546112]
[148.09519958 -112.50135803]
[151.80480957 -98.07609558]
[140.39468384 -87.11617279]
[136.04042053 -72.76206970]
[141.70384216 -64.10261536]
[141.60682678 -53.53515625]
[135.53707886 -44.61570740]
[125.33310699 -40.48133850]
[120.27975464 -26.35817719]
[115.22640991 -12.23501492]
[112.30005646 2.47676396]
[111.56404114 17.45869637]
[110.82802582 32.44062805]
[110.09201050 47.42255783]
[109.35599518 62.40449142]
[108.61997986 77.38642120]
[122.34632874 90.70915985]
[122.11158752 109.83644104]
[108.06241608 122.81831360]
[108.43053436 137.81379700]
[111.79870605 146.42079163]
[108.61912537 153.18078613]
[108.61912537 168.18078613]
[108.61912537 183.18078613]
[108.61912537 198.18078613]
[116.35643005 211.98095703]
[108.61912537 224.70822144]
[108.61912537 239.70822144]
[108.61912537 254.70822144]
[119.71235657 260.72714233]
[127.11647034 270.85827637]
[129.45506287 283.11285400]
[126.33858490 295.11810303]
[118.42768097 304.57647705]
[107.29428101 309.70541382]
[106.55826569 324.68734741]
[105.82225037 339.66928101]
[112.87309265 353.83248901]
[104.52061462 366.16476440]
[103.78459930 381.14669800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 127]
[4 126]
[6 124]
[7 123]
[8 122]
[12 116]
[13 115]
[14 114]
[16 112]
[17 111]
[18 110]
[19 109]
[20 107]
[21 106]
[27 103]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[45 97]
[46 96]
[47 95]
[49 91]
[50 90]
[52 88]
[53 87]
[55 85]
[56 84]
[57 83]
[58 82]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
