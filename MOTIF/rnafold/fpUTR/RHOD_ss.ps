%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:06:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCCUGCCCCGCCGGGCCUGCCCCGCGCAGUCUGGGUCUCUGCGCCGCAGCCGCCCGCCCGCCCGCUCAGCGCCCGGCCCCGGG\
) } def
/len { sequence length } bind def

/coor [
[77.22843170 344.18249512]
[68.91339111 357.28363037]
[54.47336578 362.96386719]
[39.46084976 359.03909302]
[29.64845657 347.01843262]
[28.80925369 331.52404785]
[37.26593399 318.51388550]
[51.76672745 312.99063110]
[55.56072617 298.47836304]
[59.35472870 283.96609497]
[52.69916153 265.96340942]
[66.52204895 251.51147461]
[69.24659729 236.76098633]
[71.97115326 222.01051331]
[74.69570160 207.26002502]
[77.42025757 192.50953674]
[80.14481354 177.75904846]
[82.86936188 163.00856018]
[85.32405853 148.21078491]
[87.50807190 133.37063599]
[89.69209290 118.53047943]
[80.90077209 109.21147156]
[79.08133698 96.52996063]
[84.89793396 85.11512756]
[96.22731781 79.13379669]
[98.95186615 64.38330841]
[93.84989166 49.40731430]
[103.77023315 38.29713058]
[106.49478149 23.54664612]
[96.20092773 14.18095207]
[91.97170258 1.03673351]
[94.82717896 -12.36118221]
[103.90265656 -22.47643471]
[116.70652771 -26.69451904]
[119.96797943 -41.33565521]
[123.22943115 -55.97679520]
[126.49088287 -70.61793518]
[129.75233459 -85.25907135]
[121.53910065 -98.49465179]
[125.05524445 -113.29638672]
[137.72396851 -121.04488373]
[140.98541260 -135.68601990]
[144.24687195 -150.32716370]
[147.50831604 -164.96829224]
[145.05053711 -181.74314880]
[160.48944092 -188.74861145]
[171.49505615 -175.85238647]
[162.14945984 -161.70684814]
[158.88801575 -147.06570435]
[155.62655640 -132.42456055]
[152.36509705 -117.78343201]
[160.54707336 -105.39024353]
[157.44805908 -90.49559021]
[144.39347839 -81.99761963]
[141.13201904 -67.35648346]
[137.87057495 -52.71534348]
[134.60911560 -38.07420349]
[131.34765625 -23.43306541]
[142.56300354 -11.59586430]
[144.61793518 4.74666500]
[136.52200317 19.27970123]
[121.24526978 26.27120018]
[118.52071381 41.02168274]
[123.81756592 54.94262695]
[113.70235443 67.10786438]
[110.97779846 81.85834503]
[120.63340759 95.11182404]
[117.94997406 111.28849030]
[104.53224182 120.71450043]
[102.34822845 135.55464172]
[100.16420746 150.39480591]
[102.03498840 159.58361816]
[97.61985016 165.73312378]
[94.89529419 180.48361206]
[92.17074585 195.23408508]
[89.44618988 209.98457336]
[86.72163391 224.73506165]
[83.99708557 239.48554993]
[81.27252960 254.23603821]
[88.10853577 263.07528687]
[88.79958344 274.00512695]
[83.35682678 283.25119019]
[73.86698151 287.76010132]
[70.07298279 302.27236938]
[66.27898407 316.78460693]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 85]
[9 84]
[10 83]
[12 79]
[13 78]
[14 77]
[15 76]
[16 75]
[17 74]
[18 73]
[19 71]
[20 70]
[21 69]
[25 66]
[26 65]
[28 63]
[29 62]
[34 58]
[35 57]
[36 56]
[37 55]
[38 54]
[41 51]
[42 50]
[43 49]
[44 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
