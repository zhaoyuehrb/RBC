%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:08:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUCGCAGCGGGCGGCGUGGACGCGGCAGCGCAGCGGCUCCUUUAAGGCUCGGGCACCACCCCCGCCGCCCCGCCUCCCGUGCGGCCUGGGUCUAGUUGGCGGCGGGGUCGGGUCCGCGCGAGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[71.46620178 189.92544556]
[74.83815002 204.54151917]
[71.30067444 219.11843872]
[61.60438538 230.56317139]
[47.80667877 236.44732666]
[32.83522415 235.52238464]
[19.86673546 227.98458862]
[11.65293217 215.43334961]
[9.93665791 200.53186035]
[15.08197212 186.44215393]
[2.03205276 193.83807373]
[-11.01786709 201.23399353]
[-19.92172050 217.29969788]
[-37.41381836 216.58927917]
[-50.28263474 224.29600525]
[-58.14681625 238.02426147]
[-73.04109192 237.92530823]
[-85.90991211 245.63203430]
[-98.77873230 253.33874512]
[-106.27300262 267.92532349]
[-122.66349792 268.45800781]
[-131.08908081 254.38882446]
[-122.88222504 240.19094849]
[-106.48545074 240.46992493]
[-93.61663055 232.76321411]
[-80.74781036 225.05648804]
[-73.80410004 211.87945557]
[-57.98935699 211.42718506]
[-45.12053680 203.72047424]
[-41.84019089 192.01261902]
[-31.09684563 185.50447083]
[-18.41378403 188.18406677]
[-5.36386538 180.78814697]
[7.68605423 173.39222717]
[12.34420681 164.90531921]
[22.90530586 162.16662598]
[33.82505035 151.88269043]
[44.74479294 141.59877014]
[55.66453552 131.31483459]
[66.58428192 121.03090668]
[77.50402069 110.74697876]
[88.42376709 100.46304321]
[73.46443176 99.35925293]
[62.57483292 89.04341125]
[60.66373825 74.16564941]
[68.59262085 61.43251038]
[82.78733063 56.58378601]
[96.84923553 61.80516052]
[104.43957520 74.74296570]
[102.13632202 89.56602478]
[114.62084198 81.25117493]
[121.81777954 67.16165161]
[136.69967651 66.54639435]
[149.18418884 58.23154068]
[161.66871643 49.91669083]
[174.15322876 41.60184097]
[186.63775635 33.28699112]
[192.11433411 25.84955788]
[199.52284241 24.92663956]
[212.20315552 16.91354942]
[215.79464722 1.75641084]
[228.76844788 -6.18936491]
[243.19633484 -2.67200971]
[255.87664795 -10.68509865]
[268.55694580 -18.69818878]
[281.23727417 -26.71127701]
[293.91760254 -34.72436523]
[306.59790039 -42.73745728]
[319.27822876 -50.75054550]
[331.95852661 -58.76363373]
[344.63885498 -66.77672577]
[357.31918335 -74.78981018]
[354.48080444 -90.56818390]
[357.88641357 -106.19460297]
[366.98916626 -119.29789734]
[380.38003540 -127.90125275]
[396.00576782 -130.72045898]
[411.48382568 -127.35549164]
[424.46557617 -118.34703827]
[436.95010376 -126.66188812]
[449.43463135 -134.97673035]
[461.91915894 -143.29159546]
[463.46493530 -158.85258484]
[474.68753052 -169.74235535]
[490.28799438 -170.81909180]
[502.90026855 -161.57437134]
[506.56921387 -146.37329102]
[499.56246948 -132.39332581]
[485.18838501 -126.23538971]
[470.23400879 -130.80706787]
[457.74948120 -122.49221802]
[445.26495361 -114.17736816]
[432.78042603 -105.86251831]
[436.02410889 -92.15709686]
[434.37512207 -78.13976288]
[428.01251221 -65.50773621]
[417.68719482 -55.79755020]
[404.63360596 -50.19819641]
[390.42187500 -49.40553665]
[376.76919556 -53.53588867]
[365.33224487 -62.10949707]
[352.65194702 -54.09640884]
[339.97161865 -46.08331680]
[327.29132080 -38.07022858]
[314.61099243 -30.05714035]
[301.93069458 -22.04405022]
[289.25036621 -14.03096199]
[276.57003784 -6.01787233]
[263.88973999 1.99521661]
[251.20941162 10.00830555]
[248.19309998 24.54919434]
[235.44761658 32.85624313]
[220.21624756 29.59386635]
[207.53591919 37.60695648]
[194.95260620 45.77151108]
[182.46807861 54.08636093]
[169.98356628 62.40121078]
[157.49903870 70.71606445]
[145.01452637 79.03091431]
[138.71055603 92.52570343]
[122.93569183 93.73569489]
[110.45117188 102.05054474]
[98.70769501 111.38278961]
[87.78794861 121.66671753]
[76.86820984 131.95065308]
[65.94846344 142.23457336]
[55.02872086 152.51850891]
[44.10897827 162.80244446]
[33.18923569 173.08636475]
[48.17021561 172.33125305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 34]
[11 33]
[12 32]
[14 29]
[15 28]
[17 26]
[18 25]
[19 24]
[36 129]
[37 128]
[38 127]
[39 126]
[40 125]
[41 124]
[42 123]
[50 122]
[51 121]
[53 119]
[54 118]
[55 117]
[56 116]
[57 115]
[59 114]
[60 113]
[63 110]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[70 103]
[71 102]
[72 101]
[79 93]
[80 92]
[81 91]
[82 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
