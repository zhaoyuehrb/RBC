%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGACUGAGGGCGCCGUGCGCCGAAGCUUGUGGCGUCAAUGCGCCCGCCGUGUCCAUGGAGAGAAGCUGAGGCGGCCGACCUUCGGCCCGAGGCACCGGGGCGCCGGGACGGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[60.29225159 125.27804565]
[53.99530792 109.96259308]
[39.01656723 110.76092529]
[24.03782463 111.55925751]
[9.05908489 112.35758972]
[-5.90770149 113.35523987]
[-20.85988235 114.55203247]
[-35.69456100 125.36048126]
[-51.25625229 117.36820221]
[-66.17127228 118.96260834]
[-81.08629608 120.55700684]
[-96.00131989 122.15141296]
[-110.91634369 123.74581146]
[-125.83135986 125.34021759]
[-135.74339294 137.35643005]
[-150.89205933 138.76091003]
[-162.28660583 129.23724365]
[-177.20161438 130.83164978]
[-192.09410095 132.62445068]
[-206.96139526 134.61532593]
[-221.82868958 136.60621643]
[-236.69596863 138.59709167]
[-251.56326294 140.58798218]
[-259.78268433 153.89118958]
[-274.64639282 158.74958801]
[-289.13623047 152.86918640]
[-296.41049194 139.02653503]
[-293.03454590 123.75772095]
[-280.60238647 114.27219391]
[-264.98406982 115.04873657]
[-253.55415344 125.72068787]
[-238.68685913 123.72980499]
[-223.81956482 121.73892212]
[-208.95227051 119.74803925]
[-194.08497620 117.75715637]
[-187.79257202 113.69869995]
[-178.79602051 115.91662598]
[-163.88099670 114.32222748]
[-154.75708008 102.60515594]
[-139.65383911 100.77574158]
[-127.42576599 110.42519379]
[-112.51074219 108.83078766]
[-97.59571838 107.23638916]
[-82.68070221 105.64198303]
[-67.76567841 104.04758453]
[-52.85065460 102.45317841]
[-44.94404602 93.19258118]
[-32.44104767 91.80927277]
[-22.05667305 99.59985352]
[-7.10449314 98.40306091]
[-0.60499632 94.68524933]
[8.26075172 97.37884521]
[23.23949242 96.58051300]
[38.21823120 95.78218079]
[53.19697189 94.98384857]
[54.71224594 87.16627502]
[57.52360535 79.71599579]
[61.55059052 72.84621429]
[66.67795563 66.75354767]
[72.75896454 61.61235809]
[79.61957550 57.56978226]
[87.06345367 54.74150848]
[94.87756348 53.20848465]
[102.83827209 53.01458359]
[110.71775818 54.16535187]
[118.29050446 56.62786102]
[126.24681854 43.91184235]
[126.28777313 27.51274681]
[140.64305115 19.58444595]
[154.54518127 28.28289604]
[153.69282532 44.65987778]
[138.96282959 51.86815643]
[131.00651550 64.58417511]
[144.06327820 83.44364929]
[146.65632629 106.23477173]
[161.01765442 110.56514740]
[175.37898254 114.89553070]
[189.74031067 119.22590637]
[205.18659973 115.80204010]
[215.13827515 126.88416290]
[229.49960327 131.21453857]
[243.86093140 135.54492188]
[261.61303711 130.88082886]
[273.19570923 143.99128723]
[287.66723633 147.93782043]
[303.01690674 144.10397339]
[313.26007080 154.91725159]
[327.73156738 158.86380005]
[342.20309448 162.81033325]
[356.67462158 166.75686646]
[370.27038574 158.69891357]
[385.56097412 162.69563293]
[393.47473145 176.37582397]
[389.31658936 191.62329102]
[375.55346680 199.39198303]
[360.35083008 195.07286072]
[352.72808838 181.22839355]
[338.25656128 177.28184509]
[323.78503418 173.33531189]
[309.31353760 169.38877869]
[294.99896240 173.50489807]
[283.72070312 162.40933228]
[269.24917603 158.46279907]
[258.51312256 164.20825195]
[246.36488342 160.94348145]
[239.53056335 149.90625000]
[225.16923523 145.57588196]
[210.80789185 141.24549866]
[196.38882446 144.97909546]
[185.40994263 133.58723450]
[171.04861450 129.25685120]
[156.68727112 124.92647552]
[142.32594299 120.59609985]
[132.57414246 133.97956848]
[118.79093170 143.15768433]
[102.68214417 146.99458313]
[86.24141693 145.01539612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 55]
[3 54]
[4 53]
[5 52]
[6 50]
[7 49]
[9 46]
[10 45]
[11 44]
[12 43]
[13 42]
[14 41]
[17 38]
[18 37]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[66 73]
[67 72]
[75 113]
[76 112]
[77 111]
[78 110]
[80 108]
[81 107]
[82 106]
[84 103]
[85 102]
[87 100]
[88 99]
[89 98]
[90 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
