%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:17:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAGCUGAGUGUUAGUCAAAGAAGGUGUGUCCUGCUCCCCAAUGACAGGUUGCUCAGAGACUGCUGAUUUCCAUCCCUAUAUAAAGAGAGUCCCUGGCAUACAGAGACUGCUCUGCUCCAGGCAUCUGCCACA\
) } def
/len { sequence length } bind def

/coor [
[35.68355942 151.91722107]
[25.25204468 135.28094482]
[19.03912735 116.65350342]
[17.39545059 97.08617401]
[2.51459408 95.19935608]
[-12.36626244 93.31253052]
[-27.24711990 91.42570496]
[-42.12797546 89.53887939]
[-57.10333252 88.67942810]
[-72.10234833 88.85140991]
[-87.10136414 89.02339172]
[-102.10037231 89.19537354]
[-117.09938812 89.36735535]
[-132.09840393 89.53933716]
[-141.65560913 103.44385529]
[-157.45007324 108.88898468]
[-173.22952271 103.92752075]
[-182.87077332 90.69115448]
[-197.86189270 91.20700836]
[-212.85302734 91.72286224]
[-227.84414673 92.23871613]
[-233.79501343 104.95038605]
[-244.60290527 113.80085754]
[-258.10952759 117.09682465]
[-271.64944458 114.24685669]
[-282.57611084 105.86660004]
[-288.77908325 93.64689636]
[-303.77810669 93.81887817]
[-317.48864746 101.71389008]
[-330.30380249 94.12302399]
[-345.30282593 94.29500580]
[-357.49935913 104.71730042]
[-373.22433472 101.53849792]
[-380.41488647 87.19711304]
[-373.55505371 72.69462585]
[-357.90710449 69.15609741]
[-345.47479248 79.29598999]
[-330.47579956 79.12400818]
[-317.83807373 71.24129486]
[-303.95007324 78.81986237]
[-288.95108032 78.64788055]
[-281.41119385 64.40162659]
[-267.64987183 55.83089828]
[-251.35156250 55.34132767]
[-236.93608093 63.15983963]
[-228.36000061 77.24758911]
[-213.36888123 76.73173523]
[-198.37774658 76.21588135]
[-183.38662720 75.70002747]
[-176.94213867 63.95236969]
[-165.43049622 56.88547516]
[-151.82122803 56.44852448]
[-139.68804932 62.86386108]
[-132.27038574 74.54032135]
[-117.27136993 74.36833954]
[-102.27235413 74.19635773]
[-87.27334595 74.02437592]
[-72.27433014 73.85239410]
[-57.27531433 73.68041229]
[-66.77349854 62.07073975]
[-65.49129486 47.12564468]
[-54.15437698 37.30350876]
[-39.17903900 38.16331100]
[-29.04078102 49.21843719]
[-29.47749519 64.21207428]
[-40.24115372 74.65802765]
[-25.36029625 76.54484558]
[-10.47943878 78.43167114]
[4.40141773 80.31849670]
[19.28227425 82.20532227]
[23.05109978 69.81939697]
[28.70777702 58.17392349]
[36.11352158 47.55459976]
[45.08664703 38.22196579]
[55.40700912 30.40497780]
[66.82140350 24.29542542]
[79.04979706 20.04319382]
[91.79218292 17.75260735]
[104.73593140 17.47986412]
[117.56349182 19.23165512]
[129.96015930 22.96500015]
[141.62178040 28.58831024]
[152.26226807 35.96361923]
[161.62054443 44.90998840]
[169.46705627 55.20792389]
[175.60926819 66.60477448]
[179.89649963 78.82094574]
[182.22355652 91.55671692]
[197.22256470 91.38473511]
[212.22158813 91.21275330]
[227.22059631 91.04077148]
[242.21665955 90.69683075]
[257.20779419 90.18098450]
[272.19891357 89.66513062]
[287.19003296 89.14927673]
[300.71594238 80.94196320]
[313.70178223 88.23699188]
[328.69290161 87.72113800]
[343.68405151 87.20528412]
[355.63839722 76.50607300]
[371.43212891 79.32347107]
[378.94961548 93.49621582]
[372.42413330 108.15218353]
[356.86141968 112.04857635]
[344.19989014 102.19641113]
[329.20877075 102.71226501]
[314.21765137 103.22811890]
[301.76397705 111.39853668]
[287.70590210 104.14040375]
[272.71475220 104.65625763]
[257.72363281 105.17211151]
[242.73251343 105.68795776]
[236.09756470 109.09169006]
[227.39257812 106.03978729]
[212.39356995 106.21176910]
[197.39454651 106.38375092]
[182.39553833 106.55573273]
[180.59489441 118.34300995]
[177.11695862 129.74855042]
[172.03413391 140.53498840]
[165.45219421 150.47782898]
[157.50811768 159.37017822]
[148.36721802 167.02696228]
[138.21974182 173.28883362]
[143.92025757 187.16342163]
[149.62075806 201.03800964]
[162.92596436 210.62464905]
[161.00730896 226.91117859]
[145.83854675 233.14340210]
[133.02398682 222.91015625]
[135.74617004 206.73851013]
[130.04565430 192.86392212]
[124.34515381 178.98933411]
[105.02583313 182.50299072]
[85.42286682 181.36036682]
[66.64259338 175.62596130]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 59]
[10 58]
[11 57]
[12 56]
[13 55]
[14 54]
[18 49]
[19 48]
[20 47]
[21 46]
[27 41]
[28 40]
[30 38]
[31 37]
[88 117]
[89 116]
[90 115]
[91 114]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
[98 106]
[99 105]
[124 133]
[125 132]
[126 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
