%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACUCCACUGCGACUGCAGAACUCAGAGCUGCUCUUCCUCUGUGGCCAGUUGGGGACCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[99.25804138 283.64459229]
[92.50498962 270.05191040]
[91.12209320 254.93728638]
[95.29637146 240.34483337]
[104.46328735 228.24806213]
[117.38310242 220.28294373]
[114.62686157 205.53836060]
[111.87061310 190.79376221]
[109.11437225 176.04916382]
[106.35813141 161.30456543]
[103.26205444 146.62756348]
[99.82779694 132.02600098]
[96.39353943 117.42442322]
[87.29711914 112.46009827]
[82.50923157 103.26959229]
[83.65381622 92.97011566]
[90.34264374 85.05501556]
[88.27030182 70.19886017]
[86.19795227 55.34270096]
[84.12561035 40.48654556]
[82.05326080 25.63038826]
[79.98091888 10.77423191]
[77.90857697 -4.08192492]
[65.13447571 -9.75206375]
[56.96761322 -20.95853043]
[55.50531006 -34.63781357]
[61.03025055 -47.11734390]
[71.96385193 -55.10147476]
[70.57982635 -70.03748322]
[69.19580078 -84.97350311]
[67.81177521 -99.90951538]
[60.32978058 -115.12319183]
[72.87767792 -126.52435303]
[87.30688477 -117.62298584]
[82.74778748 -101.29354095]
[84.13181305 -86.35752869]
[85.51583862 -71.42150879]
[86.89986420 -56.48550034]
[101.17133331 -48.69991302]
[108.17139435 -33.84566498]
[105.02912903 -17.56104088]
[92.76473236 -6.15427017]
[94.83707428 8.70188618]
[96.90942383 23.55804253]
[98.98176575 38.41419983]
[101.05410767 53.27035522]
[103.12645721 68.12651062]
[105.19879913 82.98266602]
[117.49076843 96.73040771]
[110.99510956 113.99016571]
[114.42936707 128.59173584]
[117.86362457 143.19331360]
[123.03674316 151.14512634]
[121.10272980 158.54832458]
[123.85897064 173.29292297]
[126.61521149 188.03752136]
[129.37145996 202.78210449]
[132.12770081 217.52670288]
[147.05238342 220.28677368]
[159.97015381 228.25520325]
[169.13395691 240.35433960]
[173.30447388 254.94787598]
[171.91767883 270.06216431]
[165.16111755 283.65307617]
[153.94857788 293.88259888]
[139.79643250 299.36727905]
[124.61867523 299.36532593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 58]
[7 57]
[8 56]
[9 55]
[10 54]
[11 52]
[12 51]
[13 50]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[28 38]
[29 37]
[30 36]
[31 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
