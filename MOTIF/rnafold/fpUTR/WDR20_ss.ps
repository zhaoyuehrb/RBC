%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCAGGAACAGCGCCUGCGCGGUGGGCGUGAUCCGGGCACUUAGGGCAGGAUGAACGCUGCUUUCCAAG\
) } def
/len { sequence length } bind def

/coor [
[120.54555511 125.68605042]
[119.06565094 113.24968719]
[104.64870453 109.10823059]
[96.37628937 110.09181213]
[89.70778656 104.46601868]
[75.48236847 99.70815277]
[66.03425598 99.92921448]
[60.75500107 94.42744446]
[46.74744415 89.06196594]
[32.73988724 83.69649506]
[20.97663116 90.62527466]
[7.57404757 89.43078613]
[-2.48043966 80.78703308]
[-5.57899570 68.09709167]
[-19.34275055 62.13395309]
[-33.10650253 56.17081070]
[-46.87025833 50.20766830]
[-60.63401413 44.24452591]
[-74.39776611 38.28138351]
[-88.16152191 32.31824112]
[-101.92527771 26.35509872]
[-118.86268616 25.60638809]
[-122.83197021 9.12363720]
[-108.09218597 0.74658912]
[-95.96213531 12.59134483]
[-82.19837952 18.55448723]
[-68.43462372 24.51762962]
[-54.67087173 30.48077202]
[-40.90711594 36.44391251]
[-27.14336205 42.40705490]
[-13.37960720 48.37019730]
[0.38414672 54.33333969]
[15.57954884 47.46083832]
[31.40922546 53.68913269]
[38.10535812 69.68893433]
[52.11291885 75.05440521]
[66.12047577 80.41988373]
[80.24023438 85.48272705]
[94.46566010 90.24059296]
[108.79016113 94.69128418]
[123.20710754 98.83274078]
[135.66346741 85.70801544]
[152.89776611 80.46923065]
[170.39151001 84.40544891]
[183.59980774 96.41123962]
[189.13204956 113.29551697]
[203.96220398 115.54634857]
[218.79237366 117.79718018]
[233.62252808 120.04801178]
[248.45269775 122.29884338]
[263.28286743 124.54967499]
[278.11303711 126.80050659]
[288.91793823 115.66349030]
[304.21124268 113.03759766]
[318.11227417 119.93254852]
[325.27587891 133.69709778]
[322.94744873 149.03848267]
[312.02233887 160.05763245]
[296.70147705 162.51745605]
[282.87603760 155.47210693]
[275.86218262 141.63067627]
[261.03204346 139.37983704]
[246.20187378 137.12901306]
[231.37170410 134.87817383]
[216.54153442 132.62734985]
[201.71138000 130.37651062]
[186.88121033 128.12568665]
[180.59162903 138.66873169]
[171.00172424 146.38999939]
[159.29226685 150.30723572]
[146.91601562 149.90852356]
[135.41749573 145.21900940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[5 39]
[6 38]
[8 37]
[9 36]
[10 35]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
