%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:27:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUUGACUUGCUUCCAGACAAAGGUUGUCUCAAGUUUGUUGCUCAAACCGAGUUCUGGAGAACGCCAUCAGCUCGCUGCUUAAAAUUAAACCACAGGUUCCAUU\
) } def
/len { sequence length } bind def

/coor [
[43.71699524 136.04815674]
[37.20442200 122.89020538]
[22.62408066 126.41349792]
[13.52727413 142.88592529]
[-4.37442446 147.56228638]
[-19.82991409 137.97520447]
[-34.17593002 142.35606384]
[-48.52194595 146.73690796]
[-62.86795807 151.11776733]
[-77.21397400 155.49861145]
[-91.55998993 159.87947083]
[-94.17378998 163.11042786]
[-97.32904053 165.24362183]
[-100.64889526 166.24096680]
[-103.77904510 166.18045044]
[-106.42073059 165.24053955]
[-108.35709381 163.67590332]
[-123.19269562 165.89060974]
[-138.02830505 168.10530090]
[-152.86390686 170.31999207]
[-167.69950867 172.53469849]
[-182.53511047 174.74938965]
[-197.30792236 183.06806946]
[-209.39102173 171.17541504]
[-201.30805969 156.27230835]
[-184.74980164 159.91378784]
[-169.91419983 157.69909668]
[-155.07859802 155.48439026]
[-140.24299622 153.26969910]
[-125.40739441 151.05499268]
[-110.57179260 148.84030151]
[-95.94084167 145.53344727]
[-81.59482574 141.15260315]
[-67.24880981 136.77174377]
[-52.90279770 132.39089966]
[-38.55678177 128.01004028]
[-24.21076584 123.62919617]
[-21.08642578 112.46154022]
[-12.82138348 104.15576172]
[-1.43669057 100.91020966]
[10.20091438 103.66487885]
[19.10079002 111.83315277]
[33.68113327 108.30986023]
[34.31746674 87.62863922]
[41.24847412 68.13302612]
[53.80992889 51.69137573]
[70.79800415 39.87937546]
[90.58464813 33.82903290]
[111.27360535 34.12017059]
[130.88217163 40.72489929]
[139.26187134 28.28381157]
[147.64157104 15.84272671]
[156.02127075 3.40164185]
[164.40097046 -9.03944302]
[172.78067017 -21.48052788]
[173.55435181 -39.80332565]
[189.47306824 -47.02407837]
[197.48042297 -59.70801926]
[205.48777771 -72.39196014]
[201.75958252 -87.75022125]
[210.05451965 -101.20271301]
[225.45133972 -104.76831818]
[238.81538391 -96.33161926]
[242.21800232 -80.89795685]
[233.64047241 -67.62386322]
[218.17170715 -64.38460541]
[210.16435242 -51.70066833]
[202.15701294 -39.01672745]
[204.50866699 -27.04828072]
[197.80497742 -16.37928200]
[185.22175598 -13.10082722]
[176.84205627 -0.65974194]
[168.46235657 11.78134346]
[160.08265686 24.22242928]
[151.70295715 36.66351318]
[143.32325745 49.10459900]
[149.07829285 54.62856674]
[154.13423157 60.79883957]
[158.41903687 67.52752686]
[161.87168884 74.71876526]
[164.44297791 82.27013397]
[166.09631348 90.07406616]
[166.80810547 98.01938629]
[166.56823730 105.99291992]
[165.38012695 113.88108063]
[163.26069641 121.57151031]
[160.24012756 128.95466614]
[156.36146545 135.92536926]
[151.67993164 142.38432312]
[146.26223755 148.23951721]
[155.36424255 160.16233826]
[164.46624756 172.08514404]
[173.56825256 184.00796509]
[187.98539734 192.92884827]
[183.40420532 209.25212097]
[166.45065308 209.36869812]
[161.64543152 193.10997009]
[152.54342651 181.18714905]
[143.44142151 169.26434326]
[134.33941650 157.34152222]
[120.99159241 163.45549011]
[106.63092041 166.50772095]
[91.95030212 166.35095215]
[77.65808105 162.99273682]
[64.44386292 156.59510803]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 43]
[3 42]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 71]
[57 68]
[58 67]
[59 66]
[90 100]
[91 99]
[92 98]
[93 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
