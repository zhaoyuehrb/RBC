%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:30:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGUCUGAGGCCUCUGCCUAAAGACAAAGCCUGUGCUGGGGUGUGCAGGAUAUAAGGUUGGACUUCCAGACCCACUGCCCGGGAGAGGAGAGGAGCGGGCCGAGGACUCCAGCGUGCCCAGGUCUGGCAUCCUGCACUUGCUGCCCUCUGACACCUGGGAAG\
) } def
/len { sequence length } bind def

/coor [
[44.13742828 116.60981750]
[29.36531067 119.21453857]
[14.59319401 121.81925964]
[-0.17892249 124.42398071]
[-14.95103836 127.02870178]
[-29.72315598 129.63342285]
[-44.46932220 132.38125610]
[-59.18815231 135.27194214]
[-73.90698242 138.16262817]
[-88.59709167 141.19589233]
[-103.25709534 144.37144470]
[-108.64218140 153.89305115]
[-118.19519806 158.75421143]
[-128.62475586 157.55278015]
[-136.48527527 150.93034363]
[-151.25738525 153.53507996]
[-166.02951050 156.13980103]
[-180.80162048 158.74452209]
[-182.33801270 169.93473816]
[-186.71891785 180.32879639]
[-193.63687134 189.21806335]
[-202.61172485 195.99874878]
[-213.02398682 200.21296692]
[-224.15757751 201.57962036]
[-235.24905396 200.01316833]
[-245.53997803 195.62889099]
[-254.32879639 188.73449707]
[-261.01864624 179.80848694]
[-265.15783691 169.46697998]
[-280.11273193 170.62936401]
[-295.06762695 171.79174805]
[-310.02252197 172.95414734]
[-324.97741699 174.11653137]
[-339.93231201 175.27891541]
[-354.88720703 176.44129944]
[-364.97119141 188.61045837]
[-380.71414185 190.00169373]
[-392.77600098 179.78961182]
[-394.00073242 164.03283691]
[-383.66168213 152.07962036]
[-367.89285278 151.02156067]
[-356.04959106 161.48640442]
[-341.09469604 160.32402039]
[-326.13980103 159.16163635]
[-311.18490601 157.99925232]
[-296.23001099 156.83685303]
[-281.27511597 155.67446899]
[-266.32022095 154.51208496]
[-260.38519287 136.50941467]
[-247.19270325 122.83000183]
[-229.32559204 116.21282959]
[-210.30839539 118.00827026]
[-193.91209412 127.90271759]
[-183.40634155 143.97239685]
[-168.63423157 141.36767578]
[-153.86212158 138.76295471]
[-139.08999634 136.15823364]
[-125.28359222 122.66142273]
[-106.43265533 129.71144104]
[-91.77265167 126.53588104]
[-85.87210846 122.02415466]
[-76.79766083 123.44380188]
[-62.07883453 120.55311584]
[-47.36000443 117.66242981]
[-41.37308502 113.26596832]
[-32.32787704 114.86131287]
[-17.55576134 112.25659180]
[-2.78364515 109.65186310]
[11.98847103 107.04714203]
[26.76058769 104.44242096]
[41.53270340 101.83769989]
[48.75081253 92.09234619]
[61.07270432 89.82461548]
[71.96432495 96.79352570]
[86.78417206 94.47574615]
[97.78668213 85.84809113]
[110.89804077 90.70440674]
[125.71788788 88.38662720]
[140.53773499 86.06884003]
[155.35758972 83.75106049]
[170.17742920 81.43328094]
[184.99728394 79.11549377]
[192.48045349 63.97271347]
[207.35890198 56.33353043]
[223.69813538 59.02303314]
[235.11204529 70.78995514]
[249.88415527 68.18523407]
[264.65628052 65.58051300]
[279.42840576 62.97579193]
[287.38247681 58.38301468]
[294.51202393 60.46669006]
[309.33184814 58.14891052]
[324.12854004 55.68754196]
[338.90066528 53.08281708]
[353.67276001 50.47809601]
[368.44488525 47.87337494]
[383.21701050 45.26865005]
[397.98910522 42.66392899]
[404.86001587 28.87636757]
[418.37405396 21.86034203]
[433.25207520 24.12044334]
[443.81988525 34.58272552]
[458.59201050 31.97800255]
[473.36413574 29.37328148]
[488.13623047 26.76855850]
[497.20840454 14.10627079]
[512.22656250 11.67514610]
[524.24218750 20.40210533]
[539.01428223 17.79738235]
[553.78643799 15.19266033]
[568.55853271 12.58793736]
[572.62823486 9.16390038]
[577.15435791 7.81298018]
[581.25805664 8.35622883]
[584.26348877 10.28750038]
[599.16204834 8.54610729]
[611.98590088 -1.67546988]
[627.14898682 4.57056618]
[629.05285645 20.85882759]
[615.73889160 30.43334961]
[600.90344238 23.44468307]
[586.00488281 25.18607521]
[571.16326904 27.36005402]
[556.39111328 29.96477699]
[541.61901855 32.56949997]
[526.84692383 35.17422104]
[518.54071045 47.48447418]
[503.59677124 50.33646774]
[490.74096680 41.54067612]
[475.96884155 44.14539719]
[461.19671631 46.75011826]
[446.42462158 49.35484314]
[440.07241821 62.80057526]
[426.86465454 70.01296234]
[411.76599121 68.04212952]
[400.59384155 57.43604279]
[385.82171631 60.04076767]
[371.04962158 62.64548874]
[356.27749634 65.25021362]
[341.50537109 67.85493469]
[326.73324585 70.45965576]
[320.66220093 74.73919678]
[311.64962769 72.96875763]
[296.82980347 75.28653717]
[282.03311157 77.74790955]
[267.26098633 80.35263062]
[252.48887634 82.95735168]
[237.71676636 85.56207275]
[232.98803711 98.07635498]
[222.60197449 106.67928314]
[209.21260071 109.03318787]
[196.31098938 104.41541290]
[187.31506348 93.93534088]
[172.49520874 96.25312805]
[157.67536926 98.57090759]
[142.85551453 100.88868713]
[128.03567505 103.20647430]
[113.21582794 105.52425385]
[102.21331787 114.15190887]
[89.10195923 109.29559326]
[74.28211212 111.61337280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 64]
[8 63]
[9 62]
[10 60]
[11 59]
[15 57]
[16 56]
[17 55]
[18 54]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[74 161]
[75 160]
[77 158]
[78 157]
[79 156]
[80 155]
[81 154]
[82 153]
[86 148]
[87 147]
[88 146]
[89 145]
[91 144]
[92 143]
[93 141]
[94 140]
[95 139]
[96 138]
[97 137]
[98 136]
[102 132]
[103 131]
[104 130]
[105 129]
[108 126]
[109 125]
[110 124]
[111 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
