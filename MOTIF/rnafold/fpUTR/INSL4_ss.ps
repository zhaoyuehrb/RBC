%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCUGGAGCCCAGAAGGGACACACCAGCACAGUCUGGUAGGCUACAGCAGCAAGUCUCUAAAGAAAGGCUGAGAACACCCAGAACAGGAGAGUUCAGGUCCAGG\
) } def
/len { sequence length } bind def

/coor [
[107.86569977 253.74739075]
[93.88435364 245.87965393]
[91.46070099 230.02072144]
[102.45397949 218.33622742]
[103.34258270 203.36256409]
[104.23119354 188.38891602]
[105.11980438 173.41525269]
[106.00841522 158.44160461]
[82.63270569 154.18290710]
[63.58642197 141.28201294]
[52.22375488 151.07434082]
[40.86108398 160.86666870]
[35.96950531 176.51930237]
[19.91109276 179.84486389]
[9.20536613 167.42233276]
[14.86545944 152.03091431]
[31.06875420 149.50401306]
[42.43142319 139.71166992]
[53.79409027 129.91934204]
[49.91313934 122.83548737]
[47.11061859 115.25995636]
[45.44686508 107.35586548]
[44.95771027 99.29338837]
[45.65367508 91.24613190]
[31.30766106 86.86528015]
[16.96164703 82.48442841]
[2.61563230 78.10357666]
[-11.73038292 73.72272491]
[-25.56280518 81.36730194]
[-40.72599792 76.91162109]
[-48.22390747 62.99914932]
[-43.60815811 47.88391113]
[-29.61719131 40.53350830]
[-14.55159950 45.30880737]
[-7.34953070 59.37670898]
[6.99648380 63.75755692]
[21.34249878 68.13841248]
[35.68851471 72.51926422]
[50.03452682 76.90011597]
[53.88351822 69.94300079]
[58.69460678 63.61294937]
[64.36742401 58.04201508]
[70.78361511 53.34642410]
[77.80933380 49.62413788]
[85.29800415 46.95280838]
[93.09338379 45.38817215]
[101.03285980 44.96286392]
[108.95079041 45.68576050]
[116.68197632 47.54178238]
[123.13295746 33.99981308]
[129.58393860 20.45784569]
[136.03491211 6.91587877]
[128.79348755 -6.68073416]
[130.92181396 -21.75798798]
[141.39617920 -32.56315613]
[156.04919434 -35.09833527]
[162.50016785 -48.64030075]
[168.95115662 -62.18227005]
[167.11772156 -78.47860718]
[180.47290039 -87.99551392]
[195.27801514 -80.94281006]
[196.30284119 -64.57571411]
[182.49311829 -55.73129272]
[176.04214478 -42.18932343]
[169.59117126 -28.64735603]
[176.85522461 -15.67155457]
[175.06452942 -0.72975427]
[164.69770813 10.42293930]
[149.57687378 13.36685658]
[143.12590027 26.90882492]
[136.67492676 40.45079041]
[130.22395325 53.99275970]
[139.79089355 61.29587936]
[147.61383057 70.57469940]
[153.28805542 81.41677094]
[156.50564575 93.32759094]
[157.07185364 105.75309753]
[154.91630554 118.10546875]
[150.09843445 129.79090881]
[142.80665588 140.23818970]
[155.24774170 148.61788940]
[171.01609802 149.90994263]
[177.24975586 163.43736267]
[189.69084167 171.81706238]
[202.13192749 180.19676208]
[214.57301331 188.57646179]
[230.03500366 185.30503845]
[243.23579407 193.99496460]
[246.34356689 209.49067688]
[237.51455688 222.59884644]
[221.98684692 225.54261780]
[208.97274780 216.57551575]
[206.19331360 201.01754761]
[193.75222778 192.63784790]
[181.31114197 184.25814819]
[168.87005615 175.87844849]
[153.99156189 175.18576050]
[146.86804199 161.05897522]
[134.42695618 152.67927551]
[120.98207092 159.33021545]
[120.09346008 174.30386353]
[119.20484924 189.27752686]
[118.31624603 204.25117493]
[117.42763519 219.22483826]
[126.96178436 232.12753296]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 104]
[5 103]
[6 102]
[7 101]
[8 100]
[10 19]
[11 18]
[12 17]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[49 72]
[50 71]
[51 70]
[52 69]
[56 65]
[57 64]
[58 63]
[80 99]
[81 98]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
