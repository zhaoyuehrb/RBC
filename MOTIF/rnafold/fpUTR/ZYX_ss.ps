%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:12:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGCCCCCUCUCUUCUCCCUCCCUCCUCCUUCCGUGUGUCCCUCCCCGCCCGGCUGGAGGCUGCUCCGGACCGGGACGCAGAGUCUGCGGACCCGGCGCCGAGGCGGCCACCCGAGACGCGGCGCGCACGCUCCGGCCUGCGCAGCCCGGCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[102.90351105 245.69456482]
[88.76944733 238.10458374]
[86.03294373 222.29664612]
[96.79322052 210.39723206]
[97.38581848 195.40893555]
[97.97841644 180.42065430]
[101.98281097 168.86775208]
[108.64067078 160.21333313]
[116.83124542 154.96969604]
[125.36068726 153.29080200]
[116.73681641 141.01770020]
[108.11295319 128.74459839]
[99.48908997 116.47150421]
[107.19689941 129.33966064]
[109.57402039 144.15011597]
[106.28038025 158.78404236]
[97.78715515 171.14790344]
[85.30941010 179.47291565]
[70.63221741 182.56809998]
[55.85532379 179.99063110]
[43.09272003 172.10926819]
[34.17024231 160.05151367]
[30.36435509 145.54235840]
[32.21952820 130.65753174]
[39.47036362 117.52644348]
[51.07954025 108.02765656]
[65.38624573 103.52007294]
[80.34544373 104.64902496]
[65.50984192 102.43432617]
[50.67424011 100.21962738]
[38.05459213 109.35101318]
[23.04072952 106.89365387]
[14.41312122 94.80647278]
[-0.42248166 92.59177399]
[-15.25808430 90.37707520]
[-30.04939461 95.99202728]
[-41.49479294 86.46038818]
[-56.33039474 84.24568939]
[-71.16600037 82.03099060]
[-81.94376373 93.19429779]
[-97.23059845 95.85742950]
[-111.14840698 88.99636078]
[-118.34550476 75.24931335]
[-116.05445862 59.90230179]
[-105.15622711 48.85656738]
[-89.84140015 46.35942459]
[-75.99884796 53.37107086]
[-68.95130157 67.19538879]
[-54.11569595 69.41008759]
[-39.28009415 71.62478638]
[-25.54992485 65.85142517]
[-13.04338646 75.54147339]
[1.79221678 77.75617218]
[16.62781906 79.97087097]
[28.40941620 70.93042755]
[43.48637390 72.96511078]
[52.88893890 85.38402557]
[67.72454071 87.59872437]
[82.56014252 89.81342316]
[94.91783905 81.31122589]
[98.15237427 66.66411591]
[101.38691711 52.01700592]
[104.62145233 37.36989975]
[107.85598755 22.72279167]
[111.09052277 8.07568359]
[114.32505798 -6.57142401]
[109.74559784 -21.71537018]
[120.04532623 -32.47478104]
[123.27986145 -47.12188721]
[126.51440430 -61.76899719]
[120.54317474 -79.16208649]
[132.82568359 -91.66455078]
[135.77020264 -106.37270355]
[138.71472168 -121.08085632]
[141.65924072 -135.78901672]
[144.60375977 -150.49716187]
[138.29006958 -167.76889038]
[150.32315063 -180.51158142]
[152.97651672 -195.27503967]
[155.62986755 -210.03849792]
[158.28321838 -224.80195618]
[160.93656921 -239.56541443]
[157.78736877 -256.22430420]
[172.92344666 -263.86209106]
[184.45281982 -251.43188477]
[175.70002747 -236.91206360]
[173.04667664 -222.14860535]
[170.39332581 -207.38514709]
[167.73997498 -192.62168884]
[165.08662415 -177.85823059]
[171.74295044 -167.71786499]
[169.61611938 -155.36828613]
[159.31192017 -147.55264282]
[156.36740112 -132.84449768]
[153.42288208 -118.13633728]
[150.47834778 -103.42818451]
[147.53382874 -88.72003174]
[153.98852539 -78.45014191]
[151.61811829 -66.14498901]
[141.16151428 -58.53445816]
[137.92697144 -43.88735199]
[134.69242859 -29.24024391]
[139.50325012 -15.14395618]
[128.97216797 -3.33688736]
[125.73763275 11.31022072]
[122.50309753 25.95732880]
[119.26856232 40.60443497]
[116.03401947 55.25154495]
[112.79948425 69.89865112]
[109.56494904 84.54576111]
[113.33280182 88.87004852]
[115.41234589 93.94037628]
[115.73115540 99.15580750]
[114.41570282 103.94898224]
[111.76218414 107.84764099]
[120.38604736 120.12073517]
[129.00991821 132.39382935]
[137.63378906 144.66693115]
[148.29264832 155.22100830]
[160.65034485 163.72320557]
[169.54544067 166.02833557]
[173.16593933 172.51747131]
[185.35324097 181.26216125]
[197.54054260 190.00685120]
[209.81364441 198.63072205]
[222.17132568 207.13291931]
[234.52902222 215.63511658]
[246.88671875 224.13731384]
[259.24441528 232.63951111]
[274.99923706 234.08729553]
[281.09893799 247.67562866]
[293.45663452 256.17782593]
[309.83840942 256.93246460]
[317.13442993 271.61920166]
[307.83920288 285.12957764]
[291.51483154 283.56527710]
[284.95443726 268.53552246]
[272.59674072 260.03332520]
[257.72583008 259.19366455]
[250.74221802 244.99720764]
[238.38452148 236.49501038]
[226.02682495 227.99281311]
[213.66912842 219.49061584]
[201.31143188 210.98841858]
[193.97929382 209.78152466]
[188.79585266 202.19415283]
[176.60855103 193.44946289]
[164.42123413 184.70477295]
[152.14814758 176.08090210]
[139.79045105 167.57870483]
[133.08451843 170.93734741]
[139.80157471 184.34931946]
[126.38949585 191.06617737]
[119.67264557 177.65461731]
[112.96670532 181.01324463]
[112.37410736 196.00154114]
[111.78150940 210.98982239]
[121.56871796 223.70162964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 157]
[5 156]
[6 155]
[10 118]
[11 117]
[12 116]
[13 115]
[28 59]
[29 58]
[30 57]
[33 54]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[60 110]
[61 109]
[62 108]
[63 107]
[64 106]
[65 105]
[66 104]
[68 102]
[69 101]
[70 100]
[72 97]
[73 96]
[74 95]
[75 94]
[76 93]
[78 90]
[79 89]
[80 88]
[81 87]
[82 86]
[119 150]
[120 149]
[122 148]
[123 147]
[124 146]
[125 144]
[126 143]
[127 142]
[128 141]
[129 140]
[131 138]
[132 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
