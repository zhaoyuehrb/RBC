%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUUGAGGGCGGAGAAAUGCAAGUUUCAUUACAAAAGUUAACGUAACAAAGAAUCUGGUAGAAGUGAGUUUUGGAUAGUAAAAUAAGUUUCGAACUCUGGCACCUUUCAAUUUUGUCGCACUCUCCUUGUUUUUGACA\
) } def
/len { sequence length } bind def

/coor [
[98.04673767 405.93240356]
[98.04673767 390.93240356]
[98.04673767 375.93240356]
[98.04673767 360.93240356]
[98.04673767 345.93240356]
[98.04673767 330.93240356]
[98.04673767 315.93240356]
[98.04673767 300.93240356]
[98.04673767 285.93240356]
[98.04673767 270.93240356]
[97.70774078 255.93624878]
[97.02993011 240.95156860]
[96.35211945 225.96688843]
[95.67430878 210.98220825]
[94.99649811 195.99752808]
[86.25196075 187.56318665]
[85.61214447 175.02825928]
[93.97042084 165.13258362]
[93.63143158 150.13641357]
[93.29243469 135.14024353]
[83.95720673 135.81401062]
[74.02669525 133.90646362]
[64.22531891 129.20167542]
[50.02363968 134.02995300]
[43.26597214 148.31665039]
[28.35742950 153.56173706]
[14.14298534 146.65339661]
[9.05581665 131.69023132]
[16.11405182 117.54962158]
[31.13016319 112.62093353]
[45.19535828 119.82827759]
[59.39704132 115.00000000]
[59.39704132 107.50000000]
[44.39704132 107.49977112]
[44.39750290 92.49977112]
[59.39704132 92.50000000]
[59.39704132 85.00000000]
[45.19535828 80.17172241]
[30.99367905 75.34343719]
[16.79199982 70.51515961]
[-0.15038113 71.14131927]
[-5.44218969 55.03439713]
[8.57035446 45.49055099]
[21.62027931 56.31348038]
[35.82196045 61.14176178]
[50.02363968 65.97003937]
[64.22531891 70.79831696]
[80.54742432 61.97555542]
[97.66549683 60.82647324]
[112.39542389 66.44137573]
[120.42709351 53.77282333]
[128.45877075 41.10427475]
[136.49044800 28.43572235]
[144.52212524 15.76717186]
[146.50129700 6.76130772]
[152.88119507 2.90594029]
[161.19712830 -9.57786369]
[169.51304626 -22.06166649]
[170.72441101 -37.83642960]
[184.21974182 -44.13922882]
[192.53565979 -56.62303162]
[189.64077759 -71.92849731]
[198.25215149 -84.47039032]
[212.86141968 -87.13589478]
[221.17735291 -99.61969757]
[222.38870239 -115.39446259]
[235.88403320 -121.69725800]
[244.19996643 -134.18106079]
[244.91398621 -152.54228210]
[260.86187744 -159.77902222]
[268.89355469 -172.44757080]
[276.92523193 -185.11611938]
[284.95690918 -197.78466797]
[292.98855591 -210.45321655]
[301.02023315 -223.12178040]
[292.55184937 -235.77903748]
[289.97015381 -250.78752136]
[293.72247314 -265.54693604]
[303.15866089 -277.50009155]
[316.64385986 -284.57608032]
[331.84164429 -285.54888916]
[346.11898804 -280.25000000]
[357.00216675 -269.59750366]
[362.60565186 -255.43696594]
[361.95858765 -240.22180176]
[355.17309570 -226.58811951]
[343.42480469 -216.89807129]
[328.74914551 -212.83047485]
[313.68881226 -215.09010315]
[305.65713501 -202.42153931]
[297.62545776 -189.75299072]
[289.59378052 -177.08444214]
[281.56210327 -164.41589355]
[273.53042603 -151.74734497]
[275.86328125 -139.82412720]
[269.20431519 -129.18495178]
[256.68377686 -125.86513519]
[248.36784363 -113.38133240]
[247.75129700 -98.49948883]
[233.66114807 -91.30377197]
[225.34523010 -78.81996918]
[228.51434326 -64.31161499]
[220.25865173 -51.53279877]
[205.01947021 -48.30710220]
[196.70353699 -35.82329941]
[196.08700562 -20.94145966]
[181.99685669 -13.74573994]
[173.68092346 -1.26193583]
[165.36500549 11.22186756]
[157.19067383 23.79884720]
[149.15899658 36.46739960]
[141.12731934 49.13594818]
[133.09564209 61.80450058]
[125.06397247 74.47305298]
[134.55691528 90.74542999]
[134.46696472 109.58417511]
[124.81903839 125.76515198]
[108.28860474 134.80125427]
[108.62760162 149.79740906]
[108.96659088 164.79357910]
[118.90354919 180.25000000]
[109.98117828 195.31971741]
[110.65898895 210.30439758]
[111.33679962 225.28907776]
[112.01461029 240.27375793]
[112.69242096 255.25843811]
[115.99314880 261.14428711]
[115.79142761 266.93035889]
[113.04673767 270.93240356]
[113.04673767 285.93240356]
[113.04673767 300.93240356]
[113.04673767 315.93240356]
[113.04673767 330.93240356]
[113.04673767 345.93240356]
[113.04673767 360.93240356]
[113.04673767 375.93240356]
[113.04673767 390.93240356]
[113.04673767 405.93240356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 138]
[2 137]
[3 136]
[4 135]
[5 134]
[6 133]
[7 132]
[8 131]
[9 130]
[10 129]
[11 126]
[12 125]
[13 124]
[14 123]
[15 122]
[18 120]
[19 119]
[20 118]
[23 32]
[24 31]
[37 47]
[38 46]
[39 45]
[40 44]
[50 114]
[51 113]
[52 112]
[53 111]
[54 110]
[56 109]
[57 108]
[58 107]
[60 105]
[61 104]
[64 101]
[65 100]
[67 98]
[68 97]
[70 94]
[71 93]
[72 92]
[73 91]
[74 90]
[75 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
