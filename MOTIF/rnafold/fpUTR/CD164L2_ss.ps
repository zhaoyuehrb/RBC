%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:08:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGCUCAGCCGAGCCCAGUCUGGGAGGGACGCGCCCGGCAGCUGUCCACCGAUCCCGGCCACCGCCCCCGGCCACCCCCACCCCGCGAGCCC\
) } def
/len { sequence length } bind def

/coor [
[28.19430923 307.08508301]
[18.61679840 312.53985596]
[7.89755917 315.01171875]
[-3.05879331 314.30462646]
[-13.33124828 310.49032593]
[-22.93077660 322.01635742]
[-32.53030396 333.54235840]
[-42.12983322 345.06838989]
[-44.38343048 361.31195068]
[-59.67730331 367.23052979]
[-72.27842712 356.73556519]
[-69.22384644 340.62341309]
[-53.65584946 335.46884155]
[-44.05632019 323.94284058]
[-34.45679474 312.41680908]
[-24.85726547 300.89080811]
[-32.82607269 283.31524658]
[-31.07800293 264.02120972]
[-19.99429512 248.04028320]
[-2.40045643 239.57676697]
[17.15369606 240.90185547]
[24.72517967 227.95300293]
[32.08153152 214.88073730]
[39.22074509 201.68864441]
[46.35995483 188.49653625]
[53.49916458 175.30442810]
[51.98522949 157.90663147]
[67.54310608 148.23043823]
[74.24224091 134.80949402]
[80.94136810 121.38854980]
[72.81159210 109.02729034]
[71.93338776 94.25830841]
[78.54100037 81.02072906]
[90.87206268 72.84521484]
[105.63768768 71.91231537]
[112.33682251 58.49137497]
[119.03595734 45.07043457]
[120.11280060 35.79437637]
[126.18490601 31.32201385]
[133.32411194 18.12990761]
[129.04142761 3.15338302]
[136.46952820 -10.12358761]
[150.77374268 -14.11418438]
[157.91296387 -27.30629158]
[157.67636108 -43.12572861]
[170.53862000 -50.63648224]
[177.67784119 -63.82858658]
[172.34889221 -76.32755280]
[175.21336365 -89.40936279]
[184.98797607 -98.27445984]
[197.89764404 -99.80547333]
[205.46913147 -112.75431824]
[213.04060364 -125.70317078]
[212.58985901 -142.09611511]
[226.70098877 -150.45126343]
[240.85765076 -142.17353821]
[240.49670410 -125.77835846]
[225.98945618 -118.13168335]
[218.41796875 -105.18283844]
[210.84649658 -92.23399353]
[215.83050537 -76.26622772]
[207.64723206 -61.29402924]
[190.86994934 -56.68937683]
[183.73072815 -43.49727249]
[184.47796631 -28.62142181]
[171.10507202 -20.16707993]
[163.96585083 -6.97497416]
[168.44873047 7.18268967]
[161.39648438 20.66306305]
[146.51622009 25.26911926]
[139.37701416 38.46122360]
[132.45689392 51.76956940]
[125.75775909 65.19050598]
[119.05863190 78.61145020]
[127.18840790 90.97270966]
[128.06660461 105.74169159]
[121.45899963 118.97927094]
[109.12793732 127.15478516]
[94.36231232 128.08769226]
[87.66317749 141.50862122]
[80.96404266 154.92956543]
[84.31069946 167.52005005]
[78.29858398 178.62068176]
[66.69126892 182.44363403]
[59.55205917 195.63574219]
[52.41284943 208.82785034]
[45.27363968 222.01995850]
[43.89068604 231.25534058]
[37.67402649 235.52449036]
[30.10254478 248.47334290]
[37.22969055 257.04858398]
[41.58761597 267.28881836]
[42.82097244 278.32769775]
[40.83820724 289.23513794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 16]
[6 15]
[7 14]
[8 13]
[21 90]
[22 89]
[23 87]
[24 86]
[25 85]
[26 84]
[28 81]
[29 80]
[30 79]
[35 74]
[36 73]
[37 72]
[39 71]
[40 70]
[43 67]
[44 66]
[46 64]
[47 63]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
