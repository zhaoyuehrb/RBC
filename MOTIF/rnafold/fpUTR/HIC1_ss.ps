%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGAGACGCGACCAGGACGCGGGGAGGACGGACCAGCAGGACAGACCGACCGGGGGCCCGGCGGGCGGAGGGCAGCGCAGCCACGUCCCCCCUGGAUCCGCCGUCAGCCGGGCCCGGGGCUUUCGACAUGCCCCCCAGGAGAGUGUGCUGGGCAGACG\
) } def
/len { sequence length } bind def

/coor [
[131.37174988 364.04824829]
[142.65661621 353.22299194]
[141.48703003 338.26867676]
[140.31742859 323.31433105]
[131.61131287 311.22912598]
[138.24900818 296.86764526]
[137.07942200 281.91333008]
[135.76399231 266.97109985]
[134.30282593 252.04244995]
[132.84167480 237.11378479]
[131.38052368 222.18511963]
[117.95151520 212.09878540]
[115.90791321 195.08898926]
[126.99325562 181.58752441]
[125.24109650 166.69021606]
[116.07008362 154.95387268]
[122.14241028 140.34437561]
[120.39025116 125.44705963]
[106.48716736 129.87213135]
[93.00189972 127.65665436]
[82.74393463 120.09608459]
[77.47809601 109.51171875]
[62.53588486 110.82715607]
[47.59367752 112.14259338]
[40.16582870 123.41454315]
[27.77692604 128.26435852]
[15.04916573 125.12402344]
[6.59328318 115.36270142]
[-8.37174797 116.38633728]
[-14.10131264 130.49070740]
[-25.34071732 140.66729736]
[-39.82474899 144.93731689]
[-54.66543198 142.50521851]
[-66.92786407 133.90625000]
[-74.21061707 120.88983917]
[-89.17564392 121.91347504]
[-102.47575378 131.50717163]
[-117.32126617 124.53989410]
[-118.44038391 108.17897797]
[-104.68185425 99.25512695]
[-90.19927979 106.94844055]
[-75.23425293 105.92480469]
[-69.79173279 92.03795624]
[-58.81440735 81.84934998]
[-44.44311905 77.41910553]
[-29.51255989 79.67710876]
[-16.99212837 88.22846985]
[-9.39538479 101.42130280]
[5.56964684 100.39766693]
[16.04466629 87.26958466]
[33.10698700 85.72465515]
[46.27824020 97.20037842]
[61.22045135 95.88494873]
[76.16265869 94.56951141]
[95.35678101 71.85209656]
[127.78313446 82.92918396]
[131.26345825 68.33852386]
[134.74378967 53.74786758]
[138.22412109 39.15720749]
[141.70445251 24.56655121]
[145.18478394 9.97589302]
[148.66511536 -4.61476421]
[152.14544678 -19.20542145]
[155.62577820 -33.79608154]
[148.20390320 -53.86390305]
[162.85552979 -68.36131287]
[165.47625732 -83.13059235]
[168.09700012 -97.89987946]
[170.71772766 -112.66916656]
[173.33847046 -127.43844604]
[175.95919800 -142.20773315]
[177.85661316 -157.08723450]
[179.02621460 -172.04158020]
[180.19580078 -186.99591064]
[170.20249939 -198.94461060]
[171.60166931 -214.09376526]
[183.05451965 -223.54722595]
[184.22410583 -238.50155640]
[185.39369202 -253.45588684]
[174.93455505 -265.30416870]
[176.00021362 -281.07250977]
[187.95841980 -291.40579224]
[203.71459961 -290.17349243]
[213.92086792 -278.10668945]
[212.52204895 -262.36444092]
[200.34802246 -252.28630066]
[199.17843628 -237.33197021]
[198.00885010 -222.37763977]
[207.85270691 -211.25854492]
[206.87960815 -196.07606506]
[195.15013123 -185.82630920]
[193.98054504 -170.87197876]
[192.81095886 -155.91764832]
[205.88002014 -163.27967834]
[219.85818481 -157.83808899]
[224.50976562 -143.57756042]
[216.42857361 -130.94053650]
[201.53216553 -129.18064880]
[190.72848511 -139.58699036]
[188.10774231 -124.81771088]
[185.48701477 -110.04843140]
[182.86627197 -95.27914429]
[180.24554443 -80.50985718]
[177.62481689 -65.74057770]
[183.88438416 -59.32043839]
[186.49929810 -50.59931564]
[184.75273132 -41.52304459]
[178.91622925 -34.17892075]
[170.21643066 -30.31574821]
[166.73611450 -15.72509098]
[163.25578308 -1.13443327]
[159.77545166 13.45622444]
[156.29512024 28.04688263]
[152.81478882 42.63753891]
[149.33445740 57.22819901]
[145.85412598 71.81885529]
[142.37379456 86.40951538]
[150.16754150 99.22580719]
[164.72355652 102.84832001]
[179.27957153 106.47084045]
[193.83557129 110.09335327]
[208.39158630 113.71587372]
[219.54887390 103.06137848]
[234.69956970 100.15277100]
[249.00914001 105.91818237]
[257.91143799 118.51788330]
[258.56579590 133.93136597]
[250.76338196 147.24023438]
[236.99394226 154.19767761]
[221.65124512 152.58361816]
[209.63108826 142.91307068]
[204.76905823 128.27188110]
[190.21305847 124.64936066]
[175.65704346 121.02684784]
[161.10104370 117.40432739]
[146.54502869 113.78181458]
[135.28756714 123.69490051]
[137.03971863 138.59220886]
[146.33605957 151.39411926]
[140.13841248 164.93806458]
[141.89056396 179.83537292]
[153.37507629 186.93016052]
[158.58537292 199.17182922]
[155.81887817 211.98603821]
[146.30918884 220.72396851]
[147.77033997 235.65263367]
[149.23149109 250.58129883]
[150.69265747 265.50994873]
[154.66067505 273.79492188]
[152.03375244 280.74374390]
[153.20335388 295.69805908]
[161.99313354 308.85293579]
[155.27175903 322.14474487]
[156.44136047 337.09909058]
[157.61094666 352.05340576]
[170.44160461 360.99255371]
[174.47456360 376.10113525]
[167.80557251 390.24536133]
[153.58354187 396.74673462]
[138.52368164 392.53552246]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 155]
[3 154]
[4 153]
[6 151]
[7 150]
[8 148]
[9 147]
[10 146]
[11 145]
[14 141]
[15 140]
[17 138]
[18 137]
[22 54]
[23 53]
[24 52]
[28 49]
[29 48]
[35 42]
[36 41]
[56 117]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[64 109]
[66 104]
[67 103]
[68 102]
[69 101]
[70 100]
[71 99]
[72 93]
[73 92]
[74 91]
[77 88]
[78 87]
[79 86]
[118 136]
[119 135]
[120 134]
[121 133]
[122 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
