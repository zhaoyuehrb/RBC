%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:04:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGGAAAGGGGAAGUUUGGGAGGAAGGCUUCUGAGAAGACUGGUGGGAGAGAAGGAGAGCCUGCAGACAGAGGCCUCCAGCUUGGUCUGUCUCCCCACCUCUACCAGCAUCUGCUGAGCU\
) } def
/len { sequence length } bind def

/coor [
[166.73706055 261.64166260]
[160.03065491 248.22436523]
[153.32424927 234.80705261]
[146.61784363 221.38975525]
[139.91143799 207.97244263]
[129.83026123 205.57173157]
[122.63158417 197.81263733]
[120.92166901 187.14356995]
[125.51909637 177.12142944]
[119.51229095 163.37667847]
[113.50547791 149.63192749]
[107.49867249 135.88717651]
[101.49185944 122.14241791]
[88.14914703 120.81499481]
[77.05738831 111.60729980]
[72.71482849 96.80771637]
[58.03199387 99.87599182]
[43.34915924 102.94427490]
[31.42346382 113.34082794]
[17.38261986 108.37052155]
[2.69978452 111.43879700]
[-11.98305035 114.50708008]
[-26.66588593 117.57536316]
[-41.34872055 120.64364624]
[-53.20593643 131.97230530]
[-68.86734009 127.10890961]
[-72.22181702 111.05651093]
[-59.81857300 100.32843781]
[-44.41700363 105.96080780]
[-29.73416710 102.89252472]
[-15.05133152 99.82424927]
[-0.36849648 96.75596619]
[14.31433868 93.68768311]
[25.18982124 83.51059723]
[40.28087997 88.26144409]
[54.96371460 85.19316101]
[69.64654541 82.12487793]
[79.83564758 71.11660004]
[81.76162720 56.24075699]
[83.68759918 41.36491776]
[85.61357880 26.48907852]
[87.53955078 11.61323738]
[75.18789673 20.12421417]
[60.23633194 18.91979218]
[49.40631104 8.54141808]
[47.56646347 -6.34531927]
[55.54388809 -19.04810143]
[69.75234222 -23.85640335]
[83.80443573 -18.60865974]
[91.38292694 -5.66462374]
[95.94464874 -19.95415497]
[100.50637054 -34.24368668]
[93.51358795 -48.16268921]
[98.34337616 -62.58932114]
[111.65612030 -69.17009735]
[116.21784210 -83.45962524]
[120.77956390 -97.74916077]
[125.34128571 -112.03868866]
[124.97756195 -121.28764343]
[130.20880127 -126.63471985]
[135.13693237 -140.80206299]
[140.06506348 -154.96939087]
[144.99320984 -169.13673401]
[136.02281189 -181.79815674]
[136.24145508 -197.31369019]
[145.56509399 -209.71730042]
[160.40856934 -214.23954773]
[175.06428528 -209.14152527]
[183.89680481 -196.38354492]
[183.50984192 -180.87129211]
[174.05221558 -168.56954956]
[159.16053772 -164.20860291]
[154.23240662 -150.04125977]
[149.30427551 -135.87391663]
[144.37614441 -121.70658112]
[139.63081360 -107.47696686]
[135.06909180 -93.18743896]
[130.50737000 -78.89790344]
[125.94564819 -64.60837555]
[132.98286438 -51.53117371]
[128.56019592 -36.97457504]
[114.79590607 -29.68196297]
[110.23418427 -15.39243221]
[105.67246246 -1.10290110]
[102.41539001 13.53921318]
[100.48941803 28.41505241]
[98.56343842 43.29089355]
[96.63746643 58.16673279]
[94.71148682 73.04257202]
[111.39672852 76.46233368]
[122.08020020 88.63820648]
[123.17571259 103.96408844]
[115.23661804 116.13561249]
[121.24342346 129.88037109]
[127.25023651 143.62512207]
[133.25704956 157.36987305]
[139.26385498 171.11462402]
[156.01412964 182.18792725]
[153.32873535 201.26603699]
[160.03514099 214.68334961]
[166.74154663 228.10064697]
[173.44795227 241.51795959]
[180.15435791 254.93527222]
[199.44953918 260.11758423]
[208.74156189 277.46438599]
[202.55610657 295.82916260]
[210.27799988 308.68887329]
[217.99989319 321.54861450]
[225.72178650 334.40832520]
[240.31716919 341.88540649]
[240.86918640 358.27523804]
[226.80995178 366.71740723]
[212.60241699 358.52731323]
[212.86206055 342.13021851]
[205.14016724 329.27050781]
[197.41827393 316.41076660]
[189.69638062 303.55105591]
[179.23156738 303.82904053]
[169.54559326 299.64779663]
[162.46214294 291.71997070]
[159.34608459 281.47042847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[9 97]
[10 96]
[11 95]
[12 94]
[13 93]
[16 37]
[17 36]
[18 35]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[50 84]
[51 83]
[52 82]
[55 79]
[56 78]
[57 77]
[58 76]
[60 75]
[61 74]
[62 73]
[63 72]
[106 117]
[107 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
