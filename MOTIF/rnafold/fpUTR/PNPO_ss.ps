%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGGCUCCGAGGACUUAGGACCUGUUAGCUUGGUUGGGCGACUGGCAAAUCCUUCCUUCCCCGGGGUAGAAGUCCAGGGUGAGAAAUUGGUUCCGAACUCAAAGGAACCCAGUGCCGGGCCACAGCCGGGUCACGUGGCCGGCGGCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[94.59310150 140.07585144]
[85.39073944 137.24197388]
[77.21580505 132.35334778]
[70.51248932 125.73296356]
[65.63120270 117.79609680]
[62.81037140 109.02442169]
[47.82285309 109.63625336]
[32.83533859 110.24807739]
[17.84782028 110.85990906]
[2.86030316 111.47174072]
[-12.12721348 112.08356476]
[-25.60030746 120.37731934]
[-38.63258362 113.16558075]
[-53.62009811 113.77741241]
[-68.60761261 114.38924408]
[-77.76483917 128.57617188]
[-93.41061401 134.47203064]
[-109.33419037 129.94720459]
[-119.33917999 116.96751404]
[-134.31109619 117.88494110]
[-149.28302002 118.80236816]
[-164.25492859 119.71978760]
[-174.70088196 131.27487183]
[-189.89761353 131.99198914]
[-200.84922791 121.96215820]
[-215.82115173 122.87957764]
[-230.79307556 123.79700470]
[-245.76498413 124.71443176]
[-260.73690796 125.63185883]
[-275.70883179 126.54927826]
[-284.14208984 130.21649170]
[-290.99490356 127.32954407]
[-305.98242188 127.94137573]
[-320.96994019 128.55320740]
[-331.49450684 140.34342957]
[-347.27792358 141.15498352]
[-358.95623779 130.50637817]
[-359.60086060 114.71524048]
[-348.82937622 103.15017700]
[-333.03231812 102.67253113]
[-321.58178711 113.56568909]
[-306.59426880 112.95385742]
[-291.60675049 112.34202576]
[-276.62625122 111.57736206]
[-261.65432739 110.65993500]
[-246.68241882 109.74251556]
[-231.71049500 108.82508850]
[-216.73857117 107.90766144]
[-201.76666260 106.99023438]
[-192.12155151 95.69831848]
[-176.95097351 94.55463409]
[-165.17236328 104.74787140]
[-150.20043945 103.83044434]
[-135.22851562 102.91302490]
[-120.25659943 101.99559784]
[-114.13906097 90.09155273]
[-102.83937836 82.71846008]
[-89.26314545 81.90042877]
[-76.96533966 87.95920563]
[-69.21944427 99.40172577]
[-54.23192596 98.78989410]
[-39.24441147 98.17807007]
[-26.84332466 89.92807770]
[-12.73904228 97.09604645]
[2.24847436 96.48422241]
[17.23599052 95.87239075]
[32.22350693 95.26056671]
[47.21102524 94.64873505]
[62.19854355 94.03690338]
[64.25575256 85.26190948]
[68.34153748 77.12490845]
[74.26953888 70.09268188]
[81.74652863 64.57962036]
[90.38681793 60.92342758]
[99.73200226 59.36466217]
[109.27532959 60.03134918]
[118.48909760 62.92964172]
[126.85389709 67.94113159]
[133.88783264 74.82712555]
[139.17424011 83.23976135]
[150.90170288 73.88741302]
[162.62918091 64.53506470]
[148.34535217 59.95552826]
[142.82482910 46.00834656]
[150.10491943 32.89346313]
[164.86151123 30.20213699]
[176.30270386 39.90260696]
[176.06089783 54.90139008]
[188.67970276 46.79177856]
[201.29850769 38.68216705]
[213.91731262 30.57255363]
[226.53611755 22.46294022]
[239.07154846 14.22504139]
[251.52229309 5.85971117]
[263.97305298 -2.50561881]
[276.42379761 -10.87094879]
[276.00631714 -26.29266167]
[284.01223755 -39.48010254]
[297.88693237 -46.22521210]
[313.20303345 -44.37564087]
[325.07321167 -34.52158737]
[329.70974731 -19.80744362]
[325.63311768 -4.92843723]
[314.14422607 5.36759377]
[298.90905762 7.79522371]
[284.78912354 1.57980430]
[272.33837891 9.94513416]
[259.88763428 18.31046486]
[247.43687439 26.67579460]
[243.61570740 33.05502319]
[234.64572144 35.08174515]
[222.02691650 43.19135666]
[209.40811157 51.30096817]
[196.78932190 59.41057968]
[184.17051697 67.52019501]
[171.98152161 76.26254272]
[160.25405884 85.61488342]
[148.52658081 94.96723175]
[147.76191711 109.94773102]
[158.47615051 120.44559479]
[169.19038391 130.94346619]
[179.90461731 141.44132996]
[190.61885071 151.93919373]
[195.79350281 153.26083374]
[199.53666687 156.17141724]
[201.47941589 159.84286499]
[201.64253235 163.42207336]
[211.69464111 174.55558777]
[221.74676514 185.68908691]
[231.79887390 196.82260132]
[241.85098267 207.95611572]
[249.97616577 212.26303101]
[251.99172974 219.42077637]
[261.81463623 230.75701904]
[277.48037720 235.60641479]
[280.84921265 251.65580750]
[268.45556641 262.39495850]
[253.04896545 256.77636719]
[250.47840881 240.57992554]
[240.65548706 229.24368286]
[230.71746826 218.00822449]
[220.66535950 206.87471008]
[210.61325073 195.74119568]
[200.56114197 184.60769653]
[190.50903320 173.47418213]
[180.12098694 162.65342712]
[169.40675354 152.15556335]
[158.69252014 141.65769958]
[147.97828674 131.15983582]
[137.26405334 120.66196442]
[130.97375488 128.62438965]
[123.05184174 134.79829407]
[113.98331451 138.86813354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 69]
[7 68]
[8 67]
[9 66]
[10 65]
[11 64]
[13 62]
[14 61]
[15 60]
[19 55]
[20 54]
[21 53]
[22 52]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[32 43]
[33 42]
[34 41]
[80 118]
[81 117]
[82 116]
[88 115]
[89 114]
[90 113]
[91 112]
[92 111]
[93 109]
[94 108]
[95 107]
[96 106]
[119 150]
[120 149]
[121 148]
[122 147]
[123 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
