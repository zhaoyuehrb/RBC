%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCACCCUGGGCCCGCCCCCGGCUCCAUCUUGCGGGAGACCGGGUUGGGCUGUGACGCUGCUGCUGGGGUCAGA\
) } def
/len { sequence length } bind def

/coor [
[91.09594727 127.34111023]
[82.89173126 139.89860535]
[74.68750763 152.45610046]
[66.48328400 165.01361084]
[58.27906036 177.57110596]
[54.67766953 194.13812256]
[37.76112747 195.26368713]
[31.99658585 179.31983948]
[45.72156525 169.36688232]
[53.92578506 156.80938721]
[62.13000870 144.25189209]
[70.33422852 131.69438171]
[78.53845215 119.13689423]
[71.67893219 104.97351074]
[73.30233765 89.32042694]
[82.92240906 76.86616516]
[77.46978760 62.89229584]
[72.01716614 48.91843033]
[66.56454468 34.94456482]
[60.25651169 21.33542633]
[53.11729813 8.14331913]
[45.97808838 -5.04878664]
[38.83887863 -18.24089241]
[31.42855263 -31.28263664]
[23.75027657 -44.16844559]
[16.07200050 -57.05425644]
[8.39372444 -69.94006348]
[-7.07087803 -71.21509552]
[-18.81057358 -81.36197662]
[-22.31120872 -96.47902679]
[-16.22671700 -110.75342560]
[-2.89671278 -118.69638824]
[12.55314827 -117.25366974]
[24.18207741 -106.98003387]
[27.51851654 -91.82589722]
[21.27953339 -77.61833954]
[28.95780945 -64.73252869]
[36.63608551 -51.84672165]
[44.31436157 -38.96091080]
[50.62463379 -34.70618439]
[52.03098297 -25.38010406]
[59.17019653 -12.18799782]
[66.30940247 1.00410855]
[73.44861603 14.19621468]
[77.01405334 15.52524948]
[80.01660156 18.82092476]
[81.45333099 23.74704552]
[80.53841400 29.49194527]
[85.99103546 43.46581268]
[91.44365692 57.43967819]
[96.89627075 71.41354370]
[114.84936523 75.37653351]
[126.73175812 89.40605164]
[127.68571472 107.76657104]
[140.57153320 115.44484711]
[153.45733643 123.12312317]
[166.34313965 130.80140686]
[182.15884399 131.21875000]
[189.13165283 144.38040161]
[202.01745605 152.05867004]
[217.27468872 147.93647766]
[230.93620300 155.88246155]
[234.89686584 171.18241882]
[226.80688477 184.75915527]
[211.46589661 188.55783081]
[197.97546387 180.32476807]
[194.33918762 164.94448853]
[181.45336914 157.26620483]
[166.55935669 157.39807129]
[158.66487122 143.68721008]
[145.77905273 136.00892639]
[132.89324951 128.33065796]
[120.00743866 120.65238190]
[113.74636078 125.25581360]
[106.48120880 128.01451111]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[5 9]
[16 51]
[17 50]
[18 49]
[19 48]
[20 44]
[21 43]
[22 42]
[23 41]
[24 39]
[25 38]
[26 37]
[27 36]
[54 73]
[55 72]
[56 71]
[57 70]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
