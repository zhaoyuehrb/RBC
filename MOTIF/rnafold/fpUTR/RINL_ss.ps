%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:50:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCUCUCUCCACUUCCUGCUACUGCAGGCCUCUCCUCCGAGAACAGAGGCCAGGUCAUGACUCACUGGCUUCCUGCAACCUGACG\
) } def
/len { sequence length } bind def

/coor [
[173.70913696 243.55165100]
[161.65370178 252.47726440]
[148.09915161 258.90176392]
[133.55772400 262.58236694]
[118.57894135 263.37997437]
[103.72886658 261.26446533]
[89.56869507 256.31579590]
[76.63354492 248.72093201]
[65.41223907 238.76692200]
[56.32884598 226.82992554]
[49.72662354 213.36103821]
[45.85507584 198.86927795]
[44.86051178 183.90228271]
[46.78051758 169.02568054]
[51.54253387 154.80163574]
[58.96660233 141.76771545]
[68.77330780 130.41537476]
[53.85925293 128.81195068]
[38.94519806 127.20851898]
[24.03114319 125.60508728]
[9.11708832 124.00166321]
[-5.65304375 131.12733459]
[-19.05501366 121.67645264]
[-17.30202484 105.37126923]
[-2.19740152 98.98516083]
[10.72051430 109.08760834]
[25.63456917 110.69103241]
[40.54862213 112.29446411]
[55.46267700 113.89788818]
[70.37673187 115.50131989]
[74.87131500 109.49725342]
[83.86048126 97.48913574]
[88.35506439 91.48507690]
[82.61481476 77.62688446]
[76.87455750 63.76869202]
[71.13430786 49.91049957]
[57.80168152 40.36203766]
[59.67364502 24.07008362]
[74.82447815 17.79440308]
[87.66831207 27.99087715]
[84.99250031 44.17024994]
[90.73274994 58.02844238]
[96.47300720 71.88663483]
[102.21325684 85.74482727]
[116.56798553 81.39260864]
[122.67997742 95.09166718]
[136.91236877 90.35467529]
[151.14476013 85.61767578]
[165.29032898 80.62740326]
[179.34457397 75.38544464]
[193.39881897 70.14347839]
[207.45306396 64.90151978]
[221.50730896 59.65955353]
[235.56155396 54.41759109]
[249.61579895 49.17562866]
[251.48080444 33.98417282]
[260.20153809 21.40612221]
[273.77404785 14.33182049]
[289.07946777 14.38689137]
[302.60070801 21.55867958]
[311.23068237 34.19915771]
[312.98632812 49.40364456]
[307.46417236 63.67824936]
[295.93319702 73.74278259]
[281.04309082 77.28447723]
[266.21551514 73.48949432]
[254.85775757 63.22987366]
[240.80351257 68.47183990]
[226.74926758 73.71379852]
[212.69502258 78.95576477]
[198.64077759 84.19772339]
[184.58653259 89.43968964]
[170.53228760 94.68164825]
[165.24661255 100.09148407]
[155.88174438 99.85006714]
[141.64935303 104.58705902]
[127.41696930 109.32405090]
[142.20625305 111.82943726]
[156.23136902 117.14887238]
[168.96226501 125.08134460]
[179.91786194 135.32707214]
[188.68414307 147.49885559]
[194.92979431 161.13673401]
[198.41882324 175.72531128]
[199.01936340 190.71328735]
[196.70872498 205.53425598]
[191.57420349 219.62811279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[33 44]
[34 43]
[35 42]
[36 41]
[46 77]
[47 76]
[48 75]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
