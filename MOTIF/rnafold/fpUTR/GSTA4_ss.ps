%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:37:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUCUCCAUUGGUGAGGUCGUCCCGGAGCCUCGCCCAGCUCCCGCGCGCUAGAGCCGCCUGCUGGUCUCACCCAGCCGGGACCGCUGACCUGGCGCUUUGUGCGGCUCCAGGCCUCCGAGUGGACUCCAGAAAGCCUGAAAAGCUAUC\
) } def
/len { sequence length } bind def

/coor [
[109.03510284 226.62361145]
[109.52400970 219.74360657]
[111.17150879 213.03915405]
[113.93224335 206.70410156]
[117.72863770 200.92201233]
[122.45307922 195.86083984]
[127.97095490 191.66804504]
[122.48392487 177.70764160]
[116.99688721 163.74725342]
[111.50985718 149.78686523]
[106.02282715 135.82647705]
[100.53579712 121.86608887]
[86.35923767 116.96453857]
[73.42118073 124.55444336]
[60.48312759 132.14434814]
[47.54507065 139.73426819]
[34.60701370 147.32417297]
[21.66895866 154.91407776]
[8.73090172 162.50398254]
[-4.12750053 170.22807312]
[-16.90485764 178.08549500]
[-20.32605171 193.51504517]
[-33.70024109 201.93565369]
[-49.09275818 198.35151672]
[-57.37149048 184.88905334]
[-53.62482071 169.53529358]
[-40.07557678 161.39935303]
[-24.76228333 165.30813599]
[-11.98492622 157.45071411]
[-7.90835571 151.22760010]
[1.14099371 149.56593323]
[14.07905006 141.97602844]
[27.01710510 134.38610840]
[39.95516205 126.79620361]
[52.89321899 119.20629883]
[65.83127594 111.61639404]
[78.76933289 104.02648163]
[82.77706909 89.57179260]
[75.59455872 76.40321350]
[68.41204834 63.23463058]
[61.22954178 50.06604767]
[53.77463150 37.04973602]
[46.05054855 24.19133377]
[38.32646179 11.33293152]
[30.60237885 -1.52547050]
[20.50372887 -12.61678600]
[8.42374039 -21.50913620]
[-3.65624833 -30.40148544]
[-12.48413277 -32.99383926]
[-15.89246559 -39.60662460]
[-27.78484535 -48.74835587]
[-44.10407257 -50.36540222]
[-50.61583710 -65.41628265]
[-40.62139511 -78.41793823]
[-24.40217018 -75.99538422]
[-18.64311028 -60.64073563]
[-6.75073099 -51.49900436]
[5.23610163 -42.48147202]
[17.31608963 -33.58912277]
[29.39607811 -24.69677353]
[35.70164108 -28.75754547]
[48.31277084 -36.87908554]
[54.61833572 -40.93985748]
[51.52001190 -55.61638260]
[48.42169189 -70.29290771]
[45.32336807 -84.96943665]
[42.22504807 -99.64595795]
[28.84727669 -108.06087494]
[25.41951752 -123.48896790]
[33.97539902 -136.77702332]
[49.43886948 -140.04147339]
[62.63572693 -131.34558105]
[65.73650360 -115.84846497]
[56.90157318 -102.74428558]
[59.99989319 -88.06775665]
[63.09821701 -73.39122772]
[66.19654083 -58.71470642]
[69.29486084 -44.03818130]
[61.58137131 -18.26125908]
[43.46078110 -9.24955559]
[51.18486404 3.60884690]
[58.90895081 16.46724892]
[66.63303375 29.32565117]
[71.02822113 31.34006119]
[74.17346191 36.17108154]
[74.39812469 42.88353729]
[81.58063507 56.05212021]
[88.76314545 69.22070312]
[95.94565582 82.38928223]
[105.29714966 79.48410034]
[116.23857117 81.91428375]
[129.76275635 75.42611694]
[143.28694153 68.93795013]
[156.81114197 62.44978714]
[170.33532715 55.96162415]
[179.43101501 43.01638794]
[194.25280762 44.48732758]
[207.77699280 37.99916077]
[221.30119324 31.51099586]
[226.30607605 16.52010918]
[240.48234558 9.53378296]
[255.41947937 14.69688034]
[262.25552368 28.94622803]
[256.93481445 43.82793808]
[242.61398315 50.51296234]
[227.78935242 45.03518677]
[214.26516724 51.52334976]
[200.74096680 58.01151657]
[192.61262512 70.49267578]
[176.82348633 69.48580933]
[163.29930115 75.97397614]
[149.77511597 82.46214294]
[136.25091553 88.95030975]
[122.72673035 95.43846893]
[137.22383118 91.58694458]
[150.56118774 98.45096588]
[155.85270691 112.48662567]
[150.36636353 126.44728851]
[136.93476868 133.12503052]
[122.49267578 129.07211304]
[114.49618530 116.37905884]
[119.98321533 130.33944702]
[125.47024536 144.29983521]
[130.95727539 158.26022339]
[136.44430542 172.22061157]
[141.93135071 186.18099976]
[166.56875610 189.31689453]
[184.73036194 206.10214233]
[189.75100708 230.20932007]
[179.88546753 252.65551758]
[189.15042114 264.45214844]
[198.41535950 276.24880981]
[214.10804749 279.58334351]
[221.15606689 293.99533081]
[214.15278625 308.42907715]
[198.47052002 311.81228638]
[186.13935852 301.54965210]
[186.61872864 285.51376343]
[177.35377502 273.71710205]
[168.08882141 261.92047119]
[161.80422974 264.56597900]
[155.15625000 266.11148071]
[148.33607483 266.51025391]
[141.54025269 265.74862671]
[134.96498108 263.84631348]
[128.80047607 260.85607910]
[123.22546387 256.86209106]
[118.40199280 251.97776794]
[114.47073364 246.34236145]
[111.54684448 240.11712646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 126]
[8 125]
[9 124]
[10 123]
[11 122]
[12 121]
[13 37]
[14 36]
[15 35]
[16 34]
[17 33]
[18 32]
[19 31]
[20 29]
[21 28]
[38 89]
[39 88]
[40 87]
[41 86]
[42 83]
[43 82]
[44 81]
[45 80]
[46 60]
[47 59]
[48 58]
[50 57]
[51 56]
[63 78]
[64 77]
[65 76]
[66 75]
[67 74]
[91 114]
[92 113]
[93 112]
[94 111]
[95 110]
[97 108]
[98 107]
[99 106]
[130 140]
[131 139]
[132 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
