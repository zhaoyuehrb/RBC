%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGUGCACCUUGCGGUGGGCGGCGAACGGCAGCCGCGGCAGCAGCUAGGGGGCUUGUGCACACAGCGAGGGAGACUUAGGGACUGGCAGACGGACGGACGGACGGCGAGGACCCUACCCGAGCCCCCGAGCC\
) } def
/len { sequence length } bind def

/coor [
[168.97763062 79.81121063]
[156.32322693 75.03741455]
[143.45164490 82.73952484]
[130.58007812 90.44163513]
[117.70849609 98.14375305]
[119.74127960 116.76486969]
[101.97941589 133.93560791]
[93.68244934 146.43202209]
[85.38547516 158.92843628]
[77.08850861 171.42483521]
[76.60449982 187.81684875]
[62.04025650 195.35440063]
[48.37822342 186.28352356]
[49.67272949 169.93554688]
[64.59210205 163.12786865]
[72.88906860 150.63145447]
[81.18603516 138.13505554]
[89.48300171 125.63863373]
[80.89497375 113.33961487]
[72.30773163 101.04168701]
[57.71808624 104.52626038]
[43.12844086 108.01084137]
[28.53879929 111.49542236]
[13.94915581 114.98000336]
[8.11880493 129.36007690]
[-5.06821966 137.53822327]
[-20.54123878 136.36976624]
[-32.35056305 126.30400848]
[-35.95526123 111.21143341]
[-29.96925735 96.89544678]
[-16.69429207 88.86083984]
[-1.23485816 90.19708252]
[10.46457481 100.39035797]
[25.05421829 96.90577698]
[39.64386368 93.42120361]
[54.23350525 89.93662262]
[68.82315063 86.45204163]
[92.79175568 75.12390137]
[110.00638580 85.27217865]
[122.87796021 77.57006073]
[135.74954224 69.86795044]
[148.62110901 62.16583633]
[152.53707886 45.16235352]
[167.22595215 36.38399887]
[183.40653992 40.81204605]
[196.09402466 32.81030655]
[208.78149414 24.80856895]
[216.32667542 10.90242004]
[231.21926880 10.65752220]
[243.90673828 2.65578341]
[256.59423828 -5.34595585]
[269.28170776 -13.34769440]
[281.96917725 -21.34943390]
[294.65667725 -29.35117340]
[307.34414673 -37.35291290]
[320.03161621 -45.35465240]
[307.55996704 -58.36804581]
[313.40966797 -73.75154114]
[310.61276245 -88.48847961]
[307.81585693 -103.22541809]
[295.41812134 -113.40753174]
[295.79299927 -129.44619751]
[308.65295410 -139.03794861]
[324.13290405 -134.82478333]
[330.35797119 -120.03871155]
[322.55279541 -106.02232361]
[325.34970093 -91.28538513]
[328.14660645 -76.54844666]
[338.46475220 -67.89147186]
[337.96286011 -53.15414429]
[352.46679688 -56.97978592]
[366.97073364 -60.80542755]
[355.87704468 -70.90145111]
[356.61389160 -85.88333893]
[368.64480591 -94.84201050]
[383.20938110 -91.25418091]
[389.70245361 -77.73234558]
[383.39645386 -64.12277222]
[398.24829102 -66.22584534]
[413.10012817 -68.32891846]
[427.95196533 -70.43199158]
[442.80380249 -72.53506470]
[456.97628784 -84.22380829]
[472.99270630 -77.14980316]
[487.79113770 -79.60046387]
[500.14178467 -89.48844147]
[513.96215820 -83.93444824]
[528.76062012 -86.38510895]
[536.09020996 -101.57924652]
[550.86920166 -109.36428070]
[567.21783447 -106.86542511]
[578.76287842 -95.25588226]
[593.49981689 -98.05278778]
[602.18713379 -111.25529480]
[617.68225098 -114.36616516]
[630.79217529 -105.53976440]
[633.73901367 -90.01264191]
[624.77453613 -76.99676514]
[609.21710205 -74.21422577]
[596.29675293 -83.31584930]
[581.55981445 -80.51894379]
[576.98138428 -67.92293549]
[566.67889404 -59.18209839]
[553.29187012 -56.67690659]
[540.32067871 -61.17185211]
[531.21130371 -71.58665466]
[516.41284180 -69.13599396]
[505.12066650 -59.42330551]
[490.24182129 -64.80200958]
[475.44335938 -62.35134888]
[468.10116577 -52.66437531]
[455.72390747 -50.54651642]
[444.90686035 -57.68323135]
[430.05502319 -55.58015823]
[415.20318604 -53.47708511]
[400.35134888 -51.37401199]
[385.49951172 -49.27093887]
[370.79638672 -46.30147934]
[356.29244995 -42.47583771]
[341.78848267 -38.65019608]
[328.03335571 -32.66717148]
[315.34588623 -24.66543198]
[302.65841675 -16.66369247]
[289.97091675 -8.66195297]
[277.28344727 -0.66021389]
[264.59597778 7.34152508]
[251.90847778 15.34326458]
[239.22100830 23.34500313]
[232.58332825 36.67881393]
[216.78323364 37.49604797]
[204.09576416 45.49778748]
[191.40827942 53.49952698]
[190.33100891 66.39402008]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 42]
[3 41]
[4 40]
[5 39]
[7 18]
[8 17]
[9 16]
[10 15]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[45 132]
[46 131]
[47 130]
[49 128]
[50 127]
[51 126]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[58 68]
[59 67]
[60 66]
[70 120]
[71 119]
[72 118]
[78 117]
[79 116]
[80 115]
[81 114]
[82 113]
[84 110]
[85 109]
[87 107]
[88 106]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
