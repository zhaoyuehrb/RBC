%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACUUCCUCCUUCACUUGCCUGGACGCUGCGCCACAUCCCACCGGCCCUUACACUGUGGUGUCCAGCAGCAUCCGGCUUC\
) } def
/len { sequence length } bind def

/coor [
[16.11274147 324.58084106]
[7.91602135 337.24874878]
[-3.28075290 347.36285400]
[-16.71416473 354.23348999]
[-31.46830368 357.39227295]
[-46.53720856 356.62377930]
[-60.89345169 351.98043823]
[-73.55820465 343.77880859]
[-83.66796112 332.57812500]
[-90.53342438 319.14205933]
[-93.68650055 304.38671875]
[-92.91219330 289.31811523]
[-88.26330566 274.96365356]
[-80.05680084 262.30206299]
[-68.85221863 252.19664001]
[-55.41350555 245.33636475]
[-40.65693283 242.18899536]
[-25.58862877 242.96911621]
[-11.23597336 247.62355042]
[-3.08246040 235.03306580]
[5.07105303 222.44258118]
[6.08890152 214.92591858]
[13.78577995 209.53433228]
[22.41555977 197.26538086]
[31.04533958 184.99644470]
[32.03901291 170.13502502]
[46.30707550 163.29887390]
[54.93685532 151.02992249]
[63.56663513 138.76098633]
[72.19641113 126.49205017]
[80.82619476 114.22310638]
[76.12866211 100.30124664]
[80.47337341 86.26528168]
[92.21459961 77.43190002]
[106.90486908 77.14710999]
[115.53464508 64.87817383]
[124.16442871 52.60923004]
[125.19371033 45.65367508]
[129.12474060 41.10707092]
[133.95440674 39.76597977]
[143.49804688 28.19364357]
[153.04168701 16.62130547]
[162.58532715 5.04896832]
[165.74465942 -3.80144668]
[172.72291565 -6.77468777]
[182.70280457 -17.97298622]
[179.26766968 -33.10505676]
[185.41392517 -47.35297012]
[198.77821350 -55.23812103]
[214.22167969 -53.72850037]
[225.80599976 -43.40459061]
[229.07676697 -28.23614693]
[222.77630615 -14.05574417]
[209.32727051 -6.31603670]
[193.90109253 -7.99310064]
[183.92120361 3.20519781]
[174.15765381 14.59260559]
[164.61401367 26.16494370]
[155.07038879 37.73728180]
[145.52674866 49.30961990]
[136.43336487 61.23900986]
[127.80358887 73.50794983]
[119.17380524 85.77689362]
[123.87133789 99.69875336]
[119.52662659 113.73471832]
[107.78540039 122.56809998]
[93.09513092 122.85289001]
[84.46535492 135.12182617]
[75.83557129 147.39076233]
[67.20579529 159.65971375]
[58.57601547 171.92864990]
[56.96508408 187.66763306]
[43.31428146 193.62622070]
[34.68450165 205.89517212]
[26.05471992 218.16410828]
[17.66153336 230.59609985]
[9.50802135 243.18658447]
[1.35450768 255.77705383]
[11.47291279 266.96994019]
[18.34874916 280.40069580]
[21.51321220 295.15359497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 78]
[20 77]
[21 76]
[23 75]
[24 74]
[25 73]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[35 63]
[36 62]
[37 61]
[40 60]
[41 59]
[42 58]
[43 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
