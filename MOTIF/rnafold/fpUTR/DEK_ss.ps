%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCCGCUCUCCUUCCCGAACCGCCAUUUUGAAAAUCUUGUUGAUUCUGGGGAGCCGAGCGCGCGGCGCGAGCGUCACGCCAGACAGCGGCCCGCGCGCCUUCUCCUCGGCGUCGGCCGCCGCCGCCUCCCAGAACCUCCUCGUGCCCUCGCGUGCCAGGCCCGCGGCGGCCGAAAUCCGCGGUUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[96.85842133 314.61059570]
[89.40485382 327.70794678]
[79.13129425 338.73297119]
[66.59178162 347.09103394]
[52.46256256 352.33145142]
[37.50560379 354.17156982]
[22.52751541 352.51217651]
[8.33604527 347.44277954]
[-4.30347586 339.23672485]
[-14.70941544 328.33657837]
[-22.32059479 315.33016968]
[-26.72655106 300.91891479]
[-27.68967819 285.88000488]
[-25.15803528 271.02444458]
[-19.26815224 257.15338135]
[-10.33765888 245.01489258]
[1.15183032 235.26358032]
[14.58070374 228.42529297]
[29.22475815 224.86883545]
[44.29425812 224.78599548]
[47.66589355 210.16984558]
[51.03753281 195.55368042]
[54.40916824 180.93753052]
[57.78080368 166.32136536]
[61.15243912 151.70521545]
[64.52407837 137.08905029]
[59.26388931 131.74298096]
[49.29763794 142.95343018]
[39.33139038 154.16386414]
[30.92834854 166.58918762]
[16.23813057 163.55645752]
[13.44268417 148.81924438]
[26.00281143 140.61767578]
[37.37316132 130.83425903]
[48.74351501 121.05085754]
[43.48332596 115.70478821]
[28.81448746 118.83930206]
[14.14564896 121.97381592]
[-0.52318954 125.10832977]
[-10.41797066 137.73658752]
[-26.46102142 137.73004150]
[-36.34548950 125.09370422]
[-32.48885345 109.52110291]
[-17.84959602 102.95819855]
[-3.65770292 110.43949127]
[11.01113605 107.30497742]
[25.67997360 104.17046356]
[40.34881210 101.03594971]
[46.36838913 87.29678345]
[38.72858810 74.38812256]
[31.08878517 61.47946930]
[23.44898224 48.57081223]
[15.80918026 35.66215515]
[8.16937733 22.75349998]
[0.52957511 9.84484291]
[-7.11022711 -3.06381416]
[-20.89937019 -3.33346033]
[-32.65945435 -10.32904720]
[-39.37034225 -22.12946701]
[-39.37039948 -35.59636688]
[-32.76665878 -47.20856476]
[-40.19643021 -60.23923874]
[-47.62619781 -73.26991272]
[-55.05596924 -86.30059052]
[-62.48573685 -99.33126831]
[-69.91551208 -112.36194611]
[-77.34527588 -125.39261627]
[-84.77504730 -138.42329407]
[-91.75440979 -144.33879089]
[-92.21766663 -151.72567749]
[-99.43546295 -164.87495422]
[-111.58637238 -169.22909546]
[-117.32465363 -180.34144592]
[-114.05546570 -191.99713135]
[-121.05938721 -205.26156616]
[-128.17047119 -218.46885681]
[-135.38825989 -231.61813354]
[-142.60604858 -244.76741028]
[-157.84811401 -248.94529724]
[-165.59896851 -262.71844482]
[-161.26016235 -277.91549683]
[-147.40583801 -285.52032471]
[-132.25550842 -281.02105713]
[-124.79760742 -267.08709717]
[-129.45677185 -251.98519897]
[-122.23898315 -238.83592224]
[-115.02119446 -225.68664551]
[-109.03810120 -221.32965088]
[-107.79495239 -212.26548767]
[-100.79103851 -199.00105286]
[-85.45568085 -190.48158264]
[-86.28617859 -172.09274292]
[-79.06838989 -158.94346619]
[-71.74436951 -145.85307312]
[-64.31460571 -132.82238770]
[-56.88483429 -119.79170990]
[-49.45506287 -106.76103973]
[-42.02529144 -93.73036194]
[-34.59552383 -80.69968414]
[-27.16575241 -67.66900635]
[-19.73598289 -54.63833237]
[-3.37649202 -53.36142349]
[9.12691784 -42.47991562]
[12.72139549 -26.12887955]
[5.79842949 -10.70361710]
[13.43823147 2.20503998]
[21.07803345 15.11369705]
[28.71783638 28.02235413]
[36.35763931 40.93101120]
[43.99744034 53.83966827]
[51.63724518 66.74832153]
[59.27704620 79.65698242]
[88.13092041 60.60393524]
[118.34175873 68.13253784]
[131.51251221 92.50000000]
[146.51251221 92.50000000]
[161.51251221 92.50000000]
[176.51251221 92.50000000]
[191.51251221 92.50000000]
[206.51251221 92.50000000]
[221.51251221 92.50000000]
[236.51251221 92.50000000]
[251.51251221 92.50000000]
[266.51251221 92.50000000]
[281.51251221 92.50000000]
[297.23287964 82.92352295]
[312.08035278 92.26733398]
[327.07839966 92.02443695]
[342.07641602 91.78153992]
[357.07446289 91.53864288]
[368.02969360 80.46524048]
[383.24328613 80.43255615]
[393.73257446 90.94495392]
[408.73062134 90.70205688]
[396.90454102 81.47472382]
[391.83544922 67.35720825]
[395.09069824 52.71469116]
[405.66378784 42.07468033]
[420.28546143 38.72709656]
[434.43469238 43.70701981]
[443.73645020 55.47464752]
[445.31466675 70.39139557]
[438.68127441 83.84495544]
[425.88723755 91.67551422]
[440.76153564 93.61333466]
[455.63586426 95.55115509]
[470.51016235 97.48897552]
[485.43652344 90.69666290]
[498.62295532 100.44602203]
[496.50439453 116.70774841]
[481.26019287 122.75317383]
[468.57232666 112.36328125]
[453.69802856 110.42545319]
[438.82373047 108.48763275]
[423.94943237 106.54981232]
[408.97351074 105.70009613]
[393.97549438 105.94299316]
[383.83209229 116.78953552]
[368.62542725 117.24951935]
[357.31735229 106.53667450]
[342.31930542 106.77957153]
[327.32128906 107.02246857]
[312.32324219 107.26536560]
[303.67874146 115.73974609]
[291.17626953 116.05657196]
[281.51251221 107.50000000]
[266.51251221 107.50000000]
[251.51251221 107.50000000]
[236.51251221 107.50000000]
[221.51251221 107.50000000]
[206.51251221 107.50000000]
[191.51251221 107.50000000]
[176.51251221 107.50000000]
[161.51251221 107.50000000]
[146.51251221 107.50000000]
[131.51251221 107.50000000]
[129.73385620 117.65590668]
[124.59552765 127.33157349]
[116.26001740 135.40147400]
[105.26734161 140.80661011]
[92.50558472 142.68028259]
[79.14023590 140.46069336]
[75.76860046 155.07684326]
[72.39695740 169.69300842]
[69.02532196 184.30915833]
[65.65368652 198.92532349]
[62.28205490 213.54147339]
[58.91041565 228.15763855]
[72.42088318 234.83326721]
[84.02729034 244.44514465]
[93.10370636 256.47491455]
[99.16065216 270.27383423]
[101.87149811 285.09771729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[20 188]
[21 187]
[22 186]
[23 185]
[24 184]
[25 183]
[26 182]
[36 48]
[37 47]
[38 46]
[39 45]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
[55 106]
[56 105]
[61 101]
[62 100]
[63 99]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[70 93]
[71 92]
[74 90]
[75 89]
[76 87]
[77 86]
[78 85]
[115 176]
[116 175]
[117 174]
[118 173]
[119 172]
[120 171]
[121 170]
[122 169]
[123 168]
[124 167]
[125 166]
[127 163]
[128 162]
[129 161]
[130 160]
[133 157]
[134 156]
[144 155]
[145 154]
[146 153]
[147 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
