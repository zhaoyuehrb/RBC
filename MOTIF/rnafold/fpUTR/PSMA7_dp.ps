%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:21 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (PSMA7)
} def

/sequence { (\
GUCGCCGCCUGACGCCGCCCGUCGCCGGCAGCGCAGGACACGGCGCCGAGGGUGGGGCGCGGGCGUAGUGGCGCCGGGAGUCGCGGGUGCGCGCGGGCCGUGAGUGUGCGCUUUUGAGAGUCGCGGCGGAAGGAGCCCGGCCGCCGCCCGCCGGC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 44 0.529264780 ubox
1 46 0.028251221 ubox
1 155 0.004242150 ubox
2 43 0.529406181 ubox
2 45 0.007372389 ubox
3 42 0.529738942 ubox
3 45 0.299913766 ubox
4 41 0.526526857 ubox
4 44 0.847238675 ubox
5 43 0.848026388 ubox
6 42 0.847972828 ubox
7 41 0.844742791 ubox
8 37 0.998996082 ubox
9 36 0.999743846 ubox
9 37 0.021355313 ubox
10 35 0.999517593 ubox
10 36 0.020615191 ubox
11 34 0.999517980 ubox
13 33 0.999166499 ubox
14 29 0.027596390 ubox
14 32 0.999566610 ubox
15 28 0.027965580 ubox
15 31 0.999170555 ubox
16 27 0.028350384 ubox
16 33 0.005648997 ubox
17 25 0.015676079 ubox
17 26 0.023713829 ubox
17 29 0.995076307 ubox
17 32 0.005778273 ubox
18 24 0.021940450 ubox
18 28 0.935930560 ubox
18 31 0.005764376 ubox
19 27 0.870953638 ubox
19 28 0.350892085 ubox
20 27 0.488965890 ubox
21 26 0.577904711 ubox
23 27 0.003422631 ubox
45 151 0.003447819 ubox
45 155 0.946910265 ubox
46 150 0.003491050 ubox
46 154 0.999067706 ubox
47 153 0.999848146 ubox
48 152 0.994608261 ubox
50 149 0.999653607 ubox
51 148 0.999857952 ubox
51 149 0.016326463 ubox
52 147 0.999924150 ubox
52 148 0.011603937 ubox
53 146 0.999598393 ubox
54 145 0.999949156 ubox
55 144 0.999093300 ubox
56 142 0.999068959 ubox
57 141 0.999954372 ubox
57 144 0.003285499 ubox
58 140 0.999205214 ubox
58 143 0.003421984 ubox
60 139 0.996170759 ubox
61 138 0.999971538 ubox
62 137 0.999992847 ubox
63 136 0.999992073 ubox
64 135 0.999657065 ubox
65 72 0.010078125 ubox
66 71 0.010183872 ubox
69 128 0.003967057 ubox
72 128 0.998229635 ubox
73 127 0.999971449 ubox
74 126 0.999991298 ubox
75 125 0.999974399 ubox
76 124 0.999751448 ubox
77 122 0.010300963 ubox
78 121 0.007893034 ubox
78 122 0.999621677 ubox
79 121 0.996890210 ubox
81 117 0.092529961 ubox
81 119 0.992307070 ubox
82 116 0.100581979 ubox
82 118 0.990549192 ubox
83 90 0.010272042 ubox
83 92 0.003393390 ubox
83 111 0.005033699 ubox
83 115 0.119489912 ubox
84 89 0.010268005 ubox
84 91 0.003409383 ubox
84 110 0.005035522 ubox
84 116 0.856606480 ubox
85 90 0.003829755 ubox
85 109 0.004989248 ubox
85 112 0.015531708 ubox
85 113 0.554705230 ubox
85 114 0.070323480 ubox
85 115 0.735569328 ubox
86 111 0.012620538 ubox
86 112 0.812082991 ubox
86 113 0.066998895 ubox
86 114 0.536155881 ubox
86 115 0.016540415 ubox
87 107 0.004526507 ubox
87 109 0.003207642 ubox
87 111 0.856405120 ubox
87 112 0.028435351 ubox
87 113 0.453541909 ubox
87 114 0.014935355 ubox
88 106 0.003942004 ubox
88 108 0.003220572 ubox
88 110 0.856760626 ubox
89 105 0.004944552 ubox
89 107 0.003336290 ubox
89 109 0.857250640 ubox
89 111 0.507354089 ubox
90 104 0.004968541 ubox
90 106 0.003426306 ubox
90 108 0.857250709 ubox
90 110 0.507509288 ubox
91 105 0.004147467 ubox
91 107 0.856927021 ubox
91 109 0.507471968 ubox
91 111 0.086136879 ubox
92 102 0.012118725 ubox
92 104 0.004236653 ubox
92 106 0.857169390 ubox
92 108 0.507447596 ubox
92 110 0.086290307 ubox
93 101 0.029184607 ubox
93 105 0.856299324 ubox
93 107 0.506971720 ubox
93 109 0.086527767 ubox
94 100 0.031255532 ubox
94 102 0.021679642 ubox
94 104 0.856254043 ubox
94 106 0.506939328 ubox
94 108 0.086572627 ubox
94 110 0.003164766 ubox
95 99 0.033583787 ubox
95 101 0.045349717 ubox
95 105 0.458653643 ubox
95 107 0.086826403 ubox
95 109 0.003164587 ubox
97 105 0.152702685 ubox
97 107 0.003737446 ubox
98 104 0.165039079 ubox
98 106 0.003781935 ubox
100 105 0.003608577 ubox
4 44 0.9500000 lbox
5 43 0.9500000 lbox
6 42 0.9500000 lbox
7 41 0.9500000 lbox
8 37 0.9500000 lbox
9 36 0.9500000 lbox
10 35 0.9500000 lbox
11 34 0.9500000 lbox
13 33 0.9500000 lbox
14 32 0.9500000 lbox
15 31 0.9500000 lbox
17 29 0.9500000 lbox
18 28 0.9500000 lbox
19 27 0.9500000 lbox
45 155 0.9500000 lbox
46 154 0.9500000 lbox
47 153 0.9500000 lbox
48 152 0.9500000 lbox
50 149 0.9500000 lbox
51 148 0.9500000 lbox
52 147 0.9500000 lbox
53 146 0.9500000 lbox
54 145 0.9500000 lbox
55 144 0.9500000 lbox
56 142 0.9500000 lbox
57 141 0.9500000 lbox
58 140 0.9500000 lbox
60 139 0.9500000 lbox
61 138 0.9500000 lbox
62 137 0.9500000 lbox
63 136 0.9500000 lbox
64 135 0.9500000 lbox
72 128 0.9500000 lbox
73 127 0.9500000 lbox
74 126 0.9500000 lbox
75 125 0.9500000 lbox
76 124 0.9500000 lbox
78 122 0.9500000 lbox
79 121 0.9500000 lbox
81 119 0.9500000 lbox
82 118 0.9500000 lbox
84 116 0.9500000 lbox
85 115 0.9500000 lbox
86 112 0.9500000 lbox
87 111 0.9500000 lbox
88 110 0.9500000 lbox
89 109 0.9500000 lbox
90 108 0.9500000 lbox
91 107 0.9500000 lbox
92 106 0.9500000 lbox
93 105 0.9500000 lbox
94 104 0.9500000 lbox
showpage
end
%%EOF
