%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGCCUUCGGUGCGCAGCGGGGGAACAGGGCUAGUGCAGCCGCCGGAGGGGGGCACGGGCUCCUCUCCCAUCCCAGAGCUACUGGGCUGCCCUUGCUGUCCUCGCCGCCCCAGCAGACCCCGGCCGGACCUGCCACCUGCGCCCUGGUUGCGCC\
) } def
/len { sequence length } bind def

/coor [
[56.01565170 365.71118164]
[54.01044846 368.26547241]
[51.55488586 369.73019409]
[47.35542297 384.13034058]
[43.15596390 398.53048706]
[44.52612305 415.42898560]
[28.66732979 421.42355347]
[18.51686668 407.84399414]
[28.75580597 394.33102417]
[32.95526886 379.93087769]
[37.15472794 365.53073120]
[40.76716614 350.97219849]
[43.78664398 336.27926636]
[46.80612183 321.58630371]
[49.82559967 306.89337158]
[52.84507751 292.20040894]
[55.86455536 277.50744629]
[58.88403320 262.81451416]
[53.86709595 248.79025269]
[64.22396851 236.83007812]
[67.24344635 222.13713074]
[70.26292419 207.44418335]
[73.28240204 192.75123596]
[64.89710236 180.49472046]
[67.74997711 165.55096436]
[80.66259766 156.83879089]
[83.68207550 142.14584351]
[86.70155334 127.45288849]
[89.72103119 112.75994110]
[86.85060883 98.03714752]
[78.53285980 85.55455780]
[64.44166565 78.36089325]
[63.82295227 63.47914124]
[55.50520706 50.99655151]
[41.41401291 43.80288696]
[40.79529953 28.92113495]
[32.47755432 16.43854523]
[24.15980530 3.95595407]
[15.84205723 -8.52663708]
[7.52431011 -21.00922775]
[-0.79343766 -33.49181747]
[-8.04655170 -27.12131310]
[-19.01014900 -24.17186928]
[-32.01718903 -26.29845238]
[-44.76251221 -34.37092972]
[-56.04428482 -44.25635529]
[-67.32605743 -54.14177704]
[-78.60783386 -64.02720642]
[-89.88960266 -73.91262817]
[-101.17137146 -83.79804993]
[-112.45314789 -93.68347931]
[-123.73491669 -103.56890106]
[-135.01669312 -113.45432281]
[-146.29846191 -123.33975220]
[-162.48043823 -125.99980164]
[-168.01379395 -141.43722534]
[-157.20628357 -153.77131653]
[-141.17576599 -150.31382751]
[-136.41304016 -134.62152100]
[-125.13126373 -124.73609924]
[-113.84949493 -114.85066986]
[-102.56772614 -104.96524811]
[-91.28594971 -95.07982635]
[-80.00418091 -85.19439697]
[-68.72240448 -75.30897522]
[-57.44063187 -65.42355347]
[-46.15886307 -55.53812790]
[-34.87709045 -45.65270233]
[-27.95528603 -48.54037476]
[-37.72573090 -59.92186737]
[-29.92036057 -72.73109436]
[-15.32611752 -69.26583099]
[-14.11168098 -54.31571579]
[-7.18987799 -57.20338821]
[-6.27836466 -72.17566681]
[-5.36685133 -87.14794922]
[-14.88125324 -100.06520844]
[-10.57528782 -115.51959991]
[4.24787712 -121.65583801]
[18.21717834 -113.76671600]
[20.61656189 -97.90409851]
[9.60542774 -86.23643494]
[8.69391441 -71.26415253]
[7.78240108 -56.29187393]
[11.68915367 -41.80956650]
[20.00690079 -29.32697487]
[28.32464790 -16.84438515]
[36.64239502 -4.36179352]
[44.96014404 8.12079716]
[53.27789307 20.60338783]
[66.77414703 26.90421677]
[67.98780060 42.67880249]
[76.30554199 55.16139603]
[89.80179596 61.46222305]
[91.01544952 77.23680878]
[99.33319855 89.71939850]
[107.24288940 84.41512299]
[119.36396790 85.70446777]
[134.27085876 84.03578949]
[149.17774963 82.36711121]
[164.08465576 80.69843292]
[172.76051331 71.10237885]
[185.25105286 70.04825592]
[194.78089905 77.55826569]
[209.71855164 76.19205475]
[224.65620422 74.82583618]
[239.59385681 73.45961761]
[244.45515442 59.02744293]
[254.77102661 47.82465363]
[268.75421143 41.79220200]
[283.98202515 41.97525406]
[297.81616211 48.34208679]
[307.85977173 59.78960800]
[312.37274170 74.33447266]
[310.57318115 89.45668793]
[302.77282715 102.53623962]
[290.32321167 111.30702209]
[275.38125610 114.24943542]
[260.53573608 110.85369873]
[248.35877991 101.70812988]
[240.96008301 88.39727020]
[226.02243042 89.76348877]
[211.08477783 91.12970734]
[196.14712524 92.49591827]
[182.41471863 103.38210297]
[165.75332642 95.60533142]
[150.84643555 97.27400208]
[135.93952942 98.94268036]
[121.03263855 100.61135864]
[135.74301147 103.54478455]
[144.68882751 115.58523560]
[143.25134277 130.51620483]
[132.17272949 140.62878418]
[117.17290497 140.70184326]
[105.99631500 130.69764709]
[104.41397858 115.77941895]
[101.39450073 130.47236633]
[98.37502289 145.16531372]
[95.35554504 159.85826111]
[103.78600311 172.95655823]
[100.51451874 187.81428528]
[87.97534943 195.77072144]
[84.95587158 210.46366882]
[81.93639374 225.15661621]
[78.91691589 239.84956360]
[83.71788025 254.92475891]
[73.57698059 265.83398438]
[70.55750275 280.52694702]
[67.53802490 295.21987915]
[64.51854706 309.91284180]
[61.49907303 324.60577393]
[58.47959518 339.29873657]
[55.46011734 353.99166870]
[57.03287506 358.18286133]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[12 153]
[13 152]
[14 151]
[15 150]
[16 149]
[17 148]
[18 147]
[20 145]
[21 144]
[22 143]
[23 142]
[26 139]
[27 138]
[28 137]
[29 136]
[30 96]
[31 95]
[33 93]
[34 92]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[45 68]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[74 84]
[75 83]
[76 82]
[98 129]
[99 128]
[100 127]
[101 126]
[104 124]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
