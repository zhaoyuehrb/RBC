%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGGAGGAGGGGGAGGAGAAGGGGCGGAGCAGUCGGUGGGCGCGGCGGCUGCUGGAGGCUAGCGCGACCCGACUCUUAAGUUUUCUUUUCCUCUCCAGAGGGGCCGAUUAGGGAGAGAGACCAGAAAUGAGUGGAAUGCUAUCUUAAGCCAAAAAAAACUAUUAUAAUUUUUAUUUAGUACUACUUAA\
) } def
/len { sequence length } bind def

/coor [
[446.47702026 195.58953857]
[432.21115112 190.95428467]
[417.94531250 186.31903076]
[403.67947388 181.68377686]
[389.41363525 177.04852295]
[372.47924805 181.62303162]
[360.26065063 167.85780334]
[345.92013550 163.45904541]
[328.19329834 175.14205933]
[307.33328247 169.87939453]
[297.00158691 150.68682861]
[282.34680176 147.48733521]
[267.69198608 144.28784180]
[253.03718567 141.08834839]
[238.38238525 137.88885498]
[223.72758484 134.68936157]
[209.07278442 131.48986816]
[194.41798401 128.29037476]
[179.76316833 125.09087372]
[165.10836792 121.89138031]
[150.45356750 118.69188690]
[135.79876709 115.49239349]
[121.14396667 112.29290009]
[106.48916626 109.09340668]
[91.80841064 106.01517487]
[77.10271454 103.05841827]
[59.80524826 109.34916687]
[47.08914566 97.26614380]
[32.33657074 94.55294037]
[17.58399391 91.83972931]
[8.55939293 93.36647034]
[2.61080527 88.95777893]
[-12.09489441 86.00102234]
[-26.80059433 83.04426575]
[-41.50629425 80.08750916]
[-56.21199417 77.13075256]
[-70.91769409 74.17399597]
[-79.36200714 82.57281494]
[-90.69849396 85.81121063]
[-102.07118225 83.19393158]
[-110.67290497 75.48597717]
[-114.43813324 64.69393158]
[-129.03802490 61.25257492]
[-143.63792419 57.81121445]
[-158.23782349 54.36985779]
[-171.57347107 62.41960907]
[-186.33081055 58.72159958]
[-193.92283630 45.95849991]
[-208.52273560 42.51714325]
[-223.12263489 39.07578278]
[-237.72253418 35.63442612]
[-251.03013611 44.15988541]
[-266.45034790 40.69684219]
[-274.83462524 27.29985619]
[-271.20874023 11.91712189]
[-257.72387695 3.67494202]
[-242.38032532 7.46325684]
[-234.28117371 21.03452682]
[-219.68127441 24.47588539]
[-205.08137512 27.91724396]
[-190.48147583 31.35860252]
[-177.98855591 23.32974815]
[-163.13316345 26.61179352]
[-154.79646301 39.76995850]
[-140.19656372 43.21131516]
[-125.59667206 46.65267563]
[-110.99677277 50.09403229]
[-96.05335999 39.54250336]
[-77.82682037 43.31130600]
[-67.96093750 59.46829987]
[-53.25523758 62.42505264]
[-38.54953766 65.38181305]
[-23.84383774 68.33856201]
[-9.13813877 71.29531860]
[5.56756067 74.25207520]
[20.29720116 77.08715820]
[35.04977798 79.80036163]
[49.80235291 82.51357269]
[59.94776535 75.90525055]
[72.27008057 78.05749512]
[80.05946350 88.35272217]
[94.76516724 91.30947113]
[102.67589569 89.68300629]
[109.68865967 94.43859863]
[124.34346008 97.63809967]
[138.99826050 100.83759308]
[153.65306091 104.03708649]
[168.30786133 107.23657990]
[182.96267700 110.43607330]
[197.61747742 113.63556671]
[212.27227783 116.83506012]
[226.92707825 120.03455353]
[241.58187866 123.23405457]
[256.23669434 126.43354797]
[270.89147949 129.63304138]
[285.54629517 132.83253479]
[300.20108032 136.03202820]
[305.80133057 129.02883911]
[313.34091187 124.25556946]
[321.98190308 122.20914459]
[330.77490234 123.08529663]
[338.76312256 126.76021576]
[345.08679199 132.80714417]
[349.07540894 140.54571533]
[350.31887817 149.11851501]
[364.65942383 153.51725769]
[376.40997314 148.17022705]
[388.27145386 152.14215088]
[394.04888916 162.78268433]
[408.31472778 167.41793823]
[422.58056641 172.05319214]
[436.84640503 176.68844604]
[451.11227417 181.32369995]
[441.46322632 169.83911133]
[436.46185303 155.69744873]
[436.74530029 140.70013428]
[442.27743530 126.75754547]
[452.35354614 115.64575195]
[465.69012451 108.78019714]
[480.58828735 107.03543854]
[495.15029907 110.63372803]
[507.52120972 119.11669922]
[516.12512207 131.40377808]
[519.86614990 145.92979431]
[518.26763916 160.84437561]
[511.53326416 174.24766541]
[500.52084351 184.43231201]
[486.63320923 190.10095215]
[471.64175415 190.53187561]
[484.59057617 198.10336304]
[497.53942871 205.67485046]
[510.48828125 213.24632263]
[523.43713379 220.81781006]
[536.38598633 228.38929749]
[549.33483887 235.96078491]
[555.96203613 236.38070679]
[560.66625977 239.60954285]
[562.58068848 244.00274658]
[575.27215576 251.99821472]
[587.96356201 259.99368286]
[600.65496826 267.98916626]
[613.34643555 275.98464966]
[623.44805908 264.84338379]
[635.33105469 255.62567139]
[648.63421631 248.61161804]
[662.95330811 244.01437378]
[677.85321045 241.97364807]
[692.88110352 242.55145264]
[707.58026123 245.73022461]
[721.50408936 251.41337585]
[734.22943115 259.42819214]
[745.36956787 269.53109741]
[754.58587646 281.41513062]
[761.59844971 294.71908569]
[766.19409180 309.03869629]
[768.23309326 323.93881226]
[767.65362549 338.96661377]
[764.47314453 353.66546631]
[758.78845215 367.58865356]
[750.77215576 380.31304932]
[740.66796875 391.45202637]
[728.78295898 400.66705322]
[715.47821045 407.67807007]
[701.15802002 412.27209473]
[686.25769043 414.30941772]
[671.22991943 413.72821045]
[656.53149414 410.54611206]
[642.60894775 404.85980225]
[629.88543701 396.84210205]
[618.74761963 386.73666382]
[609.53393555 374.85055542]
[602.52441406 361.54501343]
[597.93200684 347.22433472]
[595.89636230 332.32376099]
[596.47930908 317.29608154]
[599.66308594 302.59796143]
[605.35095215 288.67608643]
[592.65954590 280.68060303]
[579.96807861 272.68511963]
[567.27667236 264.68963623]
[554.58520508 256.69418335]
[541.76336670 248.90962219]
[528.81451416 241.33815002]
[515.86566162 233.76666260]
[502.91680908 226.19517517]
[489.96795654 218.62368774]
[477.01910400 211.05221558]
[464.07025146 203.48072815]
[457.82995605 204.58978271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 113]
[2 112]
[3 111]
[4 110]
[5 109]
[7 106]
[8 105]
[11 97]
[12 96]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[25 82]
[26 81]
[28 78]
[29 77]
[30 76]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[37 70]
[42 67]
[43 66]
[44 65]
[45 64]
[48 61]
[49 60]
[50 59]
[51 58]
[129 188]
[130 187]
[131 186]
[132 185]
[133 184]
[134 183]
[135 182]
[138 181]
[139 180]
[140 179]
[141 178]
[142 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
