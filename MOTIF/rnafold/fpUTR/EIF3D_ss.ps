%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGAGCAGUUUACGACAGCGCCGGUCGUGUUUACGGCGGCGCCCGCUGCGCGCGCAUGUUUCCUCUUUUCCUGGUUUCUCAAGAGUGCUGCUGCUAACGCGGUCCCCGGCACGCACCAUCUGUUGCCAUCCCGGCCGGCCGAGGCCAUUGCAGAUUUUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[414.82101440 558.08496094]
[406.51699829 545.59320068]
[398.21295166 533.10150146]
[389.90893555 520.60974121]
[375.30221558 517.93035889]
[366.70278931 505.38024902]
[369.61227417 490.07754517]
[361.30825806 477.58581543]
[353.00421143 465.09408569]
[344.70019531 452.60235596]
[331.04922485 456.78082275]
[316.75799561 456.93667603]
[302.98849487 453.04824829]
[290.86279297 445.42306519]
[281.37173462 434.67358398]
[275.29376221 421.66787720]
[273.13125610 407.45971680]
[275.06900024 393.20309448]
[280.95834351 380.05847168]
[290.32855225 369.09838867]
[282.26242065 356.45175171]
[273.95837402 343.96005249]
[265.41946411 331.62768555]
[256.88052368 319.29534912]
[248.34158325 306.96301270]
[239.80264282 294.63067627]
[230.91711426 282.54568481]
[221.69213867 270.71774292]
[212.46716309 258.88983154]
[203.24218750 247.06190491]
[194.01721191 235.23397827]
[184.79223633 223.40605164]
[175.56726074 211.57812500]
[160.79972839 210.01106262]
[151.27578735 198.14727783]
[153.01960754 182.66836548]
[143.79463196 170.84043884]
[134.56965637 159.01251221]
[125.34467316 147.18458557]
[116.11969757 135.35665894]
[106.89472198 123.52873993]
[97.66973877 111.70081329]
[85.41875458 103.04556274]
[71.18840027 98.30245209]
[55.64972305 101.27902985]
[46.02208328 89.91426849]
[31.79173279 85.17115784]
[17.56138229 80.42803955]
[0.62305766 81.15568542]
[-4.76514769 65.08074951]
[9.18997097 55.45313263]
[22.30449867 66.19769287]
[36.53484726 70.94080353]
[50.76519775 75.68392181]
[65.28602600 72.36808014]
[75.93151855 84.07209778]
[90.16186523 88.81521606]
[95.61356354 83.66458130]
[85.31229401 72.76119232]
[72.14588165 65.57470703]
[74.91202545 50.83195877]
[89.78799438 48.90698242]
[96.21568298 62.45992661]
[106.51695251 73.36331177]
[111.96864319 68.21267700]
[108.04067230 53.73610687]
[104.11270905 39.25953674]
[100.18473816 24.78296661]
[96.25677490 10.30639744]
[81.20149994 8.01323605]
[68.38404083 -0.21066877]
[60.02509689 -12.94047451]
[57.57290649 -27.97066689]
[61.45233154 -42.69717026]
[70.99122620 -54.56853485]
[84.53693390 -61.52797318]
[99.74256897 -62.36971664]
[113.97367096 -56.94792938]
[124.76460266 -46.20197296]
[130.24578857 -31.99364662]
[129.46755981 -16.78462791]
[122.56475830 -3.20997119]
[110.73334503 6.37843037]
[114.66130829 20.85499954]
[118.58927917 35.33156967]
[122.51724243 49.80813980]
[126.44521332 64.28470612]
[125.58177185 90.97329712]
[109.49766541 102.47583771]
[118.72264099 114.30375671]
[127.94762421 126.13168335]
[137.17259216 137.95960999]
[146.39756775 149.78753662]
[155.62254333 161.61546326]
[164.84753418 173.44338989]
[180.28504944 175.52203369]
[189.47198486 187.64865112]
[187.39517212 202.35314941]
[196.62014771 214.18107605]
[205.84513855 226.00900269]
[215.07011414 237.83692932]
[224.29508972 249.66485596]
[233.52006531 261.49276733]
[242.74504089 273.32070923]
[247.66748047 275.30737305]
[250.97831726 278.66430664]
[252.42462158 282.53588867]
[252.13499451 286.09173584]
[260.67391968 298.42407227]
[269.21286011 310.75643921]
[277.75180054 323.08877563]
[286.29071045 335.42111206]
[292.15759277 338.62112427]
[295.05960083 343.57192993]
[294.90902710 348.38562012]
[302.97518921 361.03225708]
[318.24929810 356.99786377]
[334.00357056 357.87286377]
[348.70077515 363.55990601]
[360.91058350 373.49264526]
[369.44869995 386.69226074]
[373.49169922 401.86370850]
[372.65655518 417.52294922]
[367.03671265 432.14208984]
[357.19192505 444.29833984]
[365.49594116 456.79006958]
[373.79995728 469.28179932]
[382.10400391 481.77349854]
[397.34008789 485.01373291]
[405.58361816 497.80041504]
[402.40066528 512.30572510]
[410.70468140 524.79748535]
[419.00869751 537.28918457]
[427.31274414 549.78088379]
[437.61401367 560.68426514]
[449.61437988 569.68377686]
[461.61477661 578.68328857]
[473.61514282 587.68273926]
[489.22308350 585.19921875]
[501.96646118 594.54705811]
[504.28485107 610.18035889]
[494.80282593 622.82415771]
[479.14587402 624.97717285]
[466.60299683 615.36199951]
[464.61566162 599.68316650]
[452.61526489 590.68365479]
[440.61489868 581.68414307]
[428.61450195 572.68469238]
[434.38854980 586.52880859]
[435.68115234 601.47302246]
[432.37002563 616.10302734]
[424.76849365 629.03424072]
[413.59597778 639.04296875]
[399.90975952 645.18200684]
[385.00506592 646.87036133]
[370.29244995 643.94824219]
[357.16424561 636.69219971]
[346.86282349 625.78894043]
[340.36312866 612.27026367]
[338.28024292 597.41558838]
[340.81127930 582.63067627]
[347.71670532 569.31469727]
[358.34301758 558.72790527]
[371.68460083 551.87207031]
[386.47885132 549.39611816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 134]
[2 133]
[3 132]
[4 131]
[7 128]
[8 127]
[9 126]
[10 125]
[20 116]
[21 115]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[32 99]
[33 98]
[36 95]
[37 94]
[38 93]
[39 92]
[40 91]
[41 90]
[42 89]
[43 57]
[44 56]
[46 54]
[47 53]
[48 52]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
[135 148]
[136 147]
[137 146]
[138 145]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
