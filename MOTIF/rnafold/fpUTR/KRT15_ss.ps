%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:54:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAAGGUGUGCAGGCAGCUGUGUUUGUCAGGAAGGCAGAAGGAGUUGGCUUUGCUUUAGGGGAGGAGACGAGGUCCCACAACACCCUCUGAAGGGUAUAUAAGGAGCCCCAGCGUGCAGCCUGGCCUGGUACCUCCUGCCAGCAUCUCUUGGGUUUGCUGAGAACUCACGGGCUCCAGCUACCUGGCC\
) } def
/len { sequence length } bind def

/coor [
[80.04543304 587.59655762]
[65.31404877 583.44384766]
[54.20788574 572.91241455]
[49.27906418 558.42224121]
[51.66018295 543.30303955]
[60.80408478 531.02917480]
[74.60956573 524.42108154]
[75.10034943 509.42910767]
[75.59114075 494.43713379]
[76.08192444 479.44519043]
[76.57270813 464.45321655]
[73.64461517 457.65411377]
[77.19616699 449.22052002]
[77.93218231 434.23858643]
[70.82870483 421.14700317]
[79.23382568 407.74310303]
[79.96984100 392.76116943]
[77.15338135 385.91510010]
[80.84244537 377.54074097]
[81.82349396 362.57284546]
[82.80454254 347.60494995]
[83.78559113 332.63708496]
[84.64414978 317.66168213]
[85.38016510 302.67974854]
[86.11618042 287.69781494]
[77.26536560 272.55218506]
[87.35127258 257.15469360]
[87.84205627 242.16273499]
[80.52532196 229.18911743]
[88.71000671 215.64950562]
[89.20079803 200.65753174]
[89.69158173 185.66555786]
[90.18236542 170.67359924]
[82.86563873 157.69998169]
[91.05032349 144.16035461]
[91.54110718 129.16838074]
[92.03189087 114.17641449]
[83.74263000 99.60090637]
[92.73709869 85.44968414]
[92.98252106 70.45169067]
[93.22795105 55.45370102]
[85.71747589 41.52878189]
[93.66197968 28.92980957]
[93.90740967 13.93181705]
[94.15283203 -1.06617510]
[86.64236450 -14.99109554]
[94.58686829 -27.59006882]
[94.83229828 -42.58806229]
[95.07772064 -57.58605194]
[95.32315063 -72.58404541]
[95.56857300 -87.58203888]
[95.81400299 -102.58003235]
[86.64135742 -90.71147156]
[72.80485535 -84.91912842]
[57.91255951 -86.71342468]
[45.84783936 -95.62648010]
[39.75674057 -109.33408356]
[41.22760010 -124.26179504]
[49.87687302 -136.51699829]
[63.44913864 -142.90399170]
[78.40524292 -141.75726318]
[90.84516907 -133.37583923]
[97.52455902 -119.94762421]
[100.20980835 -134.70532227]
[102.89506531 -149.46301270]
[105.58031464 -164.22070312]
[108.26557159 -178.97839355]
[110.95082092 -193.73608398]
[104.26203918 -204.77667236]
[106.81312561 -217.02139282]
[116.70005798 -224.00846863]
[119.62641907 -238.72024536]
[114.73006439 -253.76472473]
[124.80166626 -264.73797607]
[127.72801971 -279.44976807]
[130.65437317 -294.16152954]
[133.58073425 -308.87332153]
[136.50708008 -323.58508301]
[123.92647552 -332.07061768]
[115.57559204 -344.69226074]
[112.70098877 -359.50949097]
[115.71015930 -374.25845337]
[124.11402130 -386.69790649]
[136.60617065 -394.94967651]
[151.26582336 -397.78231812]
[154.19218445 -412.49407959]
[157.11853027 -427.20587158]
[150.55210876 -435.90252686]
[149.87893677 -446.55877686]
[155.08039856 -455.63113403]
[164.22428894 -460.23596191]
[167.63043213 -474.84411621]
[171.03657532 -489.45227051]
[169.47976685 -495.90460205]
[171.17211914 -501.35104370]
[174.80055237 -504.47888184]
[178.68283081 -518.96777344]
[182.56510925 -533.45666504]
[186.44740295 -547.94555664]
[175.99417114 -559.29162598]
[173.35700989 -574.49194336]
[179.37744141 -588.69610596]
[192.13435364 -597.37158203]
[207.55708313 -597.75018311]
[220.72425842 -589.71093750]
[227.43431091 -575.81927490]
[225.54608154 -560.50793457]
[215.66209412 -548.66265869]
[200.93629456 -544.06329346]
[197.05400085 -529.57440186]
[193.17172241 -515.08551025]
[189.28942871 -500.59661865]
[185.64472961 -486.04614258]
[182.23858643 -471.43798828]
[178.83244324 -456.82983398]
[185.79656982 -438.80130005]
[171.83032227 -424.27951050]
[168.90396118 -409.56771851]
[165.97760010 -394.85595703]
[178.43736267 -386.62893677]
[186.82078552 -374.22476196]
[189.82456970 -359.51617432]
[186.96049500 -344.73834229]
[178.63439941 -332.14907837]
[166.08909607 -323.68395996]
[151.21885681 -320.65875244]
[148.29251099 -305.94696045]
[145.36614990 -291.23516846]
[142.43980408 -276.52340698]
[139.51344299 -261.81161499]
[144.61911011 -247.81942749]
[134.33819580 -235.79389954]
[131.41183472 -221.08210754]
[137.94453430 -204.80174255]
[125.70851135 -191.05082703]
[123.02326202 -176.29313660]
[120.33800507 -161.53544617]
[117.65275574 -146.77775574]
[114.96749878 -132.02006531]
[112.28224945 -117.26237488]
[110.81198883 -102.33460236]
[110.56656647 -87.33660889]
[110.32113647 -72.33861542]
[110.07571411 -57.34062576]
[109.83028412 -42.34263611]
[109.58486176 -27.34464264]
[117.11288452 -14.49247837]
[109.15082550 -0.82074916]
[108.90540314 14.17724323]
[108.65997314 29.17523575]
[116.18799591 42.02739716]
[108.22593689 55.69912720]
[107.98051453 70.69712067]
[107.73508453 85.69511414]
[115.32043457 94.54603577]
[115.03437042 106.19912720]
[107.02386475 114.66719818]
[106.53307343 129.65916443]
[106.04228973 144.65113831]
[113.32392120 158.69708252]
[105.17433929 171.16438293]
[104.68354797 186.15634155]
[104.19276428 201.14831543]
[103.70198059 216.14028931]
[110.98360443 230.18621826]
[102.83402252 242.65351868]
[102.34323883 257.64550781]
[110.57961273 267.58514404]
[109.85281372 280.07165527]
[101.09810638 288.43380737]
[100.36209869 303.41574097]
[99.62608337 318.39767456]
[102.33390045 327.13879395]
[98.75347137 333.61813354]
[97.77242279 348.58599854]
[96.79138184 363.55389404]
[95.81033325 378.52178955]
[94.95177460 393.49719238]
[94.21575928 408.47912598]
[101.26659393 422.64233398]
[92.91411591 434.97460938]
[92.17810059 449.95654297]
[91.56468201 464.94400024]
[91.07389069 479.93597412]
[90.58310699 494.92791748]
[90.09232330 509.91989136]
[89.60153198 524.91186523]
[102.94526672 532.40875244]
[111.26683807 545.25439453]
[112.65402222 560.49688721]
[106.78804779 574.63366699]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 187]
[8 186]
[9 185]
[10 184]
[11 183]
[13 182]
[14 181]
[16 179]
[17 178]
[19 177]
[20 176]
[21 175]
[22 174]
[23 172]
[24 171]
[25 170]
[27 167]
[28 166]
[30 164]
[31 163]
[32 162]
[33 161]
[35 159]
[36 158]
[37 157]
[39 154]
[40 153]
[41 152]
[43 150]
[44 149]
[45 148]
[47 146]
[48 145]
[49 144]
[50 143]
[51 142]
[52 141]
[63 140]
[64 139]
[65 138]
[66 137]
[67 136]
[68 135]
[71 133]
[72 132]
[74 130]
[75 129]
[76 128]
[77 127]
[78 126]
[85 119]
[86 118]
[87 117]
[91 115]
[92 114]
[93 113]
[96 112]
[97 111]
[98 110]
[99 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
