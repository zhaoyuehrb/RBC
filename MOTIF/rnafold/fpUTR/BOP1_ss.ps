%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGCGCACGCGGCCCGGUCGCUGUCGGAAGCGGCUGUGCGGGUGGCGGCCGGCGCGCGGUGGGGC\
) } def
/len { sequence length } bind def

/coor [
[118.36883545 332.32571411]
[117.00480652 317.38787842]
[115.64078522 302.45001221]
[113.93708038 287.54708862]
[111.89458466 272.68679810]
[109.85208130 257.82650757]
[107.80958557 242.96621704]
[105.76708221 228.10592651]
[103.72458649 213.24563599]
[92.32346344 206.83792114]
[86.70637512 194.80982971]
[89.18391418 181.56793213]
[99.05358124 172.11210632]
[97.68955994 157.17425537]
[96.32553864 142.23640442]
[94.96151733 127.29855347]
[93.59748840 112.36070251]
[88.89733124 98.11610413]
[81.10357666 85.29981232]
[73.30981445 72.48352051]
[65.51605225 59.66723251]
[57.72229385 46.85094070]
[49.92853546 34.03464890]
[42.13477707 21.21835899]
[34.34101868 8.40206718]
[18.92868042 4.90415144]
[10.57471752 -8.51176643]
[14.23538685 -23.88625908]
[27.73887825 -32.09791565]
[43.07381058 -28.27490234]
[51.14223862 -14.68534660]
[47.15731049 0.60830826]
[54.95106888 13.42459965]
[62.74482727 26.24089050]
[70.53858948 39.05718231]
[78.33234406 51.87347412]
[86.12610626 64.68976593]
[93.91986084 77.50605774]
[101.71362305 90.32234955]
[103.63693237 87.55323792]
[106.17279053 85.12355804]
[118.42733765 76.47335052]
[122.55921173 60.97150803]
[137.31242371 54.66894531]
[151.36956787 62.40045166]
[153.94720459 78.23507690]
[143.06800842 90.02584839]
[127.07753754 88.72789764]
[114.82299042 97.37810516]
[108.53534698 110.99668121]
[109.89936829 125.93453217]
[111.26338959 140.87237549]
[112.62741089 155.81024170]
[113.99143982 170.74809265]
[127.56871033 181.51957703]
[129.28825378 198.43023682]
[118.58487701 211.20314026]
[120.62737274 226.06343079]
[122.66987610 240.92372131]
[124.71237183 255.78399658]
[126.75487518 270.64428711]
[128.79737854 285.50457764]
[133.19503784 293.90158081]
[130.57864380 301.08599854]
[131.94265747 316.02383423]
[133.30668640 330.96170044]
[140.76831055 346.18539429]
[128.20513916 357.56973267]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[13 54]
[14 53]
[15 52]
[16 51]
[17 50]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[41 49]
[42 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
