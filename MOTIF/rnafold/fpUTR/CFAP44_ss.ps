%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUAAACGGAGGCCUCCGGCAGACGCUGUGAAGAGAGGAGCCGCGGCGGUCAGUACCUUCGAGGAA\
) } def
/len { sequence length } bind def

/coor [
[83.63528442 276.60342407]
[69.09580994 272.07312012]
[57.66027069 262.01586914]
[51.30993652 248.17414856]
[51.14504242 232.94613647]
[57.19415665 218.97015381]
[68.40924072 208.66763306]
[82.84719849 203.82354736]
[84.23122406 188.88754272]
[85.61524963 173.95152283]
[86.99927521 159.01551819]
[88.38330078 144.07949829]
[89.76732635 129.14349365]
[78.11956024 121.80130768]
[70.81962585 110.12702179]
[69.31808472 96.44040680]
[73.91329956 83.46111298]
[83.69216919 73.76824188]
[96.71154785 69.28784180]
[98.78388977 54.43168640]
[100.85623932 39.57553101]
[98.58705902 34.09477997]
[98.88198853 28.87804985]
[101.13002014 24.94354248]
[104.38108063 22.86593056]
[108.48603058 8.43854618]
[112.59097290 -5.98883867]
[116.69591522 -20.41622353]
[120.80086517 -34.84360886]
[124.90580750 -49.27099228]
[129.01075745 -63.69837570]
[117.87840271 -74.20214844]
[112.91350555 -88.68000793]
[115.25696564 -103.80504608]
[124.37027740 -116.10164642]
[138.15925598 -122.74412537]
[153.45530701 -122.20610046]
[166.74349976 -114.61120605]
[174.97032166 -101.70468903]
[176.24528503 -86.45237732]
[170.27543640 -72.35913849]
[158.43258667 -62.66349411]
[143.43814087 -59.59343338]
[139.33319092 -45.16604614]
[135.22824097 -30.73866272]
[131.12330627 -16.31127930]
[127.01835632 -1.88389373]
[122.91341400 12.54349136]
[118.80847168 26.97087479]
[115.71239471 41.64787674]
[113.64004517 56.50403214]
[111.56770325 71.36019135]
[124.28778839 80.91717529]
[130.56362915 95.53738403]
[128.73008728 111.34164429]
[119.27362823 124.13664246]
[104.70333862 130.52751160]
[103.31931305 145.46353149]
[101.93528748 160.39953613]
[100.55126190 175.33555603]
[99.16723633 190.27156067]
[97.78321075 205.20758057]
[111.08524323 212.62214661]
[120.21628571 224.81001282]
[123.59432220 239.65954590]
[120.63409424 254.59799194]
[111.84848022 267.03713989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[19 52]
[20 51]
[21 50]
[25 49]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
