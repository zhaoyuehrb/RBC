%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGUAUGAGCCUGAUGUGGGCAGAAUCCAGAUGAGCUGGCCAGUGCUGUGAAGGAGCUGAGAGCACCCCCGAGAGCCGUGAG\
) } def
/len { sequence length } bind def

/coor [
[31.91856384 146.10455322]
[18.40402985 152.61280823]
[4.88949728 159.12106323]
[5.12807846 172.30290222]
[0.29878968 184.51968384]
[-8.82248020 193.90762329]
[-20.80809212 199.04951477]
[-33.80202484 199.18873596]
[-45.80728149 194.34025574]
[-54.99278259 185.28282166]
[-68.95589447 190.76293945]
[-82.91899872 196.24305725]
[-96.88210297 201.72317505]
[-104.58966827 215.79345703]
[-120.41988373 218.39804077]
[-132.22915649 207.53892517]
[-130.95843506 191.54627991]
[-117.58248901 182.68829346]
[-102.36222076 187.76007080]
[-88.39910889 182.27995300]
[-74.43600464 176.79983521]
[-60.47290039 171.31971741]
[-58.64031601 154.40805054]
[-48.56177902 140.59629822]
[-32.85583496 133.62078857]
[-15.67741776 135.42218018]
[-1.61875868 145.60652161]
[11.89577389 139.09826660]
[25.41030693 132.59001160]
[30.19675255 115.11058807]
[46.39723206 106.31214142]
[64.26055145 112.00366974]
[77.25093842 104.50366974]
[90.24131775 97.00366974]
[95.23973083 90.40738678]
[103.86064148 89.47653961]
[117.12236786 82.46750641]
[130.38409424 75.45848083]
[143.23196411 67.71688080]
[155.62554932 59.26708221]
[156.62882996 45.68842316]
[165.20674133 35.36832809]
[177.99389648 31.99949837]
[190.17636108 36.61473465]
[202.87721252 28.63425255]
[215.57807922 20.65377045]
[228.27894592 12.67328930]
[240.97981262 4.69280815]
[238.39906311 -10.28745174]
[241.75233459 -25.11391449]
[250.52828979 -37.52565002]
[263.38864136 -45.62995911]
[278.37228394 -48.19099426]
[293.19430542 -44.81821442]
[305.59451294 -36.02594757]
[313.68188477 -23.15494919]
[316.22320557 -8.16795063]
[312.83093262 6.64963818]
[304.02236938 19.03824234]
[291.14074707 27.10868835]
[276.15039062 29.63029480]
[261.33728027 26.21853256]
[248.96028137 17.39367104]
[236.25942993 25.37415314]
[223.55856323 33.35463333]
[210.85769653 41.33511353]
[198.15682983 49.31559753]
[195.21034241 65.75945282]
[181.07101440 75.26984406]
[164.07534790 71.66066742]
[151.68176270 80.11046600]
[150.71430969 83.74649048]
[147.78436279 87.02885437]
[143.11346436 88.96533203]
[137.39312744 88.72020721]
[124.13140106 95.72924042]
[110.86966705 102.73826599]
[97.74131775 109.99404907]
[84.75093842 117.49404907]
[71.76055145 124.99404907]
[70.92787170 137.14601135]
[64.29995728 147.22026062]
[53.68606567 152.68382263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 29]
[2 28]
[3 27]
[10 22]
[11 21]
[12 20]
[13 19]
[32 80]
[33 79]
[34 78]
[36 77]
[37 76]
[38 75]
[39 71]
[40 70]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
