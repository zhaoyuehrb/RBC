%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCAUCACCGCGCGCCACUGUCUUCGCCUUCUUGCACUUCGCGGGAGAAGUUGUUGGCGCGAAUGGAUCCUGAGCCUCGAUAACAGAUUCCUCAACCGGCCCACCCGCCAGCCAGCCAGCGCCUUCAUCCUGGGGCUGCG\
) } def
/len { sequence length } bind def

/coor [
[103.30281830 166.93554688]
[92.98719788 166.64904785]
[82.83786011 164.78222656]
[73.09545898 161.37931824]
[63.99099731 156.52102661]
[55.74036026 150.32255554]
[48.53917694 142.93086243]
[42.55820084 134.52122498]
[37.93924332 125.29303741]
[34.79183197 115.46512604]
[33.19058990 105.27050781]
[18.19896698 104.76928711]
[3.20734429 104.26805878]
[-11.78427887 103.76683807]
[-26.77590179 103.26560974]
[-41.76752472 102.76438141]
[-56.75915146 102.26316071]
[-64.93214417 115.19178772]
[-78.39021301 122.24707031]
[-93.47254944 121.62290955]
[-106.13272095 113.58699036]
[-113.02432251 100.38201141]
[-128.01594543 99.88078308]
[-143.00756836 99.37956238]
[-157.99919128 98.87833405]
[-161.90753174 101.16408539]
[-165.93324280 101.95442200]
[-169.57618713 101.40410614]
[-172.44256592 99.81885529]
[-174.28594971 97.60566711]
[-189.17346191 95.77210236]
[-204.06097412 93.93852997]
[-218.94848633 92.10496521]
[-233.83599854 90.27139282]
[-248.72351074 88.43782806]
[-262.20321655 97.13710022]
[-277.36245728 91.88580322]
[-282.57241821 76.71227264]
[-273.83642578 63.25634766]
[-257.85598755 61.84025955]
[-246.88993835 73.55031586]
[-232.00242615 75.38388062]
[-217.11491394 77.21745300]
[-202.22740173 79.05101776]
[-187.33988953 80.88459015]
[-172.45237732 82.71815491]
[-157.49797058 83.88671112]
[-142.50634766 84.38793945]
[-127.51471710 84.88916016]
[-112.52309418 85.39038849]
[-104.76489258 72.67520142]
[-91.59625244 65.50283051]
[-76.50590515 65.88745880]
[-63.54912567 73.82588196]
[-56.25792313 87.27153778]
[-41.26630020 87.77275848]
[-26.27467728 88.27398682]
[-11.28305435 88.77520752]
[3.70856881 89.27643585]
[18.70019150 89.77765656]
[33.69181442 90.27888489]
[43.12685394 64.54974365]
[62.07193756 44.74841690]
[87.35916138 34.18598557]
[114.76012421 34.62864304]
[119.68049622 20.45860672]
[124.60086823 6.28857088]
[117.96105957 -7.80223179]
[123.15287781 -22.10257149]
[136.62722778 -28.34577370]
[141.54759216 -42.51581192]
[146.46797180 -56.68584824]
[135.95222473 -67.80690002]
[131.82037354 -82.54414368]
[135.02188110 -97.51107025]
[144.82106018 -109.26839447]
[158.96614075 -115.11435699]
[174.20668030 -113.70561218]
[187.04051208 -105.36587524]
[194.51852417 -92.01155090]
[194.92231750 -76.71137238]
[188.15910339 -62.98120117]
[175.78302002 -53.97613907]
[160.63800049 -51.76547623]
[155.71763611 -37.59543991]
[150.79725647 -23.42540169]
[157.50268555 -10.17501545]
[152.71459961 4.26550913]
[138.77090454 11.20894432]
[133.85052490 25.37898064]
[128.93016052 39.54901505]
[136.53881836 43.82002258]
[143.52810669 49.04335785]
[149.77952576 55.13047409]
[155.18711853 61.97819519]
[159.65921021 69.47043610]
[163.11999512 77.48019409]
[165.51081848 85.87169647]
[180.43548584 84.37026215]
[195.36013794 82.86882782]
[205.16540527 70.47396851]
[220.87272644 68.72586823]
[233.16320801 78.66162872]
[234.74514771 94.38654327]
[224.68000793 106.57130432]
[208.93923950 107.98690033]
[196.86158752 97.79349518]
[181.93692017 99.29492950]
[167.01225281 100.79636383]
[166.27409363 109.95086670]
[164.29125977 118.91849518]
[161.10098267 127.53080750]
[156.76318359 135.62606812]
[151.35931396 143.05224609]
[144.99087524 149.66987610]
[153.75349426 161.84429932]
[161.37019348 167.03489685]
[162.57214355 174.38899231]
[171.06134033 186.75561523]
[179.55055237 199.12223816]
[193.73966980 206.12077332]
[194.56367493 220.99256897]
[203.05288696 233.35919189]
[218.56742859 233.63938904]
[230.93395996 243.01214600]
[235.39729309 257.87344360]
[230.24118042 272.50881958]
[217.44825745 281.29064941]
[201.93766785 280.84219360]
[189.67353821 271.33581543]
[185.37168884 256.42697144]
[190.68626404 241.84838867]
[182.19705200 229.48176575]
[168.61514282 223.36778259]
[167.18392944 207.61145020]
[158.69471741 195.24482727]
[150.20552063 182.87820435]
[141.57907104 170.60691833]
[132.81645203 158.43249512]
[123.45638275 162.77796936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[16 56]
[17 55]
[22 50]
[23 49]
[24 48]
[25 47]
[30 46]
[31 45]
[32 44]
[33 43]
[34 42]
[35 41]
[65 91]
[66 90]
[67 89]
[70 86]
[71 85]
[72 84]
[98 109]
[99 108]
[100 107]
[115 139]
[116 138]
[118 137]
[119 136]
[120 135]
[122 133]
[123 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
