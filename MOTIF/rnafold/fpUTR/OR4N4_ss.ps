%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGGCAUACCUUGUGUUUAGUUCAAGAACUAUAAUCUAGAUGUAACACCUGAAAAUAAACUCUUUUAUUGAUAUUCUACAGGCAGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[153.16517639 136.86621094]
[145.59840393 115.47262573]
[130.81651306 112.92396545]
[116.03462219 110.37531281]
[104.13690948 118.64516449]
[89.85807037 116.18325043]
[81.41671753 104.40657806]
[66.63482666 101.85792542]
[51.85293579 99.30927277]
[36.93877411 104.58927155]
[25.71121216 94.80197906]
[10.92931938 92.25332642]
[2.76874566 105.04710388]
[-9.63490200 113.71846771]
[-24.37366104 116.97156525]
[-39.19486618 114.34107971]
[-51.84543991 106.25851440]
[-60.41440201 93.98177338]
[-63.62150574 79.39946747]
[-78.40339661 76.85080719]
[-93.18529510 74.30215454]
[-107.96718597 71.75349426]
[-122.74907684 69.20484161]
[-137.94247437 75.37677002]
[-150.71627808 65.09270477]
[-147.92988586 48.93201065]
[-132.44970703 43.51942062]
[-120.20042419 54.42295074]
[-105.41852570 56.97160339]
[-90.63663483 59.52025986]
[-75.85474396 62.06891632]
[-61.07284927 64.61756897]
[-53.16760254 51.95122528]
[-40.98217773 43.25290298]
[-26.35535049 39.87343979]
[-11.50901031 42.35815811]
[1.28935170 50.35913086]
[10.07296085 62.68354797]
[13.47797489 77.47143555]
[28.25986862 80.02008820]
[42.11672592 74.55778503]
[54.40158844 84.52737427]
[69.18347931 87.07603455]
[83.96537781 89.62468719]
[95.86309052 81.35483551]
[110.14192963 83.81674957]
[118.58328247 95.59342194]
[133.36517334 98.14207458]
[148.14706421 100.69072723]
[152.34950256 92.87102509]
[158.24441528 86.25139618]
[165.50469971 81.18980408]
[173.72958374 77.95800781]
[182.46687317 76.72697449]
[191.23774719 77.55786896]
[199.56298828 80.39900208]
[206.98919678 85.08905792]
[213.11347961 91.36617279]
[217.60528564 98.88262177]
[220.22427368 107.22400665]
[220.83311462 115.93217468]
[219.40476990 124.53031158]
[232.72305298 131.43128967]
[246.04132080 138.33226013]
[259.35961914 145.23323059]
[272.67788696 152.13421631]
[285.99615479 159.03518677]
[304.26245117 157.68785095]
[313.29406738 172.62860107]
[326.84017944 179.07084656]
[340.38629150 185.51309204]
[353.94964600 177.97547913]
[369.34899902 179.88316345]
[380.66302490 190.50259399]
[383.54122925 205.75039673]
[376.87692261 219.76347351]
[363.23260498 227.15351868]
[347.85485840 225.07890320]
[336.65667725 214.33735657]
[333.94406128 199.05921936]
[320.39791870 192.61697388]
[306.85180664 186.17471313]
[295.21600342 189.93402100]
[283.80993652 184.50628662]
[279.09518433 172.35346985]
[265.77691650 165.45248413]
[252.45863342 158.55151367]
[239.14035034 151.65054321]
[225.82206726 144.74955750]
[212.50379944 137.84858704]
[193.97454834 150.35774231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[4 47]
[7 44]
[8 43]
[9 42]
[11 40]
[12 39]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[62 90]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[69 82]
[70 81]
[71 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
