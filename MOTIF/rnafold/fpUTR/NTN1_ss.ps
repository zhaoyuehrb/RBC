%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:17:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGGGGGCGAGCGCGCGUGUGUGUGAGUGCGCGCCGGCCAGCGCGCCUUCUGCGGCAGGCGGACAGAUCCUCGGCGCGGCAGGGCCGGGGCAAGCUGGACGCAGC\
) } def
/len { sequence length } bind def

/coor [
[111.27295685 128.73107910]
[97.75752258 130.78190613]
[84.68202209 126.79391479]
[74.61161041 117.54946899]
[69.52191162 104.86215973]
[54.57899475 103.55482483]
[39.63607407 102.24748993]
[24.69315338 100.94015503]
[9.75023365 99.63282013]
[-5.19268703 98.32547760]
[-20.13560867 97.01814270]
[-34.55761719 103.52323914]
[-46.56210709 94.70612335]
[-61.50502777 93.39878845]
[-73.54531097 103.28157043]
[-88.68093109 101.74287415]
[-98.02845001 90.20340729]
[-112.97137451 88.89606476]
[-125.01165771 98.77884674]
[-140.14727783 97.24015808]
[-149.49479675 85.70068359]
[-164.43771362 84.39334869]
[-179.38064575 83.08600616]
[-194.32356262 81.77867126]
[-209.26647949 80.47133636]
[-224.20939636 79.16400146]
[-238.83531189 86.58119965]
[-252.42207336 77.39795685]
[-250.99279785 61.06121445]
[-236.01779175 54.37680817]
[-222.90206909 64.22108459]
[-207.95915222 65.52841949]
[-193.01622009 66.83575439]
[-178.07330322 68.14308929]
[-163.13038635 69.45042419]
[-148.18746948 70.75775909]
[-136.97814941 61.01677704]
[-121.80527496 62.12973404]
[-111.66403961 73.95314789]
[-96.72111511 75.26048279]
[-85.51179504 65.51950073]
[-70.33892822 66.63245392]
[-60.19769287 78.45587158]
[-45.25477219 79.76320648]
[-31.90158081 73.16460419]
[-18.82827187 82.07522583]
[-3.88535118 83.38256073]
[11.05756950 84.68989563]
[26.00049019 85.99723053]
[40.94340897 87.30456543]
[55.88632965 88.61190796]
[70.82925415 89.91924286]
[79.79448700 76.66994476]
[94.18826294 69.68865204]
[110.14345551 70.85099030]
[123.37344360 79.84469604]
[130.32377625 94.25344849]
[145.29840088 95.12561798]
[155.52740479 87.10369110]
[168.07325745 88.23176575]
[176.17118835 97.34803009]
[191.11410522 98.65537262]
[206.05702209 99.96270752]
[218.09730530 90.07992554]
[233.23292542 91.61862183]
[242.58045959 103.15808868]
[257.52337646 104.46543121]
[272.46630859 105.77276611]
[286.34484863 93.05817413]
[304.80737305 94.34143066]
[316.39199829 108.36800385]
[331.38565063 108.80427551]
[346.37930298 109.24054718]
[361.37295532 109.67681885]
[376.36660767 110.11309052]
[391.36026001 110.54936218]
[406.35391235 110.98563385]
[415.72894287 98.62081146]
[430.59106445 94.16018677]
[445.22549438 99.31896973]
[454.00500488 112.11348724]
[453.55368042 127.62400055]
[444.04510498 139.88639832]
[429.13546753 144.18553162]
[414.55786133 138.86830139]
[405.91766357 125.97928619]
[390.92401123 125.54301453]
[375.93035889 125.10674286]
[360.93670654 124.67047119]
[345.94302368 124.23419952]
[330.94937134 123.79793549]
[315.95571899 123.36166382]
[309.42929077 132.93884277]
[298.95031738 138.16609192]
[287.13223267 137.60795593]
[276.98733521 131.28862000]
[271.15896606 120.71568298]
[256.21603394 119.40834808]
[241.27311707 118.10101318]
[230.06379700 127.84199524]
[214.89093018 126.72904205]
[204.74969482 114.90562439]
[189.80677795 113.59828949]
[174.86384583 112.29095459]
[159.47494507 120.58656311]
[144.42622375 110.10024261]
[129.45159912 109.22807312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 52]
[6 51]
[7 50]
[8 49]
[9 48]
[10 47]
[11 46]
[13 44]
[14 43]
[17 40]
[18 39]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[57 107]
[58 106]
[61 104]
[62 103]
[63 102]
[66 99]
[67 98]
[68 97]
[71 92]
[72 91]
[73 90]
[74 89]
[75 88]
[76 87]
[77 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
