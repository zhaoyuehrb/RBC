%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:05:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCGCCGGAAGUGGUGGGCAUUCUGGGUAACGAGCUAUUUACUUCCUGCGGGUGCACAGGCUGUGGUCGUCUAUCUCCCUGUUGUUCUUCCCAUCGGCGAAG\
) } def
/len { sequence length } bind def

/coor [
[75.98113251 377.90249634]
[68.22959137 364.32135010]
[71.07221222 348.94430542]
[83.16679382 339.03192139]
[83.16679382 324.03192139]
[83.16679382 309.03192139]
[83.16679382 294.03192139]
[83.16679382 279.03192139]
[80.78599548 276.21826172]
[79.74322510 272.05233765]
[80.68609619 267.22201538]
[83.90778351 262.68984985]
[85.26526642 247.75138855]
[86.62274933 232.81294250]
[87.98023224 217.87449646]
[78.49873352 201.13693237]
[89.93797302 184.67488098]
[90.39101410 169.68171692]
[90.84406281 154.68856812]
[91.29711151 139.69540405]
[91.75015259 124.70224762]
[80.60974121 117.38617706]
[74.54756165 105.51673126]
[75.15126038 92.20248413]
[82.26274109 80.93037415]
[94.01953125 74.65251160]
[94.92520905 59.67987823]
[95.83088684 44.70724487]
[83.70624542 37.55175781]
[75.91513062 25.90536880]
[73.94768524 12.09921360]
[78.13528442 -1.13311481]
[87.59631348 -11.19680405]
[100.42110443 -16.14463615]
[101.77859497 -31.08308411]
[89.33836365 -39.98184586]
[83.06402588 -53.82126236]
[84.54942322 -68.84324646]
[93.29599762 -81.02329254]
[106.87336731 -87.14868164]
[108.23085785 -102.08712769]
[109.58834076 -117.02558136]
[110.94582367 -131.96401978]
[101.10350800 -144.03741455]
[102.69299316 -159.16778564]
[114.26377869 -168.47651672]
[115.62126160 -183.41497803]
[116.97874451 -198.35342407]
[118.33622742 -213.29187012]
[106.57132721 -223.40951538]
[103.03309631 -238.51780701]
[109.08205414 -252.80729675]
[122.39225769 -260.78338623]
[137.84565735 -259.37911987]
[149.50010681 -249.13444519]
[152.87423706 -233.98864746]
[146.67062378 -219.76562500]
[133.27467346 -211.93438721]
[131.91719055 -196.99594116]
[130.55970764 -182.05749512]
[129.20222473 -167.11903381]
[138.90553284 -155.87709045]
[137.74165344 -140.70803833]
[125.88426971 -130.60653687]
[124.52678680 -115.66809845]
[123.16930389 -100.72964478]
[121.81182098 -85.79119873]
[134.06266785 -77.31874847]
[140.47044373 -63.76160431]
[139.22373962 -48.71792984]
[130.55754089 -36.23618317]
[116.71704102 -29.72560120]
[115.35955811 -14.78715324]
[128.73989868 -5.86615658]
[135.87982178 8.64760876]
[134.76802063 24.87779427]
[125.61123657 38.43703079]
[110.80352020 45.61292267]
[109.89784241 60.58555603]
[108.99216461 75.55818939]
[121.69148254 85.58678436]
[126.01671600 101.17966461]
[120.29809570 116.31712341]
[106.74330902 125.15529633]
[106.29026794 140.14845276]
[105.83721924 155.14160156]
[105.38417053 170.13476562]
[104.93112946 185.12792969]
[112.97249603 192.76133728]
[115.34236908 203.36555481]
[111.47638702 213.28279114]
[102.91867828 219.23197937]
[101.56119537 234.17042542]
[100.20371246 249.10887146]
[98.84622955 264.04733276]
[98.16679382 279.03192139]
[98.16679382 294.03192139]
[98.16679382 309.03192139]
[98.16679382 324.03192139]
[98.16679382 339.03192139]
[110.26137543 348.94430542]
[113.10399628 364.32135010]
[105.35245514 377.90249634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[12 95]
[13 94]
[14 93]
[15 92]
[17 88]
[18 87]
[19 86]
[20 85]
[21 84]
[26 80]
[27 79]
[28 78]
[34 73]
[35 72]
[40 67]
[41 66]
[42 65]
[43 64]
[46 61]
[47 60]
[48 59]
[49 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
