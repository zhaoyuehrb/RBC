%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGUCGCCCGGCGCGGGAGCGCGAACUCUCGCGAGAAUGCCGCCAGCUCCGGAGGCGACUGCGGCAGGAGCCCGAGCUCUCGCGCGACAGGCACCAAUUCGUUAGACGCGCGCUGCAGGAGCGCGGAAC\
) } def
/len { sequence length } bind def

/coor [
[300.51458740 318.71661377]
[290.90344238 307.20031738]
[281.29226685 295.68399048]
[271.27316284 284.52078247]
[260.85903931 273.72512817]
[253.88175964 271.06893921]
[250.32847595 262.54351807]
[240.17622375 251.50126648]
[230.02397156 240.45899963]
[211.79475403 240.85902405]
[198.76774597 227.65263367]
[199.43936157 208.79766846]
[188.76936340 198.25485229]
[178.09936523 187.71203613]
[167.42935181 177.16920471]
[156.75935364 166.62638855]
[146.08935547 156.08357239]
[135.41935730 145.54075623]
[124.74935150 134.99792480]
[114.07934570 124.45510864]
[103.40934753 113.91228485]
[89.93235016 110.18910217]
[86.04783630 96.75771332]
[75.37783051 86.21488953]
[59.80117798 86.13958740]
[49.13046646 75.29566956]
[49.29825592 60.44617462]
[38.62825394 49.90335464]
[27.95825195 39.36053085]
[17.28825188 28.81771278]
[6.24598360 18.66545486]
[-5.15426350 8.91689777]
[-16.55451012 -0.83165973]
[-25.20219421 -4.07603025]
[-28.10761452 -10.95325279]
[-39.27082062 -20.97237778]
[-52.23347855 -21.07119370]
[-61.33375549 -29.72915840]
[-62.03060532 -41.86788940]
[-72.95034790 -52.15182114]
[-83.87009430 -62.43574905]
[-94.78983307 -72.71968079]
[-110.14077759 -76.54839325]
[-114.10135651 -90.90676880]
[-125.02110291 -101.19070435]
[-140.80879211 -100.46654510]
[-152.42796326 -111.17964172]
[-152.98515320 -126.97410583]
[-142.14981079 -138.47935486]
[-126.35034180 -138.86953735]
[-114.96028900 -127.91315460]
[-114.73717499 -112.11044312]
[-103.81742859 -101.82651520]
[-89.24753571 -98.73337555]
[-84.50590515 -83.63941956]
[-73.58615875 -73.35549164]
[-62.66641998 -63.07156372]
[-51.74667358 -52.78763580]
[-34.50828552 -49.73541260]
[-29.25169563 -32.13558197]
[-18.08848953 -22.11645889]
[-6.80595303 -12.23190689]
[4.59429407 -2.48334932]
[15.99454117 7.26520824]
[19.61444473 7.31501007]
[23.38087463 9.18426323]
[26.40901756 12.91723824]
[27.83107185 18.14771080]
[38.50107193 28.69053078]
[49.17107391 39.23335266]
[59.84107590 49.77617264]
[74.68749237 49.43033981]
[85.65857697 59.97026443]
[85.92065430 75.54489136]
[96.59065247 86.08771515]
[110.06764984 89.81089783]
[113.95216370 103.24228668]
[124.62216949 113.78511047]
[135.29217529 124.32792664]
[145.96217346 134.87074280]
[156.63217163 145.41357422]
[167.30216980 155.95639038]
[177.97218323 166.49920654]
[188.64218140 177.04202271]
[199.31217957 187.58485413]
[209.98217773 198.12767029]
[221.74746704 195.73181152]
[233.07870483 199.32145691]
[241.15295410 207.87944031]
[244.01856995 219.16658020]
[241.06623840 230.30673218]
[251.21849060 241.34899902]
[261.37075806 252.39126587]
[271.65469360 263.31100464]
[282.06881714 274.10665894]
[287.28186035 275.59133911]
[290.97824097 278.66403198]
[292.80221558 282.45260620]
[292.80859375 286.07284546]
[302.41976929 297.58914185]
[312.03091431 309.10546875]
[323.88278198 304.85879517]
[336.44259644 304.49328613]
[348.47415161 308.02963257]
[358.79803467 315.10531616]
[366.40710449 325.01156616]
[370.56484985 336.76446533]
[370.87658691 349.20260620]
[367.32687378 361.10186768]
[360.27957153 371.29586792]
[369.03805542 383.47326660]
[377.79653931 395.65066528]
[386.55499268 407.82806396]
[395.31347656 420.00549316]
[404.07196045 432.18289185]
[419.60980225 436.17721558]
[426.04287720 450.87399292]
[418.43624878 464.99911499]
[402.62509155 467.71697998]
[390.73837280 456.94268799]
[391.89453125 440.94134521]
[383.13607788 428.76394653]
[374.37759399 416.58654785]
[365.61911011 404.40914917]
[356.86065674 392.23175049]
[348.10217285 380.05435181]
[330.92620850 383.79885864]
[313.77423096 379.71368408]
[300.04904175 368.56262207]
[292.49374390 352.51583862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 101]
[2 100]
[3 99]
[4 95]
[5 94]
[7 93]
[8 92]
[9 91]
[12 86]
[13 85]
[14 84]
[15 83]
[16 82]
[17 81]
[18 80]
[19 79]
[20 78]
[21 77]
[23 75]
[24 74]
[27 71]
[28 70]
[29 69]
[30 68]
[31 64]
[32 63]
[33 62]
[35 61]
[36 60]
[39 58]
[40 57]
[41 56]
[42 55]
[44 53]
[45 52]
[110 126]
[111 125]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
