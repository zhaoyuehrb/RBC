%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:31:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCAUGCGCCUGUUUGCUCGGUGCUGUUCUCUCGAUAAAUCACAACAAAGCUUCCAGAGGGAGAGGAAGG\
) } def
/len { sequence length } bind def

/coor [
[166.78900146 83.67212677]
[152.69361877 88.80242920]
[138.59822083 93.93273163]
[124.50283051 99.06303406]
[110.40744781 104.19333649]
[96.42733002 109.62990570]
[82.56912994 115.37015533]
[72.78037262 127.79958344]
[58.06097031 125.52176666]
[44.20277786 131.26202393]
[38.38705444 145.95735168]
[23.85055351 152.15942383]
[9.21752644 146.18865967]
[3.16948724 131.58740234]
[9.29463005 117.01831818]
[23.95901680 111.12499237]
[38.46252441 117.40382385]
[52.32072067 111.66357422]
[61.11824799 99.64472961]
[76.82888031 101.51196289]
[90.68707275 95.77171326]
[96.55051422 89.84575653]
[105.27714539 90.09794617]
[119.37252808 84.96764374]
[133.46792603 79.83734131]
[147.56330872 74.70703888]
[161.65870667 69.57673645]
[175.25331116 63.23746109]
[188.24369812 55.73746109]
[201.23408508 48.23746109]
[214.22445679 40.73746109]
[227.21484375 33.23746109]
[240.20521545 25.73746109]
[253.19560242 18.23746109]
[248.63943481 3.88283038]
[247.27606201 -11.11567879]
[249.16925049 -26.05656052]
[254.23045349 -40.24099731]
[262.22293091 -53.00556564]
[272.77291870 -63.75323868]
[285.38690186 -71.98132324]
[299.47491455 -77.30498505]
[314.37808228 -79.47522736]
[329.39932251 -78.39054108]
[343.83605957 -74.10165405]
[357.01306152 -66.80917358]
[368.31405640 -56.85417557]
[377.21041870 -44.70227432]
[383.28610229 -30.92184258]
[386.25689697 -16.15740967]
[385.98385620 -1.09953761]
[382.47976685 13.54749107]
[375.90850830 27.09860611]
[366.57745361 38.92000198]
[354.92300415 48.45876312]
[341.49029541 55.26875305]
[326.90753174 59.03144836]
[311.85687256 59.57086563]
[297.04217529 56.86177444]
[283.15640259 51.03088379]
[270.84899902 42.35091400]
[260.69561768 31.22784233]
[247.70521545 38.72784424]
[234.71484375 46.22784424]
[221.72445679 53.72784424]
[208.73408508 61.22784424]
[195.74369812 68.72784424]
[182.75331116 76.22784424]
[182.00765991 79.24777222]
[179.82717896 82.09540558]
[176.29643250 84.13978577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 21]
[7 20]
[9 18]
[10 17]
[28 68]
[29 67]
[30 66]
[31 65]
[32 64]
[33 63]
[34 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
