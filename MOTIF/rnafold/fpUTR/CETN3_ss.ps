%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:20:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGUUGUGGGAGGUCCCUGAGGCCGCUGAGGUCGUUCGUGUCUGUUGAACGGCUGUGGGCGUCUUGCUGCCUUGGGUAGGGGGUUAAAAUCGUUCUUGAGAGGAACGUCUCUGUGCGAAGAGAUA\
) } def
/len { sequence length } bind def

/coor [
[100.63367462 176.38272095]
[91.80706787 188.51083374]
[76.82568359 187.76383972]
[69.24932098 174.81784058]
[75.93661499 161.38957214]
[77.78190613 146.50350952]
[79.62719727 131.61744690]
[72.13652039 131.24360657]
[63.38036346 143.42266846]
[54.62421036 155.60174561]
[53.53066635 171.96438599]
[38.69606781 178.95486450]
[25.38097763 169.38197327]
[27.28281784 153.09347534]
[42.44513702 146.84559631]
[51.20129395 134.66651917]
[59.95744705 122.48744965]
[63.56320572 93.40311432]
[81.85699463 78.49827576]
[68.86661530 70.99827576]
[55.87623215 63.49827957]
[42.88584900 55.99827957]
[29.89546967 48.49827957]
[20.79006577 46.88665771]
[16.67806625 40.64590073]
[3.87870359 32.82437134]
[-8.92066002 25.00284386]
[-25.78886795 29.43491936]
[-40.38544083 20.51852036]
[-43.99747849 4.14402819]
[-56.98786163 -3.35597157]
[-69.97824097 -10.85597134]
[-82.96862030 -18.35597229]
[-95.95900726 -25.85597229]
[-108.94938660 -33.35597229]
[-121.93976593 -40.85597229]
[-134.93014526 -48.35597229]
[-147.92053223 -55.85597229]
[-162.55218506 -50.33794022]
[-177.29040527 -55.56468201]
[-185.17625427 -69.06829071]
[-182.48628235 -84.47277069]
[-170.49060059 -94.50460052]
[-154.85321045 -94.42705536]
[-142.95759583 -84.27675629]
[-140.42053223 -68.84635162]
[-127.43014526 -61.34635162]
[-114.43976593 -53.84635162]
[-101.44938660 -46.34635162]
[-88.45900726 -38.84635162]
[-75.46862030 -31.34635353]
[-62.47824097 -23.84635353]
[-49.48786163 -16.34635353]
[-36.49747849 -8.84635258]
[-24.57586288 -13.90076542]
[-11.73570347 -11.09055614]
[-2.75216722 -1.22980917]
[-1.09913158 12.20348072]
[11.70023155 20.02500916]
[24.49959564 27.84653664]
[37.39546967 35.50789642]
[50.38584900 43.00789642]
[63.37623215 50.50789642]
[76.36661530 58.00789642]
[89.35699463 65.50789642]
[103.98091125 62.17008209]
[112.43070984 49.77650070]
[120.88051605 37.38291931]
[122.26157379 21.62210464]
[135.82395935 15.46491623]
[144.27375793 3.07133484]
[152.72355652 -9.32224655]
[151.16577148 -25.28948975]
[162.77809143 -36.35898209]
[178.65254211 -34.03915024]
[186.61158752 -20.10957718]
[180.54974365 -5.25583601]
[165.11714172 -0.87244594]
[156.66734314 11.52113533]
[148.21752930 23.91471672]
[147.44087219 38.78905869]
[133.27409363 45.83272171]
[124.82429504 58.22630310]
[116.37449646 70.61988068]
[119.11454773 77.60144043]
[128.46697998 65.87403107]
[143.29940796 68.10987854]
[148.77922058 82.07310486]
[139.42654419 93.80030823]
[124.59466553 91.56454468]
[127.33472443 98.54609680]
[141.95864868 101.88391113]
[156.58256531 105.22172546]
[171.20648193 108.55953979]
[185.83039856 111.89735413]
[200.45431519 115.23516846]
[215.07823181 118.57298279]
[231.86569214 116.20277405]
[238.79049683 131.67802429]
[225.83699036 142.61618042]
[211.74041748 133.19689941]
[197.11650085 129.85908508]
[182.49258423 126.52127075]
[167.86866760 123.18345642]
[153.24475098 119.84564209]
[138.62083435 116.50782776]
[123.99691010 113.17001343]
[115.08960724 125.23898315]
[122.58960724 138.22935486]
[130.08961487 151.21974182]
[137.58961487 164.21012878]
[145.08961487 177.20050049]
[160.41831970 181.04835510]
[168.46473694 194.65095520]
[164.45504761 209.93814087]
[150.76812744 217.84028625]
[135.52420044 213.66918945]
[127.76719666 199.89949036]
[132.09922791 184.70050049]
[124.59922791 171.71012878]
[117.09922791 158.71974182]
[109.59922791 145.72935486]
[102.09922791 132.73898315]
[94.60855103 132.36514282]
[94.96250153 147.36096191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 17]
[9 16]
[10 15]
[19 65]
[20 64]
[21 63]
[22 62]
[23 61]
[25 60]
[26 59]
[27 58]
[30 54]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[66 84]
[67 83]
[68 82]
[70 80]
[71 79]
[72 78]
[91 107]
[92 106]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
