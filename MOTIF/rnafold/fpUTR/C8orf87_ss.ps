%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAAGCAACAAGAAGCUAGGGCAGAGGAUUUAGAGGGCAAGCAAGCAUGGGCCAGGACUUUGACAGCAUUCAUCCAGCAGC\
) } def
/len { sequence length } bind def

/coor [
[83.50781250 334.76074219]
[68.24549103 333.04110718]
[55.89729691 323.90777588]
[49.78482819 309.81759644]
[51.55231094 294.56072998]
[60.72430038 282.24124146]
[74.83357239 276.17294312]
[76.51303864 261.26727295]
[63.82881165 253.42025757]
[55.77633286 240.79222107]
[53.99794388 225.85910034]
[58.89955139 211.57643127]
[69.55962372 200.79450989]
[83.90187836 195.68951416]
[85.58134460 180.78382874]
[87.26081848 165.87814331]
[88.66127014 150.94366455]
[89.78221893 135.98561096]
[90.90317535 121.02754974]
[81.79732513 113.91304779]
[77.32208252 103.25918579]
[78.61590576 91.77621460]
[85.34964752 82.38530731]
[95.81031799 77.47541809]
[98.04595184 62.64295578]
[100.28158569 47.81049347]
[102.51721954 32.97803116]
[104.75285339 18.14556694]
[95.63928986 5.51304197]
[98.11783600 -9.49733639]
[110.21718597 -18.10787773]
[112.45281982 -32.94033813]
[110.54026794 -36.89204407]
[109.97528076 -40.86352539]
[110.60876465 -44.44606781]
[112.17868042 -47.31681442]
[114.34613037 -49.26715469]
[116.73770905 -50.21783829]
[121.69189453 -64.37609100]
[126.64608002 -78.53433990]
[115.81706238 -89.29050446]
[110.73546600 -103.68286896]
[112.41026306 -118.85382080]
[120.50890350 -131.79115295]
[133.42341614 -139.92616272]
[148.58959961 -141.64361572]
[162.99620056 -136.60253906]
[173.78277588 -125.80381012]
[178.80764771 -111.39154816]
[177.07313538 -96.22730255]
[168.92359924 -83.32196045]
[155.97715759 -75.23787689]
[140.80433655 -73.58015442]
[135.85014343 -59.42190552]
[130.89596558 -45.26365280]
[127.28527832 -30.70470619]
[125.04964447 -15.87224293]
[134.07345581 -4.07789993]
[132.01748657 10.99617386]
[119.58531952 20.38120079]
[117.34968567 35.21366501]
[115.11405182 50.04612732]
[112.87841797 64.87858582]
[110.64278412 79.71105194]
[121.96883392 93.49765778]
[119.97112274 111.22783661]
[105.86122894 122.14850616]
[104.74028015 137.10656738]
[103.61932373 152.06462097]
[106.14180756 161.10647583]
[102.16649628 167.55761719]
[100.48703003 182.46330261]
[98.80756378 197.36898804]
[111.65425873 205.53744507]
[119.64785767 218.42112732]
[121.24838257 233.43640137]
[116.19165039 247.59939575]
[105.53106689 258.11895752]
[91.41872406 262.94674683]
[89.73925781 277.85241699]
[102.14447021 286.90817261]
[108.34514618 300.95974731]
[106.67334747 316.22738647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[14 73]
[15 72]
[16 71]
[17 69]
[18 68]
[19 67]
[24 64]
[25 63]
[26 62]
[27 61]
[28 60]
[31 57]
[32 56]
[38 55]
[39 54]
[40 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
