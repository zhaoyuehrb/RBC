%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGGCGGCGGCCGCGGCGGCGGAGGCAGCAGCGGCGGCGGCAGUGGCGGCGGCGAAGGUGGCGGCGGCUCGGCCAGUACUCCCGGCCCCCGCCAUUUCGGACUGGGAGCGAGCGCGGCGCAGGCACUGAAGGCGGCGGCGGGGCCAGAGGCUCAGCGGCUCCCAGGUGCGGGAGAGAGGCCUGCUGAAA\
) } def
/len { sequence length } bind def

/coor [
[27.42890930 207.80226135]
[25.39592743 192.94180298]
[14.32531929 203.06314087]
[15.92118835 218.38500977]
[8.27839470 231.55471802]
[-5.49083853 237.62696838]
[-20.02145576 234.46481323]
[-31.09206390 244.58616638]
[-36.05635834 259.60836792]
[-50.67039490 262.48571777]
[-61.74100113 272.60705566]
[-66.70529938 287.62927246]
[-81.31932831 290.50662231]
[-92.38993835 300.62799072]
[-103.46054840 310.74932861]
[-114.53115845 320.87066650]
[-125.60176086 330.99200439]
[-130.56605530 346.01422119]
[-145.18009949 348.89157104]
[-156.25070190 359.01290894]
[-161.21499634 374.03512573]
[-175.82902527 376.91247559]
[-186.89964294 387.03381348]
[-191.33007812 402.82315063]
[-207.28405762 406.61825562]
[-218.34948730 394.51501465]
[-213.14320374 378.96423340]
[-197.02098083 375.96322632]
[-185.95037842 365.84185791]
[-181.77792358 351.54360962]
[-166.37203979 347.94232178]
[-155.30143738 337.82095337]
[-151.12898254 323.52270508]
[-135.72311401 319.92141724]
[-124.65250397 309.80004883]
[-113.58189392 299.67871094]
[-102.51128387 289.55737305]
[-91.44067383 279.43603516]
[-87.26822662 265.13778687]
[-71.86235046 261.53646851]
[-60.79174042 251.41511536]
[-56.61928940 237.11686707]
[-41.21340942 233.51554871]
[-30.14280128 223.39421082]
[-31.99313354 208.63906860]
[-24.71412659 195.46788025]
[-10.91384125 189.03317261]
[4.20397329 191.99253845]
[15.27458191 181.87120056]
[25.92425728 171.30784607]
[36.13536835 160.31997681]
[46.34648132 149.33210754]
[56.55759048 138.34423828]
[66.67893982 127.27363586]
[76.70984650 116.12101746]
[86.74075317 104.96839905]
[85.23954773 100.62243652]
[85.18737793 95.83294678]
[86.70898438 91.08928680]
[78.82472229 78.32847595]
[70.94045258 65.56766510]
[63.05618286 52.80685043]
[55.17191696 40.04603958]
[47.28765106 27.28522682]
[39.40338135 14.52441502]
[31.51911545 1.76360250]
[23.63484764 -10.99720955]
[9.79894829 -18.67044067]
[9.69154930 -33.56465912]
[1.80728209 -46.32546997]
[-6.07698536 -59.08628464]
[-13.26110840 -64.75286102]
[-13.98377609 -72.11959076]
[-21.65929222 -85.00704956]
[-29.33480644 -97.89450073]
[-44.75639343 -98.31668854]
[-57.48871231 -107.02826691]
[-63.46892929 -121.24939728]
[-60.78878021 -136.44216919]
[-50.30348587 -147.75862122]
[-35.35887146 -151.58772278]
[-20.72370529 -146.70762634]
[-11.06801701 -134.67552185]
[-9.47290134 -119.33084869]
[-16.44735336 -105.57001495]
[-8.77183819 -92.68256378]
[-1.09632242 -79.79510498]
[6.68382692 -66.97055054]
[14.56809425 -54.20973969]
[22.45236206 -41.44892502]
[35.72432327 -34.68843460]
[36.39566040 -18.88147736]
[44.27992630 -6.12066507]
[52.16419601 6.64014721]
[60.04846191 19.40095901]
[67.93273163 32.16176987]
[75.81699371 44.92258453]
[83.70126343 57.68339539]
[91.58553314 70.44420624]
[99.46979523 83.20501709]
[113.38567352 88.80399323]
[127.91076660 85.05945587]
[139.34251404 74.12210083]
[153.59834290 78.43725586]
[168.12344360 74.69271851]
[182.61758423 70.83009338]
[197.07980347 66.84962463]
[211.54203796 62.86916351]
[226.00425720 58.88869858]
[240.46647644 54.90823364]
[254.92871094 50.92776871]
[269.39093018 46.94730377]
[276.43804932 36.13264847]
[288.57705688 33.12075043]
[299.16052246 38.99839401]
[313.68560791 35.25385666]
[322.36828613 17.02351952]
[346.47906494 14.10829926]
[359.89367676 7.39652205]
[368.77322388 -5.69791985]
[383.61740112 -4.47323036]
[397.03201294 -11.18500710]
[410.44662476 -17.89678383]
[415.26071167 -29.87357330]
[426.58425903 -35.18428040]
[438.10729980 -31.47258377]
[451.62936401 -37.96512222]
[455.33013916 -53.15848923]
[467.96173096 -62.37677002]
[483.55993652 -61.26737595]
[494.75970459 -50.35412979]
[496.27288818 -34.78993225]
[487.38497925 -21.92371941]
[472.29263306 -17.83052635]
[458.12191772 -24.44303131]
[444.59982300 -17.95049286]
[435.50183105 -2.95159340]
[417.15841675 -4.48216343]
[403.74380493 2.22961330]
[390.32916260 8.94139004]
[382.40914917 21.55576134]
[366.60546875 20.81114197]
[353.19085693 27.52292061]
[355.38049316 42.36224365]
[370.16192627 44.91351318]
[384.94335938 47.46478653]
[399.72479248 50.01605606]
[414.50625610 52.56732559]
[431.14297485 49.30308151]
[438.88516235 64.38601685]
[426.53494263 76.00100708]
[411.95498657 67.34877014]
[397.17352295 64.79750061]
[382.39208984 62.24622726]
[367.61065674 59.69495392]
[352.82922363 57.14368439]
[331.36825562 61.55873108]
[317.43014526 49.77895355]
[302.90505981 53.52349091]
[291.06890869 66.47130585]
[273.37139893 61.40952682]
[258.90917969 65.38999176]
[244.44694519 69.37045288]
[229.98472595 73.35092163]
[215.52249146 77.33138275]
[201.06027222 81.31185150]
[186.59805298 85.29231262]
[180.97474670 90.10578156]
[171.86798096 89.21781921]
[157.34288025 92.96234894]
[146.95007324 103.63187408]
[131.65530396 99.58454895]
[117.13021088 103.32908630]
[131.80184937 106.45042419]
[142.18460083 117.27625275]
[144.69046021 132.06546021]
[138.45347595 145.70730591]
[125.62896729 153.48754883]
[110.64874268 152.71754456]
[98.68955231 143.66337585]
[93.88416290 129.45393372]
[97.89337158 114.99931335]
[87.86246490 126.15192413]
[77.83155060 137.30455017]
[74.41223145 145.79159546]
[67.54545593 148.55535889]
[57.33434677 159.54322815]
[47.12323761 170.53108215]
[36.91212463 181.51895142]
[51.75658035 183.67350769]
[59.47113800 196.53762817]
[54.38026047 210.64730835]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 49]
[3 48]
[7 44]
[8 43]
[10 41]
[11 40]
[13 38]
[14 37]
[15 36]
[16 35]
[17 34]
[19 32]
[20 31]
[22 29]
[23 28]
[50 189]
[51 188]
[52 187]
[53 186]
[54 184]
[55 183]
[56 182]
[59 100]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[65 94]
[66 93]
[67 92]
[69 90]
[70 89]
[71 88]
[73 87]
[74 86]
[75 85]
[101 173]
[102 172]
[104 170]
[105 169]
[106 167]
[107 166]
[108 165]
[109 164]
[110 163]
[111 162]
[112 161]
[115 159]
[116 158]
[118 143]
[119 142]
[121 140]
[122 139]
[123 138]
[126 136]
[127 135]
[144 156]
[145 155]
[146 154]
[147 153]
[148 152]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
