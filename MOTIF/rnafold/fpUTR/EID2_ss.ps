%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:32:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUGCAUUUACAGCGCGCAUAGCGCCCACGCACGCGCACUGGGGUGUCCGCCGGGCAUCGCUCUGUCCAGUUAUUCCAGUUUCUCUGGGAGCAGCCGAGUUGACCCCACGGUCUGAG\
) } def
/len { sequence length } bind def

/coor [
[94.19046783 230.06690979]
[89.54264069 244.32867432]
[81.14754486 256.75936890]
[69.65419769 266.39801025]
[55.95116806 272.49938965]
[41.09782791 274.59182739]
[26.24249840 272.51354980]
[12.53364849 266.42526245]
[1.03111196 256.79760742]
[-7.37584686 244.37492371]
[-12.03728294 230.11761475]
[-12.59282017 215.12789917]
[-8.99950981 200.56465149]
[-1.53515160 187.55375671]
[9.22530651 177.09954834]
[-5.59001875 179.44606018]
[-20.40534401 181.79257202]
[-35.22066879 184.13909912]
[-50.03599548 186.48561096]
[-54.62128448 194.97521973]
[-62.52617264 200.26211548]
[-71.84723663 201.22921753]
[-80.41153717 197.78134155]
[-86.28311920 190.83760071]
[-101.23687744 192.01449585]
[-116.19063568 193.19137573]
[-129.39176941 202.92082214]
[-144.30787659 196.10598755]
[-145.59452820 179.75740051]
[-131.92814636 170.69306946]
[-117.36752319 178.23760986]
[-102.41376495 177.06072998]
[-87.46000671 175.88385010]
[-71.72328949 162.63630676]
[-52.38251114 171.67028809]
[-37.56718445 169.32376099]
[-22.75185966 166.97724915]
[-7.93653536 164.63073730]
[6.87878942 162.28421021]
[20.58197212 156.18316650]
[32.23916245 146.74336243]
[43.89635086 137.30355835]
[55.55353928 127.86374664]
[67.08616638 118.27216339]
[78.49225616 108.53044128]
[89.89834595 98.78871918]
[93.55290985 91.48358917]
[101.73288727 88.94603729]
[113.39007568 79.50623322]
[125.04726410 70.06642914]
[130.90277100 55.36868286]
[145.66296387 53.37216568]
[157.32015991 43.93235779]
[159.11605835 28.45939827]
[171.07257080 19.05215454]
[185.81260681 20.85962296]
[197.46980286 11.41981697]
[209.12698364 1.98001146]
[209.65702820 -9.03945065]
[216.09001160 -17.72827911]
[226.05877686 -21.30184364]
[236.11769104 -18.78580093]
[248.25294495 -27.60257912]
[260.38821411 -36.41935730]
[272.52346802 -45.23613739]
[274.73400879 -50.23911285]
[278.32815552 -53.49115372]
[282.37075806 -54.75740051]
[285.97479248 -54.22403717]
[298.76440430 -62.06151581]
[311.55401611 -69.89899445]
[324.34359741 -77.73647308]
[321.93109131 -92.74474335]
[325.45050049 -107.53265381]
[334.36517334 -119.84513855]
[347.31564331 -127.80464935]
[362.32705688 -130.19741821]
[377.11032104 -126.65854645]
[389.41107178 -117.72770691]
[397.35354614 -104.76677704]
[399.72656250 -89.75221252]
[396.16824341 -74.97361755]
[387.22125244 -62.68461990]
[374.24987793 -54.75921249]
[359.23220825 -52.40595245]
[344.45831299 -55.98369980]
[332.18109131 -64.94686890]
[319.39147949 -57.10939026]
[306.60186768 -49.27191544]
[293.81228638 -41.43443680]
[281.34024048 -33.10088348]
[269.20498657 -24.28410339]
[257.06973267 -15.46732426]
[244.93446350 -6.65054512]
[238.53096008 11.51733494]
[218.56678772 13.63720131]
[206.90960693 23.07700729]
[195.25241089 32.51681137]
[193.95576477 47.31053543]
[182.26818848 57.04990387]
[166.75996399 55.58954620]
[155.10276794 65.02935028]
[150.08105469 79.05189514]
[134.48707581 81.72361755]
[122.82988739 91.16342163]
[111.17269135 100.60322571]
[99.64006805 110.19480896]
[88.23397827 119.93653107]
[76.82788849 129.67825317]
[72.26110840 137.73487854]
[64.99334717 139.52093506]
[53.33615494 148.96073914]
[41.67896652 158.40054321]
[30.02177811 167.84036255]
[44.98830414 166.83882141]
[59.65206909 169.99699402]
[72.87940979 177.07070923]
[83.64771271 187.51310730]
[91.12448883 200.51687622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[24 33]
[25 32]
[26 31]
[40 114]
[41 113]
[42 112]
[43 111]
[44 109]
[45 108]
[46 107]
[48 106]
[49 105]
[50 104]
[52 102]
[53 101]
[56 98]
[57 97]
[58 96]
[62 94]
[63 93]
[64 92]
[65 91]
[69 90]
[70 89]
[71 88]
[72 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
