%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGACAGGGACAGACGUAGGCCAAGAGAGGGGAACCAGAGAGGAACCAGAGGGGAGAGACAGAGCAGCAAGCAGUGGAUUGCUCCUUGACGACGCCAGC\
) } def
/len { sequence length } bind def

/coor [
[97.63073730 230.83551025]
[90.78590393 244.28208923]
[80.69334412 255.49827576]
[68.04119110 263.71929932]
[53.69208527 268.38467407]
[38.62438202 269.17630005]
[23.86541176 266.04016113]
[10.42147255 259.19012451]
[-0.79080826 249.09324646]
[-9.00695801 236.43792725]
[-13.66678619 222.08702087]
[-14.45257759 207.01901245]
[-11.31075668 192.26124573]
[-4.45553684 178.81996155]
[5.64568090 167.61157227]
[18.30417824 159.40031433]
[32.65687943 154.74603271]
[47.72519302 153.96604919]
[62.48173523 157.11357117]
[69.29159546 143.74847412]
[76.10144806 130.38337708]
[71.22726440 125.81510925]
[67.21236420 120.47587585]
[64.17667389 114.52513123]
[62.21083450 108.14059448]
[61.37356949 101.51293945]
[61.68987656 94.84010315]
[63.15031052 88.32136536]
[65.71125793 82.15141296]
[69.29622650 76.51450348]
[59.37655258 65.26283264]
[45.81737518 65.95471191]
[34.53136063 58.76582718]
[29.57360840 46.54797363]
[32.56894302 33.90832138]
[23.00758171 22.35062408]
[7.23532200 19.41542435]
[-0.17619938 5.18697119]
[6.45850182 -9.41988659]
[22.04985046 -13.20001698]
[34.63750076 -3.25362730]
[34.56528091 12.78926373]
[44.12664032 24.34696198]
[60.84292603 25.15510559]
[72.08931732 37.99810791]
[70.62821960 55.34315872]
[80.54789734 66.59482574]
[107.83895874 62.14711380]
[131.11904907 77.06760406]
[144.69146729 70.68091583]
[158.26387024 64.29422760]
[171.83627319 57.90753937]
[185.40867615 51.52085114]
[198.98107910 45.13415909]
[208.17347717 32.25741577]
[222.98382568 33.83932495]
[236.55624390 27.45263481]
[241.99111938 12.85469437]
[255.84645081 6.57102728]
[269.72985840 11.84231472]
[283.30227661 5.45562506]
[288.73715210 -9.14231491]
[302.59246826 -15.42598248]
[316.47589111 -10.15469551]
[330.04827881 -16.54138374]
[336.81365967 -31.08817482]
[352.43829346 -34.72837830]
[364.93624878 -24.66954041]
[364.72021484 -8.62794113]
[351.95590210 1.09067607]
[336.43496704 -2.96897888]
[322.86257935 3.41771054]
[318.07455444 17.47510719]
[304.40118408 24.14546394]
[289.68896484 19.02803040]
[276.11654663 25.41472054]
[271.32852173 39.47211838]
[257.65515137 46.14247131]
[242.94293213 41.02503967]
[229.37052917 47.41173172]
[221.14892578 59.83165741]
[205.36776733 58.70656586]
[191.79536438 65.09325409]
[178.22296143 71.47994232]
[164.65055847 77.86663818]
[151.07815552 84.25332642]
[137.50573730 90.64001465]
[138.59928894 102.09403992]
[136.27302551 113.36254120]
[130.73306274 123.44714355]
[122.47023010 131.45439148]
[112.21658325 136.67486572]
[100.88056946 138.64601135]
[89.46654510 137.19323730]
[82.65669250 150.55833435]
[75.84683228 163.92343140]
[87.06690979 174.01165771]
[95.29283142 186.66062927]
[99.96373749 201.00793457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 96]
[20 95]
[21 94]
[30 47]
[31 46]
[35 43]
[36 42]
[49 87]
[50 86]
[51 85]
[52 84]
[53 83]
[54 82]
[56 80]
[57 79]
[60 76]
[61 75]
[64 72]
[65 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
