%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:01:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGAGGGGCCGGCGAGUAAAAAGGACGCAGAGGGGCGUGGGGAGCUUGCGGCACAGCUAGGGCAUCCCGGCGAGGAGCGCCGCCAGGCCCCGGGCCACAGCCGGGCCUGGCGGGGGGACC\
) } def
/len { sequence length } bind def

/coor [
[-39.82968140 121.72015381]
[-48.77954102 113.47009277]
[-63.77827835 113.66481781]
[-71.34275818 126.95864105]
[-84.45908356 134.63059998]
[-99.55413055 134.70672607]
[-112.57343292 127.26671600]
[-120.07014465 114.39562988]
[-135.06887817 114.59034729]
[-150.06761169 114.78507233]
[-165.06634521 114.97978973]
[-173.72718811 118.25231934]
[-180.45579529 114.97978973]
[-195.45452881 114.78507233]
[-210.45326233 114.59034729]
[-225.45199585 114.39562988]
[-240.45074463 114.20090485]
[-245.53736877 126.53659058]
[-254.51974487 136.36019897]
[-266.29501343 142.49819946]
[-279.42849731 144.22758484]
[-292.32855225 141.36097717]
[-303.43939209 134.26666260]
[-311.42874146 123.82138824]
[-315.34765625 111.30213165]
[-330.31607056 110.32918549]
[-345.28448486 109.35623169]
[-360.25289917 108.38328552]
[-371.96270752 118.99723816]
[-387.74368286 118.13891602]
[-398.23321533 106.31754303]
[-397.20809937 90.54653931]
[-385.27648926 80.18254852]
[-369.51721191 81.37435150]
[-359.27993774 93.41487122]
[-344.31155396 94.38781738]
[-329.34313965 95.36077118]
[-314.37472534 96.33372498]
[-306.58181763 81.45867920]
[-293.06250000 71.40536499]
[-276.46618652 68.20322418]
[-260.07110596 72.53323364]
[-247.13676453 83.58374786]
[-240.25601196 99.20217133]
[-225.25727844 99.39688873]
[-210.25854492 99.59161377]
[-195.25981140 99.78633118]
[-180.26107788 99.98105621]
[-165.26107788 99.98105621]
[-150.26232910 99.78633118]
[-135.26359558 99.59161377]
[-120.26486206 99.39688873]
[-113.10482025 86.33551788]
[-100.28305817 78.56002808]
[-85.19111633 78.24424744]
[-71.88005066 85.57311249]
[-63.97299957 98.66607666]
[-48.97426224 98.47135925]
[-34.47165298 88.68228149]
[-18.45591545 97.65504456]
[-3.46729016 97.07100677]
[4.64408731 84.60732269]
[18.70556259 79.24645233]
[33.39923477 83.24012756]
[43.03520966 95.25904083]
[58.02383423 94.67500305]
[73.01245880 94.09097290]
[88.00108337 93.50693512]
[101.64556885 87.27571106]
[111.90241241 76.33052826]
[122.15925598 65.38533783]
[132.41610718 54.44015121]
[133.33473206 38.42341995]
[146.51258850 29.27335167]
[161.84074402 34.00909424]
[167.56074524 48.99779510]
[159.28469849 62.74140167]
[143.36128235 64.69699860]
[133.10444641 75.64218140]
[122.84760284 86.58737183]
[112.59075165 97.53256226]
[116.44168091 112.02981567]
[130.77799988 116.44227600]
[145.11433411 120.85474396]
[159.45065308 125.26721191]
[173.78697205 129.67967224]
[188.12329102 134.09214783]
[202.45960999 138.50460815]
[216.79594421 142.91706848]
[231.13226318 147.32954407]
[237.84541321 146.19555664]
[243.25923157 148.37596130]
[246.08737183 152.36105347]
[260.17535400 157.51167297]
[274.26330566 162.66230774]
[290.31542969 159.30645752]
[301.04455566 171.70878601]
[295.41348267 187.11083984]
[279.21499634 189.66830444]
[269.11267090 176.75027466]
[255.02470398 171.59965515]
[240.93673706 166.44902039]
[226.71980286 161.66586304]
[212.38346863 157.25340271]
[198.04714966 152.84092712]
[183.71083069 148.42846680]
[169.37451172 144.01599121]
[155.03817749 139.60353088]
[140.70185852 135.19107056]
[126.36553955 130.77859497]
[112.02921295 126.36613464]
[88.58512115 108.49556732]
[73.59649658 109.07959747]
[58.60786819 109.66362762]
[43.61924362 110.24766541]
[34.94769669 122.97992706]
[20.60933304 128.10482788]
[6.17335129 123.85437012]
[-2.88325739 112.05963898]
[-17.87188339 112.64366913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 58]
[3 57]
[8 52]
[9 51]
[10 50]
[11 49]
[13 48]
[14 47]
[15 46]
[16 45]
[17 44]
[25 38]
[26 37]
[27 36]
[28 35]
[60 120]
[61 119]
[65 115]
[66 114]
[67 113]
[68 112]
[69 81]
[70 80]
[71 79]
[72 78]
[82 111]
[83 110]
[84 109]
[85 108]
[86 107]
[87 106]
[88 105]
[89 104]
[90 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
