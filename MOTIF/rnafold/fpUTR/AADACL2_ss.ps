%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAGAUGAUCAUAUCACCUGAGAGAGUUCCCAAGUCUACAAUUGCUCUACUAGUUACUAUUCAGUGUUUGUGAAAAAUUUUAAUCUCAGUACUGUGAAGAAGCUGGAAAAAGGGAUAUU\
) } def
/len { sequence length } bind def

/coor [
[91.15673828 268.37338257]
[85.75119019 282.61065674]
[75.01755524 293.41384888]
[60.81549072 298.91122437]
[45.60559082 298.15036011]
[32.02307129 291.26306152]
[22.42117500 279.44259644]
[18.46349335 264.73690796]
[20.83572006 249.69389343]
[29.12685013 236.91981506]
[41.90039444 228.62786865]
[56.94326401 226.25468445]
[60.79418945 211.75743103]
[64.64511871 197.26017761]
[68.49604797 182.76292419]
[72.34697723 168.26567078]
[71.00699615 160.90441895]
[76.49063110 153.44456482]
[80.71662140 139.05216980]
[84.94261169 124.65977478]
[78.88800049 119.72594452]
[74.37603760 113.35073853]
[71.73642731 105.99999237]
[71.16203308 98.21082306]
[56.94509506 93.42766571]
[42.72815323 88.64450836]
[28.51121330 83.86135101]
[14.29427338 79.07818604]
[4.85772848 90.94104767]
[-8.06868172 98.85835266]
[-22.92403030 101.87405396]
[-37.91445923 99.62398529]
[-51.22980499 92.37985992]
[-61.26217270 81.01643372]
[-66.80010986 66.90590668]
[-67.17487335 51.75218201]
[-62.34121704 37.38515091]
[-52.88282776 25.53970146]
[-39.94184875 17.64623070]
[-25.08096886 14.65791225]
[-10.09470940 16.93560028]
[3.20726347 24.20425415]
[13.21867275 35.58614731]
[18.73059273 49.70685959]
[19.07743263 64.86125183]
[33.29437256 69.64440918]
[47.51131439 74.42756653]
[61.72825241 79.21072388]
[75.94519043 83.99388885]
[95.88803864 71.40068054]
[118.57097626 77.86522675]
[130.86445618 69.27043915]
[143.15794373 60.67565918]
[155.45141602 52.08087540]
[167.74490356 43.48609161]
[180.03839111 34.89131165]
[186.91517639 20.64278793]
[201.77935791 19.69146919]
[214.07284546 11.09668636]
[214.48423767 -4.30256510]
[223.77569580 -16.36581802]
[238.21798706 -20.59478378]
[252.21360779 -15.56879139]
[264.50711060 -24.16357422]
[276.80056763 -32.75835800]
[289.09405518 -41.35313797]
[292.14172363 -53.96734238]
[302.65902710 -60.86004639]
[314.64843750 -58.75831604]
[327.16088867 -67.03105164]
[339.67337036 -75.30379486]
[346.91772461 -89.36898804]
[361.80160522 -89.93410492]
[374.31408691 -98.20684052]
[373.30410767 -113.53248596]
[380.10665894 -127.30278015]
[392.89187622 -135.81356812]
[408.22061157 -136.77549744]
[421.96951294 -129.92982483]
[430.44018555 -117.11798096]
[431.35406494 -101.78630066]
[424.46533203 -88.05892944]
[411.62701416 -79.62845612]
[396.29254150 -78.76263428]
[382.58682251 -85.69437408]
[370.07437134 -77.42163849]
[363.72497559 -63.94816208]
[347.94610596 -62.79132843]
[335.43365479 -54.51858902]
[322.92117310 -46.24584961]
[316.01318359 -30.17005348]
[297.68884277 -29.05965614]
[285.39535522 -20.46487427]
[273.10186768 -11.87009144]
[260.80841064 -3.27530885]
[260.72305298 11.59515572]
[251.79208374 23.70721054]
[237.27183533 28.29151726]
[222.66763306 23.39016914]
[210.37414551 31.98495102]
[204.37667847 45.61871719]
[188.63316345 47.18479156]
[176.33969116 55.77957535]
[164.04620361 64.37435913]
[151.75271606 72.96913910]
[139.45924377 81.56392670]
[127.16575623 90.15870667]
[128.86947632 101.17601013]
[126.27529907 112.01824188]
[119.76943970 121.07128143]
[110.32044220 126.98736572]
[99.33500671 128.88575745]
[95.10901642 143.27815247]
[90.88302612 157.67054749]
[86.84423065 172.11659241]
[82.99330139 186.61384583]
[79.14237213 201.11109924]
[75.29144287 215.60835266]
[71.44051361 230.10560608]
[83.32275391 239.63095093]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 119]
[13 118]
[14 117]
[15 116]
[16 115]
[18 114]
[19 113]
[20 112]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
[56 102]
[58 100]
[59 99]
[63 95]
[64 94]
[65 93]
[66 92]
[69 90]
[70 89]
[71 88]
[73 86]
[74 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
