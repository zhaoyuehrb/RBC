%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCACGUGUCCCCCCCGCGGGGGGCGGCCCUUGAGGGCGGCGCUUCCGGUCGGCGGAGCCUGGUGGCCGCAGCGGCGGUGGCGACGACGGCCGAGACGUGGGG\
) } def
/len { sequence length } bind def

/coor [
[88.45166779 252.98591614]
[96.69087219 238.80679321]
[96.23783112 223.81364441]
[95.78478241 208.82048035]
[95.33174133 193.82733154]
[94.87869263 178.83416748]
[94.42565155 163.84101868]
[86.30747986 151.35324097]
[93.62444305 137.32566833]
[93.17139435 122.33251953]
[79.99635315 115.16186523]
[67.15962982 122.92193604]
[54.32291412 130.68200684]
[41.48619461 138.44206238]
[28.64947510 146.20213318]
[18.22264290 159.57066345]
[2.49012828 153.25209045]
[4.20657492 136.38525391]
[20.88940811 133.36541748]
[33.72612762 125.60534668]
[46.56284714 117.84528351]
[59.39956665 110.08521271]
[72.23628235 102.32514954]
[71.10457611 87.36789703]
[57.24637985 81.62764740]
[41.53574753 83.49488068]
[32.73822021 71.47603607]
[18.88002586 65.73578644]
[5.02183294 59.99553299]
[-8.83635998 54.25527954]
[-25.01573181 56.93108749]
[-35.21220779 44.08726120]
[-28.93652534 28.93642426]
[-12.64456940 27.06446075]
[-3.09610868 40.39708710]
[10.76208401 46.13734055]
[24.62027740 51.87759018]
[38.47846985 57.61784363]
[53.19787216 55.34002304]
[62.98663330 67.76945496]
[76.84482574 73.50970459]
[86.07000732 71.68624878]
[94.55837250 72.60922241]
[101.57798004 75.75405884]
[106.62103271 80.42081451]
[109.44042969 85.81463623]
[110.06015015 91.13206482]
[108.75901031 95.64517212]
[122.04084778 88.67432404]
[135.32269287 81.70347595]
[148.60453796 74.73262787]
[161.88636780 67.76178741]
[170.51011658 54.49748611]
[185.37525940 55.43386459]
[198.65710449 48.46301651]
[203.45204163 33.64254761]
[217.02101135 26.76232338]
[231.12051392 31.42490005]
[244.40235901 24.45405388]
[257.68420410 17.48320580]
[259.65829468 13.80704308]
[262.37387085 11.11575603]
[265.46389771 9.51774883]
[268.56213379 9.00165462]
[271.33886719 9.44560814]
[273.53192139 10.63664818]
[287.71142578 5.74360657]
[301.89089966 0.85056466]
[316.07040405 -4.04247713]
[330.24990845 -8.93551922]
[340.58596802 -21.66729927]
[356.73516846 -18.81506729]
[362.08459473 -3.31295705]
[351.13125610 8.89179134]
[335.14294434 5.24397802]
[320.96343994 10.13702011]
[306.78396606 15.03006172]
[292.60446167 19.92310333]
[278.42495728 24.81614494]
[264.65505981 30.76504517]
[251.37319946 37.73589325]
[238.09136963 44.70674133]
[233.91915894 58.95904922]
[220.54878235 66.21768188]
[205.62794495 61.74485779]
[192.34609985 68.71570587]
[184.67236328 81.48140717]
[168.85722351 81.04362488]
[155.57537842 88.01447296]
[142.29353333 94.98532104]
[129.01170349 101.95616913]
[115.72985840 108.92701721]
[108.16455078 121.87947083]
[108.61759949 136.87263489]
[116.76817322 150.43281555]
[109.41880798 163.38796997]
[109.87184906 178.38113403]
[110.32489777 193.37428284]
[110.77793884 208.36744690]
[111.23098755 223.36059570]
[111.68403625 238.35375977]
[120.76432037 252.00953674]
[113.23680115 266.57897949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 101]
[3 100]
[4 99]
[5 98]
[6 97]
[7 96]
[9 94]
[10 93]
[11 23]
[12 22]
[13 21]
[14 20]
[15 19]
[24 41]
[25 40]
[27 38]
[28 37]
[29 36]
[30 35]
[48 92]
[49 91]
[50 90]
[51 89]
[52 88]
[54 86]
[55 85]
[58 82]
[59 81]
[60 80]
[66 79]
[67 78]
[68 77]
[69 76]
[70 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
