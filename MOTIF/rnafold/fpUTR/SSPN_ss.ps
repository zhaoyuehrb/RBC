%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUCGAAUACCAGGGCAGGCCGAGCCAGCCGUGCGCCGCGCUCCAGGGCCCAGGGCGCCGCACACGCACCCACCCACCCACCCAGCCUCGCAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[58.99955750 172.11763000]
[66.60721588 185.04525757]
[69.96145630 199.66540527]
[68.74985504 214.61639404]
[63.08526993 228.50569153]
[53.49528885 240.03965759]
[40.87311935 248.14402771]
[26.39437294 252.06396484]
[11.40759182 251.43438721]
[-2.69137168 246.31390381]
[-14.58935165 237.17945862]
[-23.17818069 224.88182068]
[-27.65790367 210.56637573]
[-27.61128426 195.56643677]
[-23.04266357 181.27911377]
[-14.37755775 169.03509521]
[-2.42235398 159.97442627]
[-17.42053986 160.20770264]
[-32.41872406 160.44097900]
[-46.09690094 168.39196777]
[-58.94296265 160.85353088]
[-73.94114685 161.08680725]
[-88.93933105 161.32008362]
[-104.68251801 167.61201477]
[-115.08670807 154.22586060]
[-105.10385895 140.52261353]
[-89.17260742 146.32189941]
[-74.17442322 146.08862305]
[-59.17623901 145.85534668]
[-46.57083511 137.92105103]
[-32.65200424 145.44279480]
[-17.65381622 145.20951843]
[-2.65563107 144.97624207]
[1.05305362 141.79708862]
[6.17599154 140.27922058]
[11.93089867 141.02723694]
[24.99834251 133.66232300]
[38.06578445 126.29741669]
[51.13322830 118.93250275]
[58.42178726 105.94303894]
[74.24295807 105.90768433]
[87.31040192 98.54277802]
[100.02011871 90.57640839]
[112.34445190 82.02592468]
[124.66878510 73.47544098]
[124.77015686 56.64642715]
[134.73097229 43.28679657]
[150.51516724 38.48239517]
[165.91868591 43.91706467]
[177.97113037 34.98743057]
[190.02359009 26.05779648]
[187.95515442 9.73821640]
[194.31463623 -5.33175659]
[207.30033875 -15.12336063]
[223.35305786 -17.06999588]
[238.13125610 -10.73943138]
[249.90016174 -20.03957558]
[261.66906738 -29.33971786]
[267.69940186 -43.96659851]
[282.48236084 -45.78698730]
[294.25128174 -55.08713150]
[294.52969360 -70.72223663]
[304.83200073 -82.48645020]
[320.29373169 -84.82508087]
[333.61431885 -76.63388824]
[338.50421143 -61.78050995]
[332.65454102 -47.27825165]
[318.82736206 -39.97463989]
[303.55142212 -43.31821442]
[291.78250122 -34.01807404]
[286.59396362 -20.05640030]
[270.96920776 -17.57080460]
[259.20031738 -8.27066040]
[247.43139648 1.02948236]
[250.29603577 14.47912979]
[247.03370667 27.90634727]
[238.23281860 38.64507675]
[225.58737183 44.53742218]
[211.57099915 44.36714935]
[198.95323181 38.11025238]
[186.90077209 47.03988266]
[174.84831238 55.96951675]
[176.20077515 69.34963226]
[170.67980957 81.73165131]
[159.64706421 89.79618835]
[145.95710754 91.32265472]
[133.21926880 85.79977417]
[120.89493561 94.35025787]
[108.57060242 102.90074158]
[107.33598328 106.76546478]
[104.32125854 110.01837158]
[99.86514282 111.84102631]
[94.67530823 111.61022186]
[81.60786438 118.97512817]
[73.38463593 132.49137878]
[58.49813843 131.99995422]
[45.43069839 139.36485291]
[32.36325455 146.72976685]
[19.29580879 154.09468079]
[34.18840790 155.88645935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 33]
[18 32]
[19 31]
[21 29]
[22 28]
[23 27]
[36 99]
[37 98]
[38 97]
[39 96]
[41 94]
[42 93]
[43 89]
[44 88]
[45 87]
[49 82]
[50 81]
[51 80]
[56 74]
[57 73]
[58 72]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
