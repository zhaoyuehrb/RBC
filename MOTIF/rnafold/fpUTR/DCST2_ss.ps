%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:20:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUACGGUGAGAAAUUCCAGGAGCACAGAAGUCAGCGGGCAUCUCCUGGAGACAGGCAGACAUUUGGUCUCAGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[122.78289795 145.42974854]
[114.36274719 148.75073242]
[105.48703003 150.52539062]
[96.43727112 150.69743347]
[87.50051880 149.26139832]
[78.96023560 146.26284790]
[71.08731079 141.79687500]
[64.13146973 136.00514221]
[58.31334305 129.07138062]
[53.81747818 121.21549225]
[50.78647995 112.68666840]
[49.31648254 103.75543976]
[49.45411682 94.70508575]
[51.19501877 85.82268524]
[54.48396683 77.38997650]
[59.21664047 69.67443848]
[65.24291992 62.92079163]
[72.37165833 57.34326172]
[66.16449738 43.68782043]
[59.95734024 30.03237534]
[53.75017929 16.37693024]
[47.54301834 2.72148681]
[41.33585739 -10.93395710]
[35.12869644 -24.58940125]
[28.92153549 -38.24484634]
[19.29620934 -38.55647278]
[10.39407349 -42.11220551]
[3.26901746 -48.45853806]
[-1.24658465 -56.81358719]
[-2.63905358 -66.16332245]
[-0.77168828 -75.38462830]
[4.10245514 -83.38019562]
[11.37438297 -89.20912170]
[7.91514540 -103.80479431]
[4.45590734 -118.40046692]
[-7.18531418 -129.95095825]
[-2.74183798 -145.73663330]
[13.21526814 -149.51853943]
[24.27070236 -137.40617371]
[19.05158043 -121.85970306]
[22.51081848 -107.26403046]
[25.97005653 -92.66835785]
[45.03586578 -83.83561707]
[52.11499023 -63.76954651]
[42.57698059 -44.45200729]
[48.78414154 -30.79656219]
[54.99130249 -17.14111900]
[61.19846344 -3.48567414]
[67.40562439 10.16977024]
[73.61278534 23.82521439]
[79.81994629 37.48065948]
[86.02710724 51.13610077]
[109.19632721 50.01650238]
[130.44979858 59.30931091]
[145.36006165 77.07867432]
[150.82106018 99.62293243]
[145.69517517 122.24574280]
[158.06530762 130.72984314]
[170.43542480 139.21394348]
[183.56880188 146.46063232]
[197.34204102 152.40184021]
[211.11528015 158.34303284]
[224.88851929 164.28422546]
[240.26896667 159.72114563]
[253.34309387 169.01882935]
[254.08154297 185.04487610]
[241.91786194 195.50547791]
[226.18296814 192.37615967]
[218.94732666 178.05746460]
[205.17408752 172.11627197]
[191.40084839 166.17507935]
[177.62760925 160.23387146]
[175.30072021 161.36866760]
[172.37821960 161.65124512]
[169.17810059 160.85459900]
[166.09262085 158.86828613]
[163.54681396 155.72021484]
[161.95132446 151.58407593]
[149.58119202 143.09997559]
[137.21107483 134.61585999]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 52]
[19 51]
[20 50]
[21 49]
[22 48]
[23 47]
[24 46]
[25 45]
[33 42]
[34 41]
[35 40]
[57 80]
[58 79]
[59 78]
[60 72]
[61 71]
[62 70]
[63 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
