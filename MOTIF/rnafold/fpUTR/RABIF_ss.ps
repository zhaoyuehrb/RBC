%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:34:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAGAGUCCAGAGCGGGGAAGCGGGCGCCUGCGCAGAGACAUAGUGACCGUCCGCUCGCCGCCCCGCCUCUGCCAAGCCGCGCCAGCGCAGUGAAUAACGAGCCAGCAGAGACAGCGUCUGCGCAGCCGUGGCUGAGGAGCCUGUGGCGGCAGCGGCG\
) } def
/len { sequence length } bind def

/coor [
[-127.97265625 145.17114258]
[-137.48904419 133.74414062]
[-152.44281006 134.92102051]
[-167.39657593 136.09791565]
[-182.35032654 137.27479553]
[-197.30409241 138.45169067]
[-212.25785828 139.62857056]
[-201.82984924 150.41081238]
[-201.89886475 165.41065979]
[-212.42562866 176.09649658]
[-227.42276001 176.39044189]
[-238.36016846 166.12530518]
[-239.01689148 151.13967896]
[-229.02073669 139.95774841]
[-244.00918579 139.36885071]
[-258.99761963 138.77995300]
[-273.98605347 138.19105530]
[-288.97448730 137.60215759]
[-303.96292114 137.01325989]
[-315.51516724 147.46234131]
[-330.70718384 146.65159607]
[-340.59759521 135.57388306]
[-355.58602905 134.98498535]
[-370.57446289 134.39608765]
[-385.56289673 133.80718994]
[-400.55133057 133.21829224]
[-415.53976440 132.62939453]
[-430.52819824 132.04049683]
[-439.51599121 147.09043884]
[-454.79507446 155.50044250]
[-472.14120483 155.04759216]
[-486.80993652 145.94534302]
[-494.83441162 130.76060486]
[-509.83441162 130.76060486]
[-524.83441162 130.76060486]
[-533.08837891 143.79423523]
[-547.08819580 150.27565002]
[-562.36657715 148.13667297]
[-574.04821777 138.05982971]
[-578.40557861 123.26059723]
[-574.04821777 108.46137238]
[-562.36657715 98.38452911]
[-547.08819580 96.24554443]
[-533.08837891 102.72696686]
[-524.83441162 115.76059723]
[-509.83441162 115.76059723]
[-494.83441162 115.76059723]
[-489.70239258 104.15416718]
[-480.51568604 95.33129120]
[-468.62432861 90.63775635]
[-455.79452515 90.80891418]
[-443.94638062 95.85471344]
[-434.86669922 105.05286407]
[-429.93930054 117.05207062]
[-414.95086670 117.64096832]
[-399.96243286 118.22986603]
[-384.97399902 118.81875610]
[-369.98556519 119.40765381]
[-354.99713135 119.99655151]
[-340.00869751 120.58544922]
[-329.27963257 110.31788635]
[-314.07086182 110.70159149]
[-303.37402344 122.02483368]
[-288.38558960 122.61373138]
[-273.39715576 123.20262909]
[-258.40872192 123.79152679]
[-243.42028809 124.38041687]
[-228.43183899 124.96931458]
[-213.43473816 124.67481232]
[-198.48097229 123.49792480]
[-183.52722168 122.32103729]
[-168.57345581 121.14414978]
[-153.61968994 119.96726990]
[-138.66593933 118.79038239]
[-131.05427551 106.01538086]
[-117.21603394 100.10210419]
[-102.37579346 103.51100922]
[-92.27160645 115.13906860]
[-77.31784821 113.96218109]
[-62.36408997 112.78529358]
[-47.41032791 111.60840607]
[-32.45656967 110.43151855]
[-17.51508522 109.10788727]
[-2.58731341 107.63762665]
[12.34045792 106.16737366]
[21.56154823 94.52661896]
[36.67948532 92.82292175]
[48.82685471 102.57377625]
[63.75462723 101.10351562]
[78.68239594 99.63326263]
[93.61016846 98.16300201]
[91.67607880 95.13812256]
[90.99684143 91.14091492]
[91.90435791 86.63925171]
[94.56935883 82.19664001]
[98.97694397 78.41989136]
[104.91831207 75.90129089]
[111.99978638 75.15998077]
[119.66877747 76.58763885]
[134.38055420 73.66128540]
[149.09233093 70.73493195]
[156.94679260 65.96855927]
[164.12155151 67.89852905]
[178.88793945 65.26158142]
[188.60008240 50.74173355]
[205.47206116 47.77109528]
[219.01554871 57.70217514]
[233.72732544 54.77581787]
[248.43910217 51.84946442]
[263.15087891 48.92311096]
[277.86267090 45.99675369]
[285.22503662 32.20075989]
[299.75204468 26.41284561]
[314.58450317 31.36589241]
[322.71893311 44.72122192]
[320.31454468 60.17285156]
[308.50662231 70.42500305]
[292.87045288 70.63691711]
[280.78903198 60.70853424]
[266.07723999 63.63488770]
[251.36546326 66.56124115]
[236.65368652 69.48759460]
[221.94189453 72.41395569]
[216.33314514 84.04783630]
[204.86892700 90.40784454]
[191.64212036 88.96627045]
[181.52488708 80.02798462]
[166.75848389 82.66492462]
[152.01869202 85.44670868]
[137.30691528 88.37306213]
[122.59513092 91.29942322]
[118.95043182 105.84989166]
[130.54559326 115.36579132]
[142.14074707 124.88168335]
[153.73590088 134.39758301]
[169.99534607 136.53361511]
[176.02438354 151.78428650]
[165.62088013 164.46099854]
[149.48704529 161.52304077]
[144.22000122 145.99273682]
[132.62484741 136.47683716]
[121.02968597 126.96094513]
[109.43453217 117.44504547]
[95.08042145 113.09077454]
[80.15265656 114.56103516]
[65.22488403 116.03128815]
[50.29711151 117.50154877]
[40.28544998 129.43487549]
[25.12562180 130.71327209]
[13.81071472 121.09514618]
[-1.11705625 122.56539917]
[-16.04482651 124.03565979]
[-24.32865143 128.00920105]
[-31.27968407 125.38528442]
[-46.23344421 126.56217194]
[-61.18720245 127.73905182]
[-76.14096069 128.91593933]
[-91.09472656 130.09283447]
[-99.25547791 143.15837097]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[7 69]
[14 68]
[15 67]
[16 66]
[17 65]
[18 64]
[19 63]
[22 60]
[23 59]
[24 58]
[25 57]
[26 56]
[27 55]
[28 54]
[33 47]
[34 46]
[35 45]
[78 158]
[79 157]
[80 156]
[81 155]
[82 154]
[83 152]
[84 151]
[85 150]
[88 147]
[89 146]
[90 145]
[91 144]
[99 131]
[100 130]
[101 129]
[103 128]
[104 127]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
[132 143]
[133 142]
[134 141]
[135 140]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
