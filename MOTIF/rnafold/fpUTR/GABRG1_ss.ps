%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUGCUGGGAGUCGCAUCCUACCUGUUUGGGAGGUGCACUGCCUUUCCACACUCUCCCUUCUGUACUCAGCCAGCUGCUGCUGAGGUGGGAGGAAAAGUCCUGGCUGGGAGAAUUGAGCUAGUGCAGCACACGUAAAAAAGCGAUUCCG\
) } def
/len { sequence length } bind def

/coor [
[254.66154480 365.58813477]
[248.61236572 379.60134888]
[237.07652283 389.59570312]
[222.34446716 393.58679199]
[207.34123230 390.78219604]
[195.04573059 381.73876953]
[187.89926147 368.25210571]
[187.32073975 352.99993896]
[193.42503357 339.01065063]
[205.00015259 329.06179810]
[219.74781799 325.12875366]
[222.50405884 310.38415527]
[225.26029968 295.63955688]
[228.01655579 280.89495850]
[230.77279663 266.15036011]
[233.52903748 251.40577698]
[236.28527832 236.66117859]
[239.04151917 221.91658020]
[213.08587646 204.56791687]
[214.89265442 176.50852966]
[204.12397766 166.06651306]
[193.35530090 155.62451172]
[182.58662415 145.18249512]
[171.81794739 134.74049377]
[161.04927063 124.29847717]
[150.28057861 113.85646820]
[139.51190186 103.41445923]
[133.20858765 123.23655701]
[117.48229218 137.53045654]
[96.26764679 142.10905457]
[75.18645477 135.29658508]
[60.05827332 118.49855042]
[45.91095734 113.51322937]
[31.76364136 108.52790070]
[17.61632538 103.54257965]
[3.46900892 98.55725861]
[-10.72874355 93.71744537]
[-24.97543526 89.02364349]
[-39.22212601 84.32984161]
[-49.42736816 95.63351440]
[-63.35056686 101.80314636]
[-78.57944489 101.76982117]
[-92.47550964 95.53931427]
[-102.63118744 84.19108582]
[-107.28693390 69.69129944]
[-105.63612366 54.55212021]
[-97.96475983 41.39650726]
[-85.60196686 32.50374985]
[-70.68965912 29.41457176]
[-55.81149292 32.66419220]
[-43.54519653 41.68959427]
[-36.01597977 54.92707062]
[-34.52832794 70.08315277]
[-20.28163528 74.77695465]
[-6.03494310 79.47074890]
[1.34766936 78.57118225]
[8.45433044 84.40994263]
[22.60164833 89.39526367]
[36.74896240 94.38058472]
[50.89628220 99.36590576]
[65.04359436 104.35123444]
[70.37405396 99.07522583]
[81.03495789 88.52320862]
[86.36541748 83.24720001]
[81.52559662 69.04944611]
[76.68578339 54.85169601]
[63.99286652 44.46796417]
[66.90565491 28.32957268]
[82.42772675 23.03831482]
[94.59130096 34.03738403]
[90.88353729 50.01187897]
[95.72335052 64.20963287]
[100.56316376 78.40738678]
[115.51326752 77.17671204]
[130.46203613 75.94615936]
[132.91496277 61.14808273]
[135.36788940 46.35000229]
[137.82081604 31.55192184]
[131.55068970 16.39879036]
[141.75186157 3.55869341]
[157.93025208 6.24042225]
[163.44291687 21.68524361]
[152.61889648 34.00485229]
[150.16596985 48.80292892]
[147.71304321 63.60100937]
[145.26011658 78.39908600]
[149.95391846 92.64578247]
[160.72259521 103.08779144]
[171.49127197 113.52980042]
[182.25994873 123.97180939]
[193.02862549 134.41381836]
[203.79731750 144.85581970]
[214.56599426 155.29783630]
[225.33467102 165.73983765]
[233.27461243 161.86784363]
[242.32673645 160.72915649]
[251.54621887 162.62937927]
[259.91091919 167.54705811]
[266.43432617 175.11723328]
[270.28060913 184.65397644]
[270.86813354 195.21089172]
[285.86734009 195.05690002]
[299.58734131 187.17832947]
[312.39337158 194.78456116]
[327.39257812 194.63055420]
[342.39178467 194.47656250]
[357.39099121 194.32257080]
[372.39022827 194.16856384]
[387.38943481 194.01457214]
[401.10943604 186.13600159]
[413.91546631 193.74223328]
[428.91467285 193.58822632]
[442.74880981 184.78204346]
[457.16525269 192.59857178]
[457.33361816 208.99685669]
[443.08068848 217.10774231]
[429.06866455 208.58744812]
[414.06945801 208.74143982]
[401.42230225 216.60899353]
[387.54342651 209.01377869]
[372.54421997 209.16777039]
[357.54501343 209.32177734]
[342.54577637 209.47576904]
[327.54656982 209.62977600]
[312.54736328 209.78376770]
[299.90020752 217.65132141]
[286.02133179 210.05610657]
[271.02212524 210.21009827]
[284.25900269 217.26596069]
[297.49588013 224.32182312]
[312.27905273 226.86297607]
[324.79672241 235.12783813]
[332.94070435 247.72447205]
[335.33944702 262.53143311]
[331.58895874 277.05499268]
[322.32086182 288.84915161]
[309.09606934 295.92761230]
[294.14181519 297.09826660]
[279.97662354 292.16390991]
[268.98617554 281.95559692]
[263.02136230 268.19256592]
[263.08633423 253.19485474]
[258.43621826 238.93383789]
[253.78611755 224.67282104]
[251.02987671 239.41741943]
[248.27363586 254.16201782]
[245.51739502 268.90661621]
[242.76113892 283.65121460]
[240.00489807 298.39581299]
[237.24865723 313.14041138]
[234.49241638 327.88500977]
[246.82342529 336.87994385]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 151]
[12 150]
[13 149]
[14 148]
[15 147]
[16 146]
[17 145]
[18 144]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[27 87]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 55]
[38 54]
[39 53]
[64 73]
[65 72]
[66 71]
[75 86]
[76 85]
[77 84]
[78 83]
[101 128]
[102 127]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
[109 120]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
