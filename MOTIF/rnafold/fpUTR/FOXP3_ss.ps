%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACACACUCAUCGAAAAAAAUUUGGAUUAUUAGAAGAGAGAGGUCUGCGGCUUCCACACCGUACAGCGUGGUUUUUCUUCUCGGUAUAAAAGCAAAGUUGUUUUUGAUACGUGACAGUUUCCCACAAGCCAGGCUGAUCCUUUUCUGUCAGUCCACUUCACCAAGCCUGCCCUUGGACAAGGACCCG\
) } def
/len { sequence length } bind def

/coor [
[86.38492584 479.15451050]
[71.63148499 481.86300659]
[56.63252640 481.68612671]
[41.94705200 478.63049316]
[28.12238121 472.80996704]
[15.67373848 464.44149780]
[5.06507730 453.83697510]
[-3.30822873 441.39157104]
[-9.13411427 427.56915283]
[-12.19545364 412.88488770]
[-12.37815380 397.88598633]
[-9.67540646 383.13150024]
[-4.18793917 369.17126465]
[3.87973475 356.52560425]
[14.22694016 345.66580200]
[26.46804810 336.99658203]
[40.14684296 330.84106445]
[54.75352478 327.42861938]
[69.74372101 326.88644409]
[84.55876923 329.23477173]
[98.64650726 334.38601685]
[111.48191071 342.14825439]
[122.58661652 352.23217773]
[131.54306030 364.25585938]
[129.30743408 349.42340088]
[127.07179260 334.59091187]
[124.83615875 319.75845337]
[122.60052490 304.92599487]
[120.36489105 290.09353638]
[108.26554108 281.48300171]
[105.78700256 266.47262573]
[114.90056610 253.84008789]
[112.66493225 239.00762939]
[110.42929840 224.17517090]
[108.19366455 209.34269714]
[105.95803070 194.51023865]
[103.72239685 179.67778015]
[101.48676300 164.84532166]
[99.25112915 150.01284790]
[95.13753510 143.85563660]
[97.10372925 134.91548157]
[95.11494446 120.04790497]
[88.18574524 118.60409546]
[81.74608612 114.70822906]
[76.67282104 108.55397034]
[73.75806427 100.64827728]
[73.59831238 91.77300262]
[59.15894699 87.71039581]
[44.71958160 83.64778900]
[30.28021812 79.58518219]
[15.84085560 75.52257538]
[3.74491882 85.24203491]
[-11.75545406 85.96180725]
[-24.70005417 77.40511322]
[-30.11141777 62.86218643]
[-25.90876579 47.92507172]
[-13.70810318 38.33740234]
[1.79916561 37.78582382]
[14.65017986 46.48243713]
[19.90346146 61.08320999]
[34.34282684 65.14582062]
[48.78218842 69.20842743]
[63.22155380 73.27103424]
[77.66091919 77.33364105]
[90.52484131 69.61875916]
[93.74100494 54.96760178]
[96.95716095 40.31644821]
[100.17332458 25.66529465]
[95.57486725 10.52710533]
[105.86108398 -0.24521710]
[109.07724762 -14.89637089]
[112.29340363 -29.54752541]
[115.50956726 -44.19868088]
[118.72572327 -58.84983444]
[121.94188690 -73.50098419]
[116.97870636 -59.34589005]
[105.75039673 -49.39977646]
[91.09983826 -46.18089294]
[76.73638916 -50.50422287]
[66.29669189 -61.27515030]
[62.42397308 -75.76659393]
[66.09875488 -90.30950165]
[76.39061737 -101.22176361]
[90.69378662 -105.74052429]
[105.38813019 -102.72107697]
[107.12952423 -117.61965179]
[108.87091064 -132.51823425]
[110.61230469 -147.41680908]
[112.22982025 -162.32934570]
[113.72333527 -177.25480652]
[115.21685791 -192.18026733]
[116.71037292 -207.10572815]
[118.20388794 -222.03118896]
[119.69741058 -236.95664978]
[121.19092560 -251.88211060]
[113.95663452 -266.59933472]
[123.30854034 -280.07058716]
[139.62619019 -278.43774414]
[146.12339783 -263.38058472]
[136.11639404 -250.38859558]
[134.62286377 -235.46313477]
[133.12934875 -220.53767395]
[131.63583374 -205.61221313]
[130.14231873 -190.68675232]
[128.64880371 -175.76127625]
[127.15528107 -160.83581543]
[129.62232971 -153.85394287]
[125.51087952 -145.67541504]
[123.76949310 -130.77684021]
[122.02809906 -115.87825775]
[120.28670502 -100.97968292]
[133.69119263 -94.24769592]
[144.60179138 -104.54132080]
[155.51240540 -114.83494568]
[152.57189941 -129.97949219]
[158.30717468 -144.30114746]
[170.88810730 -153.22996521]
[186.30018616 -153.91676331]
[199.62544250 -146.14239502]
[206.61186218 -132.38763428]
[205.03010559 -117.04156494]
[195.38488770 -105.00108337]
[180.75396729 -100.10824585]
[165.80603027 -103.92433929]
[154.89541626 -93.63071442]
[143.98481750 -83.33709717]
[136.59303284 -70.28482819]
[133.37687683 -55.63367462]
[130.16072083 -40.98252106]
[126.94455719 -26.33136559]
[123.72840118 -11.68021202]
[120.51223755 2.97094226]
[125.34073639 17.06118393]
[114.82447815 28.88145447]
[111.60831451 43.53260803]
[108.39215851 58.18376160]
[105.17599487 72.83491516]
[123.84210205 96.19291687]
[109.98251343 118.05912018]
[111.97130585 132.92669678]
[114.08358765 147.77722168]
[116.31922150 162.60968018]
[118.55485535 177.44213867]
[120.79048920 192.27461243]
[123.02612305 207.10707092]
[125.26175690 221.93952942]
[127.49739075 236.77198792]
[129.73303223 251.60446167]
[142.16520691 260.98947144]
[144.22116089 276.06356812]
[135.19735718 287.85791016]
[137.43298340 302.69036865]
[139.66862488 317.52282715]
[141.90425110 332.35528564]
[144.13989258 347.18774414]
[146.37551880 362.02020264]
[152.20204163 375.84234619]
[161.25910950 387.79934692]
[170.31617737 399.75634766]
[185.72280884 402.05273438]
[194.73762512 414.30783081]
[192.45341492 428.98156738]
[201.51048279 440.93853760]
[210.56755066 452.89553833]
[219.62461853 464.85250854]
[228.68168640 476.80950928]
[244.36990356 478.72146606]
[254.04525757 491.21798706]
[251.96754456 506.88510132]
[239.36943054 516.42779541]
[223.72515869 514.18457031]
[214.31619263 501.48626709]
[216.72470093 485.86657715]
[207.66763306 473.90957642]
[198.61056519 461.95260620]
[189.55349731 449.99560547]
[180.49642944 438.03860474]
[165.75250244 436.26321411]
[156.39701843 424.26614380]
[158.35919189 408.81338501]
[149.30212402 396.85641479]
[140.24505615 384.89941406]
[142.59912109 399.71356201]
[142.06277466 414.70394897]
[138.65600586 429.31198120]
[132.50578308 442.99316406]
[123.84132385 455.23764038]
[112.98553467 465.58905029]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[24 156]
[25 155]
[26 154]
[27 153]
[28 152]
[29 151]
[32 148]
[33 147]
[34 146]
[35 145]
[36 144]
[37 143]
[38 142]
[39 141]
[41 140]
[42 139]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[65 137]
[66 136]
[67 135]
[68 134]
[70 132]
[71 131]
[72 130]
[73 129]
[74 128]
[75 127]
[85 111]
[86 110]
[87 109]
[88 108]
[89 106]
[90 105]
[91 104]
[92 103]
[93 102]
[94 101]
[95 100]
[112 126]
[113 125]
[114 124]
[157 182]
[158 181]
[159 180]
[162 177]
[163 176]
[164 175]
[165 174]
[166 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
