%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCCGGCUCCAGCUCCGCCGCCAGCUCCAGCCUUUGCUCCCCCUCCCAAAGUCCCCUCCCCGGAGCGGAGCGCACCUAGGGUCCCUCUUCCGUCCCCCCAGCCCAGCUACCCGUUCAGACCAGCAGCCUCGGGGGGCACCCCCCCGCCAGCCUGCCUCCCUCCCGCUCAGCCCUGCCAGGGUUCCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-56.54528809 188.35722351]
[-61.88359070 194.72789001]
[-68.32260895 199.96742249]
[-75.62745667 203.88961792]
[-83.53256989 206.35630798]
[-91.75142670 207.28208923]
[-99.98685455 206.63739014]
[-107.94185638 204.44934082]
[-115.33025360 200.80062866]
[-125.23549652 212.06500244]
[-135.14073181 223.32937622]
[-145.04597473 234.59375000]
[-144.21636963 250.14848328]
[-154.42216492 261.43106079]
[-169.25633240 262.12609863]
[-179.16157532 273.39047241]
[-189.06681824 284.65484619]
[-198.97206116 295.91921997]
[-195.43644714 311.02813721]
[-201.48786926 325.31658936]
[-214.79945374 333.29037476]
[-230.25260925 331.88342285]
[-241.90528870 321.63674927]
[-245.27679443 306.49035645]
[-239.07072449 292.26840210]
[-225.67341614 284.43948364]
[-210.23643494 286.01397705]
[-200.33119202 274.74960327]
[-190.42594910 263.48522949]
[-180.52070618 252.22085571]
[-181.72831726 237.41960144]
[-171.84346008 225.85481262]
[-156.31034851 224.68852234]
[-146.40510559 213.42413330]
[-136.49987793 202.15975952]
[-126.59462738 190.89538574]
[-132.39186096 181.36663818]
[-135.56539917 170.67393494]
[-135.90507507 159.52540588]
[-150.35165405 155.48852539]
[-164.79821777 151.45164490]
[-179.24479675 147.41474915]
[-193.69137573 143.37786865]
[-208.13795471 139.34098816]
[-219.74679565 144.98078918]
[-231.70190430 141.31221008]
[-237.74769592 130.82585144]
[-252.12771606 126.55793762]
[-266.50772095 122.29002380]
[-280.88775635 118.02210999]
[-290.14761353 130.04788208]
[-303.12841797 137.91319275]
[-318.07464600 140.55430603]
[-332.96487427 137.61404419]
[-345.78536987 129.49005127]
[-354.80227661 117.28103638]
[-358.79608154 102.63816071]
[-357.22671509 87.54175568]
[-350.30636597 74.03348541]
[-338.97100830 63.94023132]
[-324.75360107 58.62702560]
[-309.57696533 58.81243515]
[-295.49362183 64.47138214]
[-284.40820312 74.83854675]
[-277.81994629 88.51184845]
[-276.61984253 103.64208984]
[-262.23980713 107.91000366]
[-247.85980225 112.17791748]
[-233.47978210 116.44583130]
[-216.66529846 111.44041443]
[-204.10107422 124.89440918]
[-189.65449524 128.93128967]
[-175.20791626 132.96818542]
[-160.76133728 137.00506592]
[-146.31475830 141.04194641]
[-131.86819458 145.07882690]
[-116.52597046 127.34422302]
[-94.11647797 120.14694977]
[-71.14784241 125.67222595]
[-54.34005737 142.39649963]
[-40.18180847 137.44232178]
[-30.72421837 125.93565369]
[-15.14299679 128.68086243]
[-0.98474669 123.72666931]
[13.17350292 118.77248383]
[23.87920761 104.87395477]
[41.94063187 108.43131256]
[56.01765823 103.25083923]
[70.09468079 98.07036591]
[84.17170715 92.88988495]
[69.80863190 97.21446991]
[54.90355301 95.52968597]
[41.86819077 88.10813904]
[32.81175232 76.15067291]
[29.19962311 61.59208679]
[31.61626053 46.78803635]
[39.67064285 34.13391113]
[52.05952454 25.67721939]
[66.77831268 22.78630447]
[81.44541168 25.92893410]
[93.68760681 34.59661102]
[101.52404022 47.38685608]
[103.68672180 62.23012924]
[99.82456970 76.72702789]
[104.55119324 62.49119186]
[109.27781677 48.25535583]
[108.53054047 31.31788254]
[124.59922791 25.91105652]
[134.24301147 39.85501099]
[123.51364899 52.98197937]
[118.78702545 67.21781158]
[114.06040192 81.45365143]
[118.82996368 87.24168396]
[129.80297852 77.01462555]
[140.77601624 66.78756714]
[151.74903870 56.56051254]
[162.72206116 46.33345413]
[170.45465088 33.48015976]
[185.41378784 32.37382889]
[194.95307922 43.94974899]
[191.00804138 58.42167282]
[176.91326904 63.55501938]
[164.77722168 72.37070465]
[152.64117432 81.18638611]
[140.50512695 90.00206757]
[128.36906433 98.81774902]
[133.13862610 104.60578918]
[148.01547241 102.68762970]
[162.89233398 100.76947021]
[177.76918030 98.85131073]
[190.46662903 89.41281128]
[204.07882690 95.45906067]
[218.95568848 93.54090118]
[233.79988098 91.38454437]
[248.60760498 88.99054718]
[263.41534424 86.59654999]
[278.22305298 84.20255280]
[293.03079224 81.80855560]
[307.83850098 79.41455078]
[322.64624023 77.02055359]
[337.31735229 68.52379608]
[349.54342651 80.26941681]
[341.64132690 95.26919556]
[325.04022217 91.82828522]
[310.23251343 94.22228241]
[295.42477417 96.61627960]
[280.61706543 99.01027679]
[265.80932617 101.40427399]
[251.00160217 103.79827881]
[236.19387817 106.19227600]
[232.71620178 109.48210144]
[227.13108826 110.61427307]
[220.87384033 108.41775513]
[205.99699402 110.33590698]
[194.36363220 119.63721466]
[179.68733215 113.72816467]
[164.81048584 115.64632416]
[149.93363953 117.56447601]
[135.05677795 119.48263550]
[132.29808044 126.45684052]
[146.27336121 131.90583801]
[160.24864197 137.35484314]
[175.21078491 138.41987610]
[178.90399170 152.95811462]
[166.26419067 161.03497314]
[154.62313843 151.57658386]
[140.70190430 145.99092102]
[126.78069305 140.40525818]
[124.02198792 147.37947083]
[133.56109619 158.95553589]
[149.04061890 157.87661743]
[162.18011475 166.13092041]
[167.92716980 180.54449463]
[164.07192993 195.57501221]
[152.09681702 205.44296265]
[136.60650635 206.35388184]
[123.55732727 197.95753479]
[117.96697235 183.48246765]
[121.98503113 168.49464417]
[112.44592285 156.91857910]
[86.56919098 132.85476685]
[89.35218811 106.96691132]
[75.27516174 112.14739227]
[61.19813538 117.32786560]
[47.12110901 122.50833893]
[41.00787735 133.87501526]
[29.16670418 137.89616394]
[18.12768936 132.93074036]
[3.96943927 137.88491821]
[-10.18881035 142.83911133]
[-20.65909576 154.70011902]
[-35.22762299 151.60057068]
[-49.38587189 156.55474854]
[-48.85405731 164.89021301]
[-49.90717697 173.16569519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[12 33]
[15 30]
[16 29]
[17 28]
[18 27]
[39 76]
[40 75]
[41 74]
[42 73]
[43 72]
[44 71]
[47 69]
[48 68]
[49 67]
[50 66]
[80 193]
[81 192]
[83 190]
[84 189]
[85 188]
[87 185]
[88 184]
[89 183]
[90 182]
[104 112]
[105 111]
[106 110]
[127 159]
[128 158]
[129 157]
[130 156]
[132 154]
[133 153]
[134 150]
[135 149]
[136 148]
[137 147]
[138 146]
[139 145]
[140 144]
[169 180]
[170 179]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
