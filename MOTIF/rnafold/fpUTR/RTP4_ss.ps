%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGUCUCUUCCUGAGAAACGAGCAAACCUGAAAGCUACUCUCUCAGCUUCAGAGGGAAAAA\
) } def
/len { sequence length } bind def

/coor [
[106.30278778 238.31237793]
[104.80926514 223.38691711]
[103.31575012 208.46145630]
[94.34967041 196.56782532]
[100.67446899 182.06584167]
[99.18095398 167.14038086]
[97.68743134 152.21492004]
[96.19391632 137.28944397]
[94.70040131 122.36399078]
[80.35552979 111.93015289]
[77.71180725 94.39017487]
[88.34394073 80.19166565]
[85.37174988 65.48907471]
[82.39955902 50.78649139]
[79.42736816 36.08390427]
[76.45517731 21.38131523]
[73.48298645 6.67872763]
[59.01714706 1.71014595]
[49.04636765 -9.75634289]
[46.17285538 -24.57556343]
[51.07002640 -38.74855423]
[62.32802963 -48.50165939]
[59.35583496 -63.20424652]
[56.38364410 -77.90682983]
[41.79917526 -82.72230530]
[31.58837128 -94.19554138]
[28.49789429 -109.24029541]
[33.35906219 -123.80960083]
[44.86424637 -133.98439026]
[59.91860962 -137.02769470]
[74.47260284 -132.12088013]
[84.61128235 -120.58386230]
[87.60738373 -105.52002716]
[82.65497589 -90.98148346]
[71.08622742 -80.87902832]
[74.05842590 -66.17643738]
[77.03061676 -51.47385025]
[91.19303894 -46.85959625]
[101.21094513 -35.70175552]
[104.31938171 -20.93002319]
[99.58552551 -6.49092865]
[88.18556976 3.70653558]
[91.15776062 18.40912247]
[94.12995148 33.11170959]
[97.10214996 47.81429672]
[100.07434082 62.51688385]
[103.04653168 77.21947479]
[113.87708282 81.67896271]
[121.10361481 90.89662933]
[122.84930420 102.47853851]
[118.66078186 113.41674042]
[109.62586212 120.87046814]
[111.11937714 135.79592896]
[112.61289978 150.72138977]
[114.10641479 165.64685059]
[115.59992981 180.57231140]
[124.67283630 193.53352356]
[118.24121094 206.96794128]
[119.73473358 221.89340210]
[121.22824860 236.81886292]
[128.82160950 251.97726440]
[116.35765839 263.47015381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[17 42]
[22 37]
[23 36]
[24 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
