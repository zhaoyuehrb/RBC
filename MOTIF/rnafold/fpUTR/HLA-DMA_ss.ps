%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUCUAAGGCCACCCUCUCGGGGAGGGAGUUGGGGAAGCUGGGUUGGCUGGGUUGGUAGCUCCUACCUACUGUGUGGCAAGAAGGU\
) } def
/len { sequence length } bind def

/coor [
[81.32726288 391.54785156]
[84.21192169 372.38204956]
[84.75345612 357.39181519]
[85.29499054 342.40161133]
[85.83653259 327.41137695]
[72.65249634 317.81167603]
[67.65862274 302.11346436]
[72.97837830 286.34875488]
[86.73237610 276.69668579]
[86.73237610 261.69668579]
[86.73237610 246.69668579]
[86.73237610 231.69668579]
[86.73237610 216.69668579]
[74.39016724 211.91877747]
[64.42948914 203.15519714]
[58.08790588 191.46508789]
[56.16355515 178.27296448]
[58.91475677 165.19514465]
[66.02558136 153.84173584]
[76.64196777 145.61839294]
[89.47424316 141.55230713]
[90.55661011 126.59140015]
[91.63897705 111.63050079]
[85.71339417 98.96641541]
[93.40013123 87.28713226]
[94.48249054 72.32623291]
[95.56485748 57.36533356]
[96.64722443 42.40443420]
[97.72959137 27.44353485]
[98.81195831 12.48263645]
[99.89432526 -2.47826171]
[100.97669220 -17.43915939]
[91.39794922 -24.93621254]
[86.77759552 -36.05704117]
[88.19491577 -47.89356995]
[95.16686249 -57.41330719]
[105.80281067 -62.23624420]
[107.96189880 -77.08003998]
[110.12098694 -91.92384338]
[112.28008270 -106.76763916]
[106.60974121 -121.53780365]
[116.09841919 -133.01884460]
[118.25750732 -147.86264038]
[111.68820953 -162.88848877]
[121.63283539 -175.92829895]
[137.86120605 -173.56781006]
[143.67897034 -158.23530579]
[133.10130310 -145.70355225]
[130.94221497 -130.85975647]
[136.76699829 -117.15131378]
[127.12387848 -104.60855103]
[124.96479034 -89.76474762]
[122.80569458 -74.92095184]
[120.64660645 -60.07715607]
[132.46343994 -46.32233810]
[130.67657471 -27.96235657]
[115.93759155 -16.35679436]
[114.85522461 -1.39589536]
[113.77285767 13.56500340]
[112.69049072 28.52590179]
[111.60812378 43.48680115]
[110.52575684 58.44769669]
[109.44338989 73.40859985]
[108.36102295 88.36949921]
[114.28660583 101.03358459]
[106.59986877 112.71286774]
[105.51750946 127.67376709]
[104.43514252 142.63467407]
[119.34020996 150.74409485]
[129.26382446 164.44094849]
[132.30654907 181.02369690]
[127.92041779 197.24645996]
[117.00696564 209.95425415]
[101.73237610 216.69668579]
[101.73237610 231.69668579]
[101.73237610 246.69668579]
[101.73237610 261.69668579]
[101.73237610 276.69668579]
[113.55421448 284.03509521]
[120.10082245 296.18945312]
[119.72930145 309.88067627]
[112.64681244 321.47604370]
[100.82675171 327.95291138]
[100.28521729 342.94314575]
[99.74368286 357.93334961]
[99.20214081 372.92358398]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 86]
[3 85]
[4 84]
[5 83]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[21 68]
[22 67]
[23 66]
[25 64]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[37 54]
[38 53]
[39 52]
[40 51]
[42 49]
[43 48]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
