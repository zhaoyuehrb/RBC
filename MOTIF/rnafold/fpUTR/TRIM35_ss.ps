%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCGGGUCGCGGGCGUUGGCAGCCGGGCGGGUGGGAGGGGCCGGAGCAAAAGUUCCGGGCGCCCGAGCCGGCUGCUCGUGCC\
) } def
/len { sequence length } bind def

/coor [
[77.50308990 167.22071838]
[75.74870300 170.39654541]
[73.34177399 172.60089111]
[70.66748810 173.74647522]
[68.10208893 173.87821960]
[58.84291458 185.67939758]
[59.33012390 201.71504211]
[47.00399017 211.98373413]
[31.32007217 208.60821533]
[24.30972481 194.17787170]
[31.35068893 179.76245117]
[47.04174042 176.42022705]
[56.30091476 164.61904907]
[64.43171692 152.01388550]
[71.36476898 138.71228027]
[78.29782867 125.41067505]
[85.23088837 112.10906982]
[80.98112488 98.25679016]
[87.67823792 85.40785980]
[101.46750641 80.95787048]
[108.40056610 67.65626526]
[115.33362579 54.35466003]
[122.26667786 41.05305481]
[129.19973755 27.75144958]
[136.13279724 14.44984436]
[143.06585693 1.14823902]
[149.99891663 -12.15336609]
[156.93197632 -25.45497131]
[155.61669922 -43.70901108]
[170.54975891 -52.72738647]
[176.98657227 -66.27609253]
[183.42338562 -79.82480621]
[189.86019897 -93.37351227]
[196.29699707 -106.92221832]
[202.73381042 -120.47093201]
[198.42736816 -126.69936371]
[196.41735840 -133.94532776]
[196.89311218 -141.39709473]
[199.76745605 -148.23153687]
[204.69020081 -153.70509338]
[211.09043884 -157.23466492]
[218.24261475 -158.45954895]
[225.34870911 -157.27813721]
[234.60789490 -169.07931519]
[243.86706543 -180.88049316]
[253.12623596 -192.68165588]
[262.38540649 -204.48283386]
[271.64459229 -216.28401184]
[280.90374756 -228.08517456]
[282.68249512 -244.38757324]
[297.79718018 -250.74983215]
[310.69912720 -240.62698364]
[308.11590576 -224.43257141]
[292.70492554 -218.82600403]
[283.44577026 -207.02484131]
[274.18658447 -195.22366333]
[264.92739868 -183.42248535]
[255.66824341 -171.62130737]
[246.40905762 -159.82014465]
[237.14988708 -148.01896667]
[237.52249146 -124.85460663]
[216.28251648 -114.03411865]
[209.84570312 -100.48541260]
[203.40890503 -86.93670654]
[196.97209167 -73.38799286]
[190.53527832 -59.83928680]
[184.09848022 -46.29058075]
[187.86311340 -34.63641357]
[182.41482544 -23.21848869]
[170.23358154 -18.52191353]
[163.30052185 -5.22030783]
[156.36746216 8.08129692]
[149.43440247 21.38290215]
[142.50134277 34.68450928]
[135.56828308 47.98611450]
[128.63522339 61.28771973]
[121.70217133 74.58932495]
[114.76911163 87.89093018]
[119.01887512 101.74320984]
[112.32176208 114.59214020]
[98.53249359 119.04212952]
[91.59943390 132.34373474]
[84.66637421 145.64533997]
[77.73332214 158.94694519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 13]
[6 12]
[14 84]
[15 83]
[16 82]
[17 81]
[20 78]
[21 77]
[22 76]
[23 75]
[24 74]
[25 73]
[26 72]
[27 71]
[28 70]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
