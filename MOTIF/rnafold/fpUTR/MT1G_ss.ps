%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCGCCUUCCACGUGCACCCACUGCCUCUUCCCUUCUCGCUUGGGAACUCUAGUCUCGCCUCGGGUUGCA\
) } def
/len { sequence length } bind def

/coor [
[60.32027817 211.40696716]
[58.49502182 226.45503235]
[51.63033295 239.96990967]
[40.55515671 250.31961060]
[26.60687637 256.25436401]
[11.46981049 257.05749512]
[-3.02816510 252.63206482]
[-15.13634872 243.51243591]
[-23.39261818 230.79985046]
[-26.79998970 216.02941895]
[-24.94700432 200.98474121]
[-18.05742264 187.48254395]
[-6.96319246 177.15327454]
[6.99600267 171.24423218]
[22.13452339 170.46899414]
[36.62431717 174.92114258]
[45.64867783 162.93945312]
[54.67303848 150.95776367]
[63.69739914 138.97605896]
[72.46187592 126.80297852]
[80.96240234 114.44413757]
[89.46292877 102.08528900]
[95.72083282 88.45302582]
[99.55113220 73.95030975]
[103.38143158 59.44758987]
[107.21173096 44.94487381]
[97.63226318 34.79487610]
[94.42326355 21.32442856]
[98.33535767 8.15506840]
[108.21956635 -1.22836077]
[121.36193848 -4.39978313]
[125.81262970 -18.72428513]
[130.26332092 -33.04878616]
[134.71401978 -47.37328720]
[139.16470337 -61.69778824]
[129.16708374 -73.44730377]
[127.13146973 -88.73977661]
[133.70741272 -102.69544220]
[146.79655457 -110.86109161]
[162.22219849 -110.63109589]
[175.06208801 -102.07884979]
[181.21905518 -87.93334198]
[178.72842407 -72.70835114]
[168.38494873 -61.26211929]
[153.48921204 -57.24709702]
[149.03851318 -42.92259598]
[144.58782959 -28.59809303]
[140.13713074 -14.27359200]
[135.68644714 0.05090920]
[145.88459778 12.73225117]
[146.63256836 29.15271378]
[137.44784546 42.98231888]
[121.71444702 48.77517319]
[117.88414764 63.27788925]
[114.05384827 77.78060913]
[110.22354889 92.28332520]
[123.89096832 86.10258484]
[138.64385986 88.81405640]
[149.22038269 99.45066071]
[151.84825134 114.21867371]
[145.59017944 127.85086823]
[132.67823792 135.48509216]
[117.71763611 134.39849854]
[106.04433441 124.97863770]
[101.82176971 110.58581543]
[93.32124329 122.94466400]
[84.82071686 135.30351257]
[82.42459869 144.44540405]
[75.67909241 148.00042725]
[66.65473175 159.98211670]
[57.63037109 171.96380615]
[48.60601044 183.94549561]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 72]
[17 71]
[18 70]
[19 69]
[20 67]
[21 66]
[22 65]
[23 56]
[24 55]
[25 54]
[26 53]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
