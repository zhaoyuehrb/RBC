%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUACUGAAAUUAAGCAGCAUCCAACACAGGCCUACUCUUACGACAUGUGACUUUACUGUUUUCCGUUUUUGUUGAAAGAGUCAUUAACAGUUAGGAGUUGAUGGCAGUUUCAAUAACAGGUCAUUGCCGAGAAAAGGAUAGCACUAUAAU\
) } def
/len { sequence length } bind def

/coor [
[94.60188293 414.21023560]
[81.29054260 421.26400757]
[66.74319458 425.17840576]
[51.68952560 425.75701904]
[36.88462448 422.97088623]
[23.07109642 416.95971680]
[10.94182396 408.02502441]
[1.10520577 396.61499023]
[-5.94535780 383.30194092]
[-9.85621262 368.75366211]
[-10.43119240 353.69985962]
[-7.64145708 338.89562988]
[-1.62693751 325.08355713]
[7.31068039 312.95645142]
[18.72308922 303.12258911]
[32.03784561 296.07525635]
[46.58708954 292.16790771]
[61.64103699 291.59658813]
[64.41520691 276.85534668]
[67.03688812 262.08624268]
[69.50580597 247.29081726]
[71.97472382 232.49539185]
[74.44364166 217.69998169]
[60.89451218 209.53739929]
[51.48191452 196.77700806]
[47.66498184 181.34729004]
[50.05438995 165.59417725]
[58.31486893 151.92448425]
[71.21190643 142.43804932]
[86.79615784 138.60528564]
[88.95877075 123.76200867]
[91.12138367 108.91872406]
[81.00975800 119.99820709]
[67.65128326 126.82103729]
[52.74759293 128.51811218]
[38.19716644 124.87322235]
[25.85348511 116.35070038]
[17.28891754 104.03614807]
[13.59444714 89.49822998]
[15.24068451 74.58884430]
[22.01792908 61.20718002]
[33.06287384 51.05783463]
[46.96858215 45.43366241]
[61.96369934 45.05109024]
[76.13811493 49.95884705]
[87.68623352 59.53176880]
[95.13703156 72.55043030]
[97.54145050 87.35410309]
[103.84948730 73.74496460]
[110.15752411 60.13582611]
[116.46556091 46.52668762]
[122.77360535 32.91754913]
[122.20164490 28.46746826]
[123.02967072 24.48481750]
[124.92850494 21.36093903]
[127.47390747 19.33549881]
[130.20603943 18.47842598]
[137.61636353 5.43668270]
[145.02670288 -7.60506058]
[152.43702698 -20.64680481]
[138.51577759 -15.06120968]
[123.64808655 -17.04913902]
[111.68330383 -26.09590149]
[105.71918488 -39.85923386]
[107.29988098 -54.77571487]
[116.01614380 -66.98336792]
[129.61126709 -73.32154846]
[144.56538391 -72.14926147]
[157.00679016 -63.77002335]
[163.71429443 -50.35326767]
[162.95146179 -35.37318420]
[172.88043213 -46.61664581]
[182.80940247 -57.86010742]
[192.73838806 -69.10356903]
[202.66735840 -80.34703064]
[212.59634399 -91.59049225]
[222.52531433 -102.83395386]
[232.45429993 -114.07741547]
[231.65750122 -129.63385010]
[241.88705444 -140.89488220]
[256.72265625 -141.55863953]
[266.65164185 -152.80209351]
[276.58059692 -164.04556274]
[286.50958252 -175.28901672]
[296.43856812 -186.53248596]
[306.36755371 -197.77593994]
[316.29650879 -209.01940918]
[326.22549438 -220.26286316]
[336.15447998 -231.50633240]
[332.65072632 -246.62265015]
[338.73226929 -260.89831543]
[352.06066895 -268.84402466]
[367.51080322 -267.40447998]
[379.14184570 -257.13323975]
[382.48141479 -241.97978210]
[376.24536133 -227.77093506]
[362.83157349 -219.97029114]
[347.39791870 -221.57734680]
[337.46896362 -210.33389282]
[327.53997803 -199.09042358]
[317.61099243 -187.84696960]
[307.68203735 -176.60350037]
[297.75305176 -165.36004639]
[287.82406616 -154.11657715]
[277.89511108 -142.87312317]
[267.96612549 -131.62965393]
[269.14251709 -116.82588959]
[259.23327637 -105.28197479]
[243.69775391 -104.14843750]
[233.76878357 -92.90497589]
[223.83979797 -81.66151428]
[213.91082764 -70.41805267]
[203.98184204 -59.17459106]
[194.05287170 -47.93112946]
[184.12390137 -36.68767166]
[174.19491577 -25.44420815]
[165.47875977 -13.23647785]
[158.06843567 -0.19473465]
[150.65811157 12.84700871]
[143.24778748 25.88875198]
[136.38273621 39.22558594]
[130.07470703 52.83472443]
[123.76666260 66.44386292]
[117.45862579 80.05300140]
[111.15058899 93.66213989]
[112.21020508 103.51214600]
[105.96466827 111.08133698]
[103.80205536 125.92462158]
[101.63944244 140.76791382]
[114.10871887 147.71743774]
[123.42945099 158.49006653]
[128.49284363 171.77297974]
[128.70726013 185.95671082]
[124.06731415 199.33006287]
[115.15201569 210.28666687]
[103.05261993 217.51783752]
[89.23906708 220.16889954]
[86.77014160 234.96430969]
[84.30122375 249.75973511]
[81.83230591 264.55514526]
[83.51183319 273.59963989]
[79.15644073 279.62951660]
[76.38227081 294.37075806]
[90.19870758 300.37524414]
[102.33231354 309.30404663]
[112.17446136 320.70928955]
[119.23147583 334.01892090]
[123.14937592 348.56530762]
[123.73165131 363.61883545]
[120.94908905 378.42443848]
[114.94126892 392.23941040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 143]
[19 142]
[20 140]
[21 139]
[22 138]
[23 137]
[30 129]
[31 128]
[32 127]
[48 125]
[49 124]
[50 123]
[51 122]
[52 121]
[57 120]
[58 119]
[59 118]
[60 117]
[71 116]
[72 115]
[73 114]
[74 113]
[75 112]
[76 111]
[77 110]
[78 109]
[81 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 100]
[88 99]
[89 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
