%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCCCGCUCCGAGCCUGGUGCUUCCGACCGCUGCGCGCGGCUCCUGGGCUGUCACAGUCUCCCGUUGCCGCCGUC\
) } def
/len { sequence length } bind def

/coor [
[69.15029144 101.35668182]
[54.45343399 98.35630035]
[39.75657272 95.35591125]
[25.05971336 92.35552979]
[10.36285400 89.35514069]
[-4.70608473 94.17568970]
[-15.62848854 84.04897308]
[-30.32534790 81.04858398]
[-45.02220917 78.04820251]
[-49.68857193 79.85842896]
[-54.19480515 79.88481140]
[-57.94190216 78.44138336]
[-60.51906586 76.02015686]
[-61.74866867 73.20332336]
[-75.77391052 67.88424683]
[-89.79915619 62.56517792]
[-96.82838440 63.29614258]
[-102.22585297 60.58892822]
[-104.71015930 56.21218872]
[-118.26191711 49.78180313]
[-131.81367493 43.35141373]
[-145.95387268 50.02890778]
[-161.06488037 46.00505066]
[-170.01174927 33.17977905]
[-168.57003784 17.60879707]
[-157.42047119 6.64424515]
[-141.82754517 5.46325016]
[-129.15376282 14.62344074]
[-125.38328552 29.79965591]
[-111.83152771 36.23004532]
[-98.27976990 42.66043472]
[-84.48007965 48.53993225]
[-70.45483398 53.85900497]
[-56.42959213 59.17807770]
[-42.02182388 63.35134125]
[-27.32496262 66.35172272]
[-12.62810230 69.35211182]
[1.38961816 64.31695557]
[13.36323929 74.65827942]
[28.06009865 77.65866852]
[42.75695801 80.65904999]
[57.45381927 83.65943909]
[72.15068054 86.65982056]
[80.69032288 75.90266418]
[93.05004883 69.91274261]
[106.78469849 69.87504578]
[119.17711639 75.79704285]
[127.77568054 86.50716400]
[130.87931824 99.88661194]
[145.44345093 103.47634125]
[160.00756836 107.06607819]
[175.25839233 102.85620880]
[185.76417542 113.41451263]
[200.32830811 117.00424957]
[215.57911682 112.79437256]
[226.08491516 123.35267639]
[240.64903259 126.94241333]
[252.42169189 116.83380127]
[267.89035034 115.60911560]
[281.10702515 123.73927307]
[286.98959351 138.09806824]
[283.27612305 153.16424561]
[271.39450073 163.14454651]
[255.91345215 164.20135498]
[242.78576660 155.92829895]
[237.05929565 141.50654602]
[222.49517822 137.91680908]
[208.28607178 142.38343811]
[196.73857117 131.56837463]
[182.17443848 127.97863770]
[167.96534729 132.44526672]
[156.41783142 121.63020325]
[141.85371399 118.04047394]
[127.28958130 114.45073700]
[116.44651031 126.13536835]
[101.22073364 130.85539246]
[85.66965485 127.35298920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[7 37]
[8 36]
[9 35]
[14 34]
[15 33]
[16 32]
[19 31]
[20 30]
[21 29]
[49 74]
[50 73]
[51 72]
[53 70]
[54 69]
[56 67]
[57 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
