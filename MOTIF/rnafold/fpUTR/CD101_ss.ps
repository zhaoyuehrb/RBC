%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:03:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUUUGUCACUCAACCUCUGAAUGUUAGUGACACUAUUGGGACGAAAAAGGACUGUGCUGGCCCAA\
) } def
/len { sequence length } bind def

/coor [
[113.85451508 128.01084900]
[103.25829315 131.07955933]
[92.25603485 130.27517700]
[82.21881866 125.69795227]
[74.39746094 117.91828918]
[69.76665497 107.90567780]
[68.90347290 96.90787506]
[54.76956177 91.88467407]
[40.63564682 86.86148071]
[26.50173569 81.83828735]
[12.36782074 76.81509399]
[-1.76609290 71.79190063]
[-15.90000629 66.76870728]
[-25.37879372 66.81015778]
[-30.55400848 61.18180466]
[-44.44464493 55.52051544]
[-58.33528519 49.85923004]
[-71.44789886 58.15615463]
[-86.93083954 57.12751389]
[-98.83060455 47.16883850]
[-102.57148743 32.10944366]
[-96.71504974 17.73997307]
[-83.51319885 9.58578014]
[-68.04232788 10.78232098]
[-56.25129318 20.86949921]
[-52.67399597 35.96858978]
[-38.78335953 41.62987900]
[-24.89271927 47.29116821]
[-10.87681293 52.63479233]
[3.25710130 57.65798569]
[17.39101601 62.68118286]
[31.52492905 67.70437622]
[45.65884399 72.72756958]
[59.79275513 77.75076294]
[73.92667389 82.77395630]
[88.75005341 70.84535217]
[107.74396515 69.72483063]
[123.86706543 79.82778931]
[131.14227295 97.40890503]
[145.95222473 99.78914642]
[160.76216125 102.16938019]
[175.57211304 104.54962158]
[190.38204956 106.92985535]
[205.23515320 101.48043823]
[216.57337952 111.13929749]
[231.38333130 113.51953888]
[239.32546997 100.55841064]
[251.62599182 91.62725067]
[266.40917969 88.08801270]
[281.42065430 90.48038483]
[294.37133789 98.43956757]
[303.28628540 110.75183105]
[306.80609131 125.53964233]
[304.39398193 140.54797363]
[296.41775513 153.48817444]
[284.09378052 162.38693237]
[269.30136108 165.88726807]
[254.29620361 163.45541382]
[241.36651611 155.46218872]
[232.48396301 143.12651062]
[229.00309753 128.32948303]
[214.19314575 125.94924164]
[200.39936829 131.56890869]
[188.00181580 121.73979950]
[173.19186401 119.35956573]
[158.38192749 116.97932434]
[143.57197571 114.59909058]
[128.76203918 112.21884918]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 35]
[8 34]
[9 33]
[10 32]
[11 31]
[12 30]
[13 29]
[15 28]
[16 27]
[17 26]
[39 68]
[40 67]
[41 66]
[42 65]
[43 64]
[45 62]
[46 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
