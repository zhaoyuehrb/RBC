%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGGCGUCUUCUGCCCGGCCCCUUCGCCCACGUGAAGAACGCCAGGGAGCUGUGAGGCAGUGCUGUGUGGUUCCUGCCGUCCGGACUCUUUUUCCUCUACUGAGAUUCAUCUGUGUGAAAU\
) } def
/len { sequence length } bind def

/coor [
[99.84477997 134.11558533]
[88.76020050 132.21124268]
[80.82573700 144.94091797]
[72.89128113 157.67057800]
[64.95681763 170.40023804]
[57.02236176 183.12989807]
[49.08789825 195.85957336]
[41.15343857 208.58923340]
[43.36469269 224.47915649]
[32.21607590 236.01553345]
[16.25985718 234.34863281]
[7.73627710 220.75715637]
[13.18390083 205.66732788]
[28.42377663 200.65476990]
[36.35823441 187.92510986]
[44.29269791 175.19544983]
[52.22715759 162.46577454]
[60.16161728 149.73611450]
[68.09607697 137.00645447]
[76.03054047 124.27678680]
[72.69503784 120.45327759]
[69.96350861 116.17734528]
[67.89636993 111.54358673]
[66.53934479 106.65448761]
[51.54415894 106.27449799]
[36.54897308 105.89450836]
[21.55378723 105.51451111]
[6.55860090 105.13452148]
[-8.43658543 104.75453186]
[-22.57539558 113.06272888]
[-36.70447540 104.73799896]
[-36.28903961 88.34411621]
[-21.75645447 80.74569702]
[-8.05659485 89.75934601]
[6.93859196 90.13933563]
[21.93377876 90.51932526]
[36.92896271 90.89932251]
[51.92414856 91.27931213]
[66.91933441 91.65930176]
[79.51807404 72.71652222]
[101.22463226 65.90604401]
[122.38661957 74.25632477]
[134.47705078 65.37817383]
[146.56747437 56.50001526]
[158.54446411 47.46941757]
[170.40609741 38.28782654]
[182.26773071 29.10623932]
[197.78973389 -1.68081176]
[203.35397339 -15.61060715]
[208.91821289 -29.54040146]
[214.48245239 -43.47019577]
[219.86979675 -57.46936035]
[225.07937622 -71.53563690]
[230.28895569 -85.60192108]
[230.34751892 -94.85317993]
[235.81278992 -99.95574951]
[241.37702942 -113.88554382]
[246.76437378 -127.88470459]
[251.97395325 -141.95098877]
[257.18353271 -156.01727295]
[262.39312744 -170.08355713]
[267.60269165 -184.14984131]
[264.04913330 -202.16383362]
[277.86486816 -212.90536499]
[282.71643066 -227.09910583]
[287.56802368 -241.29284668]
[283.87347412 -257.27041626]
[296.04614258 -268.25939941]
[311.56384277 -262.95529175]
[314.46325684 -246.81449890]
[301.76174927 -236.44128418]
[296.91018677 -222.24754333]
[292.05862427 -208.05380249]
[297.11398315 -196.98571777]
[293.10028076 -185.07342529]
[281.66897583 -178.94026184]
[276.45941162 -164.87397766]
[271.24981689 -150.80769348]
[266.04025269 -136.74140930]
[260.83065796 -122.67512512]
[261.46527100 -115.22511292]
[255.30682373 -108.32129669]
[249.74258423 -94.39150238]
[244.35523987 -80.39234161]
[239.14566040 -66.32606506]
[233.93608093 -52.25978088]
[234.57070923 -44.80976486]
[228.41224670 -37.90595245]
[222.84800720 -23.97615814]
[217.28376770 -10.04636288]
[211.71952820 3.88343215]
[221.21203613 -7.73087883]
[236.18931580 -8.55609417]
[246.90034485 1.94504511]
[246.37164307 16.93572426]
[234.94744873 26.65619469]
[220.06588745 24.77812386]
[233.69598389 31.04076004]
[247.32606506 37.30339432]
[263.59542847 35.24423599]
[273.29653931 48.46619797]
[266.44976807 63.36765671]
[250.09844971 64.61927032]
[241.06343079 50.93348694]
[227.43334961 44.67085266]
[213.80325317 38.40821838]
[224.00785828 49.40213013]
[224.20596313 64.40081787]
[214.29531860 75.66043091]
[199.39277649 77.36760712]
[187.19258118 68.64091492]
[183.99369812 53.98598099]
[191.44932556 40.96787643]
[179.58769226 50.14946365]
[167.72605896 59.33105469]
[164.32383728 65.98915863]
[155.44563293 68.59043884]
[143.35520935 77.46859741]
[131.26478577 86.34674835]
[134.00531006 97.25472260]
[133.05007935 108.46105194]
[128.50292969 118.74782562]
[120.85801697 126.99705505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 20]
[3 19]
[4 18]
[5 17]
[6 16]
[7 15]
[8 14]
[24 39]
[25 38]
[26 37]
[27 36]
[28 35]
[29 34]
[42 119]
[43 118]
[44 117]
[45 115]
[46 114]
[47 113]
[48 91]
[49 90]
[50 89]
[51 88]
[52 86]
[53 85]
[54 84]
[56 83]
[57 82]
[58 80]
[59 79]
[60 78]
[61 77]
[62 76]
[64 73]
[65 72]
[66 71]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
