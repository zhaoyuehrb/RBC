%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUUCUGGGAUUUGUGGUCCCGGAGAAGAGAUUGGCGGAGGGGAAAGACUGAGUCGUCUUUCCUUUGCCCGCUUCUGUGGACUGUUCGAACGCCCAGGGGUGGGCCAAACCCGUUUCUUAGGAAACCAGGAAUCCAGGGAAGGCAGA\
) } def
/len { sequence length } bind def

/coor [
[102.34267426 562.96911621]
[106.29302979 547.96331787]
[118.33040619 538.17138672]
[117.38223267 523.20141602]
[116.43405914 508.23141479]
[115.48589325 493.26141357]
[114.53771973 478.29141235]
[104.03854370 464.26565552]
[112.26611328 447.82684326]
[111.00254059 432.88015747]
[109.73896790 417.93347168]
[108.47539520 402.98678589]
[107.21182251 388.04010010]
[105.94824982 373.09341431]
[97.16633606 361.06314087]
[103.71363068 346.66024780]
[102.45005798 331.71356201]
[101.18648529 316.76687622]
[99.92292023 301.82019043]
[89.13037109 288.01892090]
[97.00952911 271.41030884]
[95.43112183 256.49359131]
[86.39751434 244.65113831]
[92.63970184 230.11340332]
[91.06129456 215.19668579]
[89.48287964 200.27996826]
[87.90447235 185.36323547]
[86.32605743 170.44651794]
[76.57245636 181.84245300]
[61.80571365 184.47747803]
[48.71254349 177.15838623]
[43.22182465 163.19944763]
[47.81987762 148.92156982]
[60.42459869 140.79008484]
[75.32829285 142.48712158]
[85.78179169 153.24325562]
[86.41414642 138.25659180]
[87.04649353 123.26992798]
[87.67884064 108.28326416]
[81.53929138 94.59729004]
[69.92534637 85.10432434]
[58.31140137 75.61136627]
[46.69745636 66.11840820]
[35.08351517 56.62544250]
[23.46957016 47.13248444]
[11.85562611 37.63952255]
[0.24168214 28.14656258]
[-11.37226200 18.65360069]
[-22.98620605 9.16063976]
[-34.60015106 -0.33232087]
[-50.29820633 1.49703503]
[-62.63994598 -8.37499905]
[-64.30323029 -24.09152031]
[-54.30126190 -36.32819366]
[-38.56803513 -37.82522202]
[-26.43778992 -27.69444084]
[-25.10718918 -11.94626522]
[-13.49324512 -2.45330405]
[-1.87930095 7.03965664]
[9.73464298 16.53261757]
[21.34858704 26.02557945]
[32.96253204 35.51853943]
[44.57647324 45.01150131]
[56.19041824 54.50445938]
[67.80435944 63.99742126]
[79.41830444 73.49037933]
[91.03224945 82.98334503]
[105.79199982 80.30943298]
[113.33760071 67.34548950]
[120.88320923 54.38154602]
[128.42880249 41.41759872]
[135.97441101 28.45365524]
[143.52001953 15.48970985]
[151.06561279 2.52576423]
[158.61122131 -10.43818092]
[166.15682983 -23.40212631]
[173.70242310 -36.36606979]
[181.24803162 -49.33001709]
[182.87959290 -58.38801956]
[189.09184265 -62.48533630]
[196.90908813 -75.28731537]
[197.46179199 -81.98573303]
[200.84318542 -86.65927887]
[205.33543396 -88.45437622]
[213.68540955 -100.91542816]
[222.03538513 -113.37648010]
[222.58903503 -129.76628113]
[237.18516541 -137.24189758]
[250.80854797 -128.11305237]
[249.44459534 -111.77072906]
[234.49644470 -105.02649689]
[226.14645386 -92.56544495]
[217.79647827 -80.10439301]
[209.71107483 -67.47006989]
[201.89382935 -54.66809082]
[194.21197510 -41.78441238]
[186.66636658 -28.82046890]
[179.12077332 -15.85652351]
[171.57516479 -2.89257812]
[164.02955627 10.07136726]
[156.48396301 23.03531265]
[148.93835449 35.99925613]
[141.39276123 48.96320343]
[133.84715271 61.92714691]
[126.30155182 74.89109039]
[118.75594330 87.85504150]
[119.46482849 94.70753479]
[117.98114777 100.78577423]
[114.85029602 105.46837616]
[110.76833344 108.39154816]
[106.47820282 109.47597504]
[102.66550446 108.91561127]
[102.03315735 123.90227509]
[101.40081024 138.88894653]
[100.76846313 153.87561035]
[101.24278259 168.86810303]
[102.82118988 183.78483582]
[104.39960480 198.70155334]
[105.97801208 213.61827087]
[107.55642700 228.53500366]
[116.70292664 241.44438171]
[110.34783936 254.91516113]
[111.92625427 269.83187866]
[121.47309113 278.57049561]
[122.44715118 291.07324219]
[114.86959839 300.55664062]
[116.13317108 315.50332642]
[117.39674377 330.45001221]
[118.66031647 345.39669800]
[127.53261566 358.49603271]
[120.89493561 371.82983398]
[122.15850830 386.77651978]
[123.42208099 401.72320557]
[124.68565369 416.66989136]
[125.94922638 431.61657715]
[127.21279907 446.56326294]
[136.57327271 455.50119019]
[137.28352356 468.02172852]
[129.50772095 477.34323120]
[130.45590210 492.31323242]
[131.40406799 507.28323364]
[132.35223389 522.25323486]
[133.30039978 537.22326660]
[146.47702026 545.41815186]
[152.28909302 559.80560303]
[148.50175476 574.85339355]
[136.57131958 584.77526855]
[121.08527374 585.75616455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 143]
[4 142]
[5 141]
[6 140]
[7 139]
[9 136]
[10 135]
[11 134]
[12 133]
[13 132]
[14 131]
[16 129]
[17 128]
[18 127]
[19 126]
[21 123]
[22 122]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[36 115]
[37 114]
[38 113]
[39 112]
[40 67]
[41 66]
[42 65]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[68 106]
[69 105]
[70 104]
[71 103]
[72 102]
[73 101]
[74 100]
[75 99]
[76 98]
[77 97]
[78 96]
[80 95]
[81 94]
[84 93]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
