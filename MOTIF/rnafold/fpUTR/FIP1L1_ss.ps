%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGACCUGCGCUGGAGGCUUCAUCUUUGCCGCCGCUGCCGUCGCCUUCCUGGGAUUGGAGUCUCGAGCUUUCUUCGUUCGUUCGUCGGCGGGUUCGCGCCCUUCUCGCGCCUCGGGGCUGCGAGGCUGGGGAAGGGGUUGGAGGGGGCUGUUGAUCGCCGCGUUUAAGUUGCGCUCGGGGCGGCC\
) } def
/len { sequence length } bind def

/coor [
[83.41094208 122.05625916]
[75.66126251 105.27681732]
[60.72525024 103.89279175]
[45.78923416 102.50876617]
[30.85322380 101.12474060]
[15.91721058 99.74071503]
[0.98119789 98.35668945]
[-13.95481491 96.97266388]
[-28.89082718 95.58863831]
[-43.82683945 94.20461273]
[-79.75898743 115.40042114]
[-94.37485504 118.77332306]
[-108.99071503 122.14622498]
[-120.69766998 132.78848267]
[-134.83882141 128.11119080]
[-149.45468140 131.48408508]
[-164.07055664 134.85699463]
[-178.68641663 138.22988892]
[-193.30229187 141.60279846]
[-207.91815186 144.97569275]
[-222.53401184 148.34860229]
[-237.14988708 151.72149658]
[-251.76574707 155.09440613]
[-266.35275269 158.58995056]
[-280.90991211 162.20791626]
[-295.46704102 165.82588196]
[-310.02420044 169.44383240]
[-314.47183228 186.42700195]
[-326.83630371 198.76454163]
[-343.65701294 203.13040161]
[-360.28988647 198.41213989]
[-372.18963623 185.99263000]
[-386.61700439 190.09757996]
[-397.77297974 201.31610107]
[-412.13180542 197.35716248]
[-426.55917358 201.46209717]
[-437.58050537 213.60549927]
[-453.54818726 209.86848450]
[-458.03604126 194.09535217]
[-446.42733765 182.51217651]
[-430.66412354 187.03471375]
[-416.23675537 182.92977905]
[-406.11273193 172.00485229]
[-390.72195435 175.67019653]
[-376.29458618 171.56524658]
[-374.54351807 159.03021240]
[-368.15191650 148.05174255]
[-358.04147339 140.28329468]
[-345.69692993 136.91040039]
[-332.94808960 138.46972656]
[-321.69873047 144.76411438]
[-313.64215088 154.88668823]
[-299.08502197 151.26873779]
[-284.52786255 147.65077209]
[-269.97073364 144.03282166]
[-264.22567749 139.35850525]
[-255.13865662 140.47853088]
[-240.52278137 137.10563660]
[-225.90692139 133.73272705]
[-211.29104614 130.35983276]
[-196.67518616 126.98693085]
[-182.05932617 123.61402893]
[-167.44345093 120.24112701]
[-152.82759094 116.86822510]
[-138.21173096 113.49532318]
[-127.55019379 103.09431458]
[-112.36361694 107.53035736]
[-97.74775696 104.15745544]
[-83.13188934 100.78455353]
[-79.45486450 94.24777222]
[-93.89855194 90.20055389]
[-108.77293396 92.13774109]
[-121.08444214 83.56880188]
[-124.43399048 68.94756317]
[-117.08058929 55.87363434]
[-102.84629059 51.14238739]
[-89.12957764 57.21295166]
[-83.05981445 70.93211365]
[-72.10083008 81.17420959]
[-68.42380524 74.63742828]
[-73.13090515 60.39512253]
[-86.75790405 51.92845917]
[-88.49152374 35.97935104]
[-77.00187683 24.78258324]
[-61.10283661 26.92736244]
[-52.99078751 40.76839447]
[-58.88859558 55.68802643]
[-54.18149948 69.93032837]
[-42.44281387 79.26860046]
[-27.50680161 80.65262604]
[-12.57078934 82.03665161]
[2.36522317 83.42067719]
[17.30123520 84.80470276]
[32.23724747 86.18872833]
[47.17325974 87.57275391]
[62.10927200 88.95677948]
[77.04528809 90.34080505]
[87.47003937 75.40985107]
[106.90529633 70.50479889]
[126.46684265 80.31120300]
[137.63647461 70.29924011]
[148.80610657 60.28727722]
[159.97572327 50.27531052]
[171.14535522 40.26334763]
[182.31498718 30.25138283]
[193.48460388 20.23941803]
[204.65423584 10.22745419]
[205.67269897 -5.31604815]
[217.14291382 -15.31048870]
[231.95498657 -14.24374866]
[243.12461853 -24.25571251]
[254.29425049 -34.26767731]
[265.46386719 -44.27964020]
[276.63351440 -54.29160690]
[287.80313110 -64.30357361]
[288.41525269 -80.09600067]
[300.07159424 -90.76863098]
[315.85665894 -89.98958588]
[326.40545654 -78.22105408]
[325.45956421 -62.44509125]
[313.58016968 -52.02130890]
[297.81509399 -53.13394165]
[286.64547729 -43.12197876]
[275.47583008 -33.11001587]
[264.30621338 -23.09804916]
[253.13658142 -13.08608532]
[241.96696472 -3.07412100]
[241.41308594 11.76598740]
[230.22811890 22.07865906]
[214.66619873 21.39708138]
[203.49656677 31.40904617]
[192.32695007 41.42100906]
[181.15731812 51.43297577]
[169.98768616 61.44493866]
[158.81806946 71.45690155]
[147.64843750 81.46886444]
[136.47880554 91.48083496]
[151.08106995 88.04951477]
[164.24127197 80.85166168]
[179.14576721 82.54164886]
[190.36029053 92.50329590]
[193.79598999 107.10453033]
[188.20016479 121.02166748]
[175.61309814 129.18045044]
[160.62409973 128.60614014]
[148.69825745 119.50819397]
[134.77943420 113.91656494]
[144.31358337 125.49671936]
[153.84773254 137.07687378]
[163.38188171 148.65702820]
[172.91603088 160.23718262]
[182.45018005 171.81733704]
[192.17752075 183.23568726]
[202.09530640 194.48902893]
[212.01309204 205.74235535]
[226.94227600 210.97976685]
[229.55267334 225.64382935]
[239.47045898 236.89717102]
[249.38824463 248.15049744]
[264.31741333 253.38790894]
[266.92782593 268.05197144]
[276.84561157 279.30529785]
[292.63232422 280.05004883]
[303.20666504 291.79565430]
[302.29507446 307.57360840]
[290.43832397 318.02319336]
[274.67086792 316.94482422]
[264.34725952 304.97827148]
[265.59228516 289.22308350]
[255.67448425 277.96975708]
[241.45469666 273.53726196]
[238.13491821 258.06829834]
[228.21711731 246.81495667]
[218.29933167 235.56163025]
[204.07954407 231.12913513]
[200.75976562 215.66014099]
[190.84197998 204.40681458]
[180.92419434 193.15348816]
[176.27909851 191.96444702]
[172.33943176 187.83219910]
[170.87002563 181.35148621]
[161.33587646 169.77133179]
[151.80172729 158.19117737]
[142.26757812 146.61102295]
[132.73342896 135.03086853]
[123.19927979 123.45071411]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 69]
[12 68]
[13 67]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[21 59]
[22 58]
[23 57]
[24 55]
[25 54]
[26 53]
[27 52]
[32 45]
[33 44]
[35 42]
[36 41]
[80 88]
[81 87]
[100 137]
[101 136]
[102 135]
[103 134]
[104 133]
[105 132]
[106 131]
[107 130]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
[147 186]
[148 185]
[149 184]
[150 183]
[151 182]
[152 181]
[153 178]
[154 177]
[155 176]
[157 174]
[158 173]
[159 172]
[161 170]
[162 169]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
