%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGGACCCUUGACCUCUGGCCCAAGAUGGUGGCGCCCAGAGCUUCGCUCUUGCUGCUCCCCUGAGGUGAACUGAAGCCAGCAGCCCCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[183.77168274 114.77420807]
[168.82292175 113.53551483]
[153.87414551 112.29682159]
[138.92538452 111.05813599]
[123.97661591 109.81944275]
[109.02784729 108.58075714]
[118.66791534 120.07288361]
[120.79618073 134.92112732]
[114.77236176 148.65844727]
[102.40871429 157.15197754]
[87.42480469 157.84648132]
[74.32849121 150.53302002]
[67.05978394 137.41181946]
[67.80543518 122.43037415]
[76.34113312 110.09578705]
[90.09867859 104.11893463]
[76.17036438 98.55097961]
[62.24205780 92.98301697]
[48.31374741 87.41506195]
[34.38543701 81.84709930]
[20.36696815 76.51019287]
[6.26217794 71.40579987]
[-7.92508078 66.53530884]
[-22.19092941 61.90005112]
[-36.45677567 57.26479721]
[-50.42294693 64.66220856]
[-65.50450897 59.93759918]
[-72.75385284 45.89400101]
[-67.87005615 30.86322975]
[-53.75059891 23.76277351]
[-38.77230072 28.80521011]
[-31.82152176 42.99894714]
[-17.55567360 47.63420486]
[-3.28982592 52.26945877]
[4.19199848 51.32352066]
[11.36657524 57.30100632]
[25.47136688 62.40540314]
[32.98037720 61.70735931]
[39.95339584 67.91879272]
[53.88170624 73.48674774]
[67.81001282 79.05471039]
[81.73832703 84.62266541]
[95.66663361 90.19062805]
[110.26653290 93.63198853]
[125.21530151 94.87067413]
[140.16407776 96.10936737]
[155.11283875 97.34805298]
[170.06159973 98.58674622]
[185.01037598 99.82543945]
[195.15614319 83.05688477]
[212.18922424 73.51496887]
[231.63729858 73.61988068]
[248.43583679 83.26998138]
[258.24691772 99.88759613]
[273.19567871 98.64890289]
[288.14443970 97.41021729]
[303.09323120 96.17152405]
[318.04199219 94.93283081]
[332.99075317 93.69414520]
[322.49438477 82.97844696]
[321.06607056 68.04660797]
[329.34063721 55.53536224]
[343.64031982 51.00558090]
[357.60934448 56.47060776]
[365.03890991 69.50141144]
[362.62677002 84.30619812]
[351.44519043 94.30464172]
[366.27941895 96.52859497]
[381.11361694 98.75255585]
[391.89834595 87.59597015]
[407.18685913 84.94237518]
[421.10037231 91.81213379]
[428.28890991 105.56366730]
[425.98828125 120.90924835]
[415.08316040 131.94818115]
[399.76678467 134.43576050]
[385.92858887 127.41548157]
[378.88967896 113.58676910]
[364.05545044 111.36281586]
[349.22125244 109.13886261]
[334.22943115 108.64291382]
[319.28067017 109.88159943]
[304.33190918 111.12029266]
[289.38314819 112.35897827]
[274.43438721 113.59767151]
[259.48559570 114.83636475]
[256.70831299 125.43630219]
[250.99459839 134.81155396]
[242.81472778 142.16693115]
[232.84864807 146.87448120]
[221.92964172 148.52700806]
[210.97450256 146.97334290]
[200.90664673 142.33204651]
[192.57830811 134.98243713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 49]
[2 48]
[3 47]
[4 46]
[5 45]
[6 44]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[21 37]
[22 36]
[23 34]
[24 33]
[25 32]
[54 86]
[55 85]
[56 84]
[57 83]
[58 82]
[59 81]
[67 80]
[68 79]
[69 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
