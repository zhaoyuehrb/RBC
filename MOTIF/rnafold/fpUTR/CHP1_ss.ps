%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:06:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCCCUGGGUUCCCUCCCGGGUCCGCAGUGGAAACACUGCCCUCUCCCUUCUUGACCCCUAGCCCUUCCUUCCCUCCCUCCUUCCCUCCUGUCGCCGUCUCUUCUGGCGCCGCUGCUCCCGGAGGAGCUCCCGGCACGGCG\
) } def
/len { sequence length } bind def

/coor [
[155.01631165 214.61807251]
[134.01304626 222.50390625]
[111.95066071 226.57518005]
[89.51615143 226.70510864]
[67.40808868 222.88963318]
[46.31489182 215.24758911]
[26.89336205 204.01690674]
[17.55917549 215.75883484]
[8.22498894 227.50076294]
[-1.10919809 239.24269104]
[-10.44338512 250.98463440]
[-19.77757072 262.72656250]
[-17.73496246 278.39828491]
[-27.43829155 290.87310791]
[-43.13074875 292.74990845]
[-55.50227356 282.91522217]
[-57.21306229 267.20379639]
[-47.24813461 254.93695068]
[-31.51950264 253.39236450]
[-22.18531609 241.65043640]
[-12.85112953 229.90850830]
[-3.51694322 218.16658020]
[5.81724358 206.42465210]
[15.15143013 194.68270874]
[-0.98351526 177.24264526]
[-13.59185123 157.10505676]
[-22.23326302 134.97320557]
[-26.60596848 111.62001038]
[-41.59804916 112.10741425]
[-56.59012604 112.59481049]
[-71.58220673 113.08221436]
[-86.57428741 113.56961823]
[-101.56636810 114.05702209]
[-115.20130157 123.16858673]
[-129.78794861 115.67446899]
[-130.32081604 99.28398132]
[-116.25173187 90.85824585]
[-102.05376434 99.06494141]
[-87.06169128 98.57753754]
[-72.06961060 98.09014130]
[-57.07752991 97.60273743]
[-42.08545303 97.11533356]
[-27.09337234 96.62792969]
[-26.55037880 87.78944397]
[-25.39347649 79.01019287]
[-23.62827873 70.33276367]
[-21.26334572 61.79925537]
[-18.31015396 53.45106125]
[-14.78302574 45.32868195]
[-10.69907475 37.47151947]
[-6.07811069 29.91768837]
[-0.94255084 22.70383263]
[4.68269157 15.86494923]
[10.77032757 9.43421364]
[17.29082680 3.44282174]
[24.21255493 -2.08016133]
[31.50193787 -7.10794306]
[39.12361145 -11.61613369]
[47.04059982 -15.58286285]
[55.21450424 -18.98888779]
[63.60566330 -21.81768417]
[72.17337799 -24.05553246]
[80.87608337 -25.69157410]
[89.67155457 -26.71787262]
[98.51713562 -27.12944984]
[107.36991119 -26.92431068]
[116.18692780 -26.10344696]
[124.92543030 -24.67084312]
[133.54301453 -22.63344765]
[141.99786377 -20.00114632]
[150.24899292 -16.78670692]
[158.25634766 -13.00572205]
[165.98110962 -8.67653561]
[173.38578796 -3.82014823]
[180.43444824 1.53988123]
[187.09292603 7.37755108]
[193.32890320 13.66454124]
[199.11213684 20.37035370]
[204.41456604 27.46245766]
[209.21046448 34.90644836]
[213.47657776 42.66621780]
[217.19219971 50.70411301]
[220.33930969 58.98115158]
[222.90264893 67.45717621]
[224.86976624 76.09107208]
[226.23114014 84.84095001]
[226.98013306 93.66436768]
[227.11314392 102.51851654]
[226.62951660 111.36045074]
[225.53160095 120.14727020]
[223.82472229 128.83634949]
[221.51715088 137.38555908]
[235.56880188 142.63442993]
[249.62046814 147.88331604]
[263.67211914 153.13220215]
[272.88208008 153.21200562]
[277.96929932 158.65000916]
[291.90396118 164.20208740]
[305.83859253 169.75415039]
[319.77325439 175.30622864]
[340.67932129 170.82691956]
[352.97396851 187.35411072]
[367.23980713 191.98936462]
[381.50564575 196.62461853]
[395.77151489 201.25987244]
[410.03735352 205.89512634]
[424.30319214 210.53038025]
[438.56903076 215.16563416]
[452.83489990 219.80088806]
[467.10073853 224.43614197]
[484.97808838 220.16777039]
[496.24707031 233.57928467]
[510.60998535 237.90438843]
[526.44055176 233.62344360]
[537.87072754 245.38281250]
[533.14221191 261.08544922]
[517.11920166 264.57785034]
[506.28488159 252.26731873]
[491.92196655 247.94219971]
[481.07333374 253.39718628]
[469.03890991 249.85559082]
[462.46548462 238.70199585]
[448.19964600 234.06674194]
[433.93377686 229.43148804]
[419.66793823 224.79623413]
[405.40209961 220.16098022]
[391.13626099 215.52571106]
[376.87039185 210.89045715]
[362.60455322 206.25520325]
[348.33871460 201.61994934]
[341.08102417 206.95498657]
[332.03912354 208.33021545]
[323.26190186 205.30421448]
[316.79870605 198.44773865]
[314.22119141 189.24087524]
[300.28652954 183.68879700]
[286.35186768 178.13673401]
[272.41723633 172.58465576]
[258.42324829 167.18386841]
[244.37158203 161.93498230]
[230.31993103 156.68609619]
[216.26826477 151.43722534]
[205.41680908 171.07315063]
[191.28283691 188.49598694]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[12 19]
[28 43]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[92 142]
[93 141]
[94 140]
[95 139]
[97 138]
[98 137]
[99 136]
[100 135]
[102 130]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
