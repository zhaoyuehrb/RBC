%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:13:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCCCGCCUCUUCCGCUUCUGUGGUCUGAUCUUCCUGCGGCUGAACCGCCCGGCUGAGCCGACAUUGCCGGCGUCUUGGCGAUUCGGCCCGACGAGCUCCGCUUUCGCUACAGC\
) } def
/len { sequence length } bind def

/coor [
[61.70443726 130.77284241]
[69.80834198 118.15036774]
[82.98358154 110.98255157]
[69.26406860 117.04678345]
[69.75774384 133.05604553]
[64.10890961 148.00273132]
[53.20267487 159.62780762]
[38.71635437 166.18626404]
[22.86153984 166.70901489]
[8.04649067 161.14601135]
[-3.48968363 150.36932373]
[-17.04144096 156.79971313]
[-22.55669022 173.33480835]
[-37.99268723 180.68028259]
[-53.67370224 174.76786804]
[-67.04792786 181.55978394]
[-80.42215729 188.35168457]
[-93.79638672 195.14360046]
[-102.28819275 209.17289734]
[-118.67599487 208.56295776]
[-126.10142517 193.94122314]
[-116.92584229 180.34928894]
[-100.58829498 181.76936340]
[-87.21406555 174.97746277]
[-73.83983612 168.18554688]
[-60.46561050 161.39364624]
[-58.18951035 148.63412476]
[-48.81157684 139.40681458]
[-35.63113785 137.27507019]
[-23.47182846 143.24795532]
[-9.92007160 136.81758118]
[-11.15532303 122.77185822]
[-7.49360085 109.12464905]
[0.64130044 97.53473663]
[12.28060341 89.41812897]
[26.02588081 85.77507019]
[40.21706009 87.06681061]
[53.13291550 93.15731812]
[63.19983292 103.32727051]
[76.91934967 97.26303864]
[97.37836456 81.93154144]
[103.25785828 68.13185120]
[109.13735962 54.33216095]
[115.01686096 40.53247070]
[120.89636230 26.73277855]
[126.77585602 12.93308640]
[132.65534973 -0.86660486]
[130.94641113 -16.59524345]
[143.05322266 -25.27130890]
[148.93272400 -39.07099915]
[154.81222534 -52.87069321]
[160.69172668 -66.67037964]
[158.98277283 -82.39902496]
[171.08959961 -91.07508850]
[176.96910095 -104.87477875]
[170.39688110 -114.96751404]
[169.58338928 -126.86299896]
[174.61752319 -137.53811646]
[184.11691284 -144.33718872]
[195.60527039 -145.63244629]
[202.21701050 -159.09664917]
[208.82875061 -172.56085205]
[215.44049072 -186.02505493]
[208.95343018 -200.25363159]
[213.17980957 -215.30924988]
[226.12403870 -224.08312988]
[241.67425537 -222.43251038]
[252.48812866 -211.13674927]
[253.45968628 -195.52937317]
[244.13017273 -182.97970581]
[228.90470886 -179.41331482]
[222.29295349 -165.94911194]
[215.68121338 -152.48490906]
[209.06947327 -139.02070618]
[216.06005859 -122.20562744]
[208.53237915 -105.27785492]
[190.76878357 -98.99527740]
[184.88929749 -85.19558716]
[187.01878357 -70.45399475]
[174.49142456 -60.79088593]
[168.61192322 -46.99119186]
[162.73242188 -33.19150162]
[156.85292053 -19.39180946]
[158.98240662 -4.65021706]
[146.45504761 5.01289415]
[140.57554626 18.81258583]
[134.69604492 32.61227798]
[128.81654358 46.41196823]
[122.93704987 60.21166229]
[117.05755615 74.01135254]
[111.17805481 87.81104279]
[114.76779175 102.37516785]
[126.38686371 111.86185455]
[138.00593567 121.34853363]
[146.75450134 124.40909576]
[149.80513000 131.24923706]
[161.16531372 141.04444885]
[172.52551270 150.83966064]
[183.88569641 160.63485718]
[199.82974243 166.39886475]
[198.70474243 183.31544495]
[182.13784790 186.91738892]
[174.09048462 171.99505615]
[162.73030090 162.19984436]
[151.37011719 152.40463257]
[140.00991821 142.60942078]
[128.51925659 132.96760559]
[116.90018463 123.48092651]
[105.28110504 113.99424744]
[116.08327484 124.40161133]
[120.54750061 138.72189331]
[117.57300568 153.42402649]
[107.89324188 164.88273621]
[93.89502716 170.27255249]
[79.03005219 168.26445007]
[66.96370697 159.35359192]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[11 31]
[12 30]
[15 26]
[16 25]
[17 24]
[18 23]
[41 91]
[42 90]
[43 89]
[44 88]
[45 87]
[46 86]
[47 85]
[49 83]
[50 82]
[51 81]
[52 80]
[54 78]
[55 77]
[60 74]
[61 73]
[62 72]
[63 71]
[92 109]
[93 108]
[94 107]
[96 106]
[97 105]
[98 104]
[99 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
