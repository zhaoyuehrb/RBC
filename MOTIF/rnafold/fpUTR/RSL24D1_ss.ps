%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGUCUAACAGACCCGCGAGAACGAAGGACGCUUGCCUUUUUCCGGUCGGGGAAGGGGGAAGAAGGUAACUUCCGGUGACGGGGUUGCAUCACUUCCUCUCAAGCUUGGCGUUUGUUUGGUGGGGUUACACGCGGGUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[26.35570145 430.10275269]
[22.15826607 444.50350952]
[17.96083260 458.90423584]
[25.78129768 472.63800049]
[21.51946259 487.85681152]
[7.70379972 495.53164673]
[-7.46910572 491.10913086]
[-14.99743652 477.21310425]
[-10.41476822 462.08779907]
[3.56008387 454.70681763]
[7.75751925 440.30606079]
[11.95495415 425.90530396]
[15.20154858 411.26086426]
[17.48339844 396.43545532]
[19.76524925 381.61001587]
[22.04710007 366.78460693]
[24.32895088 351.95919800]
[26.61080170 337.13375854]
[28.89265251 322.30834961]
[20.77584839 317.73138428]
[14.23765850 311.05880737]
[9.80444241 302.80902100]
[7.83830595 293.62808228]
[8.50755596 284.23922729]
[11.77237606 275.38574219]
[17.38694382 267.77221680]
[24.91788483 262.00845337]
[33.77771378 258.56060791]
[43.27064514 257.71356201]
[47.46808243 243.31282043]
[51.66551590 228.91206360]
[50.50876999 221.55461121]
[56.11478043 214.24481201]
[60.62536621 199.93905640]
[65.13595581 185.63330078]
[69.64653778 171.32754517]
[74.15712738 157.02178955]
[78.66771698 142.71604919]
[66.51674652 134.03819275]
[57.64035416 122.03150177]
[52.90661621 107.87018585]
[52.77848434 92.93919373]
[57.26848602 78.69872284]
[65.93751526 66.54146576]
[77.93775940 57.65635681]
[92.09563446 52.91234207]
[107.02652740 52.77337265]
[111.53711700 38.46761703]
[116.04770660 24.16186142]
[120.55828857 9.85610771]
[125.06887817 -4.44964600]
[129.57946777 -18.75539970]
[119.34395599 -32.17581940]
[119.09871674 -48.88649368]
[128.74287415 -62.33214951]
[144.33470154 -67.35543823]
[148.53215027 -81.75618744]
[152.72958374 -96.15693665]
[156.92701721 -110.55767822]
[161.12445068 -124.95842743]
[165.32188416 -139.35917664]
[169.51931763 -153.75991821]
[173.71675110 -168.16067505]
[163.19091797 -181.35461426]
[162.58119202 -198.05595398]
[171.92973328 -211.70880127]
[187.40827942 -217.07102966]
[191.29057312 -231.55992126]
[195.17285156 -246.04879761]
[199.05514526 -260.53768921]
[202.93742371 -275.02658081]
[206.81971741 -289.51547241]
[206.01921082 -298.69259644]
[210.94795227 -304.27630615]
[215.14538574 -318.67703247]
[219.34281921 -333.07778931]
[214.92152405 -348.86968994]
[226.57894897 -360.40383911]
[242.32295227 -355.81488037]
[245.95744324 -339.82354736]
[233.74357605 -328.88034058]
[229.54612732 -314.47961426]
[225.34869385 -300.07885742]
[221.30859375 -285.63317871]
[217.42631531 -271.14428711]
[213.54402161 -256.65539551]
[209.66174316 -242.16651917]
[205.77944946 -227.67762756]
[201.89717102 -213.18873596]
[211.24853516 -203.60171509]
[214.65029907 -190.53631592]
[211.10508728 -177.39668274]
[201.44018555 -167.66156006]
[188.11750793 -163.96324158]
[183.92007446 -149.56248474]
[179.72262573 -135.16174316]
[175.52519226 -120.76099396]
[171.32775879 -106.36024475]
[167.13032532 -91.95949554]
[162.93289185 -77.55874634]
[158.73545837 -63.15800095]
[167.87545776 -53.36926270]
[170.99139404 -40.23275375]
[167.16038513 -27.17359734]
[157.28541565 -17.65162086]
[143.88522339 -14.24481392]
[139.37463379 0.06094080]
[134.86404419 14.36669540]
[130.35345459 28.67244911]
[125.84287262 42.97820282]
[121.33228302 57.28395844]
[133.48324585 65.96180725]
[142.35964966 77.96849823]
[147.09338379 92.12981415]
[147.22151184 107.06080627]
[142.73152161 121.30127716]
[134.06248474 133.45854187]
[122.06224060 142.34364319]
[107.90436554 147.08766174]
[92.97347260 147.22662354]
[88.46288300 161.53237915]
[83.95229340 175.83813477]
[79.44171143 190.14389038]
[74.93112183 204.44964600]
[70.42053223 218.75540161]
[66.06626129 233.10951233]
[61.86882782 247.51025391]
[57.67139435 261.91101074]
[71.94255829 277.69595337]
[73.95279694 298.74807739]
[63.06357956 316.72293091]
[43.71807480 324.59017944]
[41.43622589 339.41561890]
[39.15437317 354.24102783]
[36.87252426 369.06646729]
[34.59067154 383.89187622]
[32.30882263 398.71731567]
[30.02697182 413.54272461]
[42.99256134 405.99993896]
[57.54436111 409.63934326]
[65.43266296 422.39767456]
[62.18543625 437.04196167]
[49.64359665 445.27011108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[29 128]
[30 127]
[31 126]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[38 120]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 96]
[62 95]
[63 94]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
[72 84]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
