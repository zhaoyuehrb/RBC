%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:18:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCGCUGAACGCCCCAUAUCCGGGUUCCCGCCGCCUCCACCGCCACCGCCUCAGCCGCCUCGCACAUUUAGUCUUGCCGGGAGUGGUGUGAUUCCCGACCAAG\
) } def
/len { sequence length } bind def

/coor [
[259.92675781 164.05975342]
[246.31639099 157.75439453]
[232.70600891 151.44903564]
[219.09562683 145.14367676]
[204.97482300 140.08372498]
[190.45730591 136.30992126]
[175.93978882 132.53611755]
[161.42225647 128.76232910]
[146.90473938 124.98851776]
[136.21514893 130.86674500]
[124.01201630 127.72028351]
[117.06611633 116.72518921]
[102.66799164 112.51877594]
[87.69483948 113.41584015]
[73.90192413 119.31121063]
[60.10900497 125.20658875]
[54.45852661 139.96624756]
[39.99252701 146.33102417]
[25.29343033 140.52482605]
[19.08194923 125.99234009]
[25.04324532 111.35544586]
[39.64058685 105.29795837]
[54.21363068 111.41367340]
[68.00654602 105.51829529]
[81.79946136 99.62292480]
[83.13864136 92.24345398]
[68.20782471 90.80445099]
[53.79402161 94.95684052]
[42.66547394 84.89923859]
[45.34319305 70.14018250]
[59.29564667 64.63299561]
[71.33261108 73.58543396]
[85.81699371 77.48450470]
[87.15617371 70.10503387]
[76.31424713 59.73909378]
[60.79152298 61.63092804]
[47.71264648 53.05905533]
[43.25305939 38.07085800]
[49.51844788 23.74329948]
[63.55048370 16.84141731]
[78.72367096 20.62406731]
[87.87368774 33.30520248]
[86.68018341 48.89717102]
[97.52210999 59.26311111]
[107.17609406 66.68912506]
[112.74814606 75.81633759]
[114.16337585 85.04022980]
[111.89249420 92.87451172]
[106.87440491 98.12065125]
[121.27252960 102.32705688]
[138.96340942 97.49974060]
[150.67854309 110.47100067]
[165.19606018 114.24479675]
[179.71359253 118.01860046]
[194.23110962 121.79240417]
[208.74862671 125.56620789]
[203.09840393 111.67105865]
[208.67341614 97.74556732]
[222.35147095 91.58840179]
[236.47247314 96.64774323]
[243.12828064 110.09023285]
[238.59141541 124.38767242]
[225.40098572 131.53329468]
[239.01136780 137.83865356]
[252.62174988 144.14401245]
[266.23211670 150.44937134]
[272.23513794 146.22998047]
[279.22702026 144.18350220]
[286.45315552 144.49566650]
[293.14498901 147.09957886]
[298.60153198 151.68634033]
[302.26293945 157.74133301]
[303.76785278 164.60185242]
[302.98876953 171.52949524]
[315.25457764 180.16375732]
[327.52035522 188.79800415]
[339.78613281 197.43226624]
[358.08773804 198.58189392]
[364.98165894 214.64340210]
[377.50024414 222.90686035]
[390.01885986 231.17031860]
[402.53744507 239.43376160]
[415.05606079 247.69721985]
[427.57464600 255.96067810]
[440.09326172 264.22412109]
[455.52410889 260.80880737]
[468.80526733 269.37542725]
[472.05722046 284.84152222]
[463.35070801 298.03134155]
[447.85107422 301.11962891]
[434.75402832 292.27413940]
[431.82980347 276.74273682]
[419.31118774 268.47927856]
[406.79260254 260.21582031]
[394.27401733 251.95236206]
[381.75540161 243.68890381]
[369.23681641 235.42546082]
[356.71820068 227.16200256]
[344.70245361 229.26974487]
[334.17126465 222.34799194]
[331.15188599 209.69805908]
[318.88610840 201.06379700]
[306.62030029 192.42953491]
[294.35452271 183.79528809]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 66]
[2 65]
[3 64]
[4 63]
[5 56]
[6 55]
[7 54]
[8 53]
[9 52]
[12 50]
[13 49]
[14 25]
[15 24]
[16 23]
[34 44]
[35 43]
[74 104]
[75 103]
[76 102]
[77 101]
[79 98]
[80 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
