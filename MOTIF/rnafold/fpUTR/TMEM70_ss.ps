%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:21:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGCGCAGGCAGCCCAGCUGCCAGUCAGGCGUCCCGGGCUGGGCAUGCGCCACUUGUGCGGCAGUCGGGUGGGAAGCCGUGUCUCGCAGUCGUGGACUCGUGCAGCUGGGGCGUCCGCAGCCGCUCGUCACCCGCGUG\
) } def
/len { sequence length } bind def

/coor [
[-114.57287598 141.06822205]
[-129.46038818 142.90179443]
[-137.67272949 147.08674622]
[-144.69953918 144.60655212]
[-159.62420654 146.10798645]
[-174.54887390 147.60942078]
[-189.47354126 149.11085510]
[-204.39820862 150.61228943]
[-219.32287598 152.11372375]
[-234.24754333 153.61515808]
[-249.17221069 155.11659241]
[-263.80142212 158.43113708]
[-277.91577148 163.50904846]
[-292.03012085 168.58697510]
[-306.14443970 173.66490173]
[-320.25878906 178.74282837]
[-334.37313843 183.82075500]
[-346.58319092 199.79354858]
[-365.44287109 195.74710083]
[-379.31698608 201.44873047]
[-386.13189697 207.65466309]
[-393.56430054 207.11903381]
[-407.56201172 212.51014709]
[-421.55972290 217.90126038]
[-429.35668945 231.92219543]
[-445.20315552 234.42596436]
[-456.94308472 223.49188232]
[-455.57055664 207.50764465]
[-442.13851929 198.73498535]
[-426.95083618 203.90354919]
[-412.95312500 198.51243591]
[-398.95541382 193.12132263]
[-385.01861572 187.57460022]
[-371.14450073 181.87297058]
[-368.02917480 172.03771973]
[-359.81546021 165.43678284]
[-349.10089111 164.47082520]
[-339.45104980 169.70640564]
[-325.33673096 164.62847900]
[-311.22238159 159.55056763]
[-297.10803223 154.47264099]
[-282.99368286 149.39471436]
[-268.87933350 144.31678772]
[-267.04577637 129.42927551]
[-279.50619507 121.07836151]
[-291.96664429 112.72744751]
[-308.35638428 112.17257690]
[-315.83090210 97.57588196]
[-306.70104980 83.95319366]
[-290.35882568 85.31835938]
[-283.61572266 100.26702118]
[-271.15530396 108.61793518]
[-258.69485474 116.96884918]
[-250.80696106 128.67605591]
[-250.67364502 140.19192505]
[-235.74897766 138.69049072]
[-220.82431030 137.18905640]
[-205.89964294 135.68762207]
[-190.97497559 134.18618774]
[-176.05030823 132.68475342]
[-161.12564087 131.18331909]
[-146.20097351 129.68188477]
[-131.29396057 128.01428223]
[-116.40644836 126.18070984]
[-108.64157867 110.39079285]
[-92.84185791 102.29729462]
[-75.18258667 105.27323151]
[-62.69194794 118.32346344]
[-47.90089035 115.82852173]
[-33.10983658 113.33358765]
[-18.31878471 110.83864594]
[-3.52773070 108.34370422]
[11.26332283 105.84876251]
[26.05437660 103.35382080]
[34.45179367 91.10559845]
[49.41648483 88.36466980]
[62.20661163 97.25569916]
[76.99766541 94.76075745]
[91.78871918 92.26581573]
[105.53237152 86.25650024]
[117.40719604 77.09197235]
[123.60491943 62.53522873]
[138.40777588 60.88453293]
[150.28259277 51.72000504]
[162.15742493 42.55547714]
[167.09060669 34.76958084]
[174.40043640 33.32257462]
[186.47648621 24.42487717]
[198.55253601 15.52718163]
[204.62303162 0.29297566]
[220.88822937 -1.79883206]
[230.61587524 11.40363026]
[223.79899597 26.31880188]
[207.45022583 27.60323143]
[195.37417603 36.50092697]
[183.29812622 45.39862442]
[171.32194519 54.43029785]
[159.44712830 63.59482574]
[147.57231140 72.75935364]
[142.22395325 86.66059113]
[126.57172394 88.96678925]
[114.69690704 98.13132477]
[115.61368561 105.57508087]
[130.50123596 103.74173737]
[132.33433533 118.62931061]
[117.44725800 120.46259308]
[118.36404419 127.90634918]
[132.10769653 133.91566467]
[145.85134888 139.92498779]
[159.59501648 145.93431091]
[175.33906555 144.37368774]
[183.90061951 156.56176758]
[197.64427185 162.57107544]
[214.57907104 163.37664795]
[218.49299622 179.87263489]
[203.72517395 188.20014954]
[191.63494873 176.31474304]
[177.89129639 170.30541992]
[163.13027954 172.29585266]
[153.58569336 159.67796326]
[139.84204102 153.66864014]
[126.09838104 147.65931702]
[112.35472107 141.65000916]
[94.87937164 125.75866699]
[94.28366089 107.05686951]
[79.49260712 109.55181122]
[64.70155334 112.04675293]
[55.53559113 124.64131165]
[40.49981689 126.96083069]
[28.54931641 118.14487457]
[13.75826359 120.63981628]
[-1.03279054 123.13475800]
[-15.82384396 125.62969971]
[-30.61489868 128.12463379]
[-45.40595245 130.61958313]
[-60.19700623 133.11451721]
[-64.27498627 145.02873230]
[-73.00458527 154.00381470]
[-84.66535187 158.35980225]
[-96.99678802 157.31842041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[4 62]
[5 61]
[6 60]
[7 59]
[8 58]
[9 57]
[10 56]
[11 55]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[19 34]
[20 33]
[22 32]
[23 31]
[24 30]
[44 53]
[45 52]
[46 51]
[68 136]
[69 135]
[70 134]
[71 133]
[72 132]
[73 131]
[74 130]
[77 127]
[78 126]
[79 125]
[80 102]
[81 101]
[83 99]
[84 98]
[85 97]
[87 96]
[88 95]
[89 94]
[107 123]
[108 122]
[109 121]
[110 120]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
