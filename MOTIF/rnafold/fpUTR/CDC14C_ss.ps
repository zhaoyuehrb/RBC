%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGACUGGCCGCGGCGGCCUCCAGGAAGCGGAAAAGCAAGGGGCGGUCGAGCUGGGCCGCCGCGCCCCACUGCUCGCCGCGCUGCUCUUUGACCUCGCAGGGUGUGAAGAAG\
) } def
/len { sequence length } bind def

/coor [
[81.21693420 134.23683167]
[71.61066437 145.75723267]
[62.00439072 157.27761841]
[64.75691986 170.54847717]
[59.39949417 182.78489685]
[48.11613846 189.56239319]
[35.18694305 188.57385254]
[25.26413536 199.82276917]
[15.34133053 211.07167053]
[5.41852474 222.32057190]
[-4.50428104 233.56948853]
[-10.44787598 249.44746399]
[-27.35068130 248.13160706]
[-30.76541328 231.52510071]
[-15.75318909 223.64668274]
[-5.83038330 212.39776611]
[4.09242249 201.14886475]
[14.01522827 189.89996338]
[23.93803406 178.65104675]
[22.13553238 161.99443054]
[33.10078812 148.88632202]
[50.48399734 147.67135620]
[60.09026718 136.15095520]
[69.69654083 124.63055420]
[65.75046539 118.75988770]
[62.92816544 112.27367401]
[61.32225037 105.38475037]
[60.98540497 98.31914520]
[46.40229416 94.80732727]
[33.05368805 103.26843262]
[17.65037918 99.73096466]
[9.33087730 86.29364777]
[13.03099537 70.92860413]
[26.55551910 62.75163651]
[41.88058853 66.61399841]
[49.91410828 80.22421265]
[64.49722290 83.73603058]
[73.88372803 70.96718597]
[87.57138062 62.97982407]
[103.30593109 61.08940125]
[107.42267609 46.66537857]
[103.76992035 31.27161217]
[114.70311737 21.15654564]
[118.81985474 6.73252201]
[122.93659210 -7.69150114]
[127.05333710 -22.11552429]
[126.40394592 -31.37190437]
[131.49018860 -36.88029861]
[136.00630188 -51.18431091]
[140.52241516 -65.48831940]
[145.03852844 -79.79233551]
[149.55462646 -94.09634399]
[153.67137146 -108.52037048]
[157.38555908 -123.05325317]
[161.09974670 -137.58613586]
[164.81393433 -152.11903381]
[160.73468018 -167.40530396]
[171.38247681 -177.82038879]
[175.09666443 -192.35327148]
[173.16058350 -209.19630432]
[188.80941772 -215.71934509]
[199.40956116 -202.48782349]
[189.62954712 -188.63908386]
[185.91535950 -174.10620117]
[190.26028442 -159.85940552]
[179.34683228 -148.40484619]
[175.63264465 -133.87194824]
[171.91845703 -119.33906555]
[168.20425415 -104.80618286]
[169.90441895 -100.20503998]
[168.62969971 -94.48322296]
[163.85864258 -89.58023834]
[159.34252930 -75.27622223]
[154.82641602 -60.97220993]
[150.31031799 -46.66820145]
[145.79420471 -32.36418915]
[141.47735596 -17.99878311]
[137.36062622 -3.57476020]
[133.24388123 10.84926319]
[129.12713623 25.27328682]
[133.07434082 39.63534927]
[121.84669495 50.78211594]
[117.72995758 65.20613861]
[133.25390625 79.52703857]
[139.05044556 99.83666992]
[133.42399597 120.19408417]
[144.53387451 130.27229309]
[155.64376831 140.35050964]
[166.75366211 150.42871094]
[177.86355591 160.50692749]
[195.89337158 163.91197205]
[200.73574829 180.71672058]
[212.12150574 190.48220825]
[223.50726318 200.24768066]
[234.89300537 210.01316833]
[251.10221863 212.50183105]
[256.79864502 227.87983704]
[246.12226868 240.32760620]
[230.05604553 237.03994751]
[225.12753296 221.39892578]
[213.74177551 211.63343811]
[202.35601807 201.86795044]
[190.97027588 192.10247803]
[178.79980469 192.69296265]
[169.22006226 184.52757263]
[167.78533936 171.61682129]
[156.67544556 161.53860474]
[145.56555176 151.46038818]
[134.45567322 141.38218689]
[123.34577942 131.30397034]
[113.57911682 136.61381531]
[102.71201324 138.95649719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 24]
[2 23]
[3 22]
[7 19]
[8 18]
[9 17]
[10 16]
[11 15]
[28 37]
[29 36]
[40 83]
[41 82]
[43 80]
[44 79]
[45 78]
[46 77]
[48 76]
[49 75]
[50 74]
[51 73]
[52 72]
[53 69]
[54 68]
[55 67]
[56 66]
[58 64]
[59 63]
[86 110]
[87 109]
[88 108]
[89 107]
[90 106]
[92 103]
[93 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
