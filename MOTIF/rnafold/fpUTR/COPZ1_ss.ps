%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUGGGAACGUAUGGCCAAUCAGCGGCGGCGUUUCUUUUGCGGCUCCACGUCGGCACCAGCUGCGGGGCAAGAUGGAGGCGCUGAUUUUGCCCCAGUGGGACUAGGGGAAGGUAUCUGGUUUACCAGUGGUG\
) } def
/len { sequence length } bind def

/coor [
[104.98748016 157.59193420]
[93.67376709 157.46029663]
[82.60239410 155.12739563]
[72.19751740 150.68263245]
[62.85771942 144.29624939]
[54.94081116 136.21292114]
[42.12846375 144.01316833]
[29.31611633 151.81341553]
[16.50377083 159.61364746]
[3.69142342 167.41389465]
[-9.12092304 175.21414185]
[-21.93326950 183.01437378]
[-34.74561691 190.81462097]
[-36.73048401 201.62617493]
[-44.22236252 209.36549377]
[-54.53240585 211.60643005]
[-64.14979553 207.83605957]
[-77.31118011 215.03176880]
[-90.47255707 222.22746277]
[-93.36799622 237.59465027]
[-105.49656677 247.46540833]
[-121.13152313 247.17906189]
[-132.89053345 236.87081909]
[-135.22132874 221.40791321]
[-127.02340698 208.09146118]
[-112.16754913 203.20907593]
[-97.66825867 209.06608582]
[-84.50687408 201.87037659]
[-71.34549713 194.67468262]
[-62.63669205 177.47093201]
[-42.54585648 178.00227356]
[-29.73351097 170.20202637]
[-16.92116547 162.40179443]
[-4.10881853 154.60154724]
[8.70352840 146.80130005]
[21.51587486 139.00106812]
[34.32822037 131.20082092]
[47.14056778 123.40058136]
[42.19315720 100.27512360]
[46.92022324 77.10362244]
[60.53065491 57.76402664]
[80.74662018 45.49298859]
[77.62794495 30.82077599]
[74.50926971 16.14856148]
[64.07183075 4.25863123]
[68.99390411 -9.79919434]
[65.87522888 -24.47140884]
[62.75655365 -39.14362335]
[59.63787842 -53.81583786]
[56.51920319 -68.48805237]
[52.29306412 -73.76432800]
[51.54970551 -79.51536560]
[53.61357117 -83.91486359]
[51.18090439 -98.71629333]
[39.18006897 -112.62667847]
[45.89862442 -128.79627991]
[43.12220001 -143.53709412]
[32.96425629 -155.66667175]
[38.21210480 -169.60615540]
[35.43568039 -184.34696960]
[22.24525261 -193.05259705]
[19.15591621 -208.55200195]
[28.00052452 -221.64965820]
[43.53172302 -224.57495117]
[56.53513336 -215.59236145]
[59.29605865 -200.03109741]
[50.17649078 -187.12338257]
[52.95291519 -172.38258362]
[62.91227341 -161.30735779]
[57.86301041 -146.31350708]
[60.63943481 -131.57270813]
[70.48520660 -124.44688416]
[72.87640381 -112.12077332]
[65.98232269 -101.14895630]
[68.41499329 -86.34753418]
[71.19142151 -71.60672760]
[74.31009674 -56.93451309]
[77.42877197 -42.26229858]
[80.54744720 -27.59008408]
[83.66612244 -12.91786957]
[93.88049316 -2.07739472]
[89.18148804 13.02988625]
[92.30016327 27.70210075]
[95.41883850 42.37431335]
[106.38524628 42.54623413]
[117.12180328 44.78631973]
[127.24202728 49.01393509]
[136.38160706 55.07690048]
[144.21157837 62.75696564]
[150.45004272 71.77767181]
[154.87246704 81.81429291]
[157.31962585 92.50555420]
[157.70346069 103.46659088]
[156.01013184 114.30284119]
[152.30061340 124.62422943]
[164.92799377 132.72048950]
[177.55535889 140.81674194]
[193.34890747 141.75195312]
[199.88682556 155.13494873]
[212.51420593 163.23121643]
[225.14157104 171.32746887]
[237.95391846 179.12771606]
[250.94430542 186.62771606]
[263.93469238 194.12771606]
[276.92504883 201.62771606]
[289.91543579 209.12771606]
[302.90582275 216.62771606]
[315.89620972 224.12771606]
[330.01644897 217.69357300]
[345.21511841 220.82089233]
[355.64801025 232.30715942]
[357.30346680 247.73567200]
[349.54492188 261.17385864]
[335.35571289 267.45443726]
[320.19186401 264.16244507]
[309.88418579 252.56365967]
[308.39620972 237.11810303]
[295.40582275 229.61810303]
[282.41543579 222.11810303]
[269.42504883 214.61810303]
[256.43469238 207.11810303]
[243.44430542 199.61810303]
[230.45391846 192.11810303]
[225.60913086 192.49642944]
[220.49052429 189.77119446]
[217.04531860 183.95484924]
[204.41793823 175.85858154]
[191.79055786 167.76232910]
[176.90022278 167.40623474]
[169.45910645 153.44412231]
[156.83172607 145.34786987]
[144.20434570 137.25160217]
[136.10150146 145.14851379]
[126.61562347 151.31584167]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 38]
[7 37]
[8 36]
[9 35]
[10 34]
[11 33]
[12 32]
[13 31]
[17 29]
[18 28]
[19 27]
[42 84]
[43 83]
[44 82]
[46 80]
[47 79]
[48 78]
[49 77]
[50 76]
[53 75]
[54 74]
[56 71]
[57 70]
[59 68]
[60 67]
[95 132]
[96 131]
[97 130]
[99 128]
[100 127]
[101 126]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
