%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:10:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCGGGAGAGACCUUGGAGCGCGCGGGAAAGAGACCAAUAUAAACUGUGGCGGGAUAGUUUUCGGGUCCUUGUCCAGUGAAACACCCUCGGCUGGGAAGUCAGUUCGUUCUCUCCUCUCCUCUCUUCUUGUUUGAAC\
) } def
/len { sequence length } bind def

/coor [
[182.00392151 361.27648926]
[176.41950989 347.35476685]
[163.93597412 343.97460938]
[155.57373047 333.85427856]
[154.57853699 320.56823730]
[161.54063416 308.98052979]
[156.27000427 294.93701172]
[150.99938965 280.89346313]
[145.72875977 266.84994507]
[140.45814514 252.80642700]
[135.18751526 238.76290894]
[129.91690063 224.71937561]
[124.64627838 210.67585754]
[114.36402130 209.07244873]
[105.63146210 203.26425171]
[100.09254456 194.26295471]
[98.82400513 183.68859863]
[102.12670898 173.47807312]
[109.45790100 165.53036499]
[105.14391327 151.16409302]
[100.82992554 136.79783630]
[96.51593781 122.43157959]
[80.27110291 111.93162537]
[77.84252167 92.43884277]
[67.23592377 81.83223724]
[56.62931824 71.22563934]
[41.40002441 66.93853760]
[37.87158203 52.46789932]
[27.26498222 41.86129761]
[16.65838051 31.25469589]
[5.93344259 20.76776505]
[-4.90848064 10.40182590]
[-15.75040340 0.03588644]
[-24.18969345 -3.67460012]
[-26.71600342 -10.68636513]
[-37.32260513 -21.29296684]
[-47.92920685 -31.89956856]
[-58.53580856 -42.50617218]
[-70.61006927 -38.92282486]
[-82.98546600 -40.83516312]
[-93.29485321 -47.81467056]
[-99.59313965 -58.46966171]
[-100.72413635 -70.72236633]
[-96.53236389 -82.21402740]
[-106.65242004 -93.28581238]
[-116.77248383 -104.35759735]
[-126.89253998 -115.42938232]
[-137.01260376 -126.50116730]
[-147.13265991 -137.57295227]
[-157.25271606 -148.64472961]
[-173.05035400 -149.10331726]
[-183.83576965 -160.65538025]
[-183.21018982 -176.44728088]
[-171.54473877 -187.10997009]
[-155.76034546 -186.31745911]
[-145.22158813 -174.53993225]
[-146.18092346 -158.76480103]
[-136.06086731 -147.69300842]
[-125.94081116 -136.62123108]
[-115.82075500 -125.54943848]
[-105.70069885 -114.47765350]
[-95.58063507 -103.40586853]
[-85.46057892 -92.33408356]
[-68.09360504 -95.15434265]
[-52.34309769 -86.96855927]
[-44.53456879 -70.85392761]
[-47.92920685 -53.11277390]
[-37.32260513 -42.50617218]
[-26.71600342 -31.89956856]
[-16.10940170 -21.29296684]
[-5.38446379 -10.80603695]
[5.45745945 -0.44009677]
[16.29938126 9.92584324]
[23.36606789 12.29418659]
[27.26498222 20.64809418]
[37.87158203 31.25469589]
[48.47818375 41.86129761]
[62.94882202 45.38973999]
[67.23592377 60.61903381]
[77.84252167 71.22563934]
[88.44912720 81.83223724]
[82.69975281 67.97782135]
[89.05067444 54.38864517]
[103.36708069 49.91199112]
[116.32821655 57.46241379]
[119.49567413 72.12417603]
[110.80764771 84.35144043]
[123.50851440 76.37095642]
[136.20938110 68.39047241]
[139.48136902 52.92860031]
[152.77359009 44.37919998]
[168.20001221 47.81448364]
[176.60839844 61.19635773]
[173.01020813 76.58559418]
[159.54019165 84.85202789]
[144.18984985 81.09133911]
[131.48899841 89.07182312]
[118.78813171 97.05229950]
[133.22396851 92.97718811]
[146.66581726 99.63426208]
[152.17362976 113.58647156]
[146.90368652 127.63024902]
[133.57690430 134.51477051]
[119.07389832 130.68553162]
[110.88219452 118.11758423]
[115.19618988 132.48384094]
[119.51017761 146.85011292]
[123.82416534 161.21636963]
[141.96459961 169.67137146]
[148.07287598 188.41336060]
[138.68980408 205.40524292]
[143.96041870 219.44876099]
[149.23104858 233.49227905]
[154.50166321 247.53581238]
[159.77229309 261.57931519]
[165.04290771 275.62286377]
[170.31353760 289.66638184]
[175.58415222 303.70989990]
[191.61418152 310.61465454]
[197.61183167 326.64672852]
[190.34124756 341.77035522]
[195.92564392 355.69207764]
[207.65190125 358.17739868]
[216.60536194 365.96490479]
[220.61000061 377.00708008]
[218.76812744 388.48577881]
[211.65856934 397.53134155]
[216.61274719 411.68960571]
[221.56694031 425.84783936]
[235.91305542 432.47839355]
[241.29031372 447.33978271]
[234.50845337 461.61499023]
[219.59104919 466.83483887]
[205.38832092 459.90243530]
[200.32650757 444.93066406]
[207.40869141 430.80203247]
[202.45449829 416.64376831]
[197.50030518 402.48553467]
[180.59342957 395.62438965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[6 118]
[7 117]
[8 116]
[9 115]
[10 114]
[11 113]
[12 112]
[13 111]
[19 108]
[20 107]
[21 106]
[22 105]
[24 81]
[25 80]
[26 79]
[28 77]
[29 76]
[30 75]
[31 73]
[32 72]
[33 71]
[35 70]
[36 69]
[37 68]
[38 67]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[49 58]
[50 57]
[87 98]
[88 97]
[89 96]
[127 138]
[128 137]
[129 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
