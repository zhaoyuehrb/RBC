%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:11:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCUGGCGGUGGGGCCUGGUCCUGCUAUAUGCCGGCGCCUCGGCUAGAGUGAGCGGCGGCGACGCCUCUUUCCUCCGUCUCUUUCCCUGUCGCUGCGAGAGCGAGCGGGCGGCGGAGGCGGCGGCGGCGGCGGGGCCGGG\
) } def
/len { sequence length } bind def

/coor [
[-40.52701187 517.50976562]
[-40.56846237 532.50970459]
[-52.18248367 542.00256348]
[-66.89072418 539.05847168]
[-73.95601654 525.82678223]
[-81.12528992 539.00262451]
[-88.29457092 552.17840576]
[-95.46385193 565.35418701]
[-102.63313293 578.52996826]
[-101.67796326 594.90130615]
[-115.52519226 603.68682861]
[-129.92997742 595.84887695]
[-130.07389832 579.45031738]
[-115.80892181 571.36071777]
[-108.63964081 558.18487549]
[-101.47035980 545.00909424]
[-94.30107880 531.83331299]
[-87.13180542 518.65753174]
[-80.68636322 505.11291504]
[-74.98366547 491.23922729]
[-69.28096771 477.36553955]
[-63.57826614 463.49185181]
[-57.87556839 449.61816406]
[-52.17286682 435.74447632]
[-46.47016907 421.87078857]
[-40.76747131 407.99710083]
[-35.06477356 394.12341309]
[-29.36207390 380.24972534]
[-23.65937424 366.37603760]
[-17.95667648 352.50234985]
[-24.54786110 341.38058472]
[-23.49109077 328.29998779]
[-14.94993496 318.08114624]
[-1.88736761 314.62011719]
[4.11455870 300.87322998]
[10.11648464 287.12634277]
[16.11841202 273.37945557]
[22.12033844 259.63256836]
[20.12196159 244.87261963]
[32.73472214 235.32124329]
[38.73664856 221.57435608]
[44.73857498 207.82746887]
[50.74050140 194.08058167]
[56.74242783 180.33369446]
[62.74435425 166.58680725]
[60.74597931 151.82687378]
[73.35873413 142.27549744]
[79.36066437 128.52861023]
[85.36258698 114.78172302]
[73.48203278 95.36816406]
[86.08881378 70.03556061]
[81.29928589 55.82076645]
[76.50976562 41.60596848]
[62.41984940 29.80370903]
[66.46185303 12.75903511]
[61.36549377 -1.34866428]
[56.26913834 -15.45636272]
[44.30340195 -25.80680656]
[47.25625610 -40.40577698]
[42.15990067 -54.51347351]
[37.06354523 -68.62117767]
[31.96719170 -82.72887421]
[19.08815384 -92.88084412]
[21.70796013 -109.06937408]
[37.13157654 -114.64109802]
[49.49250793 -103.86430359]
[46.07489014 -87.82522583]
[51.17124557 -73.71752930]
[56.26760101 -59.60982895]
[61.36395264 -45.50213242]
[72.96516418 -36.16076660]
[70.37683868 -20.55271721]
[75.47319031 -6.44501877]
[80.56954956 7.66267967]
[91.41911316 13.11585903]
[95.75531769 24.88731003]
[90.72456360 36.81644440]
[95.51408386 51.03124237]
[100.30361176 65.24604034]
[107.04060364 68.54193878]
[109.65233612 53.77105713]
[109.15248871 38.77938843]
[119.81106567 28.22501755]
[134.79710388 28.87212753]
[144.50621033 40.30599213]
[142.71592712 55.19877243]
[130.57307434 64.00597382]
[120.51458740 75.13372803]
[127.25157928 78.42961884]
[141.41366577 73.48638916]
[155.57574463 68.54315948]
[162.49667358 54.58828735]
[176.92944336 49.77689743]
[190.19064331 56.46094131]
[204.35272217 51.51771545]
[218.51480103 46.57448578]
[232.67687988 41.63125610]
[246.83895874 36.68802643]
[255.07789612 22.92214584]
[270.99597168 20.92360497]
[282.38220215 32.22551346]
[280.50204468 48.15801239]
[266.79779053 56.49905777]
[251.78218079 50.85010529]
[237.62010193 55.79333496]
[223.45802307 60.73656464]
[209.29594421 65.67979431]
[195.13386536 70.62302399]
[188.91241455 84.10742188]
[174.62046814 89.32230377]
[160.51896667 82.70524597]
[146.35688782 87.64846802]
[132.19480896 92.59169769]
[120.69757843 117.21240234]
[99.10947418 120.78364563]
[93.10755157 134.53053284]
[87.10562134 148.27742004]
[88.67470551 164.02062988]
[76.49124146 172.58874512]
[70.48931122 186.33561707]
[64.48738861 200.08250427]
[58.48546219 213.82939148]
[52.48353577 227.57627869]
[46.48160934 241.32316589]
[48.05068588 257.06637573]
[35.86722565 265.63449097]
[29.86529732 279.38137817]
[23.86337090 293.12826538]
[17.86144447 306.87515259]
[11.85951900 320.62203979]
[18.54914665 336.74743652]
[11.67598534 352.42840576]
[-4.08298731 358.20504761]
[-9.78568649 372.07873535]
[-15.48838520 385.95242310]
[-21.19108391 399.82611084]
[-26.89378166 413.69979858]
[-32.59648132 427.57348633]
[-38.29917908 441.44717407]
[-44.00188065 455.32086182]
[-49.70457840 469.19454956]
[-55.40727615 483.06823730]
[-61.10997391 496.94192505]
[-66.81267548 510.81561279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 18]
[6 17]
[7 16]
[8 15]
[9 14]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 136]
[28 135]
[29 134]
[30 133]
[34 130]
[35 129]
[36 128]
[37 127]
[38 126]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
[47 117]
[48 116]
[49 115]
[51 79]
[52 78]
[53 77]
[55 74]
[56 73]
[57 72]
[59 70]
[60 69]
[61 68]
[62 67]
[89 113]
[90 112]
[91 111]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
