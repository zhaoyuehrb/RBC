%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCGGUUGCAGCUGGCAGUGCGGCGGGCGCGGGCGCCGGAGCGAGGGGCCCGCGGGCCCGGCUAUUAAUAACGCGGCCGCCAGCCCGGGGUCGCGCAGCC\
) } def
/len { sequence length } bind def

/coor [
[59.32813644 441.44390869]
[43.00033569 439.91583252]
[36.40662003 424.90069580]
[46.33003998 411.84472656]
[47.72772980 396.91000366]
[49.12541962 381.97525024]
[50.52310944 367.04052734]
[51.92079544 352.10577393]
[53.31848526 337.17102051]
[50.76261139 330.09338379]
[54.99895859 321.79605103]
[56.86044312 306.91198730]
[54.52591705 299.75830078]
[59.01826477 291.59671021]
[61.34173584 276.77774048]
[63.66520691 261.95880127]
[54.71144104 250.11119080]
[56.85667038 235.04956055]
[69.34423065 225.73835754]
[71.66770172 210.91940308]
[69.55679321 203.69654846]
[74.30078888 195.67861938]
[77.08399963 180.93910217]
[79.86721802 166.19956970]
[74.62579346 152.25765991]
[84.78932190 140.13276672]
[87.57254028 125.39324188]
[90.35575867 110.65370941]
[87.34365082 95.95925140]
[78.98587036 83.50342560]
[70.62808228 71.04760742]
[62.27029800 58.59178925]
[53.91251755 46.13596725]
[45.55473328 33.68014908]
[31.44051361 26.53176498]
[30.77402115 11.65207863]
[22.41623688 -0.80374151]
[6.85001135 -2.29592776]
[-4.07833433 -13.48097420]
[-5.20876884 -29.07764435]
[3.99246430 -41.72166824]
[19.18082428 -45.44292450]
[33.18483353 -38.48434830]
[39.39222336 -24.13156700]
[34.87205887 -9.16152573]
[43.22984314 3.29429412]
[56.74625397 9.55175591]
[58.01055145 25.32236481]
[66.36833191 37.77818298]
[74.72612000 50.23400497]
[83.08390045 62.68982315]
[91.44168854 75.14564514]
[99.79946899 87.60146332]
[102.56985474 87.68919373]
[105.29000854 88.39681244]
[117.87429810 80.23374939]
[130.45858765 72.07068634]
[143.04287720 63.90762711]
[155.49870300 55.54984283]
[167.82304382 46.99935913]
[165.87854004 31.81787300]
[171.22280884 17.47572517]
[182.62780762 7.26863241]
[197.47273254 3.54211211]
[212.34631348 7.15249062]
[223.83074951 17.27013016]
[229.28695679 31.57007027]
[227.46116638 46.76628876]
[218.77293396 59.36680603]
[205.21873474 66.47612000]
[189.91323853 66.46055603]
[176.37351990 59.32369232]
[164.04919434 67.87417603]
[160.28153992 74.38803101]
[151.20594788 76.49192047]
[138.62165833 84.65498352]
[126.03736115 92.81804657]
[113.45307159 100.98110962]
[105.09528351 113.43692780]
[102.31207275 128.17645264]
[99.52885437 142.91598511]
[104.57120514 157.91215515]
[94.60674286 168.98278809]
[91.82353210 183.72232056]
[89.04031372 198.46183777]
[86.48666382 213.24287415]
[84.16318512 228.06182861]
[93.20174408 240.74812317]
[90.63431549 255.74356079]
[78.48416901 264.28225708]
[76.16069031 279.10122681]
[73.83721924 293.92016602]
[71.74449158 308.77346802]
[69.88301086 323.65753174]
[68.25322723 338.56872559]
[66.85553741 353.50344849]
[65.45784760 368.43820190]
[64.06015778 383.37295532]
[62.66247177 398.30767822]
[61.26478195 413.24243164]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[9 95]
[11 94]
[12 93]
[14 92]
[15 91]
[16 90]
[19 87]
[20 86]
[22 85]
[23 84]
[24 83]
[26 81]
[27 80]
[28 79]
[29 53]
[30 52]
[31 51]
[32 50]
[33 49]
[34 48]
[36 46]
[37 45]
[55 78]
[56 77]
[57 76]
[58 75]
[59 73]
[60 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
