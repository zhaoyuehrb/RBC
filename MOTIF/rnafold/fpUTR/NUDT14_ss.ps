%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAUGCUCAGAGCCGCGGUCACGCGCCCGCCCGAAGGCUCCUGUCGGGACAGGGCGCCGCCCCGUGUCGGCCCCCGCAGAGCUCGCGGCCCCCGCCUGUCCGGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[185.33717346 211.77471924]
[184.33396912 206.37188721]
[174.55335999 194.99913025]
[164.77275085 183.62637329]
[154.99212646 172.25361633]
[138.17944336 167.43057251]
[134.75648499 149.40161133]
[124.66886902 138.30026245]
[114.58126068 127.19889832]
[101.41241455 130.82853699]
[87.96685028 128.41824341]
[76.87882233 120.44026184]
[70.32068634 108.45762634]
[69.57731628 94.81797028]
[74.79434967 82.19358063]
[65.01374054 70.82082367]
[55.23312759 59.44806671]
[45.45251465 48.07530975]
[35.21421814 37.11277008]
[24.53542519 26.57885170]
[13.85663319 16.04493523]
[-0.91706449 20.00538063]
[-15.59263420 16.06527328]
[-26.25473785 5.37949133]
[-30.11081123 -9.11142540]
[-26.22201920 -23.48998260]
[-36.90081024 -34.02389908]
[-47.57960129 -44.55781555]
[-58.25839615 -55.09173203]
[-68.93718719 -65.62564850]
[-79.61598206 -76.15956879]
[-99.27161407 -80.20660400]
[-103.89681244 -98.89868927]
[-115.13492584 -108.83372498]
[-126.37303162 -118.76876068]
[-137.61112976 -128.70379639]
[-148.84924316 -138.63883972]
[-160.22200012 -148.41944885]
[-171.72727966 -158.04382324]
[-187.96594238 -160.33244324]
[-193.85151672 -175.63903809]
[-183.32943726 -188.21749878]
[-167.22390747 -185.12817383]
[-162.10292053 -169.54910278]
[-150.59764099 -159.92474365]
[-143.35003662 -158.02095032]
[-138.91419983 -149.87693787]
[-127.67609406 -139.94190979]
[-116.43798828 -130.00686646]
[-105.19988251 -120.07183075]
[-93.96177673 -110.13679504]
[-83.69330597 -111.68117523]
[-74.10124207 -107.15749359]
[-68.53314209 -97.87254333]
[-69.08206177 -86.83835602]
[-58.40327072 -76.30444336]
[-47.72447968 -65.77052307]
[-37.04568481 -55.23660660]
[-26.36689377 -44.70269012]
[-15.68810177 -34.16877365]
[-1.36400247 -38.25359726]
[13.17823124 -34.59580994]
[24.00864601 -24.08065414]
[28.14883423 -9.46026993]
[24.39054871 5.36614370]
[35.06933975 15.90006065]
[45.74813461 26.43397713]
[49.39160919 26.72718620]
[53.05521774 28.88663292]
[55.82207489 32.89185333]
[56.82527161 38.29469681]
[66.60588074 49.66745377]
[76.38649750 61.04021072]
[86.16711426 72.41296387]
[101.84661102 69.19442749]
[117.02935028 74.26297760]
[127.63098145 86.25510406]
[130.79953003 101.94477844]
[125.68261719 117.11128998]
[135.77023315 128.21264648]
[145.85783386 139.31401062]
[158.76646423 140.73672485]
[166.93998718 150.30509949]
[166.36489868 162.47299194]
[176.14550781 173.84574890]
[185.92611694 185.21850586]
[195.70672607 196.59126282]
[205.94502258 207.55380249]
[216.62382507 218.08772278]
[227.30261230 228.62164307]
[237.98139954 239.15556335]
[248.66020203 249.68946838]
[263.91842651 253.87246704]
[267.54559326 268.31866455]
[278.22439575 278.85256958]
[288.90319824 289.38650513]
[299.58197021 299.92041016]
[315.38220215 299.56185913]
[326.75030518 310.54101562]
[326.94177246 326.34414673]
[315.84304810 337.59555054]
[300.03875732 337.61993408]
[288.90536499 326.40286255]
[289.04806519 310.59921265]
[278.36926270 300.06527710]
[267.69049072 289.53137207]
[257.01168823 278.99746704]
[242.51728821 275.56793213]
[238.12628174 260.36825562]
[227.44749451 249.83435059]
[216.76869202 239.30043030]
[206.08990479 228.76651001]
[195.41111755 218.23260498]
[191.76763916 217.93939209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 85]
[5 84]
[7 81]
[8 80]
[9 79]
[15 74]
[16 73]
[17 72]
[18 71]
[19 67]
[20 66]
[21 65]
[26 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 55]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 45]
[39 44]
[88 113]
[89 112]
[90 111]
[91 110]
[92 109]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
