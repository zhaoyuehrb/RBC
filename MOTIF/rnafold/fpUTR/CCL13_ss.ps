%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:36:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGCCGGCGGAACAGCCAGAGGAGCAGAGAGGCAAAGAAACAUUGUGAAAUCUCCAACUCUUAACCUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[84.87322235 189.15171814]
[86.43630981 173.59245300]
[97.67102051 162.71517944]
[96.43233490 147.76640320]
[95.19364166 132.81764221]
[93.95495605 117.86887360]
[85.49184418 114.21726990]
[79.24842072 106.55502319]
[77.09742737 96.22527313]
[63.12355804 101.67789459]
[49.14969254 107.13051605]
[43.03150177 121.70251465]
[28.36993027 127.60284424]
[13.86342621 121.33093262]
[8.11844158 106.60779572]
[14.54337406 92.16841125]
[29.32642555 86.57941437]
[43.69707108 93.15664673]
[57.67094040 87.70402527]
[71.64480591 82.25140381]
[82.25140381 71.64480591]
[87.70402527 57.67094040]
[93.15664673 43.69707108]
[98.60926819 29.72320747]
[89.12962341 17.71971893]
[86.94541168 2.68223333]
[92.54411316 -11.33635712]
[104.32913971 -20.60831070]
[119.07353210 -22.72221184]
[124.52615356 -36.69607925]
[129.97877502 -50.66994476]
[120.68006897 -64.63186646]
[121.42116547 -81.22599030]
[131.72163391 -94.04713440]
[147.44876099 -98.26134491]
[152.31925964 -112.44860077]
[157.18975830 -126.63586426]
[162.06024170 -140.82312012]
[153.83952332 -154.12551880]
[156.14384460 -169.59239197]
[167.88517761 -179.92074585]
[183.51962280 -180.23387146]
[195.66506958 -170.38389587]
[198.58682251 -155.02169800]
[190.90530396 -141.40081787]
[176.24749756 -135.95262146]
[171.37701416 -121.76536560]
[166.50651550 -107.57810974]
[161.63603210 -93.39085388]
[170.36207581 -83.07764435]
[172.79956055 -69.67887115]
[168.19142151 -56.74751663]
[157.66369629 -47.76799011]
[143.95263672 -45.21732330]
[138.50001526 -31.24345779]
[133.04739380 -17.26959229]
[142.46348572 -5.72824144]
[144.85429382 9.07513809]
[139.47886658 23.18084908]
[127.68727112 32.76495743]
[112.58312988 35.17582703]
[107.13051605 49.14969254]
[101.67789459 63.12355804]
[96.22527313 77.09742737]
[111.37499237 81.02350616]
[119.91977692 93.23358154]
[118.55773163 107.32390594]
[108.90371704 116.63018036]
[110.14241028 131.57894897]
[111.38110352 146.52770996]
[112.61978912 161.47648621]
[125.49162292 170.35623169]
[129.59436035 185.44601440]
[122.99081421 199.62089539]
[108.79898071 206.18792725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 71]
[4 70]
[5 69]
[6 68]
[9 20]
[10 19]
[11 18]
[21 64]
[22 63]
[23 62]
[24 61]
[29 56]
[30 55]
[31 54]
[35 49]
[36 48]
[37 47]
[38 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
