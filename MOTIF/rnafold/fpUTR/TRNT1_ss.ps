%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:15:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGGUGACGUCACCGCGUUCACCAGCCCGGAAGUGCGCGUGGCGGCGGUGGCGGCUGCGGCAACAGCGGGGCCGAUGUGUAGUUGGUGACUGCCUCUCCAG\
) } def
/len { sequence length } bind def

/coor [
[29.12320328 175.06375122]
[17.81424141 184.91806030]
[6.50527811 194.77235413]
[-4.80368471 204.62666321]
[-16.11264801 214.48097229]
[-27.42161179 224.33528137]
[-38.73057556 234.18959045]
[-50.03953552 244.04389954]
[-61.19690704 254.06951904]
[-72.20009613 264.26412964]
[-83.20327759 274.45870972]
[-87.52882385 290.27713013]
[-103.45726013 294.17800903]
[-114.60277557 282.14846802]
[-109.49982452 266.56347656]
[-93.39788055 263.45553589]
[-82.39469910 253.26092529]
[-71.39151001 243.06632996]
[-68.57650757 236.09312439]
[-59.89384460 232.73492432]
[-48.58488083 222.88063049]
[-37.27591705 213.02632141]
[-25.96695518 203.17201233]
[-14.65799141 193.31770325]
[-3.34902835 183.46339417]
[7.95993471 173.60908508]
[19.26889801 163.75479126]
[19.65160370 147.01876831]
[32.21113968 135.44972229]
[49.59199524 136.47940063]
[60.59518051 126.28479767]
[71.59836578 116.09019470]
[67.40116119 98.30791473]
[73.41687012 81.05575562]
[87.76082611 69.73863983]
[85.48211670 54.91273499]
[83.20339966 40.08683014]
[78.73836517 31.91801262]
[81.08845520 24.77470589]
[79.26293945 9.88620377]
[77.43741608 -5.00229836]
[75.61190033 -19.89080048]
[73.78638458 -34.77930069]
[71.96086884 -49.66780472]
[62.60158157 -62.42375946]
[68.73244476 -75.99806213]
[66.90692902 -90.88656616]
[56.61308289 -103.65248871]
[62.77337265 -118.85060883]
[79.05062103 -120.84640503]
[88.70018768 -107.58676910]
[81.79543304 -92.71208191]
[83.62094879 -77.82357788]
[92.84966278 -66.13255310]
[86.84936523 -51.49332047]
[88.67488861 -36.60482025]
[90.50040436 -21.71631813]
[92.32592010 -6.82781553]
[94.15143585 8.06068611]
[95.97695923 22.94918823]
[98.02930450 37.80812073]
[100.30802155 52.63402557]
[102.58673096 67.45993042]
[114.01596069 70.51949310]
[123.60382080 77.45211792]
[130.09068298 87.34700775]
[132.62432861 98.90421295]
[147.33049011 101.85860443]
[162.03666687 104.81299591]
[176.74284363 107.76739502]
[193.95007324 101.43715668]
[206.73875427 113.34729767]
[221.52818298 115.85183716]
[236.31761169 118.35637665]
[251.10704041 120.86091614]
[265.89648438 123.36544800]
[280.68591309 125.86998749]
[294.54498291 117.78881836]
[309.45144653 123.71987915]
[313.97030640 139.11337280]
[304.63507080 152.16072083]
[288.60696411 152.85311890]
[278.18136597 140.65942383]
[263.39193726 138.15487671]
[248.60250854 135.65034485]
[233.81307983 133.14581299]
[219.02363586 130.64126587]
[204.23420715 128.13673401]
[194.08894348 134.91839600]
[181.65611267 132.83432007]
[173.78845215 122.47357178]
[159.08227539 119.51917267]
[144.37609863 116.56478119]
[129.66992188 113.61038208]
[121.21836853 124.80580902]
[108.84857941 131.42053223]
[94.84478760 132.23307800]
[81.79296875 127.09338379]
[70.78978729 137.28797913]
[59.78659821 147.48258972]
[60.81394577 161.01451111]
[53.91283798 172.47187805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 27]
[2 26]
[3 25]
[4 24]
[5 23]
[6 22]
[7 21]
[8 20]
[9 18]
[10 17]
[11 16]
[30 100]
[31 99]
[32 98]
[35 63]
[36 62]
[37 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[44 55]
[46 53]
[47 52]
[67 94]
[68 93]
[69 92]
[70 91]
[72 88]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
