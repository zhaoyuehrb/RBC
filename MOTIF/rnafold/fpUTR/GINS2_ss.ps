%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAAACGGCGGCCGCGGCGUCUCCUCCGGGACGCUGAGGGGCCCGAGGAGACCGUGAGGCUCUGGCCUGCAGCUCGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[80.53115082 267.52359009]
[72.17672729 280.59963989]
[57.71968079 286.23645020]
[42.71903992 282.26651001]
[32.94285202 270.21636963]
[32.15026855 254.71954346]
[40.64604568 241.73489380]
[55.16339111 236.25524902]
[59.00102997 221.75448608]
[62.83867264 207.25370789]
[66.67631531 192.75292969]
[70.51395416 178.25215149]
[74.35160065 163.75137329]
[72.98575592 156.30162048]
[78.60825348 148.79078674]
[82.97909546 134.44172668]
[87.34994507 120.09265137]
[91.72079468 105.74359131]
[87.73291779 104.94515991]
[83.83261108 102.60717010]
[69.94805145 96.93099976]
[56.06348419 91.25483704]
[42.17891693 85.57866669]
[28.29435349 79.90250397]
[12.12751675 82.65303040]
[1.87181258 69.85644531]
[8.07743073 54.67678070]
[24.36056328 52.72956848]
[33.97052002 66.01793671]
[47.85508347 71.69410706]
[61.73965073 77.37026978]
[75.62421417 83.04644012]
[89.50878143 88.72260284]
[104.30178833 86.23929596]
[115.57176971 76.34042358]
[126.84174347 66.44155884]
[138.11172485 56.54269028]
[139.77507019 43.59379578]
[149.56874084 35.58524704]
[161.78395081 36.46883774]
[173.41201782 26.99317360]
[185.04006958 17.51750755]
[196.66813660 8.04184246]
[208.29618835 -1.43382251]
[210.29951477 -6.78662872]
[213.89715576 -10.32781792]
[218.05468750 -11.74778461]
[221.77632141 -11.22770309]
[234.38146973 -19.35850334]
[246.98663330 -27.48930359]
[259.59179688 -35.62010193]
[265.27725220 -43.08340073]
[272.81637573 -43.80842209]
[285.71337891 -51.46789169]
[293.26110840 -66.02687073]
[309.65344238 -66.49943542]
[318.02737427 -52.39944839]
[309.76849365 -38.23176956]
[293.37286377 -38.57089233]
[280.47586060 -30.91142464]
[267.72259521 -23.01494217]
[255.11743164 -14.88414192]
[242.51228333 -6.75334215]
[229.90711975 1.37745833]
[217.77186584 10.19423676]
[206.14379883 19.66990280]
[194.51574707 29.14556694]
[182.88768005 38.62123108]
[171.25962830 48.09689713]
[166.05334473 64.74688721]
[148.01058960 67.81266785]
[136.74061584 77.71154022]
[125.47063446 87.61040497]
[114.20066071 97.50926971]
[106.06985474 110.11443329]
[101.69901276 124.46350098]
[97.32816315 138.81256104]
[92.95732117 153.16163635]
[88.85237122 167.58901978]
[85.01473236 182.08979797]
[81.17709351 196.59057617]
[77.33944702 211.09133911]
[73.50180817 225.59211731]
[69.66416931 240.09289551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[15 78]
[16 77]
[17 76]
[18 75]
[20 33]
[21 32]
[22 31]
[23 30]
[24 29]
[34 74]
[35 73]
[36 72]
[37 71]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[48 64]
[49 63]
[50 62]
[51 61]
[53 60]
[54 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
