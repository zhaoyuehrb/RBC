%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:09:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGCCCCCGGGCUGCCCUCAGCGCCGCCUGAUUGCAUUUGCGGCCUCGCUGCCGUAUCCCAGGCUAAGCGCCGCGCGCAAAGCCGUGCGGAGAUUGGAGGCCGCGCGGGUCCCUGGUCUGGGCC\
) } def
/len { sequence length } bind def

/coor [
[108.69530487 187.17723083]
[110.70782471 178.93109131]
[115.92523956 172.11598206]
[111.22001648 157.87306213]
[106.51479340 143.63014221]
[101.80956268 129.38722229]
[97.10433960 115.14429474]
[90.14054108 112.35941315]
[78.35321808 121.63620758]
[76.21295166 106.78965759]
[69.24915314 104.00477600]
[56.02033615 111.07572937]
[42.79151917 118.14668274]
[29.56270027 125.21762848]
[16.33388138 132.28857422]
[7.81055307 145.61763000]
[-7.06123638 144.79353333]
[-20.29005623 151.86448669]
[-23.33063889 167.20361328]
[-35.55198288 176.95927429]
[-51.18353653 176.52513123]
[-62.84456253 166.10618591]
[-65.02908325 150.62193298]
[-56.70562744 137.38357544]
[-41.80428314 132.64186096]
[-27.36100578 138.63566589]
[-14.13218784 131.56471252]
[-6.55507421 118.74143219]
[9.26292992 119.05976105]
[22.49174881 111.98880768]
[35.72056580 104.91786194]
[48.94938660 97.84690857]
[62.17820358 90.77595520]
[47.17882919 90.63906860]
[40.27492523 77.32230377]
[40.50658798 62.32409668]
[47.81848145 49.22691345]
[60.46408463 41.15915680]
[75.42286682 40.04789352]
[89.12176514 46.15856171]
[98.28865051 58.03156281]
[100.73392487 72.83089447]
[100.13466644 87.81892395]
[107.84620667 74.95299530]
[115.55774689 62.08706284]
[123.26928711 49.22113419]
[130.98083496 36.35520554]
[138.69236755 23.48927498]
[146.40391541 10.62334633]
[154.11544800 -2.24258304]
[145.23394775 -17.30184364]
[145.13868713 -34.69647980]
[153.76664734 -49.69901276]
[168.69616699 -58.27682114]
[185.82583618 -58.17593765]
[192.89678955 -71.40475464]
[199.96774292 -84.63357544]
[207.03869629 -97.86239624]
[214.10963440 -111.09121704]
[221.18058777 -124.32003021]
[220.84698486 -128.89356995]
[221.93870544 -132.89913940]
[224.08328247 -135.94447327]
[226.81652832 -137.80688477]
[229.64891052 -138.44856262]
[237.98246765 -150.92060852]
[246.31600952 -163.39265442]
[254.64956665 -175.86470032]
[251.77630615 -191.17424011]
[260.40539551 -203.70394897]
[275.01840210 -206.34881592]
[283.35195923 -218.82086182]
[291.68551636 -231.29290771]
[300.01907349 -243.76495361]
[303.79147339 -260.29388428]
[320.71875000 -261.24456787]
[326.31820679 -245.24198914]
[312.49111938 -235.43139648]
[304.15756226 -222.95935059]
[295.82400513 -210.48730469]
[287.49044800 -198.01525879]
[290.63906860 -183.50245667]
[282.36532593 -170.73530579]
[267.12161255 -167.53114319]
[258.78805542 -155.05909729]
[250.45449829 -142.58705139]
[242.12095642 -130.11500549]
[234.40940857 -117.24908447]
[227.33845520 -104.02026367]
[220.26750183 -90.79144287]
[213.19656372 -77.56262970]
[206.12561035 -64.33380890]
[199.05465698 -51.10498810]
[206.90144348 -41.05736542]
[210.34269714 -28.73321724]
[208.82522583 -15.98062706]
[202.54222107 -4.72611094]
[192.40954590 3.31641793]
[179.93229675 6.90662861]
[166.98138428 5.46895838]
[159.26983643 18.33488655]
[151.55830383 31.20081711]
[143.84675598 44.06674576]
[136.13522339 56.93267441]
[128.42367554 69.79860687]
[120.71213531 82.66453552]
[113.00059509 95.53046417]
[111.34725952 110.43906403]
[116.05249023 124.68199158]
[120.75771332 138.92491150]
[125.46293640 153.16783142]
[130.16816711 167.41075134]
[148.04891968 180.82518005]
[143.40312195 201.92427063]
[149.48175049 215.63742065]
[155.56036377 229.35057068]
[170.39399719 234.80389404]
[176.95094299 249.18380737]
[171.34109497 263.95895386]
[156.89265442 270.36352539]
[142.17764282 264.59774780]
[135.92620850 250.08241272]
[141.84721375 235.42918396]
[135.76860046 221.71603394]
[129.68997192 208.00289917]
[121.67690277 206.75863647]
[114.76161194 202.34477234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 112]
[4 111]
[5 110]
[6 109]
[7 108]
[11 33]
[12 32]
[13 31]
[14 30]
[15 29]
[17 27]
[18 26]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 100]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
[60 88]
[65 87]
[66 86]
[67 85]
[68 84]
[71 81]
[72 80]
[73 79]
[74 78]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
