%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGAGCGCGGGGAGCCAGGCGAGGGGCCGCGACGACGGGACUCCAUUAGCCGCUCCGGCCACAGGCAGCGCUUCGCCAGCCGAGGAACCGGACGCGGACACCGCCGCCCCGCGAGCCUCCAGCCCCUCGCCUGUUGCCGCGCGAGUCCCGGGCCCGGAGCGCUAGGAGCGCGCGGAAGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[305.05932617 444.79281616]
[296.94970703 432.17401123]
[288.84008789 419.55520630]
[273.96893311 420.40032959]
[260.58239746 413.64340210]
[252.32072449 401.00964355]
[251.48654175 385.83728027]
[258.40383911 372.19549561]
[250.29423523 359.57669067]
[242.18461609 346.95788574]
[234.07501221 334.33908081]
[225.96539307 321.72027588]
[217.85578918 309.10147095]
[204.46586609 302.57772827]
[203.51396179 286.78518677]
[195.40435791 274.16638184]
[190.99134827 272.29125977]
[187.71905518 267.61273193]
[187.24255371 260.98461914]
[179.56143188 248.10052490]
[171.88031006 235.21640015]
[164.19918823 222.33229065]
[156.51806641 209.44818115]
[148.83694458 196.56407166]
[141.15582275 183.67996216]
[133.47468567 170.79585266]
[125.79357147 157.91174316]
[118.11244202 145.02761841]
[110.43132019 132.14350891]
[102.75019836 119.25939941]
[83.63360596 110.51804352]
[83.62350464 89.49768829]
[75.09455872 77.15843964]
[62.55701065 74.07219696]
[55.70948792 63.60179138]
[57.77220917 51.66912842]
[49.45175552 39.18834305]
[42.07178497 33.76942062]
[41.09841919 26.42726326]
[32.98880768 13.80846024]
[24.87919426 1.18965721]
[16.76958275 -11.42914581]
[2.39466429 -6.86877966]
[-12.65918446 -6.18536425]
[-27.36552238 -9.41948605]
[-40.72315598 -16.34482002]
[-51.82431030 -26.48395729]
[-59.91630173 -39.14131165]
[-64.45259094 -53.45084381]
[-65.12967682 -68.43529510]
[-61.90740204 -83.07296753]
[-55.01129150 -96.36734772]
[-44.91675949 -107.41496277]
[-53.02637100 -120.03376770]
[-61.13598251 -132.65257263]
[-69.24559784 -145.27137756]
[-77.46091461 -157.82160950]
[-85.78137207 -170.30239868]
[-94.10182190 -182.78318787]
[-102.42227936 -195.26397705]
[-110.74272919 -207.74476624]
[-119.27167511 -220.08401489]
[-128.00671387 -232.27824402]
[-141.47230530 -232.93330383]
[-151.94500732 -241.11018372]
[-155.73352051 -253.64213562]
[-151.66726685 -265.88171387]
[-160.19621277 -278.22097778]
[-168.72515869 -290.56021118]
[-185.53982544 -298.04306030]
[-186.30305481 -315.56655884]
[-195.03808594 -327.76080322]
[-203.77311707 -339.95501709]
[-217.91217041 -349.31042480]
[-212.83645630 -365.48675537]
[-195.88722229 -365.08746338]
[-191.57888794 -348.69006348]
[-182.84385681 -336.49581909]
[-174.10882568 -324.30160522]
[-162.21717834 -322.01425171]
[-154.84228516 -311.90838623]
[-156.38591003 -299.08917236]
[-147.85696411 -286.74990845]
[-139.32801819 -274.41067505]
[-122.67822266 -272.10699463]
[-112.64033508 -258.20651245]
[-115.81247711 -241.01327515]
[-107.07744598 -228.81904602]
[-102.57557678 -227.16862488]
[-99.07174683 -222.66088867]
[-98.26194000 -216.06521606]
[-89.94149017 -203.58442688]
[-81.62104034 -191.10363770]
[-73.30058289 -178.62284851]
[-64.98013306 -166.14205933]
[-58.64059448 -162.31257629]
[-56.62679291 -153.38098145]
[-48.51718140 -140.76219177]
[-40.40756607 -128.14338684]
[-32.29795456 -115.52458191]
[-18.05526733 -120.11754608]
[-3.09752822 -120.86778259]
[11.55594635 -117.71815491]
[24.90501595 -110.87748718]
[36.03697968 -100.80673981]
[44.18898010 -88.18795013]
[48.80027771 -73.87803650]
[49.55082321 -58.85062027]
[46.38344955 -44.12976074]
[39.50819778 -30.72019958]
[29.38838577 -19.53875732]
[37.49799728 -6.91995525]
[45.60760880 5.69884777]
[53.71722412 18.31765175]
[61.93254471 30.86788940]
[70.25299835 43.34867477]
[86.37604523 50.25539398]
[87.43380737 68.62949371]
[95.96275330 80.96874237]
[103.74754333 80.90958405]
[110.93225098 83.90732574]
[116.36639404 89.48195648]
[119.17982483 96.74081421]
[118.92204285 104.52156067]
[115.63430786 111.57827759]
[123.31542969 124.46238708]
[130.99655151 137.34649658]
[138.67767334 150.23060608]
[146.35881042 163.11473083]
[154.03993225 175.99884033]
[161.72105408 188.88294983]
[169.40217590 201.76705933]
[177.08329773 214.65116882]
[184.76441956 227.53527832]
[192.44554138 240.41938782]
[200.12667847 253.30351257]
[208.02314758 266.05676270]
[216.13276672 278.67556763]
[230.10273743 286.10189819]
[230.47457886 300.99188232]
[238.58419800 313.61068726]
[246.69381714 326.22949219]
[254.80342102 338.84826660]
[262.91302490 351.46707153]
[271.02264404 364.08587646]
[286.30520630 363.46069336]
[299.75994873 370.52230835]
[307.81997681 383.28564453]
[308.40533447 398.26940918]
[301.45889282 411.44561768]
[309.56851196 424.06442261]
[317.67813110 436.68322754]
[331.64807129 444.10955811]
[332.01992798 458.99951172]
[340.12954712 471.61831665]
[348.23916626 484.23712158]
[356.45446777 496.78735352]
[364.77493286 509.26815796]
[381.67343140 509.71542358]
[394.84960938 520.03826904]
[399.23995972 536.01843262]
[393.30737305 551.31445312]
[401.83633423 563.65368652]
[410.36526489 575.99291992]
[418.89422607 588.33215332]
[434.47955322 589.60931396]
[445.56127930 600.64245605]
[446.90692139 616.22198486]
[437.88113403 628.99188232]
[422.74557495 632.92242432]
[408.64685059 626.15783691]
[402.24191284 611.89215088]
[406.55496216 596.86114502]
[398.02603149 584.52185059]
[389.49707031 572.18261719]
[380.96813965 559.84338379]
[367.63787842 560.76763916]
[355.49652100 554.93292236]
[347.76660156 543.76892090]
[346.55822754 530.13513184]
[352.29415894 517.58862305]
[343.97369385 505.10781860]
[337.63415527 501.27832031]
[335.62036133 492.34674072]
[327.51074219 479.72793579]
[319.40112305 467.10913086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 152]
[2 151]
[3 150]
[8 145]
[9 144]
[10 143]
[11 142]
[12 141]
[13 140]
[15 138]
[16 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 126]
[30 125]
[32 119]
[33 118]
[36 116]
[37 115]
[39 114]
[40 113]
[41 112]
[42 111]
[53 100]
[54 99]
[55 98]
[56 97]
[57 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 88]
[63 87]
[67 84]
[68 83]
[69 82]
[71 79]
[72 78]
[73 77]
[154 186]
[155 185]
[156 184]
[157 182]
[158 181]
[162 176]
[163 175]
[164 174]
[165 173]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
