%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:48:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGGGCGUGGCGGUGCUGCCCAGGUGAGCCACCGCUGCUUCUGCCCAGACACGGUCGCCUCCACAUCCAGGUCUUUGUGCUCCUCGCUUGCCUGUUCCUUUUCCACGCAUUUUCCAGGAUAACUGUGACUCCAGGCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[82.05418396 252.42024231]
[88.10052490 236.58111572]
[88.10052490 221.58111572]
[88.10052490 206.58111572]
[88.10052490 191.58111572]
[88.10052490 176.58111572]
[88.10052490 161.58111572]
[75.05557251 154.17643738]
[62.17642212 161.86589050]
[49.29727554 169.55534363]
[36.41813278 177.24478149]
[23.53898621 184.93423462]
[10.65983963 192.62368774]
[-2.21930623 200.31312561]
[-15.09845161 208.00257874]
[-27.97759819 215.69201660]
[-40.77150345 223.52247620]
[-53.47862244 231.49299622]
[-66.09742737 239.60260010]
[-78.62638855 247.85032654]
[-85.49271393 262.74279785]
[-101.84565735 263.97296143]
[-110.86270905 250.27534485]
[-103.26790619 235.74087524]
[-86.87412262 235.32136536]
[-74.34516144 227.07363892]
[-70.45766449 220.71939087]
[-61.44913864 218.78587341]
[-48.74201584 210.81535339]
[-44.71586990 204.54804993]
[-35.66704559 202.81288147]
[-22.78789902 195.12342834]
[-9.90875340 187.43397522]
[2.97039223 179.74453735]
[15.84953785 172.05508423]
[28.72868347 164.36564636]
[41.60783005 156.67619324]
[54.48697662 148.98674011]
[67.36611938 141.29730225]
[56.14049149 123.66901398]
[53.13861084 104.11956787]
[57.99342728 86.10287476]
[69.02144623 72.46142578]
[83.64350128 64.97843170]
[80.05376434 50.41430664]
[65.83637238 44.48371124]
[57.92966080 31.47074699]
[59.18669128 16.47461700]
[68.91654205 5.22882175]
[65.32680511 -9.33530521]
[61.57731247 -23.85912323]
[57.66850662 -38.34087753]
[53.75970459 -52.82263565]
[49.85089874 -67.30438995]
[45.94209290 -81.78614807]
[32.52279663 -89.69564819]
[28.76500893 -104.43788910]
[36.38820648 -117.18239594]
[32.47940445 -131.66415405]
[28.57059860 -146.14590454]
[24.66179276 -160.62765503]
[10.11771584 -166.03593445]
[1.55827475 -178.97871399]
[2.27475047 -194.47924805]
[11.99164295 -206.57723999]
[26.97260857 -210.62078857]
[41.45716095 -205.05505371]
[49.87569427 -192.02018738]
[48.99110794 -176.52835083]
[39.14354706 -164.53646851]
[43.05235291 -150.05470276]
[46.96115875 -135.57295227]
[50.86996460 -121.09120178]
[63.87046814 -113.91328430]
[68.04084778 -99.28240967]
[60.42384720 -85.69495392]
[64.33265686 -71.21319580]
[68.24145508 -56.73143768]
[72.15026093 -42.24968338]
[76.05906677 -27.76792717]
[80.87609100 -22.08590889]
[79.89093781 -12.92504025]
[83.48067474 1.63908684]
[97.32221222 7.07505608]
[105.40430450 19.76929855]
[104.45068359 34.96614075]
[94.61788940 46.82456970]
[98.20762634 61.38869858]
[118.71039581 66.17742920]
[133.66163635 81.00160217]
[147.90698242 76.30371094]
[162.15232849 71.60581970]
[172.83494568 59.93566895]
[187.34516907 63.29761124]
[201.59051514 58.59972000]
[205.34718323 43.63673401]
[216.61271667 33.09675598]
[231.79232788 30.34305191]
[246.04226685 36.25432205]
[254.81539917 48.94429779]
[255.31228638 64.36365509]
[247.37434387 77.59214020]
[233.53456116 84.40857697]
[218.20915222 82.63787842]
[206.28840637 72.84506226]
[192.04306030 77.54295349]
[182.37936401 88.87707520]
[166.85021973 85.85115814]
[152.60487366 90.54904938]
[138.35952759 95.24694061]
[141.96078491 103.97240448]
[143.43951416 114.01341248]
[142.40469360 124.82991791]
[138.60583496 135.77745056]
[150.76043701 144.56755066]
[163.01084900 153.22360229]
[175.35560608 161.74456787]
[187.70036316 170.26554871]
[203.67631531 168.79966736]
[214.67880249 180.47547913]
[212.26766968 196.33631897]
[198.29254150 204.21508789]
[183.47392273 198.06788635]
[179.17939758 182.61030579]
[166.83464050 174.08932495]
[154.48988342 165.56835938]
[147.14144897 164.34786987]
[141.97033691 156.72213745]
[129.81575012 147.93203735]
[123.13694000 151.34431458]
[129.96147156 164.70191956]
[136.78578186 178.05964661]
[123.42794800 184.88372803]
[116.60386658 171.52645874]
[109.77932739 158.16885376]
[103.10052490 161.58111572]
[103.10052490 176.58111572]
[103.10052490 191.58111572]
[103.10052490 206.58111572]
[103.10052490 221.58111572]
[103.10052490 236.58111572]
[109.14686584 252.42024231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 141]
[3 140]
[4 139]
[5 138]
[6 137]
[7 136]
[8 39]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[17 29]
[18 28]
[19 26]
[20 25]
[44 88]
[45 87]
[49 83]
[50 82]
[51 80]
[52 79]
[53 78]
[54 77]
[55 76]
[58 73]
[59 72]
[60 71]
[61 70]
[90 110]
[91 109]
[92 108]
[94 106]
[95 105]
[114 129]
[115 128]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
