%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:08:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGACGAGGGGCAACGUAUAUAAAUGCGCGCAGGCGUAGUUAAGAGAGCGCAUUUUGACUUCGAGGCACCGCCGACGUUACUGUGUCGCC\
) } def
/len { sequence length } bind def

/coor [
[90.49456024 338.99194336]
[90.49456024 323.99194336]
[87.27597809 317.15490723]
[90.76548767 308.47073364]
[91.28897858 293.47985840]
[91.81246948 278.48901367]
[79.85324860 266.80661011]
[79.93958282 249.75369263]
[92.50000000 237.72970581]
[92.50000000 222.72970581]
[84.76270294 210.00242615]
[92.50000000 196.20225525]
[92.50000000 181.20225525]
[92.50000000 166.20225525]
[92.50000000 151.20225525]
[92.50000000 136.20225525]
[84.30883789 134.08390808]
[76.69832611 130.11042786]
[70.08869171 124.43782806]
[64.85881805 117.31725311]
[61.32477951 109.08412933]
[59.72114944 100.14247894]
[60.18623352 90.94515991]
[62.75208664 81.97093964]
[67.33999634 73.69953918]
[54.61927795 65.75074768]
[41.89855576 57.80195999]
[29.17783356 49.85316849]
[12.77871609 49.82191467]
[4.84192324 35.47132874]
[13.53214741 21.56406212]
[29.90962982 22.40671921]
[37.12662125 37.13244629]
[49.84734344 45.08123779]
[62.56806564 53.03002548]
[75.28878784 60.97881317]
[89.09635925 55.11784744]
[92.21503448 40.44563293]
[95.33370972 25.77342033]
[98.45238495 11.10120583]
[101.57106018 -3.57100797]
[104.68973541 -18.24322128]
[107.80841064 -32.91543579]
[110.92708588 -47.58765030]
[101.15769958 -59.79801559]
[101.57426453 -75.43005371]
[111.98009491 -87.10278320]
[127.46187592 -89.30471039]
[140.70957947 -80.99613953]
[145.46804810 -66.10013580]
[139.49047852 -51.65013123]
[125.59930420 -44.46897507]
[122.48062897 -29.79676056]
[119.36195374 -15.12454700]
[116.24327850 -0.45233262]
[113.12460327 14.21988106]
[110.00592804 28.89209557]
[106.88725281 43.56430817]
[103.76856995 58.23652267]
[114.12607574 61.57348633]
[123.03430176 67.36126709]
[129.94648743 75.08480835]
[134.48114014 84.11692810]
[136.44195557 93.76801300]
[151.43281555 94.29150391]
[166.42367554 94.81499481]
[182.46417236 89.32511902]
[192.17996216 103.21899414]
[181.51866150 116.40129089]
[165.90019226 109.80585480]
[150.90931702 109.28236389]
[135.91845703 108.75887299]
[125.68220520 126.59470367]
[107.50000000 136.20225525]
[107.50000000 151.20225525]
[107.50000000 166.20225525]
[107.50000000 181.20225525]
[107.50000000 196.20225525]
[115.23729706 210.00242615]
[107.50000000 222.72970581]
[107.50000000 237.72970581]
[118.14338684 246.19519043]
[121.84521484 259.07742310]
[117.44995880 271.53225708]
[106.80333710 279.01248169]
[106.27983856 294.00335693]
[105.75634766 308.99420166]
[105.49456024 323.99194336]
[105.49456024 338.99194336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 89]
[2 88]
[4 87]
[5 86]
[6 85]
[9 81]
[10 80]
[12 78]
[13 77]
[14 76]
[15 75]
[16 74]
[25 36]
[26 35]
[27 34]
[28 33]
[37 59]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[64 72]
[65 71]
[66 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
