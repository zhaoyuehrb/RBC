%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:38:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGGUGGCGGGCGGCGGGAGCGGCGCGGGCGCGUGCGGGCGGCGGCAGCGGCGGUGACGGCAGCCUAGGCCGGGCGAGGGCC\
) } def
/len { sequence length } bind def

/coor [
[112.95992279 181.85585022]
[103.36476898 193.38551331]
[89.18160248 198.26791382]
[74.52265167 195.08749390]
[63.63808060 184.76634216]
[59.68372726 170.29695129]
[63.80610275 155.87454224]
[74.80998230 145.68067932]
[89.50248718 142.67079163]
[74.76399231 145.45945740]
[62.64285660 155.62748718]
[48.69901276 150.39122009]
[33.96051788 153.17990112]
[21.83938408 163.34791565]
[7.89553881 158.11164856]
[-6.84295797 160.90032959]
[-18.91333771 172.00158691]
[-34.47947693 166.84143066]
[-37.52827072 150.72817993]
[-24.92337799 140.23776245]
[-9.63163185 146.16183472]
[5.10686493 143.37315369]
[16.17380142 133.40460205]
[31.17184258 138.44139099]
[45.91033936 135.65272522]
[56.97727585 125.68416595]
[71.97531891 130.72096252]
[86.71381378 127.93228912]
[74.41074371 112.98742676]
[74.00211334 95.06750488]
[83.91355896 81.88453674]
[77.91517639 68.13610840]
[71.91679382 54.38767242]
[57.11528015 48.84775162]
[50.64247513 34.42976379]
[56.33857727 19.68764877]
[70.82418823 13.36763954]
[85.50525665 19.21928596]
[91.67176819 33.77091217]
[85.66522980 48.38928986]
[91.66361237 62.13772583]
[97.66198730 75.88616180]
[124.23914337 86.84451294]
[124.18771362 119.27926636]
[138.34596252 114.32508087]
[152.50421143 109.37089539]
[166.66246033 104.41670990]
[171.21859741 89.70114899]
[183.42344666 80.59646606]
[198.47120667 80.42626953]
[210.58869934 89.04624939]
[224.74694824 84.09206390]
[238.90519714 79.13787842]
[249.37548828 67.27686310]
[263.94403076 70.37641907]
[278.10226440 65.42223358]
[288.38327026 52.64596939]
[304.54464722 55.42848587]
[309.96093750 70.90736389]
[299.06033325 83.15927124]
[283.05645752 79.58048248]
[268.89819336 84.53466797]
[259.44061279 96.04132843]
[243.85939026 93.29612732]
[229.70114136 98.25032043]
[215.54289246 103.20450592]
[211.44351196 117.49901581]
[199.57258606 126.74806976]
[184.35379028 127.23934174]
[171.61665344 118.57495880]
[157.45840454 123.52914429]
[143.30015564 128.48333740]
[129.14189148 133.43751526]
[123.14351654 147.18594360]
[129.14189148 160.93438721]
[135.14027405 174.68281555]
[148.64912415 183.98030090]
[147.08212280 200.30441284]
[132.05128479 206.86230469]
[119.01904297 196.90777588]
[121.39184570 180.68119812]
[115.39346313 166.93276978]
[109.39508057 153.18432617]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 28]
[10 27]
[12 25]
[13 24]
[15 22]
[16 21]
[31 42]
[32 41]
[33 40]
[44 73]
[45 72]
[46 71]
[47 70]
[51 66]
[52 65]
[53 64]
[55 62]
[56 61]
[74 83]
[75 82]
[76 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
