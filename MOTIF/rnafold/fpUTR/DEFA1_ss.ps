%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:36:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUGCUCCUUGCUAUAGAAGACCUGGGACAGAGGACUGCUGUCUGCCCUCUCUGGUCACCCUGCCUAGCUAGAGGAUCUGUGACCCCAGCC\
) } def
/len { sequence length } bind def

/coor [
[138.46984863 302.69836426]
[138.46984863 287.69836426]
[138.46984863 272.69836426]
[138.46984863 257.69836426]
[138.46984863 242.69834900]
[133.62487793 234.98391724]
[135.75064087 224.94825745]
[131.26019287 210.63616943]
[126.76974487 196.32408142]
[122.27929688 182.01199341]
[117.78885651 167.69990540]
[112.81758881 153.54765320]
[107.37117767 139.57136536]
[101.92477417 125.59506989]
[96.47836304 111.61878204]
[90.56302643 97.83441162]
[84.18550873 84.25769806]
[77.80799103 70.68097687]
[61.32257462 65.13302612]
[54.00009537 49.72560120]
[59.87379074 34.06704330]
[53.04136658 20.71346855]
[46.20894623 7.35989189]
[39.37652588 -5.99368525]
[26.20257568 -14.75482941]
[27.29341125 -29.60943604]
[20.46099091 -42.96301270]
[13.62856865 -56.31658936]
[6.79614687 -69.67016602]
[-8.47401142 -70.54739380]
[-21.17100525 -78.89503479]
[-27.93991089 -92.38756561]
[-27.05235481 -107.35646820]
[-18.84666443 -119.78756714]
[-25.67908669 -133.14114380]
[-32.51150894 -146.49472046]
[-39.34392929 -159.84829712]
[-53.39891052 -168.29753113]
[-52.83865356 -184.68710327]
[-38.23950195 -192.15682983]
[-24.61981201 -183.02250671]
[-25.99035263 -166.68072510]
[-19.15793228 -153.32714844]
[-12.32551003 -139.97357178]
[-5.49308777 -126.61999512]
[9.38923931 -126.00199127]
[22.04825592 -117.96424866]
[29.03052711 -104.58089447]
[28.37208557 -89.39987183]
[20.14972305 -76.50258636]
[26.98214531 -63.14900970]
[33.81456757 -49.79543304]
[40.64698792 -36.44185638]
[53.33223724 -28.63585091]
[52.73010254 -12.82610703]
[59.56252289 0.52746987]
[66.39494324 13.88104630]
[73.22736359 27.23462296]
[86.03491211 29.48998260]
[95.29693604 38.89569092]
[97.41699219 52.12319565]
[91.38471222 64.30345917]
[97.76222992 77.88018036]
[104.13974762 91.45689392]
[108.74317932 94.41311646]
[111.25650787 99.80143738]
[110.45465088 106.17237091]
[115.90106201 120.14865875]
[121.34747314 134.12495422]
[126.79387665 148.10124207]
[131.95727539 152.75183105]
[133.58572388 158.47065735]
[132.10093689 163.20945740]
[136.59138489 177.52154541]
[141.08183289 191.83363342]
[145.57228088 206.14572144]
[150.06272888 220.45782471]
[156.99629211 207.15647888]
[169.47322083 198.83024597]
[184.41696167 197.53218079]
[198.14266968 203.58236694]
[207.26588440 215.48896790]
[209.53700256 230.31604004]
[204.39601135 244.40753174]
[193.11056519 254.28877258]
[178.46345520 257.52325439]
[164.06632996 253.31340027]
[153.46984863 242.69834900]
[153.46984863 257.69836426]
[153.46984863 272.69836426]
[153.46984863 287.69836426]
[153.46984863 302.69836426]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 92]
[2 91]
[3 90]
[4 89]
[5 88]
[7 77]
[8 76]
[9 75]
[10 74]
[11 73]
[12 70]
[13 69]
[14 68]
[15 67]
[16 64]
[17 63]
[18 62]
[21 58]
[22 57]
[23 56]
[24 55]
[26 53]
[27 52]
[28 51]
[29 50]
[34 45]
[35 44]
[36 43]
[37 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
