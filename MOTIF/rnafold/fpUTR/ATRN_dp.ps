%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:53:54 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ATRN)
} def

/sequence { (\
ACAGCCCCGCCCCGCACGGCCAGGCGAAGCGGAGCCGGCCGUGCGGUGUGUGUGUAUGUGUUCGCGGGGCGCCGUCUCAGCCCCGGGAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 49 0.005706811 ubox
1 51 0.011482242 ubox
1 53 0.187162105 ubox
1 55 0.563260412 ubox
1 59 0.614251602 ubox
1 61 0.077151673 ubox
2 48 0.006042020 ubox
2 50 0.011761710 ubox
2 52 0.198170362 ubox
2 54 0.595958817 ubox
2 58 0.650353852 ubox
2 60 0.115078380 ubox
3 47 0.005885326 ubox
3 49 0.009957544 ubox
3 51 0.195349470 ubox
3 53 0.568660591 ubox
3 57 0.642127531 ubox
3 59 0.114059517 ubox
3 62 0.003248489 ubox
4 10 0.010876622 ubox
4 49 0.005187556 ubox
4 51 0.069136056 ubox
4 53 0.316481499 ubox
4 55 0.452602990 ubox
4 59 0.019512239 ubox
4 61 0.007631112 ubox
4 70 0.009485764 ubox
5 9 0.010834052 ubox
5 48 0.005623665 ubox
5 50 0.072090562 ubox
5 52 0.394512573 ubox
5 54 0.477282918 ubox
5 58 0.023305842 ubox
5 60 0.008454194 ubox
5 69 0.009497488 ubox
5 86 0.004294641 ubox
5 87 0.057548088 ubox
6 68 0.009497683 ubox
6 85 0.004287322 ubox
6 86 0.057727649 ubox
6 87 0.021849018 ubox
7 67 0.009497389 ubox
7 85 0.057474754 ubox
7 86 0.021910600 ubox
8 48 0.047338496 ubox
8 50 0.929074253 ubox
8 52 0.320014990 ubox
8 54 0.037179027 ubox
8 60 0.005153744 ubox
8 66 0.009444796 ubox
8 85 0.021002260 ubox
9 47 0.045352648 ubox
9 49 0.942544652 ubox
9 51 0.322434237 ubox
9 53 0.036303321 ubox
9 59 0.005078167 ubox
9 65 0.008898747 ubox
10 46 0.039343322 ubox
10 48 0.942943789 ubox
10 50 0.322313120 ubox
10 52 0.036042631 ubox
10 58 0.005047947 ubox
10 64 0.008862065 ubox
11 45 0.035039144 ubox
11 46 0.067403362 ubox
12 45 0.047925831 ubox
12 46 0.995941180 ubox
13 45 0.998198615 ubox
14 44 0.999974519 ubox
15 43 0.999989539 ubox
16 42 0.999791988 ubox
17 41 0.999958634 ubox
18 40 0.999978512 ubox
19 39 0.999995738 ubox
20 38 0.999987751 ubox
21 37 0.996170759 ubox
23 36 0.999446000 ubox
24 35 0.999986917 ubox
25 31 0.006355534 ubox
25 34 0.999917951 ubox
26 30 0.013862639 ubox
48 57 0.004903623 ubox
48 65 0.003404635 ubox
49 56 0.005034286 ubox
49 64 0.003409884 ubox
50 55 0.004410763 ubox
50 57 0.004138422 ubox
50 63 0.003713201 ubox
50 65 0.010583260 ubox
51 56 0.006120357 ubox
51 58 0.006106124 ubox
51 60 0.006199328 ubox
51 64 0.010687346 ubox
51 66 0.003963752 ubox
52 57 0.005478064 ubox
52 59 0.006720092 ubox
52 63 0.010861571 ubox
52 65 0.059184575 ubox
53 58 0.005383848 ubox
53 60 0.006686129 ubox
53 64 0.059244836 ubox
54 59 0.006879012 ubox
54 61 0.005195928 ubox
54 63 0.059369131 ubox
54 65 0.006979626 ubox
55 60 0.007364174 ubox
55 64 0.006920448 ubox
57 64 0.003747343 ubox
58 63 0.006216235 ubox
58 65 0.006610509 ubox
59 64 0.006352305 ubox
61 88 0.066761905 ubox
61 89 0.851940141 ubox
61 90 0.026833450 ubox
62 87 0.069343177 ubox
62 88 0.981838592 ubox
62 89 0.029287748 ubox
63 86 0.071478836 ubox
63 87 0.994845607 ubox
65 85 0.997776241 ubox
66 84 0.999917832 ubox
67 83 0.999945758 ubox
68 82 0.999945311 ubox
69 81 0.999938784 ubox
70 80 0.999730610 ubox
71 81 0.004528691 ubox
72 80 0.005522062 ubox
72 86 0.004347319 ubox
73 85 0.004363031 ubox
74 84 0.004281926 ubox
75 88 0.007611104 ubox
76 87 0.008159863 ubox
77 86 0.008155679 ubox
78 85 0.008128243 ubox
1 55 0.9500000 lbox
2 54 0.9500000 lbox
3 53 0.9500000 lbox
8 50 0.9500000 lbox
9 49 0.9500000 lbox
10 48 0.9500000 lbox
12 46 0.9500000 lbox
13 45 0.9500000 lbox
14 44 0.9500000 lbox
15 43 0.9500000 lbox
16 42 0.9500000 lbox
17 41 0.9500000 lbox
18 40 0.9500000 lbox
19 39 0.9500000 lbox
20 38 0.9500000 lbox
21 37 0.9500000 lbox
23 36 0.9500000 lbox
24 35 0.9500000 lbox
25 34 0.9500000 lbox
61 89 0.9500000 lbox
62 88 0.9500000 lbox
63 87 0.9500000 lbox
65 85 0.9500000 lbox
66 84 0.9500000 lbox
67 83 0.9500000 lbox
68 82 0.9500000 lbox
69 81 0.9500000 lbox
70 80 0.9500000 lbox
showpage
end
%%EOF
