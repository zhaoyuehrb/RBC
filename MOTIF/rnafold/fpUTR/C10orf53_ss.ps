%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCCGGAAGAGAGGUUGCUUAGCAGCGUGUGUUUCUCCCUUGCCUCUGCGGCGGCGGAGGCCUGGCG\
) } def
/len { sequence length } bind def

/coor [
[98.85858917 219.52038574]
[91.55519104 204.83732605]
[100.84365082 191.32228088]
[101.52636719 176.33782959]
[102.20908356 161.35336304]
[102.89180756 146.36891174]
[103.57452393 131.38446045]
[84.38328552 125.21300507]
[73.93677521 109.46301270]
[75.50878906 91.89248657]
[63.25424576 83.24227905]
[50.99969482 74.59207153]
[38.74514771 65.94187164]
[26.49059868 57.29166412]
[13.17232037 50.39068604]
[-0.96159321 45.36749268]
[-15.09550667 40.34429932]
[-29.22942162 35.32110596]
[-43.36333466 30.29791069]
[-60.31272507 30.69093895]
[-65.38245392 14.51273632]
[-51.23994064 5.16256523]
[-38.34014130 16.16399765]
[-24.20622635 21.18719101]
[-10.07231331 26.21038628]
[4.06160116 31.23357964]
[18.19551468 36.25677490]
[14.86343288 21.63154793]
[22.49337196 8.71705818]
[36.91115952 4.57853508]
[50.22914505 11.48007202]
[55.16135788 25.64599228]
[49.00949097 39.32643509]
[35.14080429 45.03711700]
[47.39535141 53.68732071]
[59.64990234 62.33752441]
[71.90444946 70.98773193]
[84.15899658 79.63793182]
[95.45749664 73.42940521]
[108.91078186 73.33560181]
[121.28878784 79.90966034]
[129.37046814 92.04179382]
[130.77537537 107.11604309]
[145.74040222 108.13967896]
[160.70542908 109.16331482]
[175.67047119 110.18695831]
[190.63549805 111.21059418]
[205.60052490 112.23423004]
[220.56556702 113.25786591]
[235.53059387 114.28150177]
[250.01316833 106.58818817]
[263.77169800 115.51203156]
[262.65258789 131.87295532]
[247.80706787 138.84022522]
[234.50695801 129.24653625]
[219.54193115 128.22290039]
[204.57688904 127.19925690]
[189.61186218 126.17562103]
[174.64683533 125.15198517]
[159.68179321 124.12834930]
[144.71676636 123.10471344]
[129.75173950 122.08107758]
[118.55898285 132.06718445]
[117.87625885 147.05163574]
[117.19354248 162.03608704]
[116.51082611 177.02053833]
[115.82810211 192.00500488]
[123.84909058 206.30870056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
