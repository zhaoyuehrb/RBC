%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:42:18 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (CELF5)
} def

/sequence { (\
CGCCGCCGCCGCCGCCGGCUCGGUCCCGCGCCCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.022512731 ubox
1 11 0.033608869 ubox
1 14 0.014887903 ubox
1 17 0.006474134 ubox
1 22 0.023154781 ubox
1 28 0.095301452 ubox
1 30 0.565839760 ubox
1 34 0.060949787 ubox
2 7 0.023080448 ubox
2 9 0.119893300 ubox
2 10 0.027532124 ubox
2 12 0.092323391 ubox
2 13 0.042747037 ubox
2 15 0.134983260 ubox
2 16 0.011302197 ubox
2 19 0.224575928 ubox
2 21 0.023455084 ubox
2 24 0.595625025 ubox
2 27 0.107573632 ubox
2 29 0.599057692 ubox
2 31 0.165490571 ubox
2 33 0.062657813 ubox
2 35 0.220690440 ubox
3 8 0.121858868 ubox
3 11 0.088193562 ubox
3 14 0.135479481 ubox
3 18 0.224881323 ubox
3 23 0.622446590 ubox
3 28 0.597208217 ubox
3 30 0.156132230 ubox
3 34 0.217316949 ubox
4 11 0.055713406 ubox
4 14 0.009753957 ubox
4 17 0.224888429 ubox
4 22 0.622877738 ubox
4 28 0.149122983 ubox
4 30 0.130296986 ubox
4 34 0.055694923 ubox
5 10 0.060035668 ubox
5 12 0.179247255 ubox
5 13 0.012345195 ubox
5 15 0.034031121 ubox
5 16 0.221259075 ubox
5 19 0.108582444 ubox
5 21 0.614239230 ubox
5 24 0.608333137 ubox
5 27 0.143150474 ubox
5 29 0.142828493 ubox
5 31 0.161194171 ubox
5 33 0.068108887 ubox
5 35 0.117903430 ubox
6 11 0.179271081 ubox
6 14 0.044570500 ubox
6 18 0.114807320 ubox
6 23 0.617786117 ubox
6 28 0.136727830 ubox
6 30 0.144209936 ubox
6 34 0.116941352 ubox
7 14 0.198532353 ubox
7 17 0.114844138 ubox
7 22 0.616422251 ubox
7 28 0.129680928 ubox
7 30 0.154807032 ubox
7 34 0.022307901 ubox
8 13 0.190037426 ubox
8 15 0.118714646 ubox
8 16 0.088758093 ubox
8 19 0.740405222 ubox
8 21 0.460093744 ubox
8 24 0.173400546 ubox
8 27 0.135065933 ubox
8 29 0.171771419 ubox
8 31 0.113260053 ubox
8 33 0.027173481 ubox
8 35 0.030622653 ubox
9 14 0.138819046 ubox
9 18 0.763578365 ubox
9 23 0.175266248 ubox
9 28 0.157449878 ubox
9 30 0.105169268 ubox
9 34 0.030287945 ubox
10 17 0.763733259 ubox
10 22 0.174533010 ubox
10 28 0.119716499 ubox
10 30 0.083820294 ubox
10 34 0.008224200 ubox
11 16 0.727167923 ubox
11 19 0.452843019 ubox
11 21 0.076142174 ubox
11 24 0.187394152 ubox
11 27 0.137522562 ubox
11 29 0.094639310 ubox
11 31 0.017277890 ubox
11 33 0.009607790 ubox
11 35 0.020576519 ubox
12 18 0.458770231 ubox
12 23 0.188971330 ubox
12 28 0.094494811 ubox
12 30 0.013144419 ubox
12 34 0.018786055 ubox
13 17 0.455489942 ubox
13 22 0.188969979 ubox
13 28 0.007840993 ubox
13 30 0.022946023 ubox
13 34 0.014218230 ubox
14 21 0.181192676 ubox
14 24 0.177503121 ubox
14 27 0.007638717 ubox
14 29 0.025783463 ubox
14 31 0.012265761 ubox
14 33 0.016496938 ubox
14 35 0.228443118 ubox
15 23 0.179096109 ubox
15 28 0.024735190 ubox
15 30 0.012285095 ubox
15 34 0.228791771 ubox
16 22 0.179086405 ubox
16 28 0.014549220 ubox
16 34 0.050358084 ubox
17 21 0.167540570 ubox
17 25 0.006974435 ubox
17 26 0.023153847 ubox
17 27 0.016286285 ubox
17 32 0.260419167 ubox
17 33 0.044001292 ubox
17 36 0.051050591 ubox
18 24 0.007124978 ubox
18 25 0.022979202 ubox
18 26 0.016167312 ubox
18 31 0.262352290 ubox
18 32 0.032659067 ubox
18 35 0.051572872 ubox
19 23 0.012333845 ubox
19 30 0.263877816 ubox
19 34 0.051335726 ubox
21 28 0.263731844 ubox
21 30 0.041300008 ubox
21 34 0.172356495 ubox
22 27 0.260492684 ubox
22 29 0.043410580 ubox
22 32 0.136262473 ubox
22 33 0.179715424 ubox
22 36 0.038227855 ubox
23 29 0.014010646 ubox
23 31 0.138949580 ubox
23 32 0.177687503 ubox
23 35 0.038522042 ubox
24 28 0.013587971 ubox
24 30 0.137661727 ubox
24 34 0.036528091 ubox
27 34 0.089331488 ubox
28 33 0.088358310 ubox
28 35 0.507398319 ubox
29 34 0.507753046 ubox
2 24 0.9500000 lbox
3 23 0.9500000 lbox
4 22 0.9500000 lbox
5 21 0.9500000 lbox
8 19 0.9500000 lbox
9 18 0.9500000 lbox
10 17 0.9500000 lbox
11 16 0.9500000 lbox
28 35 0.9500000 lbox
29 34 0.9500000 lbox
showpage
end
%%EOF
