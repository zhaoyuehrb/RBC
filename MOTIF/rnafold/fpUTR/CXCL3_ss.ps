%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGGGAAUUUCCCUGGCCCGGCCGCUCCGGGCUUUCCAGUCUCAACCAUGCAUAAAAAGGGUUCGCCGAUCUUGGGGAGCCACACAGCCCGGGUCGCAGGCACCUCCCCGCCAGCUCUCCCGCUUCUCGCACAGCUUCCCGACGCGUCUGCUGAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[169.29811096 139.00672913]
[155.95898438 156.50085449]
[138.33712769 169.67079163]
[117.78121185 177.50859070]
[95.86444092 179.41442871]
[74.26418304 175.24241638]
[68.09278870 188.91406250]
[61.92138672 202.58570862]
[55.74998856 216.25735474]
[54.74424362 233.18144226]
[38.20313644 236.90005493]
[30.05081367 222.03479004]
[42.07834625 210.08595276]
[48.24974442 196.41430664]
[54.42114258 182.74266052]
[60.59254074 169.07102966]
[46.82735062 159.13056946]
[35.48624420 146.49440002]
[22.54431343 154.07769775]
[9.60238457 161.66101074]
[-3.33954430 169.24430847]
[-16.28147316 176.82760620]
[-29.22340393 184.41090393]
[-42.16533279 191.99421692]
[-47.59286880 207.09127808]
[-62.82605743 212.12411499]
[-76.17930603 203.23196411]
[-77.40914154 187.23611450]
[-65.57213593 176.40722656]
[-49.74863434 179.05227661]
[-36.80670547 171.46897888]
[-23.86477470 163.88568115]
[-10.92284584 156.30238342]
[2.01908326 148.71907043]
[14.96101284 141.13577271]
[27.90294266 133.55247498]
[24.45397758 124.83048248]
[22.05591965 115.76307678]
[20.74212646 106.47639465]
[20.53087425 97.09961700]
[21.42510033 87.76319122]
[23.41236877 78.59698486]
[26.46503258 69.72851562]
[30.54062653 61.28114700]
[35.58245468 53.37238693]
[41.52038574 46.11225510]
[48.27181625 39.60174561]
[55.74282455 33.93142319]
[63.82948685 29.18017006]
[72.41931152 25.41407776]
[81.39280701 22.68553543]
[90.62513733 21.03249931]
[99.98788452 20.47796440]
[109.35079956 21.02964592]
[118.58363342 22.67986870]
[127.55796051 25.40567589]
[136.14892578 29.16915131]
[144.23704529 33.91794205]
[151.70977783 39.58598709]
[158.46319580 46.09443665]
[164.40333557 53.35276031]
[169.44757080 61.25998306]
[183.17805481 55.22061920]
[196.90853882 49.18125534]
[210.63900757 43.14189529]
[224.36949158 37.10253143]
[238.09997559 31.06316757]
[251.77162170 24.89177132]
[265.38314819 18.58891106]
[274.65478516 5.76910353]
[289.45510864 7.44232607]
[303.06665039 1.13946593]
[316.67819214 -5.16339397]
[327.47155762 -22.15157509]
[346.62374878 -19.70117378]
[359.98226929 -26.52390862]
[373.34078979 -33.34664154]
[386.69931030 -40.16937637]
[400.05786133 -46.99211121]
[413.41638184 -53.81484222]
[426.77490234 -60.63757706]
[440.13345337 -67.46031189]
[453.49197388 -74.28304291]
[452.97494507 -90.52291107]
[459.55758667 -105.31430054]
[471.87994385 -115.72576141]
[487.45007324 -119.71805573]
[503.14804077 -116.54341888]
[515.85083008 -106.88501740]
[529.07543945 -113.96392822]
[533.81677246 -130.77873230]
[548.94323730 -138.82499695]
[564.89605713 -133.56953430]
[577.98168945 -140.90200806]
[591.06738281 -148.23448181]
[604.15307617 -155.56695557]
[608.56945801 -172.47000122]
[623.53802490 -180.80630493]
[639.58917236 -175.85926819]
[652.53112793 -183.44258118]
[660.52624512 -197.09500122]
[675.41888428 -196.85360718]
[688.36077881 -204.43692017]
[701.30273438 -212.02021790]
[702.69146729 -227.47502136]
[712.92437744 -239.13978577]
[728.06677246 -242.52914429]
[742.29602051 -236.33984375]
[750.14074707 -222.95178223]
[748.58447266 -207.51295471]
[738.22558594 -195.95988464]
[723.04730225 -192.73498535]
[708.88604736 -199.07829285]
[695.94409180 -191.49497986]
[683.00213623 -183.91168213]
[675.93273926 -170.80166626]
[660.11444092 -170.50064087]
[647.17248535 -162.91734314]
[645.68414307 -150.09036255]
[636.93811035 -140.32695007]
[623.97167969 -137.35452271]
[611.48553467 -142.48127747]
[598.39984131 -135.14880371]
[585.31420898 -127.81633759]
[572.22851562 -120.48386383]
[570.49328613 -107.68795776]
[561.56066895 -98.09490967]
[548.53936768 -95.37292480]
[536.15435791 -100.73937225]
[522.92974854 -93.66045380]
[524.20092773 -79.82052612]
[520.07958984 -66.50204468]
[511.15847778 -55.73209381]
[498.76327515 -49.16307068]
[484.75588989 -47.81921768]
[471.25485229 -51.93704224]
[460.31469727 -60.92451859]
[446.95617676 -54.10178375]
[433.59765625 -47.27904892]
[420.23910522 -40.45631409]
[406.88058472 -33.63357925]
[393.52206421 -26.81084633]
[380.16351318 -19.98811340]
[366.80499268 -13.16537857]
[353.44647217 -6.34264517]
[351.16448975 3.67754698]
[343.56689453 10.92061901]
[333.01568604 12.79902935]
[322.98104858 8.44814396]
[309.36950684 14.75100327]
[295.75796509 21.05386353]
[287.45993042 33.42284775]
[271.68600464 32.20044708]
[258.07449341 38.50330734]
[253.30328369 44.19480515]
[244.13934326 44.79364777]
[230.40885925 50.83301163]
[216.67837524 56.87237549]
[202.94789124 62.91173553]
[189.21742249 68.95110321]
[175.48693848 74.99046326]
[179.45059204 96.62992096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 16]
[7 15]
[8 14]
[9 13]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[62 161]
[63 160]
[64 159]
[65 158]
[66 157]
[67 156]
[68 154]
[69 153]
[71 151]
[72 150]
[73 149]
[75 145]
[76 144]
[77 143]
[78 142]
[79 141]
[80 140]
[81 139]
[82 138]
[83 137]
[89 130]
[90 129]
[93 125]
[94 124]
[95 123]
[96 122]
[99 118]
[100 117]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
