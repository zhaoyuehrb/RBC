%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:11:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGAGGUGCUGCGUCGCCAAGGUGGCAUCCUCGGCUCCGCCCCGGCGCUCUCCCAGGGCCCCUAGCUUUCCGCUGGGUCGGGCGGAA\
) } def
/len { sequence length } bind def

/coor [
[-25.06829453 173.86203003]
[-38.40595627 171.28254700]
[-48.60655594 162.47657776]
[-62.83894730 167.21356201]
[-77.07133484 171.95056152]
[-91.30372620 176.68756104]
[-105.44929504 181.67782593]
[-119.50354004 186.91979980]
[-133.55778503 192.16175842]
[-147.61203003 197.40371704]
[-161.66627502 202.64567566]
[-175.72052002 207.88764954]
[-178.89929199 222.98396301]
[-189.75138855 233.94917297]
[-204.81393433 237.28428650]
[-219.28054810 231.92510986]
[-228.53497314 219.58171082]
[-229.62414551 204.19284058]
[-222.20053101 190.66903687]
[-208.63298035 183.32566833]
[-193.25082397 184.50601196]
[-180.96247864 193.83340454]
[-166.90823364 188.59143066]
[-152.85398865 183.34947205]
[-138.79974365 178.10751343]
[-124.74550629 172.86553955]
[-110.69125366 167.62358093]
[-105.40557861 162.21374512]
[-96.04071808 162.45516968]
[-81.80832672 157.71817017]
[-67.57594299 152.98118591]
[-53.34355164 148.24418640]
[-48.96143341 132.53309631]
[-35.99907684 122.36355591]
[-19.36718941 121.83607483]
[-5.51486015 131.35031128]
[8.53938580 126.10834503]
[22.59363174 120.86638641]
[36.64787674 115.62442017]
[50.70212173 110.38246155]
[64.75637054 105.14049530]
[78.81061554 99.89853668]
[86.45437622 78.86593628]
[111.99137878 73.57857513]
[120.10099030 60.95977402]
[128.21060181 48.34096909]
[129.16250610 32.54842758]
[142.55241394 26.02466393]
[150.66203308 13.40586090]
[148.67057800 -2.51310968]
[159.97753906 -13.89432049]
[175.90921021 -12.00708008]
[184.24415588 1.70088208]
[178.58851624 16.71399117]
[163.28083801 21.51547432]
[155.17121887 34.13427734]
[154.79937744 49.02423859]
[140.82940674 56.45058441]
[132.71978760 69.06938934]
[124.61017609 81.68818665]
[130.35043335 95.54637909]
[145.00762939 98.73486328]
[159.66484070 101.92333984]
[174.32203674 105.11181641]
[188.97924805 108.30030060]
[203.63644409 111.48877716]
[217.85577393 104.05976868]
[232.47077942 110.67650604]
[236.27008057 126.26319885]
[226.33917236 138.86306763]
[210.29620361 138.81056213]
[200.44796753 126.14598083]
[185.79075623 122.95750427]
[171.13356018 119.76902008]
[156.47636414 116.58054352]
[141.81915283 113.39206696]
[127.16194916 110.20358276]
[113.20406342 122.86846924]
[96.11011505 123.47811127]
[84.05257416 113.95278168]
[69.99832916 119.19474030]
[55.94408798 124.43670654]
[41.88983917 129.67866516]
[27.83559418 134.92062378]
[13.78134823 140.16259766]
[-0.27289736 145.40455627]
[-3.01635766 159.04316711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 32]
[4 31]
[5 30]
[6 29]
[7 27]
[8 26]
[9 25]
[10 24]
[11 23]
[12 22]
[36 86]
[37 85]
[38 84]
[39 83]
[40 82]
[41 81]
[42 80]
[44 60]
[45 59]
[46 58]
[48 56]
[49 55]
[61 77]
[62 76]
[63 75]
[64 74]
[65 73]
[66 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
