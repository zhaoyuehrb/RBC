%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:02:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGCUUUACGGCCGCGGGGACGGAGCGAGCCGGCGCCAGGGCCCCUCGGGCCGGGAAGAGGGGAAGGGGAGCGAGGUUG\
) } def
/len { sequence length } bind def

/coor [
[122.97245026 137.56750488]
[108.93186951 142.84596252]
[95.13137054 136.96836853]
[89.20819092 123.18737030]
[94.44072723 109.12887573]
[79.89241028 112.78218842]
[65.34410095 116.43549347]
[50.79579163 120.08879852]
[36.24748230 123.74210358]
[30.93121719 128.33105469]
[24.99188423 129.20861816]
[20.46060944 127.07689667]
[5.67767048 129.61947632]
[-6.61129379 139.58399963]
[-20.46590424 134.11599731]
[-35.24884415 136.65858459]
[-47.50262070 147.55706787]
[-62.98057175 142.13810730]
[-65.76030731 125.97626495]
[-52.98227692 115.69745636]
[-37.79141998 121.87564087]
[-23.00847816 119.33306122]
[-11.77688885 109.55039215]
[3.13509631 114.83653259]
[17.91803551 112.29396057]
[32.59417343 109.19379425]
[47.14248276 105.54048920]
[61.69079590 101.88718414]
[76.23910522 98.23387146]
[90.78741455 94.58056641]
[104.82808685 89.30235291]
[118.18027496 82.46720886]
[131.53245544 75.63207245]
[144.88464355 68.79693604]
[154.37049866 53.15118408]
[171.76443481 54.42773438]
[184.84841919 47.09222412]
[193.10202026 33.59449768]
[207.98736572 34.11940002]
[221.07133484 26.78389168]
[221.36697388 11.49141502]
[229.22552490 -1.51397085]
[242.45075989 -8.79129696]
[257.44259644 -8.47387314]
[270.17687988 -0.74706304]
[283.26086426 -8.08257294]
[296.34481812 -15.41808319]
[309.42880249 -22.75359344]
[322.51275635 -30.08910179]
[335.59674072 -37.42461395]
[335.71026611 -52.78308487]
[343.50167847 -66.01900482]
[356.87509155 -73.57198334]
[372.23312378 -73.41030121]
[385.44458008 -65.57745361]
[392.95559692 -52.18043137]
[392.74575806 -36.82297516]
[384.87155151 -23.63615417]
[371.45104980 -16.16716385]
[356.09432983 -16.42512321]
[342.93225098 -24.34064102]
[329.84826660 -17.00513077]
[316.76431274 -9.66962147]
[303.68032837 -2.33411193]
[290.59637451 5.00139809]
[277.51239014 12.33690834]
[277.46102905 27.23197174]
[269.91073608 40.18761826]
[256.80270386 47.67400360]
[241.60762024 47.59359741]
[228.40684509 39.86786270]
[215.32287598 47.20337296]
[208.00512695 60.17641449]
[192.18392944 60.17619324]
[179.09994507 67.51170349]
[175.43223572 79.20307922]
[164.37828064 85.36907196]
[151.71978760 82.14911652]
[138.36759949 88.98426056]
[125.01541138 95.81939697]
[111.66322327 102.65454102]
[124.86057281 109.78406525]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 30]
[6 29]
[7 28]
[8 27]
[9 26]
[12 25]
[13 24]
[15 22]
[16 21]
[31 81]
[32 80]
[33 79]
[34 78]
[36 75]
[37 74]
[39 72]
[40 71]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
