%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUCCCGGCGUGCAGCUUGGUGGCGGCUGAGCCGGCAGCGGGCCGCCUCAGGCAGCCCCGGCCGGGCCGCCCGGGUCCCCGGCAGCGGGGUAGG\
) } def
/len { sequence length } bind def

/coor [
[213.53204346 221.67697144]
[203.09680176 210.90173340]
[192.66156006 200.12649536]
[182.22631836 189.35124207]
[171.79107666 178.57600403]
[161.35585022 167.80076599]
[150.92060852 157.02552795]
[140.14537048 146.59028625]
[129.04119873 136.50578308]
[117.93702698 126.42126465]
[106.83285522 116.33674622]
[96.71455383 117.40066528]
[87.68077087 112.72061157]
[82.71357727 103.84147644]
[83.45263672 93.69427490]
[73.01740265 82.91902924]
[57.85877991 78.38838959]
[54.56272125 63.86306000]
[44.12748337 53.08781815]
[33.69224548 42.31258011]
[23.25700760 31.53733826]
[12.82176876 20.76209831]
[2.38653064 9.98685837]
[-5.99602270 5.89722538]
[-8.20359325 -1.30497754]
[-18.28810692 -12.40914726]
[-28.37261963 -23.51331711]
[-38.45713425 -34.61748886]
[-48.54164505 -45.72165680]
[-58.62615967 -56.82582855]
[-68.71067047 -67.93000031]
[-81.65161133 -69.36706543]
[-89.82212067 -78.98134613]
[-89.19348907 -91.17893219]
[-98.91691589 -102.60062408]
[-114.72900391 -105.31306458]
[-122.34047699 -119.43556976]
[-115.91246033 -134.13455200]
[-100.37597656 -138.13421631]
[-87.64929199 -128.36636353]
[-87.49522400 -112.32404327]
[-77.77179718 -100.90235901]
[-60.99827957 -96.02459717]
[-57.60650253 -78.01451111]
[-47.52198792 -66.91033936]
[-37.43747711 -55.80617142]
[-27.35296249 -44.70199966]
[-17.26844978 -33.59783173]
[-7.18393612 -22.49365997]
[2.90057707 -11.38949108]
[13.16177082 -0.44838032]
[23.59700966 10.32685947]
[34.03224564 21.10210037]
[44.46748734 31.87734032]
[54.90272522 42.65258026]
[65.33795929 53.42782211]
[79.75019073 57.18774414]
[83.79264069 72.48379517]
[94.22788239 83.25903320]
[112.31922913 87.27938843]
[116.91737366 105.23258209]
[128.02154541 115.31709290]
[139.12571716 125.40160370]
[150.22987366 135.48611450]
[156.89466858 137.34011841]
[160.89419556 141.70727539]
[161.69584656 146.59028625]
[172.13108826 157.36552429]
[182.56632996 168.14077759]
[193.00155640 178.91601562]
[203.43679810 189.69125366]
[213.87203979 200.46649170]
[224.30728149 211.24172974]
[234.91387939 221.84832764]
[245.68911743 232.28356934]
[257.53439331 229.75859070]
[268.98507690 233.31530762]
[277.14865112 241.93127441]
[280.02392578 253.32217407]
[276.99053955 264.54663086]
[287.07507324 275.65078735]
[297.15957642 286.75497437]
[307.24407959 297.85913086]
[317.32861328 308.96331787]
[333.10314941 313.44616699]
[336.84518433 329.41265869]
[324.70526123 340.43783569]
[309.17187500 335.17990112]
[306.22442627 319.04782104]
[296.13992310 307.94363403]
[286.05541992 296.83947754]
[275.97088623 285.73532104]
[265.88638306 274.63113403]
[247.72218323 274.97778320]
[234.71614075 261.84704590]
[235.25387573 243.05880737]
[224.47863770 232.62356567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[7 67]
[8 64]
[9 63]
[10 62]
[11 61]
[15 59]
[16 58]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 44]
[34 42]
[35 41]
[74 97]
[75 96]
[80 93]
[81 92]
[82 91]
[83 90]
[84 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
