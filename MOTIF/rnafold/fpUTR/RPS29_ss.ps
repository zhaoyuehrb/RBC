%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:17:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAAAAUUUGAAGAGCGCAUGCGUGGGCCAGCUUCUUCCUUUUACCUCGUUGCACUGCUGAGAGCAAG\
) } def
/len { sequence length } bind def

/coor [
[111.45960236 165.71185303]
[97.20136261 166.64485168]
[83.07154846 164.51974487]
[69.71852875 159.43400574]
[57.75502777 151.62103271]
[47.73001862 141.43933105]
[40.10351944 129.35610962]
[35.22548676 115.92581940]
[33.31975555 101.76474762]
[34.47377396 87.52268982]
[38.63459015 73.85317993]
[45.61127853 61.38347244]
[34.43454742 51.37943649]
[23.25781441 41.37540436]
[12.08108330 31.37137222]
[0.90435219 21.36734009]
[-10.27237892 11.36330605]
[-19.04722977 7.81695127]
[-21.70965767 0.66101760]
[-32.43293762 -9.82760811]
[-48.00977325 -9.82399654]
[-58.73528671 -20.61371231]
[-58.64273453 -35.46386337]
[-69.36601257 -45.95248795]
[-85.37796021 -49.49504089]
[-90.05730438 -65.21240997]
[-78.59033203 -76.93592072]
[-62.77329254 -72.60543060]
[-58.87739182 -56.67576981]
[-48.15410995 -46.18714523]
[-33.30963898 -46.60818863]
[-22.28529358 -36.12398911]
[-21.94431305 -20.55088806]
[-11.22103214 -10.06226254]
[-0.26834622 0.18657495]
[10.90838528 10.19060802]
[22.08511734 20.19464111]
[33.26184845 30.19867325]
[44.43857956 40.20270538]
[55.61531067 50.20674133]
[68.46719360 41.22031403]
[83.06197357 35.48277283]
[98.59294891 33.31124878]
[114.20169830 34.82576370]
[129.02548218 39.94260788]
[142.24497986 48.37895966]
[153.12948608 59.66852951]
[161.07740784 73.18730927]
[165.64942932 88.18808746]
[166.59286499 103.84173584]
[163.85557556 119.28304291]
[157.58882141 133.65853882]
[169.60597229 142.63562012]
[181.62312317 151.61270142]
[193.64027405 160.58978271]
[209.32675171 162.65011597]
[214.89256287 176.46572876]
[226.90971375 185.44281006]
[243.24966431 186.83496094]
[249.96809387 201.79472351]
[240.15367126 214.93280029]
[223.90261841 212.73384094]
[217.93263245 197.45996094]
[205.91548157 188.48287964]
[191.08854675 187.06465149]
[184.66319275 172.60693359]
[172.64604187 163.62985229]
[160.62889099 154.65277100]
[148.61174011 145.67568970]
[137.76840210 154.98106384]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 35]
[19 34]
[20 33]
[23 30]
[24 29]
[52 69]
[53 68]
[54 67]
[55 66]
[57 64]
[58 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
