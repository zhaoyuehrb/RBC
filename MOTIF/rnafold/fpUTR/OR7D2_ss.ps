%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUUUUUGAGACAGUUCUCCCUCUAUUGCCCAGGCUGGAGUGCAGUGGUGUAAACAUAGCUCCCUGCAGUUGCAAAUUCCUGGGCUCAAGUGAUCCUUCCAUCUCAGCCUCCCGAGUAGCUGGGACUACAGGUGUCCACCACCAUGCCUGGCUAAUGACCUCUUCUUUUGUAGAUACAUCAGCUAC\
) } def
/len { sequence length } bind def

/coor [
[84.45453644 142.78273010]
[76.36854553 138.42919922]
[69.39039612 132.58612061]
[63.78602600 125.51931000]
[59.76015854 117.54011536]
[57.44896698 108.99180603]
[56.91567230 100.23485565]
[58.14922333 91.63172913]
[44.18611908 86.15161133]
[30.22301102 80.67149353]
[16.25990486 75.19138336]
[2.29679942 69.71126556]
[-11.66630650 64.23114777]
[-20.39227486 76.51703644]
[-31.79826927 86.35144806]
[-45.21844101 93.16600800]
[-59.87072754 96.56846619]
[-74.90242767 96.36527252]
[-89.43984222 92.57258606]
[-102.63901520 85.41506195]
[-113.73477173 75.31257629]
[-122.08505249 62.85559082]
[-127.20808411 48.77061844]
[-128.81015015 33.87788773]
[-126.80242920 19.04355240]
[-140.76553345 13.56343746]
[-153.81773376 21.74550629]
[-169.00752258 20.68552971]
[-180.52432251 10.99907398]
[-184.08633423 -3.43872523]
[-198.04943848 -8.91884041]
[-212.01255798 -14.39895630]
[-225.97566223 -19.87907219]
[-239.93876648 -25.35918617]
[-253.90187073 -30.83930206]
[-267.86499023 -36.31941605]
[-284.09054565 -24.67597771]
[-303.91171265 -25.16198158]
[-319.32196045 -37.40771103]
[-324.20095825 -56.32827759]
[-338.49731445 -60.86857986]
[-353.99209595 -57.67136383]
[-363.78036499 -68.89808655]
[-378.07672119 -73.43838501]
[-392.37307739 -77.97869110]
[-406.66940308 -82.51898956]
[-420.96575928 -87.05928802]
[-430.11154175 -86.67540741]
[-435.46087646 -91.79569244]
[-449.67980957 -96.57299042]
[-465.22558594 -93.63376617]
[-474.82589722 -105.02162933]
[-489.04479980 -109.79892731]
[-502.29296875 -101.49110413]
[-517.77465820 -103.69388580]
[-528.17980957 -115.36720276]
[-528.59552002 -130.99925232]
[-518.82543945 -143.20907593]
[-503.48272705 -146.23156738]
[-489.81173706 -138.63958740]
[-484.26748657 -124.01783752]
[-470.04858398 -119.24053955]
[-455.51983643 -122.52146912]
[-444.90249634 -110.79190063]
[-430.68359375 -106.01460266]
[-416.42547607 -101.35564423]
[-402.12911987 -96.81533813]
[-387.83276367 -92.27503967]
[-373.53640747 -87.73474121]
[-359.24005127 -83.19443512]
[-344.76785278 -86.71640015]
[-333.95703125 -75.16493225]
[-319.66067505 -70.62462616]
[-312.85903931 -78.47055817]
[-303.79644775 -83.61708832]
[-293.49844360 -85.45243835]
[-283.14031982 -83.74122620]
[-273.91278076 -78.65427399]
[-266.88525391 -70.75196075]
[-262.88186646 -60.92258453]
[-262.38485718 -50.28252411]
[-248.42175293 -44.80241013]
[-234.45864868 -39.32229233]
[-220.49554443 -33.84217834]
[-206.53244019 -28.36206245]
[-192.56933594 -22.88194656]
[-178.60621643 -17.40183067]
[-166.17488098 -25.56270027]
[-151.14401245 -24.82996559]
[-139.28813171 -15.27530003]
[-135.28541565 -0.39966846]
[-121.32231140 5.08044672]
[-112.70416260 -7.15948391]
[-101.40013885 -16.98694992]
[-88.06448364 -23.82741928]
[-73.47038269 -27.27940369]
[-58.46518326 -27.13801384]
[-43.92115402 -23.40713310]
[-30.68479538 -16.29942131]
[-19.52757072 -6.22421694]
[-11.10094452 6.23604727]
[-5.89834070 20.35950661]
[-4.22625256 35.32668304]
[-6.18619156 50.26804352]
[7.77691460 55.74816132]
[21.74002075 61.22827530]
[35.70312881 66.70838928]
[49.66623306 72.18850708]
[63.62934113 77.66862488]
[80.97825623 61.79412842]
[104.10188293 57.51835632]
[125.98023987 66.13936615]
[137.06042480 56.02851105]
[148.14062500 45.91765976]
[159.22080994 35.80680466]
[170.30101013 25.69595146]
[170.77272034 9.89870453]
[182.33374023 -0.87711698]
[198.12512207 -0.23840885]
[208.77810669 11.43589497]
[207.97248840 27.21963692]
[196.18620300 37.74860382]
[180.41186523 36.77614594]
[169.33166504 46.88699722]
[158.25148010 56.99784851]
[147.17127991 67.10870361]
[136.09109497 77.21955872]
[140.00572205 81.93228912]
[143.28916931 87.29975128]
[145.83442688 93.23490143]
[147.54684448 99.63352966]
[162.54632568 99.50886536]
[177.54580688 99.38420105]
[192.54528809 99.25953674]
[207.54476929 99.13487244]
[222.54425049 99.01020813]
[237.54373169 98.88554382]
[246.44984436 86.17882538]
[261.13479614 81.16561127]
[275.95187378 85.77358246]
[285.20364380 98.23088074]
[285.33261108 113.74742126]
[276.28918457 126.35677338]
[261.55072021 131.21038818]
[246.78448486 126.44195557]
[237.66839600 113.88502502]
[222.66891479 114.00968933]
[207.66943359 114.13435364]
[192.66995239 114.25901794]
[177.67047119 114.38368225]
[162.67098999 114.50834656]
[147.67150879 114.63301086]
[141.16323853 128.14755249]
[150.41780090 139.95234680]
[159.67236328 151.75714111]
[174.27580261 157.84399414]
[176.03901672 172.63386536]
[185.29356384 184.43865967]
[194.54812622 196.24345398]
[208.02828979 196.31495667]
[218.84460449 204.02961731]
[223.17286682 216.38432312]
[219.64234924 228.78787231]
[228.69941711 240.74487305]
[237.75648499 252.70185852]
[253.26719666 252.25773621]
[266.05764771 261.04318237]
[271.20962524 275.67999268]
[266.74212646 290.54003906]
[254.37297058 299.90933228]
[238.85833740 300.18515015]
[226.16395569 291.26147461]
[221.17103577 276.56964111]
[225.79948425 261.75891113]
[216.74241638 249.80192566]
[207.68536377 237.84494019]
[190.95037842 236.26626587]
[180.31860352 222.81343079]
[182.74333191 205.49801636]
[173.48876953 193.69322205]
[164.23422241 181.88842773]
[150.29270935 176.64591980]
[147.86756897 161.01168823]
[138.61300659 149.20689392]
[129.35844421 137.40209961]
[121.04228210 142.18574524]
[112.00988770 145.16731262]
[102.64318848 146.25553894]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 109]
[9 108]
[10 107]
[11 106]
[12 105]
[13 104]
[25 92]
[26 91]
[30 87]
[31 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 81]
[40 73]
[41 72]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[49 65]
[50 64]
[52 62]
[53 61]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
[131 152]
[132 151]
[133 150]
[134 149]
[135 148]
[136 147]
[137 146]
[153 185]
[154 184]
[155 183]
[157 181]
[158 180]
[159 179]
[163 176]
[164 175]
[165 174]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
