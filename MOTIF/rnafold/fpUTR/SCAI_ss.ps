%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:11:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUGGCAGAGGCGCGAGGCCCUCCUCCCGCCUCUCCGCCUACUCCAGCCUCCGCCGCCUCAGCUUCCCGAGCGAGCCCUGCGGCCGCCGGAGCAGCUCCCGCGGCGGAGCAGGAGCCGG\
) } def
/len { sequence length } bind def

/coor [
[31.49688721 182.06910706]
[26.65645599 196.26664734]
[13.30023956 203.09391785]
[-1.04243803 198.70214844]
[-8.28615379 185.56713867]
[-4.34677935 171.09268188]
[-18.18657494 176.87715149]
[-32.02637100 182.66162109]
[-38.83350372 188.93019104]
[-46.29424286 188.41209412]
[-60.27725220 193.84121704]
[-74.26026154 199.27035522]
[-88.24327087 204.69947815]
[-102.22628021 210.12861633]
[-116.20928955 215.55773926]
[-130.19229126 220.98687744]
[-140.25637817 233.19445801]
[-154.92120361 230.58827209]
[-168.90420532 236.01741028]
[-182.88720703 241.44653320]
[-196.87022400 246.87567139]
[-206.71424866 259.99157715]
[-222.96029663 257.75601196]
[-228.89584351 242.46871948]
[-218.41488647 229.85595703]
[-202.29934692 232.89265442]
[-188.31634521 227.46353149]
[-174.33334351 222.03439331]
[-160.35032654 216.60527039]
[-151.28640747 204.78601074]
[-135.62142944 207.00386047]
[-121.63842010 201.57473755]
[-107.65541077 196.14559937]
[-93.67240143 190.71647644]
[-79.68939209 185.28733826]
[-65.70638275 179.85821533]
[-51.72337341 174.42907715]
[-37.81083679 168.82182312]
[-23.97104263 163.03735352]
[-10.13124657 157.25289917]
[3.22514391 150.42597961]
[16.01974869 142.59666443]
[19.24553490 128.10079956]
[32.10955048 119.97850800]
[47.29226685 123.46029663]
[60.08687210 115.63098145]
[72.88147736 107.80167389]
[85.67607880 99.97236633]
[92.52355957 87.78205109]
[106.49460602 87.23303223]
[119.28921509 79.40372467]
[125.05967712 72.16951752]
[132.51206970 71.54266357]
[145.50244141 64.04266357]
[158.49282837 56.54266357]
[171.48321533 49.04266357]
[184.47358704 41.54266357]
[197.46397400 34.04266357]
[210.45434570 26.54266548]
[223.44473267 19.04266548]
[225.18565369 3.73660755]
[235.48504639 -7.47836733]
[250.23883057 -10.44315338]
[263.74765015 -4.22622871]
[276.73800659 -11.72622871]
[289.72839355 -19.22622871]
[302.71878052 -26.72622871]
[306.89117432 -43.65724182]
[321.69735718 -52.21482849]
[337.80462646 -47.56457138]
[350.59924316 -55.39387894]
[363.39382935 -63.22319031]
[369.16430664 -70.45738983]
[376.61669922 -71.08424377]
[389.60708618 -78.58424377]
[402.59747314 -86.08424377]
[408.55078125 -93.16872406]
[416.01675415 -93.60504913]
[429.19445801 -100.77084351]
[442.37213135 -107.93663788]
[450.46554565 -122.19948578]
[466.86401367 -122.05122375]
[474.69821167 -107.64437103]
[465.90896606 -93.79946899]
[449.53793335 -94.75895691]
[436.36022949 -87.59316254]
[423.18255615 -80.42736053]
[410.09747314 -73.09386444]
[397.10708618 -65.59386444]
[384.11669922 -58.09386826]
[371.22314453 -50.42858505]
[358.42855835 -42.59927750]
[345.63394165 -34.76996613]
[344.37783813 -21.87835312]
[335.77017212 -11.93966198]
[322.81072998 -8.76232052]
[310.21878052 -13.73584747]
[297.22839355 -6.23584747]
[284.23800659 1.26415229]
[271.24765015 8.76415253]
[269.87725830 23.57158470]
[259.93276978 34.86634064]
[245.07063293 38.17839813]
[230.94473267 32.03304672]
[217.95434570 39.53304672]
[204.96397400 47.03304672]
[191.97358704 54.53304672]
[178.98321533 62.03304672]
[165.99282837 69.53304291]
[153.00244141 77.03304291]
[140.01206970 84.53304291]
[127.11852264 92.19832611]
[114.32392120 100.02763367]
[107.47644043 112.21794891]
[93.50539398 112.76696777]
[80.71078491 120.59627533]
[67.91618347 128.42558289]
[55.12157822 136.25489807]
[51.31177139 151.35864258]
[38.22469330 159.11640930]
[23.84905815 155.39126587]
[11.05445385 163.22058105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 40]
[7 39]
[8 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[16 31]
[18 29]
[19 28]
[20 27]
[21 26]
[41 122]
[42 121]
[45 118]
[46 117]
[47 116]
[48 115]
[50 113]
[51 112]
[53 111]
[54 110]
[55 109]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[64 100]
[65 99]
[66 98]
[67 97]
[70 93]
[71 92]
[72 91]
[74 90]
[75 89]
[76 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
