%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:35:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCGCCCCGCUCCCUACCUAAGGCGUGAGGCUACGAGCGGUCGGCUGUGGCAGCUUCUCUUGUCUCUGACGGCUUGUAGUU\
) } def
/len { sequence length } bind def

/coor [
[117.49559021 156.46560669]
[102.49569702 156.52160645]
[89.70692444 148.68276978]
[82.94983673 135.29092407]
[84.24308014 120.34677124]
[93.20214081 108.31339264]
[78.29645538 109.99285889]
[63.39077377 111.67232513]
[50.54367828 120.90610504]
[37.03012848 114.64245605]
[22.12444687 116.32192230]
[7.21876287 118.00138855]
[-5.62833405 127.23516846]
[-19.14188194 120.97151947]
[-34.04756546 122.65099335]
[-41.58795547 136.21278381]
[-55.67383575 142.72181702]
[-70.88890076 139.67524719]
[-81.38263702 128.24455261]
[-83.11999512 112.82503510]
[-75.43292999 99.34584808]
[-61.27726746 92.98999023]
[-46.09615326 96.20143890]
[-35.72703171 107.74530792]
[-20.82135010 106.06584167]
[-9.04040623 96.95218658]
[5.53929567 103.09571075]
[20.44497871 101.41624451]
[35.35066223 99.73677063]
[47.13160324 90.62312317]
[61.71130753 96.76663971]
[76.61698914 95.08717346]
[91.52267456 93.40770721]
[105.93643188 89.25517273]
[119.45096588 82.74691772]
[132.96549988 76.23866272]
[146.48002625 69.73040771]
[159.99456787 63.22215271]
[173.50909424 56.71389389]
[187.02363586 50.20563889]
[196.10006714 37.24690247]
[210.92402649 38.69581223]
[224.43856812 32.18755722]
[237.95309448 25.67930031]
[251.46763611 19.17104340]
[264.98217773 12.66278839]
[266.98101807 2.99981856]
[273.23248291 -4.45292521]
[282.14010620 -7.99876595]
[291.52490234 -6.91314459]
[299.15798950 -1.58748913]
[313.31622314 -6.54167509]
[327.47448730 -11.49586105]
[341.63272095 -16.45004654]
[355.79098511 -21.40423203]
[362.42153931 -35.75035858]
[377.28292847 -41.12760925]
[391.55813599 -34.34575653]
[396.77795410 -19.42835045]
[389.84555054 -5.22562695]
[374.87380981 -0.16380878]
[360.74517822 -7.24598265]
[346.58691406 -2.29179692]
[332.42868042 2.66238904]
[318.27041626 7.61657476]
[304.11215210 12.57076073]
[292.49349976 29.45390129]
[271.49041748 26.17732048]
[257.97589111 32.68557739]
[244.46134949 39.19383240]
[230.94682312 45.70209122]
[217.43229675 52.21034622]
[209.32250977 64.70356750]
[193.53189087 63.72017288]
[180.01734924 70.22843170]
[166.50282288 76.73668671]
[152.98828125 83.24494171]
[139.47375488 89.75319672]
[125.95922089 96.26145172]
[112.44468689 102.76970673]
[126.43083191 108.19075775]
[135.47763062 120.15551758]
[136.88240051 135.08959961]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 33]
[7 32]
[8 31]
[10 29]
[11 28]
[12 27]
[14 25]
[15 24]
[34 80]
[35 79]
[36 78]
[37 77]
[38 76]
[39 75]
[40 74]
[42 72]
[43 71]
[44 70]
[45 69]
[46 68]
[51 66]
[52 65]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
