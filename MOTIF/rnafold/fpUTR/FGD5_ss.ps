%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:40:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAACCACCUGUCGCUCCCAAGCCAAAGACUACCAGUCCACUGACGCCAGUGACCGCGCCCAAAUUCCCUUCCUCAGCCAGGCCCGAGAGUCUUCACAGUCCAAACUCC\
) } def
/len { sequence length } bind def

/coor [
[103.36103821 446.37237549]
[90.42887878 438.56622314]
[80.22081757 427.43194580]
[73.56438446 413.87213135]
[70.99918365 398.98602295]
[72.73316956 383.98034668]
[78.62577057 370.07159424]
[88.19929504 358.38723755]
[100.67767334 349.87448120]
[115.04933167 345.22344971]
[114.62484741 330.22943115]
[114.20036316 315.23544312]
[113.77587891 300.24145508]
[101.31179810 283.89450073]
[111.21172333 265.00079346]
[109.51719666 250.09683228]
[107.82266235 235.19285583]
[106.12812805 220.28887939]
[92.41587067 214.47169495]
[83.39643860 202.49230957]
[81.57212830 187.50770569]
[87.53229523 173.53010559]
[99.76836395 164.35264587]
[98.07382965 149.44866943]
[96.37929535 134.54469299]
[82.32510376 131.67446899]
[70.06685638 123.10068512]
[61.90112686 109.83890533]
[59.58322144 93.81626892]
[45.51218796 88.61952972]
[31.44115448 83.42279816]
[17.37012291 78.22605896]
[0.41717818 78.41049194]
[-4.45308828 62.17113495]
[9.80340862 52.99569702]
[22.56685638 64.15502930]
[36.63788986 69.35176086]
[50.70892334 74.54850006]
[64.77995300 79.74523163]
[74.52973938 68.34603882]
[67.21431732 55.25082779]
[59.89889526 42.15561676]
[52.58346939 29.06040382]
[45.26804733 15.96519279]
[30.91394234 8.03475952]
[30.87542152 -8.36434269]
[45.19210815 -16.36212349]
[59.13622284 -7.73115206]
[58.36325836 8.64976883]
[65.67868042 21.74497986]
[72.99410248 34.84019089]
[80.30953217 47.93540192]
[87.62495422 61.03061676]
[95.75335693 60.88102341]
[103.44425964 62.34669113]
[110.39199066 65.24830627]
[116.34436798 69.35188293]
[126.09416199 57.95269394]
[117.99986267 45.18657303]
[114.02965546 30.60134697]
[114.53657532 15.49391556]
[119.47554016 1.20762670]
[128.40737915 -10.98719501]
[140.53787231 -20.00619316]
[154.78840637 -25.04740524]
[169.89181519 -25.66256905]
[184.50512695 -21.79698563]
[197.32891846 -13.79437923]
[207.22291565 -2.36633778]
[213.30735779 11.47096634]
[215.04121399 26.48712921]
[212.27030945 41.34692383]
[205.24102783 54.72902679]
[194.57843018 65.44351196]
[181.23059082 72.53765869]
[166.38442993 75.38064575]
[151.36003113 73.71968842]
[137.49334717 67.70248413]
[127.74356079 79.10167694]
[134.72885132 99.40684509]
[128.44104004 119.93871307]
[111.28327179 132.85015869]
[112.97780609 147.75413513]
[114.67234039 162.65811157]
[128.65635681 168.85444641]
[137.60224915 181.13726807]
[139.18841553 196.14894104]
[133.08847046 209.84736633]
[121.03210449 218.59434509]
[122.72663879 233.49832153]
[124.42117310 248.40229797]
[126.11570740 263.30627441]
[134.43113708 268.28140259]
[139.37472534 276.45352173]
[139.90565491 285.85052490]
[136.03015137 294.27474976]
[128.76986694 299.81698608]
[129.19435120 314.81097412]
[129.61883545 329.80496216]
[130.04331970 344.79895020]
[144.65509033 348.62945557]
[157.59509277 356.42260742]
[167.81433105 367.54663086]
[174.48437500 381.09976196]
[177.06452942 395.98327637]
[175.34562683 410.99069214]
[169.46699524 424.90536499]
[159.90521240 436.59933472]
[147.43539429 445.12463379]
[133.06842041 449.79010010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 100]
[11 99]
[12 98]
[13 97]
[15 92]
[16 91]
[17 90]
[18 89]
[23 84]
[24 83]
[25 82]
[29 39]
[30 38]
[31 37]
[32 36]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[57 79]
[58 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
