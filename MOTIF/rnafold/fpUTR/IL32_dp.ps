%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:21 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (IL32)
} def

/sequence { (\
ACUGCGUGCAGAAGGUGACUGUCUCAGUGGAGCUGGGUCAUCUCAGGCCUUGGCUCCUUGAACUUUUGGCCGCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
2 11 0.031999449 ubox
3 10 0.032174809 ubox
3 72 0.004236966 ubox
4 9 0.032016414 ubox
4 71 0.005716493 ubox
4 73 0.995442525 ubox
5 72 0.998672439 ubox
6 70 0.016067147 ubox
6 71 0.998091068 ubox
6 73 0.027510906 ubox
7 69 0.020690037 ubox
7 72 0.027432003 ubox
8 22 0.005274261 ubox
8 70 0.937933694 ubox
8 71 0.020958251 ubox
8 73 0.006123153 ubox
9 21 0.005586665 ubox
9 68 0.362713175 ubox
9 69 0.926342275 ubox
9 72 0.006137756 ubox
10 20 0.006059163 ubox
10 24 0.008546774 ubox
10 66 0.004294704 ubox
10 67 0.378766024 ubox
11 19 0.006090287 ubox
11 23 0.013585634 ubox
11 65 0.005041315 ubox
11 66 0.378969325 ubox
11 67 0.800509672 ubox
12 22 0.012920117 ubox
12 64 0.004802797 ubox
12 65 0.373803515 ubox
12 66 0.919412427 ubox
12 67 0.016611730 ubox
13 20 0.032330380 ubox
13 24 0.003927689 ubox
13 64 0.367495104 ubox
13 65 0.923164081 ubox
13 66 0.015159152 ubox
14 19 0.035650272 ubox
14 20 0.007387882 ubox
14 23 0.009187278 ubox
14 24 0.003511275 ubox
14 63 0.355714671 ubox
14 64 0.927035581 ubox
14 65 0.013151302 ubox
14 71 0.026013773 ubox
14 74 0.025823179 ubox
15 19 0.019884851 ubox
15 22 0.013121900 ubox
15 23 0.042022898 ubox
15 24 0.005735759 ubox
15 28 0.005703941 ubox
15 58 0.003451593 ubox
15 63 0.930972774 ubox
15 64 0.010509220 ubox
15 70 0.026074749 ubox
15 73 0.026052296 ubox
16 21 0.013115208 ubox
16 26 0.040991759 ubox
16 60 0.030203281 ubox
16 62 0.923269672 ubox
16 68 0.008007901 ubox
16 69 0.025397872 ubox
16 72 0.026039032 ubox
17 23 0.206655864 ubox
17 25 0.053024332 ubox
17 28 0.019481874 ubox
17 59 0.038643958 ubox
17 65 0.003967865 ubox
17 66 0.004841290 ubox
17 67 0.010174290 ubox
17 71 0.025871464 ubox
18 22 0.180154194 ubox
18 24 0.050736263 ubox
18 28 0.461179395 ubox
18 58 0.022621753 ubox
18 64 0.004304786 ubox
18 65 0.005191165 ubox
18 66 0.012113041 ubox
19 27 0.474144335 ubox
19 69 0.023901556 ubox
20 26 0.473718521 ubox
20 60 0.003563057 ubox
20 68 0.023657644 ubox
21 25 0.466202074 ubox
21 63 0.063123008 ubox
21 67 0.014433691 ubox
21 70 0.008440333 ubox
22 61 0.066873223 ubox
22 62 0.075796984 ubox
22 69 0.008439842 ubox
23 60 0.065841411 ubox
23 68 0.008437352 ubox
24 61 0.862413963 ubox
25 60 0.871971543 ubox
26 58 0.010893890 ubox
26 59 0.869898399 ubox
26 64 0.004077610 ubox
27 57 0.006785953 ubox
27 58 0.805826991 ubox
27 63 0.004465746 ubox
28 60 0.004626208 ubox
28 62 0.004614579 ubox
29 56 0.005120650 ubox
29 57 0.999312194 ubox
29 58 0.005145977 ubox
30 56 0.999963760 ubox
30 57 0.003973247 ubox
31 55 0.999842393 ubox
32 54 0.999983966 ubox
33 53 0.999843287 ubox
34 52 0.865487813 ubox
35 44 0.003747147 ubox
35 49 0.015649189 ubox
35 50 0.762292069 ubox
35 51 0.589402646 ubox
36 43 0.003756786 ubox
36 48 0.012075307 ubox
36 49 0.995774192 ubox
36 50 0.087941772 ubox
37 42 0.003762146 ubox
37 48 0.997902130 ubox
37 49 0.063276949 ubox
38 47 0.999435325 ubox
39 46 0.995309379 ubox
41 47 0.005133286 ubox
42 46 0.006703566 ubox
4 73 0.9500000 lbox
5 72 0.9500000 lbox
6 71 0.9500000 lbox
8 70 0.9500000 lbox
9 69 0.9500000 lbox
11 67 0.9500000 lbox
12 66 0.9500000 lbox
13 65 0.9500000 lbox
14 64 0.9500000 lbox
15 63 0.9500000 lbox
16 62 0.9500000 lbox
24 61 0.9500000 lbox
25 60 0.9500000 lbox
26 59 0.9500000 lbox
27 58 0.9500000 lbox
29 57 0.9500000 lbox
30 56 0.9500000 lbox
31 55 0.9500000 lbox
32 54 0.9500000 lbox
33 53 0.9500000 lbox
34 52 0.9500000 lbox
35 51 0.9500000 lbox
36 49 0.9500000 lbox
37 48 0.9500000 lbox
38 47 0.9500000 lbox
39 46 0.9500000 lbox
showpage
end
%%EOF
