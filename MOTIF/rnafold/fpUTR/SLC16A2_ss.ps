%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCCAGCUGGGGCGCGGAGCCUGGAGGAGGAGGCAGCGGCAGCGGCAGCAGCAGCCCUCCGAGCAGCAGCAGCUGCAGCAGCAGAAACAAGUACCAGCCACAAAGCGGCUCCUCUGGCCCAAGCAGCCACAGUCCCCCCGCCGCG\
) } def
/len { sequence length } bind def

/coor [
[169.44897461 498.37646484]
[168.48133850 483.40768433]
[167.51371765 468.43893433]
[151.06065369 456.41592407]
[148.64205933 435.89035034]
[162.22538757 419.93090820]
[159.97454834 405.10073853]
[157.72372437 390.27056885]
[155.47288513 375.44042969]
[145.91339111 364.01828003]
[151.49229431 349.21331787]
[149.24147034 334.38314819]
[146.99064636 319.55300903]
[144.58038330 304.74789429]
[142.01098633 289.96960449]
[139.12422180 275.25000000]
[135.92140198 260.59594727]
[131.38760376 254.69017029]
[132.81091309 245.59220886]
[129.92413330 230.87260437]
[127.03736115 216.15301514]
[122.63167572 210.15106201]
[124.25041962 201.08583069]
[121.68102264 186.30752563]
[119.11161804 171.52923584]
[116.54222107 156.75093079]
[113.97282410 141.97262573]
[111.40342712 127.19432068]
[61.69006729 116.73389435]
[47.57030487 111.67105103]
[33.45054626 106.60820770]
[19.33078575 101.54536438]
[5.21102619 96.48252106]
[-1.46818006 97.29868317]
[-6.73382998 94.92840576]
[-9.39930820 90.88615417]
[-23.28817940 85.22053528]
[-38.98854065 87.17226410]
[-47.85059738 75.20091248]
[-61.73946762 69.53529358]
[-77.43982697 71.48701477]
[-86.30188751 59.51566315]
[-100.19075775 53.85004425]
[-116.35549927 56.61285019]
[-126.62091827 43.82405853]
[-120.42683411 28.63968277]
[-104.14518738 26.68010521]
[-94.52513885 39.96117401]
[-80.63626862 45.62679291]
[-65.92932892 43.26982880]
[-56.07384872 55.64641953]
[-42.18497849 61.31203842]
[-27.47804260 58.95507431]
[-17.62256050 71.33166504]
[-3.73368859 76.99728394]
[10.27386951 82.36276245]
[24.39362907 87.42560577]
[38.51338959 92.48844910]
[52.63314819 97.55129242]
[66.75290680 102.61413574]
[72.54408264 97.84838867]
[84.12643433 88.31690979]
[89.91761017 83.55116272]
[87.66677856 68.72100067]
[85.41594696 53.89083862]
[83.16511536 39.06067276]
[80.91428375 24.23050880]
[70.25933075 11.76439285]
[75.98217773 -3.60379100]
[92.19564819 -6.06457138]
[102.22071075 6.91349077]
[95.74444580 21.97967911]
[97.99527740 36.80984116]
[100.24610901 51.64000702]
[102.49694061 66.47016907]
[104.74777222 81.30033112]
[111.06113434 85.34896851]
[116.19580078 71.25516510]
[121.33047485 57.16136932]
[126.46514130 43.06756973]
[131.59980774 28.97377014]
[129.91290283 14.06892872]
[134.88761902 -0.08211746]
[145.53024292 -10.65257549]
[159.71481323 -15.53090572]
[174.60783386 -13.74262047]
[187.23429871 -5.64494514]
[195.07196045 7.14454079]
[196.55519104 22.07102776]
[191.38769531 36.15282440]
[180.60171509 46.57696915]
[166.35403442 51.26094818]
[155.68748474 61.80727005]
[145.02095032 72.35359192]
[134.35440063 82.89990997]
[123.68786621 93.44623566]
[130.00122070 97.49486542]
[144.41816711 93.35340881]
[158.83512878 89.21195984]
[165.02291870 74.85071564]
[179.01741028 67.87303925]
[194.21084595 71.57355499]
[203.42932129 84.20500946]
[202.32017517 99.80320740]
[191.40710449 111.00315857]
[175.84292603 112.51659393]
[162.97657776 103.62890625]
[148.55963135 107.77035522]
[134.14268494 111.91181183]
[126.18173218 124.62492371]
[128.75112915 139.40322876]
[131.32052612 154.18153381]
[133.88992310 168.95983887]
[136.45932007 183.73812866]
[139.02871704 198.51643372]
[141.75695801 213.26623535]
[144.64373779 227.98583984]
[147.53050232 242.70542908]
[150.57548523 257.39312744]
[153.77828979 272.04721069]
[158.01487732 277.27493286]
[158.80061340 282.99575806]
[156.78929138 287.40020752]
[159.35868835 302.17849731]
[163.94215393 310.16540527]
[161.82080078 317.30215454]
[164.07164001 332.13232422]
[166.32246399 346.96249390]
[176.04295349 359.44540405]
[170.30305481 373.18957520]
[172.55387878 388.01974487]
[174.80471802 402.84991455]
[177.05554199 417.68008423]
[186.35118103 420.98291016]
[193.73390198 427.43795776]
[198.19468689 436.10601807]
[199.14488220 445.74960327]
[196.49366760 455.00961304]
[190.65475464 462.59680176]
[182.48246765 467.47131348]
[183.45010376 482.44006348]
[184.41772461 497.40881348]
[193.96159363 510.74475098]
[186.93881226 525.56408691]
[170.57380676 526.62194824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 142]
[2 141]
[3 140]
[6 133]
[7 132]
[8 131]
[9 130]
[11 128]
[12 127]
[13 126]
[14 124]
[15 123]
[16 120]
[17 119]
[19 118]
[20 117]
[21 116]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[28 110]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[36 55]
[37 54]
[39 52]
[40 51]
[42 49]
[43 48]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[97 109]
[98 108]
[99 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
