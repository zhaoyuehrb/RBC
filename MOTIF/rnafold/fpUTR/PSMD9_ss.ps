%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGUUCUCGCGUUCGCGGACGGCUGUGGUGUUUUGGCGCAUGGGCGGAGCCGUAGUUACGGUCGACUGGGGCGUCGUCCCUAGCCCGGGAGCCGGGUCUCUGGAGUCGCGGCCCGGGGUUCACG\
) } def
/len { sequence length } bind def

/coor [
[116.20971680 484.80850220]
[122.99277496 471.08810425]
[135.38186646 462.10095215]
[133.16369629 447.26586914]
[130.94554138 432.43078613]
[119.56906128 426.24890137]
[113.77402496 414.45266724]
[115.89597321 401.28445435]
[125.37666321 391.62692261]
[123.52611542 376.74151611]
[121.67557526 361.85610962]
[119.82502747 346.97067261]
[117.97447968 332.08526611]
[115.93997192 317.22387695]
[113.72181702 302.38879395]
[111.50365448 287.55371094]
[107.35845184 281.33691406]
[109.41881561 272.32470703]
[107.56827545 257.43930054]
[105.71772766 242.55389404]
[103.86718750 227.66847229]
[99.87702179 221.35105896]
[102.15966797 212.39256287]
[100.67787170 197.46594238]
[99.19607544 182.53930664]
[97.71427917 167.61268616]
[93.88159180 161.19850159]
[96.38513184 152.29920959]
[95.27298737 137.34049988]
[94.16084290 122.38178253]
[93.04870605 107.42306519]
[89.32333374 100.16931152]
[92.09872437 92.08140564]
[91.35692596 77.09976196]
[90.61511993 62.11811447]
[89.87331390 47.13646698]
[89.13150787 32.15481949]
[88.38970184 17.17317390]
[84.80738831 8.65073109]
[87.81948090 1.81270969]
[87.44846344 -13.18270111]
[76.28187561 -24.04294968]
[76.11922455 -39.25571442]
[86.54162598 -49.83442307]
[86.17060852 -64.82983398]
[85.79959106 -79.82524872]
[85.24314117 -94.81491852]
[84.50133514 -109.79656982]
[83.75952911 -124.77821350]
[75.34922791 -138.17886353]
[82.44764709 -151.27319336]
[81.70584106 -166.25485229]
[80.96403503 -181.23649597]
[72.55373383 -194.63714600]
[79.65215302 -207.73147583]
[78.91034698 -222.71311951]
[78.16854858 -237.69476318]
[77.42674255 -252.67642212]
[76.68493652 -267.65805054]
[64.80385590 -278.07995605]
[63.85543060 -293.85574341]
[74.40234375 -305.62597656]
[90.18729401 -306.40756226]
[101.84535217 -295.73678589]
[102.45999908 -279.94445801]
[91.66658020 -268.39987183]
[92.40838623 -253.41822815]
[93.15019226 -238.43656921]
[93.89199829 -223.45492554]
[94.63380432 -208.47328186]
[102.99104309 -196.14422607]
[95.94568634 -181.97830200]
[96.68749237 -166.99665833]
[97.42929840 -152.01499939]
[105.78653717 -139.68594360]
[98.74117279 -125.52001953]
[99.48297882 -110.53837585]
[100.22478485 -95.55672455]
[103.73558044 -88.96085358]
[100.79500580 -80.19625854]
[101.16602325 -65.20085144]
[101.53704071 -50.20544052]
[112.46984863 -40.15510178]
[113.05972290 -24.95290756]
[102.44387817 -13.55371761]
[102.81488800 1.44169331]
[103.37134552 16.43136787]
[104.11315155 31.41301537]
[104.85495758 46.39466095]
[105.59676361 61.37630844]
[106.33856964 76.35795593]
[107.08037567 91.33959961]
[108.00741577 106.31092834]
[109.11956024 121.26963806]
[110.23170471 136.22834778]
[111.34384155 151.18707275]
[112.64090729 166.13088989]
[114.12270355 181.05751038]
[115.60449982 195.98414612]
[117.08629608 210.91076660]
[118.75259399 225.81793213]
[120.60314178 240.70335388]
[122.45368958 255.58876038]
[124.30422974 270.47418213]
[126.33873749 285.33554077]
[128.55690002 300.17065430]
[130.77505493 315.00573730]
[135.18174744 323.13259888]
[132.85989380 330.23474121]
[134.71043396 345.12014771]
[136.56098938 360.00555420]
[138.41152954 374.89096069]
[140.26206970 389.77636719]
[154.23458862 400.21594238]
[156.34611511 417.19055176]
[145.78062439 430.21261597]
[147.99877930 445.04769897]
[150.21694946 459.88278198]
[164.69296265 464.85305786]
[175.19261169 475.98928833]
[179.30316162 490.73248291]
[176.08001709 505.69479370]
[166.26383972 517.43792725]
[152.11032104 523.26342773]
[136.87184143 521.83264160]
[124.05007935 513.47436523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 118]
[4 117]
[5 116]
[9 113]
[10 112]
[11 111]
[12 110]
[13 109]
[14 107]
[15 106]
[16 105]
[18 104]
[19 103]
[20 102]
[21 101]
[23 100]
[24 99]
[25 98]
[26 97]
[28 96]
[29 95]
[30 94]
[31 93]
[33 92]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[40 86]
[41 85]
[44 82]
[45 81]
[46 80]
[47 78]
[48 77]
[49 76]
[51 74]
[52 73]
[53 72]
[55 70]
[56 69]
[57 68]
[58 67]
[59 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
