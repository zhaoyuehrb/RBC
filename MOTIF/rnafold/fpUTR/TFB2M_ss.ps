%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUGUUUACUUCCGCUUGACCUGGCCCGGACGCCAGAAAAUGUUCCACGUGGGAUACCCUGCGUGGGGUUCACUGUAGUAGCUGCACUAGGUGAUUCUUGGAGCGGGCCUGAGAGACAAGGAC\
) } def
/len { sequence length } bind def

/coor [
[117.48349762 384.57369995]
[116.36254883 369.61566162]
[107.69577026 357.50216675]
[114.38014984 343.16238403]
[113.25920105 328.20431519]
[104.59242249 316.09085083]
[111.27680206 301.75106812]
[110.15585327 286.79299927]
[109.03489685 271.83496094]
[94.83309174 263.70269775]
[88.17399597 248.57241821]
[91.84269714 232.28413391]
[104.59575653 221.25321960]
[103.10224152 206.32775879]
[101.60872650 191.40229797]
[100.11520386 176.47683716]
[98.62168884 161.55137634]
[97.12817383 146.62591553]
[95.63465118 131.70045471]
[80.52783203 128.85096741]
[67.36174774 118.69820404]
[59.65871429 102.56098175]
[60.07306290 83.42642975]
[45.09170914 84.17411804]
[30.11035538 84.92180634]
[15.12900257 85.66949463]
[0.14764857 86.41718292]
[-10.26956463 98.30235291]
[-26.04499626 99.25697327]
[-37.81936264 88.71468353]
[-38.60714340 72.93003845]
[-27.94095802 61.26779175]
[-12.14886761 60.64694214]
[-0.60003972 71.43582916]
[14.38131428 70.68814087]
[29.36266708 69.94045258]
[44.34402084 69.19276428]
[59.32537460 68.44507599]
[63.70345306 62.35554123]
[50.19761658 55.82925797]
[35.59343338 52.40612793]
[30.32910156 38.36024475]
[39.08580399 26.18156815]
[54.07685089 26.69968605]
[61.97173691 39.45245743]
[72.45960999 50.17647171]
[76.83768463 44.08693695]
[72.77507782 29.64757347]
[68.71247101 15.20820999]
[64.64986420 0.76884657]
[60.58725739 -13.67051697]
[56.52465057 -28.10988045]
[52.46204376 -42.54924393]
[48.39943695 -56.98860931]
[44.33683014 -71.42797089]
[32.22581100 -82.48487854]
[36.00965881 -98.44152832]
[51.79587555 -102.88307953]
[63.34495544 -91.24044800]
[58.77619171 -75.49057770]
[62.83879852 -61.05121613]
[66.90140533 -46.61185074]
[70.96401215 -32.17248917]
[75.02661896 -17.73312378]
[79.08922577 -3.29376054]
[83.15183258 11.14560318]
[87.21443939 25.58496666]
[91.27704620 40.02433014]
[105.17075348 45.67808914]
[118.16113281 38.17808914]
[126.24378204 24.57730293]
[141.13458252 24.91436577]
[154.12495422 17.41436577]
[167.11534119 9.91436672]
[180.10571289 2.41436648]
[193.09609985 -5.08563328]
[199.04450989 -12.16533470]
[206.50515747 -12.60605145]
[219.67848206 -19.77986145]
[232.85180664 -26.95367050]
[246.02513123 -34.12747955]
[250.25393677 -49.35550690]
[264.05291748 -57.06029129]
[279.23538208 -52.67072296]
[286.79385376 -38.79105759]
[282.24398804 -23.65584946]
[268.28518677 -16.24455261]
[253.19894409 -20.95415688]
[240.02561951 -13.78034687]
[226.85229492 -6.60653687]
[213.67897034 0.56727260]
[200.59609985 7.90474749]
[187.60571289 15.40474796]
[174.61534119 22.90474701]
[161.62495422 30.40474701]
[148.63458252 37.90474701]
[141.48107910 50.96908188]
[125.66113281 51.16846848]
[112.67075348 58.66846848]
[132.26815796 75.65366364]
[137.60777283 99.26949310]
[128.57882690 119.86944580]
[110.56011200 130.20693970]
[112.05363464 145.13240051]
[113.54714966 160.05786133]
[115.04066467 174.98332214]
[116.53418732 189.90878296]
[118.02770233 204.83424377]
[119.52122498 219.75970459]
[131.95880127 225.84323120]
[139.68132019 237.20411682]
[140.74484253 250.79101562]
[134.97674561 263.01867676]
[123.99295807 270.71398926]
[125.11390686 285.67205811]
[126.23485565 300.63009644]
[134.98181152 313.81347656]
[128.21725464 327.08337402]
[129.33821106 342.04144287]
[138.08515930 355.22482300]
[131.32060242 368.49468994]
[132.44155884 383.45275879]
[142.12156677 396.69018555]
[135.25099182 411.58068848]
[118.89769745 412.80621338]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 122]
[2 121]
[4 119]
[5 118]
[7 116]
[8 115]
[9 114]
[13 109]
[14 108]
[15 107]
[16 106]
[17 105]
[18 104]
[19 103]
[23 38]
[24 37]
[25 36]
[26 35]
[27 34]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[69 99]
[70 98]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[78 91]
[79 90]
[80 89]
[81 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
