%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:35:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUCAGGGGGCUGGGGACGCGCGUGGGGAUCGCUACCCGGCUCGGCCACUGCUGGGCGGACACCUGGGCGCGCCGCCGCGGGAGGAGCCCGGACUCGGGCCGAGGCUGCCCAGGCA\
) } def
/len { sequence length } bind def

/coor [
[-54.65378952 162.24519348]
[-63.47660828 151.73120117]
[-78.04805756 155.29110718]
[-92.61950684 158.85101318]
[-107.19095612 162.41090393]
[-111.13947296 166.21020508]
[-115.70658112 167.85775757]
[-119.93343353 167.49171448]
[-123.06685638 165.62377930]
[-137.87588501 168.00973511]
[-152.68490601 170.39569092]
[-167.49394226 172.78164673]
[-182.30296326 175.16760254]
[-197.11198425 177.55354309]
[-211.92100525 179.93949890]
[-226.73004150 182.32545471]
[-233.35911560 194.13812256]
[-245.42340088 199.85496521]
[-258.37878418 197.57269287]
[-267.48846436 188.35519409]
[-282.35577393 190.34608459]
[-297.22305298 192.33695984]
[-305.43618774 196.62664795]
[-312.51202393 194.17749023]
[-327.42703247 195.77189636]
[-340.35107422 205.86653137]
[-355.45181274 199.47128296]
[-357.19494629 183.16503906]
[-343.78726196 173.72225952]
[-329.02145386 180.85687256]
[-314.10641479 179.26248169]
[-299.21392822 177.46968079]
[-284.34664917 175.47879028]
[-269.47937012 173.48791504]
[-259.91583252 159.72462463]
[-243.03501892 157.02215576]
[-229.11598206 167.51643372]
[-214.30696106 165.13047791]
[-199.49794006 162.74452209]
[-184.68891907 160.35856628]
[-169.87988281 157.97261047]
[-155.07086182 155.58666992]
[-140.26184082 153.20071411]
[-125.45281219 150.81475830]
[-110.75085449 147.83946228]
[-96.17940521 144.27955627]
[-81.60795593 140.71966553]
[-67.03650665 137.15975952]
[-62.92540741 121.59369659]
[-51.48550797 110.13290405]
[-35.74636459 105.94534302]
[-19.94333458 110.25500488]
[-8.37788963 121.98614502]
[6.09362841 118.03960419]
[20.56514549 114.09307098]
[35.03666306 110.14653015]
[49.50818253 106.19998932]
[63.97970200 102.25344849]
[78.45121765 98.30691528]
[92.92273712 94.36037445]
[95.35311127 91.18210602]
[99.21657562 89.14292145]
[103.94663239 88.87615204]
[108.70748901 90.72601318]
[123.44775391 87.94668579]
[138.18801880 85.16735077]
[150.31558228 75.00701141]
[164.25610352 80.25211334]
[178.99636841 77.47278595]
[193.73663330 74.69345093]
[205.86421204 64.53311157]
[219.80473328 69.77821350]
[234.54499817 66.99888611]
[241.25227356 53.13098907]
[254.68234253 45.95555115]
[269.58605957 48.03945160]
[280.27694702 58.37595749]
[295.01721191 55.59663010]
[309.75747681 52.81729889]
[317.73065186 48.09657669]
[324.92678833 50.16566467]
[339.73580933 47.77971268]
[348.78695679 34.82391739]
[364.36257935 32.14521027]
[377.22195435 41.33281326]
[379.73583984 56.93588638]
[370.41278076 69.69740295]
[354.78399658 72.04618073]
[342.12176514 62.58873749]
[327.31274414 64.97468567]
[312.53680420 67.55755615]
[297.79653931 70.33689117]
[283.05627441 73.11621857]
[276.86361694 86.63617706]
[263.74212646 94.00434113]
[248.62120056 92.21229553]
[237.32432556 81.73915100]
[222.58406067 84.51847839]
[211.51080322 94.48001862]
[196.51596069 89.43371582]
[181.77571106 92.21304321]
[167.03544617 94.99237823]
[155.96218872 104.95391846]
[140.96734619 99.90761566]
[126.22708130 102.68694305]
[111.48681641 105.46627808]
[96.86927795 108.83189392]
[82.39775848 112.77843475]
[67.92623901 116.72496796]
[53.45471954 120.67150879]
[38.98320389 124.61804962]
[24.51168442 128.56459045]
[10.04016685 132.51112366]
[-4.43135118 136.45765686]
[-7.31023741 150.21719360]
[-15.81845093 161.32394409]
[-28.23527145 167.62615967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 48]
[3 47]
[4 46]
[5 45]
[9 44]
[10 43]
[11 42]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[20 34]
[21 33]
[22 32]
[24 31]
[25 30]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[64 106]
[65 105]
[66 104]
[68 102]
[69 101]
[70 100]
[72 98]
[73 97]
[77 93]
[78 92]
[79 91]
[81 90]
[82 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
