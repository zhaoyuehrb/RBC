%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:55:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCUGGCAGACUCGGCGGCGGCGACAGCCUGGGCGGACAGUGCGCCGUGCGCAGGCGCGGAGCUAGACCUCGCUGCAGCCCCCAUCGCCUCGGGGAGUCUCACCCACCGAGUCCGCCCGCUGGCCCGUCAGUGCUCUCCCCGUCGUUUGCCCUCUCCAGUUCCCCCAGUGCCUGCCCUACGCACCCCG\
) } def
/len { sequence length } bind def

/coor [
[340.08593750 621.02697754]
[332.66992188 606.04382324]
[328.72296143 589.79187012]
[328.44033813 573.06353760]
[331.83865356 556.67517090]
[338.75473022 541.42700195]
[348.85366821 528.06433105]
[361.64480591 517.24078369]
[354.57385254 504.01199341]
[347.50289917 490.78317261]
[340.43194580 477.55435181]
[333.36099243 464.32553101]
[326.29006958 451.09671021]
[319.21911621 437.86788940]
[303.84109497 429.42727661]
[304.57617188 411.03524780]
[297.28973389 397.92388916]
[290.00329590 384.81253052]
[283.99633789 380.48611450]
[282.70687866 371.42651367]
[275.63592529 358.19769287]
[260.25793457 349.75708008]
[260.99301147 331.36502075]
[253.70655823 318.25369263]
[246.42010498 305.14233398]
[238.81408691 292.21374512]
[230.89306641 279.47570801]
[222.97204590 266.73767090]
[207.07493591 259.32089233]
[206.60554504 240.92016602]
[198.47717285 228.31343079]
[190.34880066 215.70671082]
[182.01524353 203.23466492]
[173.47874451 190.90063477]
[164.94224548 178.56661987]
[156.40573120 166.23258972]
[147.86923218 153.89857483]
[139.33273315 141.56454468]
[130.79623413 129.23052979]
[122.25972748 116.89649963]
[113.72322845 104.56247711]
[110.22144318 117.46016693]
[95.07452393 125.53153229]
[74.90026855 119.48073578]
[59.93238831 118.49968719]
[44.96450424 117.51863861]
[29.99662018 116.53759003]
[15.02873611 115.55654907]
[-1.17193305 120.55400848]
[-10.45888710 106.36990356]
[0.60001290 93.51934052]
[16.00978279 100.58866119]
[30.97766685 101.56970978]
[45.94554901 102.55075836]
[60.91343307 103.53180695]
[75.88131714 104.51284790]
[82.62548828 91.11448669]
[72.92114258 79.67657471]
[63.21680450 68.23867035]
[53.51246262 56.80076218]
[34.25053406 50.89170837]
[31.58021736 31.75021935]
[21.50683403 20.63595390]
[6.50624323 15.60675335]
[3.69209099 0.98041368]
[-6.38129330 -10.13385296]
[-16.45467758 -21.24811935]
[-26.70856285 -32.19608307]
[-37.14020157 -42.97480392]
[-52.94448853 -42.98275757]
[-64.05491638 -54.22259140]
[-63.87987518 -70.02590942]
[-52.52320480 -81.01689148]
[-36.72261810 -80.67476654]
[-25.85232544 -69.20252991]
[-26.36147690 -53.40644455]
[-15.92983818 -42.62771988]
[-11.23886204 -41.65624619]
[-7.11391449 -37.71765518]
[-5.34041071 -31.32150459]
[4.73297358 -20.20723724]
[14.80635834 -9.09297085]
[29.08643341 -4.85873747]
[32.62110138 10.56256866]
[42.69448471 21.67683601]
[52.92392731 21.26010323]
[61.87751007 26.66350174]
[66.46549988 36.30501175]
[64.95037079 47.09642029]
[74.65470886 58.53432846]
[84.35905457 69.97223663]
[94.06339264 81.41014099]
[108.64319611 77.88460541]
[112.04933929 63.27644730]
[115.45548248 48.66829300]
[118.86162567 34.06013870]
[122.14814758 19.42460632]
[125.31481934 4.76267719]
[114.86968231 -6.71245718]
[113.19776917 -22.13919830]
[120.94196320 -35.58564758]
[135.12446594 -41.88137436]
[150.29182434 -38.60554123]
[160.61186218 -27.01777267]
[162.11633301 -11.57380199]
[154.22671509 1.78784776]
[139.97674561 7.92935038]
[136.81007385 22.59127998]
[138.47372437 29.80471039]
[133.46978760 37.46628189]
[130.06364441 52.07443619]
[126.65749359 66.68259430]
[123.25135040 81.29074860]
[126.05725098 96.02597809]
[134.59375000 108.36000061]
[143.13024902 120.69402313]
[151.66674805 133.02804565]
[160.20326233 145.36206055]
[168.73976135 157.69609070]
[177.27626038 170.03012085]
[185.81275940 182.36413574]
[194.34925842 194.69816589]
[200.17561340 197.87774658]
[203.07463074 202.78930664]
[202.95552063 207.57833862]
[211.08389282 220.18505859]
[219.21226501 232.79177856]
[231.64143372 236.27751160]
[238.14988708 246.95840454]
[235.71008301 258.81665039]
[243.63110352 271.55468750]
[251.55212402 284.29272461]
[256.18560791 286.76547241]
[259.10525513 290.40884399]
[260.15231323 294.36959839]
[259.53146362 297.85586548]
[266.81790161 310.96722412]
[274.10437012 324.07858276]
[286.27893066 328.36975098]
[292.07489014 339.45346069]
[288.86474609 351.12673950]
[295.93569946 364.35556030]
[303.11465454 377.52609253]
[310.40109253 390.63745117]
[317.68753052 403.74877930]
[329.86212158 408.03997803]
[335.65808105 419.12365723]
[332.44793701 430.79693604]
[339.51885986 444.02575684]
[346.58981323 457.25457764]
[353.66076660 470.48339844]
[360.73171997 483.71221924]
[367.80267334 496.94104004]
[374.87362671 510.16986084]
[387.67462158 506.18557739]
[400.97326660 504.51760864]
[414.35400391 505.21670532]
[427.39889526 508.25970459]
[439.70080566 513.55017090]
[450.87594604 520.92163086]
[460.57598877 530.14270020]
[468.49890137 540.92425537]
[474.39825439 552.92883301]
[478.09103394 565.78076172]
[479.46313477 579.07824707]
[478.47308350 592.40570068]
[475.15316772 605.34698486]
[469.60839844 617.49816895]
[462.01321411 628.48022461]
[452.60598755 637.95092773]
[441.68154907 645.61529541]
[447.87216187 659.27825928]
[454.06277466 672.94122314]
[460.25335693 686.60418701]
[475.53170776 688.74334717]
[487.21322632 698.82031250]
[491.57037354 713.61962891]
[487.21282959 728.41876221]
[475.53106689 738.49548340]
[460.25268555 740.63427734]
[446.25296021 734.15264893]
[437.99914551 721.11895752]
[438.12503052 705.69207764]
[446.59042358 692.79479980]
[440.39981079 679.13183594]
[434.20919800 665.46887207]
[428.01858521 651.80590820]
[411.72940063 655.39617920]
[395.04309082 655.32250977]
[378.77392578 651.58575439]
[363.71643066 644.36541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 154]
[9 153]
[10 152]
[11 151]
[12 150]
[13 149]
[14 148]
[16 145]
[17 144]
[18 143]
[20 142]
[21 141]
[23 138]
[24 137]
[25 136]
[26 132]
[27 131]
[28 130]
[30 127]
[31 126]
[32 125]
[33 122]
[34 121]
[35 120]
[36 119]
[37 118]
[38 117]
[39 116]
[40 115]
[41 114]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[57 92]
[58 91]
[59 90]
[60 89]
[62 85]
[63 84]
[65 82]
[66 81]
[67 80]
[68 77]
[69 76]
[93 113]
[94 112]
[95 111]
[96 110]
[97 108]
[98 107]
[171 187]
[172 186]
[173 185]
[174 184]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
