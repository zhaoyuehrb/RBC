%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCCUCCCCUCCUAGCUGGCUUCGGCGGGGACGGCGGCGGCGGCGGCGGGCGGGGAGGGCGUGCGCCGGCCGAGAGGUGUCGGCGGCGAGGCAAAGGAAGUUUCAAGUGGAAGGUCGUCCGUCGGCCGGCGCGUCCUCCUGCUCUCCUCCGCAGCAUC\
) } def
/len { sequence length } bind def

/coor [
[15.80254459 211.69451904]
[5.04185915 222.14476013]
[-5.71882629 232.59501648]
[-10.22833347 247.75993347]
[-24.74905777 251.07623291]
[-35.50974274 261.52648926]
[-46.16796112 272.08120728]
[-56.72269440 282.73944092]
[-67.27742767 293.39764404]
[-77.83216095 304.05587769]
[-88.38689423 314.71408081]
[-73.65529633 317.53897095]
[-66.50228882 330.72360229]
[-72.16575623 344.61337280]
[-86.49854279 349.03729248]
[-99.00529480 340.75592041]
[-100.52762604 325.83297729]
[-112.07038879 335.41235352]
[-123.61314392 344.99172974]
[-135.15589905 354.57113647]
[-140.33764648 370.13009644]
[-156.45510864 373.15655518]
[-166.92803955 360.53713989]
[-160.98277283 345.25360107]
[-144.73529053 343.02838135]
[-133.19253540 333.44897461]
[-121.64978027 323.86959839]
[-110.10701752 314.29019165]
[-99.04511261 304.15936279]
[-88.49037933 293.50112915]
[-77.93564606 282.84292603]
[-67.38091278 272.18469238]
[-56.82617569 261.52648926]
[-54.34152222 254.52552795]
[-45.95999146 250.76579285]
[-35.19930649 240.31555176]
[-31.45947266 225.89810181]
[-16.16907310 221.83433533]
[-5.40838718 211.38407898]
[5.35229778 200.93383789]
[8.84083176 178.05802917]
[31.87425613 171.85354614]
[41.34057617 160.21788025]
[50.80689621 148.58221436]
[60.27321625 136.94653320]
[62.30332947 122.19093323]
[77.01436615 116.36890411]
[86.48068237 104.73323059]
[88.88875580 90.96033478]
[101.88364410 85.80044556]
[111.34996796 74.16477966]
[120.81628418 62.52910995]
[130.28260803 50.89344025]
[139.74891663 39.25777054]
[149.21524048 27.62210083]
[158.68156433 15.98643208]
[161.69178772 7.30747700]
[168.44787598 4.21844292]
[178.13941956 -7.23030663]
[187.83096313 -18.67905617]
[197.52252197 -30.12780571]
[207.21406555 -41.57655716]
[208.78303528 -48.08332443]
[212.81901550 -52.17432785]
[217.51400757 -53.27333450]
[227.64485168 -64.33523560]
[237.77571106 -75.39714813]
[247.90657043 -86.45905304]
[258.03741455 -97.52095795]
[268.16827393 -108.58286285]
[278.29913330 -119.64476776]
[288.42999268 -130.70668030]
[298.56085205 -141.76858521]
[308.69171143 -152.83049011]
[318.82257080 -163.89239502]
[303.82708740 -163.52427673]
[292.00143433 -172.75219727]
[288.71356201 -187.38742065]
[295.45587158 -200.78672791]
[309.16787720 -206.86788940]
[323.62545776 -202.87055969]
[332.26599121 -190.60919189]
[331.16720581 -175.64906311]
[342.70996094 -185.22845459]
[354.25271606 -194.80784607]
[365.70147705 -204.49938965]
[377.05511475 -214.30216980]
[388.40878296 -224.10496521]
[399.76242065 -233.90774536]
[396.99533081 -248.95069885]
[402.09567261 -263.26443481]
[413.59936523 -273.03845215]
[428.35211182 -275.72412109]
[442.37390137 -270.69866943]
[453.72753906 -280.50143433]
[452.56756592 -295.86245728]
[460.58135986 -308.80972290]
[474.51751709 -314.48840332]
[488.95245361 -310.91476440]
[500.30612183 -320.71755981]
[505.18328857 -336.37466431]
[521.23864746 -339.71502686]
[531.95581055 -327.30233765]
[526.30987549 -311.90573120]
[510.10888672 -309.36392212]
[498.75524902 -299.56112671]
[500.18569946 -284.75936890]
[492.53549194 -271.80026245]
[478.55798340 -265.76016235]
[463.53033447 -269.14779663]
[452.17666626 -259.34500122]
[455.10366821 -244.74026489]
[450.29541016 -230.53688049]
[438.94833374 -220.58145142]
[424.04385376 -217.62294006]
[409.56521606 -222.55409241]
[398.21154785 -212.75131226]
[386.85791016 -202.94853210]
[375.50424194 -193.14573669]
[372.48129272 -186.35983276]
[363.83212280 -183.26507568]
[352.28933716 -173.68569946]
[340.74658203 -164.10630798]
[329.88446045 -153.76153564]
[319.75360107 -142.69963074]
[309.62274170 -131.63772583]
[299.49188232 -120.57582092]
[289.36105347 -109.51391602]
[279.23019409 -98.45201111]
[269.09933472 -87.39009857]
[258.96847534 -76.32819366]
[248.83761597 -65.26628876]
[238.70675659 -54.20438385]
[228.57591248 -43.14247894]
[218.66281128 -31.88500595]
[208.97126770 -20.43625641]
[199.27972412 -8.98750687]
[189.58816528 2.46124268]
[179.89662170 13.90999222]
[170.31723022 25.45275116]
[160.85090637 37.08842087]
[151.38459778 48.72409058]
[141.91827393 60.35976028]
[132.45195007 71.99542999]
[122.98563385 83.63109589]
[113.51931763 95.26676941]
[111.11124420 109.03966522]
[98.11635590 114.19955444]
[88.65003204 125.83522034]
[85.94282532 141.42308044]
[71.90888214 146.41285706]
[62.44256592 158.04852295]
[52.97624588 169.68420410]
[43.50992584 181.31987000]
[45.97710419 187.86689758]
[46.26891708 194.80545044]
[44.38842010 201.43688965]
[40.55575562 207.10359192]
[35.18294144 211.25425720]
[28.82974625 213.49736023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 40]
[2 39]
[3 38]
[5 36]
[6 35]
[7 33]
[8 32]
[9 31]
[10 30]
[11 29]
[17 28]
[18 27]
[19 26]
[20 25]
[42 154]
[43 153]
[44 152]
[45 151]
[47 149]
[48 148]
[50 146]
[51 145]
[52 144]
[53 143]
[54 142]
[55 141]
[56 140]
[58 139]
[59 138]
[60 137]
[61 136]
[62 135]
[65 134]
[66 133]
[67 132]
[68 131]
[69 130]
[70 129]
[71 128]
[72 127]
[73 126]
[74 125]
[75 124]
[83 123]
[84 122]
[85 121]
[86 119]
[87 118]
[88 117]
[89 116]
[94 111]
[95 110]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
