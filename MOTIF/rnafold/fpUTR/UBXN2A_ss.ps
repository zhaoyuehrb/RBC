%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGGCGCGGCCGCGGAACCUGAGGCGGUCUGGGGCGGCGGCGCUCCGGCUCUGAAGGGCUCCAGCCAAACGGAGCCCGCGGCCAAACGGUGCCUGCGGUGCCUGAGCUGAGUGAGGCCGAGGCCGGGAGGCCGUGCCCGGAGUAAGGCGAAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[9.16021729 241.68981934]
[-2.72493625 250.84095764]
[-14.61008930 259.99209595]
[-26.49524307 269.14321899]
[-32.70938492 283.69296265]
[-47.51409149 285.32693481]
[-59.39924622 294.47805786]
[-71.28440094 303.62921143]
[-77.49854279 318.17892456]
[-92.30324554 319.81292725]
[-104.18840027 328.96405029]
[-116.07355499 338.11517334]
[-122.28769684 352.66491699]
[-137.09240723 354.29891968]
[-148.97755432 363.45004272]
[-160.86271667 372.60116577]
[-172.74786377 381.75228882]
[-177.67309570 389.51144409]
[-184.96151733 390.96441650]
[-197.02627563 399.87744141]
[-199.12623596 415.54159546]
[-211.73788452 425.06637573]
[-227.37896729 422.80093384]
[-236.76988220 410.08926392]
[-234.33918762 394.47302246]
[-221.52896118 385.21701050]
[-205.93928528 387.81268311]
[-193.87454224 378.89965820]
[-181.89898682 369.86715698]
[-170.01383972 360.71603394]
[-158.12869263 351.56488037]
[-146.24353027 342.41375732]
[-140.87950134 328.51858521]
[-125.22468567 326.23004150]
[-113.33953094 317.07891846]
[-101.45437622 307.92776489]
[-96.09033966 294.03259277]
[-80.43552399 291.74404907]
[-68.55037689 282.59292603]
[-56.66521835 273.44180298]
[-51.30118179 259.54660034]
[-35.64636993 257.25805664]
[-23.76121712 248.10693359]
[-11.87606335 238.95579529]
[0.00908988 229.80467224]
[10.92727184 219.51908875]
[20.77065849 208.20062256]
[23.16122437 190.83869934]
[40.57690811 184.93566895]
[50.19331360 173.42372131]
[59.80971909 161.91178894]
[69.42612457 150.39984131]
[79.04252625 138.88790894]
[88.65893555 127.37596130]
[75.76454926 113.81893921]
[74.09728241 96.30702209]
[83.00423431 82.44969177]
[76.38105011 68.99110413]
[69.75787354 55.53252411]
[63.13468933 42.07394028]
[56.51150513 28.61535835]
[49.88832474 15.15677643]
[43.26514053 1.69819319]
[27.95203590 -0.80948400]
[17.06140518 -11.86271000]
[14.78092003 -27.21129227]
[21.98747063 -40.95339203]
[35.90999222 -47.80488586]
[51.19499588 -45.13123703]
[61.96507645 -33.96052170]
[64.07892609 -18.58810043]
[56.72372437 -4.92498922]
[63.34690475 8.53359318]
[69.97008514 21.99217606]
[76.59326935 35.45075989]
[83.21645355 48.90934372]
[89.83963776 62.36792374]
[96.46282196 75.82650757]
[104.58744049 76.00365448]
[112.20448303 78.83587646]
[123.32500458 68.76940155]
[134.44552612 58.70292664]
[145.56605530 48.63644791]
[156.68656921 38.56997299]
[157.62899780 23.02167511]
[169.05020142 12.97125244]
[183.86730957 13.96553230]
[194.98783875 3.89905572]
[205.27342224 -7.01912642]
[214.65904236 -18.71998596]
[224.04466248 -30.42084503]
[233.43028259 -42.12170410]
[242.81591797 -53.82256317]
[252.20153809 -65.52342224]
[257.39572144 -81.66210175]
[274.34158325 -81.13853455]
[278.52957153 -64.70999146]
[263.90240479 -56.13780212]
[254.51676941 -44.43694305]
[245.13114929 -32.73608398]
[235.74552917 -21.03522491]
[226.35990906 -9.33436489]
[216.97428894 2.36649489]
[231.81477356 0.18474562]
[245.17388916 7.00631475]
[252.10853577 20.30709648]
[250.05274963 35.16555023]
[239.76721191 46.08377838]
[225.05775452 49.02183151]
[211.36717224 42.89257812]
[203.76121521 29.96394920]
[205.05432129 15.01957989]
[193.93379211 25.08605576]
[193.45251465 39.92869568]
[182.31811523 50.29595184]
[166.75305176 49.69049835]
[155.63252258 59.75697327]
[144.51200867 69.82344818]
[133.39147949 79.88992310]
[122.27095795 89.95640564]
[126.64906311 104.53105164]
[121.46833038 120.42483521]
[134.92691040 127.04801178]
[148.38549805 133.67120361]
[161.90925598 140.16024780]
[175.49687195 146.51454163]
[189.08447266 152.86883545]
[205.36732483 150.91928101]
[214.97918701 164.20628357]
[208.03219604 179.06129456]
[191.67282104 180.20275879]
[182.73017883 166.45643616]
[169.14257812 160.10214233]
[155.55497742 153.74786377]
[148.12313843 153.76316833]
[141.76231384 147.12977600]
[128.30372620 140.50659180]
[114.84514618 133.88342285]
[100.17087555 136.99237061]
[90.55446625 148.50430298]
[80.93806458 160.01625061]
[71.32165527 171.52818298]
[61.70525360 183.04013062]
[52.08884811 194.55206299]
[52.45563507 207.48068237]
[44.16363525 216.87751770]
[32.08912659 218.04400635]
[22.24574089 229.36247253]
[36.98114777 226.55751038]
[51.18766785 231.37152100]
[61.18242264 242.55654907]
[64.37438965 257.21298218]
[59.93608856 271.54135132]
[49.01809311 281.82711792]
[34.45077133 285.40386963]
[20.01053810 281.34436035]
[9.44085598 270.70098877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 45]
[2 44]
[3 43]
[4 42]
[6 40]
[7 39]
[8 38]
[10 36]
[11 35]
[12 34]
[14 32]
[15 31]
[16 30]
[17 29]
[19 28]
[20 27]
[46 148]
[47 147]
[49 144]
[50 143]
[51 142]
[52 141]
[53 140]
[54 139]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[80 120]
[81 119]
[82 118]
[83 117]
[84 116]
[87 113]
[88 112]
[89 103]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
[122 138]
[123 137]
[124 136]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
