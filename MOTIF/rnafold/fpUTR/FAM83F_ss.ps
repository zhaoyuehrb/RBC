%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:44:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGCGCCCCGCCCCUCGGCGGCUCCAGGUGCGGCUGUGGGACCUCGGACCGCGGCGGGGCCGGGGCCAGGGCCGGGGCCGGGGCCGGGGCGCC\
) } def
/len { sequence length } bind def

/coor [
[107.04074860 250.59729004]
[94.19779968 239.52954102]
[101.27774048 224.12464905]
[102.26909637 209.15744019]
[103.26045990 194.19023132]
[104.25181580 179.22302246]
[105.24317932 164.25582886]
[106.23453522 149.28862000]
[107.22589111 134.32141113]
[108.21725464 119.35420990]
[95.39536285 111.56966400]
[82.57347107 119.35420990]
[69.75157928 127.13875580]
[62.34581375 141.77046204]
[45.95884705 142.40243530]
[37.44818878 128.38455200]
[45.56887436 114.13722229]
[61.96703720 114.31686401]
[74.78892517 106.53231812]
[87.61081696 98.74777985]
[97.39960480 87.38205719]
[103.19709015 73.54770660]
[108.99458313 59.71335983]
[114.79206848 45.87901306]
[120.58955383 32.04467010]
[126.38703918 18.21032143]
[126.84847260 8.88337326]
[132.61172485 4.01948166]
[138.86344910 -9.61561680]
[145.11517334 -23.25071526]
[142.89421082 -41.43706894]
[157.39447021 -51.16938782]
[163.19195557 -65.00373077]
[168.98944092 -78.83808136]
[174.78692627 -92.67242432]
[180.58441162 -106.50677490]
[178.78213501 -122.22499084]
[190.83724976 -130.97276306]
[196.63473511 -144.80711365]
[202.43223572 -158.64144897]
[201.95280457 -165.56100464]
[204.74707031 -170.79833984]
[209.09736633 -173.17819214]
[215.79649353 -186.59913635]
[222.49562073 -200.02008057]
[229.19476318 -213.44102478]
[235.89389038 -226.86195374]
[242.59301758 -240.28289795]
[241.83351135 -256.08587646]
[254.44041443 -264.01779175]
[261.13955688 -277.43872070]
[255.89456177 -292.34729004]
[262.80300903 -306.56170654]
[277.76620483 -311.64877319]
[291.90676880 -304.59042358]
[296.83535767 -289.57427979]
[289.62789917 -275.50912476]
[274.56048584 -270.73959351]
[267.86135864 -257.31863403]
[269.10003662 -242.47563171]
[256.01397705 -233.58377075]
[249.31483459 -220.16282654]
[242.61569214 -206.74188232]
[235.91656494 -193.32095337]
[229.21743774 -179.90000916]
[222.51829529 -166.47906494]
[216.26657104 -152.84396362]
[210.46908569 -139.00962830]
[204.67160034 -125.17527771]
[206.88854980 -110.44658661]
[194.41876221 -100.70928955]
[188.62127686 -86.87493896]
[182.82379150 -73.04059601]
[177.02630615 -59.20624542]
[171.22882080 -45.37189865]
[175.53102112 -33.93355942]
[170.65565491 -22.28880882]
[158.75027466 -16.99898720]
[152.49855042 -3.36388850]
[146.24682617 10.27120972]
[140.22138977 24.00780869]
[134.42390442 37.84215546]
[128.62641907 51.67650223]
[122.82892609 65.51084900]
[117.03144073 79.34519196]
[111.23394775 93.17954254]
[123.18445587 120.34557343]
[122.19309998 135.31277466]
[121.20173645 150.27998352]
[120.21038055 165.24717712]
[119.21902466 180.21438599]
[118.22766113 195.18159485]
[117.23630524 210.14878845]
[116.24494171 225.11599731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 20]
[12 19]
[13 18]
[21 86]
[22 85]
[23 84]
[24 83]
[25 82]
[26 81]
[28 80]
[29 79]
[30 78]
[32 75]
[33 74]
[34 73]
[35 72]
[36 71]
[38 69]
[39 68]
[40 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
