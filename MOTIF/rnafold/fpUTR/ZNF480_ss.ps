%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:39:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUUCCCACAAACCCGGAAGCGGAUCGCGUGGAGUGAAGGUCACGCCGCGGCGCGAUUGACUUCUAAAGAGUC\
) } def
/len { sequence length } bind def

/coor [
[99.36863708 119.66036987]
[90.28499603 115.04813385]
[77.62007141 123.08554077]
[64.95515442 131.12294006]
[52.29023743 139.16033936]
[39.62531662 147.19773865]
[26.96039963 155.23513794]
[26.97510719 170.66250610]
[18.62759590 183.63642883]
[4.58152485 190.01696777]
[-10.68105412 187.76814270]
[-22.28990936 177.60752869]
[-26.54069519 162.77735901]
[-22.07700348 148.00985718]
[-10.32318115 138.01730347]
[4.97016954 135.98826599]
[18.92299652 142.57022095]
[31.58791542 134.53282166]
[44.25283432 126.49542236]
[56.91775513 118.45802307]
[69.58267212 110.42061615]
[82.24758911 102.38321686]
[90.24617767 81.91236877]
[115.20494080 82.49281311]
[120.13793945 68.32717133]
[125.07094574 54.16152573]
[130.00393677 39.99588013]
[134.93693542 25.83023262]
[139.86993408 11.66458797]
[144.80294800 -2.50105762]
[149.73594666 -16.66670418]
[153.76974487 -31.11414146]
[156.88841248 -45.78635406]
[152.18940735 -60.89363480]
[162.40377808 -71.73410797]
[165.52246094 -86.40632629]
[168.64112854 -101.07853699]
[171.75981140 -115.75075531]
[169.13873291 -132.50086975]
[184.50866699 -139.65640259]
[195.63937378 -126.86798096]
[186.43202209 -112.63208008]
[183.31333923 -97.95986176]
[180.19467163 -83.28765106]
[177.07598877 -68.61543274]
[181.99806213 -54.55760956]
[171.56062317 -42.66767883]
[168.44195557 -27.99546623]
[170.30010986 -24.66807747]
[170.44882202 -20.20397949]
[168.33967590 -15.51453686]
[163.90158081 -11.73370361]
[158.96858215 2.43194199]
[154.03558350 16.59758759]
[149.10258484 30.76323318]
[144.16958618 44.92887878]
[139.23658752 59.09452438]
[134.30358887 73.26016998]
[129.37059021 87.42581177]
[131.87211609 102.21575928]
[141.18933105 113.97116089]
[150.50654602 125.72656250]
[159.82377625 137.48196411]
[169.14099121 149.23736572]
[184.84831238 152.50222778]
[191.96023560 166.88278198]
[185.02108765 181.34748840]
[169.35398865 184.80026245]
[156.97740173 174.59243774]
[157.38558960 158.55458069]
[148.06837463 146.79917908]
[138.75114441 135.04377747]
[129.43392944 123.28837585]
[120.11671448 111.53297424]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 22]
[3 21]
[4 20]
[5 19]
[6 18]
[7 17]
[24 59]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 52]
[32 48]
[33 47]
[35 45]
[36 44]
[37 43]
[38 42]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
