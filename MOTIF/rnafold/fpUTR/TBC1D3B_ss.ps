%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:35:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGCUUAGCACCUAUCUGCUCUCUGGCCUGCGUCAGUGGUCUACAGCAGUUACACACAGGCAGUGGUAUCUGUGAGCAGCUCUGUGGACUCAAAGGUUUUCUCCCUGAGAGGCAUGACCCAGGCCAGCUGAUUCAUCAGAAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[67.98908234 115.70285034]
[64.18426514 130.21228027]
[60.37944412 144.72169495]
[56.57462692 159.23112488]
[58.40555191 176.08590698]
[42.71630096 182.51115417]
[32.19894028 169.21372986]
[42.06520081 155.42630005]
[45.87002182 140.91688538]
[49.67483902 126.40745544]
[53.47966003 111.89803314]
[43.18442917 122.80712128]
[29.78133774 116.07234955]
[20.24019241 104.49795532]
[16.18665695 90.05604553]
[18.31139183 75.20729065]
[26.25237465 62.48169327]
[38.65658188 54.04750061]
[53.41053009 51.34176636]
[68.00037384 54.82550812]
[79.94023132 63.90515137]
[87.19522095 77.03202057]
[93.52842712 90.62946320]
[94.48947906 75.66028595]
[95.45053101 60.69110107]
[96.41159058 45.72192001]
[97.37264252 30.75274086]
[98.33369446 15.78355885]
[99.29474640 0.81437814]
[100.25579834 -14.15480232]
[93.41857910 -28.42235184]
[101.95542145 -40.62774277]
[102.91647339 -55.59692383]
[103.87752533 -70.56610870]
[104.83857727 -85.53528595]
[105.63962555 -100.51388550]
[106.28057098 -115.50018311]
[93.69104767 -145.27661133]
[87.76620483 -159.05690002]
[81.84136963 -172.83718872]
[75.91652679 -186.61746216]
[69.99169159 -200.39775085]
[64.06684875 -214.17803955]
[58.14200974 -227.95832825]
[52.21717072 -241.73861694]
[46.29233170 -255.51889038]
[39.98342514 -262.22457886]
[40.39161301 -269.65753174]
[34.76260757 -283.56127930]
[29.13360214 -297.46505737]
[23.50459862 -311.36880493]
[8.58704472 -315.21234131]
[-1.09376192 -326.96542358]
[-1.98706710 -341.98760986]
[6.04050159 -354.50546265]
[0.41149667 -368.40921021]
[-5.21750832 -382.31295776]
[-10.84651375 -396.21670532]
[-16.47551918 -410.12045288]
[-22.10452271 -424.02420044]
[-37.19526291 -427.63656616]
[-47.25502396 -439.45098877]
[-48.41562653 -454.92462158]
[-40.23078537 -468.10748291]
[-25.84774971 -473.93054199]
[-10.79708481 -470.15466309]
[-0.86607897 -458.23181152]
[0.12659262 -442.74652100]
[-8.20077229 -429.65319824]
[-2.57176709 -415.74945068]
[3.05723786 -401.84570312]
[8.68624306 -387.94195557]
[14.31524849 -374.03820801]
[19.94425392 -360.13446045]
[34.41928864 -356.72692871]
[44.22825623 -345.31427002]
[45.45048141 -330.13668823]
[37.40834808 -316.99780273]
[43.03735352 -303.09405518]
[48.66635895 -289.19030762]
[54.29536438 -275.28656006]
[60.07261658 -261.44372559]
[65.99745941 -247.66345215]
[71.92229462 -233.88316345]
[77.84713745 -220.10287476]
[83.77197266 -206.32258606]
[89.69681549 -192.54231262]
[95.62165070 -178.76202393]
[101.54649353 -164.98173523]
[107.47132874 -151.20144653]
[102.38846588 -165.31401062]
[106.11351776 -179.84411621]
[117.35921478 -189.77056885]
[132.23934937 -191.66304016]
[145.61177063 -184.86755371]
[152.85531616 -171.73245239]
[151.46684265 -156.79685974]
[141.92614746 -145.22209167]
[127.52988434 -141.00808716]
[142.15379333 -144.34590149]
[156.77772522 -147.68371582]
[171.40164185 -151.02153015]
[186.02555847 -154.35934448]
[200.12213135 -163.77862549]
[213.07562256 -152.84046936]
[206.15081787 -137.36521912]
[189.36337280 -139.73542786]
[174.73945618 -136.39761353]
[160.11553955 -133.05979919]
[145.49160767 -129.72198486]
[130.86769104 -126.38417053]
[121.26686859 -114.85923767]
[120.62592316 -99.87293243]
[123.50287628 -93.00718689]
[119.80776215 -84.57423401]
[118.84671021 -69.60504913]
[117.88565063 -54.63587189]
[116.92459869 -39.66669083]
[123.83056641 -26.46983719]
[115.22498322 -13.19374943]
[114.26393127 1.77543151]
[113.30287170 16.74461174]
[112.34181976 31.71379280]
[111.38076782 46.68297577]
[110.41971588 61.65215683]
[109.45866394 76.62133789]
[108.49761200 91.59051514]
[111.36499023 106.31390381]
[117.87324524 119.82843781]
[124.38150024 133.34297180]
[130.88975525 146.85749817]
[137.39801025 160.37203979]
[143.90626526 173.88656616]
[150.41452026 187.40110779]
[164.26156616 196.18698120]
[163.30604553 212.55825806]
[148.53091431 219.67358398]
[135.13557434 210.21331787]
[136.89999390 193.90936279]
[130.39173889 180.39482117]
[123.88347626 166.88029480]
[117.37522125 153.36575317]
[110.86696625 139.85122681]
[104.35871124 126.33669281]
[97.85045624 112.82215881]
[90.38510895 113.54233551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 11]
[2 10]
[3 9]
[4 8]
[23 127]
[24 126]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[30 120]
[32 118]
[33 117]
[34 116]
[35 115]
[36 113]
[37 112]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[45 83]
[46 82]
[48 81]
[49 80]
[50 79]
[51 78]
[55 74]
[56 73]
[57 72]
[58 71]
[59 70]
[60 69]
[99 111]
[100 110]
[101 109]
[102 108]
[103 107]
[128 145]
[129 144]
[130 143]
[131 142]
[132 141]
[133 140]
[134 139]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
