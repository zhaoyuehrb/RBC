%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGGGGGCUCGGCUUUGCCGCGCUCGCUGCACUUGGGCGAGAGCUGGAACGUGGACCAGAGCUCGGAUCCCAUCGCAGCUACCGCG\
) } def
/len { sequence length } bind def

/coor [
[63.28042603 238.41557312]
[49.21500397 233.20365906]
[38.35251999 222.85926819]
[32.45999146 209.06513977]
[32.49597168 194.06518555]
[38.45325851 180.30140686]
[24.80877876 186.53262329]
[11.16429806 192.76385498]
[-2.48018193 198.99507141]
[-11.81906986 211.76597595]
[-26.61039352 210.01496887]
[-40.25487518 216.24620056]
[-53.89935303 222.47743225]
[-67.54383087 228.70864868]
[-79.43987274 240.78840637]
[-94.34070587 232.70127869]
[-90.69458008 216.14404297]
[-73.77506256 215.06417847]
[-60.13058090 208.83294678]
[-46.48609924 202.60171509]
[-32.84161758 196.37049866]
[-24.47867584 184.04530334]
[-8.71140766 185.35060120]
[4.93307257 179.11936951]
[18.57755280 172.88815308]
[32.22203445 166.65692139]
[44.06779099 157.45484924]
[53.47982407 145.77523804]
[62.89186096 134.09561157]
[72.30389404 122.41598511]
[81.71593475 110.73636627]
[78.86906433 98.25064850]
[83.73039246 86.40306854]
[94.52658081 79.51541138]
[107.31938171 80.10016632]
[117.14229584 68.76392365]
[126.96520233 57.42768097]
[136.78811646 46.09143448]
[145.99017334 34.24567795]
[154.54501343 21.92436600]
[163.09985352 9.60305500]
[171.65469360 -2.71825647]
[169.05516052 -18.07664680]
[177.90650940 -30.45034218]
[192.56440735 -32.83395767]
[201.11924744 -45.15526962]
[209.67408752 -57.47658157]
[218.22892761 -69.79788971]
[212.99194336 -84.40451813]
[217.37300110 -99.29028320]
[229.68750000 -108.73130035]
[245.20025635 -109.09731293]
[257.94628906 -100.24756622]
[263.02453613 -85.58499146]
[258.48223877 -70.74762726]
[246.06605530 -61.44075394]
[230.55023193 -61.24305344]
[221.99539185 -48.92174149]
[213.44055176 -36.60042953]
[204.88571167 -24.27911758]
[207.77479553 -9.71241570]
[199.27449036 2.90501332]
[183.97601318 5.83658314]
[175.42117310 18.15789413]
[166.86633301 30.47920609]
[158.31149292 42.80051804]
[158.69664001 46.52492905]
[157.14379883 50.61481476]
[153.50718689 54.08156204]
[148.12435913 55.91434860]
[138.30145264 67.25058746]
[128.47853088 78.58683777]
[118.65562439 89.92308044]
[120.26237488 106.24601746]
[109.74442291 118.83143616]
[93.39555359 120.14839935]
[83.98352051 131.82801819]
[74.57148743 143.50764465]
[65.15944672 155.18727112]
[55.74741364 166.86689758]
[70.55928040 164.49862671]
[85.10195923 168.17427063]
[97.00977325 177.29589844]
[104.34564972 190.37966919]
[105.91624451 205.29721069]
[101.46607208 219.62187195]
[91.71903992 231.02342224]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 26]
[7 25]
[8 24]
[9 23]
[11 21]
[12 20]
[13 19]
[14 18]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[35 73]
[36 72]
[37 71]
[38 70]
[39 66]
[40 65]
[41 64]
[42 63]
[45 60]
[46 59]
[47 58]
[48 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
