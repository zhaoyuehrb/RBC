%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:53:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCUUCCUCGGGCAGCGGAAGCAGCGCGGAGGUCGGAGAAGUGGCCUAAAACUUCGGCGUUGGGUGAAAGAAA\
) } def
/len { sequence length } bind def

/coor [
[215.52537537 150.92771912]
[211.61616516 140.05758667]
[210.57084656 128.54008484]
[195.89009094 125.46185303]
[181.20933533 122.38362122]
[166.52857971 119.30538940]
[150.33836365 125.74528503]
[136.58268738 113.70827484]
[121.78726959 111.23935699]
[106.99185181 108.77043915]
[92.14856720 106.60781860]
[77.26375580 104.75243378]
[62.61251450 110.72333527]
[50.94002914 101.47118378]
[36.05521774 99.61579132]
[21.40397644 105.58669281]
[9.73149014 96.33454132]
[-5.15331841 94.47915649]
[-20.04183006 101.35404968]
[-33.28207397 91.67789459]
[-31.25362015 75.40468597]
[-16.04316902 69.27490234]
[-3.29792881 79.59434509]
[11.58687973 81.44973755]
[25.17346001 75.34612274]
[37.91061020 84.73098755]
[52.79541779 86.58637238]
[66.38199615 80.48276520]
[79.11914825 89.86762238]
[94.00395203 91.72301483]
[102.00743103 89.47117615]
[109.46076965 93.97502136]
[124.25618744 96.44393921]
[139.05160522 98.91285706]
[150.16352844 92.00077820]
[162.58546448 94.55379486]
[169.60681152 104.62464142]
[184.28756714 107.70287323]
[198.96832275 110.78109741]
[213.64907837 113.85932922]
[224.38175964 97.85431671]
[240.73931885 87.75027466]
[259.76858521 85.32869720]
[278.05157471 90.98793030]
[292.31954956 103.67814636]
[300.03738403 121.09590912]
[315.02456665 120.47603607]
[330.01174927 119.85616302]
[344.99893188 119.23628998]
[359.98614502 118.61640930]
[374.97332764 117.99653625]
[382.02536011 104.35232544]
[394.96334839 96.07563019]
[410.30706787 95.39282227]
[423.92907715 102.48758698]
[432.16519165 115.45146179]
[432.79989624 130.79724121]
[425.66247559 144.39697266]
[412.67285156 152.59239197]
[397.32516479 153.17900085]
[383.74786377 145.99897766]
[375.59320068 132.98371887]
[360.60601807 133.60359192]
[345.61880493 134.22348022]
[330.63162231 134.84335327]
[315.64443970 135.46322632]
[300.65725708 136.08309937]
[297.84045410 147.15034485]
[292.31954956 157.16229248]
[284.44506836 165.46968079]
[274.72024536 171.53184509]
[263.76916504 174.95201111]
[252.29650879 175.50311279]
[241.04226685 173.14299011]
[230.73403931 168.01744080]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 37]
[8 34]
[9 33]
[10 32]
[11 30]
[12 29]
[14 27]
[15 26]
[17 24]
[18 23]
[46 67]
[47 66]
[48 65]
[49 64]
[50 63]
[51 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
