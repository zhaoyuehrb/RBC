%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACGUCGGCGGUUGCCGUGGAGAGACCCGCUCGGUCCCGACCGAGAGCUGGCGUCAGGAGCCGCAGGGUCACAGCGUGUCUUUGAAGCUGCCUCCGCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[69.06193542 318.10409546]
[55.08502579 310.22845459]
[52.67033005 294.36816406]
[63.67020035 282.68988037]
[64.56726074 267.71670532]
[61.77986908 260.73764038]
[65.72174835 252.31112671]
[67.06633759 237.37152100]
[68.41092682 222.43190002]
[69.75551605 207.49229431]
[71.10010529 192.55267334]
[72.44469452 177.61305237]
[59.66287613 185.46322632]
[45.01222229 182.24478149]
[36.69752121 169.76016235]
[39.37524796 155.00109863]
[51.54579163 146.23309326]
[66.39330292 148.36648560]
[75.60322571 160.20814514]
[79.59377289 145.74870300]
[83.58432770 131.28926086]
[87.57488251 116.82982635]
[79.08983612 100.62581635]
[86.59062958 83.94337463]
[81.74248505 69.74846649]
[76.89434052 55.55355072]
[72.04619598 41.35864258]
[67.19805145 27.16373062]
[51.96064377 18.25590134]
[49.57579041 1.38715482]
[37.84832001 -7.96519232]
[26.12084579 -17.31753922]
[14.39337444 -26.66988564]
[2.66590190 -36.02223206]
[-9.06157017 -45.37458038]
[-25.34936905 -47.28237534]
[-31.59170914 -62.44697952]
[-21.36700821 -75.26834869]
[-5.19356060 -72.55695343]
[0.29077664 -57.10205078]
[12.01824856 -47.74970627]
[23.74572182 -38.39735794]
[35.47319412 -29.04501152]
[47.20066452 -19.69266510]
[58.92813873 -10.34031773]
[61.33232498 -11.43666649]
[63.86418152 -12.19284630]
[66.54253387 -26.95178986]
[64.98447418 -36.12332153]
[69.52810669 -42.10933685]
[72.64678192 -56.78155136]
[75.76545715 -71.45376587]
[65.99606323 -83.66413116]
[66.41263580 -99.29616547]
[76.81846619 -110.96890259]
[92.30024719 -113.17082214]
[105.54795074 -104.86225891]
[110.30641937 -89.96625519]
[104.32885742 -75.51624298]
[90.43766785 -68.33509064]
[87.31899261 -53.66287613]
[84.20031738 -38.99066162]
[81.30148315 -24.27343559]
[78.62312317 -9.51449299]
[87.97062683 5.35232973]
[81.39295959 22.31558609]
[86.24110413 36.51049805]
[91.08924866 50.70540619]
[95.93739319 64.90032196]
[100.78553772 79.09523010]
[113.28632355 83.84140778]
[120.35887146 95.18930054]
[135.22311401 97.20279694]
[150.08737183 99.21630096]
[164.95161438 101.22979736]
[173.76718140 88.71802521]
[187.39276123 81.74652100]
[202.69732666 81.91728973]
[216.16397095 89.19107819]
[224.69816589 101.89643860]
[226.33882141 117.11375427]
[220.70892334 131.34620667]
[209.10218811 141.32328796]
[194.18574524 144.75233459]
[179.38728333 140.84536743]
[168.10739136 130.50018311]
[162.93811035 116.09403992]
[148.07386780 114.08054352]
[133.20962524 112.06704712]
[118.34537506 110.05354309]
[111.52450562 117.45887756]
[102.03432465 120.82037354]
[98.04376984 135.27981567]
[94.05321503 149.73925781]
[90.06266785 164.19869995]
[87.38431549 178.95764160]
[86.03972626 193.89726257]
[84.69513702 208.83688354]
[83.35054016 223.77648926]
[82.00595093 238.71611023]
[80.66136169 253.65571594]
[79.54041290 268.61376953]
[78.64334869 283.58691406]
[88.17021179 296.49499512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 103]
[5 102]
[7 101]
[8 100]
[9 99]
[10 98]
[11 97]
[12 96]
[19 95]
[20 94]
[21 93]
[22 92]
[24 70]
[25 69]
[26 68]
[27 67]
[28 66]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[47 64]
[48 63]
[50 62]
[51 61]
[52 60]
[72 90]
[73 89]
[74 88]
[75 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
