%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:15:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCACACAGCUGCCUGGUAGGUGACUGGAGGCCUUGAUCGGUUCUCAUUGAGAUUUUGCUGCUGUGACCCCAACCCUGCCUCCCUCCCCACCCUGCG\
) } def
/len { sequence length } bind def

/coor [
[66.89742279 299.10260010]
[61.71719360 313.39364624]
[51.45865250 324.61108398]
[37.68615341 331.04434204]
[22.49990463 331.71237183]
[8.21569824 326.51333618]
[-2.98822904 316.24005127]
[-9.40335941 302.45910645]
[-10.05143166 287.27200317]
[-4.83361959 272.99462891]
[5.45439816 261.80422974]
[19.24377441 255.40724182]
[34.43172836 254.77914429]
[39.56203079 240.68376160]
[33.05414581 227.33523560]
[38.05620956 212.96742249]
[52.10149384 206.23187256]
[57.23179626 192.13647461]
[62.36209869 178.04109192]
[59.44439697 163.43505859]
[71.43502045 153.11344910]
[76.56532288 139.01805115]
[75.88240051 131.51885986]
[82.08848572 124.56120300]
[87.66342163 110.63568115]
[83.71775055 99.55570984]
[88.26177216 88.70739746]
[98.92619324 83.74712372]
[104.94014740 70.00550079]
[110.95410919 56.26387405]
[116.96806335 42.52224731]
[122.98202515 28.78061867]
[128.99598694 15.03899193]
[118.07612610 4.55175400]
[111.41566467 -9.01328373]
[109.80114746 -24.01040268]
[113.40823364 -38.62747955]
[121.78285217 -51.10495377]
[133.89819336 -59.94762802]
[148.28065491 -64.10383606]
[163.18898010 -63.09049988]
[169.20294189 -76.83213043]
[167.64764404 -92.57670593]
[179.83860779 -101.13414764]
[185.85256958 -114.87577057]
[184.29727173 -130.62034607]
[196.48822021 -139.17778015]
[202.50218201 -152.91941833]
[196.15177917 -164.92184448]
[197.90763855 -178.18931580]
[206.89494324 -187.84007263]
[219.62060547 -190.45588684]
[226.06752014 -203.99978638]
[220.54460144 -218.80764771]
[227.18594360 -233.14877319]
[242.05137634 -238.51483154]
[256.32150269 -231.72222900]
[261.53009033 -216.80090332]
[254.58699036 -202.60340881]
[239.61141968 -197.55285645]
[233.16448975 -184.00895691]
[239.48226929 -168.51316833]
[232.58381653 -152.89973450]
[216.24380493 -146.90545654]
[210.22985840 -133.16383362]
[212.21530151 -118.40214539]
[199.59419250 -108.86181641]
[193.58023071 -95.12018585]
[195.56568909 -80.35850525]
[182.94456482 -70.81816864]
[176.93060303 -57.07654190]
[187.79045105 -46.81256485]
[194.49595642 -33.42730331]
[196.22058105 -18.52763176]
[192.73698425 -3.90962839]
[184.44683838 8.65793610]
[172.33462524 17.64760780]
[157.85066223 21.95889282]
[142.73760986 21.05294991]
[136.72364807 34.79457855]
[130.70968628 48.53620529]
[124.69573212 62.27783203]
[118.68177795 76.01945496]
[112.66781616 89.76108551]
[115.02359009 106.29290771]
[101.58894348 116.21062469]
[96.01399994 130.13613892]
[90.66071320 144.14836121]
[85.53041077 158.24374390]
[88.08115387 173.85798645]
[76.45748901 183.17138672]
[71.32718658 197.26678467]
[66.19688416 211.36216736]
[72.62666321 225.55004883]
[67.22300720 239.77168274]
[53.65741730 245.81405640]
[48.52711868 259.90945435]
[59.75803375 270.15322876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 97]
[14 96]
[17 93]
[18 92]
[19 91]
[21 89]
[22 88]
[24 87]
[25 86]
[28 84]
[29 83]
[30 82]
[31 81]
[32 80]
[33 79]
[41 71]
[42 70]
[44 68]
[45 67]
[47 65]
[48 64]
[52 61]
[53 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
