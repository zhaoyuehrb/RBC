%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAUGGCUGAAAAAGCCCACACCUGGAAAUCACUCCCUCCCUGCUCCUCCACGGCAGGUUGCAUCUGCGAGACGCUUCGGUCAUUAGAGGAAUGAGCCGGGAGUGAGCAAUUCACCAGCUCUCCAGCACUUGGUGGAAAGCAGCAGGCAAGG\
) } def
/len { sequence length } bind def

/coor [
[155.36784363 363.98931885]
[148.51423645 370.83346558]
[140.23034668 375.82525635]
[131.00396729 378.67868042]
[121.37651825 379.23333740]
[111.91123199 377.46365356]
[104.85715485 390.70147705]
[97.80307007 403.93930054]
[90.74899292 417.17712402]
[94.03137207 432.88079834]
[83.68969727 445.14575195]
[67.65721893 444.56338501]
[58.23268127 431.58038330]
[62.64578247 416.15625000]
[77.51116943 410.12301636]
[84.56524658 396.88519287]
[91.61933136 383.64736938]
[98.67340851 370.40954590]
[86.39540863 353.77548218]
[84.09205627 333.15640259]
[92.45518494 314.08993530]
[109.30211639 301.73339844]
[130.14477539 299.46890259]
[135.24310303 285.36190796]
[140.34144592 271.25494385]
[145.43978882 257.14794922]
[139.02009583 248.76841736]
[137.63133240 237.85839844]
[142.08923340 227.32244873]
[151.59266663 220.18954468]
[163.83267212 218.74607849]
[159.02316284 204.53802490]
[154.21363831 190.32998657]
[149.40412903 176.12193298]
[144.59460449 161.91389465]
[139.78509521 147.70584106]
[134.97557068 133.49780273]
[130.16606140 119.28975677]
[109.34848785 140.82800293]
[74.86141205 140.84725952]
[47.53765106 112.96803284]
[34.15868759 106.18545532]
[20.77972603 99.40287781]
[7.40076399 92.62030029]
[-5.97819805 85.83771515]
[-19.35716057 79.05513763]
[-33.66714096 85.36057281]
[-48.66775131 80.94292450]
[-57.27616882 67.88807678]
[-55.42775726 52.36011887]
[-43.99528122 41.69088745]
[-28.37680817 40.91806412]
[-15.94689941 50.40655136]
[-12.57458115 65.67617798]
[0.80438060 72.45875549]
[14.18334293 79.24133301]
[27.56230545 86.02391052]
[40.94126511 92.80648804]
[54.32022858 99.58907318]
[64.92683411 88.98246765]
[58.14425278 75.60350800]
[51.36167526 62.22454453]
[44.57909393 48.84558105]
[30.55571938 40.34399796]
[31.17708969 23.95662498]
[45.80399323 16.54139137]
[59.38952637 25.72645187]
[57.95805740 42.06300354]
[64.74063873 55.44196701]
[71.52321625 68.82093048]
[78.30579376 82.19989014]
[92.92971039 78.86207581]
[93.23568726 63.86519623]
[93.54166412 48.86831665]
[82.41720581 37.64236832]
[82.57251740 21.83884430]
[93.91545105 10.83369255]
[109.71645355 11.15607643]
[120.60106659 22.61473083]
[120.11164093 38.41144180]
[108.53854370 49.17429733]
[108.23256683 64.17117310]
[107.92658997 79.16805267]
[114.92661285 81.86057281]
[120.31165314 67.86052704]
[125.69691467 53.86056137]
[139.69679260 59.24603653]
[134.31170654 73.24556732]
[128.92666626 87.24561310]
[135.92668152 89.93813324]
[145.74960327 78.60189056]
[144.37228394 62.85773087]
[154.59503174 50.80489349]
[170.35287476 49.59410858]
[182.29695129 59.94371796]
[183.34106445 75.71347809]
[172.86575317 87.54747009]
[157.08584595 88.42480469]
[147.26292419 99.76104736]
[144.37409973 114.48023987]
[149.18360901 128.68827820]
[153.99313354 142.89633179]
[158.80264282 157.10437012]
[163.61216736 171.31242371]
[168.42167664 185.52046204]
[173.23120117 199.72851562]
[178.04071045 213.93655396]
[188.31784058 224.86270142]
[202.20512390 230.53219604]
[216.63017273 224.65376282]
[230.63308716 230.60127258]
[236.14839172 244.38957214]
[250.03567505 250.05906677]
[263.92297363 255.72857666]
[277.81024170 261.39807129]
[291.69754028 267.06756592]
[305.58480835 272.73709106]
[319.47210693 278.40658569]
[333.52636719 283.64852905]
[347.73440552 288.45806885]
[361.94244385 293.26757812]
[377.90899658 289.52572632]
[388.93399048 301.66583252]
[383.67587280 317.19912720]
[367.54373169 320.14636230]
[357.13293457 307.47561646]
[342.92489624 302.66610718]
[328.71682739 297.85659790]
[325.36669922 299.12698364]
[321.22579956 298.80044556]
[317.06893921 296.51937866]
[313.80261230 292.29385376]
[299.91531372 286.62435913]
[286.02804565 280.95486450]
[272.14074707 275.28536987]
[258.25344849 269.61587524]
[244.36616516 263.94635010]
[230.47888184 258.27685547]
[216.88955688 264.26568604]
[202.72511292 258.71383667]
[196.53562927 244.41949463]
[182.64834595 238.74998474]
[179.61067200 251.43803406]
[170.79531860 259.96145630]
[159.54676819 262.24627686]
[154.44842529 276.35327148]
[149.35009766 290.46026611]
[144.25175476 304.56723022]
[151.98037720 310.56774902]
[158.03408813 318.23681641]
[162.06428528 327.12182617]
[163.84153748 336.70059204]
[163.26856995 346.41180420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 18]
[7 17]
[8 16]
[9 15]
[23 148]
[24 147]
[25 146]
[26 145]
[31 107]
[32 106]
[33 105]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[46 54]
[60 71]
[61 70]
[62 69]
[63 68]
[72 83]
[73 82]
[74 81]
[90 99]
[91 98]
[108 142]
[109 141]
[112 138]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
