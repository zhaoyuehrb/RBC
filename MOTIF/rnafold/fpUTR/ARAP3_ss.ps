%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:05:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCCAGAACCUCGGACGAGCGGCGGGCACCCGCGAGCGGACGGCGGCCGCGUAGUGAGCAAUGGCCUGAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[135.87738037 332.41012573]
[134.68562317 317.45755005]
[133.49386597 302.50497437]
[116.84288025 291.09738159]
[113.40010071 270.92672729]
[125.65341187 254.19238281]
[122.10824585 239.61734009]
[118.56307983 225.04229736]
[105.66243744 221.06404114]
[96.38864136 211.10368347]
[93.29098511 197.73959351]
[97.30038452 184.50607300]
[107.45326996 174.95880127]
[104.49035645 160.25434875]
[101.52744293 145.54988098]
[98.56453705 130.84542847]
[85.33292389 127.17311096]
[75.00183105 118.12711334]
[69.61429596 105.49636078]
[70.23574829 91.77866364]
[76.74329376 79.68679047]
[87.85000610 71.61199951]
[85.47403717 56.80136871]
[83.09806824 41.99073792]
[80.72209930 27.18010902]
[78.34612274 12.36947918]
[68.25968933 4.04935026]
[66.71186829 -8.52644157]
[73.99994659 -18.39272690]
[72.21467590 -33.28610611]
[58.32435989 -43.70237732]
[56.17187119 -60.59369278]
[66.58923340 -73.63830566]
[64.21326447 -88.44893646]
[61.83729172 -103.25956726]
[51.07746124 -115.63527679]
[56.67034149 -131.05123901]
[72.86245728 -133.64881897]
[82.99674225 -120.75587463]
[76.64791870 -105.63554382]
[79.02389526 -90.82491302]
[81.39986420 -76.01428223]
[92.91437531 -69.88923645]
[98.81015778 -58.03606415]
[96.68592072 -44.77030182]
[87.10805511 -35.07138062]
[88.89332581 -20.17799950]
[100.17763519 -6.89181328]
[93.15675354 9.99350834]
[95.53273010 24.80413818]
[97.90869904 39.61476898]
[100.28466797 54.42539978]
[102.66063690 69.23603058]
[117.65148926 74.66374969]
[127.93678284 86.84564209]
[130.77464294 102.53424835]
[125.40854645 117.54727173]
[113.26899719 127.88251495]
[116.23190308 142.58697510]
[119.19481659 157.29144287]
[122.15773010 171.99589539]
[137.53271484 178.72579956]
[145.87165833 193.10113525]
[144.11589050 209.46165466]
[133.13812256 221.49713135]
[136.68328857 236.07217407]
[140.22845459 250.64721680]
[150.21139526 253.24070740]
[158.41905212 259.38916016]
[163.65336609 268.13912964]
[165.17163086 278.16171265]
[162.79154968 287.95443726]
[156.91189575 296.06640625]
[148.44645691 301.31323242]
[149.63819885 316.26580811]
[150.82995605 331.21838379]
[158.11560059 346.52706909]
[145.42205811 357.76583862]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 76]
[2 75]
[3 74]
[6 67]
[7 66]
[8 65]
[13 61]
[14 60]
[15 59]
[16 58]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[29 47]
[30 46]
[33 42]
[34 41]
[35 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
