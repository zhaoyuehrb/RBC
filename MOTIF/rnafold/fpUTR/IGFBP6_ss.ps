%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:59:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCGGCGGGCAGCAGCUGCGCUGCGACUGCUCUGGAAGGAGAGGACGGGGCACAAACCCUGACC\
) } def
/len { sequence length } bind def

/coor [
[87.60282135 106.52211761]
[72.60694122 106.87375641]
[57.61106491 107.22539520]
[42.61518478 107.57703400]
[31.74051666 118.72958374]
[16.52755547 118.87257385]
[5.96232224 108.43650818]
[-9.03355598 108.78814697]
[-24.02943420 109.13978577]
[-39.02531052 109.49142456]
[-54.00882339 110.19451141]
[-68.97174072 111.24864960]
[-83.93465424 112.30279541]
[-98.89756775 113.35694122]
[-114.27262115 120.50144196]
[-125.39415741 107.70504761]
[-116.17658997 93.47574615]
[-99.95170593 98.39402771]
[-84.98879242 97.33988190]
[-70.02587891 96.28573608]
[-55.06296921 95.23159790]
[-48.38251495 91.48882294]
[-39.37694931 94.49554443]
[-24.38107300 94.14391327]
[-9.38519478 93.79227448]
[5.61068344 93.44063568]
[15.67514229 82.52082062]
[30.87808609 81.95059204]
[42.26354599 92.58116150]
[57.25942612 92.22952271]
[72.25530243 91.87788391]
[87.25118256 91.52624512]
[99.93865967 83.52450562]
[106.71716309 70.14347839]
[113.49567413 56.76245117]
[108.33908844 41.82306671]
[115.33158875 27.64983749]
[130.32466125 22.65148926]
[144.42317200 29.79345322]
[149.26272583 44.83852768]
[141.97209167 58.86073685]
[126.87670135 63.54095459]
[120.09819031 76.92198181]
[113.31968689 90.30300903]
[117.82096100 104.61169434]
[131.03939819 111.70202637]
[146.85784912 111.40686798]
[154.41616821 124.24124146]
[167.63461304 131.33157349]
[180.85305786 138.42189026]
[194.07150269 145.51222229]
[207.28994751 152.60255432]
[222.34609985 147.79760742]
[236.35151672 155.12043762]
[240.99700928 170.22656250]
[233.52650452 184.15377808]
[218.37211609 188.63929749]
[204.52467346 181.02197266]
[200.19961548 165.82099915]
[186.98117065 158.73066711]
[173.76272583 151.64033508]
[160.54428101 144.55001831]
[147.32583618 137.45968628]
[132.45286560 138.26199341]
[123.94907379 124.92047119]
[110.73062897 117.83013916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 32]
[2 31]
[3 30]
[4 29]
[7 26]
[8 25]
[9 24]
[10 23]
[11 21]
[12 20]
[13 19]
[14 18]
[33 44]
[34 43]
[35 42]
[45 66]
[46 65]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
