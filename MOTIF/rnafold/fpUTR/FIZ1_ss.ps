%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:30:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGUGGAAGUGACGCUGCCCCCGCUGCCCAAAAUGUCGGCGCCCAGAGGGAGGUAGAGAGCCCCCACAUACCACUGUAUUCCCCGCCACC\
) } def
/len { sequence length } bind def

/coor [
[253.21926880 292.68057251]
[244.48649597 280.48474121]
[235.13414001 268.75726318]
[225.18730164 257.52960205]
[215.24046326 246.30194092]
[205.29362488 235.07427979]
[190.45698547 234.43411255]
[180.20953369 223.18936157]
[180.98159790 207.63168335]
[171.03475952 196.40402222]
[157.80268860 198.91795349]
[144.97137451 194.47811890]
[135.97950745 184.15962219]
[133.29367065 170.62796021]
[137.73255920 157.45094299]
[128.17918396 145.88665771]
[118.62580872 134.32235718]
[109.07243347 122.75805664]
[99.51905060 111.19375610]
[89.76749420 99.79608154]
[79.82064819 88.56842041]
[69.87380981 77.34075928]
[54.93115234 72.14196014]
[52.28286362 57.48468018]
[42.33602142 46.25701904]
[32.00757599 35.37937546]
[21.30982590 24.86470985]
[10.43218136 14.53626156]
[-0.62211835 4.39710665]
[-15.80180836 7.61528111]
[-29.96028709 1.26570737]
[-37.65333176 -12.21007442]
[-35.92280960 -27.63035011]
[-25.43414116 -39.06571198]
[-10.22043419 -42.11902618]
[3.86833143 -35.61623383]
[11.41473770 -22.05778885]
[9.51703644 -6.65719318]
[20.57133675 3.48196149]
[27.78240395 5.73059511]
[31.82449150 14.16696072]
[42.52223969 24.68162537]
[47.42520523 25.51655197]
[51.78079605 29.57986259]
[53.56368256 36.31018066]
[63.51052475 47.53784180]
[77.74172211 51.93355942]
[81.10147095 67.39392090]
[91.04831696 78.62158203]
[100.99515533 89.84924316]
[108.43413544 93.41267395]
[111.08335114 101.64038086]
[120.63672638 113.20467377]
[130.19010925 124.76897430]
[139.74348450 136.33326721]
[149.29685974 147.89756775]
[166.05653381 146.58189392]
[180.20010376 155.36041260]
[186.33624268 170.65715027]
[182.26242065 186.45718384]
[192.20925903 197.68484497]
[207.74658203 198.79367065]
[217.67414856 210.32182312]
[216.52128601 225.12744141]
[226.46812439 236.35510254]
[236.41496277 247.58276367]
[246.36180115 258.81042480]
[251.73820496 260.57699585]
[255.40148926 263.98309326]
[257.00610352 268.03436279]
[256.68234253 271.75195312]
[265.41510010 283.94781494]
[279.74810791 279.14605713]
[294.85971069 278.78405762]
[309.40618896 282.89395142]
[322.09408569 291.11029053]
[331.79522705 302.70251465]
[337.64697266 316.63983154]
[339.12896729 331.68292236]
[336.10946655 346.49420166]
[328.85696411 359.75665283]
[318.01632690 370.29098511]
[304.55151367 377.16049194]
[289.65979004 379.75433350]
[274.66531372 377.84185791]
[260.90142822 371.59313965]
[249.59194946 361.56381226]
[241.74253845 348.64569092]
[238.05116272 333.98739624]
[238.84605408 318.89239502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 67]
[4 66]
[5 65]
[6 64]
[9 61]
[10 60]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 50]
[21 49]
[22 48]
[24 46]
[25 45]
[26 42]
[27 41]
[28 39]
[29 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
