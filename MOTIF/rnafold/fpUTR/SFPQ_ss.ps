%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUGUCAUCCGCCAUUUUGUGAGAAGCAAGGUGGCCUCCACGUUUCCUGAGCGUCUUCUUCGCUUUUGCCUCGACCGCCCCUUGACCACAGAC\
) } def
/len { sequence length } bind def

/coor [
[109.69042969 241.48638916]
[108.18899536 226.56172180]
[106.68756104 211.63705444]
[105.18612671 196.71238708]
[103.43550873 181.81489563]
[101.43621063 166.94873047]
[99.43690491 152.08256531]
[81.83069611 148.81379700]
[66.37207794 139.77529907]
[54.88824844 126.03538513]
[48.73658752 109.21811676]
[33.74496078 109.71933746]
[18.75333977 110.22056580]
[3.76171565 110.72178650]
[-11.22990799 111.22301483]
[-26.22153091 111.72423553]
[-41.21315384 112.22546387]
[-56.20477676 112.72668457]
[-71.19640350 113.22791290]
[-86.18802643 113.72913361]
[-98.15280914 124.41667938]
[-113.94377899 121.58386993]
[-121.44745636 107.40379333]
[-114.90766144 92.75420380]
[-99.34116364 88.87300110]
[-86.68924713 98.73751068]
[-71.69762421 98.23628998]
[-56.70600128 97.73506165]
[-41.71437836 97.23384094]
[-26.72275543 96.73261261]
[-11.73113251 96.23139191]
[3.26049089 95.73016357]
[18.25211525 95.22894287]
[33.24373627 94.72771454]
[48.23536301 94.22649384]
[52.91286087 77.73539734]
[62.69035721 63.65578461]
[76.50885773 53.51260757]
[92.87168121 48.40447235]
[110.00657654 48.88464355]
[126.05765533 54.90111160]
[135.35389709 43.12911987]
[128.00793457 29.85084724]
[126.30991364 14.81223965]
[130.48762512 0.30843568]
[139.87454224 -11.45903397]
[153.01591492 -18.71640968]
[167.89411926 -20.38504028]
[182.23849487 -16.24160194]
[191.53474426 -28.01359177]
[200.83099365 -39.78558350]
[210.12724304 -51.55757523]
[219.42349243 -63.32956314]
[216.07485962 -78.60440063]
[223.37388611 -92.43401337]
[237.87420654 -98.28847504]
[252.72921753 -93.40348816]
[260.92480469 -80.08560181]
[258.59130859 -64.62310791]
[246.83049011 -54.31692123]
[231.19548035 -54.03331757]
[221.89923096 -42.26132584]
[212.60298157 -30.48933411]
[203.30673218 -18.71734428]
[194.01048279 -6.94535303]
[201.36636353 6.04773235]
[203.19226074 20.90746117]
[199.17901611 35.37323761]
[189.90818787 47.23238373]
[176.76795959 54.65856552]
[161.74539185 56.49304581]
[147.12590027 52.42536926]
[137.82965088 64.19735718]
[144.32711792 72.65008545]
[148.96737671 82.24871826]
[151.55598450 92.59109497]
[151.98449707 103.24389648]
[150.23497009 113.76078033]
[146.38069153 123.70111084]
[140.58314514 132.64842224]
[133.08525085 140.22781372]
[124.20114899 146.12174988]
[114.30306244 150.08326721]
[116.30236816 164.94943237]
[118.30167389 179.81559753]
[122.62438965 188.09768677]
[120.11079407 195.21095276]
[121.61222839 210.13562012]
[123.11366272 225.06028748]
[124.61509705 239.98495483]
[134.62899780 252.97163391]
[128.13978577 268.03225708]
[111.82299805 269.67373657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 90]
[2 89]
[3 88]
[4 87]
[5 85]
[6 84]
[7 83]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[41 73]
[42 72]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
