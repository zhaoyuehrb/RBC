%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:00:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGCAGCGCGUGUCGGCGUCCGGAGGAGGUGACCUAGCCGCCGCGGUCCUAGAAGGGAGAAGUGGAGAGAGACCGCUGGCAGG\
) } def
/len { sequence length } bind def

/coor [
[131.46437073 135.22688293]
[129.40713501 120.36862946]
[138.18432617 108.20700836]
[123.18688965 107.92982483]
[108.18945312 107.65264130]
[93.18945312 107.65264130]
[78.19201660 107.92982483]
[74.62611389 110.46736145]
[70.81680298 111.68675995]
[67.18867493 111.66593170]
[64.10133362 110.60726166]
[61.81574249 108.80719757]
[60.47248459 106.61760712]
[45.67947388 104.13430023]
[30.88646317 101.65099335]
[21.65688133 103.33617401]
[15.59693813 98.79288483]
[0.90579194 95.76464844]
[-14.17225647 100.55662537]
[-25.07544518 90.40922546]
[-39.76659393 87.38098907]
[-54.45774078 84.35275269]
[-71.19139099 87.07695007]
[-78.44146729 71.75139618]
[-65.72185516 60.54211807]
[-51.42950439 69.66160583]
[-36.73835754 72.68984222]
[-22.04721069 75.71807861]
[-8.01997089 70.70950317]
[3.93402815 81.07350159]
[18.62517548 84.10173798]
[33.36977005 86.85797882]
[48.16278076 89.34128571]
[62.95579529 91.82459259]
[77.91483307 92.93238068]
[92.91226959 92.65519714]
[100.47442627 89.30279541]
[108.46663666 92.65519714]
[123.46407318 92.93238068]
[138.46151733 93.20956421]
[153.39752197 91.82553864]
[168.08866882 88.79730225]
[182.77981567 85.76906586]
[197.41250610 82.46987152]
[211.98171997 78.90084839]
[226.55093384 75.33181763]
[241.12014771 71.76278687]
[255.68936157 68.19376373]
[270.25857544 64.62473297]
[284.75933838 60.78709412]
[299.18673706 56.68214798]
[299.97518921 41.56073761]
[305.63314819 27.51558876]
[315.54687500 16.07021523]
[328.64102173 8.46612453]
[343.49520874 5.52815247]
[358.49819946 7.57498789]
[372.02252197 14.38460541]
[382.60122681 25.21834755]
[389.08676147 38.90105438]
[390.77566528 53.94852448]
[387.48471069 68.72852325]
[379.57089233 81.63782501]
[367.89260864 91.27612305]
[353.71670532 96.59793854]
[338.58078003 97.02598572]
[324.12673950 92.51383972]
[311.92242432 83.55094910]
[303.29168701 71.10953522]
[288.86428833 75.21447754]
[283.15643311 80.19290161]
[273.82760620 79.19394684]
[259.25839233 82.76297760]
[244.68917847 86.33200836]
[230.11996460 89.90103149]
[215.55075073 93.47006226]
[200.98152161 97.03909302]
[195.09361267 101.80319977]
[185.80805969 100.46021271]
[171.11691284 103.48844910]
[156.42576599 106.51668549]
[167.28903198 116.86025238]
[167.99552917 131.84361267]
[158.15374756 143.16346741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 40]
[4 39]
[5 38]
[6 36]
[7 35]
[13 34]
[14 33]
[15 32]
[17 31]
[18 30]
[20 28]
[21 27]
[22 26]
[41 81]
[42 80]
[43 79]
[44 77]
[45 76]
[46 75]
[47 74]
[48 73]
[49 72]
[50 70]
[51 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
