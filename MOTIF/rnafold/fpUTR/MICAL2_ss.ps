%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGUGACGUUUCUCCAGAUACUUCAUGCUGUUCACCUGUGUCCUCGCCGCACCACUGCCGCACACGACUCCUGAACC\
) } def
/len { sequence length } bind def

/coor [
[89.62319183 112.57350159]
[75.82350159 118.45299530]
[62.02381134 124.33249664]
[48.22412109 130.21199036]
[34.42442703 136.09149170]
[20.62473679 141.97099304]
[10.96162415 154.49835205]
[-3.77996755 152.36886597]
[-17.57965851 158.24836731]
[-27.24277115 170.77572632]
[-41.98436356 168.64624023]
[-55.78405380 174.52574158]
[-65.19778442 187.95382690]
[-81.50775909 186.24600220]
[-87.93568420 171.15913391]
[-77.86904907 158.21328735]
[-61.66355515 160.72604370]
[-47.86386108 154.84654236]
[-39.18779755 142.73973083]
[-23.45915794 144.44866943]
[-9.65946674 138.56918335]
[-0.98340148 126.46235657]
[14.74523640 128.17131042]
[28.54492760 122.29180145]
[42.34461975 116.41230774]
[56.14431000 110.53280640]
[69.94400024 104.65330505]
[83.74369812 98.77381134]
[93.30924988 85.13376617]
[109.86210632 87.01886749]
[123.41386414 80.58847809]
[136.96562195 74.15808868]
[150.51737976 67.72769928]
[164.06913757 61.29730988]
[169.43695068 42.22005081]
[186.63760376 32.98197556]
[204.94715881 38.86294556]
[217.62501526 30.84595680]
[230.30287170 22.82896805]
[242.98071289 14.81198120]
[255.65856934 6.79499435]
[257.76998901 2.25694919]
[261.00161743 -0.88365263]
[264.70391846 -2.43835688]
[268.23980713 -2.47742724]
[271.07791138 -1.29769385]
[284.87759399 -7.17719316]
[294.54071045 -19.70455742]
[309.28228760 -17.57506561]
[323.08200073 -23.45456505]
[336.88168335 -29.33406448]
[346.29541016 -42.76215744]
[362.60537720 -41.05433655]
[369.03329468 -25.96745682]
[358.96667480 -13.02160931]
[342.76116943 -15.53437233]
[328.96148682 -9.65487289]
[315.16180420 -3.77537370]
[306.48571777 8.33144951]
[290.75708008 6.62249851]
[276.95739746 12.50199795]
[263.67556763 19.47284508]
[250.99771118 27.48983192]
[238.31985474 35.50682068]
[225.64199829 43.52380753]
[212.96415710 51.54079437]
[213.47448730 62.26858521]
[209.31436157 72.25927734]
[201.21873474 79.56471252]
[190.69709778 82.72788239]
[179.75236511 81.07315063]
[170.49952698 74.84906769]
[156.94776917 81.27945709]
[143.39601135 87.70984650]
[129.84425354 94.14023590]
[116.29249573 100.57062531]
[111.62480927 111.42956543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[8 21]
[9 20]
[11 18]
[12 17]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[46 61]
[47 60]
[49 58]
[50 57]
[51 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
