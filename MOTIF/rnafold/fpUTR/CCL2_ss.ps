%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:27:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGGAACCGAGAGGCUGAGACUAACCCAGAAACAUCCAAUUCUCAAACUGAAGCUCGCACUCUCGCCUCCAGC\
) } def
/len { sequence length } bind def

/coor [
[88.50275421 277.45364380]
[87.99898529 261.65737915]
[98.87317657 250.18884277]
[98.23656464 235.20236206]
[97.59994507 220.21586609]
[86.49079895 210.36079407]
[85.63169098 195.17143250]
[96.04392242 183.58596802]
[95.40730286 168.59948730]
[94.77069092 153.61299133]
[94.13407135 138.62651062]
[93.49745178 123.64002991]
[92.86083221 108.65354156]
[91.90626526 93.68394470]
[90.63417816 78.73798370]
[86.68740845 70.15808868]
[89.63908386 63.13291931]
[89.00246429 48.14643478]
[88.36585236 33.15995026]
[72.71765137 29.03774643]
[59.06921005 20.37814331]
[48.69753265 8.00446129]
[42.56908417 -6.91308928]
[41.24971390 -22.96807671]
[44.85242462 -38.65044785]
[53.02779770 -52.48854446]
[64.99784851 -63.18722916]
[79.63003540 -69.74906921]
[77.72476959 -84.62757874]
[75.81950378 -99.50608826]
[73.91423798 -114.38459015]
[60.23968124 -121.71849823]
[53.51782608 -135.70407104]
[56.33335876 -150.96357727]
[67.60365295 -161.62940979]
[82.99504089 -163.60035706]
[96.58923340 -156.11854553]
[103.15898132 -142.06086731]
[100.17807770 -126.83280945]
[88.79273987 -116.28985596]
[90.69800568 -101.41135406]
[92.60327911 -86.53284454]
[94.50854492 -71.65434265]
[108.29557037 -69.61596680]
[121.06658173 -64.00348663]
[131.91189575 -55.20919418]
[140.05705261 -43.85229111]
[144.91806030 -30.73527336]
[146.14329529 -16.78725243]
[143.63891602 -2.99813104]
[137.57604980 9.65165043]
[128.37904358 20.26082230]
[116.69585419 28.07150459]
[103.35233307 32.52333069]
[103.98895264 47.50981522]
[104.62557220 62.49629974]
[105.58013916 77.46589661]
[106.85222626 92.41185760]
[110.71907806 99.78437042]
[107.84732056 108.01692963]
[108.48394012 123.00341034]
[109.12055206 137.98989868]
[109.75717163 152.97637939]
[110.39379120 167.96286011]
[111.03041077 182.94935608]
[122.38764954 193.61006165]
[122.81977844 208.81756592]
[112.58642578 219.57925415]
[113.22304535 234.56573486]
[113.85966492 249.55221558]
[125.66728973 260.05725098]
[126.50494385 275.83932495]
[115.87567139 287.53521729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 70]
[4 69]
[5 68]
[8 65]
[9 64]
[10 63]
[11 62]
[12 61]
[13 60]
[14 58]
[15 57]
[17 56]
[18 55]
[19 54]
[28 43]
[29 42]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
