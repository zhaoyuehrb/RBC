%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:04:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCAGCCCCAUAGCCAUCUCAGGGACAAGGAGGCUGUGAUCAGAUCUCGCGAGGUUCAGGAAAGCGCCCCGGGAACUGGGCCGCUGGGCCAGCCCCUGCGUCGGGGGGCAAG\
) } def
/len { sequence length } bind def

/coor [
[138.24819946 193.51795959]
[135.60354614 185.32099915]
[135.56306458 176.67390442]
[138.15122986 168.38734436]
[143.14506531 161.24444580]
[135.58494568 148.28895569]
[128.02484131 135.33346558]
[120.46472931 122.37797546]
[76.31011963 126.22489166]
[61.83026886 130.14073181]
[47.35041428 134.05657959]
[32.87055969 137.97242737]
[18.39070511 141.88825989]
[3.91085196 145.80410767]
[-10.56900215 149.71995544]
[-21.87076378 160.79158020]
[-36.17657089 156.64511108]
[-50.65642548 160.56094360]
[-65.13627625 164.47679138]
[-70.53748322 179.02349854]
[-83.47610474 187.58923340]
[-98.97697449 186.88029480]
[-111.07969666 177.16928101]
[-115.13052368 162.19027710]
[-109.57183838 147.70301819]
[-96.54105377 139.27815247]
[-81.04878235 140.15521240]
[-69.05212402 149.99693298]
[-54.57226562 146.08110046]
[-40.09241486 142.16525269]
[-29.82634735 131.37371826]
[-14.48484516 135.24009705]
[-0.00499120 131.32424927]
[14.47486305 127.40841675]
[28.95471764 123.49256897]
[43.43457031 119.57672882]
[57.91442490 115.66088104]
[72.39427948 111.74504089]
[75.71533966 105.02041626]
[62.26620483 98.37807465]
[68.90876770 84.92904663]
[82.35746002 91.57117462]
[85.67852020 84.84654999]
[79.98646545 70.96849060]
[74.29441071 57.09043121]
[68.60234833 43.21237564]
[62.91029358 29.33431625]
[49.61093140 19.73958015]
[51.53950119 3.45422840]
[66.71205139 -2.76876354]
[79.52037048 7.47228432]
[76.78835297 23.64225960]
[82.48040771 37.52031708]
[88.17246246 51.39837646]
[93.86452484 65.27643585]
[99.55657959 79.15448761]
[106.73928070 81.31291199]
[103.29518127 66.71366119]
[114.21652985 56.43143463]
[128.58183289 60.74858856]
[132.02561951 75.34791565]
[121.10469055 85.62975311]
[128.28738403 87.78817749]
[140.68656921 79.34658051]
[153.08573914 70.90498352]
[165.48490906 62.46339035]
[172.53794861 48.30128479]
[187.41279602 47.53446198]
[199.81196594 39.09286499]
[212.21113586 30.65127182]
[224.61030579 22.20967674]
[237.00949097 13.76808071]
[246.69956970 -0.14372885]
[262.75018311 5.31649828]
[261.94659424 22.25139046]
[245.45108032 26.16725349]
[233.05191040 34.60884857]
[220.65274048 43.05044174]
[208.25357056 51.49203873]
[195.85438538 59.93363571]
[189.68823242 73.49194336]
[173.92649841 74.86256409]
[161.52732849 83.30416107]
[149.12815857 91.74575043]
[136.72898865 100.18734741]
[133.42021179 114.81786346]
[140.98033142 127.77335358]
[148.54043579 140.72885132]
[156.10055542 153.68434143]
[178.19419861 157.18286133]
[190.72492981 175.39306641]
[186.20733643 196.76184082]
[195.81361389 208.28224182]
[205.41989136 219.80262756]
[215.02616882 231.32302856]
[224.63243103 242.84342957]
[234.23870850 254.36383057]
[249.99916077 255.54010010]
[260.24829102 267.57052612]
[258.90545654 283.31765747]
[246.76733398 293.43902588]
[231.03527832 291.92974854]
[221.04281616 279.68533325]
[222.71830750 263.97009277]
[213.11204529 252.44970703]
[203.50576782 240.92930603]
[193.89949036 229.40890503]
[184.29321289 217.88850403]
[174.68695068 206.36811829]
[166.56961060 208.68795776]
[158.09671021 208.44178772]
[150.06329346 205.63201904]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 89]
[6 88]
[7 87]
[8 86]
[9 38]
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 32]
[17 30]
[18 29]
[19 28]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[63 85]
[64 84]
[65 83]
[66 82]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[92 109]
[93 108]
[94 107]
[95 106]
[96 105]
[97 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
