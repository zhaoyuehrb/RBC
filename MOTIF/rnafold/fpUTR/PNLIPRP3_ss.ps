%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:53:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGCAUCAUUGUGAGGAAAACCACUUAGUAUUUUAUAGUGAGGUGACUUUACAAGUAAAGAUCUUCAAGAAGAUUUUUAUGUGAUUUAAAAAAUCAGCUUAG\
) } def
/len { sequence length } bind def

/coor [
[82.02101135 155.97021484]
[92.30907440 143.97308350]
[90.92504883 129.03707886]
[80.45957947 122.11305237]
[73.96212769 111.82450104]
[72.31594849 100.15167999]
[75.50407410 89.19792175]
[82.66535187 80.81104279]
[68.37122345 76.26375580]
[54.07709122 71.71646118]
[39.78296280 67.16917419]
[25.48883057 62.62188339]
[11.19470119 58.07459259]
[-3.09942865 53.52730179]
[-17.39355850 48.98001099]
[-28.66214752 56.54572678]
[-42.03452682 56.18844223]
[-52.57019424 48.26685333]
[-56.50798035 35.89244843]
[-70.65529633 30.90712738]
[-84.80261230 25.92180634]
[-91.64208984 26.79636765]
[-97.01071930 24.33936310]
[-99.65116119 20.16944695]
[-113.46474457 14.32265949]
[-127.27832794 8.47587109]
[-143.00286865 10.22208118]
[-151.70759583 -1.86415184]
[-165.52117920 -7.71093988]
[-179.33476257 -13.55772781]
[-196.27789307 -14.16349030]
[-200.38612366 -30.61216164]
[-185.71754456 -39.11328888]
[-173.48797607 -27.37131119]
[-159.67439270 -21.52452278]
[-145.86080933 -15.67773438]
[-131.12431335 -17.84214592]
[-121.43154144 -5.33771133]
[-107.61795807 0.50907654]
[-93.80437469 6.35586452]
[-79.81729126 11.77448940]
[-65.66997528 16.75981140]
[-51.52265930 21.74513435]
[-36.77249908 13.83165169]
[-20.51751518 19.05734062]
[-12.84626865 34.68588257]
[1.44786143 39.23317337]
[15.74199104 43.78046036]
[30.03612137 48.32775116]
[44.33024979 52.87504196]
[58.62438202 57.42233276]
[72.91851044 61.96962357]
[87.21263885 66.51691437]
[102.03512573 64.21603394]
[114.27807617 55.54943085]
[126.52103424 46.88282394]
[138.76397705 38.21621704]
[151.00694275 29.54960823]
[163.24989319 20.88299942]
[175.49284363 12.21639252]
[187.73579407 3.54978538]
[199.97875977 -5.11682224]
[212.22171021 -13.78342915]
[224.46466064 -22.45003700]
[230.82356262 -37.56613159]
[247.12556458 -39.34847641]
[256.60055542 -25.96354103]
[249.50149536 -11.18060493]
[233.13127136 -10.20708370]
[220.88832092 -1.54047585]
[208.64535522 7.12613153]
[196.40240479 15.79273891]
[184.15945435 24.45934677]
[171.91650391 33.12595367]
[159.67353821 41.79256058]
[147.43058777 50.45916748]
[135.18763733 59.12577820]
[122.94468689 67.79238129]
[110.70172882 76.45899200]
[125.74616241 88.64057922]
[128.94323730 109.36991882]
[140.33430481 119.12918854]
[151.72538757 128.88845825]
[163.11645508 138.64773560]
[174.50753784 148.40701294]
[185.89860535 158.16629028]
[201.86077881 163.87989807]
[200.78923035 180.79994202]
[184.23377991 184.45420837]
[176.13932800 169.55735779]
[164.74826050 159.79808044]
[153.35717773 150.03881836]
[141.96611023 140.27954102]
[130.57502747 130.52026367]
[119.18395996 120.76098633]
[105.86106873 127.65304565]
[107.24509430 142.58906555]
[119.56245422 152.49148560]
[121.18698883 168.21206665]
[111.15488434 180.42404175]
[95.41801453 181.88227844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 97]
[3 96]
[8 53]
[9 52]
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[19 43]
[20 42]
[21 41]
[24 40]
[25 39]
[26 38]
[28 36]
[29 35]
[30 34]
[54 79]
[55 78]
[56 77]
[57 76]
[58 75]
[59 74]
[60 73]
[61 72]
[62 71]
[63 70]
[64 69]
[81 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
