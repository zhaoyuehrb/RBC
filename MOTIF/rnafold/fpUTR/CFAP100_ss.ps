%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:28:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCGGAGGCUUCGGAGCGAGCCGGGGCAGUCGGGGUCGGUGAGGAUCUCCUUUAGAAGAGGAGAAGCCUUGCAUCAACCUCUUGGGCCUCAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[83.86778259 355.66809082]
[78.67496490 341.04568481]
[83.10099030 326.17324829]
[95.44395447 316.76947021]
[94.97279358 301.77688599]
[86.83953857 289.29891968]
[94.13954926 275.26251221]
[93.66838837 260.26992798]
[93.19722748 245.27732849]
[92.72606659 230.28472900]
[92.25490570 215.29212952]
[91.78374481 200.29953003]
[91.31258392 185.30693054]
[83.17932129 172.82897949]
[90.47933197 158.79257202]
[90.00817108 143.79997253]
[89.53701019 128.80737305]
[89.06584930 113.81478119]
[79.87224579 101.96245575]
[65.46783447 97.77758789]
[51.06343079 93.59272003]
[35.65257645 97.17267609]
[25.58929443 86.19180298]
[11.18488979 82.00693512]
[-4.22596645 85.58689117]
[-14.28924751 74.60601807]
[-28.69365311 70.42115021]
[-44.48168945 74.85623169]
[-56.02599335 63.20886993]
[-51.45077896 47.46087265]
[-35.46263123 43.81242752]
[-24.50878525 56.01674271]
[-10.10438061 60.20161057]
[4.27617645 56.32232285]
[15.36975670 67.60253143]
[29.77416229 71.78739929]
[44.15472031 67.90811157]
[55.24829865 79.18831635]
[69.65270233 83.37318420]
[84.05710602 87.55805206]
[97.82342529 81.60083008]
[104.63328552 68.23573303]
[111.44314575 54.87063599]
[118.25299835 41.50553894]
[125.06285858 28.14044189]
[131.87271118 14.77534389]
[130.41217041 -3.49636006]
[145.31959534 -12.60782528]
[151.70628357 -26.18023109]
[158.09297180 -39.75263596]
[164.47966003 -53.32504272]
[170.86634827 -66.89744568]
[177.25303650 -80.46985626]
[183.63972473 -94.04225922]
[190.02641296 -107.61466217]
[191.29949951 -124.52074432]
[207.89730835 -127.97748566]
[215.81369019 -112.98524475]
[203.59883118 -101.22797394]
[197.21212769 -87.65557098]
[190.82543945 -74.08316803]
[184.43875122 -60.51075745]
[178.05206299 -46.93835449]
[171.66537476 -33.36594772]
[165.27868652 -19.79354095]
[158.89199829 -6.22113609]
[162.69819641 5.37983608]
[157.34161377 16.79851532]
[145.23780823 21.58520126]
[138.42796326 34.95029831]
[131.61810303 48.31539536]
[124.80824280 61.68049622]
[117.99838257 75.04559326]
[111.18852997 88.41069031]
[113.81969452 92.34118652]
[115.15371704 96.78394318]
[115.12392426 101.33140564]
[113.78628540 105.58232117]
[111.30985260 109.17716217]
[107.95740509 111.82845306]
[104.05844879 113.34362030]
[104.52960968 128.33621216]
[105.00077057 143.32881165]
[105.47193146 158.32141113]
[113.63888550 171.87174988]
[106.30517578 184.83576965]
[106.77633667 199.82836914]
[107.24750519 214.82096863]
[107.71866608 229.81356812]
[108.18982697 244.80616760]
[108.66098785 259.79876709]
[109.13214874 274.79135132]
[117.29910278 288.34167480]
[109.96539307 301.30572510]
[110.43655396 316.29830933]
[123.34563446 324.90850830]
[128.69677734 339.47369385]
[124.43235016 354.39328003]
[112.19211578 363.93038940]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[7 92]
[8 91]
[9 90]
[10 89]
[11 88]
[12 87]
[13 86]
[15 84]
[16 83]
[17 82]
[18 81]
[19 40]
[20 39]
[21 38]
[23 36]
[24 35]
[26 33]
[27 32]
[41 74]
[42 73]
[43 72]
[44 71]
[45 70]
[46 69]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
