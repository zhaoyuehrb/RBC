%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCUCCAAACUCCCGUCCCCAGGCCACACAGAUUCUCCUCAAGAGAGCCCUAUAAGGACAUUGGUAAA\
) } def
/len { sequence length } bind def

/coor [
[78.79376984 319.54495239]
[63.66123199 317.55270386]
[50.89638901 309.18481445]
[43.03371429 296.10272217]
[41.63434219 280.90390015]
[46.97612381 266.60604858]
[57.99844360 256.04806519]
[72.51280975 251.32621765]
[74.47070312 236.45454407]
[76.42859650 221.58287048]
[78.38648987 206.71119690]
[69.14372253 195.08764648]
[70.91744995 179.97776794]
[83.17195892 170.36190796]
[85.12985229 155.49023438]
[87.08774567 140.61856079]
[74.98484039 134.50848389]
[65.41311646 124.90665436]
[59.34108353 112.78461456]
[57.38315201 99.36896515]
[59.73743439 86.01715851]
[66.16571045 74.08022308]
[76.01753235 64.76599121]
[88.29604340 59.01693726]
[101.75881958 57.41478348]
[105.00540924 42.77034378]
[108.25200653 28.12590408]
[95.03981781 35.22787476]
[80.06466675 34.36479950]
[67.75587463 25.79195595]
[61.75410461 12.04500103]
[63.83454895 -2.81002355]
[73.38185883 -14.37933254]
[87.57215118 -19.24098206]
[102.20825195 -15.95700645]
[112.96113586 -5.49873018]
[116.65036774 9.03917980]
[125.25401306 -3.24810100]
[133.85766602 -15.53538132]
[142.46130371 -27.82266235]
[141.10269165 -43.80808640]
[152.85211182 -54.73195267]
[168.69639587 -52.21440887]
[176.48118591 -38.18669510]
[170.23464966 -23.40967751]
[154.74858093 -19.21901512]
[146.14494324 -6.93173504]
[137.54129028 5.35554552]
[128.93765259 17.64282608]
[122.89644623 31.37249756]
[119.64985657 46.01693726]
[116.40325928 60.66137695]
[130.00050354 69.72519684]
[139.18769836 83.23937988]
[142.61433411 99.21736908]
[139.77670288 115.31039429]
[131.09191895 129.15281677]
[117.83665466 138.70979309]
[101.95941925 142.57646179]
[100.00152588 157.44813538]
[98.04363251 172.31980896]
[107.39181519 184.77970886]
[105.19438171 199.83380127]
[93.25816345 208.66908264]
[91.30027008 223.54075623]
[89.34237671 238.41242981]
[87.38448334 253.28410339]
[100.18217468 261.60165405]
[108.09631348 274.65267944]
[109.55551910 289.84588623]
[104.27008820 304.16464233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 67]
[9 66]
[10 65]
[11 64]
[14 61]
[15 60]
[16 59]
[25 52]
[26 51]
[27 50]
[37 49]
[38 48]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
