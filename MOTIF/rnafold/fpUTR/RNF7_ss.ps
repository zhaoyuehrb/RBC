%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:32:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGGGUCUAGGCACCACGGUGGCUGGCGGCCUGCGGGCGGCGCUGUGGCCCGUCGGGCGGCUCCACAGAGCCGCCCUAGCCUUCCGCCUUCCCCAAGCCAACGUCUCCGCCGUCGGCUCCGCGGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[88.20342255 493.94915771]
[84.84453583 478.26165771]
[95.12631226 465.94644165]
[95.12631226 450.94644165]
[95.12631226 435.94644165]
[87.38900757 423.21914673]
[95.12631226 409.41897583]
[95.12631226 394.41897583]
[95.12631226 379.41897583]
[84.44543457 369.10131836]
[84.23175812 353.88916016]
[95.12631226 342.75604248]
[95.12631226 327.75604248]
[84.44543457 317.43835449]
[84.23175812 302.22622681]
[95.12631226 291.09310913]
[95.12631226 276.09310913]
[94.95047760 261.09414673]
[94.59883881 246.09826660]
[94.24720001 231.10238647]
[93.89556122 216.10650635]
[93.54392242 201.11062622]
[93.19228363 186.11474609]
[92.84064484 171.11886597]
[84.27877045 162.49102783]
[83.91717529 149.93911743]
[92.50000000 140.22952271]
[92.50000000 125.22952271]
[92.50000000 110.22952271]
[91.97260284 95.23879242]
[90.91845703 80.27587891]
[89.86431885 65.31296539]
[81.17632294 52.09066391]
[88.00006866 38.85111237]
[86.94592285 23.88819885]
[83.19116211 15.45618248]
[86.04665375 8.56289673]
[85.34356689 -6.42061663]
[84.64048767 -21.40412903]
[74.33023834 -36.60890579]
[82.87296295 -51.89250183]
[81.81881714 -66.85541534]
[80.76467133 -81.81832886]
[79.71053314 -96.78124237]
[67.46449280 -103.22201538]
[60.07922745 -114.79416656]
[59.40601349 -128.39692688]
[65.51441193 -140.44808960]
[76.70223236 -147.82739258]
[75.99914551 -162.81091309]
[75.29606628 -177.79441833]
[65.72465515 -182.86537170]
[59.21173859 -191.41838074]
[56.90406799 -201.83499146]
[59.16064453 -212.17962646]
[65.49875641 -220.55920410]
[74.69525146 -225.46961975]
[75.04689026 -240.46549988]
[75.39852905 -255.46136475]
[75.75016785 -270.45724487]
[76.10180664 -285.45312500]
[76.45344543 -300.44900513]
[76.80508423 -315.44488525]
[77.15672302 -330.44076538]
[77.50836182 -345.43664551]
[69.17344666 -359.55972290]
[77.47145081 -373.70449829]
[93.86608887 -373.32006836]
[101.49197388 -358.80187988]
[92.50424194 -345.08499146]
[92.15260315 -330.08911133]
[91.80096436 -315.09323120]
[91.44932556 -300.09735107]
[91.09768677 -285.10150146]
[90.74604797 -270.10562134]
[90.39440918 -255.10972595]
[90.04277039 -240.11386108]
[89.69113159 -225.11798096]
[104.14765167 -212.17962646]
[104.58220673 -192.48226929]
[90.27957916 -178.49751282]
[90.98266602 -163.51399231]
[91.68574524 -148.53047180]
[105.65966797 -139.99818420]
[111.88803101 -124.67736053]
[107.74920654 -108.49417114]
[94.67344666 -97.83538818]
[95.72758484 -82.87247467]
[96.78173065 -67.90956116]
[97.83587646 -52.94664764]
[106.79274750 -44.72960281]
[107.74227905 -32.20843506]
[99.62400055 -22.10721397]
[100.32707977 -7.12370062]
[101.03016663 7.85981321]
[101.90883636 22.83405495]
[102.96298218 37.79697037]
[111.57557678 49.94902420]
[104.82723236 64.25882721]
[105.88137054 79.22174072]
[106.93551636 94.18465424]
[109.54687500 97.16365051]
[110.78925323 101.30303955]
[110.16535950 105.94474030]
[107.50000000 110.22952271]
[107.50000000 125.22952271]
[107.50000000 140.22952271]
[117.08623505 155.90084839]
[107.83652496 170.76722717]
[108.18816376 185.76310730]
[108.53980255 200.75898743]
[108.89144135 215.75486755]
[109.24308014 230.75074768]
[109.59471893 245.74662781]
[109.94635773 260.74249268]
[113.30176544 269.34124756]
[110.12631226 276.09310913]
[110.12631226 291.09310913]
[121.02085876 302.22622681]
[120.80718231 317.43835449]
[110.12631226 327.75604248]
[110.12631226 342.75604248]
[121.02085876 353.88916016]
[120.80718231 369.10131836]
[110.12631226 379.41897583]
[110.12631226 394.41897583]
[110.12631226 409.41897583]
[117.86360931 423.21914673]
[110.12631226 435.94644165]
[110.12631226 450.94644165]
[110.12631226 465.94644165]
[120.40808105 478.26165771]
[117.04919434 493.94915771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 131]
[4 130]
[5 129]
[7 127]
[8 126]
[9 125]
[12 122]
[13 121]
[16 118]
[17 117]
[18 115]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[24 109]
[27 107]
[28 106]
[29 105]
[30 101]
[31 100]
[32 99]
[34 97]
[35 96]
[37 95]
[38 94]
[39 93]
[41 90]
[42 89]
[43 88]
[44 87]
[49 83]
[50 82]
[51 81]
[57 78]
[58 77]
[59 76]
[60 75]
[61 74]
[62 73]
[63 72]
[64 71]
[65 70]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
