%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:02:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGCUCGAAGGGUGGGGGUUGAGGCCGACGGGGCGCCGUACGGCGGAGGCGGGGUUUCAGUGGCUUCUGGUGCUCUAGGGUGAGCUCUGCCCGGCUGCAGGG\
) } def
/len { sequence length } bind def

/coor [
[90.68816376 321.63793945]
[100.20001984 308.71878052]
[99.28556061 293.74670410]
[98.37110138 278.77459717]
[85.69702911 273.44815063]
[76.53782654 263.10671997]
[72.74514008 249.75407410]
[75.12328339 236.01095581]
[83.25946045 224.60084534]
[95.59407043 217.81011963]
[95.13662720 202.81709290]
[94.67918396 187.82406616]
[94.22174072 172.83103943]
[93.76429749 157.83802795]
[93.30685425 142.84500122]
[92.84941864 127.85197449]
[92.39197540 112.85895538]
[84.56424713 100.06337738]
[71.42405701 92.82905579]
[58.28387070 85.59473419]
[44.28584671 92.02603149]
[29.35942268 89.01684570]
[19.18735695 77.92662048]
[17.51618004 63.15011215]
[4.37598991 55.91578674]
[-8.76419926 48.68146515]
[-21.90438843 41.44714355]
[-35.15337372 34.41404724]
[-48.50807190 27.58381653]
[-61.86276627 20.75358582]
[-75.21746063 13.92335320]
[-91.55901337 15.29657459]
[-100.69558716 1.67838287]
[-93.22825623 -12.92199326]
[-76.83876801 -13.48493958]
[-68.38722992 0.56865609]
[-55.03253555 7.39888811]
[-41.67783737 14.22912025]
[-28.32314110 21.05935287]
[-20.80726051 21.30688286]
[-14.67006683 28.30695343]
[-1.52987742 35.54127502]
[11.61031246 42.77560043]
[24.75050163 50.00992203]
[38.13010788 43.51961517]
[52.94112015 46.18380356]
[63.46642685 57.18704987]
[65.51818848 72.45454407]
[78.65837860 79.68886566]
[91.79856873 86.92318726]
[106.58800507 84.41864777]
[116.61362457 73.26127625]
[126.63924408 62.10390854]
[136.66487122 50.94653702]
[146.69049072 39.78916550]
[150.15898132 24.35284042]
[164.42076111 20.05739594]
[174.44638062 8.90002537]
[184.47200012 -2.25734615]
[194.49761963 -13.41471767]
[193.40426636 -29.18114090]
[203.84257507 -41.04778671]
[219.61968994 -41.97438049]
[231.37530518 -31.41119385]
[232.13504028 -15.62517643]
[221.44816589 -3.98189306]
[205.65498352 -3.38909674]
[195.62936401 7.76827431]
[185.60374451 18.92564583]
[175.57812500 30.08301735]
[172.82673645 44.72129059]
[157.84785461 49.81478500]
[147.82223511 60.97215652]
[137.79661560 72.12953186]
[127.77099609 83.28690338]
[117.74537659 94.44426727]
[131.97506714 89.69918060]
[146.38204956 93.87514496]
[155.86839294 105.49449921]
[157.07733154 120.44570160]
[149.58106995 133.43824768]
[136.03218079 139.87467957]
[121.22497559 137.47746277]
[110.39900208 127.09486389]
[107.38499451 112.40151215]
[107.84243774 127.39453125]
[108.29988098 142.38755798]
[108.75732422 157.38058472]
[109.21476746 172.37359619]
[109.67221069 187.36662292]
[110.12965393 202.35964966]
[110.58709717 217.35267639]
[125.17242432 224.96708679]
[133.91996765 238.79208374]
[134.54812622 255.04664612]
[126.98091125 269.34057617]
[113.34320068 277.86013794]
[114.25765991 292.83224487]
[115.17211914 307.80432129]
[126.18555450 319.46984863]
[123.78929138 335.33291626]
[109.82154083 343.22479248]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[10 92]
[11 91]
[12 90]
[13 89]
[14 88]
[15 87]
[16 86]
[17 85]
[18 50]
[19 49]
[20 48]
[24 44]
[25 43]
[26 42]
[27 41]
[28 39]
[29 38]
[30 37]
[31 36]
[51 76]
[52 75]
[53 74]
[54 73]
[55 72]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
