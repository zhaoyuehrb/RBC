%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:32:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCCUCCGGCCUCCCGCUCUCACUUCCUUCUCGAGCCCGGAGCCGCUGCCGCCGCCCCCAGCUCCCCCGCCUCGGGGAGGGCACCAGGUCACUGCAGCCAGAGGGGUCCAGAAGAGAGAGGAGGCACUGCCUCCACUACAGCAACUGCACCCACG\
) } def
/len { sequence length } bind def

/coor [
[117.72490692 192.58767700]
[105.04091644 184.58041382]
[97.94437408 171.36529541]
[98.27538300 156.36895752]
[105.94809723 143.47982788]
[118.97303772 136.04002380]
[133.97326660 135.97869873]
[122.14095306 126.75934601]
[110.30863953 117.54000854]
[90.65665436 121.42789459]
[74.21219635 105.68795013]
[60.54542160 111.87011719]
[46.87864304 118.05228424]
[40.30664062 124.47451019]
[32.88023758 124.21860504]
[19.09398460 130.12954712]
[5.30773306 136.04049683]
[-5.34282494 151.03186035]
[-22.66135979 148.34115601]
[-36.32813644 154.52333069]
[-49.99491501 160.70549011]
[-63.66168976 166.88766479]
[-63.52922440 182.11601257]
[-69.60808563 196.07907104]
[-80.84507751 206.35769653]
[-95.29331970 211.17102051]
[-110.44957733 209.68511963]
[-123.68791962 202.15742493]
[-132.71473694 189.89218140]
[-135.96607971 175.01438904]
[-132.87863159 160.10173035]
[-123.98729706 147.73789978]
[-110.83257294 140.06501770]
[-95.69358826 138.41246033]
[-81.19326019 143.06652832]
[-69.84385681 153.22088623]
[-56.17708206 147.03872681]
[-42.51030350 140.85655212]
[-28.84352875 134.67437744]
[-24.26232910 123.44289398]
[-12.88265038 118.19517517]
[-0.60321176 122.25424957]
[13.18303967 116.34329987]
[26.96929169 110.43235779]
[40.69647598 104.38550568]
[54.36325455 98.20333862]
[68.03002930 92.02117157]
[74.87947083 78.67631531]
[71.93495178 63.96815872]
[68.99042511 49.26000595]
[66.04590607 34.55184937]
[63.10138702 19.84369659]
[48.64492416 14.84790230]
[38.69573975 3.36267114]
[35.85012054 -11.46193123]
[40.77395630 -25.62568092]
[52.05028915 -35.35758209]
[49.10576630 -50.06573868]
[46.16124725 -64.77388763]
[31.70478630 -69.76968384]
[21.75560188 -81.25491333]
[18.90998077 -96.07952118]
[23.83381462 -110.24327087]
[35.11014938 -119.97516632]
[32.16562653 -134.68331909]
[29.22110748 -149.39147949]
[26.27658653 -164.09963989]
[23.18690681 -178.77798462]
[19.95237160 -193.42509460]
[16.71783447 -208.07218933]
[13.48329735 -222.71929932]
[10.24876022 -237.36640930]
[0.92918402 -251.52909851]
[11.95847702 -264.40509033]
[27.38447762 -257.37124634]
[24.89586830 -240.60095215]
[28.13040543 -225.95384216]
[31.36494255 -211.30673218]
[34.59947968 -196.65962219]
[37.83401489 -182.01251221]
[42.37137222 -176.12783813]
[40.98474121 -167.04415894]
[43.92926025 -152.33599854]
[46.87378311 -137.62783813]
[49.81830215 -122.91969299]
[63.97201920 -118.27879333]
[73.96891022 -107.10211945]
[77.04953766 -92.32456970]
[72.28852844 -77.89440918]
[60.86940002 -67.71841431]
[63.81392288 -53.01025772]
[66.75844574 -38.30210114]
[80.91215515 -33.66120911]
[90.90905762 -22.48453331]
[93.98967743 -7.70697880]
[89.22866821 6.72318172]
[77.80953979 16.89917564]
[80.75405884 31.60733032]
[83.69858551 46.31548309]
[86.64310455 61.02363968]
[89.58762360 75.73179626]
[108.32060242 77.07660675]
[119.94958496 89.88825989]
[119.52798462 105.70768738]
[131.36029053 114.92703247]
[143.19261169 124.14637756]
[155.87655640 132.15373230]
[169.28842163 138.87100220]
[182.70030212 145.58827209]
[196.11216736 152.30554199]
[211.91613770 151.56739807]
[219.83100891 164.18499756]
[233.24287415 170.90226746]
[246.65475464 177.61953735]
[260.00009155 166.88591003]
[276.63507080 163.05158997]
[293.22494507 166.83592224]
[306.46548462 177.43592834]
[313.74105835 192.69602966]
[313.64123535 209.54637146]
[327.30801392 215.72853088]
[343.07049561 214.36660767]
[351.47766113 226.66168213]
[365.14443970 232.84384155]
[378.81121826 239.02601624]
[392.47799683 245.20819092]
[406.14477539 251.39035034]
[419.81155396 257.57250977]
[436.73483276 258.59161377]
[440.44042969 275.13562012]
[425.56872559 283.27624512]
[413.62936401 271.23928833]
[399.96258545 265.05712891]
[386.29583740 258.87496948]
[372.62905884 252.69279480]
[358.96228027 246.51062012]
[345.29550171 240.32846069]
[330.51055908 242.13258362]
[321.12585449 229.39530945]
[307.45907593 223.21315002]
[298.16906738 232.37338257]
[286.28305054 237.82994080]
[273.21685791 238.90882874]
[260.53503418 235.45895386]
[249.76361084 227.87280273]
[242.20645142 217.04193115]
[238.78741455 204.25228882]
[239.93748474 191.03141785]
[226.52560425 184.31414795]
[213.11373901 177.59687805]
[198.26907349 178.81549072]
[189.39489746 165.71740723]
[175.98303223 159.00013733]
[162.57115173 152.28286743]
[149.15928650 145.56559753]
[155.55493164 159.13378906]
[154.44003296 174.09230042]
[146.10369873 186.56246948]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 106]
[8 105]
[9 104]
[11 47]
[12 46]
[13 45]
[15 44]
[16 43]
[17 42]
[19 39]
[20 38]
[21 37]
[22 36]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[57 92]
[58 91]
[59 90]
[64 85]
[65 84]
[66 83]
[67 82]
[68 80]
[69 79]
[70 78]
[71 77]
[72 76]
[107 155]
[108 154]
[109 153]
[110 152]
[112 150]
[113 149]
[114 148]
[120 140]
[121 139]
[123 137]
[124 136]
[125 135]
[126 134]
[127 133]
[128 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
