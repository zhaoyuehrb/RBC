%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:58:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGACCAAUGUUCAAGCCUAUUGGUAAAGGUACUCCGGGCUCGCGCGCUCUGAUUGGCUGGCCUGAAGUACAACGCCUCCUCCCCUUGAGGCACGGGCGCUCUGGGUUGUGGGAGUUGGGGAGCUGCUCCGGCUUCGGCGCGGAGGGGCGGCGGCCGGGGAGGCGGCGGCGGCGGCAGGAUUCCCAGGAGCC\
) } def
/len { sequence length } bind def

/coor [
[108.56237793 155.47138977]
[95.88166809 163.48385620]
[84.34292603 153.89961243]
[89.89191437 139.96443176]
[82.40763855 139.47895813]
[75.18984985 152.62823486]
[67.97206116 165.77751160]
[60.75427246 178.92678833]
[53.53648376 192.07606506]
[46.31869507 205.22534180]
[39.10090637 218.37461853]
[45.83840942 232.35266113]
[43.03995895 247.61531067]
[31.78161049 258.29376221]
[16.39243317 260.28192139]
[2.78987694 252.81533813]
[-3.79559660 238.76502991]
[-0.83173895 223.53363037]
[10.54178619 212.97795105]
[25.95162773 211.15682983]
[33.16941452 198.00755310]
[40.38720703 184.85827637]
[47.60499573 171.70899963]
[54.82278442 158.55972290]
[62.04057312 145.41044617]
[69.25836182 132.26116943]
[66.76180267 126.46415710]
[65.24238586 120.61442566]
[64.66464996 114.86586761]
[64.97002411 109.36133575]
[66.07923126 104.22930145]
[51.14997864 102.77415466]
[36.22072983 101.31900024]
[21.29147720 99.86385345]
[6.36222601 98.40870667]
[-8.12345123 104.77075958]
[-20.04010010 95.83528137]
[-34.96935272 94.38013458]
[-49.89860153 92.92498779]
[-64.82785034 91.46984100]
[-79.75710297 90.01469421]
[-94.68635559 88.55954742]
[-109.17203522 94.92160034]
[-121.08868408 85.98612213]
[-136.01792908 84.53097534]
[-143.89907837 97.60194397]
[-156.67573547 105.95178986]
[-171.81106567 107.92265320]
[-186.29995728 103.12320709]
[-197.26564026 92.50638580]
[-202.53083801 78.18016815]
[-201.05017090 62.98904419]
[-193.11759949 49.94921112]
[-180.30816650 41.64974213]
[-165.16519165 39.73850250]
[-150.69531250 44.59496689]
[-139.77153015 55.25488663]
[-134.56278992 69.60172272]
[-119.63353729 71.05686951]
[-106.21569824 64.59073639]
[-93.23120880 73.63029480]
[-78.30195618 75.08544159]
[-63.37270737 76.54058838]
[-48.44345474 77.99573517]
[-33.51420212 79.45088196]
[-18.58495140 80.90603638]
[-5.16711473 74.43989563]
[7.81737375 83.47945404]
[22.74662590 84.93460083]
[37.67587662 86.38975525]
[52.60512924 87.84490204]
[67.53437805 89.30004883]
[79.61897278 72.55697632]
[99.14025879 65.82740021]
[118.97525024 71.56682587]
[129.83633423 61.22097015]
[140.69743347 50.87511444]
[151.55851746 40.52925491]
[156.21424866 25.40858269]
[170.76631165 22.23264694]
[181.62739563 11.88679028]
[192.48849487 1.54093373]
[203.34957886 -8.80492306]
[214.21066284 -19.15077972]
[225.07176208 -29.49663544]
[235.93284607 -39.84249115]
[237.01461792 -44.08106232]
[239.17756653 -47.41323090]
[242.00128174 -49.60948181]
[245.03392029 -50.60145950]
[247.84799194 -50.47813034]
[259.35598755 -60.09925079]
[270.86398315 -69.72037506]
[275.44918823 -77.63746643]
[282.63711548 -79.40229034]
[294.29940796 -88.83580780]
[296.43161011 -101.56596375]
[306.35134888 -109.18244934]
[318.40185547 -108.03028107]
[330.21539307 -117.27370453]
[342.02890015 -126.51713562]
[353.84240723 -135.76055908]
[365.65591431 -145.00398254]
[377.46942139 -154.24740601]
[375.43154907 -169.40638733]
[381.21673584 -183.45729065]
[393.17874146 -192.66474915]
[408.04388428 -194.63528442]
[421.80679321 -188.93898010]
[433.62030029 -198.18241882]
[445.43383789 -207.42584229]
[451.53445435 -222.02354431]
[466.32598877 -223.77281189]
[478.13949585 -233.01623535]
[489.95300293 -242.25965881]
[501.76651001 -251.50308228]
[513.58001709 -260.74652100]
[525.39355469 -269.98992920]
[537.20703125 -279.23336792]
[549.02056885 -288.47680664]
[560.83404541 -297.72021484]
[572.64758301 -306.96365356]
[576.01074219 -322.65023804]
[590.43554688 -329.67196655]
[604.85650635 -322.64236450]
[608.21112061 -306.95397949]
[597.92602539 -294.64154053]
[581.89099121 -295.15014648]
[570.07751465 -285.90670776]
[558.26397705 -276.66326904]
[546.45050049 -267.41986084]
[534.63696289 -258.17642212]
[522.82342529 -248.93299866]
[511.00994873 -239.68957520]
[499.19641113 -230.44615173]
[487.38290405 -221.20271301]
[475.56939697 -211.95928955]
[470.31375122 -198.02273560]
[454.67724609 -195.61231995]
[442.86373901 -186.36889648]
[431.05023193 -177.12547302]
[433.26898193 -162.39649963]
[427.78085327 -148.44169617]
[415.96655273 -139.04550171]
[400.93664551 -136.80973816]
[386.71286011 -142.43389893]
[374.89935303 -133.19047546]
[363.08581543 -123.94704437]
[351.27230835 -114.70362091]
[339.45880127 -105.46018982]
[327.64529419 -96.21676636]
[321.97793579 -79.61450195]
[303.73291016 -77.17352295]
[292.07061768 -67.74000549]
[280.48510742 -58.21237946]
[268.97711182 -48.59125519]
[257.46911621 -38.97013092]
[246.27870178 -28.98140335]
[235.41761780 -18.63554764]
[224.55651855 -8.28969097]
[213.69543457 2.05616593]
[202.83435059 12.40202236]
[191.97325134 22.74787903]
[181.11216736 33.09373474]
[177.23330688 47.47440338]
[161.90437317 51.39034653]
[151.04328918 61.73620224]
[140.18218994 72.08206177]
[129.32110596 82.42791748]
[137.60174561 98.23462677]
[137.08091736 117.73289490]
[126.31626892 135.96228027]
[131.77484131 149.93382263]
[137.23341370 163.90536499]
[152.33857727 166.30978394]
[164.13424683 175.88887024]
[169.51570129 189.99229431]
[167.13119507 204.79669189]
[157.72003174 216.34205627]
[163.17860413 230.31359863]
[176.31523132 240.12995911]
[174.11389160 256.38067627]
[158.83912659 262.34841919]
[146.20431519 251.89405823]
[149.20706177 235.77217102]
[143.74848938 221.80062866]
[129.00320435 219.69300842]
[117.21421814 210.42607117]
[111.60954285 196.40988159]
[113.78735352 181.37145996]
[123.26187134 169.36393738]
[117.80329895 155.39239502]
[112.34472656 141.42085266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 26]
[6 25]
[7 24]
[8 23]
[9 22]
[10 21]
[11 20]
[31 72]
[32 71]
[33 70]
[34 69]
[35 68]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[44 59]
[45 58]
[75 169]
[76 168]
[77 167]
[78 166]
[80 164]
[81 163]
[82 162]
[83 161]
[84 160]
[85 159]
[86 158]
[91 157]
[92 156]
[93 155]
[95 154]
[96 153]
[99 151]
[100 150]
[101 149]
[102 148]
[103 147]
[104 146]
[109 141]
[110 140]
[111 139]
[113 137]
[114 136]
[115 135]
[116 134]
[117 133]
[118 132]
[119 131]
[120 130]
[121 129]
[122 128]
[172 193]
[173 192]
[174 191]
[179 186]
[180 185]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
