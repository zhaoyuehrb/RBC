%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUGCUCCCUGGGCCUCCUGACCGCGCCCUCGCCUGGGAGGCGGGGCGGGCCGGGUUCUCUCUGUGACGUCACAAAGGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[175.00491333 292.95657349]
[168.77368164 279.31210327]
[162.54246521 265.66760254]
[156.31123352 252.02313232]
[150.08001709 238.37864685]
[143.84878540 224.73417664]
[138.07566833 219.84790039]
[137.64837646 210.48966980]
[131.90812683 196.63148499]
[117.40625000 193.34005737]
[107.50613403 182.00640869]
[106.16230774 166.83908081]
[114.09888458 153.63616943]
[108.35863495 139.77798462]
[102.61838531 125.91978455]
[86.83483124 122.48042297]
[76.11314392 110.39756775]
[74.57571411 94.31695557]
[82.81366730 80.42140961]
[76.58244324 66.77693176]
[70.35121918 53.13245392]
[64.11998749 39.48797226]
[51.34909439 30.14908409]
[53.10009003 15.35776043]
[46.86886597 1.71328068]
[40.31079102 -4.97630405]
[40.66846085 -12.53122044]
[34.92821121 -26.38941383]
[29.18795776 -40.24760818]
[23.44770622 -54.10580063]
[17.70745659 -67.96398926]
[11.39232731 -74.88338470]
[12.01942062 -82.42072296]
[6.77745819 -96.47496796]
[1.53549540 -110.52921295]
[-3.70646739 -124.58346558]
[-8.94843006 -138.63771057]
[-20.14875603 -151.36520386]
[-11.01921844 -165.65113831]
[5.23572254 -160.83311462]
[5.10581589 -143.87966919]
[10.34777832 -129.82542419]
[15.58974171 -115.77117920]
[20.83170319 -101.71693420]
[26.07366753 -87.66268921]
[31.56564903 -73.70424652]
[37.30590057 -59.84605026]
[43.04615021 -45.98785782]
[48.78640366 -32.12966537]
[54.52665329 -18.27147293]
[60.51334763 -4.51794434]
[66.74457550 9.12653542]
[79.06977081 17.48947906]
[77.76447296 33.25674820]
[83.99569702 46.90122604]
[90.22692108 60.54570770]
[96.45814514 74.19018555]
[109.71806335 75.82872772]
[120.42192841 83.82482910]
[125.75438690 96.07535553]
[124.31288910 109.35813904]
[116.47657776 120.17953491]
[122.21682739 134.03771973]
[127.95707703 147.89591980]
[142.90495300 151.61978149]
[152.67964172 163.29492188]
[153.69331360 178.30946350]
[145.76632690 190.89123535]
[151.50657654 204.74942017]
[157.49327087 218.50294495]
[163.72448730 232.14743042]
[169.95571899 245.79191589]
[176.18693542 259.43640137]
[182.41816711 273.08087158]
[188.64938354 286.72534180]
[199.30914307 290.03875732]
[206.14367676 298.58166504]
[207.00073242 309.26528931]
[201.83421326 318.40109253]
[207.07617188 332.45532227]
[212.31813049 346.50958252]
[223.51846313 359.23706055]
[214.38893127 373.52301025]
[198.13398743 368.70498657]
[198.26388550 351.75155640]
[193.02192688 337.69729614]
[187.77996826 323.64303589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[4 72]
[5 71]
[6 70]
[8 69]
[9 68]
[13 64]
[14 63]
[15 62]
[19 57]
[20 56]
[21 55]
[22 54]
[24 52]
[25 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
[79 87]
[80 86]
[81 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
