%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:25:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUGGGCCUCUCAAAGUCUGAGCCCCGCUCCGCUGAUGCCUGUCUGCAGAAUCCGCACCAACCAGCACC\
) } def
/len { sequence length } bind def

/coor [
[70.33051300 142.49862671]
[63.12069321 136.41877747]
[57.13192749 129.13313293]
[52.56251144 120.88290405]
[49.56372452 111.94125366]
[34.62080383 113.24858856]
[19.67788506 114.55592346]
[4.73496389 115.86325836]
[-8.33834457 124.77388000]
[-21.69153595 118.17527771]
[-36.63445663 119.48261261]
[-51.57737732 120.78994751]
[-58.66398621 134.49336243]
[-72.04563141 142.17028809]
[-87.45227814 141.37104797]
[-99.96772003 132.35066223]
[-105.59832764 117.98752594]
[-102.54739380 102.86484528]
[-91.78845978 91.80822754]
[-76.75466156 88.34578705]
[-62.24323273 93.58238220]
[-52.88471222 105.84703064]
[-37.94179153 104.53969574]
[-22.99887085 103.23236084]
[-10.99438095 94.41524506]
[3.42762780 100.92034149]
[18.37054825 99.61300659]
[33.31346893 98.30566406]
[48.25638962 96.99832916]
[54.66443634 74.87834167]
[70.02272034 57.71792221]
[91.29919434 48.90491867]
[114.29338837 50.17921829]
[134.46575928 61.28924179]
[145.95642090 51.64742661]
[151.55453491 36.84973145]
[166.27761841 34.59591293]
[177.76829529 24.95409966]
[189.25895691 15.31228638]
[191.23143005 2.35903072]
[201.26486206 -5.42278481]
[213.49539185 -4.19061041]
[225.39569092 -13.32203197]
[237.29598999 -22.45345306]
[243.06835938 -37.80310440]
[259.28967285 -40.21159744]
[269.27285767 -27.20127869]
[262.74804688 -12.15604973]
[246.42741394 -10.55315304]
[234.52711487 -1.42173195]
[222.62681580 7.70968962]
[216.97827148 24.18099594]
[198.90077209 26.80295372]
[187.41011047 36.44476700]
[175.91943359 46.08658218]
[171.14321899 60.19462967]
[155.59823608 63.13809204]
[144.10757446 72.77990723]
[148.30981445 81.22307587]
[150.91253662 90.28793335]
[151.82957458 99.67436218]
[151.03056335 109.07156372]
[148.54194641 118.16841888]
[144.44612122 126.66371918]
[138.87870789 134.27619934]
[132.02403259 140.75379944]
[124.10906219 145.88206482]
[115.39584351 149.49121094]
[106.17288208 151.46170044]
[96.74553680 151.72833252]
[87.42594910 150.28224182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 29]
[6 28]
[7 27]
[8 26]
[10 24]
[11 23]
[12 22]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[42 51]
[43 50]
[44 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
