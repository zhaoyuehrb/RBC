%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:19:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGUCUCGCGGGAGCGCUGCUGGCGGUCGGGCGCUCGGGCGGCCCUGGCCGGGGAGACGAGUUGCAUGUGUUGGUUCAGCUGGCGAUAGCGGCGGGAGCGGAGCCGGCGGGGCCUGUGCGACCGCCUGGGUUUGUGAA\
) } def
/len { sequence length } bind def

/coor [
[40.99951935 251.26599121]
[31.91267014 263.20037842]
[22.82581902 275.13473511]
[13.73896790 287.06909180]
[4.65211725 299.00347900]
[-4.43473339 310.93783569]
[-3.48704505 323.85516357]
[-11.36946583 333.62106323]
[-23.39994621 335.30810547]
[-32.75229263 347.03558350]
[-42.10464096 358.76306152]
[-51.45698547 370.49053955]
[-51.09679413 386.52954102]
[-63.50386429 396.70028687]
[-79.16056061 393.20065308]
[-86.05639648 378.71524048]
[-78.90148926 364.35601807]
[-63.18445969 361.13818359]
[-53.83211136 349.41070557]
[-44.47976685 337.68322754]
[-35.12741852 325.95574951]
[-33.49274445 308.51846313]
[-16.36910248 301.85098267]
[-7.28225088 289.91662598]
[1.80459976 277.98223877]
[10.89144993 266.04788208]
[19.97830009 254.11351013]
[29.06515121 242.17915344]
[36.61368179 229.21690369]
[42.50905991 215.42399597]
[48.40443420 201.63107300]
[54.29980850 187.83815002]
[60.19518661 174.04524231]
[66.09056091 160.25231934]
[63.97803497 145.50828552]
[76.51651001 135.85960388]
[82.41188812 122.06668854]
[88.30725861 108.27376556]
[86.82873535 94.37033081]
[97.89982605 85.83085632]
[103.79519653 72.03794098]
[109.53544617 58.17974472]
[115.11985779 44.25802231]
[120.70426178 30.33629608]
[126.28866577 16.41457176]
[131.87306213 2.49284673]
[137.45747375 -11.42887783]
[143.04188538 -25.35060310]
[143.34375000 -34.56462479]
[148.91093445 -39.51976776]
[154.80632019 -53.31268311]
[160.70169067 -67.10559845]
[166.59706116 -80.89851379]
[154.13644409 -91.53049469]
[145.55342102 -105.46000671]
[141.66807556 -121.33444214]
[142.84498596 -137.61642456]
[148.95901489 -152.73272705]
[159.40853882 -165.22622681]
[173.17459106 -173.89642334]
[188.92030334 -177.91474915]
[205.12062073 -176.90374756]
[210.39125061 -190.94726562]
[215.66186523 -204.99079895]
[220.93249512 -219.03431702]
[226.20312500 -233.07783508]
[217.82670593 -246.00617981]
[218.65933228 -261.21014404]
[228.17242432 -272.87054443]
[242.55532837 -276.64813232]
[247.82594299 -290.69165039]
[253.09657288 -304.73519897]
[258.36718750 -318.77871704]
[263.63781738 -332.82223511]
[268.90844727 -346.86575317]
[274.17904663 -360.90927124]
[274.08374023 -377.86294556]
[290.34848022 -382.64779663]
[299.44885254 -368.34326172]
[288.22259521 -355.63864136]
[282.95196533 -341.59512329]
[277.68133545 -327.55160522]
[272.41070557 -313.50808716]
[267.14010620 -299.46456909]
[261.86947632 -285.42105103]
[256.59884644 -271.37750244]
[264.94476318 -259.06964111]
[264.43698120 -244.02949524]
[255.06072998 -232.03201294]
[240.24664307 -227.80722046]
[234.97601318 -213.76368713]
[229.70539856 -199.72016907]
[224.43476868 -185.67665100]
[219.16415405 -171.63311768]
[230.23724365 -163.53314209]
[238.82546997 -152.81785583]
[244.33033752 -140.22328186]
[246.36546326 -126.61675262]
[244.78366089 -112.93721008]
[239.68757629 -100.13037109]
[231.42301941 -89.08338928]
[220.55555725 -80.56337738]
[207.83178711 -75.16413879]
[194.12802124 -73.26478577]
[180.38998413 -75.00314331]
[174.49459839 -61.21022415]
[168.59922791 -47.41730881]
[162.70385742 -33.62438965]
[156.96360779 -19.76619720]
[151.37919617 -5.84447336]
[145.79479980 8.07725143]
[140.21038818 21.99897575]
[134.62597656 35.92070007]
[129.04158020 49.84242630]
[123.45717621 63.76415253]
[123.88996124 71.20456696]
[117.58811188 77.93331146]
[111.69274139 91.72623444]
[113.17126465 105.62966919]
[102.10017395 114.16914368]
[96.20480347 127.96205902]
[90.30942535 141.75497437]
[92.00027466 157.48556519]
[79.88347626 166.14770508]
[73.98809814 179.94061279]
[68.09272766 193.73353577]
[62.19734955 207.52644348]
[56.30197525 221.31936646]
[50.40660095 235.11228943]
[63.50215530 227.79747009]
[78.49281311 227.26812744]
[92.07170105 233.64102173]
[101.24338531 245.51033020]
[103.98462677 260.25772095]
[99.69072723 274.63000488]
[89.30889893 285.45669556]
[75.12932587 290.34951782]
[60.27994919 288.22912598]
[48.03648376 279.56323242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 28]
[2 27]
[3 26]
[4 25]
[5 24]
[6 23]
[9 21]
[10 20]
[11 19]
[12 18]
[29 129]
[30 128]
[31 127]
[32 126]
[33 125]
[34 124]
[36 122]
[37 121]
[38 120]
[40 118]
[41 117]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[48 109]
[50 108]
[51 107]
[52 106]
[53 105]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[70 86]
[71 85]
[72 84]
[73 83]
[74 82]
[75 81]
[76 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
