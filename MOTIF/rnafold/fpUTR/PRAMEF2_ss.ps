%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAAGCUACUGGUUGGUUCCCUGAGAGGUCCCAGAACUCUGCAAAGUGAGUCCAGCGCUGAGAUUUUUCUUGCAGAUCCAUCAGG\
) } def
/len { sequence length } bind def

/coor [
[67.87440491 230.93576050]
[67.87440491 215.93576050]
[67.87440491 200.93576050]
[67.87440491 185.93576050]
[67.87440491 170.93576050]
[55.60277176 179.56172180]
[40.77313232 177.30741882]
[31.61910629 165.42449951]
[33.22312927 150.51051331]
[44.69462585 140.84590149]
[59.66446686 141.79658508]
[69.82063293 152.83323669]
[73.00910950 138.17602539]
[76.19758606 123.51882935]
[68.31449890 110.75728607]
[53.78044128 107.04769135]
[39.24638367 103.33808899]
[24.71232414 99.62849426]
[11.23073006 107.43133545]
[-3.45602846 103.46223450]
[-10.81176567 90.56150818]
[-25.34582520 86.85191345]
[-38.80813980 95.13089752]
[-54.16197205 91.38452148]
[-62.29816437 77.83542633]
[-58.38966370 62.52206039]
[-44.75530624 54.52957153]
[-29.48412132 58.59975815]
[-21.63622856 72.31785583]
[-7.10216856 76.02745056]
[5.53646755 68.22998047]
[20.32891464 71.78500366]
[28.42192078 85.09443665]
[42.95598221 88.80403137]
[57.49003983 92.51362610]
[72.02410126 96.22322845]
[79.18531799 83.39549255]
[91.22547913 76.56594086]
[104.21332550 76.96254730]
[114.38619995 83.59927368]
[127.55138397 76.41053772]
[140.71656799 69.22180939]
[153.88175964 62.03306961]
[167.04693604 54.84433746]
[180.21212769 47.65560150]
[193.37730408 40.46686554]
[195.48197937 25.20657349]
[206.04536438 14.23987675]
[220.86550903 11.62703705]
[234.22254944 18.16367912]
[247.38772583 10.97494411]
[260.55291748 3.78620958]
[273.71810913 -3.40252519]
[286.88330078 -10.59125996]
[299.91806030 -18.01383591]
[312.81826782 -25.66788483]
[320.37213135 -40.22369385]
[336.76464844 -40.68937302]
[345.13262939 -26.58587074]
[336.86782837 -12.42166424]
[320.47232056 -12.76767254]
[307.57211304 -5.11362171]
[303.33096313 1.14874363]
[294.07202148 2.57392478]
[280.90682983 9.76266003]
[267.74163818 16.95139503]
[254.57646179 24.14012909]
[241.41128540 31.32886314]
[239.68890381 46.09949112]
[229.47845459 57.15439224]
[214.54168701 60.11182785]
[200.56604004 53.63205338]
[187.40086365 60.82078552]
[174.23567200 68.00952148]
[161.07049561 75.19825745]
[147.90530396 82.38699341]
[134.74011230 89.57572937]
[121.57493591 96.76445770]
[116.02188110 119.22100067]
[90.85478973 126.70730591]
[87.66631317 141.36450195]
[84.47783661 156.02171326]
[82.87440491 170.93576050]
[82.87440491 185.93576050]
[82.87440491 200.93576050]
[82.87440491 215.93576050]
[82.87440491 230.93576050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 87]
[2 86]
[3 85]
[4 84]
[5 83]
[12 82]
[13 81]
[14 80]
[15 36]
[16 35]
[17 34]
[18 33]
[21 30]
[22 29]
[40 78]
[41 77]
[42 76]
[43 75]
[44 74]
[45 73]
[46 72]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
