%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:29:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGCGGGGCGGGAGGCGGGGCCCGGCCCGUUAAGAAGAGCGUGGCCGGCCGCGGCCACCGCUGGCCCCAGGGAAAGCCGAGCGGCCACCGAGCCGGCAGAGACCCACCGAGCGGCGGCGGAGGGAGCAGCGCCGGGGCGCACGAGGGCACC\
) } def
/len { sequence length } bind def

/coor [
[48.55135345 116.18896484]
[33.75593185 118.65788269]
[18.96051407 121.12680054]
[4.16509390 123.59571838]
[-3.98373342 133.64685059]
[-16.40249825 135.37001038]
[-26.32278061 128.37911987]
[-41.16606522 130.54173279]
[-56.00934982 132.70434570]
[-70.85263062 134.86695862]
[-85.69591522 137.02957153]
[-94.05072784 146.91015625]
[-106.50245667 148.37628174]
[-116.27613831 141.18185425]
[-131.16094971 143.03724670]
[-146.02578735 145.04635620]
[-160.86907959 147.20896912]
[-173.40954590 156.85507202]
[-187.11936951 151.03355408]
[-201.96264648 153.19616699]
[-216.80593872 155.35877991]
[-231.64921570 157.52139282]
[-239.75012207 161.88017273]
[-246.82128906 159.57203674]
[-261.70608521 161.42742920]
[-276.59091187 163.28280640]
[-291.47570801 165.13819885]
[-306.34054565 167.14730835]
[-321.18383789 169.30992126]
[-336.02713013 171.47254944]
[-350.87039185 173.63516235]
[-360.11566162 186.45314026]
[-375.72985840 188.89694214]
[-388.44940186 179.51667786]
[-390.72796631 163.87751770]
[-381.21374512 151.25787354]
[-365.55136108 149.14477539]
[-353.03302002 158.79187012]
[-338.18972778 156.62925720]
[-323.34646606 154.46664429]
[-308.50317383 152.30403137]
[-302.29846191 148.20153809]
[-293.33111572 150.25338745]
[-278.44628906 148.39801025]
[-263.56149292 146.54261780]
[-248.67668152 144.68722534]
[-233.81182861 142.67811584]
[-218.96855164 140.51550293]
[-204.12527466 138.35289001]
[-189.28198242 136.19026184]
[-177.80320740 126.69886017]
[-163.03169250 132.36569214]
[-148.18840027 130.20307922]
[-141.98370361 126.10058594]
[-133.01634216 128.15243530]
[-118.13153076 126.29705048]
[-104.76630402 114.96598053]
[-87.85853577 122.18629456]
[-73.01525116 120.02367401]
[-58.17196655 117.86106110]
[-43.32868195 115.69844818]
[-28.48539734 113.53582764]
[-15.35720062 101.93096924]
[1.69617522 108.80030060]
[16.49159431 106.33138275]
[31.28701401 103.86246490]
[46.08243561 101.39354706]
[46.97773361 90.11641693]
[50.20560074 79.27408600]
[55.62402725 69.34352875]
[62.99465179 60.76162338]
[71.99322510 53.90589523]
[82.22386932 49.07794952]
[93.23653412 46.49017334]
[104.54673004 46.25641251]
[115.65690613 48.38694763]
[121.96495056 34.77780914]
[128.27297974 21.16867065]
[134.58102417 7.55953169]
[135.36277771 -1.60630143]
[141.16262817 -6.26360512]
[147.75057983 -19.73946953]
[139.66639709 -32.87908936]
[139.99221802 -48.30301285]
[148.62406921 -61.08951950]
[162.80755615 -67.15848541]
[178.01676941 -64.57331848]
[189.39852905 -54.15894699]
[193.32093811 -39.23855209]
[188.53237915 -24.57317543]
[176.56085205 -14.84249020]
[161.22644043 -13.15152073]
[154.63850403 0.32434383]
[148.19015503 13.86756897]
[141.88212585 27.47670746]
[135.57408142 41.08584595]
[129.26605225 54.69498444]
[138.39993286 62.12532806]
[145.70378113 71.36067963]
[150.82949829 81.96091461]
[153.53280640 93.42084503]
[153.68486023 105.19432068]
[151.27844238 116.72024536]
[164.75431824 123.30819702]
[178.23017883 129.89614868]
[190.70257568 126.45114136]
[201.81085205 132.26501465]
[205.82221985 143.71897888]
[219.15904236 150.58403015]
[234.97021484 150.02055359]
[242.74519348 162.72483826]
[256.08203125 169.58988953]
[269.41885376 176.45492554]
[289.44207764 174.51622009]
[299.30599976 191.10437012]
[312.91513062 197.41241455]
[326.52426147 203.72044373]
[340.13342285 210.02848816]
[353.74255371 216.33651733]
[366.25720215 207.43264771]
[381.54867554 205.99497986]
[395.50360107 212.41023254]
[404.36819458 224.95274353]
[405.75793457 240.24864197]
[399.29895020 254.18339539]
[386.72872925 263.00863647]
[371.42855835 264.35040283]
[357.51412964 257.84780884]
[348.72833252 245.24996948]
[347.43450928 229.94566345]
[333.82537842 223.63761902]
[320.21624756 217.32958984]
[306.60708618 211.02154541]
[292.99795532 204.71351624]
[283.68490601 209.10231018]
[273.28073120 207.57479858]
[265.29409790 200.40000916]
[262.55380249 189.79176331]
[249.21697998 182.92672729]
[235.88014221 176.06167603]
[221.02291870 177.11619568]
[212.29400635 163.92086792]
[198.95716858 157.05581665]
[181.52947998 158.87193298]
[171.64222717 143.37200928]
[158.16636658 136.78405762]
[144.69050598 130.19610596]
[130.58020020 144.42855835]
[112.24756622 152.52659607]
[92.22386932 153.37207031]
[73.27384949 146.84825134]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[7 62]
[8 61]
[9 60]
[10 59]
[11 58]
[14 56]
[15 55]
[16 53]
[17 52]
[19 50]
[20 49]
[21 48]
[22 47]
[24 46]
[25 45]
[26 44]
[27 43]
[28 41]
[29 40]
[30 39]
[31 38]
[76 97]
[77 96]
[78 95]
[79 94]
[81 93]
[82 92]
[103 147]
[104 146]
[105 145]
[108 143]
[109 142]
[111 140]
[112 139]
[113 138]
[115 134]
[116 133]
[117 132]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
