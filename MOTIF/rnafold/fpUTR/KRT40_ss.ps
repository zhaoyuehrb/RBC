%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUAGCAGAGAUGCGUGCAAAGUGCUCUGGGAGGAGCCACAUCUCCACAUGAGGCAGUUGAACGACGUUUCAGCUGAGUCUUGACAUCUGAAGGUCUGGUGAUAGCUGGGUGCAGGAAUAUUGUGCAGGAGGGCUAUGUGUCCUGGACCAUGAAGAAGG\
) } def
/len { sequence length } bind def

/coor [
[136.70768738 108.19951630]
[121.71050262 107.90864563]
[106.71332550 107.61777496]
[99.19239044 110.63456726]
[91.42890930 107.17304993]
[76.44019318 106.59141541]
[61.45147324 106.00978851]
[46.46275330 105.42815399]
[32.37294388 112.62452698]
[19.95525932 104.39954376]
[4.96654034 103.81791687]
[-10.02217865 103.23628235]
[-25.01089859 102.65465546]
[-39.99961853 102.07302094]
[-54.98833847 101.49139404]
[-69.98199463 101.05512238]
[-84.97917175 100.76425171]
[-99.97634888 100.47338104]
[-108.56699371 110.88536072]
[-121.40278625 114.38212585]
[-133.72108459 109.89919281]
[-141.08470154 99.29056549]
[-156.07342529 98.70893097]
[-170.16323853 105.90531158]
[-182.58091736 97.68032074]
[-197.56964111 97.09869385]
[-212.55834961 96.51705933]
[-227.55200195 96.08078766]
[-242.54919434 95.78991699]
[-257.54849243 95.64447784]
[-272.54849243 95.64447784]
[-287.54779053 95.78991699]
[-302.54495239 96.08078766]
[-317.54214478 96.37165833]
[-332.53930664 96.66252899]
[-347.53649902 96.95339966]
[-357.21246338 109.23792267]
[-372.53149414 112.37818909]
[-386.26040649 104.89146423]
[-391.91683960 90.31274414]
[-386.82995605 75.52566528]
[-373.40167236 67.51222229]
[-357.97241211 70.05612946]
[-347.82736206 81.95622253]
[-332.83020020 81.66535187]
[-317.83300781 81.37448120]
[-302.83581543 81.08361053]
[-287.83865356 80.79273987]
[-281.17926025 77.50268555]
[-272.54849243 80.64447784]
[-257.54849243 80.64447784]
[-250.82653809 77.48417664]
[-242.25831604 80.79273987]
[-227.26113892 81.08361053]
[-220.47917175 78.05425262]
[-211.97673035 81.52834320]
[-196.98800659 82.10997009]
[-181.99928284 82.69160461]
[-168.98156738 75.45362854]
[-155.49179077 83.72021484]
[-140.50306702 84.30184174]
[-128.68428040 72.36833954]
[-111.55397034 72.65687561]
[-99.68547821 85.47620392]
[-84.68830109 85.76707458]
[-69.69112396 86.05793762]
[-62.90915680 83.02858734]
[-54.40670776 86.50267029]
[-39.41798782 87.08430481]
[-24.42926788 87.66593170]
[-9.44054890 88.24756622]
[5.54817057 88.82919312]
[20.53689003 89.41082764]
[33.55460739 82.17285156]
[47.04438400 90.43943787]
[62.03310394 91.02106476]
[77.02182007 91.60269928]
[92.01054382 92.18432617]
[107.00419617 92.62059784]
[122.00137329 92.91146851]
[136.99855042 93.20233917]
[141.87731934 82.12929535]
[150.19581604 73.38985443]
[160.95265198 68.00196838]
[172.86434937 66.58217621]
[184.51853943 69.27512360]
[194.54144287 75.73920441]
[201.75971985 85.18972015]
[205.33790588 96.49404144]
[220.29280090 97.65642548]
[235.24769592 98.81880951]
[246.02131653 85.80994415]
[262.26043701 81.80788422]
[277.53900146 88.19297028]
[285.93161011 102.27494812]
[300.90621948 103.14711761]
[315.88085938 104.01929474]
[330.85546875 104.89146423]
[345.83007812 105.76364136]
[360.81246948 106.49057770]
[375.80117798 107.07220459]
[389.15570068 93.68877411]
[407.73556519 94.25525665]
[419.82873535 107.95072174]
[434.82873535 107.95072174]
[449.82873535 107.95072174]
[464.82873535 107.95072174]
[479.82873535 107.95072174]
[494.82873535 107.95072174]
[504.56185913 94.14610291]
[520.44201660 88.89766693]
[536.16943359 94.07958221]
[545.62805176 107.46884918]
[560.62524414 107.17797852]
[575.62243652 106.88710785]
[590.61962891 106.59624481]
[604.26715088 98.59278870]
[617.14202881 106.08184052]
[632.13922119 105.79096985]
[647.85815430 99.43862152]
[658.31365967 112.78472900]
[648.38348389 126.52620697]
[632.43011475 120.78814697]
[617.43292236 121.07901764]
[604.85809326 129.06166077]
[590.91046143 121.59342194]
[575.91326904 121.88429260]
[560.91613770 122.17516327]
[545.91894531 122.46603394]
[539.31329346 134.09933472]
[527.72265625 140.99409485]
[514.13037109 141.25082397]
[502.09722900 134.69496155]
[494.82873535 122.95072174]
[479.82873535 122.95072174]
[464.82873535 122.95072174]
[449.82873535 122.95072174]
[434.82873535 122.95072174]
[419.82873535 122.95072174]
[413.66424561 132.61907959]
[403.48217773 138.14845276]
[391.77581787 138.05239868]
[381.47650146 132.23857117]
[375.21954346 122.06092072]
[360.23083496 121.47929382]
[353.39138794 124.37657166]
[344.95791626 120.73825836]
[329.98330688 119.86608887]
[315.00866699 118.99391937]
[300.03405762 118.12174225]
[285.05941772 117.24957275]
[277.57217407 128.33601379]
[265.48208618 134.31184387]
[251.91078186 133.51451111]
[240.42187500 126.04588318]
[234.08529663 113.77370453]
[219.13040161 112.61132050]
[204.17550659 111.44893646]
[194.67787170 126.81810760]
[178.63987732 135.31887817]
[160.42015076 134.54425049]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[5 78]
[6 77]
[7 76]
[8 75]
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[16 66]
[17 65]
[18 64]
[22 61]
[23 60]
[25 58]
[26 57]
[27 56]
[28 54]
[29 53]
[30 51]
[31 50]
[32 48]
[33 47]
[34 46]
[35 45]
[36 44]
[89 158]
[90 157]
[91 156]
[95 151]
[96 150]
[97 149]
[98 148]
[99 147]
[100 145]
[101 144]
[104 139]
[105 138]
[106 137]
[107 136]
[108 135]
[109 134]
[113 129]
[114 128]
[115 127]
[116 126]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
