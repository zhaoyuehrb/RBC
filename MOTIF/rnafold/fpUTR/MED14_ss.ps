%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:27:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCACGGCUUCCUGUUCUGAGGCGGCCCGGCGGUAGGCGGUGGCGACUCUGCCCGCUCCCGUUUCGGCGCGGUGACCGAGCGCCCGGGAGGCUCGAGGACCGCAUCGUGUGCCGUUGCGCCAAGCCCGGUCCUGCGCCGCC\
) } def
/len { sequence length } bind def

/coor [
[71.85955048 530.87634277]
[60.99650574 519.39721680]
[61.51564026 503.60147095]
[73.10895538 492.86038208]
[73.44313812 477.86410522]
[73.77732849 462.86782837]
[74.11151123 447.87155151]
[61.58557510 443.27514648]
[51.08132935 435.01086426]
[43.64067841 423.88046265]
[40.00722504 410.97076416]
[40.55198288 397.54766846]
[45.23553085 384.93194580]
[53.61050415 374.36938477]
[64.86428833 366.90762329]
[77.89785767 363.29241943]
[78.89974976 348.32592773]
[79.90164185 333.35940552]
[77.18801880 326.41940308]
[81.09622955 318.07180786]
[82.43131256 303.13134766]
[83.76638794 288.19088745]
[84.76828003 273.22436523]
[85.43648529 258.23925781]
[86.10468292 243.25416565]
[78.94202423 230.19485474]
[87.28639984 216.75305176]
[87.95459747 201.76794434]
[88.62280273 186.78283691]
[89.29100800 171.79771423]
[89.95921326 156.81260681]
[90.62741089 141.82749939]
[91.29561615 126.84239197]
[91.96382141 111.85728455]
[85.69027710 99.36191559]
[93.05107117 87.47451019]
[93.71927643 72.48940277]
[94.38748169 57.50429535]
[95.05567932 42.51918411]
[95.72388458 27.53407669]
[96.39208984 12.54896641]
[93.63137054 3.75494146]
[97.24578857 -2.76145601]
[98.24768066 -17.72795868]
[88.50431824 -35.31438828]
[99.76744080 -50.97335052]
[100.10162354 -65.96962738]
[100.43580627 -80.96590424]
[91.20281219 -96.85476685]
[100.79647827 -111.50807190]
[100.79647827 -126.50807190]
[100.79647827 -141.50807190]
[98.09615326 -146.16413879]
[97.56254578 -150.90997314]
[98.85398102 -154.88600159]
[101.33119965 -157.50158691]
[102.33309174 -172.46809387]
[103.33497620 -187.43458557]
[104.33686829 -202.40109253]
[105.33876038 -217.36759949]
[103.18488312 -221.35014343]
[102.52950287 -225.40000916]
[103.20124817 -229.02253723]
[104.88138580 -231.83433533]
[107.15493774 -233.60273743]
[109.48494720 -248.42066956]
[111.81495667 -263.23858643]
[114.14496613 -278.05651855]
[116.47497559 -292.87445068]
[104.88167572 -303.05279541]
[100.65357208 -317.88946533]
[105.13983917 -332.65011597]
[116.90892792 -342.62469482]
[132.20536804 -344.63034058]
[146.14811707 -338.02703857]
[154.28808594 -324.92193604]
[154.02786255 -309.49676514]
[145.45045471 -296.67367554]
[131.29290771 -290.54443359]
[128.96289062 -275.72650146]
[126.63288879 -260.90856934]
[124.30287933 -246.09065247]
[121.97286224 -231.27272034]
[120.30525970 -216.36570740]
[119.30336761 -201.39920044]
[118.30148315 -186.43270874]
[117.29959106 -171.46620178]
[116.29769897 -156.49969482]
[115.79647827 -141.50807190]
[115.79647827 -126.50807190]
[115.79647827 -111.50807190]
[124.14990234 -102.68920898]
[124.22473145 -90.14043427]
[115.43208313 -80.63172150]
[115.09790039 -65.63544464]
[114.76371765 -50.63916779]
[122.52713013 -43.84455872]
[125.28461456 -33.67431259]
[121.87718201 -23.47016716]
[113.21417999 -16.72607040]
[112.21229553 -1.75956643]
[111.37719727 13.21716881]
[110.70899200 28.20227814]
[110.04078674 43.18738937]
[109.37258911 58.17249680]
[108.70438385 73.15760803]
[108.03617859 88.14271545]
[114.30972290 100.63808441]
[106.94892883 112.52548981]
[106.28072357 127.51059723]
[105.61251831 142.49571228]
[104.94432068 157.48081970]
[104.27611542 172.46592712]
[103.60791016 187.45103455]
[102.93971252 202.43614197]
[102.27150726 217.42124939]
[109.38637543 231.55239868]
[101.08979034 243.92236328]
[100.42159271 258.90747070]
[99.75338745 273.89257812]
[102.51083374 280.04541016]
[101.79412079 285.78598022]
[98.70685577 289.52597046]
[97.37178040 304.46643066]
[96.03669739 319.40689087]
[94.86814117 334.36129761]
[93.86624908 349.32781982]
[92.86436462 364.29431152]
[108.04324341 371.49649048]
[119.29274750 383.92593384]
[124.92560577 399.67678833]
[124.11288452 416.34823608]
[117.00588989 431.41043091]
[104.70891571 442.58840942]
[89.10778809 448.20574951]
[88.77360535 463.20202637]
[88.43941498 478.19830322]
[88.10523224 493.19458008]
[99.20855713 504.44143677]
[99.02352905 520.24462891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 138]
[5 137]
[6 136]
[7 135]
[16 128]
[17 127]
[18 126]
[20 125]
[21 124]
[22 123]
[23 120]
[24 119]
[25 118]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[32 111]
[33 110]
[34 109]
[36 107]
[37 106]
[38 105]
[39 104]
[40 103]
[41 102]
[43 101]
[44 100]
[46 96]
[47 95]
[48 94]
[50 91]
[51 90]
[52 89]
[56 88]
[57 87]
[58 86]
[59 85]
[60 84]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
