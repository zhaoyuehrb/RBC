%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:25:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUCCCUUAGCGGGGGCGCGCGGCGCUGAGGACCGCACGGAAACGGGGAAGUCAGGUGGCCGCUGCCGCCGCCGCCGCCGCGGUUUGUCGCCAGAAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[69.02899170 227.69168091]
[53.73312378 226.30171204]
[41.19075012 217.43693542]
[34.77570724 203.48190308]
[36.21360779 188.19046021]
[45.11766434 175.67594910]
[59.09273148 169.30467224]
[60.45021439 154.36622620]
[61.80770111 139.42778015]
[63.16518402 124.48932648]
[72.86102295 98.81336975]
[92.11163330 93.69718933]
[88.08364868 79.24813080]
[84.05567169 64.79906464]
[80.02769470 50.35000610]
[68.86879730 39.13441467]
[72.90422821 24.79689217]
[68.87625122 10.34783077]
[64.84827423 -4.10123158]
[60.82029724 -18.55029297]
[55.41592026 -26.12640381]
[56.89594269 -33.49678421]
[53.30620575 -48.06091309]
[49.71647263 -62.62504196]
[46.12673569 -77.18917084]
[42.53700256 -91.75329590]
[38.72771072 -106.26154327]
[34.69973373 -120.71060944]
[20.30970383 -126.20908356]
[12.01356888 -138.97731018]
[12.81709576 -154.00456238]
[22.20285416 -165.53909302]
[18.17487526 -179.98815918]
[12.77049732 -187.56427002]
[14.25051975 -194.93464661]
[10.66078472 -209.49877930]
[7.07104969 -224.06291199]
[3.48131466 -238.62702942]
[-7.99954271 -241.11427307]
[-17.63347435 -247.74502563]
[-23.99988556 -257.49374390]
[-26.17823219 -268.87869263]
[-23.88095474 -280.18728638]
[-17.49075317 -289.73358154]
[-7.99749088 -296.10971069]
[-10.25445843 -310.93893433]
[-23.13098145 -320.10247803]
[-25.67402267 -335.70083618]
[-16.37484169 -348.47976685]
[-0.75047845 -350.85772705]
[11.92941093 -341.42398071]
[14.14207172 -325.77532959]
[4.57477283 -313.19589233]
[6.83174038 -298.36666870]
[23.79743767 -290.94827271]
[33.10860443 -274.77334595]
[30.97007179 -256.08496094]
[18.04544258 -242.21676636]
[21.63517761 -227.65264893]
[25.22491264 -213.08851624]
[28.81464767 -198.52438354]
[32.62393951 -184.01614380]
[36.65191650 -169.56707764]
[50.65132523 -164.55165100]
[59.11313248 -152.10729980]
[58.61893845 -136.88858032]
[49.14879608 -124.73858643]
[53.17677307 -110.28952026]
[58.08663177 -104.59687042]
[57.10112762 -95.34303284]
[60.69086456 -80.77890015]
[64.28060150 -66.21477509]
[67.87033081 -51.65065002]
[71.46006775 -37.08652115]
[75.26936340 -22.57827187]
[79.29734039 -8.12920952]
[83.32531738 6.31985283]
[87.35329437 20.76891518]
[98.22409058 30.95101166]
[94.47676086 46.32202530]
[98.50473785 60.77108765]
[102.53271484 75.22015381]
[106.56069183 89.66921234]
[114.89424896 102.14125824]
[126.70199585 111.39204407]
[138.50975037 120.64282227]
[154.54505920 120.14421844]
[164.82250977 132.46304321]
[161.45811462 148.14936829]
[147.03277588 155.16996765]
[132.61235046 148.13925171]
[129.25897217 132.45057678]
[117.45121765 123.19979095]
[105.64346313 113.94901276]
[98.75850677 116.92346191]
[84.98858643 122.87236023]
[78.10363007 125.84680939]
[76.74614716 140.78526306]
[75.38866425 155.72370911]
[74.03118134 170.66215515]
[86.62888336 179.44813538]
[93.13128662 193.36267090]
[91.78927612 208.66282654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 100]
[8 99]
[9 98]
[10 97]
[12 83]
[13 82]
[14 81]
[15 80]
[17 78]
[18 77]
[19 76]
[20 75]
[22 74]
[23 73]
[24 72]
[25 71]
[26 70]
[27 68]
[28 67]
[32 63]
[33 62]
[35 61]
[36 60]
[37 59]
[38 58]
[45 54]
[46 53]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
