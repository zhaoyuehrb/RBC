%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAGUUCCUGAGAGAAGAACCCUGAGGAACAGACGUUCCCUCGCGGCCCUGGCACCUCCAACCCCAGAU\
) } def
/len { sequence length } bind def

/coor [
[84.06117249 139.33871460]
[72.45979309 132.29731750]
[63.67380905 121.95422363]
[58.60140610 109.36677551]
[43.61650848 110.03974152]
[28.63161278 110.71271515]
[13.64671707 111.38568878]
[-1.33817923 112.05866241]
[-16.32307434 112.73163605]
[-29.76221848 121.08028412]
[-42.82380676 113.92178345]
[-57.80870438 114.59475708]
[-65.46961212 127.98557281]
[-79.16454315 135.08857727]
[-94.52348328 133.63720703]
[-106.64545441 124.09459686]
[-111.66238403 109.50576782]
[-107.97338867 94.52595520]
[-96.75559998 83.93515778]
[-81.58859253 81.11286926]
[-67.31208801 86.95967102]
[-58.48167801 99.60986328]
[-43.49678040 98.93688965]
[-31.12945747 90.63637543]
[-16.99604797 97.74674225]
[-2.01115179 97.07376862]
[12.97374439 96.40079498]
[27.95864105 95.72782135]
[42.94353485 95.05484772]
[57.92843246 94.38187408]
[63.78874969 77.85670471]
[75.82821655 65.11009979]
[91.99239349 58.31716919]
[109.52301025 58.63706589]
[115.41838074 44.84414673]
[121.31375885 31.05123138]
[115.19804382 16.47818756]
[121.25553131 1.88084531]
[135.89242554 -4.08045053]
[150.42489624 2.13103056]
[156.23110962 16.83012772]
[149.86633301 31.29612541]
[135.10667419 36.94660568]
[129.21130371 50.73952484]
[123.31592560 64.53244019]
[133.45504761 73.87836456]
[140.06315613 85.98130035]
[142.44277954 99.56383514]
[140.34278870 113.19241333]
[153.55171204 120.30044556]
[166.76065063 127.40847778]
[179.96958923 134.51651001]
[192.61933899 125.90011597]
[207.82571411 124.16084290]
[222.09436035 129.69834900]
[232.14648438 141.24017334]
[235.67214966 156.13406372]
[231.86120605 170.95753479]
[221.58937073 182.30426025]
[207.21704102 187.56683350]
[192.04687500 185.53596497]
[179.56484985 176.67831421]
[172.63926697 163.02932739]
[172.86155701 147.72543335]
[159.65261841 140.61740112]
[146.44369507 133.50938416]
[133.23475647 126.40134430]
[123.20318604 135.54141235]
[110.79959106 141.04812622]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 30]
[5 29]
[6 28]
[7 27]
[8 26]
[9 25]
[11 23]
[12 22]
[34 45]
[35 44]
[36 43]
[49 67]
[50 66]
[51 65]
[52 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
