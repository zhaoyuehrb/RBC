%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:49:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGACCAAGAGCGGAAGUGGGUGUGACGGGGACGGGGGCCCGGUGGGCCCGCGGAGGAAAGAUACUGGGGAGUGGGAGCCGCGGGGUUCAGAGCG\
) } def
/len { sequence length } bind def

/coor [
[106.01001740 305.50192261]
[117.00563812 294.55313110]
[114.56220245 279.75347900]
[112.11877441 264.95382690]
[109.67533875 250.15419006]
[107.23191071 235.35453796]
[96.54231262 230.75900269]
[89.39656067 221.42318726]
[87.71779633 209.66461182]
[92.05306244 198.47624207]
[101.40324402 190.76458740]
[99.93298340 175.83680725]
[98.46273041 160.90904236]
[96.99246979 145.98127747]
[78.06059265 140.52140808]
[63.14009094 127.65265656]
[54.95901871 109.72792053]
[55.01319504 90.02453613]
[63.29271317 72.14505768]
[78.28376007 59.35855103]
[73.46216583 45.15460205]
[68.64057159 30.95064735]
[63.81898117 16.74669647]
[58.99738693 2.54274440]
[43.88334656 2.69506669]
[29.48172951 -1.82554102]
[17.19916153 -10.56435585]
[8.23121738 -22.65530396]
[3.44605041 -36.90678787]
[3.30035639 -51.91910553]
[7.79582024 -66.22193909]
[16.48018265 -78.41832733]
[28.49270630 -87.32115173]
[23.67111397 -101.52510071]
[11.90851212 -112.10582733]
[15.14414692 -126.64473724]
[10.32255554 -140.84869385]
[5.50096321 -155.05264282]
[0.67937136 -169.25659180]
[-4.14222050 -183.46054077]
[-8.96381283 -197.66450500]
[-19.78059578 -210.71951294]
[-10.23015499 -224.72756958]
[5.87427807 -219.42817688]
[5.24013948 -202.48608398]
[10.06173134 -188.28213501]
[14.88332367 -174.07818604]
[19.70491600 -159.87423706]
[24.52650642 -145.67028809]
[29.34809875 -131.46632385]
[40.76583099 -121.90156555]
[37.87506485 -106.34669495]
[42.69665909 -92.14274597]
[57.64653015 -92.39241791]
[71.96099091 -88.00307465]
[84.23448944 -79.39253998]
[93.25782776 -67.39377594]
[98.13725281 -53.17428970]
[98.38300323 -38.12255859]
[93.95844269 -23.71243668]
[85.28484344 -11.35884762]
[73.20133972 -2.27884769]
[78.02293396 11.92510414]
[82.84452820 26.12905693]
[87.66611481 40.33300781]
[92.48770905 54.53696060]
[103.23994446 54.03451920]
[113.81538391 56.04027176]
[123.63696289 60.44476700]
[132.16874695 67.00766754]
[138.94519043 75.37085724]
[143.59651184 85.07797241]
[145.86891174 95.59934235]
[145.63838196 106.36084747]
[142.91752625 116.77525330]
[137.85478210 126.27429199]
[130.72642517 134.33961487]
[121.92142487 140.53114319]
[111.92024231 144.51101685]
[113.39049530 159.43878174]
[114.86075592 174.36656189]
[116.33101654 189.29432678]
[131.37619019 200.55070496]
[133.58125305 218.89462280]
[122.03155518 232.91110229]
[124.47499084 247.71075439]
[126.91841888 262.51040649]
[129.36184692 277.31005859]
[131.80528259 292.10971069]
[145.73674011 298.94302368]
[152.96122742 312.67568970]
[150.70077515 328.02725220]
[139.82456970 339.09466553]
[124.51475525 341.62234497]
[110.65824890 334.63830566]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 89]
[3 88]
[4 87]
[5 86]
[6 85]
[11 82]
[12 81]
[13 80]
[14 79]
[20 66]
[21 65]
[22 64]
[23 63]
[24 62]
[33 53]
[34 52]
[36 50]
[37 49]
[38 48]
[39 47]
[40 46]
[41 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
