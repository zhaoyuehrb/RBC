%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCCAUUAGCCGCACAAAUUCGCAGCAGGCGGCUGGGGCGGCGGCUGGGGCAGCGGCUGCAGCAGCGGCGGACGCUCUGCAUUACCCAGUCUUGCGUCCUCGGCAGGCGCCCGAAGCUGAGUGCGCAUCCUCUACCGCACCCAAGCUUCGUCUGUCUCGUCAAGCUCUUCAUGCUGCCCAACUAAAAGGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[8.91643906 356.23931885]
[7.64776802 341.29309082]
[10.77868271 326.62173462]
[1.09620821 338.07815552]
[-8.58626652 349.53457642]
[-18.26873970 360.99102783]
[-19.81800079 367.43759155]
[-23.79796410 371.51467896]
[-28.44726372 372.65197754]
[-38.49014664 383.79382324]
[-48.53303146 394.93566895]
[-58.57591248 406.07748413]
[-68.61879730 417.21932983]
[-78.66168213 428.36117554]
[-88.70455933 439.50299072]
[-81.83671570 453.03802490]
[-80.32595062 468.14041138]
[-84.37657928 482.76770020]
[-93.44079590 494.94161987]
[-106.29273987 503.01577759]
[-121.19428253 505.89819336]
[-136.13012695 503.19909668]
[-149.08029175 495.28344727]
[-158.29341125 483.22183228]
[-162.52346802 468.64544678]
[-161.19839478 453.52563477]
[-154.49737549 439.90722656]
[-143.32667542 429.63201904]
[-129.19705200 424.08963013]
[-114.01940155 424.02963257]
[-99.84639740 429.46011353]
[-89.80351257 418.31829834]
[-79.76063538 407.17645264]
[-69.71775055 396.03460693]
[-59.67486572 384.89279175]
[-49.63198090 373.75094604]
[-39.58909988 362.60910034]
[-29.72516632 351.30853271]
[-20.04269218 339.85211182]
[-10.36021709 328.39569092]
[-0.67774320 316.93927002]
[7.16483355 304.15280151]
[12.98785686 290.32916260]
[18.81087875 276.50555420]
[24.63390160 262.68194580]
[30.45692635 248.85832214]
[36.27994919 235.03469849]
[41.99256516 221.16508484]
[47.59440613 207.25038147]
[53.19625092 193.33566284]
[58.79809570 179.42094421]
[64.39994049 165.50622559]
[63.98110580 158.11871338]
[70.20365143 151.41543579]
[76.02667999 137.59182739]
[81.84970093 123.76820374]
[68.66837311 111.55442810]
[63.94321060 92.23881531]
[50.68280792 85.22726440]
[37.42240906 78.21572113]
[24.16200829 71.20417023]
[10.90160942 64.19262695]
[-5.45713472 65.34307861]
[-14.40731716 51.60166931]
[-6.74175739 37.10438538]
[9.65387344 36.76478958]
[17.91315651 50.93222809]
[31.17355537 57.94377518]
[44.43395615 64.95532227]
[57.69435501 71.96686554]
[70.95475769 78.97841644]
[82.09658813 68.93553162]
[76.49475098 55.02081299]
[70.89290619 41.10609818]
[65.29106140 27.19138145]
[59.68921280 13.27666473]
[54.08737183 -0.63805217]
[39.17734909 -4.51071262]
[29.51951218 -16.28269577]
[28.65554428 -31.30659485]
[36.70754242 -43.80872726]
[31.10569572 -57.72344589]
[16.02203941 -61.36526871]
[5.98536634 -73.19932556]
[4.85498524 -88.67517090]
[13.06554985 -101.84203339]
[27.45993042 -107.63698578]
[42.50319290 -103.83174133]
[52.41089630 -91.88950348]
[53.37332916 -76.40230560]
[45.02041245 -63.32528687]
[50.62225723 -49.41057205]
[65.09061432 -45.97477722]
[74.87727356 -34.54301071]
[76.06986237 -19.36305237]
[68.00209045 -6.23989630]
[73.60392761 7.67482042]
[79.20577240 21.58953667]
[84.80761719 35.50425339]
[90.40946198 49.41897202]
[96.01130676 63.33368683]
[107.38496399 66.24127960]
[116.54609680 72.33968353]
[122.71865845 80.55203247]
[136.19590759 73.96691132]
[149.67314148 67.38179016]
[163.09745789 60.68941498]
[176.46798706 53.89021683]
[189.83850098 47.09101868]
[203.20903015 40.29182053]
[216.57955933 33.49262238]
[221.56498718 18.73513985]
[235.22145081 12.03025436]
[249.25973511 16.87404823]
[262.63024902 10.07484913]
[276.00079346 3.27565026]
[289.37130737 -3.52354836]
[302.74182129 -10.32274723]
[316.11236572 -17.12194633]
[329.42822266 -24.02753830]
[342.68862915 -31.03908539]
[351.27166748 -44.32976913]
[366.13961792 -43.43898010]
[379.39999390 -50.45052719]
[392.66040039 -57.46207428]
[405.92080688 -64.47361755]
[419.18121338 -71.48516846]
[419.67239380 -86.83620453]
[427.78692627 -99.87652588]
[441.34201050 -107.09835815]
[456.69143677 -106.55905914]
[469.70626831 -98.40370178]
[476.88555908 -84.82602692]
[476.29815674 -69.47837067]
[468.10205078 -56.48917389]
[454.50192261 -49.35246277]
[439.15618896 -49.98797607]
[426.19274902 -58.22476578]
[412.93234253 -51.21321869]
[399.67196655 -44.20167542]
[386.41156006 -37.19012833]
[373.15115356 -30.17857933]
[365.51660156 -17.38940811]
[349.70019531 -17.77868462]
[336.43978882 -10.76713753]
[331.99105835 -4.85448647]
[322.91156006 -3.75142193]
[309.54101562 3.04777670]
[296.17050171 9.84697533]
[282.79998779 16.64617348]
[269.42944336 23.44537163]
[256.05892944 30.24457169]
[251.70350647 44.44195938]
[238.24075317 51.52778244]
[223.37875366 46.86314392]
[210.00822449 53.66234207]
[196.63771057 60.46154022]
[183.26718140 67.26074219]
[169.89665222 74.05993652]
[165.35420227 79.90089417]
[156.25827026 80.85903168]
[142.78102112 87.44415283]
[129.30377197 94.02927399]
[127.08288574 112.68376923]
[114.17486572 126.33313751]
[95.67331696 129.59123230]
[89.85029602 143.41484070]
[84.02727509 157.23846436]
[78.31465912 171.10806274]
[72.71281433 185.02278137]
[67.11096954 198.93750000]
[61.50912476 212.85221863]
[55.90727997 226.76693726]
[55.60379410 235.90815735]
[50.10356522 240.85772705]
[44.28054428 254.68133545]
[38.45751953 268.50494385]
[32.63449860 282.32858276]
[26.81147385 296.15219116]
[20.98845100 309.97579956]
[32.64536285 300.53567505]
[46.54285049 294.89120483]
[61.48094559 293.52981567]
[76.16981506 296.56906128]
[89.34117126 303.74649048]
[99.85771942 314.44238281]
[106.81142426 327.73321533]
[109.60186768 342.47137451]
[107.98811340 357.38430786]
[102.10948944 371.18438721]
[92.47360229 382.68002319]
[79.91243744 390.87863159]
[65.51059723 395.07229614]
[50.51159668 394.89895630]
[36.21052551 390.37356567]
[23.84219742 381.88684082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 41]
[4 40]
[5 39]
[6 38]
[9 37]
[10 36]
[11 35]
[12 34]
[13 33]
[14 32]
[15 31]
[42 180]
[43 179]
[44 178]
[45 177]
[46 176]
[47 175]
[48 173]
[49 172]
[50 171]
[51 170]
[52 169]
[54 168]
[55 167]
[56 166]
[58 71]
[59 70]
[60 69]
[61 68]
[62 67]
[72 101]
[73 100]
[74 99]
[75 98]
[76 97]
[77 96]
[81 92]
[82 91]
[104 163]
[105 162]
[106 161]
[107 159]
[108 158]
[109 157]
[110 156]
[111 155]
[114 152]
[115 151]
[116 150]
[117 149]
[118 148]
[119 147]
[120 145]
[121 144]
[123 142]
[124 141]
[125 140]
[126 139]
[127 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
