%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUUGCUCGCGCGUGCGCACCAGAAGCCAGCAGUGGGGUUGCACACGCGCCUCUUCACGAGGUGGAAACAAG\
) } def
/len { sequence length } bind def

/coor [
[150.05072021 258.63949585]
[143.72399902 252.86463928]
[138.64495850 245.95758057]
[135.01223755 238.18354797]
[132.96888733 229.84178162]
[132.59672546 221.25399780]
[133.91305542 212.75198364]
[136.86990356 204.66479492]
[141.35569763 197.30599976]
[147.19956970 190.96156311]
[139.33496094 178.18862915]
[131.47035217 165.41569519]
[123.60574341 152.64274597]
[115.74113464 139.86981201]
[107.87652588 127.09687805]
[100.01191711 114.32393646]
[87.80274200 107.51014709]
[87.21514893 93.54067230]
[79.35054016 80.76773071]
[71.48593140 67.99479675]
[63.35198212 55.39166641]
[54.95235825 42.96401978]
[50.71457291 41.31074905]
[47.51572800 38.66908646]
[45.53730011 35.47871399]
[44.80177307 32.19295502]
[45.18187714 29.22645950]
[46.42584229 26.90971184]
[40.83299637 12.99137592]
[35.24015045 -0.92695940]
[22.00961494 -10.61638546]
[24.05438232 -26.88755608]
[39.27097321 -33.00208282]
[52.00585938 -22.66986847]
[49.15848541 -6.51980639]
[54.75133133 7.39852905]
[60.34417725 21.31686401]
[67.38000488 34.56439972]
[75.77962494 46.99204254]
[82.33016205 50.88509369]
[84.25886536 60.13018417]
[92.12347412 72.90312195]
[99.98808289 85.67606354]
[112.19725800 92.48985291]
[112.78485107 106.45932770]
[120.64945984 119.23226929]
[128.51406860 132.00520325]
[136.37867737 144.77813721]
[144.24328613 157.55108643]
[152.10789490 170.32402039]
[159.97250366 183.09695435]
[184.12261963 180.83619690]
[205.69471741 191.72918701]
[218.11991882 212.35241699]
[217.67134094 236.33592224]
[231.06523132 243.08897400]
[244.45912170 249.84202576]
[257.85299683 256.59509277]
[271.24688721 263.34814453]
[288.11215210 265.08004761]
[291.11669922 281.76565552]
[275.91491699 289.27178955]
[264.49383545 276.74203491]
[251.09994507 269.98898315]
[237.70605469 263.23593140]
[224.31216431 256.48284912]
[210.91828918 249.72981262]
[205.21217346 256.03829956]
[198.37611389 261.11294556]
[190.67259216 264.75527954]
[182.39810181 266.82189941]
[173.87171936 267.23004150]
[165.42289734 265.96105957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[18 43]
[19 42]
[20 41]
[21 39]
[22 38]
[28 37]
[29 36]
[30 35]
[55 67]
[56 66]
[57 65]
[58 64]
[59 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
