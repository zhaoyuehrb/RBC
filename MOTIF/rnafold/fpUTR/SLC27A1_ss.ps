%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:01:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCUCGCUGUAGAGGCGGGGGCGGUCGUGGGGCGGAGCGGGUCGUGGGGCGGGGCUGGAGCGGCCCGCGGCCUCAGCUCUCUCUGCUUCCCCAGG\
) } def
/len { sequence length } bind def

/coor [
[47.05755615 211.23963928]
[44.54677200 211.39352417]
[35.19442368 223.12098694]
[32.63942337 238.73452759]
[18.65483475 243.86097717]
[9.30248737 255.58845520]
[-0.04985978 267.31591797]
[1.96849358 282.99081421]
[-7.75413036 295.45059204]
[-23.44947243 297.30310059]
[-35.80576324 287.44927979]
[-37.49223328 271.73522949]
[-27.50833321 259.48382568]
[-11.77733231 257.96359253]
[-2.42498493 246.23611450]
[6.92736197 234.50863647]
[8.81342125 219.73393250]
[23.46695328 213.76864624]
[32.81930161 202.04116821]
[41.20276260 189.60263062]
[48.56352615 176.53283691]
[55.92428970 163.46305847]
[63.28505325 150.39328003]
[62.78889465 135.50694275]
[76.30253601 127.27942657]
[83.66329956 114.20964050]
[91.02406311 101.13986206]
[90.44483185 97.11216736]
[91.74532318 92.85718536]
[94.97760010 89.26693726]
[99.77174377 87.21800995]
[108.35349274 74.91542816]
[116.93524170 62.61284637]
[125.51699066 50.31026077]
[127.92881012 41.30052185]
[134.57620239 37.75689697]
[143.54785156 25.73569298]
[152.51951599 13.71448803]
[161.49118042 1.69328380]
[170.46282959 -10.32792091]
[179.04458618 -22.63050461]
[187.22760010 -35.20182419]
[195.41062927 -47.77314758]
[203.59365845 -60.34447098]
[211.77667236 -72.91579437]
[219.95970154 -85.48711395]
[228.14273071 -98.05843353]
[236.32574463 -110.62975311]
[244.50877380 -123.20108032]
[252.69178772 -135.77239990]
[253.73573303 -151.55912781]
[267.16345215 -158.00473022]
[275.34646606 -170.57604980]
[268.92596436 -184.60391235]
[271.13134766 -199.87283325]
[281.25888062 -211.51054382]
[296.07690430 -215.80352783]
[310.85705566 -211.38188171]
[320.88302612 -199.65653992]
[322.95556641 -184.36901855]
[316.41333008 -170.39752197]
[303.34393311 -162.20028687]
[287.91778564 -162.39303589]
[279.73477173 -149.82171631]
[279.27612305 -134.93417358]
[265.26312256 -127.58937836]
[257.08007812 -115.01805115]
[248.89706421 -102.44673157]
[240.71405029 -89.87541199]
[232.53102112 -77.30409241]
[224.34799194 -64.73276520]
[216.16497803 -52.16144562]
[207.98194885 -39.59012222]
[199.79893494 -27.01880264]
[191.61590576 -14.44748116]
[191.76246643 -9.50126457]
[188.67150879 -4.45009756]
[182.48403931 -1.35626256]
[173.51237488 10.66494179]
[164.54072571 22.68614578]
[155.56906128 34.70735168]
[146.59741211 46.72855377]
[137.81958008 58.89200974]
[129.23782349 71.19459534]
[120.65607452 83.49717712]
[112.07432556 95.79975891]
[104.09384155 108.50062561]
[96.73307800 121.57040405]
[89.37231445 134.64018250]
[89.34198761 150.46136475]
[76.35483551 157.75404358]
[68.99407196 170.82382202]
[61.63330841 183.89360046]
[54.27254486 196.96339417]
[54.62385178 201.17646790]
[53.79031754 204.95655823]
[52.02980804 208.00369263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[5 16]
[6 15]
[7 14]
[20 94]
[21 93]
[22 92]
[23 91]
[25 89]
[26 88]
[27 87]
[31 86]
[32 85]
[33 84]
[34 83]
[36 82]
[37 81]
[38 80]
[39 79]
[40 78]
[41 75]
[42 74]
[43 73]
[44 72]
[45 71]
[46 70]
[47 69]
[48 68]
[49 67]
[50 66]
[52 64]
[53 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
