%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:23:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUAAAAAGCCACAGAUCUCUGGCGGCGGCAAGGGGACAGCACUGAGCUCUGCCGCCUGGCUCUAGCCGCCUGCCUGGCCCCCGCCGGGACUCUUGCCCACCCUCAGCC\
) } def
/len { sequence length } bind def

/coor [
[-13.40586281 249.87408447]
[-3.93069100 261.50253296]
[-0.77634734 276.16714478]
[-4.63217449 290.66308594]
[-14.65552998 301.82247925]
[-28.65593338 307.20660400]
[-43.57377625 305.63879395]
[-56.14894485 297.46166992]
[-63.63329697 284.46228027]
[-64.39122009 269.48144531]
[-58.25779724 255.79397583]
[-71.77233124 262.30221558]
[-85.28686523 268.81048584]
[-95.21614838 284.23873901]
[-112.60805511 282.41427612]
[-125.93474579 289.29901123]
[-139.26142883 296.18371582]
[-147.65548706 310.27172852]
[-164.04713440 309.77572632]
[-171.57405090 295.20599365]
[-162.49317932 281.55059814]
[-146.14614868 282.85705566]
[-132.81947327 275.97232056]
[-119.49278259 269.08758545]
[-115.46826935 257.58483887]
[-104.30052948 251.77362061]
[-91.79512024 255.29594421]
[-78.28058624 248.78768921]
[-64.76605225 242.27943420]
[-52.41210938 233.77178955]
[-41.51220322 223.46682739]
[-30.61229897 213.16188049]
[-30.45257568 198.31230164]
[-19.54532051 187.70632935]
[-3.97079635 187.97454834]
[6.92910862 177.66960144]
[17.82901382 167.36463928]
[28.72891808 157.05969238]
[26.63224411 142.33753967]
[33.69010544 129.04653931]
[47.38092041 122.38208008]
[62.54608154 125.08837128]
[73.44598389 114.78342438]
[84.34589386 104.47846985]
[85.40145111 92.78958130]
[94.04210663 84.84706879]
[105.77835846 84.77770233]
[116.96298981 74.78250122]
[128.14761353 64.78730774]
[139.19097900 54.63623047]
[150.09088135 44.33127594]
[160.99078369 34.02632141]
[165.70332336 18.92325592]
[180.26722717 15.80204868]
[191.16712952 5.49709511]
[195.77673340 -15.33114052]
[215.84580994 -19.78942490]
[225.84100342 -30.97405815]
[235.83621216 -42.15869141]
[239.26264954 -57.60440445]
[253.51268005 -61.93867111]
[263.50787354 -73.12330627]
[273.50308228 -84.30793762]
[268.07778931 -98.61963654]
[269.93643188 -113.81187439]
[278.65188599 -126.39358521]
[292.22143555 -133.47357178]
[307.52685547 -133.42491150]
[321.05111694 -126.25879669]
[329.68640137 -113.62194061]
[331.44842529 -98.41819000]
[325.93225098 -84.14127350]
[314.40548706 -74.07190704]
[299.51687622 -70.52396393]
[284.68771362 -74.31273651]
[274.69250488 -63.12810516]
[264.69732666 -51.94347382]
[261.98580933 -37.29776001]
[247.02084351 -32.16349030]
[237.02563477 -20.97885895]
[227.03044128 -9.79422665]
[229.00343323 -0.88090724]
[226.53482056 8.05238056]
[220.07424927 14.89013100]
[211.03189087 17.95033836]
[201.47209167 16.39699936]
[190.57217407 26.70195389]
[186.63928223 41.06793976]
[171.29574585 44.92622757]
[160.39582825 55.23118210]
[149.49592590 65.53613281]
[146.75822449 72.51812744]
[138.14282227 75.97193909]
[126.95818329 85.96713257]
[115.77355194 95.96233368]
[111.01873779 111.98728943]
[94.65084839 115.37837219]
[83.75093842 125.68332672]
[72.85103607 135.98828125]
[74.70275879 151.28132629]
[67.28113556 164.57691956]
[53.61530685 170.87844849]
[39.03387070 167.95959473]
[28.13396645 178.26455688]
[17.23406219 188.56950378]
[6.33415747 198.87446594]
[5.72868204 214.43951416]
[-5.47216940 224.73493958]
[-20.30734634 224.06178284]
[-31.20725060 234.36674500]
[-42.10715485 244.67169189]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 29]
[12 28]
[13 27]
[15 24]
[16 23]
[17 22]
[30 111]
[31 110]
[32 109]
[35 106]
[36 105]
[37 104]
[38 103]
[42 99]
[43 98]
[44 97]
[47 95]
[48 94]
[49 93]
[50 91]
[51 90]
[52 89]
[54 87]
[55 86]
[57 81]
[58 80]
[59 79]
[61 77]
[62 76]
[63 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
