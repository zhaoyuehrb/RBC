%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:07:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGGGCCGGCGCCCUGGUGCUGCCGCAGUGCCUCCCGCCCCGUCCCGGCCUCGCGCACCUGCUCAGGCC\
) } def
/len { sequence length } bind def

/coor [
[135.29367065 145.72674561]
[132.12388611 144.52584839]
[129.22972107 142.09191895]
[127.06570435 138.51428223]
[126.04875946 134.04185486]
[114.98959351 123.90799713]
[103.93043518 113.77414703]
[90.32288361 110.56072235]
[85.93570709 97.28501892]
[74.87654877 87.15116119]
[63.81739044 77.01731110]
[48.41559219 73.39858246]
[44.25930786 59.09562683]
[33.20014572 48.96177292]
[16.83453560 52.58900070]
[1.63494384 45.91930771]
[-6.61166763 31.70374298]
[-4.89094210 15.52479935]
[-16.38160896 5.88298559]
[-27.87227440 -3.75882864]
[-39.36294174 -13.40064335]
[-50.85360718 -23.04245758]
[-62.34427643 -32.68427277]
[-73.83494568 -42.32608414]
[-89.85493469 -47.87551880]
[-88.95714569 -64.80567932]
[-72.44009399 -68.62971497]
[-64.19313049 -53.81675339]
[-52.70246124 -44.17493820]
[-41.21179581 -34.53312302]
[-29.72112846 -24.89130974]
[-18.23046112 -15.24949551]
[-6.73979473 -5.60768127]
[4.75087214 4.03413296]
[17.52419281 -0.40642756]
[30.91600037 2.14377451]
[41.32891846 11.11075306]
[45.91048050 24.18211174]
[43.33399963 37.90261459]
[54.39315796 48.03646851]
[69.00393677 50.93035126]
[73.95124054 65.95815277]
[85.01040649 76.09200287]
[96.06956482 86.22585297]
[109.67711639 89.43927765]
[114.06429291 102.71498108]
[125.12345123 112.84883881]
[136.18261719 122.98268890]
[148.27928162 131.85234070]
[161.26965332 139.35234070]
[174.26004028 146.85234070]
[187.25042725 154.35234070]
[200.24079895 161.85234070]
[218.49896240 161.29533386]
[226.92190552 176.53555298]
[240.22706604 183.46177673]
[255.22262573 178.47090149]
[269.31756592 185.61988831]
[274.14962769 200.66737366]
[266.85202026 214.68594360]
[251.75428772 219.35864258]
[237.81364441 211.91322327]
[233.30084229 196.76693726]
[219.99566650 189.84071350]
[208.16491699 193.17797852]
[196.93261719 187.25666809]
[192.74079895 174.84271240]
[179.75042725 167.34271240]
[166.76004028 159.84271240]
[153.76965332 152.34271240]
[140.77928162 144.84271240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[13 40]
[14 39]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[24 28]
[49 71]
[50 70]
[51 69]
[52 68]
[53 67]
[55 64]
[56 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
