%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGUCAAGGCCGUUCCUUCAGUGUUUUCAGACGCCCUGGGAACGCGGCUGCAGGGUCCGGUCUUCGGUUUGCACAGCUAGAGGCCGCGCAGCAGCAAAGG\
) } def
/len { sequence length } bind def

/coor [
[115.05426788 181.28952026]
[100.11956024 182.68754578]
[85.73390198 178.43867493]
[73.95532227 169.15078735]
[66.46887970 156.15257263]
[64.34559631 141.30361938]
[67.88922882 126.72820282]
[76.59282684 114.51152039]
[89.21287537 106.40062714]
[74.30168152 104.77084351]
[65.24974823 106.97428894]
[58.95468521 102.85146332]
[44.10138702 100.75873566]
[29.24808693 98.66600800]
[14.39478874 96.57327271]
[-0.45850965 94.48054504]
[-15.31180859 92.38781738]
[-26.11081505 103.37360382]
[-41.13234711 105.86499023]
[-54.58145523 99.11328888]
[-61.39445114 85.89508057]
[-76.24774933 83.80234528]
[-91.10105133 81.70961761]
[-105.95434570 79.61688995]
[-120.80764771 77.52416229]
[-135.80400085 84.16054535]
[-148.88810730 74.27429199]
[-146.60017395 58.03553009]
[-131.29382324 52.14930344]
[-118.71492004 62.67086029]
[-103.86161804 64.76358795]
[-89.00831604 66.85632324]
[-74.15502167 68.94905090]
[-59.30172348 71.04177856]
[-49.10173416 60.22058487]
[-34.31068039 57.44773483]
[-20.56229782 63.99260712]
[-13.21907806 77.53451538]
[1.63422048 79.62724304]
[16.48751831 81.71997833]
[31.34081841 83.81270599]
[46.19411469 85.90543365]
[61.04741669 87.99816895]
[75.93146515 89.85964966]
[90.84265900 91.48943329]
[98.77585602 87.61621857]
[107.24676514 89.95423126]
[121.59663391 85.58600616]
[135.94650269 81.21778870]
[150.29637146 76.84956360]
[164.64622498 72.48134613]
[169.31143188 62.40951157]
[178.61367798 56.77046585]
[189.25804138 57.27239609]
[197.63217163 63.49736786]
[212.22584534 60.02972031]
[223.86351013 49.31173706]
[238.03471375 53.89720535]
[252.62838745 50.42955780]
[267.22207642 46.96191406]
[281.81573486 43.49427032]
[296.40942383 40.02662659]
[311.00311279 36.55897903]
[325.59677124 33.09133530]
[337.23443604 22.37335014]
[351.40563965 26.95881844]
[365.99932861 23.49117279]
[380.59298706 20.02352905]
[395.18667603 16.55588341]
[404.79141235 3.70563984]
[420.83044434 3.34695935]
[431.00003052 15.75499058]
[427.49890137 31.41135406]
[413.01284790 38.30582809]
[398.65432739 31.14956093]
[384.06063843 34.61720657]
[369.46697998 38.08485031]
[354.87329102 41.55249786]
[344.27944946 52.02245331]
[329.06442261 47.68501282]
[314.47073364 51.15265656]
[299.87707520 54.62030411]
[285.28338623 58.08794785]
[270.68972778 61.55559158]
[256.09603882 65.02323914]
[241.50234985 68.49088287]
[230.90852356 78.96083832]
[215.69349670 74.62339783]
[201.09980774 78.09104156]
[188.26210022 92.40907288]
[169.01445007 86.83120728]
[154.66458130 91.19943237]
[140.31472778 95.56764984]
[125.96485138 99.93587494]
[111.61499023 104.30409241]
[125.51936340 109.93154907]
[136.33906555 120.32068634]
[142.52621460 133.98521423]
[143.19566345 148.97026062]
[138.25164795 163.13206482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 45]
[10 44]
[12 43]
[13 42]
[14 41]
[15 40]
[16 39]
[17 38]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[55 89]
[56 88]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[64 80]
[66 78]
[67 77]
[68 76]
[69 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
