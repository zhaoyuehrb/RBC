%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGAGGGCCUCCAGGGGGCGGGUCGGACUGCCGCGGGCCGGGGAGCGCUCUGGGUGGCCAGCUGUGGGCCCGGGCCGUCGUGGGCUCCGGCUUGCGUGCGGAG\
) } def
/len { sequence length } bind def

/coor [
[138.31797791 192.95983887]
[125.27577209 185.55033875]
[116.93856812 173.08073425]
[115.07538605 158.19689941]
[120.08158112 144.05694580]
[130.89489746 133.66117859]
[145.22073364 129.21542358]
[131.61035156 122.91005707]
[117.99997711 116.60469818]
[104.38959503 110.29933929]
[90.68640900 104.19829559]
[76.89349365 98.30291748]
[63.10057831 92.40753937]
[49.30766296 86.51216888]
[35.51474380 80.61679077]
[21.72182846 74.72141266]
[7.92891216 68.82604218]
[-7.80168200 70.51689148]
[-16.46380997 58.40008926]
[-30.25672531 52.50471497]
[-43.54785538 60.29265976]
[-58.69914246 58.77874756]
[-69.92100525 48.75209427]
[-73.04951477 34.21419907]
[-86.84243011 28.31882286]
[-100.63534546 22.42344856]
[-114.42826080 16.52807236]
[-130.15885925 18.21892166]
[-138.82098389 6.10212278]
[-152.61390686 0.20674732]
[-166.40681458 -5.68862820]
[-183.34770203 -6.35402632]
[-187.39801025 -22.81705475]
[-172.69960022 -31.26649666]
[-160.51144409 -19.48154449]
[-146.71852112 -13.58616924]
[-132.92561340 -7.69079399]
[-118.18157959 -9.80331993]
[-108.53289032 2.73515582]
[-94.73997498 8.63053131]
[-80.94705200 14.52590656]
[-67.15413666 20.42128181]
[-54.48422623 12.63595486]
[-39.48200226 13.81801701]
[-27.91726685 23.72308159]
[-24.36135101 38.71179962]
[-10.56843376 44.60717392]
[4.17559862 42.49464798]
[13.82428741 55.03312302]
[27.61720467 60.92849731]
[41.41012192 66.82387543]
[55.20303726 72.71924591]
[68.99595642 78.61462402]
[82.78887177 84.51000214]
[96.58178711 90.40537262]
[104.78586578 90.44054413]
[110.69495392 96.68896484]
[124.30533600 102.99432373]
[137.91571045 109.29967499]
[151.52609253 115.60503387]
[161.80158997 114.80115509]
[168.83142090 120.66078949]
[183.69567871 122.67428589]
[198.58837891 124.46520233]
[213.50621033 126.03312683]
[228.42402649 127.60105133]
[243.34185791 129.16897583]
[258.25970459 130.73690796]
[273.17752075 132.30484009]
[288.09533691 133.87275696]
[303.01318359 135.44068909]
[317.54650879 129.18827820]
[329.39529419 138.21356201]
[344.31314087 139.78149414]
[359.23095703 141.34941101]
[374.14877319 142.91734314]
[389.06661987 144.48527527]
[401.18957520 134.34577942]
[416.92388916 135.83151245]
[426.93463135 148.06100464]
[425.28262329 163.77871704]
[412.94799805 173.65960693]
[397.24862671 171.84152222]
[387.49868774 159.40309143]
[372.58087158 157.83517456]
[357.66302490 156.26724243]
[342.74520874 154.69931030]
[327.82736206 153.13139343]
[314.36105347 159.49594116]
[301.44525146 150.35852051]
[286.52743530 148.79058838]
[271.60958862 147.22265625]
[256.69177246 145.65473938]
[241.77394104 144.08680725]
[226.85610962 142.51887512]
[211.93827820 140.95095825]
[197.02044678 139.38302612]
[189.92335510 141.85449219]
[181.68217468 137.53852844]
[166.81793213 135.52503967]
[176.49731445 146.98406982]
[180.01327515 161.56617737]
[176.61976624 176.17727661]
[167.03683472 187.71708679]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 60]
[8 59]
[9 58]
[10 57]
[11 55]
[12 54]
[13 53]
[14 52]
[15 51]
[16 50]
[17 49]
[19 47]
[20 46]
[24 42]
[25 41]
[26 40]
[27 39]
[29 37]
[30 36]
[31 35]
[62 100]
[63 99]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[70 91]
[71 90]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
