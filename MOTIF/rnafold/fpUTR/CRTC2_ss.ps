%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:10:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGGCGGCCCCCGCGCGCAACAGGUCAGGGCUAGGCUGGGGCCGGGUUCGCGGUGCUCGCUGAGGCGGCGGUGGCUACGGCUGGAGGAGCCGGGCCGAGGCCGCGGCGGAGGCCGCGGCUGGUACUGGGAGGGUGGCAGGGAGGGACGGGGAAGGAAG\
) } def
/len { sequence length } bind def

/coor [
[101.88003540 159.81347656]
[99.53351593 144.99815369]
[97.18700409 130.18283081]
[94.84048462 115.36750031]
[88.29434967 101.87127686]
[78.11233521 90.85643768]
[67.93032074 79.84160614]
[57.74831390 68.82676697]
[47.56630325 57.81192780]
[37.38428879 46.79708862]
[22.33504868 41.91539764]
[19.37744141 27.31739044]
[9.19542980 16.30255318]
[-0.98658091 5.28771544]
[-11.16859245 -5.72712183]
[-19.33653259 -9.93372917]
[-21.43976402 -17.05961418]
[-31.40355110 -28.27223778]
[-41.36733627 -39.48486328]
[-45.65056992 -40.73007965]
[-48.95701981 -43.06137085]
[-51.06210327 -46.02782440]
[-51.91471481 -49.15206528]
[-51.63042068 -51.99046707]
[-60.68376160 -63.95027924]
[-69.73709869 -75.91008759]
[-78.79043579 -87.86989594]
[-94.19635773 -90.17109680]
[-103.20735168 -102.42900848]
[-100.91857147 -117.10201263]
[-109.97191620 -129.06182861]
[-119.02525330 -141.02163696]
[-128.07859802 -152.98144531]
[-142.57687378 -159.31471252]
[-144.08938599 -174.13232422]
[-153.14273071 -186.09213257]
[-162.19606018 -198.05194092]
[-171.24940491 -210.01174927]
[-191.22602844 -211.64517212]
[-203.43989563 -227.15310669]
[-200.43986511 -246.35728455]
[-210.18157959 -257.76336670]
[-219.92329407 -269.16946411]
[-229.66502380 -280.57553101]
[-239.40673828 -291.98162842]
[-249.25996399 -303.29153442]
[-259.22375488 -314.50415039]
[-269.18753052 -325.71679688]
[-279.15133667 -336.92941284]
[-294.69030762 -338.01477051]
[-304.63528442 -349.52792358]
[-303.50479126 -364.33526611]
[-313.46856689 -375.54788208]
[-328.41906738 -380.72412109]
[-331.08947754 -395.37738037]
[-341.05328369 -406.58999634]
[-351.01705933 -417.80261230]
[-360.98083496 -429.01525879]
[-376.77047729 -429.69534302]
[-387.39285278 -441.39752197]
[-386.54583740 -457.17910767]
[-374.73202515 -467.67715454]
[-358.96026611 -466.66333008]
[-348.58773804 -454.73916626]
[-349.76821899 -438.97903442]
[-339.80444336 -427.76641846]
[-329.84063721 -416.55377197]
[-319.87686157 -405.34115601]
[-305.63903809 -400.96694946]
[-302.25595093 -385.51168823]
[-292.29214478 -374.29904175]
[-277.45455933 -373.68130493]
[-267.19015503 -362.45202637]
[-267.93869019 -346.89318848]
[-257.97491455 -335.68057251]
[-248.01113892 -324.46795654]
[-238.04734802 -313.25531006]
[-231.21806335 -310.32910156]
[-228.00065613 -301.72335815]
[-218.25892639 -290.31726074]
[-208.51721191 -278.91116333]
[-198.77548218 -267.50509644]
[-189.03376770 -256.09899902]
[-178.87307739 -258.09030151]
[-168.73011780 -255.63868713]
[-160.47328186 -249.12620544]
[-155.65245056 -239.68911743]
[-155.20832825 -229.02018738]
[-159.28959656 -219.06509399]
[-150.23625183 -207.10528564]
[-141.18292236 -195.14547729]
[-132.12957764 -183.18566895]
[-118.27884674 -177.70783997]
[-116.11878204 -162.03479004]
[-107.06544495 -150.07498169]
[-98.01210022 -138.11515808]
[-88.95876312 -126.15535736]
[-74.21538544 -124.37535858]
[-64.86363983 -112.37538147]
[-66.83062744 -96.92323303]
[-57.77729034 -84.96342468]
[-48.72394943 -73.00361633]
[-39.67061234 -61.04380798]
[-30.15471268 -49.44865036]
[-20.19092560 -38.23602676]
[-10.22713852 -27.02339935]
[-0.15375447 -15.90913296]
[10.02825642 -4.89429569]
[20.21026802 6.12054205]
[30.39227867 17.13537979]
[44.71323395 21.22921753]
[48.39912796 36.61507797]
[58.58113861 47.62991714]
[68.76315308 58.64475632]
[78.94515991 69.65959167]
[89.12717438 80.67443085]
[99.30918121 91.68927002]
[106.20242310 80.91518402]
[120.75864410 75.91627502]
[138.95556641 80.58997345]
[152.81376648 86.33022308]
[166.67195129 92.07048035]
[182.38258362 90.20323944]
[191.18011475 102.22209167]
[205.03831482 107.96234131]
[218.89649963 113.70259094]
[232.75469971 119.44284821]
[248.06713867 114.65656281]
[261.27511597 123.76310730]
[262.24658203 139.77671814]
[250.23631287 150.41313171]
[234.45756531 147.51298523]
[227.01445007 133.30104065]
[213.15625000 127.56078339]
[199.29806519 121.82053375]
[185.43986511 116.08028412]
[170.72045898 118.35810089]
[160.93170166 105.92867279]
[147.07351685 100.18841553]
[133.21531677 94.44816589]
[127.32543945 99.09136963]
[136.73512268 110.77288818]
[149.13031006 119.22034454]
[145.01448059 133.64462280]
[130.02789307 134.27896118]
[124.70779419 120.25447083]
[115.54568481 108.37778473]
[109.65580750 113.02098846]
[112.00232697 127.83631134]
[114.34884644 142.65164185]
[116.69535828 157.46696472]
[130.85972595 163.58039856]
[139.45141602 176.39393616]
[139.72882080 191.81880188]
[131.60345459 204.93299866]
[117.66806793 211.55180359]
[102.36940765 209.56321716]
[90.58921814 199.60176086]
[86.08650208 184.84609985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 151]
[2 150]
[3 149]
[4 148]
[5 117]
[6 116]
[7 115]
[8 114]
[9 113]
[10 112]
[12 110]
[13 109]
[14 108]
[15 107]
[17 106]
[18 105]
[19 104]
[24 103]
[25 102]
[26 101]
[27 100]
[30 97]
[31 96]
[32 95]
[33 94]
[35 92]
[36 91]
[37 90]
[38 89]
[41 83]
[42 82]
[43 81]
[44 80]
[45 79]
[46 77]
[47 76]
[48 75]
[49 74]
[52 71]
[53 70]
[55 68]
[56 67]
[57 66]
[58 65]
[120 140]
[121 139]
[122 138]
[124 136]
[125 135]
[126 134]
[127 133]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
