%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:25:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCCCCUGACGCGGGCCCGGGCGCCGCGCCGCUGCGGCUGCAGGCGGCGACGGCUACACC\
) } def
/len { sequence length } bind def

/coor [
[10.22981167 195.66127014]
[0.13650526 187.70338440]
[-12.59315872 195.63784790]
[-25.32282257 203.57229614]
[-38.05248642 211.50675964]
[-50.78215027 219.44122314]
[-52.79662704 234.94850159]
[-64.34262848 245.49478149]
[-79.96847534 246.10041809]
[-92.29613495 236.47946167]
[-95.50485229 221.17462158]
[-88.07956696 207.41238403]
[-73.52628326 201.69084167]
[-58.71660995 206.71156311]
[-45.98694611 198.77709961]
[-33.25728226 190.84263611]
[-20.52761841 182.90817261]
[-7.79795504 174.97372437]
[-10.48238182 157.96606445]
[-5.72549438 141.36549377]
[5.62516499 128.28437805]
[21.48169327 121.19394684]
[38.89979935 121.45741272]
[54.62548828 129.06817627]
[66.00685883 119.29758453]
[77.38822937 109.52699280]
[88.76959991 99.75640869]
[99.89980316 89.70063782]
[110.77169800 79.36612701]
[121.64359283 69.03162384]
[132.51548767 58.69712448]
[143.38737488 48.36261749]
[154.25926208 38.02811432]
[164.86585999 27.42151451]
[175.20037842 16.54962158]
[185.53488159 5.67773008]
[188.84852600 -10.38314629]
[204.49751282 -15.28634453]
[216.38349915 -3.98787451]
[212.27919006 11.88936615]
[196.40676880 16.01223373]
[186.07226562 26.88412666]
[175.73776245 37.75601578]
[173.32183838 45.05609894]
[164.59376526 48.90000916]
[153.72187805 59.23451233]
[142.84999084 69.56901550]
[131.97808838 79.90351868]
[121.10620117 90.23802185]
[110.23430634 100.57252502]
[106.85646057 108.26876831]
[98.54019165 111.13777924]
[87.15882111 120.90836334]
[75.77744293 130.67895508]
[64.39607239 140.44953918]
[68.93454742 152.68939209]
[69.33692932 165.71221924]
[65.57731628 178.16079712]
[58.06270599 188.74282837]
[47.58904266 196.36512756]
[35.25691986 200.24653625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 18]
[3 17]
[4 16]
[5 15]
[6 14]
[24 55]
[25 54]
[26 53]
[27 52]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
