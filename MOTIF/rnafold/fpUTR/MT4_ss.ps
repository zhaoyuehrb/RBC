%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:12:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGGGAGCCUCUGGCUGCUGCUCACUCAGCCUCCCUUCCCCAGCCGUGACAGCACUGGAGCCUUUCGGACACCUGGACC\
) } def
/len { sequence length } bind def

/coor [
[134.94267273 296.73477173]
[137.83113098 281.87088013]
[145.39152527 268.75146484]
[156.80380249 258.79962158]
[151.13079834 244.91377258]
[145.45780945 231.02792358]
[139.78480530 217.14205933]
[134.11180115 203.25619507]
[122.13574982 194.40049744]
[124.07913208 178.69911194]
[118.40613556 164.81324768]
[112.73313904 150.92738342]
[107.06014252 137.04153442]
[101.38713837 123.15567017]
[95.71414185 109.26980591]
[89.84648132 103.41427612]
[90.10194397 94.73385620]
[84.97164154 80.63846588]
[79.84134674 66.54307556]
[74.71104431 52.44768906]
[69.58074188 38.35229874]
[63.55391693 31.13503456]
[64.53639984 23.60966492]
[59.95651245 9.32594681]
[55.37662125 -4.95777130]
[50.79673004 -19.24148941]
[40.56464005 -23.80867004]
[34.78189087 -33.14513779]
[35.23276901 -43.89506912]
[41.51165771 -52.35638046]
[38.05242157 -66.95205688]
[23.13330650 -70.17428589]
[11.09500122 -79.55735779]
[4.32771921 -93.23824310]
[4.17510891 -108.50059509]
[10.66747093 -122.31407166]
[22.51574326 -131.93597412]
[37.36744308 -135.45590210]
[52.27375031 -132.17494202]
[64.27500916 -122.74453735]
[70.98836517 -109.03710938]
[71.08087158 -93.77426910]
[64.53416443 -79.98647308]
[52.64809418 -70.41129303]
[56.10733032 -55.81562042]
[70.43775940 -43.07062912]
[65.08045197 -23.82137871]
[69.66033936 -9.53766155]
[74.24022675 4.74605703]
[78.82012177 19.02977562]
[83.67612457 33.22199631]
[88.80642700 47.31738663]
[93.93672943 61.41277695]
[99.06703186 75.50816345]
[104.19733429 89.60355377]
[109.60000610 103.59680939]
[115.27300262 117.48267365]
[120.94599915 131.36853027]
[126.61899567 145.25439453]
[132.29199219 159.14024353]
[137.96499634 173.02610779]
[150.34681702 182.87501526]
[147.99766541 197.58320618]
[153.67066956 211.46905518]
[159.34365845 225.35491943]
[165.01666260 239.24078369]
[170.68966675 253.12663269]
[185.80566406 252.24047852]
[200.38969421 256.31289673]
[212.85980225 264.90213013]
[221.86332703 277.07650757]
[226.42361450 291.51541138]
[226.04602051 306.65264893]
[220.77148438 320.84625244]
[211.17216492 332.55657959]
[198.28930664 340.51339722]
[183.52035522 343.85357666]
[168.46734619 342.21484375]
[154.76309204 335.77493286]
[143.89416504 325.23242188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[10 61]
[11 60]
[12 59]
[13 58]
[14 57]
[15 56]
[17 55]
[18 54]
[19 53]
[20 52]
[21 51]
[23 50]
[24 49]
[25 48]
[26 47]
[30 45]
[31 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
