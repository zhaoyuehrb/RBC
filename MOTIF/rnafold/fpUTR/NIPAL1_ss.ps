%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:18:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGGUGCGUGUGGAGAGGCCCAGGUGAGGAGCAAGCGCCCGCGUUCCGGAAGCCCGCUCCCGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[88.10720062 102.76991272]
[74.48862457 96.48226166]
[60.87005234 90.19461823]
[47.25148392 83.90696716]
[33.63291168 77.61932373]
[20.01433945 71.33167267]
[6.39576864 65.04402161]
[-7.22280264 58.75637817]
[-22.99533844 59.99639893]
[-31.30719566 47.63669586]
[-44.92576599 41.34904861]
[-58.54433823 35.06140137]
[-69.24690247 44.55826950]
[-82.74073029 49.18450928]
[-96.93158722 48.25777054]
[-109.63075256 41.95476532]
[-118.89260864 31.27879906]
[-123.31269073 17.90021896]
[-122.24058533 3.89510727]
[-135.55885315 -3.00586820]
[-151.90747070 -1.71934974]
[-160.97166443 -15.38581467]
[-153.42700195 -29.94637489]
[-137.03475952 -30.42237473]
[-128.65788269 -16.32414627]
[-115.33960724 -9.42317104]
[-102.89653778 -19.19902039]
[-87.39682007 -22.66001892]
[-71.86517334 -19.07992554]
[-59.35454178 -9.11153412]
[-52.34597015 5.33170557]
[-52.25669098 21.44282913]
[-38.63811874 27.73047638]
[-25.01954651 34.01812363]
[-10.22110176 32.32836533]
[-0.93515468 45.13780594]
[12.68341637 51.42545319]
[26.30198860 57.71310043]
[39.92055893 64.00074768]
[53.53913116 70.28839874]
[67.15769958 76.57604218]
[80.77627563 82.86369324]
[94.39484406 89.15134430]
[108.28548431 94.81262970]
[122.41939545 99.83582306]
[136.55331421 104.85901642]
[150.68722534 109.88220978]
[164.82113647 114.90540314]
[178.95504761 119.92859650]
[193.08895874 124.95178986]
[208.68339539 122.28263092]
[218.08473206 133.83529663]
[232.21865845 138.85848999]
[248.23980713 135.35781860]
[259.08050537 147.66275024]
[253.58876038 163.11502075]
[237.41401672 165.81866455]
[227.19546509 152.99240112]
[213.06153870 147.96920776]
[198.47807312 150.99766541]
[188.06576538 139.08570862]
[173.93185425 134.06251526]
[159.79794312 129.03932190]
[145.66403198 124.01612854]
[131.53012085 118.99292755]
[117.39620209 113.96973419]
[103.26229095 108.94654083]
[97.78513336 110.18074036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 43]
[2 42]
[3 41]
[4 40]
[5 39]
[6 38]
[7 37]
[8 36]
[10 34]
[11 33]
[12 32]
[19 26]
[20 25]
[44 67]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[50 61]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
