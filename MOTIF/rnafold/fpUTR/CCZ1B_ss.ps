%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGCGGUGGCGACGGAGGCGGAAGUGCGGUGUUUUAGCCGGUGGCUGCUGUCUCUGGGCGGGCCGUGGGAGGCUCCCGAGGUGGGGGCCGGGGCGGG\
) } def
/len { sequence length } bind def

/coor [
[185.13275146 209.27531433]
[184.29902649 199.43568420]
[185.76814270 189.65858459]
[189.46569824 180.47627258]
[177.82350159 171.01799011]
[166.18130493 161.55969238]
[154.53910828 152.10140991]
[142.89691162 142.64311218]
[125.51397705 140.90223694]
[118.90017700 123.80879211]
[106.96374512 114.72464752]
[95.23298645 115.57512665]
[85.98777771 108.30461884]
[84.04865265 96.70401764]
[72.40645599 87.24572754]
[60.76425934 77.78743744]
[49.12206268 68.32914734]
[37.47986603 58.87085724]
[25.83766747 49.41256714]
[14.19547081 39.95427704]
[2.55327392 30.49598885]
[-9.08892250 21.03769875]
[-24.67865372 18.34124184]
[-29.67810440 4.31074762]
[-41.32030106 -5.14754248]
[-52.96249771 -14.60583210]
[-72.88832855 -16.69287682]
[-79.39151001 -34.78593063]
[-91.61014557 -43.48678207]
[-103.82878876 -52.18763733]
[-116.04742432 -60.88848877]
[-131.58937073 -58.02083206]
[-144.55937195 -67.05159760]
[-147.26254272 -82.62299347]
[-138.09515381 -95.49678802]
[-122.49605560 -98.03518677]
[-109.71990204 -88.73220062]
[-107.34657288 -73.10713196]
[-95.12792969 -64.40627289]
[-82.90929413 -55.70542145]
[-70.69065094 -47.00457001]
[-60.58194351 -49.62464905]
[-50.52378082 -46.07954407]
[-44.02688217 -37.34416199]
[-43.50420761 -26.24802971]
[-31.86201286 -16.78973961]
[-20.21981430 -7.33144951]
[-5.46281242 -5.31151247]
[0.36936706 9.39550114]
[12.01156425 18.85379219]
[23.65376091 28.31208038]
[35.29595947 37.77037048]
[46.93815613 47.22866058]
[58.58035278 56.68695068]
[70.22254944 66.14524078]
[81.86474609 75.60353088]
[93.50694275 85.06182098]
[110.06876373 87.19652557]
[116.04788971 102.78821564]
[127.98432159 111.87236786]
[140.96839905 110.93074799]
[150.75120544 118.89514923]
[152.35520935 131.00091553]
[163.99740601 140.45921326]
[175.63960266 149.91749573]
[187.28179932 159.37579346]
[198.92399597 168.83407593]
[218.02665710 159.55953979]
[239.16404724 160.70243835]
[257.04211426 171.91166687]
[267.21453857 190.32304382]
[267.18853760 211.29089355]
[280.83300781 217.52212524]
[294.47747803 223.75334167]
[308.12197876 229.98457336]
[321.76644897 236.21580505]
[335.41091919 242.44702148]
[349.05541992 248.67825317]
[364.52893066 244.44155884]
[377.40344238 254.01371765]
[377.80273438 270.05181885]
[365.42047119 280.25274658]
[349.75531006 276.79129028]
[342.82418823 262.32272339]
[329.17971802 256.09149170]
[315.53521729 249.86027527]
[301.89074707 243.62905884]
[288.24627686 237.39782715]
[274.60177612 231.16661072]
[260.95730591 224.93537903]
[254.52241516 232.26727295]
[246.55491638 237.91680908]
[237.48469543 241.57238770]
[227.80270386 243.03016663]
[218.03434753 242.20542908]
[208.71109009 239.13748169]
[200.34141541 233.98782349]
[193.38314819 227.03164673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 67]
[5 66]
[6 65]
[7 64]
[8 63]
[10 60]
[11 59]
[14 57]
[15 56]
[16 55]
[17 54]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[24 47]
[25 46]
[26 45]
[28 41]
[29 40]
[30 39]
[31 38]
[72 90]
[73 89]
[74 88]
[75 87]
[76 86]
[77 85]
[78 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
