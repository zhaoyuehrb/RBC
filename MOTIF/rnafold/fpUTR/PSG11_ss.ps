%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:23:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCAGCGCAGAAGGAGGAAGGACAGCACAGCUGACAGCCGUGCUCUGGAAGCUUCUGGAUCCUAGGCUCAUCUCCACAGAGGAGAACAUGCACGCAGCAGAGAUC\
) } def
/len { sequence length } bind def

/coor [
[98.68714142 260.98452759]
[98.25086975 245.99087524]
[97.81459808 230.99722290]
[97.37832642 216.00357056]
[96.94205475 201.00991821]
[88.83786011 188.51306152]
[96.17051697 174.49368286]
[95.73424530 159.50003052]
[95.07995605 144.51431274]
[94.20777893 129.53968811]
[81.62066650 123.83995056]
[72.90604401 113.11717987]
[69.90005493 99.63065338]
[73.23606110 86.22194672]
[62.03068924 76.25000763]
[50.82531357 66.27806854]
[39.61993790 56.30612946]
[27.99025536 46.83245468]
[15.95840740 37.87507629]
[3.92655969 28.91769600]
[-8.10528851 19.96031761]
[-20.13713646 11.00293922]
[-38.62425995 14.53862953]
[-53.66435623 3.75402164]
[-56.16059494 -14.26588345]
[-68.69290924 -22.50851822]
[-81.45966339 -30.38316727]
[-94.45004272 -37.88316727]
[-107.44042206 -45.38316727]
[-120.43080902 -52.88316727]
[-136.25076294 -53.08255386]
[-143.40425110 -66.14688873]
[-156.39462280 -73.64688873]
[-169.38500977 -81.14688873]
[-186.12527466 -83.83016968]
[-188.18101501 -100.65901947]
[-172.57893372 -107.29312134]
[-161.88500977 -94.13726807]
[-148.89462280 -86.63726807]
[-135.90425110 -79.13726807]
[-121.01345825 -79.47433472]
[-112.93080902 -65.87355042]
[-99.94042206 -58.37354660]
[-86.95004272 -50.87354660]
[-73.95966339 -43.37354660]
[-69.05767822 -43.77303696]
[-63.87926102 -40.98737717]
[-60.45027924 -35.04083633]
[-47.91796112 -26.79820061]
[-37.33539581 -31.52325630]
[-25.67238426 -30.47104263]
[-15.90683270 -23.79179192]
[-10.58984375 -13.08746624]
[-11.17975712 -1.02890909]
[0.85209072 7.92846966]
[12.88393879 16.88584900]
[24.91578674 25.84322739]
[36.94763565 34.80060577]
[40.61478424 34.57753372]
[44.56454468 36.22155762]
[47.86915588 39.84046936]
[49.59187317 45.10075378]
[60.79724884 55.07269287]
[72.00262451 65.04463196]
[83.20800018 75.01657104]
[101.06699371 69.91670227]
[118.51980591 76.26900482]
[128.92245483 91.65526581]
[143.91610718 91.21899414]
[153.19750977 77.16766357]
[168.85034180 71.41996002]
[184.70214844 76.03363037]
[194.62507629 89.02105713]
[209.59970093 88.14888763]
[224.57432556 87.27671051]
[239.54893494 86.40454102]
[254.52355957 85.53237152]
[266.22012329 74.55192566]
[282.07638550 76.99298096]
[289.92877197 90.98296356]
[283.75360107 105.78995514]
[268.28796387 110.05529785]
[255.39573669 100.50698853]
[240.42111206 101.37916565]
[225.44648743 102.25133514]
[210.47186279 103.12351227]
[195.49725342 103.99568176]
[189.31002808 115.92253876]
[177.92485046 123.26034546]
[164.29011536 123.98031616]
[152.00123596 117.78443909]
[144.35238647 106.21265411]
[129.35873413 106.64892578]
[125.36339569 116.21237946]
[118.36125183 123.85387421]
[109.18240356 128.66751099]
[110.05457306 143.64213562]
[113.72560120 152.17996216]
[110.72789764 159.06376648]
[111.16416931 174.05741882]
[119.29956818 187.62670898]
[111.93571472 200.57363892]
[112.37198639 215.56729126]
[112.80825043 230.56094360]
[113.24452209 245.55459595]
[113.68079376 260.54824829]
[116.43080902 279.73385620]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[4 103]
[5 102]
[7 100]
[8 99]
[9 97]
[10 96]
[14 65]
[15 64]
[16 63]
[17 62]
[18 58]
[19 57]
[20 56]
[21 55]
[22 54]
[25 49]
[26 48]
[27 45]
[28 44]
[29 43]
[30 42]
[32 40]
[33 39]
[34 38]
[68 93]
[69 92]
[73 87]
[74 86]
[75 85]
[76 84]
[77 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
