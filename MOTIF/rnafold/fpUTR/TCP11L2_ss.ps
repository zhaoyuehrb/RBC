%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:24:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCGUUGGGGGGGACACUGGGGCUGGGGGGGUUUGUUGGGCUGGUGAGUUUUCGAGGUGACUGUGCUGUGCUCGGUGAGGGGACGCCCAGAGAGCCCUGACCCGGGGUCACUCCGUCGCCGUUCUCCUCUUGUCUACGUGCUGGACCCGGUGCUACCUUUUUACCCACACUUAAGUGACGCAAA\
) } def
/len { sequence length } bind def

/coor [
[78.60934448 233.27861023]
[70.85780334 219.69746399]
[73.70042419 204.32041931]
[85.79500580 194.40805054]
[85.79500580 179.40805054]
[85.79500580 164.40805054]
[85.79500580 149.40805054]
[61.39797974 115.18648529]
[72.95539856 83.74395752]
[62.30434418 73.18199921]
[51.65328598 62.62003708]
[41.00223160 52.05807495]
[30.35117531 41.49611282]
[19.70012093 30.93415451]
[9.04906464 20.37219429]
[-1.60199082 9.81023312]
[-12.25304604 -0.75172800]
[-17.34202194 -2.08835101]
[-21.02945328 -4.96492529]
[-22.96232033 -8.58408260]
[-23.15776062 -12.12433338]
[-33.26319504 -23.20946693]
[-43.46138763 -34.20932770]
[-53.75161743 -45.12313080]
[-64.04184723 -56.03693771]
[-72.22401428 -60.14556122]
[-74.41136932 -67.22159576]
[-84.51679993 -78.30672455]
[-94.62223816 -89.39186096]
[-104.72766876 -100.47698975]
[-132.81637573 -115.25740051]
[-145.08354187 -123.88969421]
[-157.35070801 -132.52198792]
[-169.61788940 -141.15428162]
[-181.88505554 -149.78657532]
[-194.15223694 -158.41886902]
[-209.89088440 -160.03302002]
[-215.84667969 -173.68504333]
[-228.11384583 -182.31733704]
[-240.38102722 -190.94963074]
[-252.64819336 -199.58192444]
[-264.91537476 -208.21421814]
[-277.18252563 -216.84651184]
[-287.67742920 -207.06341553]
[-306.36257935 -207.11637878]
[-320.48175049 -212.18084717]
[-334.60092163 -217.24531555]
[-352.62792969 -213.53671265]
[-363.45294189 -227.33795166]
[-377.65518188 -232.16452026]
[-391.85745239 -236.99108887]
[-406.05972290 -241.81764221]
[-418.65658569 -232.75680542]
[-434.17327881 -232.86436462]
[-446.64334106 -242.09893799]
[-451.27175903 -256.90966797]
[-446.27880859 -271.60150146]
[-433.58441162 -280.52514648]
[-418.06979370 -280.24926758]
[-405.70062256 -270.87997437]
[-401.23315430 -256.01989746]
[-387.03088379 -251.19334412]
[-372.82864380 -246.36679077]
[-358.62637329 -241.54022217]
[-347.62707520 -246.60566711]
[-335.74664307 -242.68476868]
[-329.53643799 -231.36450195]
[-315.41726685 -226.30003357]
[-301.29809570 -221.23556519]
[-291.66702271 -232.73522949]
[-299.13061523 -245.74655151]
[-312.70870972 -253.86724854]
[-312.32995605 -268.75704956]
[-319.79354858 -281.76837158]
[-327.25714111 -294.77969360]
[-342.30349731 -300.34625244]
[-347.19561768 -315.62524414]
[-338.18066406 -328.89587402]
[-322.17416382 -329.97811890]
[-311.45492554 -318.04171753]
[-314.24581909 -302.24328613]
[-306.78222656 -289.23196411]
[-299.31863403 -276.22064209]
[-286.27438354 -269.03060913]
[-286.11929321 -253.21014404]
[-278.65567017 -240.19882202]
[-268.55023193 -229.11369324]
[-256.28308105 -220.48139954]
[-244.01589966 -211.84910583]
[-231.74873352 -203.21681213]
[-219.48155212 -194.58451843]
[-207.21438599 -185.95222473]
[-192.35316467 -184.95550537]
[-185.51994324 -170.68603516]
[-173.25276184 -162.05374146]
[-160.98559570 -153.42144775]
[-148.71841431 -144.78915405]
[-136.45124817 -136.15686035]
[-124.18407440 -127.52457428]
[-109.72271729 -131.50817871]
[-103.60632324 -145.20452881]
[-97.48993683 -158.90086365]
[-91.37354279 -172.59721375]
[-85.25714874 -186.29354858]
[-84.31943512 -203.22154236]
[-67.79341125 -207.00662231]
[-59.58140182 -192.17424011]
[-71.56080627 -180.17715454]
[-77.67720032 -166.48081970]
[-83.79359436 -152.78446960]
[-89.90998840 -139.08813477]
[-96.02638245 -125.39179230]
[-93.64253998 -110.58242798]
[-83.53710175 -99.49729156]
[-73.43166351 -88.41216278]
[-63.32623291 -77.32702637]
[-53.12804031 -66.32717133]
[-42.83781052 -55.41336060]
[-32.54758072 -44.49955368]
[-25.65696716 -41.78401566]
[-22.17806244 -33.31490326]
[-12.07262707 -22.22976875]
[-1.69108582 -11.40278339]
[8.95996952 -0.84082299]
[19.61102486 9.72113800]
[30.26208115 20.28309822]
[40.91313553 30.84505844]
[51.56419373 41.40702057]
[62.21524811 51.96897888]
[72.86630249 62.53094101]
[83.51735687 73.09290314]
[89.68223572 67.85491943]
[97.42846680 64.12553406]
[106.36289978 62.36138916]
[115.96555328 62.91161346]
[125.61987305 65.98384094]
[134.65180969 71.61880493]
[142.37527466 79.67577362]
[148.14093018 89.83035278]
[151.38505554 101.58528900]
[165.94219971 105.20324707]
[180.49934387 108.82121277]
[195.05647278 112.43917084]
[209.61361694 116.05712891]
[224.17076111 119.67508698]
[239.77314758 114.62555695]
[251.76440430 125.81222534]
[247.80897522 141.72720337]
[231.97586060 145.99853516]
[220.55279541 134.23223877]
[205.99566650 130.61427307]
[191.43852234 126.99631500]
[176.88137817 123.37834930]
[162.32423401 119.76039124]
[147.76708984 116.14243317]
[143.04882812 121.97235107]
[154.70864868 131.40888977]
[166.36848450 140.84542847]
[178.02832031 150.28196716]
[189.68815613 159.71850586]
[201.34783936 169.15522766]
[191.91093445 180.81477356]
[180.25161743 171.37834167]
[168.59178162 161.94180298]
[156.93194580 152.50526428]
[145.27210999 143.06872559]
[133.61228943 133.63218689]
[128.89401245 139.46209717]
[135.46705627 152.94523621]
[142.04011536 166.42837524]
[157.06216431 171.33892822]
[164.13746643 185.47100830]
[159.06835938 200.44029236]
[144.86227417 207.36578369]
[129.94740295 202.13870239]
[123.17249298 187.86018372]
[128.55697632 173.00141907]
[121.98392487 159.51828003]
[115.41087341 146.03514099]
[100.79500580 149.40805054]
[100.79500580 164.40805054]
[100.79500580 179.40805054]
[100.79500580 194.40805054]
[112.88958740 204.32041931]
[115.73220825 219.69746399]
[107.98066711 233.27861023]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 183]
[5 182]
[6 181]
[7 180]
[9 131]
[10 130]
[11 129]
[12 128]
[13 127]
[14 126]
[15 125]
[16 124]
[17 123]
[21 122]
[22 121]
[23 119]
[24 118]
[25 117]
[27 116]
[28 115]
[29 114]
[30 113]
[31 99]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[38 92]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[45 69]
[46 68]
[47 67]
[49 64]
[50 63]
[51 62]
[52 61]
[70 86]
[71 85]
[73 83]
[74 82]
[75 81]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
[140 155]
[141 154]
[142 153]
[143 152]
[144 151]
[145 150]
[168 179]
[169 178]
[170 177]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
