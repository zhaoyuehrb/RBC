%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:45:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGUCGCUCAGCAGUGACGUGACACGCAGCCCACGGUCUGUACUGACGCGCCCUCGCUUCUUCCUCUUUCUCGACUCCAUCUUCGCGGUAGCUGGGACCGCCGUUCAGUCGCCAAU\
) } def
/len { sequence length } bind def

/coor [
[183.50592041 109.68924713]
[168.51106262 109.29659271]
[153.51620483 108.90393829]
[140.59075928 116.30542755]
[126.99784851 108.20953369]
[112.00299072 107.81687927]
[99.62504578 114.31903839]
[87.60435486 107.17797852]
[72.60949707 106.78532410]
[57.61463547 106.39266968]
[42.61592102 106.19632721]
[27.61592102 106.19632721]
[12.61592102 106.19632721]
[-2.38407922 106.19632721]
[-17.37893867 106.58898163]
[-32.35838318 107.37402344]
[-47.33782578 108.15905762]
[-55.19261932 119.19119263]
[-67.79673004 123.58315277]
[-80.43116760 119.92979431]
[-88.50271606 109.79440308]
[-103.49757385 110.18705750]
[-118.49243927 110.57971191]
[-133.48728943 110.97236633]
[-140.74531555 124.50812531]
[-153.80726624 132.58778381]
[-169.15956116 133.03796387]
[-182.67250061 125.73754883]
[-190.71118164 112.65033722]
[-191.11323547 97.29670715]
[-183.77050781 83.80670929]
[-170.65815735 75.80909729]
[-155.30334473 75.45517731]
[-141.83642578 82.84014893]
[-133.87994385 95.97750854]
[-118.88509369 95.58485413]
[-103.89022827 95.19219971]
[-88.89537048 94.79954529]
[-77.91493988 82.13491058]
[-60.83961487 81.25339508]
[-48.12286377 93.17961884]
[-33.14342117 92.39457703]
[-18.16397858 91.60953522]
[-14.28863621 88.62921906]
[-8.47008514 88.13598633]
[-2.38407922 91.19632721]
[12.61592102 91.19632721]
[27.61592102 91.19632721]
[42.61592102 91.19632721]
[49.38803864 88.01060486]
[58.00728989 91.39781189]
[73.00215149 91.79046631]
[87.99700928 92.18312073]
[100.37495422 85.68096161]
[112.39564514 92.82202148]
[127.39050293 93.21467590]
[141.38848877 85.84127045]
[153.90885925 93.90908051]
[168.90371704 94.30173492]
[183.89857483 94.69438934]
[186.82221985 84.26888275]
[191.79789734 74.66030884]
[198.61581421 66.26737213]
[206.98982239 59.43768311]
[216.56939697 54.45332336]
[226.95433044 51.51921082]
[237.71142578 50.75468445]
[248.39259338 52.18864441]
[258.55346680 55.75846863]
[267.77200317 61.31275177]
[275.66586304 68.61771393]
[281.90838623 77.36703491]
[286.24203491 87.19472504]
[288.48907471 97.69040680]
[288.55880737 108.41645050]
[303.14434814 111.91813660]
[317.72991943 115.41981506]
[332.31546021 118.92149353]
[346.90100098 122.42317200]
[353.89813232 111.91048431]
[363.79434204 104.10536957]
[375.60177612 99.76741791]
[388.14791870 99.31109619]
[400.19192505 102.76622009]
[410.54730225 109.77651215]
[418.19897461 119.63624573]
[422.40255737 131.36132812]
[422.75689697 143.78744507]
[437.02276611 148.42269897]
[451.28860474 153.05795288]
[465.55444336 157.69320679]
[479.82031250 162.32846069]
[492.98495483 153.88891602]
[508.48782349 155.93719482]
[519.00891113 167.50616455]
[519.58044434 183.13328552]
[509.93264771 195.43994141]
[494.62084961 198.61529541]
[480.87484741 191.16003418]
[475.18505859 176.59431458]
[460.91918945 171.95906067]
[446.65335083 167.32380676]
[432.38751221 162.68853760]
[418.12164307 158.05328369]
[406.51773071 171.22076416]
[390.31124878 178.09226990]
[372.67498779 177.27349854]
[357.08297729 168.88050842]
[346.62606812 154.52581787]
[343.39932251 137.00872803]
[328.81378174 133.50704956]
[314.22821045 130.00535583]
[299.64266968 126.50368500]
[285.05712891 123.00199890]
[274.48706055 139.70758057]
[258.47265625 151.34686279]
[239.26461792 156.25790405]
[219.57217407 153.72622681]
[202.18092346 144.08865356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 60]
[2 59]
[3 58]
[5 56]
[6 55]
[8 53]
[9 52]
[10 51]
[11 49]
[12 48]
[13 47]
[14 46]
[15 43]
[16 42]
[17 41]
[21 38]
[22 37]
[23 36]
[24 35]
[75 114]
[76 113]
[77 112]
[78 111]
[79 110]
[88 104]
[89 103]
[90 102]
[91 101]
[92 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
