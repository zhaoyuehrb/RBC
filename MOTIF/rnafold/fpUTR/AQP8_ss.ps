%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:54:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAUAAGAGUAUCUUGCACAGCAGGUGCAGGUUUCCCAGCAGCUCAGGCAAGAGUCCGAUGUUUGUGCCAUCUGAUCCUG\
) } def
/len { sequence length } bind def

/coor [
[93.09901428 108.18867493]
[78.16612244 109.60594940]
[63.23322678 111.02323151]
[48.30033112 112.44050598]
[33.36743927 113.85778046]
[18.43454361 115.27506256]
[12.61953068 125.98444366]
[2.39542365 132.38966370]
[-9.53526688 132.93847656]
[-20.08734512 127.60845184]
[-26.59073257 117.88199615]
[-41.58804703 118.16585541]
[-56.58536148 118.44972229]
[-71.58267212 118.73358154]
[-86.57998657 119.01744080]
[-101.57730103 119.30130768]
[-110.34833527 122.66024780]
[-117.14502716 119.30130768]
[-132.14233398 119.01744080]
[-148.09306335 124.76295471]
[-158.02963257 111.02611542]
[-147.58035278 97.67513275]
[-131.85847473 104.02012634]
[-116.86116028 104.30399323]
[-101.86116028 104.30399323]
[-86.86385345 104.02012634]
[-71.86653900 103.73626709]
[-56.86922073 103.45240784]
[-41.87191010 103.16854095]
[-26.87459564 102.88468170]
[-15.24392509 88.99114227]
[3.14492750 87.73670197]
[17.01726723 100.34216309]
[31.95016098 98.92488861]
[46.88305664 97.50761414]
[61.81594849 96.09033203]
[76.74884033 94.67305756]
[91.68173981 93.25578308]
[106.29657745 89.87844086]
[120.33724976 84.60022736]
[134.37791443 79.32201385]
[141.19877625 63.34481049]
[157.10763550 57.24585724]
[172.25445557 64.28717041]
[186.08532715 58.48141098]
[195.81517029 46.00580597]
[210.54519653 48.21395874]
[224.37606812 42.40820312]
[238.20695496 36.60244751]
[252.03782654 30.79669380]
[265.86871338 24.99094009]
[279.69958496 19.18518448]
[282.26556396 3.97271299]
[292.66555786 -7.42216921]
[307.58102417 -11.36339664]
[322.25241089 -6.59333706]
[331.99819946 5.36590004]
[333.70849609 20.69816589]
[326.83758545 34.51099014]
[313.57794189 42.39675140]
[298.16064453 41.83913040]
[285.50534058 33.01606369]
[271.67446899 38.82181931]
[257.84359741 44.62757492]
[244.01271057 50.43332672]
[230.18182373 56.23908234]
[216.35095215 62.04483795]
[207.61038208 74.10517883]
[191.89108276 72.31229401]
[178.06021118 78.11804962]
[174.83288574 90.74225616]
[164.72242737 99.26953888]
[151.34376526 100.35306549]
[139.65614319 93.36267853]
[125.61546326 98.64089966]
[111.57479095 103.91911316]
[124.40391541 111.69174194]
[129.53326416 125.78747559]
[124.69982147 139.98739624]
[112.03606415 148.02662659]
[97.12912750 146.35832214]
[86.55583191 135.71852112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[11 30]
[12 29]
[13 28]
[14 27]
[15 26]
[16 25]
[18 24]
[19 23]
[39 76]
[40 75]
[41 74]
[44 70]
[45 69]
[47 67]
[48 66]
[49 65]
[50 64]
[51 63]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
