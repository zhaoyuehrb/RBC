%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:31:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUGGCUGCUCCGGCAUAUUUGAGAAGGUCUGUUUCCCUGGUCCUUCUGGGUUUCCACCAAUUGGCAAGAAGGGAUCAGCCUGUCCUAGAGAUCACUCCUCUGCCAAAGAUCCCAACAAGACAAC\
) } def
/len { sequence length } bind def

/coor [
[136.93215942 262.84405518]
[148.79847717 253.43824768]
[143.78276062 239.30166626]
[138.76705933 225.16510010]
[127.21937561 215.75764465]
[129.89678955 200.16462708]
[124.88108063 186.02806091]
[119.86537170 171.89147949]
[114.84966278 157.75491333]
[100.09917450 155.03036499]
[90.36440277 166.44238281]
[80.62962341 177.85440063]
[78.18463898 194.07025146]
[62.82204056 199.80807495]
[50.34555054 189.16526794]
[53.58991241 173.09025574]
[69.21760559 168.11962891]
[78.95238495 156.70761108]
[88.68715668 145.29557800]
[78.91341400 140.69184875]
[70.63423157 134.06446838]
[64.24675751 125.84906006]
[60.02933502 116.55327606]
[58.13009262 106.72596741]
[58.56329727 96.92495728]
[61.21337509 87.68545532]
[65.84616852 79.49084473]
[72.12652588 72.74739075]
[79.64105225 67.76431274]
[74.28259277 53.75407028]
[68.92412567 39.74383163]
[62.87438583 32.75912857]
[63.61032486 25.32662773]
[58.59461594 11.19005585]
[53.57890701 -2.94651508]
[42.23841476 -9.23159695]
[38.38532257 -21.18961334]
[43.58042908 -32.18538666]
[38.91044617 -46.43990326]
[34.24046326 -60.69441986]
[29.57048035 -74.94893646]
[24.90049744 -89.20345306]
[7.55388165 -94.17655182]
[-3.30418158 -108.39403534]
[-3.53189445 -126.12618256]
[6.77469873 -140.36520386]
[1.41623521 -154.37544250]
[-13.42401981 -158.50740051]
[-22.87520790 -170.44592285]
[-23.47718239 -185.48260498]
[-15.20849991 -197.84249878]
[-20.56696320 -211.85273743]
[-25.92542648 -225.86297607]
[-40.76296616 -230.80073547]
[-48.91117477 -244.14765930]
[-46.52271652 -259.60177612]
[-34.72534943 -269.86608887]
[-19.08942795 -270.09411621]
[-6.99775839 -260.17819214]
[-4.15965557 -244.80030823]
[-11.91518497 -231.22143555]
[-6.55672169 -217.21119690]
[-1.19825852 -203.20095825]
[13.20801353 -199.51350403]
[22.79393578 -187.91288757]
[23.72175789 -172.71444702]
[15.42647648 -159.73391724]
[20.78494072 -145.72366333]
[32.95901489 -144.31175232]
[43.41759109 -137.78459167]
[50.11323166 -127.34674072]
[51.70391083 -114.97518921]
[47.82159805 -103.04502106]
[39.15501404 -93.87343597]
[43.82499695 -79.61891937]
[48.49497986 -65.36440277]
[53.16496277 -51.10988617]
[57.83494949 -36.85536957]
[71.51290894 -25.93152428]
[67.71547699 -7.96222591]
[72.73118591 6.17434549]
[77.74689484 20.31091690]
[82.93437195 34.38536835]
[88.29283142 48.39560699]
[93.65129852 62.40584946]
[108.62781525 61.39926910]
[123.37844086 66.34283447]
[135.55264282 76.88426971]
[143.05035400 91.75146484]
[144.37689209 108.89813232]
[138.92127991 125.78379822]
[153.89349365 126.69648743]
[168.86569214 127.60917664]
[183.83790588 128.52186584]
[194.46781921 117.05282593]
[209.98933411 115.15110016]
[223.07366943 123.71463776]
[227.54280090 138.69999695]
[221.28654480 153.03153992]
[207.25891113 159.94236755]
[192.08331299 156.16937256]
[182.92521667 143.49407959]
[167.95300293 142.58139038]
[152.98080444 141.66870117]
[138.00859070 140.75601196]
[128.98623657 152.73919678]
[134.00193787 166.87577820]
[139.01765442 181.01234436]
[144.03335571 195.14891052]
[155.93980408 205.56752014]
[152.90362549 220.14938354]
[157.91934204 234.28596497]
[162.93504333 248.42253113]
[178.07597351 248.24606323]
[192.45303345 252.99778748]
[204.50671387 262.16223145]
[212.92953491 274.74536133]
[216.80783081 289.38223267]
[215.72093201 304.48510742]
[209.78671265 318.41580200]
[199.64889526 329.66317749]
[186.40715027 337.00720215]
[171.49784851 339.65127563]
[156.53820801 337.30856323]
[143.15098572 330.23321533]
[132.78828430 319.19268799]
[126.57420349 305.38458252]
[125.18277740 290.30670166]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 113]
[3 112]
[4 111]
[6 109]
[7 108]
[8 107]
[9 106]
[10 19]
[11 18]
[12 17]
[29 85]
[30 84]
[31 83]
[33 82]
[34 81]
[35 80]
[38 78]
[39 77]
[40 76]
[41 75]
[42 74]
[46 68]
[47 67]
[51 63]
[52 62]
[53 61]
[91 105]
[92 104]
[93 103]
[94 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
