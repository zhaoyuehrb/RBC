%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:07:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCGCGAUUGUGAUUCGGGGCGCCAUUGGUCUGCGGGGCGCGGUGCUUCCCGGGAGAUGUAGUCUCUUCUGCUCUGGCUCUGUUGCCCAGGGCAACCGCUCCUUCAGGCGUGAAUGUGGCGGCUGCCUCUGCGAAUGGACGGCGUGGGAAGAGA\
) } def
/len { sequence length } bind def

/coor [
[194.98345947 732.43170166]
[200.32476807 717.95849609]
[212.65672302 708.68884277]
[211.45739746 693.73687744]
[210.25807190 678.78491211]
[209.05874634 663.83294678]
[207.85942078 648.88098145]
[206.66007996 633.92895508]
[202.96978760 627.47686768]
[205.58941650 618.66632080]
[204.68949890 603.69335938]
[203.78958130 588.72039795]
[202.88966370 573.74737549]
[192.43717957 559.68054199]
[200.73330688 543.27014160]
[199.53396606 528.31811523]
[198.33464050 513.36614990]
[197.13531494 498.41418457]
[195.93598938 483.46221924]
[193.69329834 468.63079834]
[190.41821289 453.99270630]
[180.08872986 443.26187134]
[184.62625122 428.10528564]
[181.35116577 413.46719360]
[178.07609558 398.82910156]
[174.80101013 384.19100952]
[171.52593994 369.55291748]
[168.25085449 354.91482544]
[150.13281250 345.55618286]
[144.61972046 325.62142944]
[155.66058350 307.78894043]
[151.22560120 293.45956421]
[146.79061890 279.13018799]
[142.35562134 264.80081177]
[137.92063904 250.47143555]
[126.76625061 240.60083008]
[130.07739258 225.12998962]
[125.64241028 210.80061340]
[121.20742798 196.47125244]
[116.77244568 182.14187622]
[111.76243591 176.65118408]
[112.39517212 167.48124695]
[108.24779510 153.06600952]
[104.10041046 138.65075684]
[99.95302582 124.23551941]
[95.80564880 109.82027435]
[99.30143738 124.40724182]
[94.49804688 138.61735535]
[82.86890411 148.09170532]
[67.98123932 149.92402649]
[54.40181732 143.55227661]
[46.29609299 130.93098450]
[46.15049362 115.93168640]
[54.00963593 103.15544891]
[44.80891800 91.30863953]
[35.60819626 79.46183777]
[26.40747833 67.61503601]
[17.20675850 55.76823044]
[8.00603962 43.92142868]
[-1.19467926 32.07462311]
[-15.68542671 23.27379417]
[-11.23997593 6.91303921]
[5.71201754 6.65565205]
[10.65212440 22.87390327]
[19.85284424 34.72070694]
[29.05356216 46.56751251]
[38.25428391 58.41431427]
[47.45500183 70.26112366]
[56.65571976 82.10792542]
[65.85643768 93.95472717]
[73.17549133 92.31719208]
[95.13262939 87.40457153]
[98.40770721 72.76647949]
[101.68278503 58.12837982]
[104.95786285 43.49028397]
[108.23294067 28.85218620]
[111.50801849 14.21409035]
[114.78309631 -0.42400569]
[117.91156006 -15.09413624]
[120.89308929 -29.79483223]
[111.95424652 -42.82835007]
[114.93170929 -58.34963608]
[128.05900574 -67.15018463]
[143.54794312 -64.00878143]
[152.20921326 -50.78917313]
[148.90423584 -35.33431625]
[135.59378052 -26.81330109]
[132.61225891 -12.11260509]
[134.37474060 -4.89169455]
[129.42118835 2.85107207]
[126.14611816 17.48916817]
[122.87104034 32.12726593]
[119.59596252 46.76536179]
[116.32088470 61.40345764]
[113.04580688 76.04155731]
[109.77072906 90.67964935]
[110.22088623 105.67289734]
[114.36827087 120.08813477]
[118.51565552 134.50337219]
[122.66303253 148.91862488]
[126.81041718 163.33386230]
[131.10182190 177.70689392]
[135.53680420 192.03627014]
[139.97178650 206.36563110]
[144.40676880 220.69500732]
[155.87837219 231.59054565]
[152.25001526 246.03645325]
[156.68499756 260.36581421]
[161.11997986 274.69519043]
[165.55496216 289.02456665]
[169.98995972 303.35394287]
[179.63758850 305.22763062]
[187.87374878 310.48251343]
[193.57008362 318.34805298]
[195.96495056 327.69973755]
[194.76493835 337.21969604]
[190.18016052 345.58251953]
[182.88896179 351.63973999]
[186.16403198 366.27783203]
[189.43911743 380.91592407]
[192.71418762 395.55401611]
[195.98927307 410.19210815]
[199.26434326 424.83023071]
[209.82807922 436.60809326]
[205.05630493 450.71765137]
[208.33139038 465.35574341]
[216.64375305 452.86956787]
[230.98901367 448.48623657]
[244.86065674 454.19390869]
[251.96699524 467.40374756]
[249.08483887 482.12423706]
[237.52142334 491.67868042]
[222.52153015 491.73352051]
[210.88796997 482.26287842]
[212.08729553 497.21484375]
[213.28662109 512.16680908]
[214.48594666 527.11883545]
[215.68527222 542.07080078]
[225.00283813 551.04241943]
[225.66531372 563.55804443]
[217.86264038 572.84747314]
[218.76255798 587.82043457]
[219.66247559 602.79345703]
[220.56239319 617.76641846]
[221.61206055 632.72967529]
[222.81138611 647.68164062]
[224.01071167 662.63360596]
[225.21005249 677.58557129]
[226.40937805 692.53753662]
[227.60870361 707.48956299]
[241.26054382 714.67498779]
[248.84057617 728.11175537]
[247.93002319 743.51220703]
[238.81944275 755.96215820]
[224.41600037 761.48883057]
[209.31576538 758.32867432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 150]
[4 149]
[5 148]
[6 147]
[7 146]
[8 145]
[10 144]
[11 143]
[12 142]
[13 141]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 126]
[21 125]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
[28 118]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[37 105]
[38 104]
[39 103]
[40 102]
[42 101]
[43 100]
[44 99]
[45 98]
[46 97]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[72 96]
[73 95]
[74 94]
[75 93]
[76 92]
[77 91]
[78 90]
[79 88]
[80 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
