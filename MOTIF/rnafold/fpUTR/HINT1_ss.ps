%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:36:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCGCACGCGCAAGAUUAGGUGGGGCGCCAGAGCCGGGGCACCUGCGCAGGCUUGGCUGCGCCCUCUCGCGCCGCACGCUCUGCGGGUUCCUCCCUUCUUCCGAGCCUCUCCUCUGGCCGCCGCGCGGGAGAGAGGCCGAG\
) } def
/len { sequence length } bind def

/coor [
[103.68624115 134.23320007]
[96.93503571 132.36163330]
[92.11344910 146.56558228]
[87.29185486 160.76953125]
[82.47026062 174.97348022]
[86.19852448 190.94320679]
[74.04907227 201.95788574]
[58.52022934 196.68653870]
[55.58673096 180.55191040]
[68.26631165 170.15188599]
[73.08790588 155.94793701]
[77.90949249 141.74398804]
[82.73108673 127.54003906]
[69.21866608 110.44885254]
[69.53433990 88.66366577]
[57.06229401 80.33011627]
[44.59024811 71.99655914]
[33.51787949 76.56714630]
[21.73827744 75.20343018]
[12.19870567 68.36418152]
[7.22883654 57.86330795]
[7.97228622 46.39015198]
[-4.12438297 37.52050781]
[-16.22105217 28.65086174]
[-31.92526627 26.73039246]
[-37.61396790 12.96492863]
[-49.71063614 4.09528399]
[-61.80730438 -4.77436066]
[-73.90397644 -13.64400482]
[-86.00064087 -22.51365089]
[-101.70485687 -24.43412018]
[-107.39355469 -38.19958496]
[-119.49022675 -47.06922913]
[-131.58689880 -55.93887329]
[-143.68356323 -64.80851746]
[-150.32431030 -65.92660522]
[-154.70005798 -69.70098114]
[-156.10307312 -74.33834076]
[-167.80134583 -83.72719574]
[-183.40682983 -86.33084106]
[-188.48968506 -100.33134460]
[-200.18794250 -109.72019196]
[-211.88621521 -119.10904694]
[-223.68620300 -128.36973572]
[-235.58650208 -137.50115967]
[-253.86256409 -139.44441223]
[-260.00982666 -155.84701538]
[-272.10647583 -164.71665955]
[-288.45819092 -165.96315002]
[-295.30966187 -180.86245728]
[-285.61270142 -194.08746338]
[-269.34268188 -192.03340149]
[-263.23684692 -176.81332397]
[-251.14016724 -167.94367981]
[-239.09204102 -169.46607971]
[-228.92874146 -162.11056519]
[-226.45507812 -149.40145874]
[-214.55477905 -140.27003479]
[-207.27832031 -138.68150330]
[-202.49736023 -130.80731201]
[-190.79910278 -121.41846466]
[-179.10083008 -112.02960968]
[-164.33206177 -110.09751129]
[-158.41249084 -95.42546082]
[-146.71421814 -86.03660583]
[-134.81391907 -76.90518951]
[-122.71724701 -68.03554535]
[-110.62058258 -59.16589737]
[-98.52391052 -50.29625320]
[-83.68492889 -49.01019669]
[-77.13099670 -34.61031723]
[-65.03433228 -25.74067497]
[-52.93766022 -16.87102890]
[-40.84099197 -8.00138474]
[-28.74432182 0.86825985]
[-13.90534115 2.15431452]
[-7.35140705 16.55419350]
[4.74526167 25.42383766]
[16.84193039 34.29348373]
[34.66985703 30.38629532]
[49.99766159 40.86688995]
[52.92380142 59.52451706]
[65.39584351 67.85807037]
[77.86788940 76.19162750]
[92.33098602 65.11892700]
[112.09897614 63.00634003]
[131.61216736 72.15077972]
[143.10284424 62.50896835]
[154.59350586 52.86715317]
[157.41851807 37.07478714]
[171.59487915 29.56411362]
[186.24771118 36.09667969]
[190.13659668 51.66125870]
[180.27832031 64.31803894]
[164.23532104 64.35781860]
[152.74464417 73.99963379]
[141.25398254 83.64144897]
[141.49937439 91.13743591]
[154.23747253 83.21650696]
[167.46618652 90.28765106]
[167.95664978 105.27963257]
[155.21838379 113.20027924]
[141.99015808 106.12940216]
[142.23554993 113.62538910]
[154.33222961 122.49503326]
[163.17552185 125.07509613]
[166.59320068 131.69247437]
[178.49349976 140.82388306]
[190.39379883 149.95530701]
[202.29409790 159.08673096]
[214.19439697 168.21815491]
[226.09469604 177.34957886]
[237.99499512 186.48100281]
[246.77990723 189.25335693]
[250.05241394 195.94372559]
[261.75067139 205.33256531]
[273.44894409 214.72142029]
[289.05444336 217.32507324]
[294.13729858 231.32557678]
[305.83557129 240.71443176]
[321.51666260 238.74493408]
[333.94607544 248.50634766]
[335.74966431 264.20736694]
[325.85739136 276.53289795]
[310.13815308 278.17037964]
[297.91790771 268.14834595]
[296.44671631 252.41268921]
[284.74844360 243.02383423]
[269.97967529 241.09173584]
[264.06008911 226.41969299]
[252.36183167 217.03083801]
[240.66357422 207.64198303]
[228.86358643 198.38130188]
[216.96328735 189.24987793]
[205.06298828 180.11845398]
[193.16267395 170.98703003]
[181.26237488 161.85560608]
[169.36207581 152.72419739]
[157.46177673 143.59277344]
[145.46258545 134.59170532]
[133.36590576 125.72205353]
[126.27864838 130.42820740]
[118.70956421 133.39669800]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 13]
[3 12]
[4 11]
[5 10]
[15 84]
[16 83]
[17 82]
[22 79]
[23 78]
[24 77]
[26 75]
[27 74]
[28 73]
[29 72]
[30 71]
[32 69]
[33 68]
[34 67]
[35 66]
[38 65]
[39 64]
[41 62]
[42 61]
[43 60]
[44 58]
[45 57]
[47 54]
[48 53]
[87 97]
[88 96]
[89 95]
[104 141]
[105 140]
[107 139]
[108 138]
[109 137]
[110 136]
[111 135]
[112 134]
[113 133]
[115 132]
[116 131]
[117 130]
[119 128]
[120 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
