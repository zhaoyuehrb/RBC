%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:40:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCCGAGUCCCAGCAUGCACCGCGCCCGGCCGGCUCUGCCUUUGGGGGCCAGCAGGGCUGUACCUGGGAGUUGGGUUGGGGCGGAGCGGAGGGGAGGCCGUGCCAGGCAGGGCCGGUUCGUGCGGAACCGCC\
) } def
/len { sequence length } bind def

/coor [
[33.65756607 150.50791931]
[24.65075302 138.51303101]
[21.26353455 123.90047455]
[24.07447815 109.16620636]
[32.60345078 96.82698059]
[45.39362717 88.99043274]
[60.26032639 86.99513245]
[74.66662598 91.18318939]
[88.53512573 96.89849091]
[79.10443115 85.23393250]
[69.67374420 73.56936646]
[60.24304962 61.90480423]
[46.51514053 63.63499451]
[33.83481216 58.37513351]
[25.49514389 47.60767746]
[23.60401154 34.22983551]
[28.55216789 21.77442169]
[19.39751434 9.89198494]
[10.24285984 -1.99045253]
[-4.30872631 -8.20027733]
[-5.94711208 -23.00449753]
[-15.10176563 -34.88693619]
[-24.25642014 -46.76937103]
[-33.41107559 -58.65180969]
[-41.20315933 -63.59959412]
[-42.63715363 -70.92181396]
[-51.51073837 -83.01559448]
[-60.38431931 -95.10937500]
[-69.25790405 -107.20315552]
[-78.13148499 -119.29693604]
[-87.00507355 -131.39071655]
[-95.87865448 -143.48449707]
[-104.89339447 -155.47343445]
[-114.04804230 -167.35586548]
[-123.20269775 -179.23829651]
[-132.35736084 -191.12074280]
[-141.51200867 -203.00317383]
[-150.66665649 -214.88560486]
[-161.99243164 -224.72059631]
[-175.04103088 -232.11885071]
[-188.08961487 -239.51710510]
[-201.13821411 -246.91535950]
[-217.52371216 -246.24620056]
[-226.06614685 -260.24472046]
[-217.97781372 -274.51043701]
[-201.57928467 -274.36801147]
[-193.73995972 -259.96395874]
[-180.69137573 -252.56570435]
[-167.64277649 -245.16744995]
[-154.59417725 -237.76919556]
[-148.76190186 -242.48454285]
[-151.09713745 -257.30163574]
[-137.09733582 -251.91523743]
[-131.26504517 -256.63058472]
[-135.76632690 -270.93927002]
[-140.26759338 -285.24795532]
[-144.76885986 -299.55664062]
[-158.89678955 -306.64022827]
[-163.79853821 -321.66516113]
[-156.56599426 -335.71740723]
[-141.49008179 -340.46002197]
[-127.51508331 -333.07931519]
[-122.93211365 -317.95410156]
[-130.46017456 -304.05792236]
[-125.95890045 -289.74923706]
[-121.45763397 -275.44055176]
[-116.95635986 -261.13183594]
[-138.78422546 -224.04026794]
[-129.62957764 -212.15782166]
[-120.47491455 -200.27539062]
[-111.32025909 -188.39295959]
[-102.16561127 -176.51051331]
[-93.01095581 -164.62808228]
[-86.37474060 -161.21752930]
[-83.78487396 -152.35807800]
[-74.91129303 -140.26429749]
[-66.03770447 -128.17051697]
[-57.16412354 -116.07673645]
[-48.29054260 -103.98295593]
[-39.41695786 -91.88917542]
[-30.54337502 -79.79539490]
[-21.52863693 -67.80646515]
[-12.37398243 -55.92402649]
[-3.21932864 -44.04158783]
[5.93532515 -32.15915298]
[19.83210945 -26.79923820]
[22.12529755 -11.14510632]
[31.27995110 0.73733068]
[40.43460464 12.61976814]
[56.77661133 11.61518383]
[70.65454865 20.61091614]
[76.52616119 36.24900055]
[71.90760803 52.47410965]
[81.33830261 64.13867188]
[90.76899719 75.80323792]
[100.19969177 87.46779633]
[112.79250336 95.61771393]
[127.29644775 99.44335175]
[141.80039978 103.26899719]
[156.30433655 107.09463501]
[171.62147522 103.13284302]
[181.95451355 113.86026764]
[196.45846558 117.68591309]
[210.96241760 121.51155090]
[227.81980896 119.70482635]
[234.22253418 135.40327454]
[220.91001892 145.90153503]
[207.13676453 136.01550293]
[192.63282776 132.18986511]
[178.12887573 128.36421204]
[163.84915161 132.59963989]
[152.47869873 121.59857941]
[137.97474670 117.77294159]
[123.47080994 113.94730377]
[108.96685791 110.12165833]
[99.81221008 122.00409698]
[107.21045685 135.05268860]
[114.60871124 148.10128784]
[122.00696564 161.14988708]
[129.40522766 174.19847107]
[144.42347717 179.84042358]
[149.23889160 195.14373779]
[140.15751648 208.36901855]
[124.14577484 209.37095642]
[113.48652649 197.38096619]
[116.35662842 181.59672546]
[108.95837402 168.54814148]
[101.56011963 155.49954224]
[94.16186523 142.45094299]
[86.76361084 129.40234375]
[87.00035858 144.40048218]
[75.90749359 154.49742126]
[61.67910385 159.24641418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 96]
[10 95]
[11 94]
[12 93]
[17 89]
[18 88]
[19 87]
[21 85]
[22 84]
[23 83]
[24 82]
[26 81]
[27 80]
[28 79]
[29 78]
[30 77]
[31 76]
[32 75]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[39 50]
[40 49]
[41 48]
[42 47]
[54 67]
[55 66]
[56 65]
[57 64]
[97 115]
[98 114]
[99 113]
[100 112]
[102 110]
[103 109]
[104 108]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
