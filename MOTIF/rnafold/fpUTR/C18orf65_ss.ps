%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:04:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUGAGGGGACAGUCUGGAGGCUUGCAGUGACUCAGACACAGCCAAUUCCUCCCCUAAUAGCACUGAAUCACGGUUCCAGCGGCCAGUGGUCGCCCCUCGUCAAGGUCUAAGGCUGCUGCAGCCCCGGCUCCCGGAGGCCGUUUCCGCGCGCACACGCGCAUCCAUACGUACAGACGUGCUCGGG\
) } def
/len { sequence length } bind def

/coor [
[78.64022064 198.50047302]
[62.85557938 197.71270752]
[52.31328964 185.93833923]
[53.26791000 170.16290283]
[65.15307617 159.74568176]
[65.90076447 144.76432800]
[66.64845276 129.78297424]
[67.39614105 114.80162811]
[63.93690491 100.20595551]
[56.54512787 87.15368652]
[49.15335083 74.10142517]
[41.76156998 61.04916000]
[34.36979294 47.99689484]
[26.97801590 34.94462967]
[13.44487572 26.74922371]
[13.90568352 11.86174774]
[6.51390600 -1.19051707]
[-0.87787211 -14.24278164]
[-8.26965046 -27.29504776]
[-22.23275566 -32.77516174]
[-36.52910614 -28.23486137]
[-50.82545853 -23.69455910]
[-65.12181091 -19.15425873]
[-79.41815948 -14.61395645]
[-84.60700226 2.74306369]
[-99.04090118 13.42897606]
[-116.84259796 13.32689953]
[-130.90275574 2.66586971]
[-145.04029846 7.67884779]
[-155.46119690 19.58327103]
[-170.04248047 16.54428101]
[-184.18002319 21.55725861]
[-198.31756592 26.57023811]
[-203.61801147 41.28211594]
[-217.16091919 49.10027695]
[-232.55174255 46.33322906]
[-242.52340698 34.28748703]
[-242.36758423 18.65067863]
[-232.15786743 6.80603027]
[-216.71496582 4.34622049]
[-203.33053589 12.43269730]
[-189.19299316 7.41971922]
[-175.05546570 2.40674090]
[-165.64576721 -9.13912106]
[-150.05326843 -6.45869255]
[-135.91572571 -11.47167110]
[-134.23092651 -23.51548004]
[-127.53956604 -33.75657654]
[-117.06346893 -40.21248627]
[-104.76391602 -41.60233307]
[-92.97451019 -37.60051727]
[-83.95846558 -28.91030884]
[-69.66210938 -33.45061111]
[-55.36576080 -37.99090958]
[-41.06940842 -42.53121185]
[-26.77305794 -47.07151413]
[-41.49602127 -49.94105911]
[-56.21898651 -52.81060791]
[-70.75482941 -49.10799408]
[-85.72790527 -50.00630188]
[-99.71679688 -55.42026138]
[-111.39350128 -64.83591461]
[-119.64954376 -77.35940552]
[-123.70114136 -91.80185699]
[-123.16368103 -106.79222870]
[-118.08818054 -120.90744019]
[-108.95646667 -132.80752563]
[-96.63542938 -141.36276245]
[-82.29473877 -145.76100159]
[-67.29576874 -145.58470154]
[-53.06241989 -140.85060120]
[-40.94588089 -132.00811768]
[-32.09640121 -119.89668274]
[-27.35328102 -105.66131592]
[-23.39151001 -91.19396210]
[-19.42973709 -76.72660828]
[-15.97049999 -91.32228088]
[-12.51126194 -105.91795349]
[-9.05202389 -120.51362610]
[-13.39822578 -135.72616577]
[-2.93437409 -146.32601929]
[0.52486396 -160.92169189]
[3.98410201 -175.51736450]
[7.44334030 -190.11303711]
[10.90257835 -204.70870972]
[14.36181641 -219.30438232]
[17.82105446 -233.90005493]
[21.28029251 -248.49572754]
[15.18209553 -259.87527466]
[18.37688446 -271.96990967]
[28.62120628 -278.42495728]
[32.32256699 -292.96112061]
[36.02392960 -307.49728394]
[34.59714127 -313.98428345]
[36.40237045 -319.39813232]
[40.09745026 -322.45101929]
[44.27992249 -336.85610962]
[48.46239471 -351.26123047]
[38.24714661 -362.82202148]
[35.92636490 -378.07382202]
[42.24060059 -392.14984131]
[55.17500687 -400.55844116]
[70.60226440 -400.61648560]
[83.59958649 -392.30548096]
[90.01956940 -378.27737427]
[87.81363678 -363.00854492]
[77.68567657 -351.37118530]
[62.86749268 -347.07876587]
[58.68502045 -332.67364502]
[54.50254822 -318.26855469]
[50.56008911 -303.79592896]
[46.85872650 -289.25976562]
[43.15736771 -274.72360229]
[48.81958008 -258.12167358]
[35.87596512 -245.03649902]
[32.41672897 -230.44082642]
[28.95748901 -215.84515381]
[25.49825096 -201.24948120]
[22.03901291 -186.65380859]
[18.57977486 -172.05813599]
[15.12053680 -157.46246338]
[11.66129875 -142.86679077]
[16.25492859 -128.69822693]
[5.54364920 -117.05438995]
[2.08441114 -102.45871735]
[-1.37482679 -87.86304474]
[-4.83406496 -73.26737213]
[6.07653952 -62.97374725]
[20.44638252 -67.27579498]
[34.81622696 -71.57784271]
[49.18606949 -75.87989044]
[62.62567902 -86.21493530]
[76.27728271 -76.16157532]
[70.39595032 -60.26043320]
[53.48811722 -61.51004791]
[39.11827469 -57.20800018]
[24.74843025 -52.90595245]
[10.37858868 -48.60390472]
[4.78261471 -34.68682480]
[12.17439270 -21.63455963]
[19.56617165 -8.58229542]
[26.95794868 4.46996975]
[39.96237946 11.73179150]
[40.03028107 27.55285263]
[47.42205811 40.60511780]
[54.81383514 53.65738297]
[62.20561600 66.70964813]
[69.59738922 79.76190948]
[76.98917389 92.81417847]
[140.47958374 74.20215607]
[153.71208191 81.26623535]
[166.94456482 88.33031464]
[180.17706299 95.39439392]
[193.40954590 102.45847321]
[209.77272034 101.37290192]
[218.66835022 115.14969635]
[210.94535828 129.61647034]
[194.54850769 129.89103699]
[186.34547424 115.69096375]
[173.11297607 108.62688446]
[159.88049316 101.56280518]
[146.64799500 94.49872589]
[133.41551208 87.43464661]
[127.83358765 92.44385529]
[137.85200500 103.60769653]
[147.87042236 114.77153778]
[157.88865662 125.93554688]
[146.72448730 135.95358276]
[136.70658875 124.78995514]
[126.68816376 113.62611389]
[116.66975403 102.46227264]
[111.08782959 107.47148132]
[116.68379974 121.38855743]
[122.27977753 135.30563354]
[127.87574768 149.22271729]
[141.10845947 158.90916443]
[139.06735229 175.18080139]
[123.85213470 181.29875183]
[111.11492157 170.96939087]
[113.95867157 154.81869507]
[108.36270142 140.90161133]
[102.76672363 126.98453522]
[97.17075348 113.06745148]
[82.37749481 115.54931641]
[81.62980652 130.53067017]
[80.88211823 145.51202393]
[80.13442993 160.49337769]
[90.92332458 172.04220581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 187]
[6 186]
[7 185]
[8 184]
[9 149]
[10 148]
[11 147]
[12 146]
[13 145]
[14 144]
[16 142]
[17 141]
[18 140]
[19 139]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[28 46]
[29 45]
[31 43]
[32 42]
[33 41]
[76 127]
[77 126]
[78 125]
[79 124]
[81 122]
[82 121]
[83 120]
[84 119]
[85 118]
[86 117]
[87 116]
[88 115]
[91 113]
[92 112]
[93 111]
[96 110]
[97 109]
[98 108]
[128 138]
[129 137]
[130 136]
[131 135]
[150 163]
[151 162]
[152 161]
[153 160]
[154 159]
[172 183]
[173 182]
[174 181]
[175 180]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
