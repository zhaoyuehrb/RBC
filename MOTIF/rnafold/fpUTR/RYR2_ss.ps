%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:13:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGGCCCCCUCCAGCCCCCGGCUCCCGGCAGCAGAAGCAGAAGGCAGCGCCAGGGGCCGCCGCCGCCGCCGAGCUCCGCGGGGCUCGGGAGCCGGCCCCGGCGAGGAGGCGCGGAACC\
) } def
/len { sequence length } bind def

/coor [
[110.09215546 473.46212769]
[121.09397888 462.34933472]
[119.53896332 447.43014526]
[117.98394775 432.51098633]
[116.42893219 417.59179688]
[112.55929565 411.18792725]
[115.03237152 402.26586914]
[113.86519623 387.31134033]
[105.16101837 375.22470093]
[111.80104065 360.86431885]
[110.63386536 345.90979004]
[109.46668243 330.95529175]
[108.29949951 316.00076294]
[105.22307587 312.20407104]
[104.58087158 306.40310669]
[107.48052216 300.24319458]
[107.09111023 285.24826050]
[106.70169830 270.25332642]
[94.30188751 253.83860779]
[104.34932709 235.00251770]
[102.79431152 220.08334351]
[101.23929596 205.16415405]
[99.68428040 190.24497986]
[98.12926483 175.32580566]
[96.57424927 160.40661621]
[95.01923370 145.48744202]
[93.46421814 130.56825256]
[91.90920258 115.64907837]
[78.45402527 91.37034607]
[71.01030731 78.34763336]
[63.56658936 65.32492065]
[50.00090790 57.18349457]
[50.40240479 42.29430008]
[42.95868683 29.27158737]
[40.10821152 43.99825668]
[30.40619278 55.43813705]
[16.34267044 60.65516281]
[1.52707160 58.31037903]
[-10.23816013 49.00558090]
[-15.93345833 35.12885284]
[-14.09711647 20.24168205]
[-5.20043421 8.16488361]
[8.47324181 1.99798775]
[23.41453934 3.32373738]
[35.78890228 11.80204773]
[31.93797302 -2.69520545]
[28.08704567 -17.19245911]
[17.06617355 -28.54371262]
[21.27669334 -42.83079910]
[17.42576599 -57.32805252]
[13.57483768 -71.82530212]
[9.53603840 -86.27134705]
[5.31005049 -100.66374207]
[-4.95376921 -114.15782166]
[5.17165422 -127.75606537]
[21.04146576 -121.79071808]
[19.70244408 -104.88972473]
[23.92843246 -90.49733734]
[28.89180374 -84.89836884]
[28.07209015 -75.67623138]
[31.92301941 -61.17897797]
[35.77394485 -46.68172455]
[46.51937485 -36.36741257]
[42.58429718 -21.04338646]
[46.43522644 -6.54613352]
[50.28615570 7.95111990]
[55.98139954 21.82786942]
[63.42511749 34.85058212]
[76.45837402 42.06053925]
[76.58930206 57.88120270]
[84.03302002 70.90391541]
[91.47673798 83.92662811]
[105.97399139 87.77755737]
[118.89897919 80.16541290]
[131.82395935 72.55327606]
[144.74894714 64.94113159]
[157.67393494 57.32898712]
[170.59892273 49.71684265]
[178.19996643 35.18562698]
[194.59391785 34.77315521]
[202.91610718 48.90373611]
[194.60534668 63.04104614]
[178.21105957 62.64183044]
[165.28608704 70.25397491]
[152.36109924 77.86611938]
[139.43611145 85.47825623]
[126.51112366 93.09040070]
[113.58613586 100.70254517]
[106.82837677 114.09406281]
[108.38339233 129.01324463]
[109.93840790 143.93241882]
[111.49342346 158.85160828]
[113.04843903 173.77078247]
[114.60345459 188.68995667]
[116.15847015 203.60914612]
[117.71348572 218.52832031]
[119.26850128 233.44750977]
[127.49859619 238.47567749]
[132.35664368 246.64625549]
[132.82920837 256.00125122]
[128.93624878 264.36807251]
[121.69664764 269.86392212]
[122.08605957 284.85885620]
[122.47546387 299.85379028]
[123.25402069 314.83358765]
[124.42120361 329.78808594]
[125.58838654 344.74261475]
[126.75556183 359.69714355]
[135.54322815 372.85342407]
[128.81971741 386.14416504]
[129.98689270 401.09866333]
[131.34811401 416.03677368]
[132.90312195 430.95596313]
[134.45814514 445.87515259]
[136.01315308 460.79431152]
[149.07015991 469.39947510]
[153.49157715 484.39898682]
[147.18972778 498.71054077]
[133.14015198 505.57666016]
[117.97665405 501.75540161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 115]
[3 114]
[4 113]
[5 112]
[7 111]
[8 110]
[10 108]
[11 107]
[12 106]
[13 105]
[16 104]
[17 103]
[18 102]
[20 97]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[27 90]
[28 89]
[29 72]
[30 71]
[31 70]
[33 68]
[34 67]
[45 66]
[46 65]
[47 64]
[49 62]
[50 61]
[51 60]
[52 58]
[53 57]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
