%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:27:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGCUCCAGACUCAACAGGUGAUUGGCCCAGAGAGGGGAGGUGACCCCAGGCCCCAGGAAAGGGAGCGAGGACAGCGCUGGUUCCCGGCUCCCCGCACCAUC\
) } def
/len { sequence length } bind def

/coor [
[72.12199402 181.42990112]
[82.43136597 169.45106506]
[81.07388306 154.51261902]
[79.71640015 139.57417297]
[78.35891724 124.63572693]
[69.65247345 112.42107391]
[55.97397232 106.26487732]
[42.29547501 100.10868835]
[32.73194504 111.76947784]
[20.48536491 120.55052185]
[6.39404726 125.85813141]
[-8.57933712 127.33611298]
[-23.41351128 124.88969421]
[-37.09825897 118.69158173]
[-48.70321655 109.16973114]
[-57.44111633 96.97787476]
[-62.72121429 82.95057678]
[-64.18920135 68.04615021]
[-61.75098801 53.28117371]
[-75.42948914 47.12498093]
[-89.10798645 40.96879196]
[-104.86784363 42.36066437]
[-113.29835510 30.08158875]
[-126.97685242 23.92539597]
[-140.65534973 17.76920319]
[-155.27891541 23.13476753]
[-169.06315613 16.69665909]
[-174.08828735 2.72226381]
[-187.76678467 -3.43392825]
[-201.44528198 -9.59012032]
[-216.89529419 -5.26850271]
[-229.82218933 -14.76981544]
[-230.30955505 -30.80546379]
[-217.98352051 -41.07427216]
[-202.29956055 -37.69888687]
[-195.28907776 -23.26861763]
[-181.61058044 -17.11242676]
[-167.93208313 -10.95623398]
[-154.13983154 -16.46161079]
[-140.18019104 -10.41321182]
[-134.49916077 4.09070587]
[-120.82066345 10.24689770]
[-107.14216614 16.40308952]
[-92.36067963 14.57088280]
[-82.95178986 27.29029274]
[-69.27329254 33.44648361]
[-55.59479523 39.60267639]
[-46.15988541 27.98665619]
[-34.03030777 19.20199966]
[-20.02937508 13.85239124]
[-5.10933590 12.30810642]
[9.71337700 14.68038845]
[23.42740059 20.81345749]
[35.09544373 30.29472542]
[43.91835022 42.48254776]
[49.28982544 56.54964066]
[50.83810043 71.53924561]
[48.45166779 86.43019104]
[62.13016510 92.58638000]
[75.80866241 98.74257660]
[87.04533386 81.63730621]
[105.92648315 80.14466858]
[117.64236450 93.02967072]
[132.63552856 93.48271942]
[147.62867737 93.93576050]
[162.62184143 94.38880920]
[177.61499023 94.84185791]
[192.60815430 95.29489899]
[204.06524658 84.74156952]
[219.26397705 85.41460419]
[229.25436401 96.40222931]
[244.24751282 96.85527802]
[259.24066162 97.30831909]
[265.48178101 94.40235901]
[271.33532715 95.10736847]
[275.11773682 98.26870728]
[290.05618286 99.62619019]
[304.70690918 92.25812531]
[318.26278687 101.48691559]
[316.77868652 117.81877136]
[301.78131104 124.45288086]
[288.69869995 114.56463623]
[273.76025391 113.20715332]
[258.78762817 112.30147552]
[243.79447937 111.84843445]
[228.80131531 111.39538574]
[218.16574097 121.75976562]
[202.95410156 121.51389313]
[192.15510559 110.28805542]
[177.16194153 109.83501434]
[162.16879272 109.38196564]
[147.17562866 108.92891693]
[132.18247986 108.47587585]
[117.18932343 108.02282715]
[108.94176483 119.65864563]
[93.29736328 123.27824402]
[94.65484619 138.21669006]
[96.01232910 153.15513611]
[97.36981201 168.09358215]
[109.66956329 178.01788330]
[111.26615906 193.74131775]
[101.21237183 205.93545532]
[85.47293854 207.36572266]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 99]
[3 98]
[4 97]
[5 96]
[6 60]
[7 59]
[8 58]
[19 47]
[20 46]
[21 45]
[23 43]
[24 42]
[25 41]
[28 38]
[29 37]
[30 36]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
[71 86]
[72 85]
[73 84]
[76 83]
[77 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
