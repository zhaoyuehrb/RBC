%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:10:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUGGUCCGAGCUGCCGAAAGGUCUGGUCGCAGAGACAGGAACGUGUAAUCCUCAGCGUGCUCCAGCCCACAGCUUCGCUCUACUGCUCGGCAGGGCAGCUGGCCUCUGGGCACCGGCGGCCCCUCUGCCUCGCGGAAAAGCCUG\
) } def
/len { sequence length } bind def

/coor [
[71.53096771 254.60270691]
[81.27712250 241.85939026]
[80.63617706 226.87309265]
[79.99523163 211.88679504]
[68.88323975 202.03492737]
[68.01974487 186.84582520]
[78.42863464 175.25733948]
[77.78768921 160.27104187]
[77.14674377 145.28474426]
[76.50579071 130.29844666]
[76.42959595 115.47883606]
[82.50863647 104.48361969]
[92.10962677 99.37365723]
[81.00546265 89.28914642]
[69.90129089 79.20463562]
[58.79711914 69.12011719]
[47.69295120 59.03560638]
[36.58877945 48.95109177]
[25.48460960 38.86658096]
[13.96486759 42.53122330]
[1.45735085 39.15504837]
[-7.82785702 28.91551590]
[-21.67066574 23.13826370]
[-37.38623047 24.96352386]
[-46.15162277 12.92121601]
[-59.99443054 7.14396381]
[-73.83724213 1.36671162]
[-87.68004608 -4.41054058]
[-99.93128967 -0.23136470]
[-111.36752319 -5.38214874]
[-116.04626465 -16.58530235]
[-129.76245117 -22.65705109]
[-143.47863770 -28.72880173]
[-155.12338257 -18.92261887]
[-169.81115723 -15.16010857]
[-184.61541748 -18.13565826]
[-196.61039734 -27.20657158]
[-203.44926453 -40.53096390]
[-203.82321167 -55.44155121]
[-217.53939819 -61.51330185]
[-231.25558472 -67.58505249]
[-244.97177124 -73.65679932]
[-258.32525635 -65.75337982]
[-273.77078247 -67.24186707]
[-285.36920166 -77.54991913]
[-288.66073608 -92.71386719]
[-282.37966919 -106.90287781]
[-268.94125366 -114.66098022]
[-253.51278687 -113.00502777]
[-242.02685547 -102.57176208]
[-238.90002441 -87.37299347]
[-225.18383789 -81.30123901]
[-211.46765137 -75.22949219]
[-197.75146484 -69.15773773]
[-186.46208191 -78.90531921]
[-172.00054932 -82.80065918]
[-157.22131348 -80.01942444]
[-145.06565857 -71.06061554]
[-137.97636414 -57.65804672]
[-137.40689087 -42.44499207]
[-123.69070435 -36.37324142]
[-109.97451782 -30.30149078]
[-92.68702698 -33.13872910]
[-81.90279388 -18.25334930]
[-68.05998993 -12.47609711]
[-54.21717834 -6.69884539]
[-40.37437057 -0.92159325]
[-25.64893532 -3.16008067]
[-15.89341354 9.29545593]
[-2.05060482 15.07270718]
[-11.42905045 3.36609578]
[-22.56075478 -6.68801641]
[-24.92895508 -21.49989128]
[-17.48706436 -34.52364731]
[-3.52391005 -40.00363922]
[10.78970718 -35.51807022]
[19.12810516 -23.04926300]
[17.80642319 -8.10798264]
[18.89405441 6.85253429]
[25.11202240 -6.79799223]
[19.34055901 -21.51076698]
[25.73950195 -35.96168518]
[40.51247406 -41.57727432]
[54.89493179 -35.02590561]
[60.35401917 -20.19438744]
[53.65095520 -5.88199806]
[38.76255035 -0.58002454]
[32.54458237 13.07050228]
[35.56912231 27.76240921]
[46.67329407 37.84692383]
[57.77746201 47.93143463]
[68.88162994 58.01594925]
[79.98580170 68.10046387]
[91.08997345 78.18497467]
[102.19414520 88.26949310]
[115.77745056 94.63296509]
[130.63294983 96.70997620]
[145.48846436 98.78699493]
[160.34396362 100.86400604]
[175.19946289 102.94102478]
[188.92855835 92.15466309]
[205.88250732 94.55237579]
[215.68829346 108.17626190]
[230.58477783 109.93534088]
[245.48127747 111.69442749]
[260.37777710 113.45350647]
[274.99011230 107.38796997]
[286.72216797 116.56443787]
[301.61868286 118.32351685]
[316.51516724 120.08260345]
[331.41168213 121.84168243]
[347.85058594 117.69454956]
[356.38638306 132.34297180]
[344.67337036 144.60028076]
[329.65258789 136.73817444]
[314.75610352 134.97909546]
[299.85958862 133.22001648]
[284.96310425 131.46093750]
[271.41629028 137.65229797]
[258.61871338 128.35000610]
[243.72219849 126.59092712]
[228.82569885 124.83184052]
[213.92919922 123.07276154]
[204.99288940 132.41255188]
[192.11253357 134.91571045]
[179.97297668 129.44245911]
[173.12245178 117.79652405]
[158.26695251 115.71951294]
[143.41143799 113.64249420]
[128.55593872 111.56548309]
[113.70043182 109.48847198]
[108.14834595 114.53072357]
[111.32973480 129.18946838]
[97.04418182 124.61524200]
[91.49209595 129.65750122]
[92.13304138 144.64379883]
[92.77398682 159.63009644]
[93.41493225 174.61639404]
[104.77525330 185.27383423]
[105.21177673 200.48120117]
[94.98152924 211.24584961]
[95.62247467 226.23214722]
[96.26342010 241.21844482]
[107.06202698 253.08308411]
[104.37653351 268.89978027]
[90.26702881 276.53530884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 143]
[3 142]
[4 141]
[7 138]
[8 137]
[9 136]
[10 135]
[13 95]
[14 94]
[15 93]
[16 92]
[17 91]
[18 90]
[19 89]
[22 70]
[23 69]
[25 67]
[26 66]
[27 65]
[28 64]
[31 62]
[32 61]
[33 60]
[39 54]
[40 53]
[41 52]
[42 51]
[79 88]
[80 87]
[96 131]
[97 130]
[98 129]
[99 128]
[100 127]
[103 123]
[104 122]
[105 121]
[106 120]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
