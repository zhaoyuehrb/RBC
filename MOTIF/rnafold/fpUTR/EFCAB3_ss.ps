%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:03:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGAGGUGAUUGAUGUCCAGAACUUAGACAAUUUCUAGCAAGCGAAGGGAUUGAGCUCACAGAAGAAGAA\
) } def
/len { sequence length } bind def

/coor [
[106.61382294 359.22827148]
[98.22312927 346.62371826]
[94.38217926 331.97702026]
[95.50760651 316.87695312]
[101.47732544 302.96142578]
[111.64379883 291.73995972]
[124.90423584 284.42971802]
[122.29951477 269.65762329]
[119.69479370 254.88549805]
[117.09007263 240.11337280]
[102.70440674 236.17407227]
[91.40922546 226.33901978]
[85.48005676 212.51852417]
[86.14213562 197.43270874]
[93.31764221 184.07609558]
[105.63055420 175.12324524]
[103.02583313 160.35113525]
[100.42111206 145.57901001]
[97.81639099 130.80690002]
[82.75990295 125.62444305]
[72.28631592 113.63028717]
[69.17980957 98.01282501]
[74.26617432 82.92359924]
[86.19331360 72.37377167]
[82.94672394 57.72932816]
[78.74928284 43.32858276]
[73.61898804 29.23319244]
[68.48868561 15.13780308]
[63.35837936 1.04241419]
[49.48462296 -7.01354027]
[47.27550125 -22.90376854]
[58.42566299 -34.43864441]
[74.38166046 -32.76960373]
[82.90341949 -19.17698669]
[77.45376587 -4.08788776]
[82.58406830 10.00750160]
[87.71437073 24.10289001]
[92.84467316 38.19828033]
[96.20501709 40.03614044]
[98.71004486 43.76569748]
[99.39536285 48.89557648]
[97.59116364 54.48273468]
[100.83775330 69.12717438]
[114.15843201 72.55238342]
[124.67108917 81.42123413]
[130.29075623 93.97479248]
[129.90289307 107.72332001]
[123.58443451 119.94009399]
[112.58850098 128.20217896]
[115.19322968 142.97428894]
[117.79795074 157.74641418]
[120.40267181 172.51852417]
[135.03507996 176.72018433]
[146.34608459 186.81712341]
[152.12788391 200.76670837]
[151.28317261 215.78161621]
[144.03297424 228.88673401]
[131.86218262 237.50865173]
[134.46690369 252.28077698]
[137.07162476 267.05288696]
[139.67636108 281.82501221]
[154.63732910 284.15902710]
[168.02867126 291.22665405]
[178.39775085 302.26116943]
[184.61982727 316.06567383]
[186.01998901 331.14276123]
[182.44633484 345.85696411]
[174.28651428 358.61218262]
[162.42564392 368.02487183]
[148.15031433 373.07397461]
[133.00898743 373.21182251]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 61]
[8 60]
[9 59]
[10 58]
[16 52]
[17 51]
[18 50]
[19 49]
[24 43]
[25 42]
[26 38]
[27 37]
[28 36]
[29 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
