%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCGCGCAGGCUCUUCAGCUGGAGCGGACACACGGUGUGCGAACCGAACAGAAUAACCCGCCCCCAGCGGGAUGUGAAGGACUCCGGGUGAGGCCGGCCACGCCCCGCACGGAUGGGAAGGCCAUUGUGACUAUGUGGUGAUUACAGUUGUCUUACUACUGAGUUUCCUACUGAAAUC\
) } def
/len { sequence length } bind def

/coor [
[524.79882812 285.18002319]
[522.37768555 279.30889893]
[521.70074463 272.95364380]
[507.86743164 267.15362549]
[494.03414917 261.35363770]
[476.78329468 264.51400757]
[465.74005127 249.79371643]
[451.80868530 244.23335266]
[437.87734985 238.67298889]
[426.62570190 243.15849304]
[414.96389771 238.61962891]
[409.35559082 226.98574829]
[395.52230835 221.18574524]
[381.68902588 215.38574219]
[367.85571289 209.58573914]
[353.92437744 204.02537537]
[339.89913940 198.70629883]
[325.87390137 193.38723755]
[311.84863281 188.06816101]
[297.82339478 182.74908447]
[283.17950439 185.47042847]
[273.01980591 173.34231567]
[258.99456787 168.02325439]
[244.96932983 162.70417786]
[230.94407654 157.38510132]
[216.91883850 152.06602478]
[202.89360046 146.74696350]
[190.64219666 157.26507568]
[174.66757202 160.19375610]
[159.30529785 154.64201355]
[148.77323914 142.03366089]
[146.01364136 125.74345398]
[131.89866638 120.66725922]
[117.78370667 115.59106445]
[103.66873932 110.51486969]
[88.77810669 108.70681763]
[73.85848236 110.25757599]
[58.93886185 111.80833435]
[44.01923752 113.35909271]
[34.25499725 125.78629303]
[18.55354881 127.58630371]
[6.23028278 117.69122314]
[4.59637308 101.97162628]
[14.62119102 89.75366211]
[30.35718918 88.28604126]
[42.46847916 98.43947601]
[57.38810349 96.88871765]
[72.30772400 95.33795166]
[87.22734833 93.78719330]
[89.58187866 86.66636658]
[75.34022522 81.95729828]
[61.09857559 77.24823761]
[46.85692215 72.53916931]
[32.61534500 67.82986450]
[37.32488632 53.58836746]
[51.56599045 58.29751205]
[65.80764008 63.00658035]
[80.04929352 67.71565247]
[94.29094696 72.42471313]
[96.64548492 65.30388641]
[85.59117889 55.16473389]
[74.53688049 45.02558136]
[63.48258209 34.88642502]
[52.42828369 24.74727058]
[36.40264130 24.00005722]
[27.11210442 10.92085552]
[31.68358040 -4.45708895]
[46.61022186 -10.33713341]
[60.44158936 -2.20861101]
[62.56743622 13.69297123]
[73.62173462 23.83212662]
[84.67604065 33.97127914]
[95.73033905 44.11043549]
[106.78463745 54.24958801]
[117.15993500 78.05975342]
[108.74493408 96.39990234]
[122.85990143 101.47609711]
[136.97486877 106.55229950]
[151.08982849 111.62849426]
[161.29937744 102.04609680]
[174.57987976 97.82293701]
[188.31771851 99.73023987]
[199.83496094 107.33856201]
[206.91145325 119.11282349]
[208.21266174 132.72171021]
[222.23791504 138.04078674]
[236.26315308 143.35986328]
[250.28839111 148.67893982]
[264.31362915 153.99800110]
[278.33889771 159.31707764]
[293.98596191 156.97618103]
[303.14248657 168.72384644]
[317.16772461 174.04290771]
[331.19296265 179.36198425]
[345.21820068 184.68106079]
[359.24343872 190.00013733]
[365.86132812 189.31376648]
[371.04272461 191.72665405]
[373.65573120 195.75245667]
[387.48901367 201.55244446]
[401.32229614 207.35244751]
[415.15560913 213.15245056]
[433.35006714 210.39524841]
[443.43771362 224.74163818]
[457.36904907 230.30201721]
[471.30041504 235.86238098]
[483.45523071 231.49658203]
[494.95388794 236.43418884]
[499.83413696 247.52033997]
[513.66741943 253.32034302]
[527.50073242 259.12033081]
[551.26336670 253.49012756]
[565.45941162 272.48995972]
[579.89093018 276.58023071]
[594.32250977 280.67053223]
[603.45892334 280.00057983]
[608.96667480 284.95797729]
[623.32550049 289.29675293]
[637.68426514 293.63552856]
[652.04309082 297.97433472]
[666.40185547 302.31311035]
[657.57330322 290.18643188]
[655.87713623 275.28262329]
[661.75506592 261.48223877]
[673.67651367 252.37850952]
[688.53759766 250.34176636]
[702.46887207 255.90231323]
[711.84301758 267.61236572]
[714.21929932 282.42294312]
[708.97900391 296.47781372]
[697.48651123 306.11746216]
[682.73498535 308.83209229]
[696.13519287 315.57263184]
[709.53533936 322.31320190]
[722.93554688 329.05374146]
[737.77697754 324.32403564]
[751.27062988 331.35083008]
[755.68823242 345.52899170]
[769.08837891 352.26956177]
[782.48858643 359.01010132]
[795.88873291 365.75067139]
[809.28894043 372.49121094]
[822.68914795 379.23178101]
[836.08929443 385.97232056]
[848.57525635 382.67053223]
[859.60546875 388.58096313]
[863.51190186 400.04650879]
[876.79376221 407.01736450]
[893.14886475 405.81674194]
[902.14117432 419.53063965]
[894.52008057 434.05136108]
[878.12561035 434.44125366]
[869.82293701 420.29919434]
[856.54107666 413.32836914]
[839.08197021 414.98995972]
[829.34875488 399.37249756]
[815.94854736 392.63195801]
[802.54840088 385.89138794]
[789.14819336 379.15084839]
[775.74804688 372.41027832]
[762.34783936 365.66973877]
[748.94763184 358.92916870]
[734.93072510 363.83441162]
[721.24499512 357.18942261]
[716.19500732 342.45394897]
[702.79479980 335.71337891]
[689.39459229 328.97280884]
[675.99444580 322.23226929]
[662.06311035 316.67190552]
[647.70428467 312.33312988]
[633.34552002 307.99432373]
[618.98669434 303.65554810]
[604.62792969 299.31677246]
[590.23217773 295.10208130]
[575.80065918 291.01177979]
[561.36914062 286.92147827]
[557.20965576 291.33920288]
[551.94097900 294.42956543]
[545.97662354 295.92358398]
[539.79248047 295.67868042]
[533.88830566 293.69189453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 111]
[4 110]
[5 109]
[7 106]
[8 105]
[9 104]
[12 102]
[13 101]
[14 100]
[15 99]
[16 96]
[17 95]
[18 94]
[19 93]
[20 92]
[22 90]
[23 89]
[24 88]
[25 87]
[26 86]
[27 85]
[32 79]
[33 78]
[34 77]
[35 76]
[36 49]
[37 48]
[38 47]
[39 46]
[60 74]
[61 73]
[62 72]
[63 71]
[64 70]
[113 176]
[114 175]
[115 174]
[117 173]
[118 172]
[119 171]
[120 170]
[121 169]
[132 168]
[133 167]
[134 166]
[135 165]
[138 162]
[139 161]
[140 160]
[141 159]
[142 158]
[143 157]
[144 156]
[147 154]
[148 153]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
