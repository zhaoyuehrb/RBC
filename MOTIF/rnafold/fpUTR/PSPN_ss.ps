%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 04:14:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCUCCCAGCCCAGGCAGGGCAUAAAUUUGGGGCACAGCUCCCACUCUCAGGACCUGCCCGUCACA\
) } def
/len { sequence length } bind def

/coor [
[52.58016205 289.64282227]
[42.73047256 289.38238525]
[33.34571075 286.44564819]
[24.30619240 298.41589355]
[15.26667213 310.38616943]
[10.54654503 326.66979980]
[-6.40737915 326.64190674]
[-11.07387924 310.34280396]
[3.29641366 301.34664917]
[12.33593273 289.37637329]
[21.37545204 277.40612793]
[12.76254845 258.16070557]
[16.53343582 237.29858398]
[31.50059891 222.12171936]
[52.53472900 218.01672363]
[57.30159760 203.79431152]
[62.06847000 189.57191467]
[66.83534241 175.34950256]
[71.60221100 161.12709045]
[76.36908722 146.90467834]
[64.11548615 138.35063171]
[54.76705170 126.69174957]
[49.08063126 112.87194061]
[47.51658249 98.01004028]
[50.20153046 83.30923462]
[56.91810608 69.95970154]
[67.12254333 59.04219055]
[79.98870087 51.44057846]
[94.47495270 47.77028656]
[109.40850830 48.32844925]
[114.17537689 34.10603714]
[118.94224548 19.88362885]
[123.70912170 5.66121960]
[128.14620972 -8.66750050]
[132.25115967 -23.09488487]
[130.77021790 -39.98402786]
[146.58935547 -46.08247375]
[156.82864380 -32.56976318]
[146.67854309 -18.98994064]
[142.57359314 -4.56255579]
[143.81628418 2.98750353]
[137.93153381 10.42809105]
[133.16465759 24.65050125]
[128.39778137 38.87290955]
[123.63091278 53.09532166]
[135.88452148 61.64937210]
[145.23294067 73.30825043]
[150.91937256 87.12805939]
[152.48341370 101.98995972]
[149.79847717 116.69076538]
[143.08189392 130.04029846]
[132.87745667 140.95780945]
[120.01129913 148.55941772]
[105.52504730 152.22972107]
[90.59149170 151.67155457]
[85.82462311 165.89396667]
[81.05775452 180.11636353]
[76.29087830 194.33877563]
[71.52400970 208.56118774]
[66.75713348 222.78359985]
[74.57807922 229.06253052]
[80.37373352 237.22398376]
[83.71150970 246.64027405]
[84.34730530 256.59072876]
[82.24340820 266.31692505]
[77.57050323 275.08047485]
[70.69390106 282.21899414]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 11]
[4 10]
[5 9]
[15 60]
[16 59]
[17 58]
[18 57]
[19 56]
[20 55]
[30 45]
[31 44]
[32 43]
[33 42]
[34 40]
[35 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
