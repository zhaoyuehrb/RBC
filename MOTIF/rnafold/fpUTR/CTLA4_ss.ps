%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:44:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUGUGUGUGCACAUGUGUAAUACAUAUCUGGGAUCAAAGCUAUCUAUAUAAAGUCCUUGAUUCUGUGUGGGUUCAAACACAUUUCAAAGCUUCAGGAUCCUGAAAGGUUUUGCUCUACUUCCUGAAGACCUGAACACCGCUCCCAUAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[77.20974731 261.07803345]
[75.09426880 246.09872437]
[77.71318817 231.19918823]
[84.80992889 217.83911133]
[95.68923187 207.32740784]
[109.28524780 200.69389343]
[107.17771149 185.84268188]
[105.07017517 170.99148560]
[100.99324036 164.77519226]
[103.07285309 155.82032776]
[101.26480103 140.92968750]
[99.45674896 126.03905487]
[85.65705872 120.15955353]
[73.66542053 129.17068481]
[67.28109741 143.64656067]
[52.45824432 145.10684204]
[40.46660233 154.11798096]
[28.47496223 163.12911987]
[16.48332024 172.14024353]
[4.49167919 181.15138245]
[-7.49996185 190.16252136]
[-16.53014946 204.51145935]
[-32.81813049 199.80635071]
[-32.80586624 182.85240173]
[-16.51109695 178.17086792]
[-4.51945448 169.15974426]
[7.47218704 160.14860535]
[19.46382904 151.13746643]
[31.45546913 142.12634277]
[43.44711304 133.11520386]
[48.97371292 119.28386688]
[64.65428162 117.17904663]
[76.64592743 108.16791534]
[75.13809967 93.24388885]
[61.58633804 86.81349945]
[48.03458405 80.38311768]
[34.48282623 73.95272827]
[20.93107033 67.52233887]
[7.37931347 61.09194946]
[-6.17244339 54.66156006]
[-24.45860100 56.59048843]
[-33.89826202 41.82559586]
[-47.57675934 35.66940308]
[-61.25525665 29.51321030]
[-73.67005157 38.55580139]
[-88.94456482 40.16355896]
[-102.97002411 33.90400696]
[-111.97365570 21.46092987]
[-113.53353119 6.18145418]
[-107.23004150 -7.82431746]
[-94.75880432 -16.78890228]
[-79.47451782 -18.30087280]
[-65.48857117 -11.95351696]
[-56.56312180 0.54575932]
[-55.09906387 15.83471298]
[-41.42056656 21.99090576]
[-27.74206924 28.14709854]
[-16.28697586 24.14990616]
[-4.82104492 29.21296883]
[0.25794521 41.10980225]
[13.80970192 47.54019165]
[27.36145782 53.97058105]
[40.91321564 60.40097046]
[54.46496964 66.83135986]
[68.01673126 73.26174927]
[81.56848145 79.69213104]
[93.82682037 71.04729462]
[92.31898499 56.12327194]
[90.81115723 41.19924927]
[89.30332947 26.27522850]
[87.79550171 11.35120487]
[74.32138062 3.65525174]
[67.97486115 -10.50459766]
[71.19631195 -25.68359184]
[82.74701691 -36.04509735]
[98.18549347 -37.60490799]
[111.57534027 -29.76323700]
[117.76787567 -15.53537369]
[114.38195038 -0.39221856]
[102.71952057 9.84337521]
[104.22734833 24.76739693]
[105.73518372 39.69142151]
[107.24301147 54.61544418]
[108.75083923 69.53946686]
[119.50881195 83.14113617]
[119.69649506 97.33921051]
[134.32995605 94.04347992]
[148.96340942 90.74774933]
[163.59687805 87.45202637]
[169.81256104 73.35694122]
[182.98211670 65.71387482]
[197.94989014 67.27262115]
[208.99746704 77.22695923]
[223.63093567 73.93123627]
[238.26438904 70.63550568]
[252.89785767 67.33977509]
[267.53131104 64.04405212]
[282.16476440 60.74832153]
[296.79824829 57.45259094]
[311.43170166 54.15686417]
[316.08001709 39.58496475]
[327.32382202 29.36372185]
[342.07608032 26.16407967]
[356.35360718 30.74748039]
[366.35263062 41.78763962]
[380.98611450 38.49191284]
[385.47875977 23.80478668]
[396.72399902 13.34343243]
[411.69692993 9.92189980]
[426.36990356 14.46056557]
[436.79595947 25.73855019]
[440.17053223 40.72213364]
[435.58590698 55.38080597]
[424.27529907 65.77146149]
[409.28121948 69.09906006]
[394.63699341 64.46849823]
[384.28182983 53.12537384]
[369.64837646 56.42110062]
[365.34759521 70.68184662]
[354.41339111 80.94339752]
[339.71380615 84.37686157]
[325.17382812 79.96260834]
[314.72741699 68.79032135]
[300.09396362 72.08605194]
[285.46051025 75.38178253]
[270.82705688 78.67751312]
[256.19357300 81.97323608]
[241.56011963 85.26896667]
[226.92666626 88.56469727]
[212.29319763 91.86042023]
[206.57960510 105.58969116]
[193.72518921 113.41452026]
[178.55062866 112.15507507]
[166.89260864 102.08548737]
[152.25914001 105.38121033]
[137.62568665 108.67694092]
[122.99222565 111.97267151]
[114.34738159 124.23100281]
[116.15543365 139.12164307]
[117.96348572 154.01226807]
[119.92137909 168.88394165]
[122.02891541 183.73515320]
[124.13645172 198.58634949]
[139.04122925 201.17532349]
[152.41554260 208.24519348]
[162.94909668 219.10333252]
[169.60992432 232.68598938]
[171.74548340 247.66246033]
[169.14653015 262.56549072]
[162.06768799 275.93505859]
[151.20248413 286.46133423]
[137.61537170 293.11306763]
[122.63748169 295.23858643]
[107.73618317 292.62966919]
[94.37136078 285.54187012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 143]
[7 142]
[8 141]
[10 140]
[11 139]
[12 138]
[13 33]
[14 32]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[21 25]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[39 61]
[40 60]
[42 57]
[43 56]
[44 55]
[67 84]
[68 83]
[69 82]
[70 81]
[71 80]
[86 137]
[87 136]
[88 135]
[89 134]
[93 130]
[94 129]
[95 128]
[96 127]
[97 126]
[98 125]
[99 124]
[100 123]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
