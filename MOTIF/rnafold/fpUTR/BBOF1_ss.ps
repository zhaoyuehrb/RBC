%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGCGCCGUCAGCGGCGCGGGUGGGGCAUUGCCAGCUCGGCGUCCCGGUUCCCUUGGAGACAGAGCUGGCCAGGGCGGCCGCGGCUGGGCAACUACGACAGCGGAGCCCCUGGGGAAGCCAAG\
) } def
/len { sequence length } bind def

/coor [
[76.71469879 115.65908051]
[69.22973633 115.18435669]
[61.62029648 128.11093140]
[54.01086044 141.03752136]
[46.40142441 153.96409607]
[38.79198837 166.89068604]
[31.18255043 179.81726074]
[23.57311440 192.74383545]
[23.97576332 209.13804626]
[9.84019470 217.45175171]
[-4.29213142 209.13253784]
[-3.88308930 192.73847961]
[10.64653397 185.13439941]
[18.25597000 172.20782471]
[25.86540794 159.28123474]
[33.47484589 146.35466003]
[41.08428192 133.42808533]
[48.69371796 120.50150299]
[56.30315399 107.57492065]
[65.27768707 94.21001434]
[77.16101074 87.46043396]
[88.70166016 87.42094421]
[97.01383972 92.83612061]
[100.40455627 78.22438049]
[103.79528046 63.61263657]
[107.18599701 49.00089264]
[110.57672119 34.38915253]
[99.71111298 12.33302116]
[113.91880035 -6.96329737]
[112.77980042 -21.91999054]
[111.64080811 -36.87668610]
[110.50180817 -51.83337784]
[109.36281586 -66.79006958]
[108.03444672 -81.73114014]
[106.51692200 -96.65417480]
[104.99939728 -111.57721710]
[103.48187256 -126.50025940]
[101.77543640 -141.40287781]
[99.88035583 -156.28268433]
[97.98527527 -171.16249084]
[96.09019470 -186.04229736]
[83.87639618 -195.70980835]
[82.16648865 -210.82705688]
[91.45825195 -222.41146851]
[89.56317139 -237.29127502]
[87.66809082 -252.17108154]
[85.58467865 -267.02569580]
[83.31326294 -281.85272217]
[81.04184723 -296.67974854]
[78.77043152 -311.50677490]
[66.31564331 -320.86175537]
[64.22332001 -335.93084717]
[73.21864319 -347.74691772]
[70.94722748 -362.57394409]
[68.67581177 -377.40097046]
[55.21968842 -385.36758423]
[50.08133698 -400.13684082]
[55.68692780 -414.73516846]
[69.38967133 -422.26968384]
[84.71955109 -419.18283081]
[94.43826294 -406.93206787]
[93.95693970 -391.30191040]
[83.50283051 -379.67239380]
[85.77425385 -364.84536743]
[88.04566956 -350.01834106]
[100.16575623 -341.43701172]
[102.68051147 -326.43264771]
[93.59745789 -313.77816772]
[95.86887360 -298.95114136]
[98.14028931 -284.12414551]
[100.41170502 -269.29711914]
[104.58209229 -263.09118652]
[102.54790497 -254.06616211]
[104.44297791 -239.18635559]
[106.33805847 -224.30654907]
[118.23686981 -215.42094421]
[120.37071991 -200.35769653]
[110.97000122 -187.93737793]
[112.86508179 -173.05757141]
[114.76016235 -158.17776489]
[116.65524292 -143.29795837]
[120.66707611 -136.98838806]
[118.40491486 -128.01777649]
[119.92243958 -113.09474182]
[121.43996429 -98.17169952]
[122.95748901 -83.24866486]
[126.80819702 -76.83949280]
[124.31951141 -67.92906952]
[125.45850372 -52.97237396]
[126.59750366 -38.01568222]
[127.73649597 -23.05898857]
[128.87548828 -8.10229397]
[135.61938477 -5.06835985]
[141.03535461 -0.03328444]
[144.55216980 6.47185373]
[145.79888916 13.76092148]
[159.99263000 18.61249161]
[175.97018433 14.91795540]
[186.95918274 27.09063148]
[181.65507507 42.60831451]
[165.51426697 45.50774384]
[155.14105225 32.80623245]
[140.94731140 27.95466232]
[136.75378418 32.57328033]
[131.37850952 35.94808578]
[125.18846130 37.77987289]
[121.79774475 52.39161301]
[118.40702057 67.00335693]
[115.01629639 81.61509705]
[111.62557983 96.22684479]
[112.95394897 111.16790771]
[118.86928558 124.95227051]
[124.78462219 138.73664856]
[139.08972168 145.99914551]
[142.18949890 161.73988342]
[131.70608521 173.88391113]
[115.68144989 173.11537170]
[106.40832520 160.02383423]
[111.00025177 144.65197754]
[105.08491516 130.86761475]
[99.16957855 117.08324432]
[91.68461609 116.60852051]
[90.73493958 131.57843018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[7 14]
[8 13]
[23 110]
[24 109]
[25 108]
[26 107]
[27 106]
[29 92]
[30 91]
[31 90]
[32 89]
[33 88]
[34 86]
[35 85]
[36 84]
[37 83]
[38 81]
[39 80]
[40 79]
[41 78]
[44 75]
[45 74]
[46 73]
[47 71]
[48 70]
[49 69]
[50 68]
[53 65]
[54 64]
[55 63]
[96 103]
[97 102]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
