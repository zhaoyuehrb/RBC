%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:11:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUUUGCCACCCCAUGCAGGCUUCUUGCCAUAGUUCAGCUGUUCUUCCUGCAGCUAAAGUGCAUUGUGUAAAAC\
) } def
/len { sequence length } bind def

/coor [
[65.05777740 332.66110229]
[54.41544342 320.97708130]
[55.23546600 305.19409180]
[67.03134918 294.67587280]
[67.65122223 279.68869019]
[68.27109528 264.70150757]
[68.89096832 249.71430969]
[69.51084900 234.72712708]
[66.55521393 227.71382141]
[70.47874451 219.13714600]
[71.71743774 204.18836975]
[64.22377777 196.73324585]
[62.18492508 186.13392639]
[66.55487061 176.02082825]
[76.04788208 170.00236511]
[78.51679993 155.20693970]
[80.98571777 140.41152954]
[83.45464325 125.61610413]
[85.92356110 110.82068634]
[79.33560944 97.34481812]
[66.14350128 90.20560455]
[52.95139694 83.06639862]
[37.22689819 86.24754333]
[25.02881050 75.82707214]
[25.71446419 59.79867935]
[38.75788116 50.45797348]
[54.15327072 54.97034454]
[60.09060669 69.87429047]
[73.28271484 77.01350403]
[86.47482300 84.15270996]
[74.72303009 74.83094025]
[71.13632965 60.26606369]
[77.21569824 46.55324936]
[90.41701508 39.43108749]
[105.21575165 41.88008499]
[115.41886139 52.87537766]
[116.75652313 67.81561279]
[108.66795349 80.44933319]
[118.82717133 69.41347504]
[128.98640442 58.37761688]
[139.14561462 47.34175873]
[149.30484009 36.30590057]
[159.46406555 25.27004051]
[157.27926636 9.78583527]
[165.60246277 -3.45267916]
[180.50372314 -8.19468021]
[194.94711304 -2.20113945]
[202.11291504 11.69797516]
[198.61764526 26.93992805]
[186.11166382 36.32793427]
[170.49992371 35.42926407]
[160.34069824 46.46512222]
[150.18147278 57.50098038]
[140.02226257 68.53684235]
[129.86303711 79.57270050]
[119.70381165 90.60855865]
[120.09609985 98.94453430]
[117.36666870 106.13996124]
[112.43278503 111.17427063]
[106.48068237 113.54188538]
[100.71897888 113.28960419]
[98.25006104 128.08502197]
[95.78114319 142.88044739]
[93.31222534 157.67585754]
[90.84329987 172.47128296]
[98.94170380 190.71565247]
[86.66620636 205.42706299]
[85.42751312 220.37582397]
[84.49803162 235.34700012]
[83.87815857 250.33418274]
[83.25828552 265.32138062]
[82.63840485 280.30856323]
[82.01853180 295.29574585]
[92.90554047 306.75213623]
[92.41941071 322.54895020]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 73]
[5 72]
[6 71]
[7 70]
[8 69]
[10 68]
[11 67]
[15 65]
[16 64]
[17 63]
[18 62]
[19 61]
[20 30]
[21 29]
[22 28]
[38 56]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
