%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:40:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCGGGCGGCUCCGGCUCCCGCAGCGGGACAGACCCACCCGCCCAGGCUUUUAUCCGGCACCGGCAGCGUCUUCCUUUCCUCCCCCGUCUAUGGUGGUGGCGGCGGCGGCUCCUCGGGCGGCGGCGGAAGACGAGGCUGCGGCGUUGCC\
) } def
/len { sequence length } bind def

/coor [
[-73.00371552 206.82864380]
[-91.07386780 214.58277893]
[-110.51322937 212.19248962]
[-126.04268646 200.38586426]
[-139.47013855 207.07192993]
[-148.37472534 220.14935303]
[-163.21652222 218.89624023]
[-176.64398193 225.58230591]
[-190.07142639 232.26838684]
[-203.49887085 238.95445251]
[-216.92633057 245.64053345]
[-230.35377502 252.32661438]
[-231.62731934 266.08636475]
[-239.48440552 277.32174683]
[-251.77572632 283.14660645]
[-265.23059082 282.12979126]
[-276.32708740 274.64514160]
[-289.88897705 281.05413818]
[-303.38436890 287.60198975]
[-316.81179810 294.28808594]
[-330.09915161 301.24841309]
[-343.24078369 308.48013306]
[-356.38241577 315.71182251]
[-369.52404785 322.94354248]
[-380.48583984 335.87704468]
[-395.94842529 328.92401123]
[-393.54757690 312.14089966]
[-376.75573730 309.80191040]
[-363.61410522 302.57019043]
[-350.47247314 295.33850098]
[-337.33084106 288.10678101]
[-335.15203857 283.79379272]
[-330.20919800 280.83465576]
[-323.49789429 280.86062622]
[-310.07043457 274.17456055]
[-305.45623779 268.34176636]
[-296.29794312 267.49221802]
[-282.73605347 261.08325195]
[-280.22219849 244.88970947]
[-268.44934082 233.25308228]
[-251.89938354 230.88078308]
[-237.03985596 238.89915466]
[-223.61239624 232.21308899]
[-210.18495178 225.52700806]
[-196.75750732 218.84094238]
[-183.33004761 212.15486145]
[-169.90260315 205.46878052]
[-161.95841980 192.86959839]
[-146.15620422 193.64448547]
[-132.72875977 186.95840454]
[-134.04360962 176.45069885]
[-132.35421753 165.97525024]
[-127.78455353 156.37544250]
[-120.69100189 148.42749023]
[-111.63452911 142.77777100]
[-101.33634186 139.89018250]
[-90.62047577 140.00807190]
[-80.34786224 143.13386536]
[-71.34712982 149.02781677]
[-64.34780121 157.22637939]
[-50.30582428 151.95162964]
[-36.26384735 146.67689514]
[-22.22187042 141.40214539]
[-13.02828407 129.68348694]
[2.61131239 132.07379150]
[16.65328789 126.79904938]
[30.58400536 121.23711395]
[44.39758682 115.39032745]
[58.21117020 109.54353333]
[72.02474976 103.69674683]
[85.83833313 97.84996033]
[94.41672516 86.80899811]
[108.31487274 88.33645630]
[122.12845612 82.48966980]
[131.82122803 69.98523712]
[146.55772400 72.14964294]
[160.37130737 66.30285645]
[164.71810913 61.18935776]
[170.18118286 59.36102295]
[174.87406921 60.51252747]
[188.91604614 55.23778534]
[202.95802307 49.96304321]
[217.00000000 44.68830109]
[227.19796753 32.59234619]
[241.83319092 35.35993958]
[255.87516785 30.08519936]
[266.07312012 17.98924446]
[280.70834351 20.75683975]
[294.75033569 15.48209763]
[308.79229736 10.20735550]
[322.83428955 4.93261433]
[336.87625122 -0.34212735]
[350.91821289 -5.61686897]
[357.50924683 -19.73056221]
[371.82495117 -24.87986755]
[385.23956299 -18.50937080]
[399.28155518 -23.78411293]
[406.26681519 -29.76755714]
[413.66635132 -29.01975441]
[427.81365967 -34.00507736]
[441.96099854 -38.99039841]
[452.40515137 -50.87442017]
[466.98046875 -47.80692291]
[481.12777710 -52.79224396]
[491.38064575 -65.59109497]
[507.54809570 -62.84414291]
[512.99841309 -47.37721634]
[502.12481689 -35.10136032]
[486.11309814 -38.64492798]
[471.96578979 -33.65960693]
[462.53353882 -22.13216591]
[446.94631958 -24.84308243]
[432.79898071 -19.85775948]
[418.65167236 -14.87243843]
[404.55627441 -9.74213600]
[390.51431274 -4.46739435]
[384.61151123 9.15951633]
[370.44610596 14.70888805]
[356.19296265 8.42510796]
[342.15100098 13.69984913]
[328.10900879 18.97459030]
[314.06704712 24.24933243]
[300.02505493 29.52407455]
[285.98309326 34.79881668]
[276.78948975 46.51748657]
[261.14990234 44.12717438]
[247.10792542 49.40191650]
[237.91433716 61.12058640]
[222.27474976 58.73027802]
[208.23277283 64.00502014]
[194.19079590 69.27976227]
[180.14881897 74.55450439]
[166.21809387 80.11643982]
[152.40451050 85.96322632]
[143.69979858 98.04946136]
[127.97525024 96.30325317]
[114.16166687 102.15003967]
[105.58327484 113.19100189]
[91.68512726 111.66354370]
[77.87154388 117.51033020]
[64.05796051 123.35711670]
[50.24437714 129.20390320]
[36.43079376 135.05068970]
[32.08398819 140.16419983]
[26.62092400 141.99252319]
[21.92803001 140.84103394]
[7.88605404 146.11576843]
[-2.31190848 158.21171570]
[-16.94712830 155.44412231]
[-30.98910522 160.71887207]
[-45.03108215 165.99360657]
[-59.07305908 171.26835632]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 50]
[5 49]
[7 47]
[8 46]
[9 45]
[10 44]
[11 43]
[12 42]
[17 38]
[18 37]
[19 35]
[20 34]
[21 31]
[22 30]
[23 29]
[24 28]
[60 152]
[61 151]
[62 150]
[63 149]
[65 147]
[66 146]
[67 143]
[68 142]
[69 141]
[70 140]
[71 139]
[73 137]
[74 136]
[76 134]
[77 133]
[80 132]
[81 131]
[82 130]
[83 129]
[85 127]
[86 126]
[88 124]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[96 116]
[97 115]
[99 114]
[100 113]
[101 112]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
