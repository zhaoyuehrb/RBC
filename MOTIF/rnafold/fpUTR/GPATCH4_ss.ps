%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:24:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACGGCAUUUCCGGGAAGAUGGCGGCGCACAAGUCAGGUCCGGCACAUGUUUCCGCGGAGCGGACCCAGCAAUGACGGAUGAUAUCACCUCUUCUUCUCUGGUGAGAGUCUGAGGAUAGAGACUUUUUUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[127.21586609 130.36672974]
[116.87789917 141.23532104]
[103.34671783 134.76174927]
[105.32173157 119.89299011]
[97.94577026 121.25135803]
[91.34974670 134.72328186]
[84.75373077 148.19519043]
[88.57263947 163.77708435]
[78.65760040 176.38943481]
[62.61457825 176.35713196]
[52.75040817 163.70495605]
[56.63203812 148.13856506]
[71.28181458 141.59916687]
[77.87783051 128.12725830]
[84.47385406 114.65533447]
[83.62062073 99.67962646]
[75.53713989 87.04406738]
[67.45366669 74.40850830]
[59.37018204 61.77294540]
[51.28670502 49.13738632]
[43.20322418 36.50182724]
[35.87791061 30.89858627]
[35.08335876 23.48535728]
[27.28960037 10.66906738]
[2.11157084 8.80570698]
[-14.54583931 -9.74848175]
[-29.40612793 -7.70598173]
[-44.26641846 -5.66348219]
[-53.61503601 7.07931423]
[-69.24849701 9.39674664]
[-81.89173889 -0.08607506]
[-84.04375458 -15.74316216]
[-74.42779541 -28.28544235]
[-58.74882889 -30.27180290]
[-46.30891800 -20.52377129]
[-31.44862747 -22.56627083]
[-16.58833885 -24.60877037]
[-14.27129173 -34.10754776]
[-9.28658295 -42.51874161]
[-2.06696701 -49.11211777]
[-7.41059256 -63.12802505]
[-12.75421810 -77.14392853]
[-18.09784317 -91.15983582]
[-23.44146919 -105.17575073]
[-35.58735275 -115.31419373]
[-32.89165115 -129.96282959]
[-38.23527908 -143.97872925]
[-49.71015549 -149.99063110]
[-53.84608841 -161.84205627]
[-48.92775345 -172.95251465]
[-53.95094681 -187.08642578]
[-58.97414017 -201.22033691]
[-63.99733734 -215.35426331]
[-69.50015259 -229.30844116]
[-75.47616577 -243.06660461]
[-81.45217896 -256.82476807]
[-87.42819977 -270.58294678]
[-93.40421295 -284.34112549]
[-105.26031494 -296.46008301]
[-96.89705658 -311.20770264]
[-80.41059875 -307.25381470]
[-79.64604187 -290.31713867]
[-73.67002869 -276.55895996]
[-67.69401550 -262.80078125]
[-61.71799469 -249.04261780]
[-55.74198151 -235.28445435]
[-52.52393723 -233.65394592]
[-49.96696091 -230.33789062]
[-48.87569046 -225.67945862]
[-49.86342239 -220.37745667]
[-44.84022903 -206.24354553]
[-39.81703568 -192.10961914]
[-34.79383850 -177.97570801]
[-20.84731483 -167.38455200]
[-24.21936989 -149.32235718]
[-18.87574387 -135.30645752]
[-7.11207342 -126.17051697]
[-9.42556190 -110.51937103]
[-4.08193636 -96.50346375]
[1.26168919 -82.48755646]
[6.60531473 -68.47164917]
[11.94894028 -54.45574188]
[22.33049393 -54.34552002]
[32.20243835 -51.02690887]
[40.59492874 -44.80466080]
[46.67691422 -36.26981735]
[49.83842850 -26.24359703]
[49.75170135 -15.69841385]
[46.40502930 -5.66354752]
[40.10589218 2.87530780]
[47.89965057 15.69159889]
[55.83878326 28.41834831]
[63.92226410 41.05390930]
[72.00574493 53.68946838]
[80.08922577 66.32502747]
[88.17269897 78.96058655]
[96.25617981 91.59614563]
[99.07537842 86.03062439]
[105.32015991 81.96865082]
[114.09198761 81.06953430]
[123.78813934 84.48670197]
[132.36357117 92.59691620]
[137.68791199 104.85533142]
[148.65045166 115.09362793]
[159.61299133 125.33192444]
[170.57553101 135.57022095]
[181.53807068 145.80851746]
[192.50061035 156.04681396]
[203.46315002 166.28511047]
[214.99032593 175.88327026]
[227.04478455 184.81018066]
[239.09925842 193.73709106]
[251.15371704 202.66401672]
[265.91339111 197.87527466]
[280.65850830 202.70863342]
[289.71926880 215.30554199]
[289.61163330 230.82225037]
[280.37698364 243.29225159]
[265.56625366 247.92057800]
[250.87443542 242.92756653]
[241.95085144 230.23309326]
[242.22680664 214.71847534]
[230.17233276 205.79156494]
[218.11787415 196.86463928]
[206.06340027 187.93772888]
[205.16377258 202.91072083]
[193.03224182 211.73262024]
[178.51089478 207.97355652]
[172.18363953 194.37335205]
[178.66212463 180.84451294]
[193.22485352 177.24765015]
[182.26231384 167.00935364]
[171.29977417 156.77105713]
[160.33723450 146.53276062]
[149.37469482 136.29446411]
[138.41215515 126.05616760]
[127.44962311 115.81787109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 15]
[6 14]
[7 13]
[16 97]
[17 96]
[18 95]
[19 94]
[20 93]
[21 92]
[23 91]
[24 90]
[26 37]
[27 36]
[28 35]
[40 82]
[41 81]
[42 80]
[43 79]
[44 78]
[46 76]
[47 75]
[50 73]
[51 72]
[52 71]
[53 70]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[103 137]
[104 136]
[105 135]
[106 134]
[107 133]
[108 132]
[109 131]
[110 125]
[111 124]
[112 123]
[113 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
