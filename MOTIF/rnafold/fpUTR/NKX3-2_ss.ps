%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCGCUCUCUGUCCCGCUCGGAGCUGCUCGGCGCCCCAGCUGCCCGCCCCGCCGGCCGCUCCUGCCCGCGGCGCAG\
) } def
/len { sequence length } bind def

/coor [
[54.07089615 356.72528076]
[47.14608002 370.51113892]
[33.85572433 378.34506226]
[18.44073677 377.72720337]
[5.81998491 368.85476685]
[0.02070311 354.55889893]
[2.89342165 339.40136719]
[13.52146626 328.21887207]
[28.51346779 324.57971191]
[33.32298279 310.37167358]
[38.13249969 296.16360474]
[42.94201660 281.95556641]
[39.69402695 267.41940308]
[51.44763184 256.82870483]
[56.25714874 242.62065125]
[61.06666565 228.41261292]
[65.87618256 214.20455933]
[55.85050583 197.80033875]
[60.76642227 178.91084290]
[78.02799225 169.18688965]
[81.06680298 154.49792480]
[84.10561371 139.80897522]
[87.14443207 125.12000275]
[90.18324280 110.43104553]
[85.97307587 97.09814453]
[95.12779236 86.53014374]
[98.16661072 71.84117889]
[96.82859802 62.51117325]
[101.64059448 56.62065125]
[105.27602386 42.06785965]
[108.91144562 27.51507187]
[112.54687500 12.96228218]
[116.18229675 -1.59050751]
[108.25112915 -9.44365692]
[104.47338104 -19.85869598]
[105.51015472 -30.80638695]
[111.09165955 -40.18560028]
[120.08272552 -46.22656250]
[130.71295166 -47.82467270]
[136.09799194 -61.82472229]
[130.92283630 -77.01015472]
[139.68965149 -90.44601440]
[155.67329407 -91.82546997]
[166.61247253 -80.09030914]
[164.11558533 -64.24274445]
[150.09803772 -56.43968201]
[144.71299744 -42.43963242]
[154.06121826 -25.64012146]
[148.37892151 -6.96686745]
[130.73509216 2.04491854]
[127.09966278 16.59770775]
[123.46423340 31.15049744]
[119.82881165 45.70328522]
[116.19338226 60.25607681]
[112.85556793 74.87999725]
[109.81675720 89.56895447]
[114.02692413 102.90185547]
[104.87220764 113.46985626]
[101.83338928 128.15881348]
[98.79457855 142.84777832]
[95.75576782 157.53674316]
[92.71694946 172.22570801]
[100.96184540 179.74882507]
[105.16126251 190.00109863]
[104.57189178 200.98196411]
[99.37759399 210.58103943]
[90.64041901 216.98370361]
[80.08422852 219.01408386]
[75.27471161 233.22212219]
[70.46519470 247.43017578]
[65.65567780 261.63821411]
[68.55966187 277.19061279]
[57.15006256 286.76507568]
[52.34054565 300.97314453]
[47.53102875 315.18118286]
[42.72151184 329.38922119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 76]
[10 75]
[11 74]
[12 73]
[14 71]
[15 70]
[16 69]
[17 68]
[20 62]
[21 61]
[22 60]
[23 59]
[24 58]
[26 56]
[27 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
