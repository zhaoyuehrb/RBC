%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:49:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCGUGCGUGGAGCAGUCGGGGCUGGAGGCGAGGCCGCCGGGCGGGCAGGGGUUGUGGCGCGGCAAGCGGCGGGCCAGCGACGGCGCGA\
) } def
/len { sequence length } bind def

/coor [
[0.43998966 333.98269653]
[-7.43057775 346.75198364]
[-15.30114460 359.52124023]
[-23.17171288 372.29049683]
[-18.07684708 387.07482910]
[-23.72537422 401.65661621]
[-37.45022964 409.15075684]
[-52.77095795 406.01876831]
[-62.45357895 393.73950195]
[-61.92625809 378.11080933]
[-51.43797302 366.51211548]
[-35.94097900 364.41995239]
[-28.07041168 351.65066528]
[-20.19984436 338.88140869]
[-12.32927704 326.11215210]
[-14.35038948 304.65274048]
[4.80085802 293.25466919]
[10.83876705 279.52355957]
[16.87667465 265.79244995]
[22.91458321 252.06130981]
[17.29037476 238.31709290]
[23.21806908 224.30577087]
[37.67241669 218.49977112]
[43.71032333 204.76864624]
[49.74823380 191.03752136]
[55.78614044 177.30641174]
[61.82405090 163.57528687]
[55.48234177 152.21640015]
[56.92916107 139.09071350]
[65.85351562 129.09344482]
[79.11359406 126.08533478]
[85.62184906 112.57080078]
[80.93545532 98.86007690]
[87.22222137 85.80547333]
[100.86361694 80.92094421]
[107.37187195 67.40641022]
[105.48901367 49.18948746]
[120.15502930 39.72156906]
[126.19293976 25.99044800]
[132.23085022 12.25932884]
[138.26875305 -1.47179163]
[136.74092102 -17.21905327]
[148.94677734 -25.75522614]
[154.98468018 -39.48634720]
[151.02809143 -51.90950012]
[156.50503540 -63.29492188]
[167.92707825 -67.66794586]
[174.43533325 -81.18247223]
[180.94358826 -94.69700623]
[177.02342224 -110.25373840]
[186.85621643 -122.93031311]
[202.89910889 -123.00235748]
[212.84535217 -110.41460419]
[209.06504822 -94.82329559]
[194.45812988 -88.18875122]
[187.94987488 -74.67421722]
[181.44161987 -61.15968704]
[183.78190613 -43.86064911]
[168.71580505 -33.44843674]
[162.67790222 -19.71731758]
[164.63760376 -4.95219707]
[151.99987793 4.56611681]
[145.96197510 18.29723740]
[139.92405701 32.02835846]
[133.88615417 45.75947571]
[137.98886108 57.28138351]
[132.89828491 68.84471893]
[120.88640594 73.91466522]
[114.37815094 87.42919922]
[119.06454468 101.13992310]
[112.77777863 114.19452667]
[99.13638306 119.07905579]
[92.62812805 132.59359741]
[98.72727966 148.87890625]
[91.40233612 164.28091431]
[75.55516815 169.61318970]
[69.51726532 183.34431458]
[63.47935104 197.07543945]
[57.44144440 210.80656433]
[51.40353394 224.53767395]
[56.89511108 239.11437988]
[50.57620621 252.95367432]
[36.64570236 258.09921265]
[30.60779572 271.83035278]
[24.56988716 285.56146240]
[18.53197861 299.29257202]
[23.21163177 306.77798462]
[24.40212822 315.42861938]
[21.97216034 323.71630859]
[16.42314148 330.20907593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 15]
[2 14]
[3 13]
[4 12]
[17 86]
[18 85]
[19 84]
[20 83]
[23 80]
[24 79]
[25 78]
[26 77]
[27 76]
[31 73]
[32 72]
[35 69]
[36 68]
[38 65]
[39 64]
[40 63]
[41 62]
[43 60]
[44 59]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
