%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:29:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAUUCCUGGCCCCGCCCCCUGCAGCGGGCCGCUCGCUCAUGCGCUCUGGCCUCAGGCUCGCUGUCGCGCCAUUUUGCCGGGGUUUGAAUGUGAGGCGGAGCGGCGGCAGGAGCGGGUAGUGCCAGCUACGGUCCGCGGCUGGGGUUCCCUCCUCCGUUUCUGUAUCCCCACGAGAUCCUAUAGCA\
) } def
/len { sequence length } bind def

/coor [
[283.76342773 132.22866821]
[291.98394775 119.68183136]
[303.34368896 109.88609314]
[316.95831299 103.60140991]
[301.99108887 102.61004639]
[287.02389526 101.61869049]
[272.05667114 100.62733459]
[257.08947754 99.63597107]
[242.12228394 98.64461517]
[232.80790710 106.38035583]
[220.31948853 105.66555023]
[211.39328003 96.33876801]
[196.44450378 95.10007477]
[181.49574280 93.86138153]
[166.54696655 92.62269592]
[151.59820557 91.38400269]
[136.64944458 90.14531708]
[121.70066833 88.90662384]
[123.77272797 99.63552856]
[120.95263672 109.91294861]
[114.05300140 117.67789459]
[104.67827606 121.48336029]
[94.85678864 120.76308441]
[86.60295868 115.90364075]
[81.50415039 108.11597443]
[66.51235199 108.61192322]
[51.52054977 109.10787201]
[36.52875137 109.60382080]
[21.53695297 110.09977722]
[6.54515457 110.59572601]
[-8.44664383 111.09167480]
[-23.43844223 111.58762360]
[-38.43024063 112.08358002]
[-53.42203903 112.57952881]
[-68.38924408 113.57088470]
[-83.31549072 115.05657196]
[-98.24172974 116.54225159]
[-113.11069489 118.52063751]
[-127.90611267 120.98955536]
[-142.70153809 123.45847321]
[-155.00942993 134.29579163]
[-170.46020508 128.79981995]
[-173.15940857 112.62433624]
[-160.33035278 102.40929413]
[-145.17045593 108.66305542]
[-130.37503052 106.19413757]
[-115.57961273 103.72521210]
[-113.84027863 101.50511932]
[-111.10886383 99.84667969]
[-107.59722137 99.13417053]
[-103.65327454 99.66727448]
[-99.72741699 101.61600494]
[-84.80117035 100.13032532]
[-69.87493134 98.64464569]
[-67.99266815 96.54434967]
[-65.15762329 95.07006073]
[-61.60656738 94.59119415]
[-57.70647430 95.38379669]
[-53.91799164 97.58773041]
[-38.92619324 97.09178162]
[-23.93439293 96.59582520]
[-8.94259453 96.09987640]
[6.04920435 95.60392761]
[21.04100227 95.10797882]
[36.03280258 94.61202240]
[51.02460098 94.11607361]
[66.01640320 93.62012482]
[81.00820160 93.12417603]
[86.39801025 82.34766388]
[97.81890869 75.72604370]
[88.80268860 63.73822403]
[79.78647614 51.75040436]
[64.10487366 49.78493881]
[54.47220993 37.25548172]
[56.60335922 21.59554100]
[69.23395538 12.09588051]
[84.87049103 14.39248085]
[94.23608398 27.12280846]
[91.77429199 42.73418808]
[100.79051208 54.72200775]
[109.80672455 66.70982361]
[122.93936157 73.95785522]
[137.88812256 75.19654846]
[152.83689880 76.43523407]
[167.78565979 77.67392731]
[182.73443604 78.91262054]
[197.68319702 80.15130615]
[212.63195801 81.38999939]
[229.08720398 73.14374542]
[243.11363220 83.67740631]
[258.08084106 84.66876984]
[273.04803467 85.66012573]
[288.01525879 86.65148926]
[302.98245239 87.64284515]
[317.94964600 88.63420105]
[324.11856079 84.79288483]
[330.68679810 84.48570251]
[335.94009399 87.14347076]
[350.53997803 83.70211792]
[358.19119263 78.67882538]
[365.40969849 80.32666779]
[380.06451416 77.12717438]
[394.71929932 73.92768097]
[409.34716797 70.60713959]
[423.94705200 67.16578674]
[438.54696655 63.72442245]
[453.14685059 60.28306580]
[467.65692139 56.48069382]
[482.06823730 52.31965256]
[496.47952271 48.15860748]
[503.87225342 42.76211929]
[511.16360474 44.05001831]
[525.64172363 40.12781906]
[540.11987305 36.20561981]
[554.59796143 32.28342056]
[569.07611084 28.36122322]
[576.55706787 23.08770370]
[583.82611084 24.49598122]
[598.36712646 20.81369972]
[612.90814209 17.13141823]
[615.98480225 4.99405336]
[623.88970947 -4.62311459]
[635.07128906 -9.92931843]
[647.37573242 -9.97052479]
[658.46166992 -4.80039501]
[666.24578857 4.54162407]
[680.90057373 1.34212983]
[695.55535889 -1.85736465]
[710.21020508 -5.05685902]
[724.86499023 -8.25635338]
[739.51977539 -11.45584774]
[751.35198975 -21.95866013]
[765.43676758 -17.11414146]
[780.09155273 -20.31363678]
[794.27648926 -29.59931183]
[807.12603760 -18.53925323]
[800.05535889 -3.13012099]
[783.29107666 -5.65883398]
[768.63623047 -2.45933962]
[757.85223389 7.81462336]
[742.71929932 3.19895434]
[728.06445312 6.39844894]
[713.40966797 9.59794331]
[698.75488281 12.79743767]
[684.10009766 15.99693203]
[669.44525146 19.19642639]
[663.12420654 35.67114639]
[648.05371094 45.14841843]
[630.15380859 43.68292236]
[616.59039307 31.67242050]
[602.04937744 35.35470200]
[587.50836182 39.03698730]
[572.99835205 42.83935547]
[558.52020264 46.76155472]
[544.04205322 50.68375397]
[529.56390381 54.60595322]
[515.08581543 58.52815247]
[500.64056396 62.56991196]
[486.22927856 66.73095703]
[471.81796265 70.89199829]
[469.79995728 73.80400848]
[466.26275635 75.87572479]
[461.62030029 76.39998627]
[456.58822632 74.88296509]
[441.98831177 78.32432556]
[427.38842773 81.76567841]
[412.78851318 85.20703888]
[406.98895264 89.81001282]
[397.91879272 88.58248138]
[383.26400757 91.78198242]
[368.60919189 94.98147583]
[353.98135376 98.30201721]
[339.38143921 101.74337006]
[353.84927368 105.70337677]
[366.66571045 113.49692535]
[376.83825684 124.52050018]
[383.57919312 137.92048645]
[386.36657715 152.65922546]
[384.98449707 167.59542847]
[379.53997803 181.57246399]
[370.45468140 193.50799561]
[358.43209839 202.47781372]
[344.40322876 207.78729248]
[329.45440674 209.02531433]
[314.74322510 206.09599304]
[301.40884399 199.22616577]
[290.48385620 188.94779968]
[282.81423950 176.05683899]
[278.99389648 161.55149841]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[12 88]
[13 87]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[25 68]
[26 67]
[27 66]
[28 65]
[29 64]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 54]
[36 53]
[37 52]
[38 47]
[39 46]
[40 45]
[70 81]
[71 80]
[72 79]
[98 173]
[99 172]
[101 171]
[102 170]
[103 169]
[104 167]
[105 166]
[106 165]
[107 164]
[108 160]
[109 159]
[110 158]
[112 157]
[113 156]
[114 155]
[115 154]
[116 153]
[118 152]
[119 151]
[120 150]
[126 146]
[127 145]
[128 144]
[129 143]
[130 142]
[131 141]
[133 139]
[134 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
