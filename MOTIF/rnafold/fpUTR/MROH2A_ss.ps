%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:04:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUGCUGUGGCUGCUUGGGCCACGGGAGAGGGAACCUUGUGAGCCGGGCAGAAUCCACCCUGUAGAGACUGCCUCUGGAGCUUGAGGAAGAG\
) } def
/len { sequence length } bind def

/coor [
[132.37670898 173.57894897]
[126.33374786 162.02120972]
[125.17820740 148.98291016]
[129.12266541 136.45245361]
[117.99788666 126.39068604]
[106.87310028 116.32891083]
[88.56175995 113.52921295]
[82.75534821 95.93861389]
[70.98335266 86.64236450]
[59.21136475 77.34612274]
[47.43937302 68.04987335]
[35.21633148 59.35520554]
[22.57294655 51.28396988]
[9.92956352 43.21273422]
[-2.71382093 35.14149857]
[-15.35720539 27.07026482]
[-28.00058937 18.99902916]
[-40.64397430 10.92779446]
[-53.28735733 2.85655880]
[-68.53354645 6.04895544]
[-81.24076080 -2.31653476]
[-84.19026184 -16.87112236]
[-96.83364868 -24.94235802]
[-109.47703552 -33.01359177]
[-122.12041473 -41.08482742]
[-134.76380920 -49.15606308]
[-147.40718079 -57.22729874]
[-161.37756348 -50.68267059]
[-176.66543579 -52.75258255]
[-188.39250183 -62.77652740]
[-192.81668091 -77.55590820]
[-188.52626038 -92.37467194]
[-176.89028931 -102.50421143]
[-161.62174988 -104.71221924]
[-147.59278870 -98.29413605]
[-139.27999878 -85.29794312]
[-139.33595276 -69.87068176]
[-126.69256592 -61.79944611]
[-114.04917908 -53.72821045]
[-101.40579987 -45.65697479]
[-88.76241302 -37.58574295]
[-76.11903381 -29.51450539]
[-61.67514801 -32.96556854]
[-48.73797989 -24.96029854]
[-45.21612167 -9.78682518]
[-32.57273865 -1.71559000]
[-19.92935371 6.35564518]
[-7.28596973 14.42688084]
[5.35741425 22.49811554]
[18.00079918 30.56935120]
[30.64418221 38.64058685]
[43.28756714 46.71182251]
[46.97181320 46.19795990]
[51.08776474 47.57852554]
[54.67583847 51.03401566]
[56.73562241 56.27788162]
[68.50761414 65.57412720]
[80.27960205 74.87037659]
[92.05159760 84.16662598]
[102.09094238 82.40736389]
[111.43824005 86.47078705]
[116.99979401 95.01201630]
[116.93487549 105.20413208]
[128.05966187 115.26589966]
[139.18443298 125.32767487]
[155.58940125 119.53266907]
[172.60668945 122.70690918]
[185.68618774 133.91247559]
[191.37535095 150.07604980]
[188.23033142 166.83139038]
[200.00231934 176.12763977]
[215.62786865 178.60806274]
[220.82104492 192.56802368]
[232.59303284 201.86425781]
[244.36502075 211.16050720]
[256.13702393 220.45675659]
[271.03799438 216.12779236]
[285.62622070 221.41584778]
[294.29220581 234.28753662]
[293.70370483 249.79344177]
[284.08697510 261.97122192]
[269.13992310 266.13830566]
[254.60990906 260.69232178]
[246.08407593 247.72737122]
[246.84075928 232.22875977]
[235.06877136 222.93251038]
[223.29678345 213.63626099]
[211.52479553 204.34001160]
[196.74124146 202.52450562]
[190.70606995 187.89962769]
[178.93408203 178.60337830]
[167.55963135 184.58917236]
[154.71255493 185.76226807]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 65]
[5 64]
[6 63]
[8 59]
[9 58]
[10 57]
[11 56]
[12 52]
[13 51]
[14 50]
[15 49]
[16 48]
[17 47]
[18 46]
[19 45]
[22 42]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[70 91]
[71 90]
[73 88]
[74 87]
[75 86]
[76 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
