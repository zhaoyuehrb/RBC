%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGGCGCUGCGACCAAUUCAAACAUGGCGCCGUCAGCCUCACAUUCCCCGUUUUCCGCUCAUGGCGGCGUAGGGGCGGAGGUCGCGCCUGAGUGCGUCCGCACGAGAGGGCGGAACCGUCUCC\
) } def
/len { sequence length } bind def

/coor [
[82.00566101 129.85641479]
[73.49410248 122.64153290]
[60.25973892 129.70210266]
[47.02536774 136.76264954]
[33.79100037 143.82321167]
[20.55663109 150.88377380]
[7.50387573 158.27468872]
[-5.35902405 165.99127197]
[-13.21266651 179.72557068]
[-28.10701561 179.63804626]
[-40.96991348 187.35462952]
[-53.83281326 195.07122803]
[-59.66336060 202.25119019]
[-67.11734772 202.81542969]
[-80.17010498 210.20634460]
[-93.22286224 217.59725952]
[-93.98330688 233.00585938]
[-102.97214508 245.54397583]
[-117.32106018 251.21073914]
[-132.45137024 248.19789124]
[-143.53504944 237.46684265]
[-147.03533936 222.44180298]
[-141.83529663 207.91723633]
[-129.59425354 198.52786255]
[-114.21826935 197.26980591]
[-100.61376953 204.54449463]
[-87.56101227 197.15357971]
[-74.50825500 189.76268005]
[-61.54940796 182.20832825]
[-48.68650818 174.49172974]
[-35.82360840 166.77514648]
[-28.89000511 153.59278870]
[-13.07561684 153.12837219]
[-0.21271731 145.41178894]
[1.81126595 140.97320557]
[6.70467091 137.81362915]
[13.49607277 137.64939880]
[26.73044205 130.58885193]
[39.96480942 123.52828217]
[53.19917679 116.46772766]
[66.43354797 109.40716553]
[65.14215088 100.36334229]
[66.24475098 91.29455566]
[69.66561890 82.82365417]
[75.16981506 75.53240204]
[82.37931824 69.92154694]
[90.79898834 66.37644958]
[90.04531860 51.39539719]
[89.29165649 36.41434479]
[88.53799438 21.43328857]
[75.72249603 15.67760181]
[66.69889069 4.99684238]
[63.19791412 -8.47145653]
[65.85250092 -22.06416702]
[74.08425903 -33.11913681]
[86.22826385 -39.49656296]
[85.85131836 -54.49182510]
[85.47436523 -69.48709106]
[85.09741211 -84.48235321]
[84.72045898 -99.47761536]
[78.27799225 -115.15979767]
[91.56385803 -125.69175720]
[105.36211395 -115.84064484]
[99.71572113 -99.85456848]
[100.09267426 -84.85930634]
[100.46962738 -69.86404419]
[100.84658051 -54.86877823]
[101.22352600 -39.87351608]
[115.56341553 -32.53768539]
[124.32460022 -18.91016388]
[125.05442810 -2.63215876]
[117.46128082 11.89045238]
[103.51904297 20.67962456]
[104.27271271 35.66067886]
[105.02637482 50.64173508]
[105.78004456 65.62278748]
[127.40981293 78.46157074]
[134.76896667 102.51410675]
[149.14678955 106.78939056]
[164.57983398 103.30633545]
[174.57392883 114.35022736]
[188.95175171 118.62551880]
[203.32957458 122.90080261]
[217.10607910 115.63129425]
[231.62634277 120.17185974]
[238.47180176 133.35044861]
[252.84962463 137.62573242]
[267.22744751 141.90103149]
[281.60528564 146.17631531]
[295.98312378 150.45159912]
[312.17224121 140.78237915]
[330.01589966 145.81805420]
[338.46804810 161.96380615]
[353.04251099 165.51129150]
[367.61700439 169.05877686]
[382.19146729 172.60626221]
[397.76922607 167.48129272]
[409.81448364 178.60980225]
[405.93609619 194.54374695]
[390.12384033 198.89163208]
[378.64398193 187.18072510]
[364.06951904 183.63323975]
[349.49502563 180.08576965]
[334.92056274 176.53828430]
[326.58474731 184.51766968]
[315.30291748 187.46292114]
[303.89694214 184.51612854]
[295.27890015 176.30847168]
[291.70782471 164.82943726]
[277.32998657 160.55413818]
[262.95217896 156.27885437]
[248.57434082 152.00357056]
[234.19651794 147.72827148]
[221.26254272 155.02539062]
[206.62046814 150.89445496]
[199.05429077 137.27862549]
[184.67646790 133.00334167]
[170.29862976 128.72805786]
[155.89398193 132.51690674]
[144.87150574 121.16722107]
[130.49368286 116.89192963]
[123.59446716 125.66130829]
[114.27793121 131.80160522]
[103.49858093 134.68373108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 41]
[3 40]
[4 39]
[5 38]
[6 37]
[7 34]
[8 33]
[10 31]
[11 30]
[12 29]
[14 28]
[15 27]
[16 26]
[47 76]
[48 75]
[49 74]
[50 73]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[78 121]
[79 120]
[81 118]
[82 117]
[83 116]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[93 104]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
