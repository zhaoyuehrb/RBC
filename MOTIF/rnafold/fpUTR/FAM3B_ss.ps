%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGCCCGACUGGCCGCGCACCCAGCUGGCCCGCCCCUGCCCGACACGACCGCUGCCCGCCCCUUGCCUUCCUGACCCAGGGGCUCCGCUGGCUGCGGUCGCCUGGGAGCUGCCGCCAGGGCCAGGAGGGGAGCGGCACCUGGAAG\
) } def
/len { sequence length } bind def

/coor [
[68.37505341 601.00305176]
[53.77553558 596.01733398]
[44.20705032 583.91577148]
[42.72286224 568.55993652]
[49.79657364 554.84991455]
[63.17098618 547.16040039]
[63.81193161 532.17407227]
[64.45288086 517.18780518]
[53.24357605 509.86392212]
[47.08350372 497.85321045]
[47.68544769 484.25973511]
[54.99871063 472.65695190]
[67.19425964 466.14819336]
[68.15531158 451.17898560]
[69.11636353 436.20980835]
[70.07741547 421.24063110]
[71.03846741 406.27145386]
[61.23477936 397.84667969]
[58.04734802 385.11837769]
[62.86449051 372.70385742]
[74.12796783 365.24118042]
[75.40869141 350.29592896]
[76.68941498 335.35070801]
[66.92848206 324.15875244]
[68.01441193 308.98394775]
[79.81974792 298.82165527]
[81.10047150 283.87643433]
[82.38118744 268.93121338]
[83.66191101 253.98597717]
[84.94263458 239.04075623]
[86.22335815 224.09553528]
[87.50407410 209.15029907]
[88.46512604 194.18112183]
[89.10607910 179.19482422]
[76.46376038 171.31843567]
[69.41445160 158.08351135]
[69.93972015 142.99740601]
[77.99858093 130.11518860]
[91.51161194 122.94963837]
[92.15256500 107.96333313]
[92.63333130 92.97103882]
[92.95388031 77.97446442]
[79.92771149 69.95785522]
[72.71077728 56.58576584]
[73.15315247 41.49700928]
[81.03594971 28.74092674]
[94.15692902 21.69071579]
[94.47747040 6.69414091]
[94.79801941 -8.30243397]
[95.11856842 -23.29900742]
[95.43910980 -38.29558182]
[95.75965881 -53.29215622]
[96.08020020 -68.28873444]
[88.63957977 -82.25109863]
[96.64708710 -94.81011963]
[96.96763611 -109.80669403]
[97.28817749 -124.80326843]
[89.84755707 -138.76564026]
[97.85506439 -151.32466125]
[98.17561340 -166.32122803]
[87.24568176 -172.55262756]
[80.06734467 -182.79699707]
[77.96614838 -195.05479431]
[81.28392792 -206.96546936]
[89.32496643 -216.26210022]
[100.50080109 -221.20278931]
[101.46186066 -236.17196655]
[102.42291260 -251.14114380]
[99.79267120 -257.33184814]
[100.61312866 -263.04574585]
[103.75836945 -266.72512817]
[105.35817719 -281.63955688]
[106.95797729 -296.55401611]
[108.55778503 -311.46844482]
[104.23522949 -327.86212158]
[118.79161835 -336.55395508]
[131.17338562 -324.97256470]
[123.47222900 -309.86865234]
[121.87242126 -294.95419312]
[120.27262115 -280.03976440]
[118.67281342 -265.12530518]
[117.39208984 -250.18009949]
[116.43103790 -235.21090698]
[115.46998596 -220.24172974]
[129.54811096 -209.67288208]
[134.55928040 -192.63438416]
[128.33604431 -175.83345032]
[113.17218781 -166.00068665]
[112.85163879 -151.00410461]
[120.31519318 -138.11439514]
[112.28475189 -124.48271942]
[111.96421051 -109.48614502]
[111.64366150 -94.48957062]
[119.10721588 -81.59986115]
[111.07677460 -67.96818542]
[110.75623322 -52.97161102]
[110.43568420 -37.97503662]
[110.11514282 -22.97846222]
[109.79459381 -7.98188734]
[109.47404480 7.01468754]
[109.15350342 22.01126289]
[121.96124268 29.61569023]
[129.29176331 42.69694901]
[129.08900452 57.79083252]
[121.30728149 70.84232330]
[107.95045471 78.29501343]
[107.62991333 93.29158783]
[110.63706970 100.83670807]
[107.13886261 108.60427856]
[106.49791718 123.59058380]
[119.34980011 131.88372803]
[126.27932739 145.40698242]
[125.51460266 160.48284912]
[117.36102295 173.06756592]
[104.09237671 179.83576965]
[103.45143127 194.82206726]
[106.21335602 200.95513916]
[105.51519775 206.68527222]
[102.44930267 210.43103027]
[101.16857910 225.37625122]
[99.88785553 240.32147217]
[98.60713959 255.26670837]
[97.32641602 270.21191406]
[96.04569244 285.15716553]
[94.76496887 300.10238647]
[104.66918182 312.12503052]
[103.15744781 327.26336670]
[91.63463593 336.63143921]
[90.35391998 351.57666016]
[89.07319641 366.52188110]
[100.57733917 379.65536499]
[99.08843994 396.71316528]
[86.00765228 407.23251343]
[85.04660034 422.20169067]
[84.08554077 437.17086792]
[83.12448883 452.14004517]
[82.16343689 467.10922241]
[95.31080627 477.69689941]
[99.54039764 493.86767578]
[93.38392639 509.22894287]
[79.43917847 517.82873535]
[78.79823303 532.81500244]
[78.15728760 547.80133057]
[90.82632446 556.60467529]
[96.70361328 570.86865234]
[93.91374969 586.04168701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 143]
[7 142]
[8 141]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[21 130]
[22 129]
[23 128]
[26 125]
[27 124]
[28 123]
[29 122]
[30 121]
[31 120]
[32 119]
[33 116]
[34 115]
[39 110]
[40 109]
[41 107]
[42 106]
[47 101]
[48 100]
[49 99]
[50 98]
[51 97]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[59 89]
[60 88]
[66 84]
[67 83]
[68 82]
[71 81]
[72 80]
[73 79]
[74 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
