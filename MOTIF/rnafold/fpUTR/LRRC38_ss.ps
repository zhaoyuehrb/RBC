%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:14:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGCCCCCGCACGCCCGGGCGCACGCCCUCCCCGCCCGGGCCGCCCUCUGGCUCCCCGCGCCCGGCAGCCAGUGCCUCACCGCGCCGUCCCGCGCCAGGGCUCGCUCCGAGAGCCGCUUCCUUCUCGCCGCGGCCGGCGCGGGCCCCCCGGCC\
) } def
/len { sequence length } bind def

/coor [
[128.59358215 143.86785889]
[117.05059052 149.51019287]
[104.48110199 152.17185974]
[91.64183044 151.69258118]
[87.15139008 166.00466919]
[91.24948883 181.88351440]
[79.35910034 193.17735291]
[63.71203232 188.26805115]
[60.40464783 172.20588684]
[72.83929443 161.51423645]
[77.32974243 147.20213318]
[69.19521332 142.34439087]
[62.06917572 136.10034180]
[56.18494415 128.67443848]
[42.58675766 135.00605774]
[28.98857498 141.33767700]
[15.39039135 147.66929626]
[1.79220772 154.00091553]
[-11.80597591 160.33253479]
[-25.40415955 166.66415405]
[-39.00234222 172.99577332]
[-52.60052872 179.32739258]
[-53.26435471 194.61849976]
[-60.96829987 207.84376526]
[-73.94204712 215.96414185]
[-89.20433044 217.11360168]
[-103.24799347 211.02801514]
[-112.84588623 199.10581970]
[-115.79250336 184.08662415]
[-111.41072845 169.42175293]
[-100.70745087 158.48106384]
[-86.14221954 153.77867126]
[-71.06201172 156.39512634]
[-58.93214798 165.72920227]
[-45.33396149 159.39758301]
[-31.73577881 153.06596375]
[-18.13759422 146.73434448]
[-4.53941154 140.40272522]
[9.05877209 134.07110596]
[22.65695572 127.73948669]
[36.25513840 121.40787506]
[49.85332489 115.07625580]
[48.81740570 88.93996429]
[60.55255127 65.56336975]
[50.78196335 54.18199921]
[39.83291626 53.97689056]
[31.00451660 47.87720871]
[27.10316658 38.11777878]
[29.20431328 28.04456329]
[19.90298843 16.27658272]
[10.60166454 4.50860119]
[1.30034065 -7.25937986]
[-8.00098324 -19.02736092]
[-17.30230713 -30.79534149]
[-30.03516006 -33.08209229]
[-37.53678513 -43.12453079]
[-36.20440292 -55.18450546]
[-45.26531601 -67.13858032]
[-54.32622910 -79.09265137]
[-69.64148712 -84.95565796]
[-71.95404053 -101.19093323]
[-58.88493729 -111.09701538]
[-43.87854385 -104.48337555]
[-42.37215424 -88.15356445]
[-33.31124115 -76.19949341]
[-24.25032997 -64.24542236]
[-7.74788332 -58.34989166]
[-5.53432655 -40.09666443]
[3.76699734 -28.32868385]
[13.06832123 -16.56070328]
[22.36964607 -4.79272318]
[31.67096901 6.97525787]
[40.97229385 18.74323845]
[59.40130234 24.48212814]
[62.16333771 44.41141129]
[71.93392181 55.79278564]
[82.93936157 50.49326324]
[94.87315369 47.88764191]
[107.08592224 48.11770630]
[118.91310883 51.17094040]
[129.71113586 56.88120270]
[138.89244080 64.93776703]
[145.95742798 74.90223694]
[150.52163696 86.23239899]
[152.33671570 98.31172943]
[167.24362183 99.98040009]
[182.15051270 101.64907837]
[197.05740356 103.31775665]
[216.78570557 92.75336456]
[233.87968445 105.99514008]
[248.87275696 106.45110321]
[263.86581421 106.90707397]
[278.85888672 107.36303711]
[293.85195923 107.81900787]
[308.84503174 108.27497101]
[323.83810425 108.73094177]
[338.83114624 109.18691254]
[344.91192627 106.35784149]
[350.63592529 106.97563171]
[354.41912842 109.97743988]
[369.38140869 111.04063416]
[384.34368896 112.10383606]
[393.18515015 109.57997131]
[399.59744263 113.34322357]
[414.53509521 114.70944214]
[429.47274780 116.07565308]
[441.55187988 106.24040222]
[456.68130493 107.83873749]
[465.98327637 119.41495514]
[480.92092896 120.78117371]
[495.85858154 122.14739227]
[510.79623413 123.51361084]
[525.73388672 124.87982178]
[540.67156982 126.24604034]
[550.79608154 114.48706055]
[565.90643311 110.95766449]
[580.19238281 117.01497650]
[588.16070557 130.32984924]
[586.74737549 145.78242493]
[576.49591064 157.43087769]
[561.34814453 160.79615784]
[547.12872314 154.58421326]
[539.30535889 141.18370056]
[524.36767578 139.81747437]
[509.43002319 138.45126343]
[494.49237061 137.08503723]
[479.55471802 135.71882629]
[464.61706543 134.35261536]
[453.36944580 144.04934692]
[438.20108032 142.87660217]
[428.10653687 131.01330566]
[413.16888428 129.64709473]
[398.23123169 128.28086853]
[383.28048706 127.06610870]
[368.31820679 126.00290680]
[353.35592651 124.93971252]
[338.37518311 124.17997742]
[323.38211060 123.72400665]
[308.38906860 123.26804352]
[293.39599609 122.81207275]
[278.40292358 122.35610962]
[263.40985107 121.90013885]
[248.41677856 121.44417572]
[233.42372131 120.98820496]
[228.89361572 127.58998871]
[222.02473450 131.88467407]
[213.91912842 133.09439087]
[205.91323853 130.94355774]
[199.35751343 125.71698761]
[195.38873291 118.22465515]
[180.48182678 116.55597687]
[165.57493591 114.88729858]
[150.66804504 113.21862030]
[145.92398071 125.15890503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 11]
[5 10]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 37]
[20 36]
[21 35]
[22 34]
[44 76]
[45 75]
[49 73]
[50 72]
[51 71]
[52 70]
[53 69]
[54 68]
[57 66]
[58 65]
[59 64]
[85 153]
[86 152]
[87 151]
[88 150]
[90 144]
[91 143]
[92 142]
[93 141]
[94 140]
[95 139]
[96 138]
[97 137]
[100 136]
[101 135]
[102 134]
[104 133]
[105 132]
[106 131]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
