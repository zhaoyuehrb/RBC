%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGCGCGCGCGCAGGAUUCCUGCGCUGGAGGCCGCCUCUGACGCCACCGGCUGGGCUCCGCC\
) } def
/len { sequence length } bind def

/coor [
[60.45477295 180.44381714]
[53.02895355 193.47674561]
[41.09741211 202.56730652]
[26.56091309 206.26733398]
[11.73519802 203.98738098]
[-1.01791263 196.09066772]
[-9.66677856 183.83517456]
[-12.83358669 169.17326355]
[-10.01384735 154.44068909]
[-1.65676129 141.98439026]
[10.90592480 133.78892517]
[-3.56720877 129.84831238]
[-18.04034233 125.90770721]
[-32.51347351 121.96709442]
[-46.98661041 118.02648163]
[-61.45974350 114.08586884]
[-75.93287659 110.14526367]
[-92.80408478 111.81816864]
[-99.08203125 96.06940460]
[-85.68663788 85.67710876]
[-71.99226379 95.67212677]
[-57.51913071 99.61273956]
[-43.04599762 103.55335236]
[-28.57286453 107.49395752]
[-14.09973145 111.43457031]
[0.37340197 115.37518311]
[14.84653568 119.31579590]
[29.82901955 118.59109497]
[43.85426331 113.27201843]
[57.87950516 107.95294189]
[71.90474701 102.63387299]
[85.92999268 97.31479645]
[94.92066193 86.60688019]
[108.75093079 88.65995789]
[122.77617645 83.34088135]
[136.66879272 77.68446350]
[150.42068481 71.69399261]
[164.17256165 65.70352173]
[170.02842712 51.26930618]
[184.06013489 45.39002228]
[197.78486633 51.06164551]
[211.53674316 45.07117462]
[220.84199524 31.56768799]
[237.16520691 33.14407349]
[243.71444702 48.17868423]
[233.75242615 61.20520020]
[217.52720642 58.82305908]
[203.77532959 64.81352997]
[198.58172607 78.72618103]
[184.72068787 84.99727631]
[170.16302490 79.45540619]
[156.41114807 85.44587708]
[142.65927124 91.43634796]
[137.60443115 97.20456696]
[128.09524536 97.36612701]
[114.07000732 102.68520355]
[105.07933807 113.39311981]
[91.24906921 111.34004211]
[77.22382355 116.65911865]
[63.19857788 121.97818756]
[49.17333603 127.29726410]
[35.14809036 132.61633301]
[48.44345474 139.56135559]
[57.96359634 151.15303040]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 27]
[12 26]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[34 56]
[35 55]
[36 53]
[37 52]
[38 51]
[41 48]
[42 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
