%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGUCACGUGCUGUGACAGUAGCUGGGGUGAGGCCGUCGUCGCCGCACGGGCUGGUUGGGGCUGUGUCUGUGGGAGGCGCCGGGGUG\
) } def
/len { sequence length } bind def

/coor [
[38.69756699 163.93527222]
[30.09889603 162.13885498]
[22.50285339 157.79588318]
[16.63904572 151.34788513]
[2.40665746 156.08486938]
[-11.82573128 160.82186890]
[-26.05812073 165.55886841]
[-33.67634201 182.70610046]
[-51.03512955 188.95794678]
[-67.27624512 180.88432312]
[-81.13443756 186.62457275]
[-94.99263000 192.36482239]
[-108.85082245 198.10507202]
[-114.66654968 212.80039978]
[-129.20304871 219.00248718]
[-143.83607483 213.03170776]
[-149.88410950 198.43045044]
[-143.75897217 183.86137390]
[-129.09458923 177.96804810]
[-114.59107971 184.24687195]
[-100.73287964 178.50662231]
[-86.87468719 172.76637268]
[-73.01649475 167.02612305]
[-70.95648193 155.53614807]
[-63.44723129 146.44100952]
[-52.32852936 142.15596008]
[-40.41753006 143.89422607]
[-30.79511452 151.32647705]
[-16.56272507 146.58947754]
[-2.33033633 141.85247803]
[11.90205193 137.11549377]
[19.07600975 116.56464386]
[39.02589035 107.23503876]
[59.87736511 115.08507538]
[72.77758026 107.43102264]
[85.67778778 99.77696991]
[92.69091797 87.68120575]
[106.66815948 87.32281494]
[119.56837463 79.66876221]
[132.46858215 72.01470947]
[145.36880493 64.36066437]
[153.28903198 50.66465759]
[168.18278503 50.82450104]
[181.08299255 43.17045212]
[187.03321838 35.93486786]
[194.58308411 35.48290634]
[207.74827576 28.29417038]
[220.91345215 21.10543633]
[234.07864380 13.91670036]
[247.24382019 6.72796583]
[260.40899658 -0.46076903]
[273.57418823 -7.64950371]
[286.60897827 -15.07207870]
[299.50918579 -22.72612953]
[312.40939331 -30.38018036]
[325.30960083 -38.03422928]
[332.86346436 -52.59003830]
[349.25598145 -53.05571747]
[357.62399292 -38.95221710]
[349.35916138 -24.78800774]
[332.96365356 -25.13401604]
[320.06344604 -17.47996712]
[307.16323853 -9.82591629]
[294.26303101 -2.17186522]
[290.02185059 4.09049988]
[280.76293945 5.51568079]
[267.59774780 12.70441628]
[254.43255615 19.89315033]
[241.26737976 27.08188629]
[228.10218811 34.27061844]
[214.93699646 41.45935440]
[201.77182007 48.64809036]
[188.73704529 56.07066345]
[175.83682251 63.72471619]
[168.83930969 76.87325287]
[153.02284241 77.26087189]
[140.12263489 84.91492462]
[127.22241974 92.56897736]
[114.32221222 100.22303009]
[107.30908203 112.31879425]
[93.33184052 112.67718506]
[80.43162537 120.33123779]
[67.53141785 127.98529053]
[68.46305847 136.92750549]
[66.59941101 145.68769836]
[62.14279175 153.41671753]
[55.54579163 159.37211609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 31]
[5 30]
[6 29]
[7 28]
[10 23]
[11 22]
[12 21]
[13 20]
[34 83]
[35 82]
[36 81]
[38 79]
[39 78]
[40 77]
[41 76]
[43 74]
[44 73]
[46 72]
[47 71]
[48 70]
[49 69]
[50 68]
[51 67]
[52 66]
[53 64]
[54 63]
[55 62]
[56 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
