%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGUUGUUGGUUUCGGGUUGUCAGGCAGCGCGCGAGGCGGCGGGCAGCUAGCAGCUGGCGGACGCGACCCGGAGGCGGUGGGGGUGCGGCUGAGCCAUGCCCGGUGGCGCGGCCUGAGCCCCUCCACCUGCUGCAAUC\
) } def
/len { sequence length } bind def

/coor [
[89.53535461 200.10848999]
[81.89723206 185.59672546]
[90.87339783 171.87226868]
[91.21238708 156.87609863]
[91.55137634 141.87992859]
[91.89037323 126.88376617]
[92.22936249 111.88759613]
[83.31421661 123.95076752]
[68.31684875 123.66946411]
[59.86035156 111.28045654]
[65.06243134 97.21139526]
[79.54465485 93.30404663]
[65.45571899 88.15605164]
[51.36678696 83.00805664]
[37.27785110 77.86005402]
[23.18891335 72.71205902]
[9.09997654 67.56406403]
[-4.98895979 62.41606903]
[-19.07789612 57.26807022]
[-33.16683197 52.12007523]
[-47.25576782 46.97207642]
[-56.68724442 57.67288971]
[-69.22636414 64.39717102]
[-83.28782654 66.32295990]
[-97.10365295 63.23318481]
[-108.94547272 55.53981781]
[-117.34076691 44.22914886]
[-121.25591278 30.73537827]
[-136.20899963 29.55004311]
[-150.57743835 36.17262268]
[-162.65348816 27.45378113]
[-177.60658264 26.26844597]
[-192.55967712 25.08310890]
[-204.41897583 35.52976608]
[-220.18615723 34.44751358]
[-230.50685120 22.47843170]
[-229.25796509 6.72356606]
[-217.18043518 -3.47000241]
[-201.43965149 -2.05460978]
[-191.37434387 10.13001633]
[-176.42124939 11.31535244]
[-161.46815491 12.50068760]
[-148.16926575 5.79332256]
[-135.02366638 14.59694958]
[-120.07057190 15.78228569]
[-117.52277374 9.03002262]
[-113.79219818 2.85206842]
[-123.97109985 -8.16564560]
[-134.14999390 -19.18335915]
[-144.32888794 -30.20107269]
[-154.50779724 -41.21878815]
[-169.69725037 -48.74985123]
[-166.66535950 -65.43049622]
[-149.79728699 -67.13475800]
[-143.49008179 -51.39768600]
[-133.31118774 -40.37997055]
[-123.13227844 -29.36225891]
[-112.95338440 -18.34454346]
[-102.77448273 -7.32683039]
[-85.75802612 -13.23225594]
[-67.82057953 -10.99904919]
[-52.66483688 -1.03128374]
[-43.44443130 14.66453266]
[-42.10777283 32.88314056]
[-28.01883698 38.03113556]
[-13.92989922 43.17913437]
[0.15903677 48.32712936]
[14.24797344 53.47512817]
[28.33691025 58.62312317]
[42.42584610 63.77112198]
[56.51478195 68.91912079]
[70.60372162 74.06711578]
[84.69265747 79.21511078]
[116.80372620 86.46566772]
[131.77978516 85.61856079]
[146.75584412 84.77146149]
[161.72137451 83.75518036]
[176.67446899 82.56984711]
[191.62756348 81.38450623]
[206.58065796 80.19917297]
[221.53375244 79.01383972]
[236.48684692 77.82849884]
[251.43994141 76.64316559]
[266.39303589 75.45783234]
[279.53863525 66.65420532]
[292.83752441 73.36156464]
[307.79061890 72.17623138]
[322.69494629 70.48473358]
[337.53335571 68.28901672]
[352.37176514 66.09329987]
[367.21020508 63.89758301]
[382.04861450 61.70186615]
[394.56756592 52.02782440]
[408.29031372 57.81874847]
[423.12875366 55.62303162]
[437.96716309 53.42731476]
[452.80560303 51.23159790]
[467.64401245 49.03588104]
[478.32153320 37.06214523]
[494.33172607 38.08849335]
[503.39294434 51.32759857]
[498.55419922 66.62355042]
[483.52737427 72.24260712]
[469.83975220 63.87430573]
[455.00131226 66.07002258]
[440.16290283 68.26573944]
[425.32446289 70.46145630]
[410.48605347 72.65717316]
[399.02847290 82.17416382]
[384.24435425 76.54029083]
[369.40591431 78.73600769]
[354.56750488 80.93172455]
[339.72906494 83.12744141]
[324.89065552 85.32315826]
[322.48049927 88.00517273]
[318.61614990 89.61191559]
[313.83709717 89.45669556]
[308.97595215 87.12932587]
[294.02285767 88.31465912]
[281.94680786 97.03350830]
[267.57836914 90.41091919]
[252.62527466 91.59626007]
[237.67218018 92.78159332]
[222.71908569 93.96692657]
[207.76599121 95.15226746]
[192.81289673 96.33760071]
[177.85980225 97.52293396]
[162.90670776 98.70827484]
[156.43286133 102.40370941]
[147.60295105 99.74752808]
[132.62689209 100.59462738]
[117.65082550 101.44172668]
[107.22553253 112.22658539]
[106.88653564 127.22275543]
[106.54754639 142.21893311]
[106.20855713 157.21510315]
[105.86956024 172.21125793]
[114.21638489 186.32730103]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 137]
[4 136]
[5 135]
[6 134]
[7 133]
[12 73]
[13 72]
[14 71]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 64]
[28 45]
[29 44]
[31 42]
[32 41]
[33 40]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[74 132]
[75 131]
[76 130]
[77 128]
[78 127]
[79 126]
[80 125]
[81 124]
[82 123]
[83 122]
[84 121]
[86 119]
[87 118]
[88 114]
[89 113]
[90 112]
[91 111]
[92 110]
[94 108]
[95 107]
[96 106]
[97 105]
[98 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
