%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:30:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGGGUAGACCGGCGCGCUCCCGGGGACGGUGGGGGGGGCAGUCCCGGUUUCGGCCAUCGCUGGGGUGGGCUCGGAGCGGCCGCACCGGGCAGCAACCCCACUCCCACUCGGAGGCCCCCUGCCCUCUCCCCCACUUCCCCCCGGCCC\
) } def
/len { sequence length } bind def

/coor [
[-26.28305054 494.98779297]
[-30.64677811 509.33901978]
[-35.01050568 523.69024658]
[-39.37423325 538.04150391]
[-33.11984634 552.81518555]
[-40.89718246 566.84704590]
[-56.74013519 569.37298584]
[-68.49534607 558.45538330]
[-67.14521790 542.46923828]
[-53.72546387 533.67779541]
[-49.36173630 519.32653809]
[-44.99801254 504.97531128]
[-40.63428497 490.62408447]
[-49.88111115 483.15374756]
[-56.06055450 472.95806885]
[-58.41837311 461.23596191]
[-56.65134048 449.37518311]
[-50.94601059 438.78817749]
[-41.95933151 430.74377441]
[-30.74307823 426.21511841]
[-18.62078285 425.76208496]
[-13.35862064 411.71539307]
[-8.09645939 397.66870117]
[-2.83429790 383.62200928]
[2.42786336 369.57531738]
[7.69002485 355.52862549]
[0.07379276 340.56851196]
[5.71389532 324.39990234]
[21.59517479 317.14239502]
[26.56002045 302.98788452]
[31.52486801 288.83337402]
[36.48971176 274.67886353]
[41.45455933 260.52435303]
[46.41940689 246.36982727]
[51.38425064 232.21531677]
[56.34909821 218.06079102]
[60.86387253 203.75636292]
[64.92406464 189.31631470]
[68.98425293 174.87628174]
[73.04444885 160.43623352]
[77.10463715 145.99618530]
[81.16482544 131.55615234]
[79.84831238 129.00842285]
[79.49694824 125.76866913]
[80.38607025 122.21514893]
[82.64414215 118.82088470]
[86.22349548 116.09812927]
[91.48565674 102.05143738]
[90.41275024 99.11814880]
[90.41438293 95.72070312]
[91.66756439 92.26803589]
[94.19135284 89.22959900]
[97.82850647 87.07450104]
[104.25522614 73.52100372]
[110.68195343 59.96751022]
[117.10868073 46.41401672]
[116.03017426 30.62961197]
[128.47431946 22.44471169]
[134.90104675 8.89121723]
[141.32777405 -4.66227674]
[139.39001465 -22.94267082]
[154.14230347 -32.39380264]
[160.28186035 -46.07977676]
[166.42140198 -59.76575470]
[172.56095886 -73.45172882]
[178.55587769 -87.20166779]
[184.40551758 -101.01404572]
[190.25517273 -114.82641602]
[196.10481262 -128.63879395]
[200.92016602 -142.84486389]
[204.67501831 -157.36729431]
[208.42985535 -171.88972473]
[212.18470764 -186.41217041]
[215.93955994 -200.93460083]
[219.69441223 -215.45703125]
[215.65795898 -230.75466919]
[226.33485413 -241.13990784]
[230.08969116 -255.66233826]
[225.18728638 -271.31155396]
[236.48634338 -283.19699097]
[252.36337280 -279.09188843]
[256.48544312 -263.21926880]
[244.61213684 -251.90748596]
[240.85728455 -237.38505554]
[245.16230774 -223.12615967]
[234.21684265 -211.70217896]
[230.46199036 -197.17974854]
[226.70715332 -182.65731812]
[222.95230103 -168.13487244]
[219.19744873 -153.61244202]
[215.44259644 -139.09001160]
[228.57414246 -146.34001160]
[243.32679749 -143.62724304]
[253.02023315 -132.18009949]
[253.26506042 -117.18209076]
[243.95039368 -105.42466736]
[229.29412842 -102.23184204]
[215.93296814 -109.04940033]
[209.91719055 -122.78914642]
[204.06753540 -108.97677612]
[198.21789551 -95.16439819]
[192.36825562 -81.35202789]
[192.65789795 -73.91588593]
[186.24693298 -67.31217957]
[180.10737610 -53.62620544]
[173.96783447 -39.94023132]
[167.82827759 -26.25425339]
[171.83982849 -14.79732609]
[166.78237915 -3.32169414]
[154.88125610 1.76444817]
[148.45454407 15.31794262]
[142.02781677 28.87143707]
[143.56599426 43.68640518]
[130.66217041 52.84074020]
[124.23545074 66.39423370]
[117.80872345 79.94773102]
[111.38199615 93.50122070]
[105.53235626 107.31359863]
[100.27019501 121.36029053]
[95.60487366 135.61633301]
[91.54467773 150.05638123]
[87.48448944 164.49642944]
[83.42430115 178.93646240]
[79.36410522 193.37651062]
[75.30391693 207.81655884]
[76.63515472 213.00437927]
[75.87467194 217.69715881]
[73.57602692 221.16859436]
[70.50360870 223.02563477]
[65.53876495 237.18016052]
[60.57392120 251.33467102]
[55.60907364 265.48919678]
[50.64422989 279.64370728]
[45.67938232 293.79821777]
[40.71453857 307.95272827]
[35.74969101 322.10723877]
[42.95817184 333.53286743]
[42.25822067 346.82894897]
[34.13142395 357.12829590]
[21.73672104 360.79077148]
[16.47455978 374.83746338]
[11.21239758 388.88415527]
[5.95023632 402.93087769]
[0.68807489 416.97756958]
[-4.57408667 431.02426147]
[7.61737585 444.78433228]
[11.18312454 462.73321533]
[5.23218155 479.94891357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 13]
[2 12]
[3 11]
[4 10]
[21 145]
[22 144]
[23 143]
[24 142]
[25 141]
[26 140]
[29 136]
[30 135]
[31 134]
[32 133]
[33 132]
[34 131]
[35 130]
[36 129]
[37 125]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[47 119]
[48 118]
[53 117]
[54 116]
[55 115]
[56 114]
[58 112]
[59 111]
[60 110]
[62 107]
[63 106]
[64 105]
[65 104]
[66 102]
[67 101]
[68 100]
[69 99]
[70 91]
[71 90]
[72 89]
[73 88]
[74 87]
[75 86]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
