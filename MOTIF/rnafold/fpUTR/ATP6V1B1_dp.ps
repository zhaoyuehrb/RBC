%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:22:32 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (ATP6V1B1)
} def

/sequence { (\
CUCUCUCCAGCUCCAGCUGGACCUGAAGUCUCAGAGCUGCCACCAGCAGCAGGCUCAGACACUGGGCUCCCAGCUGGGGACUGCUCC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.008134269 ubox
2 9 0.007876643 ubox
3 10 0.007750590 ubox
4 9 0.007236931 ubox
4 80 0.006922393 ubox
5 79 0.007455037 ubox
6 21 0.006539989 ubox
6 78 0.007378580 ubox
6 80 0.009122641 ubox
7 20 0.007001940 ubox
7 77 0.007283757 ubox
7 79 0.009789106 ubox
8 19 0.007006281 ubox
8 76 0.007270611 ubox
8 78 0.009652626 ubox
8 83 0.987483400 ubox
9 18 0.007004812 ubox
9 75 0.007226080 ubox
9 82 0.995736391 ubox
9 85 0.018306457 ubox
10 17 0.007006240 ubox
10 74 0.007185159 ubox
10 81 0.996604370 ubox
10 84 0.019534810 ubox
11 16 0.006983565 ubox
11 73 0.007166833 ubox
11 78 0.006061639 ubox
11 79 0.999345625 ubox
11 83 0.017437086 ubox
12 72 0.005972283 ubox
12 78 0.999110661 ubox
12 79 0.007884362 ubox
13 20 0.004692918 ubox
13 77 0.999886685 ubox
13 78 0.007334078 ubox
14 19 0.004692574 ubox
14 76 0.999920544 ubox
14 77 0.005306763 ubox
15 75 0.999703363 ubox
16 74 0.999939768 ubox
17 34 0.004286425 ubox
17 73 0.999939589 ubox
18 33 0.004350612 ubox
18 72 0.999646303 ubox
19 32 0.004382046 ubox
19 70 0.098032014 ubox
19 71 0.995101824 ubox
20 30 0.012441986 ubox
20 67 0.003751326 ubox
20 69 0.138170498 ubox
20 70 0.987976751 ubox
21 29 0.017627404 ubox
21 68 0.150720896 ubox
22 28 0.018153067 ubox
22 65 0.010872151 ubox
22 66 0.195361408 ubox
23 34 0.975699539 ubox
23 58 0.005181528 ubox
23 64 0.011020314 ubox
23 65 0.195405032 ubox
23 66 0.017312502 ubox
24 33 0.978647524 ubox
24 57 0.006204906 ubox
24 64 0.191503753 ubox
24 65 0.017033903 ubox
25 32 0.979161033 ubox
25 56 0.007008279 ubox
25 63 0.134415857 ubox
25 69 0.003639106 ubox
26 31 0.916002090 ubox
26 55 0.004951698 ubox
27 55 0.005724333 ubox
27 63 0.062211101 ubox
28 54 0.007636202 ubox
28 60 0.184630894 ubox
28 62 0.066386195 ubox
29 35 0.009114398 ubox
29 53 0.007634793 ubox
29 59 0.185109335 ubox
29 61 0.065045206 ubox
30 34 0.009720840 ubox
30 52 0.008095713 ubox
30 58 0.185159520 ubox
31 51 0.008042224 ubox
31 57 0.175754524 ubox
31 59 0.065137020 ubox
32 52 0.004510076 ubox
32 58 0.065678139 ubox
33 55 0.113458860 ubox
34 54 0.115172539 ubox
34 56 0.157561739 ubox
34 86 0.005584637 ubox
35 55 0.158241438 ubox
35 85 0.006278832 ubox
36 47 0.053351315 ubox
36 50 0.984416840 ubox
36 54 0.157696761 ubox
36 84 0.006358522 ubox
37 46 0.053407667 ubox
37 49 0.985470904 ubox
37 52 0.107230098 ubox
37 53 0.119827961 ubox
37 83 0.006336128 ubox
38 45 0.053344574 ubox
38 48 0.985330632 ubox
38 51 0.148286567 ubox
38 52 0.060093718 ubox
39 44 0.052733128 ubox
39 47 0.985637461 ubox
39 50 0.159649757 ubox
40 46 0.984218706 ubox
40 49 0.159671498 ubox
40 79 0.006067876 ubox
41 78 0.006082201 ubox
43 77 0.006383287 ubox
44 76 0.006389907 ubox
45 75 0.006388698 ubox
46 74 0.006390121 ubox
47 73 0.006380944 ubox
51 68 0.055345830 ubox
52 67 0.043053085 ubox
52 68 0.900439280 ubox
52 69 0.209937773 ubox
53 67 0.978923537 ubox
53 68 0.023629614 ubox
54 65 0.013793212 ubox
54 66 0.980309888 ubox
55 64 0.003878706 ubox
55 65 0.979682972 ubox
56 64 0.980329526 ubox
56 65 0.003716720 ubox
57 63 0.977965240 ubox
58 62 0.956532531 ubox
78 87 0.006794192 ubox
79 86 0.007074100 ubox
80 85 0.006468336 ubox
8 83 0.9500000 lbox
9 82 0.9500000 lbox
10 81 0.9500000 lbox
11 79 0.9500000 lbox
12 78 0.9500000 lbox
13 77 0.9500000 lbox
14 76 0.9500000 lbox
15 75 0.9500000 lbox
16 74 0.9500000 lbox
17 73 0.9500000 lbox
18 72 0.9500000 lbox
19 71 0.9500000 lbox
20 70 0.9500000 lbox
23 34 0.9500000 lbox
24 33 0.9500000 lbox
25 32 0.9500000 lbox
26 31 0.9500000 lbox
36 50 0.9500000 lbox
37 49 0.9500000 lbox
38 48 0.9500000 lbox
39 47 0.9500000 lbox
40 46 0.9500000 lbox
52 68 0.9500000 lbox
53 67 0.9500000 lbox
54 66 0.9500000 lbox
55 65 0.9500000 lbox
56 64 0.9500000 lbox
57 63 0.9500000 lbox
58 62 0.9500000 lbox
showpage
end
%%EOF
