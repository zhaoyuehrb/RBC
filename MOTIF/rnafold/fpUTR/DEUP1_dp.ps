%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:05:40 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (DEUP1)
} def

/sequence { (\
AUACGCGGUCCUGCGCCCUCGCCUCAGACCUCUCGGGCGAGCGCGGCGCAGCGCAGAUUAAAAAUCAAGAAAUAUAAACCAGAUGUAGCAGUUUCUUGAC\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 58 0.156296580 ubox
2 57 0.181617028 ubox
2 60 0.067167855 ubox
2 64 0.005208262 ubox
3 9 0.004416806 ubox
3 59 0.068117545 ubox
4 8 0.004760700 ubox
4 53 0.143800298 ubox
4 98 0.003214485 ubox
5 49 0.007737689 ubox
5 52 0.146548245 ubox
5 54 0.934621556 ubox
6 48 0.007747216 ubox
6 51 0.144373505 ubox
6 53 0.935548977 ubox
7 47 0.007609443 ubox
7 52 0.929342767 ubox
7 59 0.073739389 ubox
8 47 0.003708817 ubox
8 49 0.138997207 ubox
8 52 0.072403592 ubox
8 54 0.302408363 ubox
8 58 0.086374613 ubox
9 48 0.137703956 ubox
9 51 0.054758779 ubox
9 53 0.299170367 ubox
9 57 0.087451540 ubox
10 46 0.017063760 ubox
10 56 0.087569567 ubox
11 45 0.016823556 ubox
11 46 0.141002572 ubox
11 51 0.984463461 ubox
11 56 0.003402279 ubox
12 45 0.141029577 ubox
12 48 0.007973352 ubox
12 50 0.988516437 ubox
12 55 0.003834221 ubox
13 44 0.142159474 ubox
13 47 0.009241838 ubox
13 49 0.989708424 ubox
13 54 0.003771333 ubox
14 43 0.142161269 ubox
14 45 0.013499281 ubox
14 46 0.006557593 ubox
14 48 0.989698427 ubox
14 53 0.003746041 ubox
15 42 0.141521379 ubox
15 44 0.016496481 ubox
15 47 0.989677709 ubox
15 52 0.003585563 ubox
16 41 0.126405208 ubox
16 43 0.016745808 ubox
16 46 0.989671355 ubox
16 51 0.003555046 ubox
17 45 0.988775168 ubox
17 46 0.005165256 ubox
18 41 0.989770393 ubox
18 45 0.006488445 ubox
19 40 0.998945604 ubox
20 39 0.999917087 ubox
20 43 0.007919944 ubox
21 38 0.999933807 ubox
21 42 0.007948298 ubox
21 44 0.005654906 ubox
22 36 0.004482778 ubox
22 37 0.999830291 ubox
22 41 0.005761003 ubox
22 43 0.005657847 ubox
23 35 0.006317661 ubox
23 36 0.999662134 ubox
23 37 0.014724965 ubox
23 41 0.007878505 ubox
24 35 0.967997936 ubox
24 36 0.020734274 ubox
24 40 0.009591425 ubox
25 35 0.166965527 ubox
25 39 0.009589349 ubox
26 33 0.958410336 ubox
27 32 0.969518019 ubox
27 34 0.180030454 ubox
28 33 0.162801586 ubox
29 36 0.008610440 ubox
29 37 0.005706487 ubox
30 35 0.009377084 ubox
30 36 0.005715335 ubox
31 35 0.005176575 ubox
56 66 0.037341142 ubox
57 65 0.044362937 ubox
58 64 0.049027919 ubox
59 63 0.042676697 ubox
65 99 0.912509120 ubox
66 98 0.998795380 ubox
67 97 0.999197757 ubox
68 96 0.999384691 ubox
69 95 0.999947994 ubox
70 93 0.008577782 ubox
70 94 0.999349025 ubox
71 92 0.011022540 ubox
71 93 0.996479154 ubox
71 94 0.009124295 ubox
72 84 0.003966538 ubox
72 86 0.048548954 ubox
72 92 0.988951083 ubox
72 93 0.012310536 ubox
73 83 0.005041545 ubox
73 85 0.058279560 ubox
73 87 0.199751889 ubox
73 91 0.941167113 ubox
74 84 0.072867867 ubox
74 86 0.291376990 ubox
74 92 0.019505467 ubox
75 83 0.071615494 ubox
75 85 0.291740156 ubox
75 87 0.143267962 ubox
75 91 0.022906143 ubox
76 84 0.278051655 ubox
76 86 0.135161213 ubox
76 94 0.006926249 ubox
77 93 0.016918561 ubox
78 86 0.706852400 ubox
78 92 0.023026630 ubox
79 85 0.727341552 ubox
79 91 0.024437344 ubox
81 94 0.005995314 ubox
82 92 0.003366523 ubox
82 93 0.017639328 ubox
82 95 0.003771909 ubox
83 92 0.021397918 ubox
83 94 0.003732868 ubox
84 90 0.072168294 ubox
84 91 0.022513843 ubox
85 89 0.071588895 ubox
86 91 0.004343488 ubox
5 54 0.9500000 lbox
6 53 0.9500000 lbox
7 52 0.9500000 lbox
11 51 0.9500000 lbox
12 50 0.9500000 lbox
13 49 0.9500000 lbox
14 48 0.9500000 lbox
15 47 0.9500000 lbox
16 46 0.9500000 lbox
17 45 0.9500000 lbox
18 41 0.9500000 lbox
19 40 0.9500000 lbox
20 39 0.9500000 lbox
21 38 0.9500000 lbox
22 37 0.9500000 lbox
23 36 0.9500000 lbox
24 35 0.9500000 lbox
26 33 0.9500000 lbox
27 32 0.9500000 lbox
65 99 0.9500000 lbox
66 98 0.9500000 lbox
67 97 0.9500000 lbox
68 96 0.9500000 lbox
69 95 0.9500000 lbox
70 94 0.9500000 lbox
71 93 0.9500000 lbox
72 92 0.9500000 lbox
73 91 0.9500000 lbox
78 86 0.9500000 lbox
79 85 0.9500000 lbox
showpage
end
%%EOF
