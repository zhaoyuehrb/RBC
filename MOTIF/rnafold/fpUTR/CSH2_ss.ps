%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:33:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGGAGAGAGAACUGGCCAGGGUAUAAAAAGGGCCCACAAGAGACCGGCUCUAGGAUCCCAAGGCCCAACUCCCCGAACCACUCAGGGUCCUGUGGACAGCUCACCUAGCGGCA\
) } def
/len { sequence length } bind def

/coor [
[130.73361206 150.51516724]
[126.15988922 138.79635620]
[127.06173706 126.17613983]
[114.42300415 118.09761810]
[101.78427887 110.01909637]
[93.72351837 108.64561462]
[88.91680908 101.54678345]
[76.50147247 93.12897491]
[64.08613586 84.71117401]
[53.94347382 90.52243805]
[42.40740204 92.05720520]
[31.19835854 89.12610626]
[21.97309494 82.20286560]
[16.07978439 72.34822845]
[14.36107540 61.04758453]
[17.03378677 49.98711395]
[5.34258652 40.58946609]
[-6.34861422 31.19181442]
[-18.03981590 21.79416466]
[-36.24385834 19.46673775]
[-42.07264328 2.97455049]
[-54.01404190 -6.10306263]
[-65.95543671 -15.18067646]
[-74.80736542 -17.93672371]
[-78.09285736 -24.66934967]
[-89.78405762 -34.06700134]
[-102.85460663 -29.45940971]
[-116.38165283 -31.92670250]
[-126.81751251 -40.71215057]
[-131.47975159 -53.41654205]
[-129.24017334 -66.65257263]
[-140.67259216 -76.36336517]
[-152.10502625 -86.07415771]
[-163.53746033 -95.78495026]
[-174.96989441 -105.49574280]
[-186.40232849 -115.20654297]
[-200.57307434 -109.42309570]
[-215.80725098 -110.89912415]
[-228.60412598 -119.29545593]
[-236.02310181 -132.68267822]
[-236.35931396 -147.98448181]
[-229.53553772 -161.68466187]
[-217.11981201 -170.63497925]
[-201.96517944 -172.77874756]
[-187.55407715 -167.62332153]
[-177.19804382 -156.35339355]
[-173.27684021 -141.55870056]
[-176.69152832 -126.63896942]
[-165.25909424 -116.92817688]
[-153.82666016 -107.21738434]
[-142.39424133 -97.50659180]
[-130.96180725 -87.79579163]
[-119.52937317 -78.08499908]
[-103.77661896 -82.48050690]
[-88.33631897 -76.60663605]
[-79.30924225 -62.57426834]
[-80.38640594 -45.75820160]
[-68.69520569 -36.36054993]
[-56.87782288 -27.12207222]
[-44.93642807 -18.04445839]
[-32.99502945 -8.96684551]
[-20.88553047 -10.27431202]
[-10.84244728 -2.69437766]
[-8.64216518 10.10296345]
[3.04903579 19.50061417]
[14.74023628 28.89826393]
[26.43143654 38.29591370]
[43.98910141 32.30104065]
[61.80148315 37.99522781]
[72.79801178 53.30272293]
[72.50394440 72.29583740]
[84.91928101 80.71364594]
[97.33460999 89.13144684]
[109.86279297 97.38036346]
[122.50152588 105.45888519]
[135.14025879 113.53740692]
[151.68812561 106.40334320]
[169.07806396 110.49432373]
[180.50904846 124.02011108]
[181.62408447 141.53829956]
[194.68165588 148.92073059]
[210.50276184 148.97729492]
[217.77389526 161.97651672]
[230.83145142 169.35894775]
[239.97441101 170.89474487]
[244.13873291 177.12220764]
[256.99157715 184.85551453]
[269.84445190 192.58882141]
[283.28253174 199.25349426]
[297.21716309 204.80557251]
[311.15182495 210.35763550]
[325.08648682 215.90971375]
[342.03863525 216.15547180]
[346.49533081 232.51316833]
[332.01062012 241.32394409]
[319.53439331 229.84436035]
[305.59976196 224.29229736]
[291.66510010 218.74021912]
[277.73046875 213.18814087]
[281.80422974 227.62435913]
[274.69577026 240.83306885]
[260.40316772 245.38517761]
[246.96513367 238.72039795]
[241.93972778 224.58726501]
[248.15344238 210.93479919]
[262.11114502 205.44168091]
[249.25827026 197.70837402]
[236.40542603 189.97506714]
[223.44902039 182.41650391]
[210.39146423 175.03407288]
[195.50431824 175.50555420]
[187.29922485 161.97828674]
[174.24166870 154.59585571]
[163.92953491 161.28005981]
[151.67483521 162.90280151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[7 73]
[8 72]
[9 71]
[16 67]
[17 66]
[18 65]
[19 64]
[21 61]
[22 60]
[23 59]
[25 58]
[26 57]
[31 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[80 113]
[81 112]
[83 110]
[84 109]
[86 108]
[87 107]
[88 106]
[89 99]
[90 98]
[91 97]
[92 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
