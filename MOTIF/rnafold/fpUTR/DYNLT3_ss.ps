%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:38:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGGCGGGGAUUGCGUAGGGAAAGGCCCUAGGCCAUAAACGGGGGUGGGGCCUCCCCGGAGGCCAGUGCGCGGCCGCGGUGCUCUACCGGCGUGUCGCUCCGCCCCAGGGAGAGCCGGCGCUACC\
) } def
/len { sequence length } bind def

/coor [
[87.55323029 288.80566406]
[79.80168915 275.22448730]
[82.64431000 259.84744263]
[94.73889160 249.93508911]
[94.73889160 234.93508911]
[94.73889160 219.93508911]
[94.73889160 204.93508911]
[85.14099884 190.29833984]
[94.33859253 174.40341187]
[93.96757507 159.40800476]
[80.01557922 156.27009583]
[67.20975494 149.90492249]
[56.28456116 140.67753601]
[47.86658859 129.11715698]
[33.95574188 134.72860718]
[24.05210686 147.06669617]
[9.35446644 144.65243530]
[-4.55637836 150.26388550]
[-18.46722221 155.87535095]
[-32.37806702 161.48680115]
[-46.28891373 167.09825134]
[-53.86354828 181.24053955]
[-69.66851044 183.99418640]
[-81.57959747 173.24684143]
[-80.45962524 157.24291992]
[-67.16775513 148.25929260]
[-51.90036392 153.18740845]
[-37.98952103 147.57595825]
[-24.07867622 141.96449280]
[-10.16783142 136.35304260]
[3.74301338 130.74159241]
[12.65165424 118.80487061]
[28.34428978 120.81776428]
[42.25513458 115.20630646]
[40.28729248 100.30592346]
[42.10235977 85.38616180]
[47.58535004 71.39221191]
[56.38890457 59.21062088]
[67.95530701 49.61310959]
[81.55179596 43.20770264]
[96.31701660 40.40019608]
[111.31555939 41.36844254]
[125.59723663 46.05111313]
[133.67845154 33.41410446]
[141.75967407 20.77709579]
[149.84088135 8.14008808]
[157.92210388 -4.49692011]
[166.00331116 -17.13392830]
[174.08453369 -29.77093697]
[176.11903381 -44.63232040]
[171.73149109 -58.97629166]
[167.34394836 -73.32025909]
[162.95639038 -87.66423035]
[158.56884766 -102.00819397]
[154.18130493 -116.35216522]
[141.82374573 -127.13284302]
[145.24641418 -143.17083740]
[160.92832947 -147.96765137]
[172.73730469 -136.58871460]
[168.52526855 -120.73970795]
[172.91281128 -106.39574432]
[177.30036926 -92.05177307]
[181.68791199 -77.70780945]
[186.07545471 -63.36383820]
[190.46299744 -49.01986694]
[197.41842651 -46.21414185]
[198.45657349 -61.17817307]
[213.00901794 -64.81495667]
[220.96473694 -52.09856796]
[211.32926941 -40.60268784]
[218.28469849 -37.79696274]
[231.39698792 -45.08172607]
[244.50927734 -52.36648560]
[257.62158203 -59.65124893]
[270.73385620 -66.93601227]
[283.75506592 -74.38238525]
[296.68316650 -81.98925018]
[309.61126709 -89.59610748]
[322.44427490 -97.36227417]
[335.18026733 -105.28657532]
[347.91625977 -113.21087646]
[360.65225220 -121.13517761]
[370.90652466 -134.63652039]
[386.71890259 -128.52053833]
[385.21923828 -111.63304901]
[368.57656860 -108.39918518]
[355.84057617 -100.47488403]
[343.10458374 -92.55058289]
[330.36859131 -84.62628937]
[326.30780029 -78.35402679]
[317.21810913 -76.66800690]
[304.29000854 -69.06114960]
[291.36190796 -61.45429230]
[287.14724731 -55.28438950]
[278.01861572 -53.82371521]
[264.90634155 -46.53895569]
[251.79403687 -39.25419235]
[238.68174744 -31.96943092]
[225.56945801 -24.68466949]
[203.51264954 -14.72366333]
[186.72154236 -21.68972206]
[178.64031982 -9.05271435]
[170.55911255 3.58429408]
[162.47789001 16.22130203]
[154.39668274 28.85831070]
[146.31546021 41.49531937]
[138.23425293 54.13232803]
[148.57180786 65.26557159]
[155.76522827 78.64723206]
[159.34886169 93.41109467]
[159.09074402 108.60147858]
[155.00756836 123.23506165]
[147.36366272 136.36460876]
[136.65382385 147.14019775]
[123.57131195 154.86433411]
[108.96298981 159.03698730]
[109.33400726 174.03239441]
[118.15921783 183.53479004]
[118.10041046 196.10078430]
[109.73889160 204.93508911]
[109.73889160 219.93508911]
[109.73889160 234.93508911]
[109.73889160 249.93508911]
[121.83347321 259.84744263]
[124.67609406 275.22448730]
[116.92455292 288.80566406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 123]
[5 122]
[6 121]
[7 120]
[9 117]
[10 116]
[14 34]
[15 33]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[43 107]
[44 106]
[45 105]
[46 104]
[47 103]
[48 102]
[49 101]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[71 99]
[72 98]
[73 97]
[74 96]
[75 95]
[76 93]
[77 92]
[78 91]
[79 89]
[80 88]
[81 87]
[82 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
