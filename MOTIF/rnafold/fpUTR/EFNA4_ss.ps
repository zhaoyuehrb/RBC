%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:03:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCUCUUCACUUUGUACCUUUCUCUCCUCGACUGUGAAGCGGGCCGGGACCUGCCAGGCCAGACCAAACCGGACCUCGGGGGCG\
) } def
/len { sequence length } bind def

/coor [
[74.26876831 142.62846375]
[72.30654144 127.75737000]
[78.46700287 114.08079529]
[90.90297699 105.69647217]
[76.24577332 102.50798798]
[61.58856964 99.31951141]
[46.45909500 103.94655609]
[35.66736221 93.68069458]
[21.01015854 90.49221802]
[6.35295534 87.30374146]
[-8.30424786 84.11525726]
[-22.96145058 80.92678070]
[-37.61865234 77.73830414]
[-54.89134216 83.80730438]
[-67.51505280 71.75826263]
[-82.27671814 69.09496307]
[-97.03839111 66.43166351]
[-105.22717285 79.23838806]
[-117.69641113 87.93244934]
[-132.54461670 91.18805695]
[-147.50756836 88.50876617]
[-160.30351257 80.30313873]
[-168.98115540 67.82247925]
[-172.21723938 52.96999741]
[-169.51826477 38.01058578]
[-161.29580688 25.22544861]
[-148.80374146 16.56422615]
[-133.94702148 13.34769058]
[-118.99117279 16.06634140]
[-106.21686554 24.30560493]
[-97.57208252 36.80905151]
[-94.37509155 51.66999435]
[-79.61342621 54.33329391]
[-64.85175323 56.99659348]
[-54.59904861 50.31344986]
[-42.15981674 52.57110977]
[-34.43017578 63.08109665]
[-19.77297211 66.26957703]
[-5.11576843 69.45805359]
[9.54143429 72.64653778]
[24.19863701 75.83501434]
[38.85584259 79.02349854]
[52.93693542 74.16839600]
[64.77704620 84.66230774]
[79.43424988 87.85079193]
[94.09145355 91.03926849]
[109.06995392 91.84213257]
[123.98400879 90.23870850]
[138.89805603 88.63527679]
[153.81211853 87.03185272]
[168.72616577 85.42842102]
[178.63093567 73.40621948]
[193.77874756 71.99256897]
[205.17904663 81.50933838]
[220.09309387 79.90590668]
[235.00715637 78.30248260]
[243.13551331 63.59407043]
[258.24429321 56.62103653]
[274.38760376 59.91273117]
[285.33877563 72.00046539]
[300.18609619 69.86574554]
[310.91271973 57.93598938]
[326.91854858 59.02812195]
[335.92529297 72.30435181]
[331.02374268 87.58028412]
[315.97393799 93.13754272]
[302.32080078 84.71306610]
[287.47348022 86.84778595]
[282.29354858 99.28827667]
[271.52130127 107.56507874]
[257.95031738 109.39492035]
[245.16873169 104.18450165]
[236.61058044 93.21653748]
[221.69651794 94.81996155]
[206.78247070 96.42339325]
[197.66563416 108.14597321]
[182.56350708 109.98453522]
[170.32960510 100.34247589]
[155.41554260 101.94590759]
[140.50149536 103.54933167]
[125.58743286 105.15276337]
[110.67337799 106.75618744]
[122.14282227 116.42324066]
[126.80512238 130.68026733]
[123.26358032 145.25619507]
[112.57914734 155.78439331]
[97.95264435 159.11085510]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 46]
[5 45]
[6 44]
[8 42]
[9 41]
[10 40]
[11 39]
[12 38]
[13 37]
[15 34]
[16 33]
[17 32]
[47 82]
[48 81]
[49 80]
[50 79]
[51 78]
[54 75]
[55 74]
[56 73]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
