%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:21:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAAAUGCUCUUCUGACUAAUGCAAACCAUGUGUCCAUAGAACCAGAAGAUUUUUCCAGGGGAAAAGAGCCCCCACGCCCCGCCCAGCUAUAAGGGGCC\
) } def
/len { sequence length } bind def

/coor [
[102.94081116 161.48432922]
[90.51137543 160.81889343]
[78.46994019 157.66653442]
[67.30888367 152.15614319]
[57.48458862 144.51304626]
[49.39877701 135.04978943]
[43.38208008 124.15332794]
[39.68053055 112.26921082]
[38.44548416 99.88340759]
[39.72744370 87.50236511]
[25.52037048 82.68997955]
[11.31329727 77.87759399]
[-2.89377618 73.06520081]
[-17.10084915 68.25281525]
[-31.30792236 63.44042969]
[-45.51499557 58.62804413]
[-64.92680359 63.60461044]
[-77.31301880 48.89425659]
[-91.79179382 44.97442627]
[-106.27056885 41.05459595]
[-120.91641235 37.81433105]
[-135.69744873 35.26067734]
[-150.47846985 32.70702362]
[-165.25950623 30.15336990]
[-180.04052734 27.59971619]
[-193.92639160 35.63480377]
[-208.81304932 29.65426064]
[-213.28074646 14.24584579]
[-203.90223694 1.22957730]
[-187.87191772 0.59042257]
[-177.48687744 12.81868649]
[-162.70585632 15.37233925]
[-147.92481995 17.92599297]
[-133.14378357 20.47964668]
[-118.36275482 23.03330040]
[-115.17900085 21.15747452]
[-110.88327026 20.83907700]
[-106.27117920 22.60372734]
[-102.35073853 26.57582092]
[-87.87196350 30.49565125]
[-73.39318848 34.41547775]
[-64.82952118 28.45395660]
[-54.17470169 28.28330612]
[-45.05231476 34.20892334]
[-40.70261002 44.42097092]
[-26.49553680 49.23335648]
[-12.28846264 54.04574585]
[1.91861045 58.85813141]
[16.12568474 63.67051697]
[30.33275795 68.48290253]
[44.53982925 73.29528809]
[52.03460693 61.42160034]
[62.02522278 51.55530930]
[73.99182129 44.20979691]
[87.31174469 39.76728439]
[101.29188538 38.45893478]
[115.20480347 40.35282135]
[128.32655334 45.35040283]
[139.97434998 53.19163513]
[149.54211426 63.46850204]
[162.60955811 56.10358810]
[175.67700195 48.73867798]
[188.74444580 41.37376785]
[190.39250183 25.94445801]
[200.81987000 14.45318127]
[216.01704407 11.31856632]
[230.14036560 17.74593544]
[237.75917053 31.26383591]
[235.94383240 46.67435837]
[225.39241028 58.05184174]
[210.16213989 61.02141571]
[196.10935974 54.44121170]
[183.04191589 61.80612183]
[169.97447205 69.17103577]
[156.90702820 76.53594208]
[161.51239014 97.72012329]
[158.48783875 119.18710327]
[148.20852661 138.27413940]
[158.73233032 148.96289062]
[169.25613403 159.65165710]
[179.77993774 170.34040833]
[190.30374146 181.02917480]
[204.73239136 176.05152893]
[219.89086914 177.83572388]
[232.76945496 186.02748108]
[240.81108093 199.00033569]
[242.41909790 214.17851257]
[237.27421570 228.54837036]
[226.39796448 239.25677490]
[211.94982910 244.17755127]
[196.79849243 242.33367920]
[183.95227051 234.09127808]
[175.96177673 221.08685303]
[174.41355896 205.90246582]
[179.61499023 191.55297852]
[169.09118652 180.86421204]
[158.56738281 170.17546082]
[148.04357910 159.48669434]
[137.51977539 148.79792786]
[126.93559265 155.34840393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 51]
[11 50]
[12 49]
[13 48]
[14 47]
[15 46]
[16 45]
[18 41]
[19 40]
[20 39]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[60 75]
[61 74]
[62 73]
[63 72]
[78 99]
[79 98]
[80 97]
[81 96]
[82 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
