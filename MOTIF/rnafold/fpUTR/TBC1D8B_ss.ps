%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGUGGGAGAGAAGGGAGGGUUGGGGGAAGUGUGGAAAACCUGAACCUGAGCUGCUGUCGCCUGAGGAAGAUUUGGUGGGAGGAGAAGCAGAGGGGAAGAGACGGGUUGAGAGUGAGGUGAGGAGGGCAUCUAGGUCACUGCUCCCGGGGGGCACAAAGUUCGCG\
) } def
/len { sequence length } bind def

/coor [
[72.33952332 522.98785400]
[74.89440918 503.77532959]
[75.17826843 488.77801514]
[75.46213531 473.78070068]
[75.74599457 458.78338623]
[76.02985382 443.78607178]
[76.31372070 428.78875732]
[62.67094803 425.51971436]
[50.00986862 419.46276855]
[38.89338684 410.88424683]
[29.81634521 400.16262817]
[23.18350601 387.77194214]
[19.29149818 374.26071167]
[18.31555748 360.22763062]
[20.30163002 346.29516602]
[25.16422462 333.08187866]
[32.69008636 321.17489624]
[42.54754257 311.10394287]
[54.30113220 303.31774902]
[67.43082428 298.16394043]
[81.35504913 295.87368774]
[82.20623016 280.89785767]
[83.05741119 265.92202759]
[83.90858459 250.94621277]
[84.75976562 235.97038269]
[85.61094666 220.99455261]
[86.46212769 206.01872253]
[79.45950317 192.87289429]
[87.96743011 179.53401184]
[88.81861115 164.55818176]
[89.66979218 149.58235168]
[90.52097321 134.60652161]
[79.36464691 129.35380554]
[70.64543915 120.63427734]
[65.39312744 109.47776031]
[64.22802734 97.20188141]
[67.28774261 85.25646973]
[74.21090698 75.05233002]
[84.17987061 67.79460907]
[80.52655792 53.24629974]
[76.73575592 38.73320770]
[72.80778503 24.25663948]
[61.72670746 12.96415234]
[65.86119080 -1.34512079]
[61.93322372 -15.82169056]
[58.00525665 -30.29825974]
[54.07728958 -44.77482986]
[50.14932251 -59.25139999]
[46.22135544 -73.72796631]
[40.50553131 -78.38725281]
[38.09495926 -84.60162354]
[38.99635696 -90.49354553]
[31.17098427 -103.29056549]
[17.37059784 -111.02747345]
[17.33184242 -125.92203522]
[9.50646973 -138.71903992]
[-4.29391813 -146.45596313]
[-4.33267212 -161.35050964]
[-12.15804482 -174.14752197]
[-19.98341751 -186.94453430]
[-27.80879021 -199.74154663]
[-35.63416290 -212.53857422]
[-49.43455124 -220.27548218]
[-49.47330475 -235.17004395]
[-57.29867935 -247.96705627]
[-72.71960449 -251.42691040]
[-81.10665894 -264.82217407]
[-77.48394775 -280.20565796]
[-64.00077057 -288.45062256]
[-48.65645218 -284.66546631]
[-40.55450058 -271.09585571]
[-44.50166321 -255.79241943]
[-36.67629242 -242.99540710]
[-23.43562698 -236.17382812]
[-22.83715057 -220.36393738]
[-15.01177692 -207.56692505]
[-7.18640471 -194.76991272]
[0.63896811 -181.97290039]
[8.46434116 -169.17588806]
[21.70500565 -162.35429382]
[22.30348396 -146.54441833]
[30.12885666 -133.74740601]
[43.36952209 -126.92581940]
[43.96799850 -111.11593628]
[51.79336929 -98.31892395]
[51.74901962 -113.31885529]
[56.45500565 -127.56153107]
[65.42736053 -139.58221436]
[77.74336243 -148.14469910]
[92.13642120 -152.36840820]
[107.12635803 -151.81896973]
[121.17158508 -146.55290222]
[132.82769775 -137.11175537]
[140.89595032 -124.46646881]
[144.54663086 -109.91749573]
[143.40426636 -94.96105957]
[137.58636475 -81.13529205]
[127.69123077 -69.86203003]
[114.73648834 -62.30064011]
[100.05440521 -59.22872925]
[85.15491486 -60.96222305]
[71.57026672 -67.32283783]
[60.69792557 -77.65593719]
[64.62589264 -63.17936707]
[68.55385590 -48.70279694]
[72.48182678 -34.22622681]
[76.40979004 -19.74965858]
[80.33776093 -5.27308798]
[91.13788605 4.98393726]
[87.28435516 20.32867241]
[91.21232605 34.80524063]
[96.01999664 40.46218872]
[95.07487488 49.59299088]
[98.72817993 64.14130402]
[121.79819489 71.49908447]
[134.94044495 91.83731842]
[149.93775940 91.55345917]
[164.93507385 91.26959991]
[179.93238831 90.98573303]
[194.92970276 90.70187378]
[204.61141968 78.42187500]
[219.93191528 75.28876495]
[233.65731812 82.78190613]
[239.30691528 97.36326599]
[234.21315002 112.14797211]
[220.78111267 120.15513611]
[205.35302734 117.60401917]
[195.21356201 105.69918823]
[180.21624756 105.98304749]
[165.21893311 106.26691437]
[150.22161865 106.55077362]
[135.22430420 106.83463287]
[132.51358032 115.17665863]
[127.85987091 122.61174774]
[121.54129791 128.69558716]
[113.93543243 133.06459045]
[105.49680328 135.45770264]
[104.64562225 150.43353271]
[103.79444122 165.40936279]
[102.94326019 180.38519287]
[109.88500214 194.60218811]
[101.43795776 206.86990356]
[100.58677673 221.84573364]
[99.73559570 236.82156372]
[98.88441467 251.79739380]
[98.03324127 266.77322388]
[97.18206024 281.74905396]
[96.33087921 296.72488403]
[111.68865204 301.32550049]
[125.50628662 309.43914795]
[136.99441528 320.59762573]
[145.49784851 334.15899658]
[150.53297424 349.34448242]
[151.81517029 365.28308105]
[149.27497864 381.06158447]
[143.06185913 395.77697754]
[133.53529358 408.58801270]
[121.24412537 418.76330566]
[106.89484406 425.72317505]
[91.31103516 429.07260132]
[91.02716827 444.06991577]
[90.74330902 459.06723022]
[90.45944977 474.06454468]
[90.17558289 489.06185913]
[89.89172363 504.05917358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 165]
[3 164]
[4 163]
[5 162]
[6 161]
[7 160]
[21 148]
[22 147]
[23 146]
[24 145]
[25 144]
[26 143]
[27 142]
[29 140]
[30 139]
[31 138]
[32 137]
[39 114]
[40 113]
[41 111]
[42 110]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[49 103]
[52 85]
[53 84]
[55 82]
[56 81]
[58 79]
[59 78]
[60 77]
[61 76]
[62 75]
[64 73]
[65 72]
[116 132]
[117 131]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
