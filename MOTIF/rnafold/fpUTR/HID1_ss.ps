%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:24:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGUCGGGGCGGGGCCGACGAGGGCCGGGGGCGGGGCGCGCCGCUUGUCUCCUGCGAGAGCCGCGGGGGCCGCGGAGCUGGAGCCGGAGCUGAAGCCGGAGCCGGGUUGGAGUCUGGGCGGGGGCCGGGCCGGAGCGGGCUCCAGAGAC\
) } def
/len { sequence length } bind def

/coor [
[164.74797058 198.72584534]
[149.96653748 196.17451477]
[137.05278015 188.54331970]
[127.68796539 176.82580566]
[123.09130096 162.54748535]
[123.86122894 147.56726074]
[129.89752197 133.83541870]
[140.41429138 123.13974762]
[154.04325867 116.87249756]
[139.20416260 114.68125153]
[124.36508179 112.49000549]
[109.52600098 110.29875946]
[95.21239471 114.78437042]
[84.27786255 125.05257416]
[73.34333801 135.32078552]
[62.40880585 145.58898926]
[62.16295242 161.39137268]
[50.75714874 172.33134460]
[34.95825577 171.91844177]
[24.13947487 160.39759827]
[24.71939850 144.60395813]
[36.35396957 133.90759277]
[52.14059830 134.65446472]
[63.07513046 124.38625336]
[74.00965881 114.11804962]
[84.94419098 103.84983826]
[78.98696899 90.08351898]
[64.01657104 91.02537537]
[50.72945786 99.61392975]
[37.54146957 92.69104767]
[22.57106972 93.63291168]
[7.60066795 94.57476807]
[-7.36973286 95.51662445]
[-19.01506042 106.55138397]
[-34.88250351 104.18415833]
[-42.79991913 90.23087311]
[-36.69374466 75.39530182]
[-21.24811172 71.05802155]
[-8.31159115 80.54622650]
[6.65881014 79.60436249]
[21.62921143 78.66250610]
[36.59961319 77.72064972]
[48.81594086 69.19946289]
[63.07471085 76.05497742]
[78.04511261 75.11312103]
[81.09563446 68.26152802]
[72.27860260 56.12645721]
[87.19668579 54.55834579]
[90.24720764 47.70675659]
[80.92999268 35.95135498]
[71.61277771 24.19595337]
[62.29555893 12.44055080]
[52.97834396 0.68514901]
[43.66112518 -11.07025242]
[34.34391022 -22.82565498]
[25.02669334 -34.58105469]
[9.31936359 -37.84592056]
[2.20744562 -52.22646713]
[9.14659500 -66.69117737]
[24.81369019 -70.14395905]
[37.19027710 -59.93613434]
[36.78209686 -43.89827347]
[46.09931183 -32.14287186]
[55.41653061 -20.38747025]
[64.73374939 -8.63206768]
[74.05096436 3.12333417]
[83.36817932 14.87873554]
[92.68539429 26.63413811]
[102.00260925 38.38954163]
[111.71724701 95.45967102]
[126.55632782 97.65091705]
[141.39541626 99.84216309]
[156.23449707 102.03340912]
[171.23367310 101.87633514]
[186.02362061 99.37480164]
[200.81355286 96.87326813]
[215.60350037 94.37174225]
[230.39343262 91.87020874]
[245.18338013 89.36867523]
[250.61102295 75.06874847]
[262.38983154 65.46893311]
[277.29321289 63.06975555]
[291.30270386 68.41667938]
[300.69161987 79.98016357]
[315.48153687 77.47863007]
[330.27148438 74.97709656]
[345.06143188 72.47557068]
[353.18963623 62.40522385]
[365.60671997 60.65605927]
[375.54229736 67.62845612]
[390.38137817 65.43721008]
[405.22045898 63.24596024]
[410.71786499 59.38341522]
[416.47085571 58.98787689]
[420.72552490 61.28722000]
[435.64334106 59.71929169]
[450.56115723 58.15136719]
[458.37710571 44.87667847]
[472.34762573 38.82043457]
[487.03176880 42.11287308]
[496.84402466 53.28684235]
[511.76184082 51.71891403]
[526.67968750 50.15098953]
[539.59545898 41.01356125]
[553.06176758 47.37811661]
[567.97961426 45.81018829]
[576.57348633 32.74573517]
[591.56915283 28.31134987]
[605.88616943 34.60081100]
[612.76446533 48.64442825]
[608.95629883 63.81123352]
[596.25976562 72.93992615]
[580.66986084 71.72022247]
[569.54754639 60.72801590]
[554.62969971 62.29594421]
[542.78094482 71.32122040]
[528.24761963 65.06881714]
[513.32977295 66.63674164]
[498.41195679 68.20467377]
[491.13729858 81.17454529]
[477.45858765 87.44803619]
[462.53421021 84.42877197]
[452.12908936 73.06919098]
[437.21127319 74.63712311]
[422.29342651 76.20504761]
[407.41171265 78.08504486]
[392.57263184 80.27629089]
[377.73355103 82.46753693]
[364.62966919 94.09790802]
[347.56295776 87.26551056]
[332.77301025 89.76703644]
[317.98309326 92.26856995]
[303.19314575 94.77010345]
[298.12933350 108.77807617]
[286.65750122 118.43484497]
[271.79409790 121.07034302]
[257.51342773 115.87815857]
[247.68490601 104.15861511]
[232.89497375 106.66014862]
[218.10502625 109.16168213]
[203.31509399 111.66320801]
[188.52514648 114.16474152]
[173.73521423 116.66627502]
[187.49166870 122.64621735]
[198.23036194 133.11906433]
[204.55320740 146.72132874]
[205.63702393 161.68212891]
[201.34069824 176.05368042]
[192.22358704 187.96495056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 73]
[10 72]
[11 71]
[12 70]
[13 26]
[14 25]
[15 24]
[16 23]
[27 45]
[28 44]
[30 42]
[31 41]
[32 40]
[33 39]
[49 69]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[74 143]
[75 142]
[76 141]
[77 140]
[78 139]
[79 138]
[84 133]
[85 132]
[86 131]
[87 130]
[90 128]
[91 127]
[92 126]
[95 125]
[96 124]
[97 123]
[101 119]
[102 118]
[103 117]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
