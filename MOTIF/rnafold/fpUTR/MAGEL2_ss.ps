%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:57:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGGAGGGAGCCUCUGAACAGCCACGUAGGCAUUCUCUUCUCUCUGGAGGAAAAGGCCCAGCAGCUGUCCGAGGAAAAGACCCACCAGCUGUCAGCAAAGGGAC\
) } def
/len { sequence length } bind def

/coor [
[202.78639221 276.82199097]
[205.97320557 268.71093750]
[197.52340698 256.31735229]
[189.07359314 243.92376709]
[174.47447205 247.05339050]
[159.74948120 244.34785461]
[147.14810181 236.18878174]
[138.60754395 223.79338074]
[135.45486450 209.03280640]
[138.20095825 194.14985657]
[146.45797729 181.41812134]
[138.00817871 169.02453613]
[129.55836487 156.63095093]
[121.10856628 144.23736572]
[107.54618835 138.08018494]
[106.16513062 122.31936646]
[97.71532440 109.92578888]
[90.82051086 105.47948456]
[89.20464325 97.03264618]
[81.12937927 84.39183044]
[73.05412292 71.75102234]
[64.97885895 59.11020279]
[54.03804398 57.33716202]
[46.10566711 49.91703796]
[43.70748520 39.55057144]
[47.41764069 29.81496429]
[40.11280823 16.71384048]
[24.12244415 7.73728371]
[24.88006973 -9.72478485]
[17.18658066 -22.60151672]
[9.49309158 -35.47824860]
[-4.22708321 -43.35653305]
[-4.11281586 -58.25070190]
[-11.80630493 -71.12743378]
[-25.52647972 -79.00572205]
[-25.41221237 -93.89988708]
[-33.10570145 -106.77661896]
[-40.79919052 -119.65335083]
[-48.49267960 -132.53007507]
[-56.18616867 -145.40681458]
[-63.87965775 -158.28353882]
[-78.45851135 -165.79281616]
[-78.97434998 -182.18383789]
[-64.89652252 -190.59495544]
[-50.70708847 -182.37351990]
[-51.00292587 -165.97703552]
[-43.30943680 -153.10029602]
[-35.61594772 -140.22357178]
[-27.92245865 -127.34683990]
[-20.22896957 -114.47010803]
[-12.53547955 -101.59337616]
[0.63440478 -94.63611603]
[1.07042706 -78.82092285]
[8.76391602 -65.94419098]
[21.93380165 -58.98693466]
[22.36982346 -43.17173767]
[30.06331253 -30.29500580]
[37.75680161 -17.41827393]
[49.49713898 -14.10385132]
[55.98217773 -3.29825449]
[53.21393204 9.40900898]
[60.51876450 22.51013184]
[77.78894043 30.98716545]
[77.61967468 51.03494644]
[85.69493866 63.67575836]
[93.77019501 76.31657410]
[101.84545135 88.95738983]
[110.10890961 101.47599030]
[118.55870819 113.86956787]
[132.72547913 120.91323090]
[133.50215149 135.78756714]
[141.95195007 148.18115234]
[150.40174866 160.57473755]
[158.85154724 172.96832275]
[173.71983337 169.93350220]
[188.57722473 172.81459045]
[201.16564941 181.14196777]
[209.58399963 193.62071228]
[212.57527161 208.33184814]
[209.71414185 223.02738953]
[201.46717834 235.47396851]
[209.91697693 247.86753845]
[218.36677551 260.26113892]
[239.26979065 268.08294678]
[240.93983459 289.59698486]
[250.80891418 300.89306641]
[270.09976196 306.35253906]
[273.39361572 325.30694580]
[283.92059326 335.99258423]
[294.44754028 346.67822266]
[309.87069702 353.71832275]
[307.37527466 370.48764038]
[290.57052612 372.73193359]
[283.76190186 357.20520020]
[273.23495483 346.51956177]
[262.70797729 335.83392334]
[252.32257080 336.66506958]
[243.04457092 331.45608521]
[238.14663696 321.76116943]
[239.51284790 310.76214600]
[229.64376831 299.46606445]
[221.49339294 300.66793823]
[213.46588135 298.42965698]
[206.96636963 293.06271362]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[11 74]
[12 73]
[13 72]
[14 71]
[16 69]
[17 68]
[19 67]
[20 66]
[21 65]
[22 64]
[26 62]
[27 61]
[29 58]
[30 57]
[31 56]
[33 54]
[34 53]
[36 51]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[85 101]
[86 100]
[88 96]
[89 95]
[90 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
