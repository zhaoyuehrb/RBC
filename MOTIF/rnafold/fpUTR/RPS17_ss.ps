%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:51:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCGCCAGGGGGCGCUGUGUGGCUCCCGAGUAGGCUCAGAGCGACCGUGGCCGGGCGGAAGCGGCUUUCUGGCCUAAGCUUUAACAGGCUUCGCCUGUGCUUCCUGUUUCCUCUUUUACCAAGGACCCGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[48.82493591 198.10900879]
[34.82324600 192.72824097]
[24.82019234 181.55062866]
[21.02056122 167.03984070]
[24.26183128 152.39422607]
[33.82899857 140.84226990]
[19.18352699 144.08419800]
[4.53805304 147.32612610]
[-10.10741997 150.56805420]
[-21.90917206 161.10508728]
[-36.00788498 156.30139160]
[-50.65335846 159.54331970]
[-58.27570724 170.01930237]
[-70.60501099 172.38143921]
[-80.87923431 165.89295959]
[-95.59519196 168.79821777]
[-110.31114960 171.70349121]
[-125.02710724 174.60874939]
[-137.06736755 184.87242126]
[-151.05223083 179.74670410]
[-165.76818848 182.65197754]
[-173.66304016 187.42294312]
[-180.85467529 185.45108032]
[-195.63337708 188.01814270]
[-210.41207886 190.58522034]
[-225.19079590 193.15229797]
[-231.90739441 207.14039612]
[-245.57919312 214.47943115]
[-260.94909668 212.34741211]
[-272.10708618 201.56411743]
[-274.76263428 186.27597046]
[-267.89468384 172.36155701]
[-254.14407349 165.17126465]
[-238.79820251 167.46989441]
[-227.75787354 178.37359619]
[-212.97915649 175.80651855]
[-198.20045471 173.23944092]
[-183.42175293 170.67236328]
[-168.67344666 167.93601990]
[-153.95748901 165.03074646]
[-142.96981812 154.97488403]
[-127.93237305 159.89279175]
[-113.21641541 156.98753357]
[-98.50045776 154.08226013]
[-83.78450012 151.17700195]
[-71.27133179 138.92662048]
[-53.89529037 144.89784241]
[-39.24981689 141.65591431]
[-28.49560547 131.35076904]
[-13.34934998 135.92257690]
[1.29612303 132.68064880]
[15.94159603 129.43872070]
[30.58707047 126.19679260]
[44.70841980 121.13838196]
[58.08131790 114.34384918]
[71.45421600 107.54932404]
[84.82711029 100.75479126]
[85.67060852 84.96119690]
[102.57868958 73.77309418]
[111.56159973 61.76029587]
[120.54450226 49.74749374]
[129.52740479 37.73469162]
[138.51031494 25.72188950]
[147.49322510 13.70908737]
[152.87408447 -0.29256314]
[154.24804688 -15.22950554]
[155.62199402 -30.16644859]
[156.99594116 -45.10338974]
[149.64404297 -59.76222992]
[158.88777161 -73.30791473]
[175.21797180 -71.80580139]
[181.83554077 -56.80114365]
[171.93289185 -43.72943878]
[170.55892944 -28.79249763]
[169.18498230 -13.85555458]
[167.81103516 1.08138835]
[173.96833801 5.36362267]
[182.33525085 -7.08607006]
[190.70216370 -19.53576279]
[195.43869019 -33.76830292]
[210.43771362 -33.93921661]
[215.49734497 -19.81830215]
[203.80265808 -10.42473316]
[195.04281616 1.75167954]
[186.28295898 13.92809200]
[192.44027710 18.21032715]
[205.96545410 11.72421551]
[219.49061584 5.23810434]
[233.01579285 -1.24800706]
[246.54096985 -7.73411846]
[260.06616211 -14.22022915]
[271.73345947 -26.52104187]
[286.78338623 -18.71488762]
[283.44854736 -2.09215903]
[266.55224609 -0.69505435]
[253.02708435 5.79105663]
[239.50190735 12.27716827]
[225.97673035 18.76327896]
[212.45155334 25.24938965]
[198.92639160 31.73550224]
[159.50602722 22.69199371]
[150.52311707 34.70479584]
[141.54020691 46.71759796]
[132.55729675 58.73040009]
[123.57440186 70.74320221]
[114.59149170 82.75600433]
[128.24383545 76.54201508]
[141.21641541 84.07274628]
[142.59040833 99.00968170]
[131.20933533 108.78060913]
[116.65242004 105.16141510]
[127.67601013 115.33395386]
[138.69960022 125.50648499]
[149.72319031 135.67901611]
[164.62808228 131.69812012]
[179.31213379 136.42912292]
[189.08969116 148.36238098]
[190.84080505 163.69004822]
[184.00666809 177.52110291]
[170.76805115 185.44212341]
[155.34933472 184.92552185]
[142.67059326 176.13616943]
[136.77754211 161.87869263]
[139.55065918 146.70260620]
[128.52706909 136.53007507]
[117.50347137 126.35754395]
[106.47988129 116.18500519]
[91.62164307 114.12769318]
[78.24874115 120.92221832]
[64.87584686 127.71675110]
[51.50294876 134.51127625]
[66.22967529 137.36146545]
[78.03271484 146.61827087]
[84.31054688 160.24136353]
[83.67948151 175.22807312]
[76.27859497 188.27517700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 53]
[7 52]
[8 51]
[9 50]
[11 48]
[12 47]
[15 45]
[16 44]
[17 43]
[18 42]
[20 40]
[21 39]
[23 38]
[24 37]
[25 36]
[26 35]
[54 131]
[55 130]
[56 129]
[57 128]
[59 106]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
[65 76]
[66 75]
[67 74]
[68 73]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
[91 95]
[111 127]
[112 126]
[113 125]
[114 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
