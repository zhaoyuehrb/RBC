%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:25:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUGUCAAAGGCUGAAGCUGCUCCCUUUGCCACAUUAUAACUAGUAGGGGAUCCUCACCGACC\
) } def
/len { sequence length } bind def

/coor [
[57.97323227 108.96266937]
[57.44100952 94.05770874]
[43.17515945 89.42245483]
[28.90931320 84.78720093]
[14.64346504 80.15194702]
[0.37761721 75.51669312]
[-14.09551620 71.57608032]
[-28.74213219 68.33931732]
[-43.38874817 65.10255432]
[-58.03536606 61.86579132]
[-72.68198395 58.62902832]
[-87.32859802 55.39226532]
[-94.32157135 57.16850662]
[-100.14316559 55.17355347]
[-103.20022583 51.07088852]
[-117.46607208 46.43563461]
[-131.43223572 53.83304214]
[-146.51380920 49.10843658]
[-153.76313782 35.06483841]
[-148.87934875 20.03406715]
[-134.75988770 12.93361092]
[-119.78159332 17.97604561]
[-112.83081818 32.16978455]
[-98.56496429 36.80503845]
[-84.09183502 40.74565125]
[-69.44522095 43.98241425]
[-54.79860306 47.21917725]
[-40.15198517 50.45594025]
[-25.50536919 53.69270325]
[-10.85875320 56.92946625]
[-6.14377403 54.94289780]
[-0.11437517 56.17462158]
[5.01287222 61.25084305]
[19.27871895 65.88610077]
[33.54456711 70.52135468]
[47.81041718 75.15660858]
[62.07626343 79.79186249]
[71.26775360 68.04633331]
[83.92036438 60.14998245]
[98.50994873 57.05400848]
[113.27902985 59.13135529]
[126.44849396 66.13179016]
[136.43194580 77.21202850]
[142.02676392 91.03733063]
[142.55899048 105.94229126]
[156.82484436 110.57754517]
[171.19853210 114.86672974]
[185.67166138 118.80734253]
[200.14479065 122.74794769]
[215.85554504 118.04644012]
[227.59523010 129.49685669]
[223.28704834 145.31999207]
[207.36289978 149.23835754]
[196.20417786 137.22108459]
[181.73104858 133.28047180]
[167.25791931 129.33985901]
[159.70481873 130.67193604]
[152.18959045 124.84339142]
[137.92373657 120.20813751]
[128.73223877 131.95365906]
[116.07963562 139.85002136]
[101.49005127 142.94599915]
[86.72097015 140.86863708]
[73.55150604 133.86820984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 37]
[3 36]
[4 35]
[5 34]
[6 33]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[15 24]
[16 23]
[45 59]
[46 58]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
