%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:26:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCGCCCGGCCGCGGUGGGCUUGACGCAACGUCCAGCGCGCGCUUUUCAUGCCUUGGCGUUUCCUUUGGCGGAUUUUCUGUUUUCGGAAGUUGCUGGGUUCGUUUUAUUCAGCGGCAGUGGUGCUUUCCCGAAUCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[198.50868225 115.22045135]
[183.55426025 114.05189514]
[168.59985352 112.88333893]
[153.64543152 111.71478271]
[138.69102478 110.54622650]
[123.73661041 109.37767029]
[103.37896729 131.18270874]
[69.12601471 120.76720428]
[55.38235474 126.77651978]
[41.63869858 132.78584290]
[27.96284103 138.94789124]
[14.35647678 145.26191711]
[0.75011307 151.57592773]
[-12.85625076 157.88995361]
[-22.11736298 170.71736145]
[-36.91905594 169.05627441]
[-50.52541733 175.37030029]
[-64.13178253 181.68432617]
[-77.73814392 187.99835205]
[-91.34450531 194.31236267]
[-104.87969208 200.77757263]
[-118.34200287 207.39315796]
[-131.80432129 214.00875854]
[-143.35307312 226.42094421]
[-158.47721863 218.75956726]
[-155.30201721 202.10560608]
[-138.41990662 200.54643250]
[-124.95759583 193.93084717]
[-111.49527740 187.31526184]
[-106.84186554 181.49519348]
[-97.65853119 180.70600891]
[-84.05216980 174.39198303]
[-70.44580078 168.07795715]
[-56.83943939 161.76393127]
[-43.23307419 155.44992065]
[-34.94518280 143.07412720]
[-19.17027283 144.28359985]
[-5.56390858 137.96957397]
[8.04245567 131.65554810]
[21.64881897 125.34152985]
[26.43074417 119.62657928]
[35.62937927 119.04218292]
[49.37303543 113.03286743]
[63.11669159 107.02354431]
[64.77396393 99.70893860]
[50.14480209 96.39416504]
[53.45982361 81.76506042]
[68.08849335 85.07972717]
[69.74576569 77.76512146]
[59.93434143 66.41893768]
[50.12291336 55.07275009]
[40.31148911 43.72656250]
[24.65066719 38.86130905]
[21.29809761 22.80851364]
[33.70261765 12.08191299]
[49.10351944 17.71611595]
[51.65767670 33.91513824]
[61.46910095 45.26132584]
[71.28052521 56.60750961]
[81.09194946 67.95369720]
[89.51760864 65.82366180]
[97.87007904 65.77929688]
[105.65983582 67.66552734]
[112.46593475 71.21842194]
[117.95877075 76.08856964]
[121.91568756 81.86882782]
[124.22887421 88.12439728]
[124.90516663 94.42325592]
[139.85957336 95.59181213]
[154.81399536 96.76036835]
[169.76840210 97.92892456]
[184.72282410 99.09748840]
[199.67723083 100.26604462]
[207.60096741 92.66704559]
[218.19004822 90.76793671]
[227.85586548 94.96431732]
[233.45892334 103.62705231]
[248.34643555 105.46061707]
[263.23394775 107.29418945]
[278.12145996 109.12775421]
[291.66668701 98.11896515]
[308.65396118 100.23068237]
[318.68859863 113.68127441]
[333.61328125 115.18270874]
[348.53793335 116.68414307]
[363.46261597 118.18557739]
[378.38726807 119.68701172]
[384.79251099 106.97357178]
[396.08612061 97.69893646]
[410.53054810 93.68441772]
[425.73861694 95.90985870]
[439.06774902 104.29666138]
[448.07894897 117.67037201]
[462.96646118 115.83680725]
[477.85397339 114.00323486]
[492.74148560 112.16967010]
[507.62899780 110.33609772]
[522.51647949 108.50253296]
[537.40399170 106.66896057]
[545.76361084 93.45340729]
[560.67791748 88.75244904]
[575.10473633 94.78572845]
[582.23223877 108.70452118]
[578.69500732 123.93679047]
[566.16326904 133.29032898]
[550.55401611 132.34869385]
[539.23760986 121.55647278]
[524.35009766 123.39004517]
[509.46255493 125.22360992]
[494.57504272 127.05718231]
[479.68753052 128.89074707]
[464.80001831 130.72431946]
[449.91250610 132.55789185]
[446.27288818 147.10961914]
[458.54415894 155.73606873]
[470.81546021 164.36251831]
[483.08673096 172.98896790]
[499.46005249 173.90884399]
[506.60754395 188.66844177]
[497.17645264 202.08433533]
[480.86868286 200.35542297]
[474.46029663 185.26023865]
[462.18899536 176.63380432]
[449.91772461 168.00735474]
[437.64642334 159.38090515]
[418.28295898 167.86999512]
[398.08477783 165.04246521]
[382.95050049 152.51289368]
[376.88583374 134.61167908]
[361.96118164 133.11024475]
[347.03649902 131.60881042]
[332.11184692 130.10737610]
[317.18716431 128.60594177]
[308.40866089 138.10203552]
[295.56683350 140.82412720]
[283.33221436 135.55197144]
[276.28790283 124.01526642]
[261.40039062 122.18170166]
[246.51286316 120.34812927]
[231.62535095 118.51456451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[3 71]
[4 70]
[5 69]
[6 68]
[8 44]
[9 43]
[10 42]
[11 40]
[12 39]
[13 38]
[14 37]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 29]
[22 28]
[23 27]
[49 60]
[50 59]
[51 58]
[52 57]
[77 140]
[78 139]
[79 138]
[80 137]
[83 133]
[84 132]
[85 131]
[86 130]
[87 129]
[93 113]
[94 112]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
