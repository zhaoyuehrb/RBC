%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 01:54:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGCUCCUAUAAAGGGAGCCACCAGCGCUGGAGGCCGCUGCUCGCUGCGCCACCGCCUCCCGCCACCCCUGCCCGCCCGACAGCGCCGCCGCCUGCCCCGCC\
) } def
/len { sequence length } bind def

/coor [
[41.14583588 256.15884399]
[32.32774734 257.01458740]
[23.58402634 255.68962097]
[15.44480896 252.27214050]
[5.49796867 263.49981689]
[-4.44887114 274.72747803]
[-14.39571095 285.95513916]
[-24.34255028 297.18280029]
[-34.28939056 308.41046143]
[-34.75988007 324.44659424]
[-47.67677307 333.96151733]
[-63.13133240 329.65615845]
[-69.26814270 314.83322144]
[-61.37957001 300.86361694]
[-45.51705170 298.46359253]
[-35.57021332 287.23593140]
[-25.62337303 276.00827026]
[-15.67653179 264.78060913]
[-5.72969246 253.55296326]
[4.21714735 242.32530212]
[-2.94024968 221.61958313]
[3.31103683 200.49871826]
[20.77219200 186.87808228]
[43.01664734 185.94584656]
[49.98749542 172.66401672]
[56.95834351 159.38217163]
[57.28517532 151.87176514]
[64.34559631 145.80915833]
[71.71441650 132.74391174]
[72.26793671 125.24681091]
[79.50823975 119.40021515]
[87.26831055 106.56349182]
[87.74183655 92.58968353]
[99.89497375 85.67643738]
[107.65503693 72.83972168]
[115.41510773 60.00300217]
[117.22727203 50.87497711]
[123.60839844 46.90078354]
[131.75263977 34.30429459]
[139.89686584 21.70781136]
[148.04110718 9.11132622]
[150.12814331 0.04219992]
[156.62638855 -3.73745465]
[165.14735413 -16.08221245]
[173.66831970 -28.42697144]
[172.12475586 -41.34239960]
[179.61332703 -51.48085785]
[191.61869812 -53.65796280]
[200.50863647 -65.73973083]
[209.39857483 -77.82149506]
[199.74072266 -89.39687347]
[193.13430786 -102.94747162]
[189.96342468 -117.68547821]
[190.41241455 -132.75404358]
[194.45518494 -147.27711487]
[201.85668945 -160.41032410]
[212.18661499 -171.39013672]
[224.84439087 -179.57817078]
[239.09410095 -184.49842834]
[254.10731506 -185.86482239]
[269.01116943 -183.59791565]
[282.93914795 -177.82951355]
[295.08154297 -168.89498901]
[304.73236084 -157.31375122]
[311.33056641 -143.75915527]
[314.49252319 -129.01922607]
[314.03439331 -113.95092773]
[309.98281860 -99.43031311]
[302.57336426 -86.30159760]
[292.23678589 -75.32805634]
[279.57403564 -67.14768219]
[265.32131958 -62.23607254]
[250.30729675 -60.87878036]
[235.40483093 -63.15471649]
[221.48033142 -68.93156433]
[212.59040833 -56.84979630]
[203.70046997 -44.76802826]
[202.78582764 -27.31484413]
[186.01307678 -19.90600014]
[177.49211121 -7.56124163]
[168.97114563 4.78351641]
[160.63758850 17.25555992]
[152.49334717 29.85204506]
[144.34912109 42.44853210]
[136.20487976 55.04501724]
[128.25183105 67.76306915]
[120.49176025 80.59978485]
[112.73168945 93.43650818]
[112.25816345 107.41031647]
[100.10502625 114.32356262]
[92.34496307 127.16027832]
[84.77965546 140.11273193]
[77.41083527 153.17797852]
[70.24018097 166.35301208]
[63.26933670 179.63485718]
[56.29848862 192.91670227]
[62.43642426 199.50340271]
[66.76890564 207.37747192]
[69.03951263 216.05670166]
[69.11784363 225.01170349]
[67.00693512 233.69828796]
[62.84266663 241.59042358]
[56.88498306 248.21223450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 20]
[5 19]
[6 18]
[7 17]
[8 16]
[9 15]
[24 96]
[25 95]
[26 94]
[28 93]
[29 92]
[31 91]
[32 90]
[34 88]
[35 87]
[36 86]
[38 85]
[39 84]
[40 83]
[41 82]
[43 81]
[44 80]
[45 79]
[48 77]
[49 76]
[50 75]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
