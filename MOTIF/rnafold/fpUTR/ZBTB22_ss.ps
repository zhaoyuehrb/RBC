%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:51:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCAAGAUGGCGGCGGGAGGGGCCCAGGUUGCUGCUCUGGCCGCCGAGUGAGGGGCGGGGGGGGCCCGGGGGCGCGCGGCCCGAGACCCCCCCGGCCGCCCUCCUCCUUUCUUUGUUCCUGUGGCUGGGGGGGUAUCCCCUCCCUCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[116.63601685 173.05935669]
[104.02458954 181.18043518]
[89.05875397 182.19216919]
[75.46906281 175.84233093]
[66.64306641 163.71377563]
[64.78083801 148.82981873]
[70.34658051 134.90061951]
[81.95261383 125.39849091]
[90.53083801 113.09344482]
[77.10338593 119.77951813]
[63.67593384 126.46559143]
[50.24848557 133.15167236]
[36.82103729 139.83773804]
[23.39358711 146.52381897]
[14.48899078 159.60122681]
[-0.35280690 158.34811401]
[-13.78025627 165.03419495]
[-27.20770645 171.72027588]
[-40.63515472 178.40634155]
[-49.53975296 191.48376465]
[-64.38154602 190.23065186]
[-77.80899811 196.91671753]
[-91.23645020 203.60279846]
[-94.71862030 218.84774780]
[-107.21652222 228.24649048]
[-122.82902527 227.36123657]
[-134.18438721 216.60997009]
[-135.92094421 201.06910706]
[-127.21876526 188.07656860]
[-112.18672943 183.76704407]
[-97.92252350 190.17535400]
[-84.49507141 183.48927307]
[-71.06762695 176.80319214]
[-63.12345123 164.20401001]
[-47.32123184 164.97889709]
[-33.89377975 158.29281616]
[-20.46633148 151.60675049]
[-7.03888226 144.92066956]
[0.90529287 132.32148743]
[16.70751190 133.09637451]
[30.13496208 126.41029358]
[43.56241226 119.72422028]
[56.98986053 113.03814697]
[70.41731262 106.35207367]
[83.84475708 99.66599274]
[92.51136780 87.42304230]
[94.35469055 72.53673553]
[96.19801331 57.65042496]
[90.21524048 43.00402832]
[99.45792389 31.32404518]
[101.30125427 16.43773842]
[103.14457703 1.55143058]
[104.98789978 -13.33487701]
[106.83122253 -28.22118568]
[108.67455292 -43.10749054]
[106.61561584 -52.07167435]
[110.71159363 -58.27934647]
[112.86016846 -73.12467194]
[115.00875092 -87.96999359]
[117.15732574 -102.81531525]
[119.30590820 -117.66063690]
[113.62510681 -132.42678833]
[123.10565948 -143.91453552]
[125.25424194 -158.75985718]
[127.40281677 -173.60517883]
[129.55139160 -188.45050049]
[123.87060547 -203.21664429]
[133.35115051 -214.70440674]
[135.49972534 -229.54972839]
[137.64831543 -244.39505005]
[139.79689026 -259.24035645]
[141.94546509 -274.08569336]
[129.99517822 -283.63229370]
[124.46434784 -297.78527832]
[126.74510193 -312.70721436]
[136.12591553 -324.40579224]
[150.00932312 -329.80178833]
[152.15789795 -344.64709473]
[148.44268799 -361.18896484]
[163.30961609 -369.33825684]
[175.25598145 -357.30825806]
[167.00321960 -342.49853516]
[164.85464478 -327.65319824]
[176.63844299 -318.54235840]
[182.31752014 -304.66418457]
[180.27395630 -289.70788574]
[170.95739746 -277.70379639]
[156.79078674 -271.93710327]
[154.64221191 -257.09179688]
[152.49363708 -242.24647522]
[150.34506226 -227.40113831]
[148.19647217 -212.55581665]
[154.03096008 -198.85151672]
[144.39672852 -186.30192566]
[142.24813843 -171.45660400]
[140.09956360 -156.61128235]
[137.95098877 -141.76596069]
[143.78546143 -128.06164551]
[134.15122986 -115.51205444]
[132.00265503 -100.66673279]
[129.85406494 -85.82141113]
[127.70549011 -70.97608948]
[125.55691528 -56.13076782]
[123.56085968 -41.26416779]
[121.71752930 -26.37786102]
[119.87420654 -11.49155235]
[118.03088379 3.39475489]
[116.18756104 18.28106308]
[114.34423828 33.16736984]
[120.45885468 46.74900055]
[111.08432007 59.49375153]
[109.24099731 74.38005829]
[107.39767456 89.26636505]
[110.80312347 74.65805054]
[123.02947235 65.96803284]
[137.94537354 67.55425262]
[148.07067871 78.62123108]
[148.32768250 93.61903381]
[138.58750916 105.02644348]
[123.73286438 107.12237549]
[133.83830261 118.20750427]
[143.94372559 129.29264832]
[154.04916382 140.37777710]
[164.15460205 151.46290588]
[177.01852417 152.84967041]
[185.20744324 162.34245300]
[184.72322083 174.46795654]
[194.59892273 185.75823975]
[204.47462463 197.04850769]
[214.35032654 208.33879089]
[224.22604370 219.62907410]
[234.10174561 230.91935730]
[243.97744751 242.20964050]
[259.66564941 246.98587036]
[263.10934448 263.01937866]
[250.76594543 273.81625366]
[235.33328247 268.26959229]
[232.68716431 252.08534241]
[222.81146240 240.79505920]
[212.93576050 229.50477600]
[203.06005859 218.21450806]
[193.18434143 206.92422485]
[183.30863953 195.63394165]
[173.43293762 184.34365845]
[156.55900574 179.61976624]
[153.06947327 161.56834412]
[142.96403503 150.48321533]
[132.85859680 139.39807129]
[122.75316620 128.31294250]
[112.64772797 117.22780609]
[116.20158386 131.80073547]
[123.59140778 144.85411072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 45]
[10 44]
[11 43]
[12 42]
[13 41]
[14 40]
[16 38]
[17 37]
[18 36]
[19 35]
[21 33]
[22 32]
[23 31]
[46 113]
[47 112]
[48 111]
[50 109]
[51 108]
[52 107]
[53 106]
[54 105]
[55 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[63 97]
[64 96]
[65 95]
[66 94]
[68 92]
[69 91]
[70 90]
[71 89]
[72 88]
[77 83]
[78 82]
[120 150]
[121 149]
[122 148]
[123 147]
[124 146]
[127 144]
[128 143]
[129 142]
[130 141]
[131 140]
[132 139]
[133 138]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
