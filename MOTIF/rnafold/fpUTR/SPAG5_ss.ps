%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 03:58:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAAGCGCAGAGCAGGUUCAAACACAGACGGCGGGUGAACAUGGCGUCCUCGACUUGGUCUGAGACGUGAUAGGCCUGCCUUCUGGUUGAAG\
) } def
/len { sequence length } bind def

/coor [
[37.50377274 262.73718262]
[31.26627541 272.58486938]
[21.78822517 279.28109741]
[10.52394009 281.84695435]
[-0.81656879 279.93362427]
[-9.38559246 292.24505615]
[-7.98198891 308.22659302]
[-19.70060349 319.18350220]
[-35.55191803 316.71057129]
[-43.37615967 302.70483398]
[-37.17124176 287.91027832]
[-21.69704437 283.67605591]
[-13.12802029 271.36459351]
[-20.34211922 254.35665894]
[-16.04963112 236.23747253]
[-1.74947512 224.08442688]
[17.11615753 222.74957275]
[24.39568710 209.63438416]
[31.67521667 196.51918030]
[38.95474625 183.40397644]
[39.45825195 175.87347412]
[46.70808792 169.97479248]
[54.42641830 157.11294556]
[55.18397522 149.60372925]
[62.62889862 143.95327759]
[70.77722168 131.35943604]
[78.92555237 118.76560211]
[87.07387543 106.17176056]
[87.97377014 92.21892548]
[100.33228302 85.67990875]
[108.48061371 73.08606720]
[116.62893677 60.49222946]
[124.77726746 47.89839172]
[132.92558289 35.30455399]
[141.07391357 22.71071434]
[149.22224426 10.11687469]
[144.44216919 -1.03559697]
[145.72512817 -12.97939110]
[152.62413025 -22.66478729]
[163.27357483 -27.67726707]
[174.89228821 -26.83898544]
[183.87222290 -38.85400391]
[185.93629456 -54.53998947]
[199.75321960 -60.10251236]
[208.73316956 -72.11753082]
[217.71310425 -84.13254547]
[226.69305420 -96.14756012]
[235.67298889 -108.16258240]
[238.38604736 -117.10649872]
[245.16473389 -120.42488861]
[254.54534912 -132.12976074]
[263.72692871 -143.99139404]
[272.70687866 -156.00640869]
[281.68682861 -168.02142334]
[286.32598877 -184.32830811]
[303.27984619 -184.38462830]
[308.02725220 -168.10893250]
[293.70184326 -159.04148865]
[284.72189331 -147.02647400]
[275.74194336 -135.01145935]
[274.22857666 -127.61740875]
[266.25021362 -122.74914551]
[256.86959839 -111.04427338]
[247.68800354 -99.18264008]
[238.70806885 -87.16761780]
[229.72811890 -75.15260315]
[220.74818420 -63.13758850]
[211.76823425 -51.12257004]
[210.34648132 -36.29597855]
[195.88723755 -29.87405968]
[186.90730286 -17.85904312]
[190.71688843 -0.11007988]
[180.33898926 15.16490078]
[161.81608582 18.26519966]
[153.66775513 30.85903931]
[145.51942444 43.45287704]
[137.37110901 56.04671860]
[129.22277832 68.64055634]
[121.07444763 81.23439789]
[112.92612457 93.82823944]
[112.02622986 107.78107452]
[99.66771698 114.32009125]
[91.51938629 126.91393280]
[83.37106323 139.50776672]
[75.22273254 152.10160828]
[67.28827667 164.83126831]
[59.56994629 177.69313049]
[52.06994629 190.68351746]
[44.79041672 203.79870605]
[37.51088715 216.91390991]
[30.23135757 230.02911377]
[36.98612976 239.72038269]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 13]
[6 12]
[17 91]
[18 90]
[19 89]
[20 88]
[22 87]
[23 86]
[25 85]
[26 84]
[27 83]
[28 82]
[30 80]
[31 79]
[32 78]
[33 77]
[34 76]
[35 75]
[36 74]
[41 71]
[42 70]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[50 63]
[51 62]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
