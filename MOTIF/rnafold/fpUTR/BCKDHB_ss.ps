%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 02:16:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUGUGGAAGCCUCCUCGGGUGCUCCGCCCUCCCCGCAGGCGGCGUGCGGCUGCAUAGCCUGAGAAUCCCGGUGGUGAGCGGGG\
) } def
/len { sequence length } bind def

/coor [
[-0.14803503 173.72871399]
[-12.78123283 179.03262329]
[-26.26945496 177.35308838]
[-37.04192352 169.24417114]
[-50.92648697 174.92034912]
[-64.81105042 180.59651184]
[-78.69561768 186.27267456]
[-92.58018494 191.94883728]
[-103.36690521 206.73350525]
[-120.59200287 203.97244263]
[-134.25733948 210.15779114]
[-147.92268372 216.34312439]
[-161.58802795 222.52847290]
[-170.70039368 236.16287231]
[-187.04435730 234.81867981]
[-193.80664062 219.87867737]
[-184.03079224 206.71186829]
[-167.77336121 208.86314392]
[-154.10803223 202.67779541]
[-140.44268799 196.49244690]
[-126.77734375 190.30709839]
[-122.12351227 178.97863770]
[-110.58914185 173.78141785]
[-98.25634766 178.06427002]
[-84.37178040 172.38810730]
[-70.48722076 166.71194458]
[-56.60265350 161.03578186]
[-42.71809006 155.35961914]
[-39.39831924 139.39682007]
[-27.15365410 128.38337708]
[-10.60190201 126.73480225]
[3.85804868 135.28424072]
[17.52338791 129.09889221]
[31.18872833 122.91355133]
[44.85406876 116.72820282]
[58.51940918 110.54286194]
[72.18474579 104.35751343]
[74.53916931 87.98241425]
[85.68444824 75.75662231]
[101.77246094 71.90134430]
[106.67053986 57.72358322]
[111.56861877 43.54582596]
[116.46669769 29.36806870]
[121.36478424 15.19031143]
[115.66801453 0.19276430]
[123.96535492 -13.53799629]
[139.89178467 -15.46890450]
[151.22991943 -4.11873436]
[149.28210449 11.80563641]
[135.54254150 20.08839226]
[130.64445496 34.26615143]
[125.74637604 48.44390869]
[120.84829712 62.62166595]
[115.95021820 76.79942322]
[120.90971375 81.14635468]
[124.72194672 86.52774048]
[127.17773438 92.64832306]
[128.14233398 99.17227936]
[142.71154785 102.74131012]
[157.28076172 106.31033325]
[166.57386780 94.24559021]
[179.97380066 87.00944519]
[195.15893555 85.85562134]
[209.49838257 90.98401642]
[220.50772095 101.50610352]
[226.27952576 115.59886932]
[225.81378174 130.82066345]
[219.19120789 144.53421021]
[207.55920410 154.36355591]
[192.93305969 158.60571289]
[177.84686279 156.52569580]
[164.91438293 148.48388672]
[156.37623596 135.87356567]
[153.71174622 120.87955475]
[139.14251709 117.31052399]
[124.57331085 113.74149323]
[111.35774231 125.76194763]
[93.56938934 127.41027832]
[78.37009430 118.02285767]
[64.70475006 124.20819855]
[51.03941345 130.39353943]
[37.37407303 136.57888794]
[23.70873260 142.76423645]
[10.04339314 148.94958496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 28]
[5 27]
[6 26]
[7 25]
[8 24]
[10 21]
[11 20]
[12 19]
[13 18]
[32 84]
[33 83]
[34 82]
[35 81]
[36 80]
[37 79]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[58 76]
[59 75]
[60 74]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
