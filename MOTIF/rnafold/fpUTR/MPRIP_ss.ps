%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Mar 18 00:46:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGCCGCGCUGAGCCCCUAGCCCGCCGGGAGCGCCAGGCCGGCCAGGCCUGCGCCGCCGCCGCCGCCGCCGUCGCCGCCGCGCCGACC\
) } def
/len { sequence length } bind def

/coor [
[141.32926941 302.67822266]
[137.70043945 288.12377930]
[134.07160950 273.56933594]
[130.44279480 259.01489258]
[126.81395721 244.46046448]
[116.22748566 233.98307800]
[120.39639282 218.72100830]
[116.76756287 204.16656494]
[113.13873291 189.61213684]
[102.55226135 179.13473511]
[106.72116089 163.87266541]
[103.09233856 149.31823730]
[98.31533051 143.46293640]
[99.60028839 134.19252014]
[96.48161316 119.52030945]
[88.86692810 116.41573334]
[83.16580200 110.48958588]
[80.35816956 102.76047516]
[80.92661285 94.55689240]
[84.77341461 87.28887939]
[91.23738861 82.20566559]
[90.19104004 67.24221039]
[79.52578735 52.35660172]
[87.56528473 36.86349869]
[85.99736023 21.94567108]
[76.85993195 9.02986526]
[83.22448730 -4.43645382]
[81.65655518 -19.35428238]
[80.08863068 -34.27210999]
[68.09002686 -44.20545578]
[66.71244049 -59.35659027]
[76.25630951 -70.73420715]
[74.68838501 -85.65203857]
[73.12045288 -100.56986237]
[71.55252838 -115.48769379]
[67.46574402 -123.90729523]
[70.19956207 -130.95219421]
[69.15321350 -145.91564941]
[68.10686493 -160.87911987]
[67.06051636 -175.84257507]
[66.01416779 -190.80603027]
[54.89838028 -202.37403870]
[57.15477753 -218.25762939]
[71.05244446 -226.27226257]
[85.93028259 -220.26980591]
[90.37528992 -204.85482788]
[80.97763062 -191.85238647]
[82.02397919 -176.88891602]
[83.07032776 -161.92546082]
[84.11667633 -146.96200562]
[85.16301727 -131.99853516]
[86.47035980 -117.05561829]
[88.03828430 -102.13778687]
[89.60620880 -87.21996307]
[91.17414093 -72.30213165]
[102.87499237 -63.15742874]
[104.67760468 -48.05096436]
[95.00645447 -35.84003830]
[96.57438660 -20.92220879]
[98.14231110 -6.00438070]
[107.16758728 5.84440184]
[100.91518402 20.37774277]
[102.48310852 35.29557037]
[111.76201630 43.26753998]
[113.07505035 55.83607483]
[105.15449524 66.19586182]
[106.20084381 81.15932465]
[119.64183044 97.23952484]
[111.15383148 116.40163422]
[114.27250671 131.07385254]
[117.64677429 145.68940735]
[121.27559662 160.24383545]
[132.12162781 171.76226807]
[127.69316864 185.98330688]
[131.32199097 200.53773499]
[134.95082092 215.09217834]
[145.79685974 226.61059570]
[141.36839294 240.83163452]
[144.99722290 255.38607788]
[148.62605286 269.94052124]
[152.25488281 284.49496460]
[155.88371277 299.04937744]
[170.32080078 304.73709106]
[178.62907410 317.84252930]
[177.61383057 333.32635498]
[167.66546631 345.23474121]
[152.60931396 348.98864746]
[138.23477173 343.14465332]
[130.06915283 329.94989014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[7 76]
[8 75]
[9 74]
[11 72]
[12 71]
[14 70]
[15 69]
[21 67]
[22 66]
[24 63]
[25 62]
[27 60]
[28 59]
[29 58]
[32 55]
[33 54]
[34 53]
[35 52]
[37 51]
[38 50]
[39 49]
[40 48]
[41 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
